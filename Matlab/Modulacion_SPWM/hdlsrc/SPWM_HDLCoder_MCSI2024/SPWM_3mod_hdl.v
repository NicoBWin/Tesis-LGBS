// -------------------------------------------------------------
// 
// File Name: hdlsrc\SPWM_HDLCoder_MCSI2024\SPWM_3mod_hdl.v
// Created: 2024-12-20 19:47:54
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.5e-08
// Target subsystem base rate: 2.5e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2.5e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// g_1                           ce_out        2.5e-08
// g_2                           ce_out        2.5e-08
// g_3                           ce_out        2.5e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SPWM_3mod_hdl
// Source Path: SPWM_HDLCoder_MCSI2024/SPWM_3mod_hdl
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SPWM_3mod_hdl
          (clk,
           reset,
           clk_enable,
           alpha3_phase_Vab0,
           alpha3_phase_Vab1,
           alpha3_phase_Vab2,
           ce_out,
           g_1,
           g_2,
           g_3);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [7:0] alpha3_phase_Vab0;  // uint8
  input   [7:0] alpha3_phase_Vab1;  // uint8
  input   [7:0] alpha3_phase_Vab2;  // uint8
  output  ce_out;
  output  [5:0] g_1;  // ufix6
  output  [5:0] g_2;  // ufix6
  output  [5:0] g_3;  // ufix6


  wire enb;
  reg [15:0] HDL_Counter2_out1;  // uint16
  wire Compare_To_Constant2_out1;
  reg  Delay_out1;
  wire Compare_To_Constant_out1;
  reg [7:0] HDL_Counter_count;  // ufix8
  wire [7:0] HDL_Counter_count_next;  // ufix8
  wire [7:0] HDL_Counter_count_step;  // ufix8
  wire [7:0] HDL_Counter_out1;  // uint8
  wire Relational_Operator_relop1;
  wire Relational_Operator1_relop1;
  wire Relational_Operator2_relop1;
  wire [5:0] y;  // ufix6
  wire Compare_To_Zero_out1;
  wire [5:0] y_1;  // ufix6
  wire [5:0] y_2;  // ufix6
  wire [5:0] Switch_out1;  // ufix6
  reg [15:0] Delay1_reg [0:82];  // ufix16 [83]
  wire [15:0] Delay1_reg_next [0:82];  // ufix16 [83]
  wire [15:0] Delay1_out1;  // uint16
  wire Compare_To_Constant8_out1;
  wire Compare_To_Constant10_out1;
  wire Logical_Operator2_out1;
  reg [7:0] HDL_Counter4_count;  // ufix8
  wire [7:0] HDL_Counter4_count_next;  // ufix8
  wire [7:0] HDL_Counter4_count_step;  // ufix8
  wire [7:0] HDL_Counter4_out1;  // uint8
  wire Relational_Operator3_relop1;
  wire Relational_Operator4_relop1;
  wire Relational_Operator5_relop1;
  wire [5:0] y_3;  // ufix6
  wire Compare_To_Zero1_out1;
  wire [5:0] y_4;  // ufix6
  wire [5:0] Switch1_out1;  // ufix6
  reg [15:0] Delay2_reg [0:82];  // ufix16 [83]
  wire [15:0] Delay2_reg_next [0:82];  // ufix16 [83]
  wire [15:0] Delay2_out1;  // uint16
  wire Compare_To_Constant12_out1;
  wire Compare_To_Constant11_out1;
  wire Logical_Operator3_out1;
  reg [7:0] HDL_Counter5_count;  // ufix8
  wire [7:0] HDL_Counter5_count_next;  // ufix8
  wire [7:0] HDL_Counter5_count_step;  // ufix8
  wire [7:0] HDL_Counter5_out1;  // uint8
  wire Relational_Operator6_relop1;
  wire Relational_Operator7_relop1;
  wire Relational_Operator8_relop1;
  wire [5:0] y_5;  // ufix6
  wire Compare_To_Zero2_out1;
  wire [5:0] y_6;  // ufix6
  wire [5:0] Switch2_out1;  // ufix6


  assign enb = clk_enable;

  assign Compare_To_Constant2_out1 = HDL_Counter2_out1 == 16'b0000000011111000;


  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Compare_To_Constant2_out1;
        end
      end
    end


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter2_process
      if (reset == 1'b1) begin
        HDL_Counter2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          if (Delay_out1 == 1'b1) begin
            HDL_Counter2_out1 <= 16'b0000000000000000;
          end
          else begin
            HDL_Counter2_out1 <= HDL_Counter2_out1 + 16'b0000000000000001;
          end
        end
      end
    end


  assign Compare_To_Constant_out1 = HDL_Counter2_out1 <= 16'b0000000001111100;


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_count <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_count <= HDL_Counter_count_next;
        end
      end
    end

  assign HDL_Counter_out1 = HDL_Counter_count;
  assign HDL_Counter_count_step = (Compare_To_Constant_out1 == 1'b1 ? 8'b00000001 :
              8'b11111111);
  assign HDL_Counter_count_next = HDL_Counter_count + HDL_Counter_count_step;


  assign Relational_Operator_relop1 = alpha3_phase_Vab0 >= HDL_Counter_out1;


  assign Relational_Operator1_relop1 = alpha3_phase_Vab1 >= HDL_Counter_out1;


  assign Relational_Operator2_relop1 = alpha3_phase_Vab2 >= HDL_Counter_out1;


  tabla_spwm_g1 u_tabla_spwm_g1 (.In2(Relational_Operator_relop1),
                                 .In3(Relational_Operator1_relop1),
                                 .In4(Relational_Operator2_relop1),
                                 .g_out(y)  // ufix6
                                 );
  assign Compare_To_Zero_out1 = y != 6'b000000;


  Maximum_Calculator u_Maximum_Calculator (.alpha3_phase_Vab0(alpha3_phase_Vab0),  // uint8
                                           .alpha3_phase_Vab120(alpha3_phase_Vab1),  // uint8
                                           .alpha3_phase_Vab240(alpha3_phase_Vab2),  // uint8
                                           .g_max(y_1)  // ufix6
                                           );
  assign y_2 = y_1;
  assign Switch_out1 = (Compare_To_Zero_out1 == 1'b0 ? y_2 :
              y);


  assign g_1 = Switch_out1;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 16'b0000000011111010;
        Delay1_reg[1] <= 16'b0000000011111010;
        Delay1_reg[2] <= 16'b0000000011111010;
        Delay1_reg[3] <= 16'b0000000011111010;
        Delay1_reg[4] <= 16'b0000000011111010;
        Delay1_reg[5] <= 16'b0000000011111010;
        Delay1_reg[6] <= 16'b0000000011111010;
        Delay1_reg[7] <= 16'b0000000011111010;
        Delay1_reg[8] <= 16'b0000000011111010;
        Delay1_reg[9] <= 16'b0000000011111010;
        Delay1_reg[10] <= 16'b0000000011111010;
        Delay1_reg[11] <= 16'b0000000011111010;
        Delay1_reg[12] <= 16'b0000000011111010;
        Delay1_reg[13] <= 16'b0000000011111010;
        Delay1_reg[14] <= 16'b0000000011111010;
        Delay1_reg[15] <= 16'b0000000011111010;
        Delay1_reg[16] <= 16'b0000000011111010;
        Delay1_reg[17] <= 16'b0000000011111010;
        Delay1_reg[18] <= 16'b0000000011111010;
        Delay1_reg[19] <= 16'b0000000011111010;
        Delay1_reg[20] <= 16'b0000000011111010;
        Delay1_reg[21] <= 16'b0000000011111010;
        Delay1_reg[22] <= 16'b0000000011111010;
        Delay1_reg[23] <= 16'b0000000011111010;
        Delay1_reg[24] <= 16'b0000000011111010;
        Delay1_reg[25] <= 16'b0000000011111010;
        Delay1_reg[26] <= 16'b0000000011111010;
        Delay1_reg[27] <= 16'b0000000011111010;
        Delay1_reg[28] <= 16'b0000000011111010;
        Delay1_reg[29] <= 16'b0000000011111010;
        Delay1_reg[30] <= 16'b0000000011111010;
        Delay1_reg[31] <= 16'b0000000011111010;
        Delay1_reg[32] <= 16'b0000000011111010;
        Delay1_reg[33] <= 16'b0000000011111010;
        Delay1_reg[34] <= 16'b0000000011111010;
        Delay1_reg[35] <= 16'b0000000011111010;
        Delay1_reg[36] <= 16'b0000000011111010;
        Delay1_reg[37] <= 16'b0000000011111010;
        Delay1_reg[38] <= 16'b0000000011111010;
        Delay1_reg[39] <= 16'b0000000011111010;
        Delay1_reg[40] <= 16'b0000000011111010;
        Delay1_reg[41] <= 16'b0000000011111010;
        Delay1_reg[42] <= 16'b0000000011111010;
        Delay1_reg[43] <= 16'b0000000011111010;
        Delay1_reg[44] <= 16'b0000000011111010;
        Delay1_reg[45] <= 16'b0000000011111010;
        Delay1_reg[46] <= 16'b0000000011111010;
        Delay1_reg[47] <= 16'b0000000011111010;
        Delay1_reg[48] <= 16'b0000000011111010;
        Delay1_reg[49] <= 16'b0000000011111010;
        Delay1_reg[50] <= 16'b0000000011111010;
        Delay1_reg[51] <= 16'b0000000011111010;
        Delay1_reg[52] <= 16'b0000000011111010;
        Delay1_reg[53] <= 16'b0000000011111010;
        Delay1_reg[54] <= 16'b0000000011111010;
        Delay1_reg[55] <= 16'b0000000011111010;
        Delay1_reg[56] <= 16'b0000000011111010;
        Delay1_reg[57] <= 16'b0000000011111010;
        Delay1_reg[58] <= 16'b0000000011111010;
        Delay1_reg[59] <= 16'b0000000011111010;
        Delay1_reg[60] <= 16'b0000000011111010;
        Delay1_reg[61] <= 16'b0000000011111010;
        Delay1_reg[62] <= 16'b0000000011111010;
        Delay1_reg[63] <= 16'b0000000011111010;
        Delay1_reg[64] <= 16'b0000000011111010;
        Delay1_reg[65] <= 16'b0000000011111010;
        Delay1_reg[66] <= 16'b0000000011111010;
        Delay1_reg[67] <= 16'b0000000011111010;
        Delay1_reg[68] <= 16'b0000000011111010;
        Delay1_reg[69] <= 16'b0000000011111010;
        Delay1_reg[70] <= 16'b0000000011111010;
        Delay1_reg[71] <= 16'b0000000011111010;
        Delay1_reg[72] <= 16'b0000000011111010;
        Delay1_reg[73] <= 16'b0000000011111010;
        Delay1_reg[74] <= 16'b0000000011111010;
        Delay1_reg[75] <= 16'b0000000011111010;
        Delay1_reg[76] <= 16'b0000000011111010;
        Delay1_reg[77] <= 16'b0000000011111010;
        Delay1_reg[78] <= 16'b0000000011111010;
        Delay1_reg[79] <= 16'b0000000011111010;
        Delay1_reg[80] <= 16'b0000000011111010;
        Delay1_reg[81] <= 16'b0000000011111010;
        Delay1_reg[82] <= 16'b0000000011111010;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
          Delay1_reg[2] <= Delay1_reg_next[2];
          Delay1_reg[3] <= Delay1_reg_next[3];
          Delay1_reg[4] <= Delay1_reg_next[4];
          Delay1_reg[5] <= Delay1_reg_next[5];
          Delay1_reg[6] <= Delay1_reg_next[6];
          Delay1_reg[7] <= Delay1_reg_next[7];
          Delay1_reg[8] <= Delay1_reg_next[8];
          Delay1_reg[9] <= Delay1_reg_next[9];
          Delay1_reg[10] <= Delay1_reg_next[10];
          Delay1_reg[11] <= Delay1_reg_next[11];
          Delay1_reg[12] <= Delay1_reg_next[12];
          Delay1_reg[13] <= Delay1_reg_next[13];
          Delay1_reg[14] <= Delay1_reg_next[14];
          Delay1_reg[15] <= Delay1_reg_next[15];
          Delay1_reg[16] <= Delay1_reg_next[16];
          Delay1_reg[17] <= Delay1_reg_next[17];
          Delay1_reg[18] <= Delay1_reg_next[18];
          Delay1_reg[19] <= Delay1_reg_next[19];
          Delay1_reg[20] <= Delay1_reg_next[20];
          Delay1_reg[21] <= Delay1_reg_next[21];
          Delay1_reg[22] <= Delay1_reg_next[22];
          Delay1_reg[23] <= Delay1_reg_next[23];
          Delay1_reg[24] <= Delay1_reg_next[24];
          Delay1_reg[25] <= Delay1_reg_next[25];
          Delay1_reg[26] <= Delay1_reg_next[26];
          Delay1_reg[27] <= Delay1_reg_next[27];
          Delay1_reg[28] <= Delay1_reg_next[28];
          Delay1_reg[29] <= Delay1_reg_next[29];
          Delay1_reg[30] <= Delay1_reg_next[30];
          Delay1_reg[31] <= Delay1_reg_next[31];
          Delay1_reg[32] <= Delay1_reg_next[32];
          Delay1_reg[33] <= Delay1_reg_next[33];
          Delay1_reg[34] <= Delay1_reg_next[34];
          Delay1_reg[35] <= Delay1_reg_next[35];
          Delay1_reg[36] <= Delay1_reg_next[36];
          Delay1_reg[37] <= Delay1_reg_next[37];
          Delay1_reg[38] <= Delay1_reg_next[38];
          Delay1_reg[39] <= Delay1_reg_next[39];
          Delay1_reg[40] <= Delay1_reg_next[40];
          Delay1_reg[41] <= Delay1_reg_next[41];
          Delay1_reg[42] <= Delay1_reg_next[42];
          Delay1_reg[43] <= Delay1_reg_next[43];
          Delay1_reg[44] <= Delay1_reg_next[44];
          Delay1_reg[45] <= Delay1_reg_next[45];
          Delay1_reg[46] <= Delay1_reg_next[46];
          Delay1_reg[47] <= Delay1_reg_next[47];
          Delay1_reg[48] <= Delay1_reg_next[48];
          Delay1_reg[49] <= Delay1_reg_next[49];
          Delay1_reg[50] <= Delay1_reg_next[50];
          Delay1_reg[51] <= Delay1_reg_next[51];
          Delay1_reg[52] <= Delay1_reg_next[52];
          Delay1_reg[53] <= Delay1_reg_next[53];
          Delay1_reg[54] <= Delay1_reg_next[54];
          Delay1_reg[55] <= Delay1_reg_next[55];
          Delay1_reg[56] <= Delay1_reg_next[56];
          Delay1_reg[57] <= Delay1_reg_next[57];
          Delay1_reg[58] <= Delay1_reg_next[58];
          Delay1_reg[59] <= Delay1_reg_next[59];
          Delay1_reg[60] <= Delay1_reg_next[60];
          Delay1_reg[61] <= Delay1_reg_next[61];
          Delay1_reg[62] <= Delay1_reg_next[62];
          Delay1_reg[63] <= Delay1_reg_next[63];
          Delay1_reg[64] <= Delay1_reg_next[64];
          Delay1_reg[65] <= Delay1_reg_next[65];
          Delay1_reg[66] <= Delay1_reg_next[66];
          Delay1_reg[67] <= Delay1_reg_next[67];
          Delay1_reg[68] <= Delay1_reg_next[68];
          Delay1_reg[69] <= Delay1_reg_next[69];
          Delay1_reg[70] <= Delay1_reg_next[70];
          Delay1_reg[71] <= Delay1_reg_next[71];
          Delay1_reg[72] <= Delay1_reg_next[72];
          Delay1_reg[73] <= Delay1_reg_next[73];
          Delay1_reg[74] <= Delay1_reg_next[74];
          Delay1_reg[75] <= Delay1_reg_next[75];
          Delay1_reg[76] <= Delay1_reg_next[76];
          Delay1_reg[77] <= Delay1_reg_next[77];
          Delay1_reg[78] <= Delay1_reg_next[78];
          Delay1_reg[79] <= Delay1_reg_next[79];
          Delay1_reg[80] <= Delay1_reg_next[80];
          Delay1_reg[81] <= Delay1_reg_next[81];
          Delay1_reg[82] <= Delay1_reg_next[82];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[82];
  assign Delay1_reg_next[0] = HDL_Counter2_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];
  assign Delay1_reg_next[2] = Delay1_reg[1];
  assign Delay1_reg_next[3] = Delay1_reg[2];
  assign Delay1_reg_next[4] = Delay1_reg[3];
  assign Delay1_reg_next[5] = Delay1_reg[4];
  assign Delay1_reg_next[6] = Delay1_reg[5];
  assign Delay1_reg_next[7] = Delay1_reg[6];
  assign Delay1_reg_next[8] = Delay1_reg[7];
  assign Delay1_reg_next[9] = Delay1_reg[8];
  assign Delay1_reg_next[10] = Delay1_reg[9];
  assign Delay1_reg_next[11] = Delay1_reg[10];
  assign Delay1_reg_next[12] = Delay1_reg[11];
  assign Delay1_reg_next[13] = Delay1_reg[12];
  assign Delay1_reg_next[14] = Delay1_reg[13];
  assign Delay1_reg_next[15] = Delay1_reg[14];
  assign Delay1_reg_next[16] = Delay1_reg[15];
  assign Delay1_reg_next[17] = Delay1_reg[16];
  assign Delay1_reg_next[18] = Delay1_reg[17];
  assign Delay1_reg_next[19] = Delay1_reg[18];
  assign Delay1_reg_next[20] = Delay1_reg[19];
  assign Delay1_reg_next[21] = Delay1_reg[20];
  assign Delay1_reg_next[22] = Delay1_reg[21];
  assign Delay1_reg_next[23] = Delay1_reg[22];
  assign Delay1_reg_next[24] = Delay1_reg[23];
  assign Delay1_reg_next[25] = Delay1_reg[24];
  assign Delay1_reg_next[26] = Delay1_reg[25];
  assign Delay1_reg_next[27] = Delay1_reg[26];
  assign Delay1_reg_next[28] = Delay1_reg[27];
  assign Delay1_reg_next[29] = Delay1_reg[28];
  assign Delay1_reg_next[30] = Delay1_reg[29];
  assign Delay1_reg_next[31] = Delay1_reg[30];
  assign Delay1_reg_next[32] = Delay1_reg[31];
  assign Delay1_reg_next[33] = Delay1_reg[32];
  assign Delay1_reg_next[34] = Delay1_reg[33];
  assign Delay1_reg_next[35] = Delay1_reg[34];
  assign Delay1_reg_next[36] = Delay1_reg[35];
  assign Delay1_reg_next[37] = Delay1_reg[36];
  assign Delay1_reg_next[38] = Delay1_reg[37];
  assign Delay1_reg_next[39] = Delay1_reg[38];
  assign Delay1_reg_next[40] = Delay1_reg[39];
  assign Delay1_reg_next[41] = Delay1_reg[40];
  assign Delay1_reg_next[42] = Delay1_reg[41];
  assign Delay1_reg_next[43] = Delay1_reg[42];
  assign Delay1_reg_next[44] = Delay1_reg[43];
  assign Delay1_reg_next[45] = Delay1_reg[44];
  assign Delay1_reg_next[46] = Delay1_reg[45];
  assign Delay1_reg_next[47] = Delay1_reg[46];
  assign Delay1_reg_next[48] = Delay1_reg[47];
  assign Delay1_reg_next[49] = Delay1_reg[48];
  assign Delay1_reg_next[50] = Delay1_reg[49];
  assign Delay1_reg_next[51] = Delay1_reg[50];
  assign Delay1_reg_next[52] = Delay1_reg[51];
  assign Delay1_reg_next[53] = Delay1_reg[52];
  assign Delay1_reg_next[54] = Delay1_reg[53];
  assign Delay1_reg_next[55] = Delay1_reg[54];
  assign Delay1_reg_next[56] = Delay1_reg[55];
  assign Delay1_reg_next[57] = Delay1_reg[56];
  assign Delay1_reg_next[58] = Delay1_reg[57];
  assign Delay1_reg_next[59] = Delay1_reg[58];
  assign Delay1_reg_next[60] = Delay1_reg[59];
  assign Delay1_reg_next[61] = Delay1_reg[60];
  assign Delay1_reg_next[62] = Delay1_reg[61];
  assign Delay1_reg_next[63] = Delay1_reg[62];
  assign Delay1_reg_next[64] = Delay1_reg[63];
  assign Delay1_reg_next[65] = Delay1_reg[64];
  assign Delay1_reg_next[66] = Delay1_reg[65];
  assign Delay1_reg_next[67] = Delay1_reg[66];
  assign Delay1_reg_next[68] = Delay1_reg[67];
  assign Delay1_reg_next[69] = Delay1_reg[68];
  assign Delay1_reg_next[70] = Delay1_reg[69];
  assign Delay1_reg_next[71] = Delay1_reg[70];
  assign Delay1_reg_next[72] = Delay1_reg[71];
  assign Delay1_reg_next[73] = Delay1_reg[72];
  assign Delay1_reg_next[74] = Delay1_reg[73];
  assign Delay1_reg_next[75] = Delay1_reg[74];
  assign Delay1_reg_next[76] = Delay1_reg[75];
  assign Delay1_reg_next[77] = Delay1_reg[76];
  assign Delay1_reg_next[78] = Delay1_reg[77];
  assign Delay1_reg_next[79] = Delay1_reg[78];
  assign Delay1_reg_next[80] = Delay1_reg[79];
  assign Delay1_reg_next[81] = Delay1_reg[80];
  assign Delay1_reg_next[82] = Delay1_reg[81];


  assign Compare_To_Constant8_out1 = Delay1_out1 <= 16'b0000000001111100;


  assign Compare_To_Constant10_out1 = Delay1_out1 == 16'b0000000011111010;


  assign Logical_Operator2_out1 =  ~ Compare_To_Constant10_out1;


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter4_process
      if (reset == 1'b1) begin
        HDL_Counter4_count <= 8'b00000000;
      end
      else begin
        if (enb && Logical_Operator2_out1) begin
          HDL_Counter4_count <= HDL_Counter4_count_next;
        end
      end
    end

  assign HDL_Counter4_out1 = HDL_Counter4_count;
  assign HDL_Counter4_count_step = (Compare_To_Constant8_out1 == 1'b1 ? 8'b00000001 :
              8'b11111111);
  assign HDL_Counter4_count_next = HDL_Counter4_count + HDL_Counter4_count_step;


  assign Relational_Operator3_relop1 = alpha3_phase_Vab0 >= HDL_Counter4_out1;


  assign Relational_Operator4_relop1 = alpha3_phase_Vab1 >= HDL_Counter4_out1;


  assign Relational_Operator5_relop1 = alpha3_phase_Vab2 >= HDL_Counter4_out1;


  tabla_spwm_g2 u_tabla_spwm_g2 (.In2(Relational_Operator3_relop1),
                                 .In3(Relational_Operator4_relop1),
                                 .In4(Relational_Operator5_relop1),
                                 .g_out(y_3)  // ufix6
                                 );
  assign Compare_To_Zero1_out1 = y_3 != 6'b000000;


  assign y_4 = y_1;
  assign Switch1_out1 = (Compare_To_Zero1_out1 == 1'b0 ? y_4 :
              y_3);


  assign g_2 = Switch1_out1;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 16'b0000000011111010;
        Delay2_reg[1] <= 16'b0000000011111010;
        Delay2_reg[2] <= 16'b0000000011111010;
        Delay2_reg[3] <= 16'b0000000011111010;
        Delay2_reg[4] <= 16'b0000000011111010;
        Delay2_reg[5] <= 16'b0000000011111010;
        Delay2_reg[6] <= 16'b0000000011111010;
        Delay2_reg[7] <= 16'b0000000011111010;
        Delay2_reg[8] <= 16'b0000000011111010;
        Delay2_reg[9] <= 16'b0000000011111010;
        Delay2_reg[10] <= 16'b0000000011111010;
        Delay2_reg[11] <= 16'b0000000011111010;
        Delay2_reg[12] <= 16'b0000000011111010;
        Delay2_reg[13] <= 16'b0000000011111010;
        Delay2_reg[14] <= 16'b0000000011111010;
        Delay2_reg[15] <= 16'b0000000011111010;
        Delay2_reg[16] <= 16'b0000000011111010;
        Delay2_reg[17] <= 16'b0000000011111010;
        Delay2_reg[18] <= 16'b0000000011111010;
        Delay2_reg[19] <= 16'b0000000011111010;
        Delay2_reg[20] <= 16'b0000000011111010;
        Delay2_reg[21] <= 16'b0000000011111010;
        Delay2_reg[22] <= 16'b0000000011111010;
        Delay2_reg[23] <= 16'b0000000011111010;
        Delay2_reg[24] <= 16'b0000000011111010;
        Delay2_reg[25] <= 16'b0000000011111010;
        Delay2_reg[26] <= 16'b0000000011111010;
        Delay2_reg[27] <= 16'b0000000011111010;
        Delay2_reg[28] <= 16'b0000000011111010;
        Delay2_reg[29] <= 16'b0000000011111010;
        Delay2_reg[30] <= 16'b0000000011111010;
        Delay2_reg[31] <= 16'b0000000011111010;
        Delay2_reg[32] <= 16'b0000000011111010;
        Delay2_reg[33] <= 16'b0000000011111010;
        Delay2_reg[34] <= 16'b0000000011111010;
        Delay2_reg[35] <= 16'b0000000011111010;
        Delay2_reg[36] <= 16'b0000000011111010;
        Delay2_reg[37] <= 16'b0000000011111010;
        Delay2_reg[38] <= 16'b0000000011111010;
        Delay2_reg[39] <= 16'b0000000011111010;
        Delay2_reg[40] <= 16'b0000000011111010;
        Delay2_reg[41] <= 16'b0000000011111010;
        Delay2_reg[42] <= 16'b0000000011111010;
        Delay2_reg[43] <= 16'b0000000011111010;
        Delay2_reg[44] <= 16'b0000000011111010;
        Delay2_reg[45] <= 16'b0000000011111010;
        Delay2_reg[46] <= 16'b0000000011111010;
        Delay2_reg[47] <= 16'b0000000011111010;
        Delay2_reg[48] <= 16'b0000000011111010;
        Delay2_reg[49] <= 16'b0000000011111010;
        Delay2_reg[50] <= 16'b0000000011111010;
        Delay2_reg[51] <= 16'b0000000011111010;
        Delay2_reg[52] <= 16'b0000000011111010;
        Delay2_reg[53] <= 16'b0000000011111010;
        Delay2_reg[54] <= 16'b0000000011111010;
        Delay2_reg[55] <= 16'b0000000011111010;
        Delay2_reg[56] <= 16'b0000000011111010;
        Delay2_reg[57] <= 16'b0000000011111010;
        Delay2_reg[58] <= 16'b0000000011111010;
        Delay2_reg[59] <= 16'b0000000011111010;
        Delay2_reg[60] <= 16'b0000000011111010;
        Delay2_reg[61] <= 16'b0000000011111010;
        Delay2_reg[62] <= 16'b0000000011111010;
        Delay2_reg[63] <= 16'b0000000011111010;
        Delay2_reg[64] <= 16'b0000000011111010;
        Delay2_reg[65] <= 16'b0000000011111010;
        Delay2_reg[66] <= 16'b0000000011111010;
        Delay2_reg[67] <= 16'b0000000011111010;
        Delay2_reg[68] <= 16'b0000000011111010;
        Delay2_reg[69] <= 16'b0000000011111010;
        Delay2_reg[70] <= 16'b0000000011111010;
        Delay2_reg[71] <= 16'b0000000011111010;
        Delay2_reg[72] <= 16'b0000000011111010;
        Delay2_reg[73] <= 16'b0000000011111010;
        Delay2_reg[74] <= 16'b0000000011111010;
        Delay2_reg[75] <= 16'b0000000011111010;
        Delay2_reg[76] <= 16'b0000000011111010;
        Delay2_reg[77] <= 16'b0000000011111010;
        Delay2_reg[78] <= 16'b0000000011111010;
        Delay2_reg[79] <= 16'b0000000011111010;
        Delay2_reg[80] <= 16'b0000000011111010;
        Delay2_reg[81] <= 16'b0000000011111010;
        Delay2_reg[82] <= 16'b0000000011111010;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
          Delay2_reg[2] <= Delay2_reg_next[2];
          Delay2_reg[3] <= Delay2_reg_next[3];
          Delay2_reg[4] <= Delay2_reg_next[4];
          Delay2_reg[5] <= Delay2_reg_next[5];
          Delay2_reg[6] <= Delay2_reg_next[6];
          Delay2_reg[7] <= Delay2_reg_next[7];
          Delay2_reg[8] <= Delay2_reg_next[8];
          Delay2_reg[9] <= Delay2_reg_next[9];
          Delay2_reg[10] <= Delay2_reg_next[10];
          Delay2_reg[11] <= Delay2_reg_next[11];
          Delay2_reg[12] <= Delay2_reg_next[12];
          Delay2_reg[13] <= Delay2_reg_next[13];
          Delay2_reg[14] <= Delay2_reg_next[14];
          Delay2_reg[15] <= Delay2_reg_next[15];
          Delay2_reg[16] <= Delay2_reg_next[16];
          Delay2_reg[17] <= Delay2_reg_next[17];
          Delay2_reg[18] <= Delay2_reg_next[18];
          Delay2_reg[19] <= Delay2_reg_next[19];
          Delay2_reg[20] <= Delay2_reg_next[20];
          Delay2_reg[21] <= Delay2_reg_next[21];
          Delay2_reg[22] <= Delay2_reg_next[22];
          Delay2_reg[23] <= Delay2_reg_next[23];
          Delay2_reg[24] <= Delay2_reg_next[24];
          Delay2_reg[25] <= Delay2_reg_next[25];
          Delay2_reg[26] <= Delay2_reg_next[26];
          Delay2_reg[27] <= Delay2_reg_next[27];
          Delay2_reg[28] <= Delay2_reg_next[28];
          Delay2_reg[29] <= Delay2_reg_next[29];
          Delay2_reg[30] <= Delay2_reg_next[30];
          Delay2_reg[31] <= Delay2_reg_next[31];
          Delay2_reg[32] <= Delay2_reg_next[32];
          Delay2_reg[33] <= Delay2_reg_next[33];
          Delay2_reg[34] <= Delay2_reg_next[34];
          Delay2_reg[35] <= Delay2_reg_next[35];
          Delay2_reg[36] <= Delay2_reg_next[36];
          Delay2_reg[37] <= Delay2_reg_next[37];
          Delay2_reg[38] <= Delay2_reg_next[38];
          Delay2_reg[39] <= Delay2_reg_next[39];
          Delay2_reg[40] <= Delay2_reg_next[40];
          Delay2_reg[41] <= Delay2_reg_next[41];
          Delay2_reg[42] <= Delay2_reg_next[42];
          Delay2_reg[43] <= Delay2_reg_next[43];
          Delay2_reg[44] <= Delay2_reg_next[44];
          Delay2_reg[45] <= Delay2_reg_next[45];
          Delay2_reg[46] <= Delay2_reg_next[46];
          Delay2_reg[47] <= Delay2_reg_next[47];
          Delay2_reg[48] <= Delay2_reg_next[48];
          Delay2_reg[49] <= Delay2_reg_next[49];
          Delay2_reg[50] <= Delay2_reg_next[50];
          Delay2_reg[51] <= Delay2_reg_next[51];
          Delay2_reg[52] <= Delay2_reg_next[52];
          Delay2_reg[53] <= Delay2_reg_next[53];
          Delay2_reg[54] <= Delay2_reg_next[54];
          Delay2_reg[55] <= Delay2_reg_next[55];
          Delay2_reg[56] <= Delay2_reg_next[56];
          Delay2_reg[57] <= Delay2_reg_next[57];
          Delay2_reg[58] <= Delay2_reg_next[58];
          Delay2_reg[59] <= Delay2_reg_next[59];
          Delay2_reg[60] <= Delay2_reg_next[60];
          Delay2_reg[61] <= Delay2_reg_next[61];
          Delay2_reg[62] <= Delay2_reg_next[62];
          Delay2_reg[63] <= Delay2_reg_next[63];
          Delay2_reg[64] <= Delay2_reg_next[64];
          Delay2_reg[65] <= Delay2_reg_next[65];
          Delay2_reg[66] <= Delay2_reg_next[66];
          Delay2_reg[67] <= Delay2_reg_next[67];
          Delay2_reg[68] <= Delay2_reg_next[68];
          Delay2_reg[69] <= Delay2_reg_next[69];
          Delay2_reg[70] <= Delay2_reg_next[70];
          Delay2_reg[71] <= Delay2_reg_next[71];
          Delay2_reg[72] <= Delay2_reg_next[72];
          Delay2_reg[73] <= Delay2_reg_next[73];
          Delay2_reg[74] <= Delay2_reg_next[74];
          Delay2_reg[75] <= Delay2_reg_next[75];
          Delay2_reg[76] <= Delay2_reg_next[76];
          Delay2_reg[77] <= Delay2_reg_next[77];
          Delay2_reg[78] <= Delay2_reg_next[78];
          Delay2_reg[79] <= Delay2_reg_next[79];
          Delay2_reg[80] <= Delay2_reg_next[80];
          Delay2_reg[81] <= Delay2_reg_next[81];
          Delay2_reg[82] <= Delay2_reg_next[82];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[82];
  assign Delay2_reg_next[0] = Delay1_out1;
  assign Delay2_reg_next[1] = Delay2_reg[0];
  assign Delay2_reg_next[2] = Delay2_reg[1];
  assign Delay2_reg_next[3] = Delay2_reg[2];
  assign Delay2_reg_next[4] = Delay2_reg[3];
  assign Delay2_reg_next[5] = Delay2_reg[4];
  assign Delay2_reg_next[6] = Delay2_reg[5];
  assign Delay2_reg_next[7] = Delay2_reg[6];
  assign Delay2_reg_next[8] = Delay2_reg[7];
  assign Delay2_reg_next[9] = Delay2_reg[8];
  assign Delay2_reg_next[10] = Delay2_reg[9];
  assign Delay2_reg_next[11] = Delay2_reg[10];
  assign Delay2_reg_next[12] = Delay2_reg[11];
  assign Delay2_reg_next[13] = Delay2_reg[12];
  assign Delay2_reg_next[14] = Delay2_reg[13];
  assign Delay2_reg_next[15] = Delay2_reg[14];
  assign Delay2_reg_next[16] = Delay2_reg[15];
  assign Delay2_reg_next[17] = Delay2_reg[16];
  assign Delay2_reg_next[18] = Delay2_reg[17];
  assign Delay2_reg_next[19] = Delay2_reg[18];
  assign Delay2_reg_next[20] = Delay2_reg[19];
  assign Delay2_reg_next[21] = Delay2_reg[20];
  assign Delay2_reg_next[22] = Delay2_reg[21];
  assign Delay2_reg_next[23] = Delay2_reg[22];
  assign Delay2_reg_next[24] = Delay2_reg[23];
  assign Delay2_reg_next[25] = Delay2_reg[24];
  assign Delay2_reg_next[26] = Delay2_reg[25];
  assign Delay2_reg_next[27] = Delay2_reg[26];
  assign Delay2_reg_next[28] = Delay2_reg[27];
  assign Delay2_reg_next[29] = Delay2_reg[28];
  assign Delay2_reg_next[30] = Delay2_reg[29];
  assign Delay2_reg_next[31] = Delay2_reg[30];
  assign Delay2_reg_next[32] = Delay2_reg[31];
  assign Delay2_reg_next[33] = Delay2_reg[32];
  assign Delay2_reg_next[34] = Delay2_reg[33];
  assign Delay2_reg_next[35] = Delay2_reg[34];
  assign Delay2_reg_next[36] = Delay2_reg[35];
  assign Delay2_reg_next[37] = Delay2_reg[36];
  assign Delay2_reg_next[38] = Delay2_reg[37];
  assign Delay2_reg_next[39] = Delay2_reg[38];
  assign Delay2_reg_next[40] = Delay2_reg[39];
  assign Delay2_reg_next[41] = Delay2_reg[40];
  assign Delay2_reg_next[42] = Delay2_reg[41];
  assign Delay2_reg_next[43] = Delay2_reg[42];
  assign Delay2_reg_next[44] = Delay2_reg[43];
  assign Delay2_reg_next[45] = Delay2_reg[44];
  assign Delay2_reg_next[46] = Delay2_reg[45];
  assign Delay2_reg_next[47] = Delay2_reg[46];
  assign Delay2_reg_next[48] = Delay2_reg[47];
  assign Delay2_reg_next[49] = Delay2_reg[48];
  assign Delay2_reg_next[50] = Delay2_reg[49];
  assign Delay2_reg_next[51] = Delay2_reg[50];
  assign Delay2_reg_next[52] = Delay2_reg[51];
  assign Delay2_reg_next[53] = Delay2_reg[52];
  assign Delay2_reg_next[54] = Delay2_reg[53];
  assign Delay2_reg_next[55] = Delay2_reg[54];
  assign Delay2_reg_next[56] = Delay2_reg[55];
  assign Delay2_reg_next[57] = Delay2_reg[56];
  assign Delay2_reg_next[58] = Delay2_reg[57];
  assign Delay2_reg_next[59] = Delay2_reg[58];
  assign Delay2_reg_next[60] = Delay2_reg[59];
  assign Delay2_reg_next[61] = Delay2_reg[60];
  assign Delay2_reg_next[62] = Delay2_reg[61];
  assign Delay2_reg_next[63] = Delay2_reg[62];
  assign Delay2_reg_next[64] = Delay2_reg[63];
  assign Delay2_reg_next[65] = Delay2_reg[64];
  assign Delay2_reg_next[66] = Delay2_reg[65];
  assign Delay2_reg_next[67] = Delay2_reg[66];
  assign Delay2_reg_next[68] = Delay2_reg[67];
  assign Delay2_reg_next[69] = Delay2_reg[68];
  assign Delay2_reg_next[70] = Delay2_reg[69];
  assign Delay2_reg_next[71] = Delay2_reg[70];
  assign Delay2_reg_next[72] = Delay2_reg[71];
  assign Delay2_reg_next[73] = Delay2_reg[72];
  assign Delay2_reg_next[74] = Delay2_reg[73];
  assign Delay2_reg_next[75] = Delay2_reg[74];
  assign Delay2_reg_next[76] = Delay2_reg[75];
  assign Delay2_reg_next[77] = Delay2_reg[76];
  assign Delay2_reg_next[78] = Delay2_reg[77];
  assign Delay2_reg_next[79] = Delay2_reg[78];
  assign Delay2_reg_next[80] = Delay2_reg[79];
  assign Delay2_reg_next[81] = Delay2_reg[80];
  assign Delay2_reg_next[82] = Delay2_reg[81];


  assign Compare_To_Constant12_out1 = Delay2_out1 <= 16'b0000000001111100;


  assign Compare_To_Constant11_out1 = Delay2_out1 == 16'b0000000011111010;


  assign Logical_Operator3_out1 =  ~ Compare_To_Constant11_out1;


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter5_process
      if (reset == 1'b1) begin
        HDL_Counter5_count <= 8'b00000000;
      end
      else begin
        if (enb && Logical_Operator3_out1) begin
          HDL_Counter5_count <= HDL_Counter5_count_next;
        end
      end
    end

  assign HDL_Counter5_out1 = HDL_Counter5_count;
  assign HDL_Counter5_count_step = (Compare_To_Constant12_out1 == 1'b1 ? 8'b00000001 :
              8'b11111111);
  assign HDL_Counter5_count_next = HDL_Counter5_count + HDL_Counter5_count_step;


  assign Relational_Operator6_relop1 = alpha3_phase_Vab0 >= HDL_Counter5_out1;


  assign Relational_Operator7_relop1 = alpha3_phase_Vab1 >= HDL_Counter5_out1;


  assign Relational_Operator8_relop1 = alpha3_phase_Vab2 >= HDL_Counter5_out1;


  tabla_spwm_g4 u_tabla_spwm_g4 (.In2(Relational_Operator6_relop1),
                                 .In3(Relational_Operator7_relop1),
                                 .In4(Relational_Operator8_relop1),
                                 .g_out(y_5)  // ufix6
                                 );
  assign Compare_To_Zero2_out1 = y_5 != 6'b000000;


  assign y_6 = y_1;
  assign Switch2_out1 = (Compare_To_Zero2_out1 == 1'b0 ? y_6 :
              y_5);


  assign g_3 = Switch2_out1;

  assign ce_out = clk_enable;

endmodule  // SPWM_3mod_hdl

