
Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002708  08002708  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002708  08002708  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002708  08002708  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002708  08002708  00003708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800270c  0800270c  0000370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002710  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  0800271c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800271c  0000409c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006be4  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194c  00000000  00000000  0000ac19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000521  00000000  00000000  0000cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cf7  00000000  00000000  0000d181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000997f  00000000  00000000  00023e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083cc9  00000000  00000000  0002d7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b14c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a6c  00000000  00000000  000b1504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b2f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026b0 	.word	0x080026b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026b0 	.word	0x080026b0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa9d 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82b 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f933 	bl	80003c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f883 	bl	8000268 <MX_ADC1_Init>
  MX_CAN_Init();
 8000162:	f000 f8c5 	bl	80002f0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	uint8_t TxData[2] = {0};
 8000166:	2300      	movs	r3, #0
 8000168:	80bb      	strh	r3, [r7, #4]
	uint32_t TxMailbox = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	603b      	str	r3, [r7, #0]
	uint16_t speed = 0;
 800016e:	2300      	movs	r3, #0
 8000170:	80fb      	strh	r3, [r7, #6]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		speed = read_pote(&hadc1);
 8000172:	480c      	ldr	r0, [pc, #48]	@ (80001a4 <main+0x58>)
 8000174:	f000 f94e 	bl	8000414 <read_pote>
 8000178:	4603      	mov	r3, r0
 800017a:	80fb      	strh	r3, [r7, #6]

		// Pack 16-bit ADC value into CAN message
		TxData[0] = speed >> 8;
 800017c:	88fb      	ldrh	r3, [r7, #6]
 800017e:	0a1b      	lsrs	r3, r3, #8
 8000180:	b29b      	uxth	r3, r3
 8000182:	b2db      	uxtb	r3, r3
 8000184:	713b      	strb	r3, [r7, #4]
		TxData[1] = speed & 0xFF;
 8000186:	88fb      	ldrh	r3, [r7, #6]
 8000188:	b2db      	uxtb	r3, r3
 800018a:	717b      	strb	r3, [r7, #5]

		if (HAL_CAN_AddTxMessage(&hcan, &txHandler, TxData, &TxMailbox) != HAL_OK)
 800018c:	463b      	mov	r3, r7
 800018e:	1d3a      	adds	r2, r7, #4
 8000190:	4905      	ldr	r1, [pc, #20]	@ (80001a8 <main+0x5c>)
 8000192:	4806      	ldr	r0, [pc, #24]	@ (80001ac <main+0x60>)
 8000194:	f001 f9c0 	bl	8001518 <HAL_CAN_AddTxMessage>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d0e9      	beq.n	8000172 <main+0x26>
		{
			Error_Handler(); // Transmission error
 800019e:	f000 f933 	bl	8000408 <Error_Handler>
		speed = read_pote(&hadc1);
 80001a2:	e7e6      	b.n	8000172 <main+0x26>
 80001a4:	20000028 	.word	0x20000028
 80001a8:	20000080 	.word	0x20000080
 80001ac:	20000058 	.word	0x20000058

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b094      	sub	sp, #80	@ 0x50
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ba:	2228      	movs	r2, #40	@ 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fa4a 	bl	8002658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	f107 0314 	add.w	r3, r7, #20
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
 80001d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e0:	2301      	movs	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000200:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fcbe 	bl	8001b88 <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000212:	f000 f8f9 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000216:	230f      	movs	r3, #15
 8000218:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000226:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f001 ff2a 	bl	800208c <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800023e:	f000 f8e3 	bl	8000408 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000242:	2302      	movs	r3, #2
 8000244:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800024a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f002 f896 	bl	8002380 <HAL_RCCEx_PeriphCLKConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800025a:	f000 f8d5 	bl	8000408 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3750      	adds	r7, #80	@ 0x50
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000278:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <MX_ADC1_Init+0x80>)
 800027a:	4a1c      	ldr	r2, [pc, #112]	@ (80002ec <MX_ADC1_Init+0x84>)
 800027c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027e:	4b1a      	ldr	r3, [pc, #104]	@ (80002e8 <MX_ADC1_Init+0x80>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000284:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <MX_ADC1_Init+0x80>)
 8000286:	2201      	movs	r2, #1
 8000288:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028a:	4b17      	ldr	r3, [pc, #92]	@ (80002e8 <MX_ADC1_Init+0x80>)
 800028c:	2200      	movs	r2, #0
 800028e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <MX_ADC1_Init+0x80>)
 8000292:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000298:	4b13      	ldr	r3, [pc, #76]	@ (80002e8 <MX_ADC1_Init+0x80>)
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800029e:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <MX_ADC1_Init+0x80>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a4:	4810      	ldr	r0, [pc, #64]	@ (80002e8 <MX_ADC1_Init+0x80>)
 80002a6:	f000 fa55 	bl	8000754 <HAL_ADC_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f8aa 	bl	8000408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80002b4:	2308      	movs	r3, #8
 80002b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4808      	ldr	r0, [pc, #32]	@ (80002e8 <MX_ADC1_Init+0x80>)
 80002c6:	f000 fcdd 	bl	8000c84 <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f89a 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80002d4:	4804      	ldr	r0, [pc, #16]	@ (80002e8 <MX_ADC1_Init+0x80>)
 80002d6:	f000 fe69 	bl	8000fac <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80002da:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <MX_ADC1_Init+0x80>)
 80002dc:	f000 fb12 	bl	8000904 <HAL_ADC_Start>

  /* USER CODE END ADC1_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40012400 	.word	0x40012400

080002f0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	@ 0x28
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002f6:	4b30      	ldr	r3, [pc, #192]	@ (80003b8 <MX_CAN_Init+0xc8>)
 80002f8:	4a30      	ldr	r2, [pc, #192]	@ (80003bc <MX_CAN_Init+0xcc>)
 80002fa:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80002fc:	4b2e      	ldr	r3, [pc, #184]	@ (80003b8 <MX_CAN_Init+0xc8>)
 80002fe:	2210      	movs	r2, #16
 8000300:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000302:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000308:	4b2b      	ldr	r3, [pc, #172]	@ (80003b8 <MX_CAN_Init+0xc8>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800030e:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000310:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000314:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000316:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000318:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800031c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800031e:	4b26      	ldr	r3, [pc, #152]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000320:	2200      	movs	r2, #0
 8000322:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000324:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000326:	2200      	movs	r2, #0
 8000328:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800032a:	4b23      	ldr	r3, [pc, #140]	@ (80003b8 <MX_CAN_Init+0xc8>)
 800032c:	2200      	movs	r2, #0
 800032e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000330:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000332:	2200      	movs	r2, #0
 8000334:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000336:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000338:	2200      	movs	r2, #0
 800033a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_CAN_Init+0xc8>)
 800033e:	2200      	movs	r2, #0
 8000340:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000342:	481d      	ldr	r0, [pc, #116]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000344:	f000 fee0 	bl	8001108 <HAL_CAN_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800034e:	f000 f85b 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

	// Start CAN peripheral
	HAL_CAN_Start(&hcan);
 8000352:	4819      	ldr	r0, [pc, #100]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000354:	f001 f89c 	bl	8001490 <HAL_CAN_Start>

	// Configure CAN filter
	CAN_FilterTypeDef canFilter;
	canFilter.FilterBank = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000360:	2301      	movs	r3, #1
 8000362:	61fb      	str	r3, [r7, #28]
	canFilter.FilterIdHigh = 0x0000;
 8000364:	2300      	movs	r3, #0
 8000366:	603b      	str	r3, [r7, #0]
	canFilter.FilterIdLow = 0x0000;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
	canFilter.FilterMaskIdHigh = 0x0000;
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
	canFilter.FilterMaskIdLow = 0x0000;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
	canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]
	canFilter.FilterActivation = ENABLE;
 8000378:	2301      	movs	r3, #1
 800037a:	623b      	str	r3, [r7, #32]
	canFilter.SlaveStartFilterBank = 14;
 800037c:	230e      	movs	r3, #14
 800037e:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canFilter) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	4619      	mov	r1, r3
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <MX_CAN_Init+0xc8>)
 8000386:	f000 ffba 	bl	80012fe <HAL_CAN_ConfigFilter>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_CAN_Init+0xa4>
	{
	  Error_Handler();
 8000390:	f000 f83a 	bl	8000408 <Error_Handler>
	}

	txHandler.DLC = 2; // 2 bytes
 8000394:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <MX_CAN_Init+0xd0>)
 8000396:	2202      	movs	r2, #2
 8000398:	611a      	str	r2, [r3, #16]
	txHandler.IDE = CAN_ID_STD;
 800039a:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <MX_CAN_Init+0xd0>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
	txHandler.RTR = CAN_RTR_DATA;
 80003a0:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <MX_CAN_Init+0xd0>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
	txHandler.StdId = 0x321; // Arbitrary ID
 80003a6:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <MX_CAN_Init+0xd0>)
 80003a8:	f240 3221 	movw	r2, #801	@ 0x321
 80003ac:	601a      	str	r2, [r3, #0]

  /* USER CODE END CAN_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3728      	adds	r7, #40	@ 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000058 	.word	0x20000058
 80003bc:	40006400 	.word	0x40006400
 80003c0:	20000080 	.word	0x20000080

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003d0:	f043 0320 	orr.w	r3, r3, #32
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0320 	and.w	r3, r3, #32
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a07      	ldr	r2, [pc, #28]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003e8:	f043 0308 	orr.w	r3, r3, #8
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0308 	and.w	r3, r3, #8
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <Error_Handler+0x8>

08000414 <read_pote>:

#include <stdint.h>
#include "potentiometer.h"


uint16_t read_pote(ADC_HandleTypeDef *hadc1){
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]

	uint16_t value = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	81fb      	strh	r3, [r7, #14]

	if (HAL_ADC_PollForConversion(hadc1, 100) == HAL_OK)
 8000420:	2164      	movs	r1, #100	@ 0x64
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 fb1c 	bl	8000a60 <HAL_ADC_PollForConversion>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <read_pote+0x24>
	{
		value = HAL_ADC_GetValue(hadc1);
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f000 fc1c 	bl	8000c6c <HAL_ADC_GetValue>
 8000434:	4603      	mov	r3, r0
 8000436:	81fb      	strh	r3, [r7, #14]
	}
	return value;
 8000438:	89fb      	ldrh	r3, [r7, #14]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044a:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <HAL_MspInit+0x5c>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b12      	ldr	r3, [pc, #72]	@ (80004a0 <HAL_MspInit+0x5c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <HAL_MspInit+0x5c>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <HAL_MspInit+0x5c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800047a:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <HAL_MspInit+0x60>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	4a04      	ldr	r2, [pc, #16]	@ (80004a4 <HAL_MspInit+0x60>)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010000 	.word	0x40010000

080004a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <HAL_ADC_MspInit+0x6c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d121      	bne.n	800050c <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004c8:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <HAL_ADC_MspInit+0x70>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a12      	ldr	r2, [pc, #72]	@ (8000518 <HAL_ADC_MspInit+0x70>)
 80004ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <HAL_ADC_MspInit+0x70>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <HAL_ADC_MspInit+0x70>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <HAL_ADC_MspInit+0x70>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <HAL_ADC_MspInit+0x70>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004f8:	2301      	movs	r3, #1
 80004fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fc:	2303      	movs	r3, #3
 80004fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4805      	ldr	r0, [pc, #20]	@ (800051c <HAL_ADC_MspInit+0x74>)
 8000508:	f001 f9ba 	bl	8001880 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40012400 	.word	0x40012400
 8000518:	40021000 	.word	0x40021000
 800051c:	40010c00 	.word	0x40010c00

08000520 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	@ 0x28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a25      	ldr	r2, [pc, #148]	@ (80005d0 <HAL_CAN_MspInit+0xb0>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d143      	bne.n	80005c8 <HAL_CAN_MspInit+0xa8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000540:	4b24      	ldr	r3, [pc, #144]	@ (80005d4 <HAL_CAN_MspInit+0xb4>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	4a23      	ldr	r2, [pc, #140]	@ (80005d4 <HAL_CAN_MspInit+0xb4>)
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054a:	61d3      	str	r3, [r2, #28]
 800054c:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <HAL_CAN_MspInit+0xb4>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b1e      	ldr	r3, [pc, #120]	@ (80005d4 <HAL_CAN_MspInit+0xb4>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a1d      	ldr	r2, [pc, #116]	@ (80005d4 <HAL_CAN_MspInit+0xb4>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <HAL_CAN_MspInit+0xb4>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	4814      	ldr	r0, [pc, #80]	@ (80005d8 <HAL_CAN_MspInit+0xb8>)
 8000586:	f001 f97b 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800058a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800058e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	2302      	movs	r3, #2
 8000592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	480e      	ldr	r0, [pc, #56]	@ (80005d8 <HAL_CAN_MspInit+0xb8>)
 80005a0:	f001 f96e 	bl	8001880 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <HAL_CAN_MspInit+0xbc>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80005aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ac:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80005b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80005c2:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <HAL_CAN_MspInit+0xbc>)
 80005c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c6:	6053      	str	r3, [r2, #4]

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	@ 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40006400 	.word	0x40006400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	40010000 	.word	0x40010000

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <NMI_Handler+0x4>

080005e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <MemManage_Handler+0x4>

080005f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <UsageFault_Handler+0x4>

08000608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 f874 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000644:	f7ff fff8 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480b      	ldr	r0, [pc, #44]	@ (8000678 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800064a:	490c      	ldr	r1, [pc, #48]	@ (800067c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800064c:	4a0c      	ldr	r2, [pc, #48]	@ (8000680 <LoopFillZerobss+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a09      	ldr	r2, [pc, #36]	@ (8000684 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000660:	4c09      	ldr	r4, [pc, #36]	@ (8000688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066e:	f001 fffb 	bl	8002668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fd6b 	bl	800014c <main>
  bx lr
 8000676:	4770      	bx	lr
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000680:	08002710 	.word	0x08002710
  ldr r2, =_sbss
 8000684:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000688:	2000009c 	.word	0x2000009c

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <HAL_Init+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	@ (80006b8 <HAL_Init+0x28>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f001 f8b9 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff feca 	bl	8000444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f8c3 	bl	8001866 <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f001 f899 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	@ (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	@ (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	20000098 	.word	0x20000098

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	@ (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000098 	.word	0x20000098

08000754 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e0be      	b.n	80008f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000780:	2b00      	cmp	r3, #0
 8000782:	d109      	bne.n	8000798 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fe88 	bl	80004a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 fbc5 	bl	8000f28 <ADC_ConversionStop_Disable>
 800079e:	4603      	mov	r3, r0
 80007a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007a6:	f003 0310 	and.w	r3, r3, #16
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f040 8099 	bne.w	80008e2 <HAL_ADC_Init+0x18e>
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8095 	bne.w	80008e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80007c0:	f023 0302 	bic.w	r3, r3, #2
 80007c4:	f043 0202 	orr.w	r2, r3, #2
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7b1b      	ldrb	r3, [r3, #12]
 80007da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007ec:	d003      	beq.n	80007f6 <HAL_ADC_Init+0xa2>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d102      	bne.n	80007fc <HAL_ADC_Init+0xa8>
 80007f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007fa:	e000      	b.n	80007fe <HAL_ADC_Init+0xaa>
 80007fc:	2300      	movs	r3, #0
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4313      	orrs	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7d1b      	ldrb	r3, [r3, #20]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d119      	bne.n	8000840 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7b1b      	ldrb	r3, [r3, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d109      	bne.n	8000828 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	3b01      	subs	r3, #1
 800081a:	035a      	lsls	r2, r3, #13
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	e00b      	b.n	8000840 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800082c:	f043 0220 	orr.w	r2, r3, #32
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000838:	f043 0201 	orr.w	r2, r3, #1
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	430a      	orrs	r2, r1
 8000852:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <HAL_ADC_Init+0x1a8>)
 800085c:	4013      	ands	r3, r2
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	430b      	orrs	r3, r1
 8000866:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000870:	d003      	beq.n	800087a <HAL_ADC_Init+0x126>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d104      	bne.n	8000884 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	3b01      	subs	r3, #1
 8000880:	051b      	lsls	r3, r3, #20
 8000882:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800088a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	430a      	orrs	r2, r1
 8000896:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_ADC_Init+0x1ac>)
 80008a0:	4013      	ands	r3, r2
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d10b      	bne.n	80008c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008b2:	f023 0303 	bic.w	r3, r3, #3
 80008b6:	f043 0201 	orr.w	r2, r3, #1
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008be:	e018      	b.n	80008f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008c4:	f023 0312 	bic.w	r3, r3, #18
 80008c8:	f043 0210 	orr.w	r2, r3, #16
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d4:	f043 0201 	orr.w	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008e0:	e007      	b.n	80008f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008e6:	f043 0210 	orr.w	r2, r3, #16
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000900:	ff1f0efe 	.word	0xff1f0efe

08000904 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000916:	2b01      	cmp	r3, #1
 8000918:	d101      	bne.n	800091e <HAL_ADC_Start+0x1a>
 800091a:	2302      	movs	r3, #2
 800091c:	e098      	b.n	8000a50 <HAL_ADC_Start+0x14c>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 faa4 	bl	8000e74 <ADC_Enable>
 800092c:	4603      	mov	r3, r0
 800092e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	2b00      	cmp	r3, #0
 8000934:	f040 8087 	bne.w	8000a46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800093c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a41      	ldr	r2, [pc, #260]	@ (8000a58 <HAL_ADC_Start+0x154>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d105      	bne.n	8000962 <HAL_ADC_Start+0x5e>
 8000956:	4b41      	ldr	r3, [pc, #260]	@ (8000a5c <HAL_ADC_Start+0x158>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d115      	bne.n	800098e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000966:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000978:	2b00      	cmp	r3, #0
 800097a:	d026      	beq.n	80009ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000980:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000984:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800098c:	e01d      	b.n	80009ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000992:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a5c <HAL_ADC_Start+0x158>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d004      	beq.n	80009ae <HAL_ADC_Start+0xaa>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a58 <HAL_ADC_Start+0x154>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d10d      	bne.n	80009ca <HAL_ADC_Start+0xc6>
 80009ae:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <HAL_ADC_Start+0x158>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d006      	beq.n	80009e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009da:	f023 0206 	bic.w	r2, r3, #6
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009e2:	e002      	b.n	80009ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f06f 0202 	mvn.w	r2, #2
 80009fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000a06:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000a0a:	d113      	bne.n	8000a34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a10:	4a11      	ldr	r2, [pc, #68]	@ (8000a58 <HAL_ADC_Start+0x154>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d105      	bne.n	8000a22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_ADC_Start+0x158>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d108      	bne.n	8000a34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	e00c      	b.n	8000a4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	e003      	b.n	8000a4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40012800 	.word	0x40012800
 8000a5c:	40012400 	.word	0x40012400

08000a60 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a76:	f7ff fe63 	bl	8000740 <HAL_GetTick>
 8000a7a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00b      	beq.n	8000aa2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a8e:	f043 0220 	orr.w	r2, r3, #32
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e0d3      	b.n	8000c4a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d131      	bne.n	8000b14 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d12a      	bne.n	8000b14 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000abe:	e021      	b.n	8000b04 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac6:	d01d      	beq.n	8000b04 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_ADC_PollForConversion+0x7e>
 8000ace:	f7ff fe37 	bl	8000740 <HAL_GetTick>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d212      	bcs.n	8000b04 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10b      	bne.n	8000b04 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af0:	f043 0204 	orr.w	r2, r3, #4
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e0a2      	b.n	8000c4a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0d6      	beq.n	8000ac0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b12:	e070      	b.n	8000bf6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b14:	4b4f      	ldr	r3, [pc, #316]	@ (8000c54 <HAL_ADC_PollForConversion+0x1f4>)
 8000b16:	681c      	ldr	r4, [r3, #0]
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f001 fce7 	bl	80024ec <HAL_RCCEx_GetPeriphCLKFreq>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6919      	ldr	r1, [r3, #16]
 8000b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c58 <HAL_ADC_PollForConversion+0x1f8>)
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d118      	bne.n	8000b64 <HAL_ADC_PollForConversion+0x104>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68d9      	ldr	r1, [r3, #12]
 8000b38:	4b48      	ldr	r3, [pc, #288]	@ (8000c5c <HAL_ADC_PollForConversion+0x1fc>)
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d111      	bne.n	8000b64 <HAL_ADC_PollForConversion+0x104>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6919      	ldr	r1, [r3, #16]
 8000b46:	4b46      	ldr	r3, [pc, #280]	@ (8000c60 <HAL_ADC_PollForConversion+0x200>)
 8000b48:	400b      	ands	r3, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d108      	bne.n	8000b60 <HAL_ADC_PollForConversion+0x100>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68d9      	ldr	r1, [r3, #12]
 8000b54:	4b43      	ldr	r3, [pc, #268]	@ (8000c64 <HAL_ADC_PollForConversion+0x204>)
 8000b56:	400b      	ands	r3, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <HAL_ADC_PollForConversion+0x100>
 8000b5c:	2314      	movs	r3, #20
 8000b5e:	e020      	b.n	8000ba2 <HAL_ADC_PollForConversion+0x142>
 8000b60:	2329      	movs	r3, #41	@ 0x29
 8000b62:	e01e      	b.n	8000ba2 <HAL_ADC_PollForConversion+0x142>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6919      	ldr	r1, [r3, #16]
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c60 <HAL_ADC_PollForConversion+0x200>)
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d106      	bne.n	8000b80 <HAL_ADC_PollForConversion+0x120>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68d9      	ldr	r1, [r3, #12]
 8000b78:	4b3a      	ldr	r3, [pc, #232]	@ (8000c64 <HAL_ADC_PollForConversion+0x204>)
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00d      	beq.n	8000b9c <HAL_ADC_PollForConversion+0x13c>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6919      	ldr	r1, [r3, #16]
 8000b86:	4b38      	ldr	r3, [pc, #224]	@ (8000c68 <HAL_ADC_PollForConversion+0x208>)
 8000b88:	400b      	ands	r3, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d108      	bne.n	8000ba0 <HAL_ADC_PollForConversion+0x140>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68d9      	ldr	r1, [r3, #12]
 8000b94:	4b34      	ldr	r3, [pc, #208]	@ (8000c68 <HAL_ADC_PollForConversion+0x208>)
 8000b96:	400b      	ands	r3, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <HAL_ADC_PollForConversion+0x140>
 8000b9c:	2354      	movs	r3, #84	@ 0x54
 8000b9e:	e000      	b.n	8000ba2 <HAL_ADC_PollForConversion+0x142>
 8000ba0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ba8:	e021      	b.n	8000bee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d01a      	beq.n	8000be8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d007      	beq.n	8000bc8 <HAL_ADC_PollForConversion+0x168>
 8000bb8:	f7ff fdc2 	bl	8000740 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d20f      	bcs.n	8000be8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d90b      	bls.n	8000be8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd4:	f043 0204 	orr.w	r2, r3, #4
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e030      	b.n	8000c4a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3301      	adds	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d8d9      	bhi.n	8000baa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f06f 0212 	mvn.w	r2, #18
 8000bfe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c16:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c1a:	d115      	bne.n	8000c48 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d111      	bne.n	8000c48 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d105      	bne.n	8000c48 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c40:	f043 0201 	orr.w	r2, r3, #1
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000000 	.word	0x20000000
 8000c58:	24924924 	.word	0x24924924
 8000c5c:	00924924 	.word	0x00924924
 8000c60:	12492492 	.word	0x12492492
 8000c64:	00492492 	.word	0x00492492
 8000c68:	00249249 	.word	0x00249249

08000c6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x20>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e0dc      	b.n	8000e5e <HAL_ADC_ConfigChannel+0x1da>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	d81c      	bhi.n	8000cee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b05      	subs	r3, #5
 8000cc6:	221f      	movs	r2, #31
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4019      	ands	r1, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b05      	subs	r3, #5
 8000ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cec:	e03c      	b.n	8000d68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b0c      	cmp	r3, #12
 8000cf4:	d81c      	bhi.n	8000d30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	3b23      	subs	r3, #35	@ 0x23
 8000d08:	221f      	movs	r2, #31
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4019      	ands	r1, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	3b23      	subs	r3, #35	@ 0x23
 8000d22:	fa00 f203 	lsl.w	r2, r0, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d2e:	e01b      	b.n	8000d68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b41      	subs	r3, #65	@ 0x41
 8000d42:	221f      	movs	r2, #31
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4019      	ands	r1, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	3b41      	subs	r3, #65	@ 0x41
 8000d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b09      	cmp	r3, #9
 8000d6e:	d91c      	bls.n	8000daa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68d9      	ldr	r1, [r3, #12]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	3b1e      	subs	r3, #30
 8000d82:	2207      	movs	r2, #7
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4019      	ands	r1, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6898      	ldr	r0, [r3, #8]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	3b1e      	subs	r3, #30
 8000d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	e019      	b.n	8000dde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6919      	ldr	r1, [r3, #16]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	2207      	movs	r2, #7
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4019      	ands	r1, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6898      	ldr	r0, [r3, #8]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	d003      	beq.n	8000dee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dea:	2b11      	cmp	r3, #17
 8000dec:	d132      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <HAL_ADC_ConfigChannel+0x1e4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d125      	bne.n	8000e44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d126      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000e14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b10      	cmp	r3, #16
 8000e1c:	d11a      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <HAL_ADC_ConfigChannel+0x1e8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a13      	ldr	r2, [pc, #76]	@ (8000e70 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	0c9a      	lsrs	r2, r3, #18
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e34:	e002      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0x1b2>
 8000e42:	e007      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e48:	f043 0220 	orr.w	r2, r3, #32
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40012400 	.word	0x40012400
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	431bde83 	.word	0x431bde83

08000e74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d040      	beq.n	8000f14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 0201 	orr.w	r2, r2, #1
 8000ea0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <ADC_Enable+0xac>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f24 <ADC_Enable+0xb0>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	0c9b      	lsrs	r3, r3, #18
 8000eae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000eb0:	e002      	b.n	8000eb8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f9      	bne.n	8000eb2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ebe:	f7ff fc3f 	bl	8000740 <HAL_GetTick>
 8000ec2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ec4:	e01f      	b.n	8000f06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ec6:	f7ff fc3b 	bl	8000740 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d918      	bls.n	8000f06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d011      	beq.n	8000f06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee6:	f043 0210 	orr.w	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e007      	b.n	8000f16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d1d8      	bne.n	8000ec6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	431bde83 	.word	0x431bde83

08000f28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d12e      	bne.n	8000fa0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0201 	bic.w	r2, r2, #1
 8000f50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f52:	f7ff fbf5 	bl	8000740 <HAL_GetTick>
 8000f56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f58:	e01b      	b.n	8000f92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f5a:	f7ff fbf1 	bl	8000740 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d914      	bls.n	8000f92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d10d      	bne.n	8000f92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7a:	f043 0210 	orr.w	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f86:	f043 0201 	orr.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e007      	b.n	8000fa2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d0dc      	beq.n	8000f5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_ADCEx_Calibration_Start+0x1e>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e097      	b.n	80010fa <HAL_ADCEx_Calibration_Start+0x14e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa8 	bl	8000f28 <ADC_ConversionStop_Disable>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff49 	bl	8000e74 <ADC_Enable>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f040 8081 	bne.w	80010f0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	f043 0202 	orr.w	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001002:	4b40      	ldr	r3, [pc, #256]	@ (8001104 <HAL_ADCEx_Calibration_Start+0x158>)
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	2002      	movs	r0, #2
 8001008:	f001 fa70 	bl	80024ec <HAL_RCCEx_GetPeriphCLKFreq>
 800100c:	4603      	mov	r3, r0
 800100e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001012:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001014:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001016:	e002      	b.n	800101e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3b01      	subs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f9      	bne.n	8001018 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0208 	orr.w	r2, r2, #8
 8001032:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001034:	f7ff fb84 	bl	8000740 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800103a:	e01b      	b.n	8001074 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800103c:	f7ff fb80 	bl	8000740 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b0a      	cmp	r3, #10
 8001048:	d914      	bls.n	8001074 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00d      	beq.n	8001074 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105c:	f023 0312 	bic.w	r3, r3, #18
 8001060:	f043 0210 	orr.w	r2, r3, #16
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e042      	b.n	80010fa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1dc      	bne.n	800103c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f042 0204 	orr.w	r2, r2, #4
 8001090:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001092:	f7ff fb55 	bl	8000740 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001098:	e01b      	b.n	80010d2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800109a:	f7ff fb51 	bl	8000740 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b0a      	cmp	r3, #10
 80010a6:	d914      	bls.n	80010d2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ba:	f023 0312 	bic.w	r3, r3, #18
 80010be:	f043 0210 	orr.w	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e013      	b.n	80010fa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1dc      	bne.n	800109a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e4:	f023 0303 	bic.w	r3, r3, #3
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000

08001108 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e0ed      	b.n	80012f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff f9fa 	bl	8000520 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113c:	f7ff fb00 	bl	8000740 <HAL_GetTick>
 8001140:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001142:	e012      	b.n	800116a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001144:	f7ff fafc 	bl	8000740 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d90b      	bls.n	800116a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001156:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2205      	movs	r2, #5
 8001162:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e0c5      	b.n	80012f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0e5      	beq.n	8001144 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0202 	bic.w	r2, r2, #2
 8001186:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001188:	f7ff fada 	bl	8000740 <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800118e:	e012      	b.n	80011b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001190:	f7ff fad6 	bl	8000740 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b0a      	cmp	r3, #10
 800119c:	d90b      	bls.n	80011b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2205      	movs	r2, #5
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e09f      	b.n	80012f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1e5      	bne.n	8001190 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7e1b      	ldrb	r3, [r3, #24]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d108      	bne.n	80011de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e007      	b.n	80011ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7e5b      	ldrb	r3, [r3, #25]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d108      	bne.n	8001208 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e007      	b.n	8001218 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001216:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e9b      	ldrb	r3, [r3, #26]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d108      	bne.n	8001232 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0220 	orr.w	r2, r2, #32
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e007      	b.n	8001242 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0220 	bic.w	r2, r2, #32
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7edb      	ldrb	r3, [r3, #27]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d108      	bne.n	800125c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0210 	bic.w	r2, r2, #16
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e007      	b.n	800126c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0210 	orr.w	r2, r2, #16
 800126a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7f1b      	ldrb	r3, [r3, #28]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d108      	bne.n	8001286 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0208 	orr.w	r2, r2, #8
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	e007      	b.n	8001296 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0208 	bic.w	r2, r2, #8
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7f5b      	ldrb	r3, [r3, #29]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d108      	bne.n	80012b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0204 	orr.w	r2, r2, #4
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e007      	b.n	80012c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0204 	bic.w	r2, r2, #4
 80012be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	ea42 0103 	orr.w	r1, r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	1e5a      	subs	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001314:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001316:	7cfb      	ldrb	r3, [r7, #19]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d003      	beq.n	8001324 <HAL_CAN_ConfigFilter+0x26>
 800131c:	7cfb      	ldrb	r3, [r7, #19]
 800131e:	2b02      	cmp	r3, #2
 8001320:	f040 80aa 	bne.w	8001478 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	2201      	movs	r2, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d123      	bne.n	80013a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43db      	mvns	r3, r3
 8001368:	401a      	ands	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001380:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3248      	adds	r2, #72	@ 0x48
 8001386:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800139a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800139c:	6979      	ldr	r1, [r7, #20]
 800139e:	3348      	adds	r3, #72	@ 0x48
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d122      	bne.n	80013f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3248      	adds	r2, #72	@ 0x48
 80013d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ea:	6979      	ldr	r1, [r7, #20]
 80013ec:	3348      	adds	r3, #72	@ 0x48
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800140e:	e007      	b.n	8001420 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	431a      	orrs	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800143a:	e007      	b.n	800144c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d107      	bne.n	8001464 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	431a      	orrs	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800146a:	f023 0201 	bic.w	r2, r3, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	e006      	b.n	8001486 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
  }
}
 8001486:	4618      	mov	r0, r3
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d12e      	bne.n	8001502 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff f940 	bl	8000740 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014c2:	e012      	b.n	80014ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014c4:	f7ff f93c 	bl	8000740 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b0a      	cmp	r3, #10
 80014d0:	d90b      	bls.n	80014ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2205      	movs	r2, #5
 80014e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e012      	b.n	8001510 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e5      	bne.n	80014c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e006      	b.n	8001510 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
  }
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d003      	beq.n	8001544 <HAL_CAN_AddTxMessage+0x2c>
 800153c:	7ffb      	ldrb	r3, [r7, #31]
 800153e:	2b02      	cmp	r3, #2
 8001540:	f040 80ad 	bne.w	800169e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10a      	bne.n	8001564 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8095 	beq.w	800168e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	0e1b      	lsrs	r3, r3, #24
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800156e:	2201      	movs	r2, #1
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10d      	bne.n	800159c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800158a:	68f9      	ldr	r1, [r7, #12]
 800158c:	6809      	ldr	r1, [r1, #0]
 800158e:	431a      	orrs	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3318      	adds	r3, #24
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	440b      	add	r3, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e00f      	b.n	80015bc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ac:	68f9      	ldr	r1, [r7, #12]
 80015ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3318      	adds	r3, #24
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	440b      	add	r3, r1
 80015ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3318      	adds	r3, #24
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	440b      	add	r3, r1
 80015cc:	3304      	adds	r3, #4
 80015ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	7d1b      	ldrb	r3, [r3, #20]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d111      	bne.n	80015fc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3318      	adds	r3, #24
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	3304      	adds	r3, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6811      	ldr	r1, [r2, #0]
 80015ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3318      	adds	r3, #24
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	440b      	add	r3, r1
 80015f8:	3304      	adds	r3, #4
 80015fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3307      	adds	r3, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	061a      	lsls	r2, r3, #24
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3306      	adds	r3, #6
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3305      	adds	r3, #5
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	4313      	orrs	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	3204      	adds	r2, #4
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4610      	mov	r0, r2
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	6811      	ldr	r1, [r2, #0]
 8001624:	ea43 0200 	orr.w	r2, r3, r0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	440b      	add	r3, r1
 800162e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001632:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3303      	adds	r3, #3
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	061a      	lsls	r2, r3, #24
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3302      	adds	r3, #2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3301      	adds	r3, #1
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	4313      	orrs	r3, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	7812      	ldrb	r2, [r2, #0]
 8001654:	4610      	mov	r0, r2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6811      	ldr	r1, [r2, #0]
 800165a:	ea43 0200 	orr.w	r2, r3, r0
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	440b      	add	r3, r1
 8001664:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001668:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3318      	adds	r3, #24
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	6811      	ldr	r1, [r2, #0]
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3318      	adds	r3, #24
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	440b      	add	r3, r1
 8001688:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e00e      	b.n	80016ac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e006      	b.n	80016ac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3724      	adds	r7, #36	@ 0x24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
	...

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	@ (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff90 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff49 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff5e 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff90 	bl	8001770 <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5f 	bl	800171c <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffb0 	bl	80017d4 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e169      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001894:	2201      	movs	r2, #1
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8158 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d05e      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018bc:	4a98      	ldr	r2, [pc, #608]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d875      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018c2:	4a98      	ldr	r2, [pc, #608]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d058      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018c8:	4a96      	ldr	r2, [pc, #600]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d86f      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018ce:	4a96      	ldr	r2, [pc, #600]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d052      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018d4:	4a94      	ldr	r2, [pc, #592]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d869      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018da:	4a94      	ldr	r2, [pc, #592]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04c      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018e0:	4a92      	ldr	r2, [pc, #584]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d863      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018e6:	4a92      	ldr	r2, [pc, #584]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d046      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018ec:	4a90      	ldr	r2, [pc, #576]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d85d      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d82a      	bhi.n	800194c <HAL_GPIO_Init+0xcc>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d859      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <HAL_GPIO_Init+0x80>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	0800197b 	.word	0x0800197b
 8001904:	08001955 	.word	0x08001955
 8001908:	08001967 	.word	0x08001967
 800190c:	080019a9 	.word	0x080019a9
 8001910:	080019af 	.word	0x080019af
 8001914:	080019af 	.word	0x080019af
 8001918:	080019af 	.word	0x080019af
 800191c:	080019af 	.word	0x080019af
 8001920:	080019af 	.word	0x080019af
 8001924:	080019af 	.word	0x080019af
 8001928:	080019af 	.word	0x080019af
 800192c:	080019af 	.word	0x080019af
 8001930:	080019af 	.word	0x080019af
 8001934:	080019af 	.word	0x080019af
 8001938:	080019af 	.word	0x080019af
 800193c:	080019af 	.word	0x080019af
 8001940:	080019af 	.word	0x080019af
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001971 	.word	0x08001971
 800194c:	4a79      	ldr	r2, [pc, #484]	@ (8001b34 <HAL_GPIO_Init+0x2b4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e029      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e024      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01f      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e01a      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e013      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e009      	b.n	80019b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          break;
 80019ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	@ 0xff
 80019b4:	d801      	bhi.n	80019ba <HAL_GPIO_Init+0x13a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_Init+0x13e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	@ 0xff
 80019c4:	d802      	bhi.n	80019cc <HAL_GPIO_Init+0x14c>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x152>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	3b08      	subs	r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	210f      	movs	r1, #15
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80b1 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a00:	4b4d      	ldr	r3, [pc, #308]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a18:	4a48      	ldr	r2, [pc, #288]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a40      	ldr	r2, [pc, #256]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	@ (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	@ (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	492c      	ldr	r1, [pc, #176]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4928      	ldr	r1, [pc, #160]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4922      	ldr	r1, [pc, #136]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491e      	ldr	r1, [pc, #120]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4918      	ldr	r1, [pc, #96]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4914      	ldr	r1, [pc, #80]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d021      	beq.n	8001b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	490e      	ldr	r1, [pc, #56]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e021      	b.n	8001b62 <HAL_GPIO_Init+0x2e2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40011400 	.word	0x40011400
 8001b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4909      	ldr	r1, [pc, #36]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae8e 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	372c      	adds	r7, #44	@ 0x2c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e272      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8087 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba8:	4b92      	ldr	r3, [pc, #584]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d00c      	beq.n	8001bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d112      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5e>
 8001bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bcc:	d10b      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bce:	4b89      	ldr	r3, [pc, #548]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d06c      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x12c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d168      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e24c      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x76>
 8001bf0:	4b80      	ldr	r3, [pc, #512]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a7f      	ldr	r2, [pc, #508]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e02e      	b.n	8001c5c <HAL_RCC_OscConfig+0xd4>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x98>
 8001c06:	4b7b      	ldr	r3, [pc, #492]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7a      	ldr	r2, [pc, #488]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b78      	ldr	r3, [pc, #480]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a77      	ldr	r2, [pc, #476]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e01d      	b.n	8001c5c <HAL_RCC_OscConfig+0xd4>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0xbc>
 8001c2a:	4b72      	ldr	r3, [pc, #456]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a71      	ldr	r2, [pc, #452]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b6f      	ldr	r3, [pc, #444]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0xd4>
 8001c44:	4b6b      	ldr	r3, [pc, #428]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6a      	ldr	r2, [pc, #424]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b68      	ldr	r3, [pc, #416]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a67      	ldr	r2, [pc, #412]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7fe fd6c 	bl	8000740 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7fe fd68 	bl	8000740 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e200      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0xe4>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fd58 	bl	8000740 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7fe fd54 	bl	8000740 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e1ec      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	4b53      	ldr	r3, [pc, #332]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x10c>
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d063      	beq.n	8001d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cce:	4b49      	ldr	r3, [pc, #292]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d11c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x18c>
 8001cda:	4b46      	ldr	r3, [pc, #280]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d116      	bne.n	8001d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	4b43      	ldr	r3, [pc, #268]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_RCC_OscConfig+0x176>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e1c0      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4939      	ldr	r1, [pc, #228]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	e03a      	b.n	8001d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d020      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d1c:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe fd0d 	bl	8000740 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7fe fd09 	bl	8000740 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1a1      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4927      	ldr	r1, [pc, #156]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	e015      	b.n	8001d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5e:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7fe fcec 	bl	8000740 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7fe fce8 	bl	8000740 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e180      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d03a      	beq.n	8001e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d019      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_RCC_OscConfig+0x274>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7fe fccc 	bl	8000740 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dac:	f7fe fcc8 	bl	8000740 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e160      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f000 faba 	bl	8002344 <RCC_Delay>
 8001dd0:	e01c      	b.n	8001e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <HAL_RCC_OscConfig+0x274>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fcb2 	bl	8000740 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dde:	e00f      	b.n	8001e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7fe fcae 	bl	8000740 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d908      	bls.n	8001e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e146      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	42420000 	.word	0x42420000
 8001dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	4b92      	ldr	r3, [pc, #584]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e9      	bne.n	8001de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80a6 	beq.w	8001f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a87      	ldr	r2, [pc, #540]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b85      	ldr	r3, [pc, #532]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	4b82      	ldr	r3, [pc, #520]	@ (8002050 <HAL_RCC_OscConfig+0x4c8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e52:	4b7f      	ldr	r3, [pc, #508]	@ (8002050 <HAL_RCC_OscConfig+0x4c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7e      	ldr	r2, [pc, #504]	@ (8002050 <HAL_RCC_OscConfig+0x4c8>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe fc6f 	bl	8000740 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7fe fc6b 	bl	8000740 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b64      	cmp	r3, #100	@ 0x64
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e103      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	4b75      	ldr	r3, [pc, #468]	@ (8002050 <HAL_RCC_OscConfig+0x4c8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x312>
 8001e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4a6e      	ldr	r2, [pc, #440]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6213      	str	r3, [r2, #32]
 8001e98:	e02d      	b.n	8001ef6 <HAL_RCC_OscConfig+0x36e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x334>
 8001ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a69      	ldr	r2, [pc, #420]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6213      	str	r3, [r2, #32]
 8001eae:	4b67      	ldr	r3, [pc, #412]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a66      	ldr	r2, [pc, #408]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	6213      	str	r3, [r2, #32]
 8001eba:	e01c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x36e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d10c      	bne.n	8001ede <HAL_RCC_OscConfig+0x356>
 8001ec4:	4b61      	ldr	r3, [pc, #388]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a60      	ldr	r2, [pc, #384]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e00b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x36e>
 8001ede:	4b5b      	ldr	r3, [pc, #364]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a5a      	ldr	r2, [pc, #360]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	4b58      	ldr	r3, [pc, #352]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a57      	ldr	r2, [pc, #348]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d015      	beq.n	8001f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7fe fc1f 	bl	8000740 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe fc1b 	bl	8000740 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0b1      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ee      	beq.n	8001f06 <HAL_RCC_OscConfig+0x37e>
 8001f28:	e014      	b.n	8001f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fc09 	bl	8000740 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe fc05 	bl	8000740 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e09b      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	4b40      	ldr	r3, [pc, #256]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ee      	bne.n	8001f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d105      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8087 	beq.w	800207e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d061      	beq.n	8002040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d146      	bne.n	8002012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b33      	ldr	r3, [pc, #204]	@ (8002054 <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fbd9 	bl	8000740 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7fe fbd5 	bl	8000740 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e06d      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	4b29      	ldr	r3, [pc, #164]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb8:	d108      	bne.n	8001fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fba:	4b24      	ldr	r3, [pc, #144]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4921      	ldr	r1, [pc, #132]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a19      	ldr	r1, [r3, #32]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	491b      	ldr	r1, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fba9 	bl	8000740 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe fba5 	bl	8000740 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e03d      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x46a>
 8002010:	e035      	b.n	800207e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <HAL_RCC_OscConfig+0x4cc>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fb92 	bl	8000740 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe fb8e 	bl	8000740 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e026      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_RCC_OscConfig+0x4c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x498>
 800203e:	e01e      	b.n	800207e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e019      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
 8002054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002058:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_RCC_OscConfig+0x500>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	429a      	cmp	r2, r3
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d001      	beq.n	800207e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0d0      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b6a      	ldr	r3, [pc, #424]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d910      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b67      	ldr	r3, [pc, #412]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	4965      	ldr	r1, [pc, #404]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b63      	ldr	r3, [pc, #396]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0b8      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e8:	4b59      	ldr	r3, [pc, #356]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a58      	ldr	r2, [pc, #352]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002100:	4b53      	ldr	r3, [pc, #332]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a52      	ldr	r2, [pc, #328]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800210a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	494d      	ldr	r1, [pc, #308]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d040      	beq.n	80021ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b47      	ldr	r3, [pc, #284]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d115      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e07f      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e073      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b3d      	ldr	r3, [pc, #244]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06b      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b39      	ldr	r3, [pc, #228]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4936      	ldr	r1, [pc, #216]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800217c:	f7fe fae0 	bl	8000740 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe fadc 	bl	8000740 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e053      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b2d      	ldr	r3, [pc, #180]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b27      	ldr	r3, [pc, #156]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d210      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4922      	ldr	r1, [pc, #136]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b20      	ldr	r3, [pc, #128]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e032      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4916      	ldr	r1, [pc, #88]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002206:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	490e      	ldr	r1, [pc, #56]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800221a:	f000 f821 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 800221e:	4602      	mov	r2, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	490a      	ldr	r1, [pc, #40]	@ (8002254 <HAL_RCC_ClockConfig+0x1c8>)
 800222c:	5ccb      	ldrb	r3, [r1, r3]
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	4a09      	ldr	r2, [pc, #36]	@ (8002258 <HAL_RCC_ClockConfig+0x1cc>)
 8002234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_RCC_ClockConfig+0x1d0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fa3e 	bl	80006bc <HAL_InitTick>

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000
 8002250:	40021000 	.word	0x40021000
 8002254:	080026c8 	.word	0x080026c8
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800227a:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x30>
 800228a:	2b08      	cmp	r3, #8
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x36>
 800228e:	e027      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002292:	613b      	str	r3, [r7, #16]
      break;
 8002294:	e027      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	0c9b      	lsrs	r3, r3, #18
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	4a17      	ldr	r2, [pc, #92]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80022a0:	5cd3      	ldrb	r3, [r2, r3]
 80022a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d010      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0c5b      	lsrs	r3, r3, #17
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	4a11      	ldr	r2, [pc, #68]	@ (8002300 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a0d      	ldr	r2, [pc, #52]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022c2:	fb03 f202 	mul.w	r2, r3, r2
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e004      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002304 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	613b      	str	r3, [r7, #16]
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e2:	613b      	str	r3, [r7, #16]
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	693b      	ldr	r3, [r7, #16]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	007a1200 	.word	0x007a1200
 80022fc:	080026e0 	.word	0x080026e0
 8002300:	080026f0 	.word	0x080026f0
 8002304:	003d0900 	.word	0x003d0900

08002308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b02      	ldr	r3, [pc, #8]	@ (8002318 <HAL_RCC_GetHCLKFreq+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002320:	f7ff fff2 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0adb      	lsrs	r3, r3, #11
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4903      	ldr	r1, [pc, #12]	@ (8002340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	080026d8 	.word	0x080026d8

08002344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <RCC_Delay+0x34>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <RCC_Delay+0x38>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0a5b      	lsrs	r3, r3, #9
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002360:	bf00      	nop
  }
  while (Delay --);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	60fa      	str	r2, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f9      	bne.n	8002360 <RCC_Delay+0x1c>
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	20000000 	.word	0x20000000
 800237c:	10624dd3 	.word	0x10624dd3

08002380 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d07d      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a0:	4b4f      	ldr	r3, [pc, #316]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10d      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ac:	4b4c      	ldr	r3, [pc, #304]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	4a4b      	ldr	r2, [pc, #300]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	61d3      	str	r3, [r2, #28]
 80023b8:	4b49      	ldr	r3, [pc, #292]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b46      	ldr	r3, [pc, #280]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d118      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d4:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a42      	ldr	r2, [pc, #264]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e0:	f7fe f9ae 	bl	8000740 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	e008      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7fe f9aa 	bl	8000740 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e06d      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002406:	4b36      	ldr	r3, [pc, #216]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800240e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02e      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d027      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002424:	4b2e      	ldr	r3, [pc, #184]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800242c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800242e:	4b2e      	ldr	r3, [pc, #184]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002434:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800243a:	4a29      	ldr	r2, [pc, #164]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d014      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe f979 	bl	8000740 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe f975 	bl	8000740 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e036      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ee      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4917      	ldr	r1, [pc, #92]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002482:	4313      	orrs	r3, r2
 8002484:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002496:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a4:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	490b      	ldr	r1, [pc, #44]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4904      	ldr	r1, [pc, #16]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40007000 	.word	0x40007000
 80024e8:	42420440 	.word	0x42420440

080024ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b10      	cmp	r3, #16
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b10      	cmp	r3, #16
 8002512:	f200 808a 	bhi.w	800262a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d045      	beq.n	80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d075      	beq.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002522:	e082      	b.n	800262a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002524:	4b46      	ldr	r3, [pc, #280]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800252a:	4b45      	ldr	r3, [pc, #276]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d07b      	beq.n	800262e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0c9b      	lsrs	r3, r3, #18
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	4a41      	ldr	r2, [pc, #260]	@ (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d015      	beq.n	800257a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800254e:	4b3c      	ldr	r3, [pc, #240]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0c5b      	lsrs	r3, r3, #17
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	4a3b      	ldr	r2, [pc, #236]	@ (8002648 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002568:	4a38      	ldr	r2, [pc, #224]	@ (800264c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	e004      	b.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4a34      	ldr	r2, [pc, #208]	@ (8002650 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002584:	4b2e      	ldr	r3, [pc, #184]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002590:	d102      	bne.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	61bb      	str	r3, [r7, #24]
      break;
 8002596:	e04a      	b.n	800262e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4a2d      	ldr	r2, [pc, #180]	@ (8002654 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	61bb      	str	r3, [r7, #24]
      break;
 80025a6:	e042      	b.n	800262e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80025a8:	4b25      	ldr	r3, [pc, #148]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025b8:	d108      	bne.n	80025cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80025c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e01f      	b.n	800260c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025d6:	d109      	bne.n	80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80025d8:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80025e4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e00f      	b.n	800260c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025f6:	d11c      	bne.n	8002632 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025f8:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d016      	beq.n	8002632 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002604:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002608:	61bb      	str	r3, [r7, #24]
      break;
 800260a:	e012      	b.n	8002632 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800260c:	e011      	b.n	8002632 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800260e:	f7ff fe85 	bl	800231c <HAL_RCC_GetPCLK2Freq>
 8002612:	4602      	mov	r2, r0
 8002614:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0b9b      	lsrs	r3, r3, #14
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	3301      	adds	r3, #1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	61bb      	str	r3, [r7, #24]
      break;
 8002628:	e004      	b.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800262a:	bf00      	nop
 800262c:	e002      	b.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800262e:	bf00      	nop
 8002630:	e000      	b.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002632:	bf00      	nop
    }
  }
  return (frequency);
 8002634:	69bb      	ldr	r3, [r7, #24]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	080026f4 	.word	0x080026f4
 8002648:	08002704 	.word	0x08002704
 800264c:	007a1200 	.word	0x007a1200
 8002650:	003d0900 	.word	0x003d0900
 8002654:	aaaaaaab 	.word	0xaaaaaaab

08002658 <memset>:
 8002658:	4603      	mov	r3, r0
 800265a:	4402      	add	r2, r0
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <memset+0xa>
 8002660:	4770      	bx	lr
 8002662:	f803 1b01 	strb.w	r1, [r3], #1
 8002666:	e7f9      	b.n	800265c <memset+0x4>

08002668 <__libc_init_array>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	2600      	movs	r6, #0
 800266c:	4d0c      	ldr	r5, [pc, #48]	@ (80026a0 <__libc_init_array+0x38>)
 800266e:	4c0d      	ldr	r4, [pc, #52]	@ (80026a4 <__libc_init_array+0x3c>)
 8002670:	1b64      	subs	r4, r4, r5
 8002672:	10a4      	asrs	r4, r4, #2
 8002674:	42a6      	cmp	r6, r4
 8002676:	d109      	bne.n	800268c <__libc_init_array+0x24>
 8002678:	f000 f81a 	bl	80026b0 <_init>
 800267c:	2600      	movs	r6, #0
 800267e:	4d0a      	ldr	r5, [pc, #40]	@ (80026a8 <__libc_init_array+0x40>)
 8002680:	4c0a      	ldr	r4, [pc, #40]	@ (80026ac <__libc_init_array+0x44>)
 8002682:	1b64      	subs	r4, r4, r5
 8002684:	10a4      	asrs	r4, r4, #2
 8002686:	42a6      	cmp	r6, r4
 8002688:	d105      	bne.n	8002696 <__libc_init_array+0x2e>
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002690:	4798      	blx	r3
 8002692:	3601      	adds	r6, #1
 8002694:	e7ee      	b.n	8002674 <__libc_init_array+0xc>
 8002696:	f855 3b04 	ldr.w	r3, [r5], #4
 800269a:	4798      	blx	r3
 800269c:	3601      	adds	r6, #1
 800269e:	e7f2      	b.n	8002686 <__libc_init_array+0x1e>
 80026a0:	08002708 	.word	0x08002708
 80026a4:	08002708 	.word	0x08002708
 80026a8:	08002708 	.word	0x08002708
 80026ac:	0800270c 	.word	0x0800270c

080026b0 <_init>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr

080026bc <_fini>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr
