
Tesis_LGBS_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed80  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800ee90  0800ee90  0000fe90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f340  0800f340  00011344  2**0
                  CONTENTS
  4 .ARM          00000008  0800f340  0800f340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f348  0800f348  00011344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f348  0800f348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f34c  0800f34c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800f350  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a0  20000344  0800f694  00011344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018e4  0800f694  000118e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180fc  00000000  00000000  0001136d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042d8  00000000  00000000  00029469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0002d748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fd  00000000  00000000  0002eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdef  00000000  00000000  0002fea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2fb  00000000  00000000  0004cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009858c  00000000  00000000  00066f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff51b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007068  00000000  00000000  000ff560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001065c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ee78 	.word	0x0800ee78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800ee78 	.word	0x0800ee78

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_frsub>:
 8000ca4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ca8:	e002      	b.n	8000cb0 <__addsf3>
 8000caa:	bf00      	nop

08000cac <__aeabi_fsub>:
 8000cac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cb0 <__addsf3>:
 8000cb0:	0042      	lsls	r2, r0, #1
 8000cb2:	bf1f      	itttt	ne
 8000cb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cb8:	ea92 0f03 	teqne	r2, r3
 8000cbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc4:	d06a      	beq.n	8000d9c <__addsf3+0xec>
 8000cc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cce:	bfc1      	itttt	gt
 8000cd0:	18d2      	addgt	r2, r2, r3
 8000cd2:	4041      	eorgt	r1, r0
 8000cd4:	4048      	eorgt	r0, r1
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	bfb8      	it	lt
 8000cda:	425b      	neglt	r3, r3
 8000cdc:	2b19      	cmp	r3, #25
 8000cde:	bf88      	it	hi
 8000ce0:	4770      	bxhi	lr
 8000ce2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4240      	negne	r0, r0
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cfe:	bf18      	it	ne
 8000d00:	4249      	negne	r1, r1
 8000d02:	ea92 0f03 	teq	r2, r3
 8000d06:	d03f      	beq.n	8000d88 <__addsf3+0xd8>
 8000d08:	f1a2 0201 	sub.w	r2, r2, #1
 8000d0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d10:	eb10 000c 	adds.w	r0, r0, ip
 8000d14:	f1c3 0320 	rsb	r3, r3, #32
 8000d18:	fa01 f103 	lsl.w	r1, r1, r3
 8000d1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__addsf3+0x78>
 8000d22:	4249      	negs	r1, r1
 8000d24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d2c:	d313      	bcc.n	8000d56 <__addsf3+0xa6>
 8000d2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d32:	d306      	bcc.n	8000d42 <__addsf3+0x92>
 8000d34:	0840      	lsrs	r0, r0, #1
 8000d36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3a:	f102 0201 	add.w	r2, r2, #1
 8000d3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000d40:	d251      	bcs.n	8000de6 <__addsf3+0x136>
 8000d42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4a:	bf08      	it	eq
 8000d4c:	f020 0001 	biceq.w	r0, r0, #1
 8000d50:	ea40 0003 	orr.w	r0, r0, r3
 8000d54:	4770      	bx	lr
 8000d56:	0049      	lsls	r1, r1, #1
 8000d58:	eb40 0000 	adc.w	r0, r0, r0
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	bf28      	it	cs
 8000d60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d64:	d2ed      	bcs.n	8000d42 <__addsf3+0x92>
 8000d66:	fab0 fc80 	clz	ip, r0
 8000d6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d76:	bfaa      	itet	ge
 8000d78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d7c:	4252      	neglt	r2, r2
 8000d7e:	4318      	orrge	r0, r3
 8000d80:	bfbc      	itt	lt
 8000d82:	40d0      	lsrlt	r0, r2
 8000d84:	4318      	orrlt	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	f092 0f00 	teq	r2, #0
 8000d8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d90:	bf06      	itte	eq
 8000d92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d96:	3201      	addeq	r2, #1
 8000d98:	3b01      	subne	r3, #1
 8000d9a:	e7b5      	b.n	8000d08 <__addsf3+0x58>
 8000d9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da4:	bf18      	it	ne
 8000da6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000daa:	d021      	beq.n	8000df0 <__addsf3+0x140>
 8000dac:	ea92 0f03 	teq	r2, r3
 8000db0:	d004      	beq.n	8000dbc <__addsf3+0x10c>
 8000db2:	f092 0f00 	teq	r2, #0
 8000db6:	bf08      	it	eq
 8000db8:	4608      	moveq	r0, r1
 8000dba:	4770      	bx	lr
 8000dbc:	ea90 0f01 	teq	r0, r1
 8000dc0:	bf1c      	itt	ne
 8000dc2:	2000      	movne	r0, #0
 8000dc4:	4770      	bxne	lr
 8000dc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dca:	d104      	bne.n	8000dd6 <__addsf3+0x126>
 8000dcc:	0040      	lsls	r0, r0, #1
 8000dce:	bf28      	it	cs
 8000dd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dda:	bf3c      	itt	cc
 8000ddc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000de0:	4770      	bxcc	lr
 8000de2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000de6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dee:	4770      	bx	lr
 8000df0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df4:	bf16      	itet	ne
 8000df6:	4608      	movne	r0, r1
 8000df8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dfc:	4601      	movne	r1, r0
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	bf06      	itte	eq
 8000e02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e06:	ea90 0f01 	teqeq	r0, r1
 8000e0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_ui2f>:
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e004      	b.n	8000e20 <__aeabi_i2f+0x8>
 8000e16:	bf00      	nop

08000e18 <__aeabi_i2f>:
 8000e18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e1c:	bf48      	it	mi
 8000e1e:	4240      	negmi	r0, r0
 8000e20:	ea5f 0c00 	movs.w	ip, r0
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	e01c      	b.n	8000e6e <__aeabi_l2f+0x2a>

08000e34 <__aeabi_ul2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e00a      	b.n	8000e58 <__aeabi_l2f+0x14>
 8000e42:	bf00      	nop

08000e44 <__aeabi_l2f>:
 8000e44:	ea50 0201 	orrs.w	r2, r0, r1
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e50:	d502      	bpl.n	8000e58 <__aeabi_l2f+0x14>
 8000e52:	4240      	negs	r0, r0
 8000e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e58:	ea5f 0c01 	movs.w	ip, r1
 8000e5c:	bf02      	ittt	eq
 8000e5e:	4684      	moveq	ip, r0
 8000e60:	4601      	moveq	r1, r0
 8000e62:	2000      	moveq	r0, #0
 8000e64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e68:	bf08      	it	eq
 8000e6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e72:	fabc f28c 	clz	r2, ip
 8000e76:	3a08      	subs	r2, #8
 8000e78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e7c:	db10      	blt.n	8000ea0 <__aeabi_l2f+0x5c>
 8000e7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e82:	4463      	add	r3, ip
 8000e84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e88:	f1c2 0220 	rsb	r2, r2, #32
 8000e8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e90:	fa20 f202 	lsr.w	r2, r0, r2
 8000e94:	eb43 0002 	adc.w	r0, r3, r2
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f102 0220 	add.w	r2, r2, #32
 8000ea4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea8:	f1c2 0220 	rsb	r2, r2, #32
 8000eac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb4:	eb43 0002 	adc.w	r0, r3, r2
 8000eb8:	bf08      	it	eq
 8000eba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_f2uiz>:
 8000ec0:	0042      	lsls	r2, r0, #1
 8000ec2:	d20e      	bcs.n	8000ee2 <__aeabi_f2uiz+0x22>
 8000ec4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ec8:	d30b      	bcc.n	8000ee2 <__aeabi_f2uiz+0x22>
 8000eca:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ece:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ed2:	d409      	bmi.n	8000ee8 <__aeabi_f2uiz+0x28>
 8000ed4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ed8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000edc:	fa23 f002 	lsr.w	r0, r3, r2
 8000ee0:	4770      	bx	lr
 8000ee2:	f04f 0000 	mov.w	r0, #0
 8000ee6:	4770      	bx	lr
 8000ee8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_f2uiz+0x32>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d102      	bne.n	8000ef8 <__aeabi_f2uiz+0x38>
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef6:	4770      	bx	lr
 8000ef8:	f04f 0000 	mov.w	r0, #0
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__aeabi_d2lz>:
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	2200      	movs	r2, #0
 8000f04:	2300      	movs	r3, #0
 8000f06:	4604      	mov	r4, r0
 8000f08:	460d      	mov	r5, r1
 8000f0a:	f7ff fe0b 	bl	8000b24 <__aeabi_dcmplt>
 8000f0e:	b928      	cbnz	r0, 8000f1c <__aeabi_d2lz+0x1c>
 8000f10:	4620      	mov	r0, r4
 8000f12:	4629      	mov	r1, r5
 8000f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f18:	f000 b80a 	b.w	8000f30 <__aeabi_d2ulz>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f22:	f000 f805 	bl	8000f30 <__aeabi_d2ulz>
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	bd38      	pop	{r3, r4, r5, pc}
 8000f2e:	bf00      	nop

08000f30 <__aeabi_d2ulz>:
 8000f30:	b5d0      	push	{r4, r6, r7, lr}
 8000f32:	2200      	movs	r2, #0
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <__aeabi_d2ulz+0x34>)
 8000f36:	4606      	mov	r6, r0
 8000f38:	460f      	mov	r7, r1
 8000f3a:	f7ff fb81 	bl	8000640 <__aeabi_dmul>
 8000f3e:	f7ff fe41 	bl	8000bc4 <__aeabi_d2uiz>
 8000f42:	4604      	mov	r4, r0
 8000f44:	f7ff fb02 	bl	800054c <__aeabi_ui2d>
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <__aeabi_d2ulz+0x38>)
 8000f4c:	f7ff fb78 	bl	8000640 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4630      	mov	r0, r6
 8000f56:	4639      	mov	r1, r7
 8000f58:	f7ff f9ba 	bl	80002d0 <__aeabi_dsub>
 8000f5c:	f7ff fe32 	bl	8000bc4 <__aeabi_d2uiz>
 8000f60:	4621      	mov	r1, r4
 8000f62:	bdd0      	pop	{r4, r6, r7, pc}
 8000f64:	3df00000 	.word	0x3df00000
 8000f68:	41f00000 	.word	0x41f00000

08000f6c <curr_control_init>:
static uint16_t i_offset = 0;
static bool calibrated = false;


void curr_control_init(ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4817      	ldr	r0, [pc, #92]	@ (8000fd8 <curr_control_init+0x6c>)
 8000f7c:	f002 fc94 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	4814      	ldr	r0, [pc, #80]	@ (8000fd8 <curr_control_init+0x6c>)
 8000f86:	f002 fc8f 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_B, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4812      	ldr	r0, [pc, #72]	@ (8000fd8 <curr_control_init+0x6c>)
 8000f90:	f002 fc8a 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_B, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2103      	movs	r1, #3
 8000f98:	480f      	ldr	r0, [pc, #60]	@ (8000fd8 <curr_control_init+0x6c>)
 8000f9a:	f002 fc85 	bl	80038a8 <HAL_GPIO_WritePin>

	if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f001 fb58 	bl	8002654 <HAL_ADCEx_Calibration_Start>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <curr_control_init+0x42>
	{
		Error_Handler();
 8000faa:	f000 fb77 	bl	800169c <Error_Handler>
	}

	if (HAL_ADC_Start_IT(hadc) != HAL_OK)
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f001 f832 	bl	8002018 <HAL_ADC_Start_IT>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <curr_control_init+0x52>
	{
		Error_Handler();
 8000fba:	f000 fb6f 	bl	800169c <Error_Handler>
	}

	if (HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f005 fc93 	bl	80068ec <HAL_TIMEx_PWMN_Start>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <curr_control_init+0x64>
	{
		Error_Handler();
 8000fcc:	f000 fb66 	bl	800169c <Error_Handler>
	}


}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010800 	.word	0x40010800

08000fdc <get_I>:


float get_I()
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	return i_ref_float;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	@ (8000fec <get_I+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000360 	.word	0x20000360

08000ff0 <set_I>:

void set_I(float i)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	i_ref_float = i;
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <set_I+0x48>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
	i_ref_int = i * SENS_SENSITIVITY + i_offset;
 8000ffe:	490f      	ldr	r1, [pc, #60]	@ (800103c <set_I+0x4c>)
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff f8ad 	bl	8000160 <__aeabi_fmul>
 8001006:	4603      	mov	r3, r0
 8001008:	461c      	mov	r4, r3
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <set_I+0x50>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff02 	bl	8000e18 <__aeabi_i2f>
 8001014:	4603      	mov	r3, r0
 8001016:	4619      	mov	r1, r3
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fe49 	bl	8000cb0 <__addsf3>
 800101e:	4603      	mov	r3, r0
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff4d 	bl	8000ec0 <__aeabi_f2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <set_I+0x54>)
 800102c:	801a      	strh	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	20000360 	.word	0x20000360
 800103c:	43780000 	.word	0x43780000
 8001040:	20000366 	.word	0x20000366
 8001044:	20000364 	.word	0x20000364

08001048 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	static uint16_t adc_value;
	adc_value = HAL_ADC_GetValue(hadc);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f001 f897 	bl	8002184 <HAL_ADC_GetValue>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <HAL_ADC_ConvCpltCallback+0x74>)
 800105c:	801a      	strh	r2, [r3, #0]
	if (!calibrated)
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <HAL_ADC_ConvCpltCallback+0x34>
	{
		i_offset = adc_value;
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <HAL_ADC_ConvCpltCallback+0x74>)
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001072:	801a      	strh	r2, [r3, #0]
		calibrated = true;
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
		}
	}
}
 800107a:	e01a      	b.n	80010b2 <HAL_ADC_ConvCpltCallback+0x6a>
		if (adc_value > i_ref_int)
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <HAL_ADC_ConvCpltCallback+0x74>)
 800107e:	881a      	ldrh	r2, [r3, #0]
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_ADC_ConvCpltCallback+0x80>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d90a      	bls.n	800109e <HAL_ADC_ConvCpltCallback+0x56>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	480f      	ldr	r0, [pc, #60]	@ (80010cc <HAL_ADC_ConvCpltCallback+0x84>)
 800108e:	f002 fc0b 	bl	80038a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2101      	movs	r1, #1
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <HAL_ADC_ConvCpltCallback+0x84>)
 8001098:	f002 fc06 	bl	80038a8 <HAL_GPIO_WritePin>
}
 800109c:	e009      	b.n	80010b2 <HAL_ADC_ConvCpltCallback+0x6a>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2101      	movs	r1, #1
 80010a2:	480a      	ldr	r0, [pc, #40]	@ (80010cc <HAL_ADC_ConvCpltCallback+0x84>)
 80010a4:	f002 fc00 	bl	80038a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2100      	movs	r1, #0
 80010ac:	4807      	ldr	r0, [pc, #28]	@ (80010cc <HAL_ADC_ConvCpltCallback+0x84>)
 80010ae:	f002 fbfb 	bl	80038a8 <HAL_GPIO_WritePin>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000036a 	.word	0x2000036a
 80010c0:	20000368 	.word	0x20000368
 80010c4:	20000366 	.word	0x20000366
 80010c8:	20000364 	.word	0x20000364
 80010cc:	40010800 	.word	0x40010800

080010d0 <command_I>:

#include "stdio.h"
#include "string.h"


void command_I(uint8_t *buff, uint16_t size){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
	static float i;
	if (buff[1] == '?')
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3301      	adds	r3, #1
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e4:	d112      	bne.n	800110c <command_I+0x3c>
	{
		gcvt(get_I(), 3, buff);
 80010e6:	f7ff ff79 	bl	8000fdc <get_I>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa4f 	bl	8000590 <__aeabi_f2d>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f00a ff07 	bl	800bf08 <gcvt>
		buff[4] = '\n';
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3304      	adds	r3, #4
 80010fe:	220a      	movs	r2, #10
 8001100:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 8001102:	2105      	movs	r1, #5
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f009 fcdd 	bl	800aac4 <CDC_Transmit_FS>
 800110a:	e017      	b.n	800113c <command_I+0x6c>
	}
	else if (buff[1] == '=')
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b3d      	cmp	r3, #61	@ 0x3d
 8001114:	d112      	bne.n	800113c <command_I+0x6c>
	{
		i = atof(&buff[2]);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3302      	adds	r3, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f00a f8ea 	bl	800b2f4 <atof>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd6c 	bl	8000c04 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <command_I+0x88>)
 8001130:	6013      	str	r3, [r2, #0]
		set_I(i);
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <command_I+0x88>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff5a 	bl	8000ff0 <set_I>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 800113c:	bf00      	nop
 800113e:	2101      	movs	r1, #1
 8001140:	200a      	movs	r0, #10
 8001142:	f009 fcbf 	bl	800aac4 <CDC_Transmit_FS>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	d0f8      	beq.n	800113e <command_I+0x6e>
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000036c 	.word	0x2000036c

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001160:	f000 fe20 	bl	8001da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001164:	f000 f846 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001168:	f000 fa42 	bl	80015f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800116c:	f000 fa1a 	bl	80015a4 <MX_DMA_Init>
  MX_CAN_Init();
 8001170:	f000 f8dc 	bl	800132c <MX_CAN_Init>
  MX_SPI1_Init();
 8001174:	f000 f93e 	bl	80013f4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001178:	f000 f89a 	bl	80012b0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800117c:	f000 f99e 	bl	80014bc <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001180:	f009 fbd4 	bl	800a92c <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8001184:	f000 f968 	bl	8001458 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  curr_control_init(&hadc1, &htim3);
 8001188:	4915      	ldr	r1, [pc, #84]	@ (80011e0 <main+0x84>)
 800118a:	4816      	ldr	r0, [pc, #88]	@ (80011e4 <main+0x88>)
 800118c:	f7ff feee 	bl	8000f6c <curr_control_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (CDC_data_recieved())
 8001190:	f009 fcbe 	bl	800ab10 <CDC_data_recieved>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0fa      	beq.n	8001190 <main+0x34>
	  {
		  rx_usb_amount = CDC_Receive_data(msg, 64);
 800119a:	2140      	movs	r1, #64	@ 0x40
 800119c:	4812      	ldr	r0, [pc, #72]	@ (80011e8 <main+0x8c>)
 800119e:	f009 fcc1 	bl	800ab24 <CDC_Receive_data>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <main+0x90>)
 80011a8:	801a      	strh	r2, [r3, #0]
		  switch ((int)msg[0])
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <main+0x8c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b49      	cmp	r3, #73	@ 0x49
 80011b0:	d106      	bne.n	80011c0 <main+0x64>
		  {
		  	  case 'I':
		  		  command_I(msg, rx_usb_amount);
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <main+0x90>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <main+0x8c>)
 80011ba:	f7ff ff89 	bl	80010d0 <command_I>
		  		  break;
 80011be:	e00d      	b.n	80011dc <main+0x80>
		  	  default:
		  		  CDC_Transmit_FS("\nNo reconocido\n", 15);
 80011c0:	210f      	movs	r1, #15
 80011c2:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <main+0x94>)
 80011c4:	f009 fc7e 	bl	800aac4 <CDC_Transmit_FS>
		  		  while (CDC_Transmit_FS(msg, rx_usb_amount) == USBD_BUSY);
 80011c8:	bf00      	nop
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <main+0x90>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <main+0x8c>)
 80011d2:	f009 fc77 	bl	800aac4 <CDC_Transmit_FS>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d0f6      	beq.n	80011ca <main+0x6e>
	  if (CDC_data_recieved())
 80011dc:	e7d8      	b.n	8001190 <main+0x34>
 80011de:	bf00      	nop
 80011e0:	20000500 	.word	0x20000500
 80011e4:	20000370 	.word	0x20000370
 80011e8:	20000548 	.word	0x20000548
 80011ec:	20000588 	.word	0x20000588
 80011f0:	0800ee90 	.word	0x0800ee90

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	@ 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fe:	2228      	movs	r2, #40	@ 0x28
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00a ffa9 	bl	800c15a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001224:	2301      	movs	r3, #1
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001232:	2301      	movs	r3, #1
 8001234:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001240:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	4618      	mov	r0, r3
 800124c:	f004 f8a4 	bl	8005398 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001256:	f000 fa21 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800126a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2102      	movs	r1, #2
 8001276:	4618      	mov	r0, r3
 8001278:	f004 fb10 	bl	800589c <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001282:	f000 fa0b 	bl	800169c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001286:	2312      	movs	r3, #18
 8001288:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800128a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800128e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fc7a 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80012a2:	f000 f9fb 	bl	800169c <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	@ 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_ADC1_Init+0x74>)
 80012c2:	4a19      	ldr	r2, [pc, #100]	@ (8001328 <MX_ADC1_Init+0x78>)
 80012c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_ADC1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_ADC1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_ADC1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_ADC1_Init+0x74>)
 80012da:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80012de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MX_ADC1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_ADC1_Init+0x74>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ec:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_ADC1_Init+0x74>)
 80012ee:	f000 fdbb 	bl	8001e68 <HAL_ADC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 f9d0 	bl	800169c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012fc:	2306      	movs	r3, #6
 80012fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001300:	2301      	movs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_ADC1_Init+0x74>)
 800130e:	f001 f80d 	bl	800232c <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001318:	f000 f9c0 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000370 	.word	0x20000370
 8001328:	40012400 	.word	0x40012400

0800132c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */
	TxHeader.DLC = 2;  // data length
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <MX_CAN_Init+0xb8>)
 8001332:	2202      	movs	r2, #2
 8001334:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001336:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <MX_CAN_Init+0xb8>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800133c:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <MX_CAN_Init+0xb8>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x6A5;
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <MX_CAN_Init+0xb8>)
 8001344:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 8001348:	601a      	str	r2, [r3, #0]
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 800134a:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <MX_CAN_Init+0xbc>)
 800134c:	2201      	movs	r2, #1
 800134e:	621a      	str	r2, [r3, #32]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <MX_CAN_Init+0xbc>)
 8001352:	2201      	movs	r2, #1
 8001354:	611a      	str	r2, [r3, #16]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001356:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <MX_CAN_Init+0xbc>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
	CANFilter.FilterIdHigh = 0x6A5<<5;
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <MX_CAN_Init+0xbc>)
 800135e:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 8001362:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0;
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <MX_CAN_Init+0xbc>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <MX_CAN_Init+0xbc>)
 800136c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001370:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0;
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_CAN_Init+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_CAN_Init+0xbc>)
 800137a:	2201      	movs	r2, #1
 800137c:	61da      	str	r2, [r3, #28]
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800137e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <MX_CAN_Init+0xc0>)
 8001380:	4a1b      	ldr	r2, [pc, #108]	@ (80013f0 <MX_CAN_Init+0xc4>)
 8001382:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_CAN_Init+0xc0>)
 8001386:	2210      	movs	r2, #16
 8001388:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800138a:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_CAN_Init+0xc0>)
 800138c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001390:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_CAN_Init+0xc0>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_CAN_Init+0xc0>)
 800139a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800139e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013ca:	4808      	ldr	r0, [pc, #32]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013cc:	f001 f9f9 	bl	80027c2 <HAL_CAN_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_CAN_Init+0xae>
  {
    Error_Handler();
 80013d6:	f000 f961 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
//  HAL_CAN_Start(&hcan);
//  HAL_CAN_ConfigFilter(&hcan, &CANFilter);
//  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
  HAL_CAN_DeInit(&hcan);
 80013da:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_CAN_Init+0xc0>)
 80013dc:	f001 faec 	bl	80029b8 <HAL_CAN_DeInit>
  /* USER CODE END CAN_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000058c 	.word	0x2000058c
 80013e8:	200005a4 	.word	0x200005a4
 80013ec:	200003a0 	.word	0x200003a0
 80013f0:	40006400 	.word	0x40006400

080013f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_SPI1_Init+0x5c>)
 80013fa:	4a16      	ldr	r2, [pc, #88]	@ (8001454 <MX_SPI1_Init+0x60>)
 80013fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_SPI1_Init+0x5c>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_SPI1_Init+0x5c>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_SPI1_Init+0x5c>)
 800140c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001410:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_SPI1_Init+0x5c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <MX_SPI1_Init+0x5c>)
 800141a:	2201      	movs	r2, #1
 800141c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_SPI1_Init+0x5c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001424:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <MX_SPI1_Init+0x5c>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_SPI1_Init+0x5c>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <MX_SPI1_Init+0x5c>)
 8001432:	2200      	movs	r2, #0
 8001434:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_SPI1_Init+0x5c>)
 8001438:	220a      	movs	r2, #10
 800143a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	@ (8001450 <MX_SPI1_Init+0x5c>)
 800143e:	f004 fd13 	bl	8005e68 <HAL_SPI_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001448:	f000 f928 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200003c8 	.word	0x200003c8
 8001454:	40013000 	.word	0x40013000

08001458 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 800145e:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <MX_SPI2_Init+0x60>)
 8001460:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 8001470:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001474:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800147c:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 800147e:	2201      	movs	r2, #1
 8001480:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 800149c:	220a      	movs	r2, #10
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <MX_SPI2_Init+0x5c>)
 80014a2:	f004 fce1 	bl	8005e68 <HAL_SPI_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80014ac:	f000 f8f6 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000420 	.word	0x20000420
 80014b8:	40003800 	.word	0x40003800

080014bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	@ 0x38
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <MX_TIM3_Init+0xe0>)
 80014ee:	4a2c      	ldr	r2, [pc, #176]	@ (80015a0 <MX_TIM3_Init+0xe4>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014f2:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <MX_TIM3_Init+0xe0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b28      	ldr	r3, [pc, #160]	@ (800159c <MX_TIM3_Init+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360;
 80014fe:	4b27      	ldr	r3, [pc, #156]	@ (800159c <MX_TIM3_Init+0xe0>)
 8001500:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001504:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b25      	ldr	r3, [pc, #148]	@ (800159c <MX_TIM3_Init+0xe0>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <MX_TIM3_Init+0xe0>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001512:	4822      	ldr	r0, [pc, #136]	@ (800159c <MX_TIM3_Init+0xe0>)
 8001514:	f004 fd2c 	bl	8005f70 <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800151e:	f000 f8bd 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152c:	4619      	mov	r1, r3
 800152e:	481b      	ldr	r0, [pc, #108]	@ (800159c <MX_TIM3_Init+0xe0>)
 8001530:	f004 fe88 	bl	8006244 <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800153a:	f000 f8af 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800153e:	4817      	ldr	r0, [pc, #92]	@ (800159c <MX_TIM3_Init+0xe0>)
 8001540:	f004 fd65 	bl	800600e <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800154a:	f000 f8a7 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800154e:	2320      	movs	r3, #32
 8001550:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	4619      	mov	r1, r3
 800155c:	480f      	ldr	r0, [pc, #60]	@ (800159c <MX_TIM3_Init+0xe0>)
 800155e:	f005 fa63 	bl	8006a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001568:	f000 f898 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156c:	2360      	movs	r3, #96	@ 0x60
 800156e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 180;
 8001570:	23b4      	movs	r3, #180	@ 0xb4
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	@ (800159c <MX_TIM3_Init+0xe0>)
 8001584:	f004 fd9c 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800158e:	f000 f885 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3738      	adds	r7, #56	@ 0x38
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000500 	.word	0x20000500
 80015a0:	40000400 	.word	0x40000400

080015a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <MX_DMA_Init+0x48>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <MX_DMA_Init+0x48>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <MX_DMA_Init+0x48>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	200d      	movs	r0, #13
 80015c8:	f001 fd89 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015cc:	200d      	movs	r0, #13
 80015ce:	f001 fda2 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	200f      	movs	r0, #15
 80015d8:	f001 fd81 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015dc:	200f      	movs	r0, #15
 80015de:	f001 fd9a 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001604:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <MX_GPIO_Init+0xa4>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a22      	ldr	r2, [pc, #136]	@ (8001694 <MX_GPIO_Init+0xa4>)
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <MX_GPIO_Init+0xa4>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <MX_GPIO_Init+0xa4>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <MX_GPIO_Init+0xa4>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <MX_GPIO_Init+0xa4>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_GPIO_Init+0xa4>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a16      	ldr	r2, [pc, #88]	@ (8001694 <MX_GPIO_Init+0xa4>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_GPIO_Init+0xa4>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	210f      	movs	r1, #15
 8001650:	4811      	ldr	r0, [pc, #68]	@ (8001698 <MX_GPIO_Init+0xa8>)
 8001652:	f002 f929 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001656:	230f      	movs	r3, #15
 8001658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2302      	movs	r3, #2
 8001664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	480a      	ldr	r0, [pc, #40]	@ (8001698 <MX_GPIO_Init+0xa8>)
 800166e:	f001 fedb 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001672:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4619      	mov	r1, r3
 8001686:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_GPIO_Init+0xa8>)
 8001688:	f001 fece 	bl	8003428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	40010800 	.word	0x40010800

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <Error_Handler+0x8>

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_MspInit+0x5c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <HAL_MspInit+0x5c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_MspInit+0x5c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_MspInit+0x5c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_MspInit+0x60>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <HAL_MspInit+0x60>)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000

0800170c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_ADC_MspInit+0x7c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d129      	bne.n	8001780 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <HAL_ADC_MspInit+0x80>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a16      	ldr	r2, [pc, #88]	@ (800178c <HAL_ADC_MspInit+0x80>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_ADC_MspInit+0x80>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_ADC_MspInit+0x80>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_ADC_MspInit+0x80>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_ADC_MspInit+0x80>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800175c:	2340      	movs	r3, #64	@ 0x40
 800175e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001760:	2303      	movs	r3, #3
 8001762:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	4809      	ldr	r0, [pc, #36]	@ (8001790 <HAL_ADC_MspInit+0x84>)
 800176c:	f001 fe5c 	bl	8003428 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2012      	movs	r0, #18
 8001776:	f001 fcb2 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800177a:	2012      	movs	r0, #18
 800177c:	f001 fccb 	bl	8003116 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40012400 	.word	0x40012400
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800

08001794 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001864 <HAL_CAN_MspInit+0xd0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d153      	bne.n	800185c <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <HAL_CAN_MspInit+0xd4>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001868 <HAL_CAN_MspInit+0xd4>)
 80017ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017be:	61d3      	str	r3, [r2, #28]
 80017c0:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <HAL_CAN_MspInit+0xd4>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <HAL_CAN_MspInit+0xd4>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a25      	ldr	r2, [pc, #148]	@ (8001868 <HAL_CAN_MspInit+0xd4>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <HAL_CAN_MspInit+0xd4>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	481c      	ldr	r0, [pc, #112]	@ (800186c <HAL_CAN_MspInit+0xd8>)
 80017fa:	f001 fe15 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4816      	ldr	r0, [pc, #88]	@ (800186c <HAL_CAN_MspInit+0xd8>)
 8001814:	f001 fe08 	bl	8003428 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001818:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_CAN_MspInit+0xdc>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
 8001836:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <HAL_CAN_MspInit+0xdc>)
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2014      	movs	r0, #20
 8001842:	f001 fc4c 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001846:	2014      	movs	r0, #20
 8001848:	f001 fc65 	bl	8003116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2015      	movs	r0, #21
 8001852:	f001 fc44 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001856:	2015      	movs	r0, #21
 8001858:	f001 fc5d 	bl	8003116 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	@ 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40006400 	.word	0x40006400
 8001868:	40021000 	.word	0x40021000
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40010000 	.word	0x40010000

08001874 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_CAN_MspDeInit+0x38>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10d      	bne.n	80018a2 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_CAN_MspDeInit+0x3c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a09      	ldr	r2, [pc, #36]	@ (80018b0 <HAL_CAN_MspDeInit+0x3c>)
 800188c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001890:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001892:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001896:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <HAL_CAN_MspDeInit+0x40>)
 8001898:	f001 ff4a 	bl	8003730 <HAL_GPIO_DeInit>
    * Be aware, disabling shared interrupt may affect other IPs
    */
    /* HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn); */
  /* USER CODE END CAN1:USB_LP_CAN1_RX0_IRQn disable */

    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 800189c:	2015      	movs	r0, #21
 800189e:	f001 fc48 	bl	8003132 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40006400 	.word	0x40006400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010c00 	.word	0x40010c00

080018b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	@ 0x30
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a73      	ldr	r2, [pc, #460]	@ (8001aa0 <HAL_SPI_MspInit+0x1e8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d17f      	bne.n	80019d8 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018d8:	4b72      	ldr	r3, [pc, #456]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a71      	ldr	r2, [pc, #452]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80018de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b69      	ldr	r3, [pc, #420]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	4b66      	ldr	r3, [pc, #408]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a65      	ldr	r2, [pc, #404]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	485c      	ldr	r0, [pc, #368]	@ (8001aa8 <HAL_SPI_MspInit+0x1f0>)
 8001936:	f001 fd77 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800193a:	2308      	movs	r3, #8
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	4857      	ldr	r0, [pc, #348]	@ (8001aac <HAL_SPI_MspInit+0x1f4>)
 800194e:	f001 fd6b 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001952:	2330      	movs	r3, #48	@ 0x30
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	4851      	ldr	r0, [pc, #324]	@ (8001aac <HAL_SPI_MspInit+0x1f4>)
 8001966:	f001 fd5f 	bl	8003428 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800196a:	4b51      	ldr	r3, [pc, #324]	@ (8001ab0 <HAL_SPI_MspInit+0x1f8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001972:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001980:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab0 <HAL_SPI_MspInit+0x1f8>)
 8001982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001984:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001986:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 8001988:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab8 <HAL_SPI_MspInit+0x200>)
 800198a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800198c:	4b49      	ldr	r3, [pc, #292]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 800198e:	2210      	movs	r2, #16
 8001990:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001992:	4b48      	ldr	r3, [pc, #288]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001998:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 800199a:	2280      	movs	r2, #128	@ 0x80
 800199c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800199e:	4b45      	ldr	r3, [pc, #276]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 80019a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a6:	4b43      	ldr	r3, [pc, #268]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 80019a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ac:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80019ae:	4b41      	ldr	r3, [pc, #260]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 80019b0:	2220      	movs	r2, #32
 80019b2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019b4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019ba:	483e      	ldr	r0, [pc, #248]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 80019bc:	f001 fbd4 	bl	8003168 <HAL_DMA_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80019c6:	f7ff fe69 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a39      	ldr	r2, [pc, #228]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 80019ce:	649a      	str	r2, [r3, #72]	@ 0x48
 80019d0:	4a38      	ldr	r2, [pc, #224]	@ (8001ab4 <HAL_SPI_MspInit+0x1fc>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019d6:	e05e      	b.n	8001a96 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a37      	ldr	r2, [pc, #220]	@ (8001abc <HAL_SPI_MspInit+0x204>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d159      	bne.n	8001a96 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4a29      	ldr	r2, [pc, #164]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	6193      	str	r3, [r2, #24]
 8001a06:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_SPI_MspInit+0x1ec>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a12:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	4821      	ldr	r0, [pc, #132]	@ (8001aac <HAL_SPI_MspInit+0x1f4>)
 8001a28:	f001 fcfe 	bl	8003428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a2c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	481a      	ldr	r0, [pc, #104]	@ (8001aac <HAL_SPI_MspInit+0x1f4>)
 8001a42:	f001 fcf1 	bl	8003428 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac4 <HAL_SPI_MspInit+0x20c>)
 8001a4a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a4e:	2210      	movs	r2, #16
 8001a50:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a64:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a66:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a6c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a70:	2220      	movs	r2, #32
 8001a72:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a7a:	4811      	ldr	r0, [pc, #68]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a7c:	f001 fb74 	bl	8003168 <HAL_DMA_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_SPI_MspInit+0x1d2>
      Error_Handler();
 8001a86:	f7ff fe09 	bl	800169c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a8e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a90:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac0 <HAL_SPI_MspInit+0x208>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001a96:	bf00      	nop
 8001a98:	3730      	adds	r7, #48	@ 0x30
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	20000478 	.word	0x20000478
 8001ab8:	40020030 	.word	0x40020030
 8001abc:	40003800 	.word	0x40003800
 8001ac0:	200004bc 	.word	0x200004bc
 8001ac4:	40020058 	.word	0x40020058

08001ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a09      	ldr	r2, [pc, #36]	@ (8001afc <HAL_TIM_Base_MspInit+0x34>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10b      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_TIM_Base_MspInit+0x38>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a08      	ldr	r2, [pc, #32]	@ (8001b00 <HAL_TIM_Base_MspInit+0x38>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	61d3      	str	r3, [r2, #28]
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_TIM_Base_MspInit+0x38>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40021000 	.word	0x40021000

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <NMI_Handler+0x4>

08001b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b54:	f000 f96c 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <DMA1_Channel3_IRQHandler+0x10>)
 8001b62:	f001 fb5b 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000478 	.word	0x20000478

08001b70 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <DMA1_Channel5_IRQHandler+0x10>)
 8001b76:	f001 fb51 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200004bc 	.word	0x200004bc

08001b84 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <ADC1_2_IRQHandler+0x10>)
 8001b8a:	f000 fb07 	bl	800219c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000370 	.word	0x20000370

08001b98 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b9c:	4803      	ldr	r0, [pc, #12]	@ (8001bac <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8001b9e:	f000 ff77 	bl	8002a90 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ba2:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8001ba4:	f001 ffb4 	bl	8003b10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200003a0 	.word	0x200003a0
 8001bb0:	200012a0 	.word	0x200012a0

08001bb4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <CAN1_RX1_IRQHandler+0x10>)
 8001bba:	f000 ff69 	bl	8002a90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200003a0 	.word	0x200003a0

08001bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <_kill>:

int _kill(int pid, int sig)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001be0:	f00a fb1c 	bl	800c21c <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2216      	movs	r2, #22
 8001be8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_exit>:

void _exit (int status)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bfe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffe7 	bl	8001bd6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <_exit+0x12>

08001c0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00a      	b.n	8001c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1e:	f3af 8000 	nop.w
 8001c22:	4601      	mov	r1, r0
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60ba      	str	r2, [r7, #8]
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf0      	blt.n	8001c1e <_read+0x12>
  }

  return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	e009      	b.n	8001c6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbf1      	blt.n	8001c58 <_write+0x12>
  }
  return len;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_close>:

int _close(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <_isatty>:

int _isatty(int file)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f00a fa84 	bl	800c21c <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20005000 	.word	0x20005000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	200005cc 	.word	0x200005cc
 8001d48:	200018e8 	.word	0x200018e8

08001d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d58:	f7ff fff8 	bl	8001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d5e:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d60:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a09      	ldr	r2, [pc, #36]	@ (8001d98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d74:	4c09      	ldr	r4, [pc, #36]	@ (8001d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d82:	f00a fa51 	bl	800c228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d86:	f7ff f9e9 	bl	800115c <main>
  bx lr
 8001d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d90:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001d94:	0800f350 	.word	0x0800f350
  ldr r2, =_sbss
 8001d98:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001d9c:	200018e4 	.word	0x200018e4

08001da0 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <CAN1_SCE_IRQHandler>
	...

08001da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <HAL_Init+0x28>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a07      	ldr	r2, [pc, #28]	@ (8001dcc <HAL_Init+0x28>)
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f001 f987 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dba:	200f      	movs	r0, #15
 8001dbc:	f000 f808 	bl	8001dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc0:	f7ff fc72 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000

08001dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd8:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_InitTick+0x54>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_InitTick+0x58>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 f9ad 	bl	800314e <HAL_SYSTICK_Config>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00e      	b.n	8001e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d80a      	bhi.n	8001e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e0c:	f001 f967 	bl	80030de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e10:	4a06      	ldr	r2, [pc, #24]	@ (8001e2c <HAL_InitTick+0x5c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_IncTick+0x1c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a03      	ldr	r2, [pc, #12]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	200005d0 	.word	0x200005d0

08001e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b02      	ldr	r3, [pc, #8]	@ (8001e64 <HAL_GetTick+0x10>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	200005d0 	.word	0x200005d0

08001e68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0be      	b.n	8002008 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fc30 	bl	800170c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fb8f 	bl	80025d0 <ADC_ConversionStop_Disable>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 8099 	bne.w	8001ff6 <HAL_ADC_Init+0x18e>
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 8095 	bne.w	8001ff6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ed4:	f023 0302 	bic.w	r3, r3, #2
 8001ed8:	f043 0202 	orr.w	r2, r3, #2
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ee8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7b1b      	ldrb	r3, [r3, #12]
 8001eee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ef0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f00:	d003      	beq.n	8001f0a <HAL_ADC_Init+0xa2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_ADC_Init+0xa8>
 8001f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f0e:	e000      	b.n	8001f12 <HAL_ADC_Init+0xaa>
 8001f10:	2300      	movs	r3, #0
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7d1b      	ldrb	r3, [r3, #20]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d119      	bne.n	8001f54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7b1b      	ldrb	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	035a      	lsls	r2, r3, #13
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e00b      	b.n	8001f54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	f043 0220 	orr.w	r2, r3, #32
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <HAL_ADC_Init+0x1a8>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f84:	d003      	beq.n	8001f8e <HAL_ADC_Init+0x126>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d104      	bne.n	8001f98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	051b      	lsls	r3, r3, #20
 8001f96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <HAL_ADC_Init+0x1ac>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10b      	bne.n	8001fd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fd2:	e018      	b.n	8002006 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	f023 0312 	bic.w	r3, r3, #18
 8001fdc:	f043 0210 	orr.w	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ff4:	e007      	b.n	8002006 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002006:	7dfb      	ldrb	r3, [r7, #23]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	ffe1f7fd 	.word	0xffe1f7fd
 8002014:	ff1f0efe 	.word	0xff1f0efe

08002018 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Start_IT+0x1a>
 800202e:	2302      	movs	r3, #2
 8002030:	e0a0      	b.n	8002174 <HAL_ADC_Start_IT+0x15c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa6e 	bl	800251c <ADC_Enable>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 808f 	bne.w	800216a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002050:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a45      	ldr	r2, [pc, #276]	@ (800217c <HAL_ADC_Start_IT+0x164>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d105      	bne.n	8002076 <HAL_ADC_Start_IT+0x5e>
 800206a:	4b45      	ldr	r3, [pc, #276]	@ (8002180 <HAL_ADC_Start_IT+0x168>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208c:	2b00      	cmp	r3, #0
 800208e:	d026      	beq.n	80020de <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002098:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a0:	e01d      	b.n	80020de <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a33      	ldr	r2, [pc, #204]	@ (8002180 <HAL_ADC_Start_IT+0x168>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Start_IT+0xaa>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2f      	ldr	r2, [pc, #188]	@ (800217c <HAL_ADC_Start_IT+0x164>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10d      	bne.n	80020de <HAL_ADC_Start_IT+0xc6>
 80020c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002180 <HAL_ADC_Start_IT+0x168>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	f023 0206 	bic.w	r2, r3, #6
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020f6:	e002      	b.n	80020fe <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f06f 0202 	mvn.w	r2, #2
 800210e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800212a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800212e:	d113      	bne.n	8002158 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002134:	4a11      	ldr	r2, [pc, #68]	@ (800217c <HAL_ADC_Start_IT+0x164>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d105      	bne.n	8002146 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <HAL_ADC_Start_IT+0x168>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d108      	bne.n	8002158 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	e00c      	b.n	8002172 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e003      	b.n	8002172 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40012800 	.word	0x40012800
 8002180:	40012400 	.word	0x40012400

08002184 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03e      	beq.n	800223c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d039      	beq.n	800223c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021ee:	d11d      	bne.n	800222c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d119      	bne.n	800222c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0220 	bic.w	r2, r2, #32
 8002206:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7fe ff0b 	bl	8001048 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f06f 0212 	mvn.w	r2, #18
 800223a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	d04d      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d048      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002272:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002276:	d012      	beq.n	800229e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002282:	2b00      	cmp	r3, #0
 8002284:	d125      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002290:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002294:	d11d      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d119      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa6c 	bl	80027b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 020c 	mvn.w	r2, #12
 80022e0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d012      	beq.n	8002312 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f809 	bl	800231a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0201 	mvn.w	r2, #1
 8002310:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x20>
 8002348:	2302      	movs	r3, #2
 800234a:	e0dc      	b.n	8002506 <HAL_ADC_ConfigChannel+0x1da>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b06      	cmp	r3, #6
 800235a:	d81c      	bhi.n	8002396 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b05      	subs	r3, #5
 800236e:	221f      	movs	r2, #31
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	4019      	ands	r1, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	3b05      	subs	r3, #5
 8002388:	fa00 f203 	lsl.w	r2, r0, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	@ 0x34
 8002394:	e03c      	b.n	8002410 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d81c      	bhi.n	80023d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b23      	subs	r3, #35	@ 0x23
 80023b0:	221f      	movs	r2, #31
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	4019      	ands	r1, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b23      	subs	r3, #35	@ 0x23
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80023d6:	e01b      	b.n	8002410 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3b41      	subs	r3, #65	@ 0x41
 80023ea:	221f      	movs	r2, #31
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4019      	ands	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	3b41      	subs	r3, #65	@ 0x41
 8002404:	fa00 f203 	lsl.w	r2, r0, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b09      	cmp	r3, #9
 8002416:	d91c      	bls.n	8002452 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68d9      	ldr	r1, [r3, #12]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	3b1e      	subs	r3, #30
 800242a:	2207      	movs	r2, #7
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	4019      	ands	r1, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6898      	ldr	r0, [r3, #8]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	3b1e      	subs	r3, #30
 8002444:	fa00 f203 	lsl.w	r2, r0, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	e019      	b.n	8002486 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6919      	ldr	r1, [r3, #16]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	2207      	movs	r2, #7
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	4019      	ands	r1, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6898      	ldr	r0, [r3, #8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	fa00 f203 	lsl.w	r2, r0, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b10      	cmp	r3, #16
 800248c:	d003      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002492:	2b11      	cmp	r3, #17
 8002494:	d132      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_ADC_ConfigChannel+0x1e4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d125      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d126      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80024bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d11a      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_ADC_ConfigChannel+0x1e8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <HAL_ADC_ConfigChannel+0x1ec>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	0c9a      	lsrs	r2, r3, #18
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024dc:	e002      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f9      	bne.n	80024de <HAL_ADC_ConfigChannel+0x1b2>
 80024ea:	e007      	b.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40012400 	.word	0x40012400
 8002514:	20000000 	.word	0x20000000
 8002518:	431bde83 	.word	0x431bde83

0800251c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d040      	beq.n	80025bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <ADC_Enable+0xac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <ADC_Enable+0xb0>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	0c9b      	lsrs	r3, r3, #18
 8002556:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002558:	e002      	b.n	8002560 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3b01      	subs	r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f9      	bne.n	800255a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002566:	f7ff fc75 	bl	8001e54 <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800256c:	e01f      	b.n	80025ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800256e:	f7ff fc71 	bl	8001e54 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d918      	bls.n	80025ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d011      	beq.n	80025ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e007      	b.n	80025be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d1d8      	bne.n	800256e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000
 80025cc:	431bde83 	.word	0x431bde83

080025d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d12e      	bne.n	8002648 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025fa:	f7ff fc2b 	bl	8001e54 <HAL_GetTick>
 80025fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002600:	e01b      	b.n	800263a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002602:	f7ff fc27 	bl	8001e54 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d914      	bls.n	800263a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d10d      	bne.n	800263a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e007      	b.n	800264a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d0dc      	beq.n	8002602 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADCEx_Calibration_Start+0x1e>
 800266e:	2302      	movs	r3, #2
 8002670:	e097      	b.n	80027a2 <HAL_ADCEx_Calibration_Start+0x14e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa8 	bl	80025d0 <ADC_ConversionStop_Disable>
 8002680:	4603      	mov	r3, r0
 8002682:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff49 	bl	800251c <ADC_Enable>
 800268a:	4603      	mov	r3, r0
 800268c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f040 8081 	bne.w	8002798 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800269e:	f023 0302 	bic.w	r3, r3, #2
 80026a2:	f043 0202 	orr.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026aa:	4b40      	ldr	r3, [pc, #256]	@ (80027ac <HAL_ADCEx_Calibration_Start+0x158>)
 80026ac:	681c      	ldr	r4, [r3, #0]
 80026ae:	2002      	movs	r0, #2
 80026b0:	f003 fb24 	bl	8005cfc <HAL_RCCEx_GetPeriphCLKFreq>
 80026b4:	4603      	mov	r3, r0
 80026b6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80026ba:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80026bc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80026be:	e002      	b.n	80026c6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f9      	bne.n	80026c0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0208 	orr.w	r2, r2, #8
 80026da:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026dc:	f7ff fbba 	bl	8001e54 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026e2:	e01b      	b.n	800271c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026e4:	f7ff fbb6 	bl	8001e54 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b0a      	cmp	r3, #10
 80026f0:	d914      	bls.n	800271c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	f023 0312 	bic.w	r3, r3, #18
 8002708:	f043 0210 	orr.w	r2, r3, #16
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e042      	b.n	80027a2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1dc      	bne.n	80026e4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0204 	orr.w	r2, r2, #4
 8002738:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800273a:	f7ff fb8b 	bl	8001e54 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002740:	e01b      	b.n	800277a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002742:	f7ff fb87 	bl	8001e54 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b0a      	cmp	r3, #10
 800274e:	d914      	bls.n	800277a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	f023 0312 	bic.w	r3, r3, #18
 8002766:	f043 0210 	orr.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e013      	b.n	80027a2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1dc      	bne.n	8002742 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	f023 0303 	bic.w	r3, r3, #3
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd90      	pop	{r4, r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0ed      	b.n	80029b0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7fe ffd7 	bl	8001794 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027f6:	f7ff fb2d 	bl	8001e54 <HAL_GetTick>
 80027fa:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027fc:	e012      	b.n	8002824 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027fe:	f7ff fb29 	bl	8001e54 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b0a      	cmp	r3, #10
 800280a:	d90b      	bls.n	8002824 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2205      	movs	r2, #5
 800281c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0c5      	b.n	80029b0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0e5      	beq.n	80027fe <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0202 	bic.w	r2, r2, #2
 8002840:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002842:	f7ff fb07 	bl	8001e54 <HAL_GetTick>
 8002846:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002848:	e012      	b.n	8002870 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800284a:	f7ff fb03 	bl	8001e54 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b0a      	cmp	r3, #10
 8002856:	d90b      	bls.n	8002870 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2205      	movs	r2, #5
 8002868:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e09f      	b.n	80029b0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7e1b      	ldrb	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d108      	bne.n	8002898 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e007      	b.n	80028a8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7e5b      	ldrb	r3, [r3, #25]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d108      	bne.n	80028c2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e007      	b.n	80028d2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7e9b      	ldrb	r3, [r3, #26]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0220 	orr.w	r2, r2, #32
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e007      	b.n	80028fc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0220 	bic.w	r2, r2, #32
 80028fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7edb      	ldrb	r3, [r3, #27]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d108      	bne.n	8002916 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0210 	bic.w	r2, r2, #16
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e007      	b.n	8002926 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0210 	orr.w	r2, r2, #16
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7f1b      	ldrb	r3, [r3, #28]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d108      	bne.n	8002940 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0208 	orr.w	r2, r2, #8
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e007      	b.n	8002950 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0208 	bic.w	r2, r2, #8
 800294e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7f5b      	ldrb	r3, [r3, #29]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0204 	orr.w	r2, r2, #4
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e007      	b.n	800297a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0204 	bic.w	r2, r2, #4
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	ea42 0103 	orr.w	r1, r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e015      	b.n	80029f6 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f817 	bl	80029fe <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7fe ff4f 	bl	8001874 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029e4:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d133      	bne.n	8002a7a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a22:	f7ff fa17 	bl	8001e54 <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a28:	e012      	b.n	8002a50 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a2a:	f7ff fa13 	bl	8001e54 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b0a      	cmp	r3, #10
 8002a36:	d90b      	bls.n	8002a50 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2205      	movs	r2, #5
 8002a48:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e01b      	b.n	8002a88 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0e5      	beq.n	8002a2a <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0202 	bic.w	r2, r2, #2
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e006      	b.n	8002a88 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	@ 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d07c      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d023      	beq.n	8002b28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f983 	bl	8002dfe <HAL_CAN_TxMailbox0CompleteCallback>
 8002af8:	e016      	b.n	8002b28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0c:	e00c      	b.n	8002b28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b20:	e002      	b.n	8002b28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f986 	bl	8002e34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d024      	beq.n	8002b7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f962 	bl	8002e10 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b4c:	e016      	b.n	8002b7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b60:	e00c      	b.n	8002b7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b74:	e002      	b.n	8002b7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f965 	bl	8002e46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d024      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f941 	bl	8002e22 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ba0:	e016      	b.n	8002bd0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb4:	e00c      	b.n	8002bd0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc8:	e002      	b.n	8002bd0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f944 	bl	8002e58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f933 	bl	8002e7c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f91b 	bl	8002e6a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2210      	movs	r2, #16
 8002c56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2208      	movs	r2, #8
 8002c72:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f913 	bl	8002ea0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f8fb 	bl	8002e8e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8fc 	bl	8002eb2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8f4 	bl	8002ec4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d07b      	beq.n	8002dde <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d072      	beq.n	8002dd6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d043      	beq.n	8002dd6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d03e      	beq.n	8002dd6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d5e:	2b60      	cmp	r3, #96	@ 0x60
 8002d60:	d02b      	beq.n	8002dba <HAL_CAN_IRQHandler+0x32a>
 8002d62:	2b60      	cmp	r3, #96	@ 0x60
 8002d64:	d82e      	bhi.n	8002dc4 <HAL_CAN_IRQHandler+0x334>
 8002d66:	2b50      	cmp	r3, #80	@ 0x50
 8002d68:	d022      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x320>
 8002d6a:	2b50      	cmp	r3, #80	@ 0x50
 8002d6c:	d82a      	bhi.n	8002dc4 <HAL_CAN_IRQHandler+0x334>
 8002d6e:	2b40      	cmp	r3, #64	@ 0x40
 8002d70:	d019      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x316>
 8002d72:	2b40      	cmp	r3, #64	@ 0x40
 8002d74:	d826      	bhi.n	8002dc4 <HAL_CAN_IRQHandler+0x334>
 8002d76:	2b30      	cmp	r3, #48	@ 0x30
 8002d78:	d010      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x30c>
 8002d7a:	2b30      	cmp	r3, #48	@ 0x30
 8002d7c:	d822      	bhi.n	8002dc4 <HAL_CAN_IRQHandler+0x334>
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d002      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x2f8>
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d005      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d86:	e01d      	b.n	8002dc4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d90:	e019      	b.n	8002dc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	f043 0310 	orr.w	r3, r3, #16
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d9a:	e014      	b.n	8002dc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	f043 0320 	orr.w	r3, r3, #32
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002da4:	e00f      	b.n	8002dc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dae:	e00a      	b.n	8002dc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002db8:	e005      	b.n	8002dc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dc2:	e000      	b.n	8002dc6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002dc4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002dd4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f870 	bl	8002ed6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002df6:	bf00      	nop
 8002df8:	3728      	adds	r7, #40	@ 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f04:	4013      	ands	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	@ (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f34:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <__NVIC_GetPriorityGrouping+0x18>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 0307 	and.w	r3, r3, #7
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0b      	blt.n	8002f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4906      	ldr	r1, [pc, #24]	@ (8002f80 <__NVIC_EnableIRQ+0x34>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db12      	blt.n	8002fbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	490a      	ldr	r1, [pc, #40]	@ (8002fc8 <__NVIC_DisableIRQ+0x44>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	3320      	adds	r3, #32
 8002fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fb0:	f3bf 8f4f 	dsb	sy
}
 8002fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fb6:	f3bf 8f6f 	isb	sy
}
 8002fba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100

08002fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db0a      	blt.n	8002ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	490c      	ldr	r1, [pc, #48]	@ (8003018 <__NVIC_SetPriority+0x4c>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	0112      	lsls	r2, r2, #4
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff4:	e00a      	b.n	800300c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4908      	ldr	r1, [pc, #32]	@ (800301c <__NVIC_SetPriority+0x50>)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	3b04      	subs	r3, #4
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	440b      	add	r3, r1
 800300a:	761a      	strb	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	@ 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f1c3 0307 	rsb	r3, r3, #7
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf28      	it	cs
 800303e:	2304      	movcs	r3, #4
 8003040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3304      	adds	r3, #4
 8003046:	2b06      	cmp	r3, #6
 8003048:	d902      	bls.n	8003050 <NVIC_EncodePriority+0x30>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3b03      	subs	r3, #3
 800304e:	e000      	b.n	8003052 <NVIC_EncodePriority+0x32>
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	401a      	ands	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003068:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43d9      	mvns	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	4313      	orrs	r3, r2
         );
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	@ 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003094:	d301      	bcc.n	800309a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2301      	movs	r3, #1
 8003098:	e00f      	b.n	80030ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309a:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <SysTick_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a2:	210f      	movs	r1, #15
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030a8:	f7ff ff90 	bl	8002fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <SysTick_Config+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <SysTick_Config+0x40>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff09 	bl	8002ee8 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff1e 	bl	8002f30 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff90 	bl	8003020 <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5f 	bl	8002fcc <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff11 	bl	8002f4c <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800313c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff1f 	bl	8002f84 <__NVIC_DisableIRQ>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ff94 	bl	8003084 <SysTick_Config>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e043      	b.n	8003206 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <HAL_DMA_Init+0xa8>)
 8003186:	4413      	add	r3, r2
 8003188:	4a22      	ldr	r2, [pc, #136]	@ (8003214 <HAL_DMA_Init+0xac>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	009a      	lsls	r2, r3, #2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1f      	ldr	r2, [pc, #124]	@ (8003218 <HAL_DMA_Init+0xb0>)
 800319a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80031b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80031b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	bffdfff8 	.word	0xbffdfff8
 8003214:	cccccccd 	.word	0xcccccccd
 8003218:	40020000 	.word	0x40020000

0800321c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	2204      	movs	r2, #4
 800323a:	409a      	lsls	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d04f      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xc8>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04a      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d107      	bne.n	800326c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a66      	ldr	r2, [pc, #408]	@ (800340c <HAL_DMA_IRQHandler+0x1f0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d029      	beq.n	80032ca <HAL_DMA_IRQHandler+0xae>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a65      	ldr	r2, [pc, #404]	@ (8003410 <HAL_DMA_IRQHandler+0x1f4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xaa>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a63      	ldr	r2, [pc, #396]	@ (8003414 <HAL_DMA_IRQHandler+0x1f8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01a      	beq.n	80032c0 <HAL_DMA_IRQHandler+0xa4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a62      	ldr	r2, [pc, #392]	@ (8003418 <HAL_DMA_IRQHandler+0x1fc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d012      	beq.n	80032ba <HAL_DMA_IRQHandler+0x9e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a60      	ldr	r2, [pc, #384]	@ (800341c <HAL_DMA_IRQHandler+0x200>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00a      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x98>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003420 <HAL_DMA_IRQHandler+0x204>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d102      	bne.n	80032ae <HAL_DMA_IRQHandler+0x92>
 80032a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032ac:	e00e      	b.n	80032cc <HAL_DMA_IRQHandler+0xb0>
 80032ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80032b2:	e00b      	b.n	80032cc <HAL_DMA_IRQHandler+0xb0>
 80032b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032b8:	e008      	b.n	80032cc <HAL_DMA_IRQHandler+0xb0>
 80032ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032be:	e005      	b.n	80032cc <HAL_DMA_IRQHandler+0xb0>
 80032c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032c4:	e002      	b.n	80032cc <HAL_DMA_IRQHandler+0xb0>
 80032c6:	2340      	movs	r3, #64	@ 0x40
 80032c8:	e000      	b.n	80032cc <HAL_DMA_IRQHandler+0xb0>
 80032ca:	2304      	movs	r3, #4
 80032cc:	4a55      	ldr	r2, [pc, #340]	@ (8003424 <HAL_DMA_IRQHandler+0x208>)
 80032ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8094 	beq.w	8003402 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032e2:	e08e      	b.n	8003402 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	2202      	movs	r2, #2
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d056      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x186>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d051      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 020a 	bic.w	r2, r2, #10
 800331a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a38      	ldr	r2, [pc, #224]	@ (800340c <HAL_DMA_IRQHandler+0x1f0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d029      	beq.n	8003382 <HAL_DMA_IRQHandler+0x166>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a37      	ldr	r2, [pc, #220]	@ (8003410 <HAL_DMA_IRQHandler+0x1f4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_IRQHandler+0x162>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a35      	ldr	r2, [pc, #212]	@ (8003414 <HAL_DMA_IRQHandler+0x1f8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01a      	beq.n	8003378 <HAL_DMA_IRQHandler+0x15c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a34      	ldr	r2, [pc, #208]	@ (8003418 <HAL_DMA_IRQHandler+0x1fc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d012      	beq.n	8003372 <HAL_DMA_IRQHandler+0x156>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a32      	ldr	r2, [pc, #200]	@ (800341c <HAL_DMA_IRQHandler+0x200>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00a      	beq.n	800336c <HAL_DMA_IRQHandler+0x150>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a31      	ldr	r2, [pc, #196]	@ (8003420 <HAL_DMA_IRQHandler+0x204>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d102      	bne.n	8003366 <HAL_DMA_IRQHandler+0x14a>
 8003360:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003364:	e00e      	b.n	8003384 <HAL_DMA_IRQHandler+0x168>
 8003366:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800336a:	e00b      	b.n	8003384 <HAL_DMA_IRQHandler+0x168>
 800336c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003370:	e008      	b.n	8003384 <HAL_DMA_IRQHandler+0x168>
 8003372:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003376:	e005      	b.n	8003384 <HAL_DMA_IRQHandler+0x168>
 8003378:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800337c:	e002      	b.n	8003384 <HAL_DMA_IRQHandler+0x168>
 800337e:	2320      	movs	r3, #32
 8003380:	e000      	b.n	8003384 <HAL_DMA_IRQHandler+0x168>
 8003382:	2302      	movs	r3, #2
 8003384:	4a27      	ldr	r2, [pc, #156]	@ (8003424 <HAL_DMA_IRQHandler+0x208>)
 8003386:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d034      	beq.n	8003402 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033a0:	e02f      	b.n	8003402 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	2208      	movs	r2, #8
 80033a8:	409a      	lsls	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d028      	beq.n	8003404 <HAL_DMA_IRQHandler+0x1e8>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d023      	beq.n	8003404 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020e 	bic.w	r2, r2, #14
 80033ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
    }
  }
  return;
 8003402:	bf00      	nop
 8003404:	bf00      	nop
}
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40020008 	.word	0x40020008
 8003410:	4002001c 	.word	0x4002001c
 8003414:	40020030 	.word	0x40020030
 8003418:	40020044 	.word	0x40020044
 800341c:	40020058 	.word	0x40020058
 8003420:	4002006c 	.word	0x4002006c
 8003424:	40020000 	.word	0x40020000

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b08b      	sub	sp, #44	@ 0x2c
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003436:	2300      	movs	r3, #0
 8003438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343a:	e169      	b.n	8003710 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800343c:	2201      	movs	r2, #1
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 8158 	bne.w	800370a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4a9a      	ldr	r2, [pc, #616]	@ (80036c8 <HAL_GPIO_Init+0x2a0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d05e      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 8003464:	4a98      	ldr	r2, [pc, #608]	@ (80036c8 <HAL_GPIO_Init+0x2a0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d875      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 800346a:	4a98      	ldr	r2, [pc, #608]	@ (80036cc <HAL_GPIO_Init+0x2a4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d058      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 8003470:	4a96      	ldr	r2, [pc, #600]	@ (80036cc <HAL_GPIO_Init+0x2a4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d86f      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 8003476:	4a96      	ldr	r2, [pc, #600]	@ (80036d0 <HAL_GPIO_Init+0x2a8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d052      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 800347c:	4a94      	ldr	r2, [pc, #592]	@ (80036d0 <HAL_GPIO_Init+0x2a8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d869      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 8003482:	4a94      	ldr	r2, [pc, #592]	@ (80036d4 <HAL_GPIO_Init+0x2ac>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d04c      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 8003488:	4a92      	ldr	r2, [pc, #584]	@ (80036d4 <HAL_GPIO_Init+0x2ac>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d863      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 800348e:	4a92      	ldr	r2, [pc, #584]	@ (80036d8 <HAL_GPIO_Init+0x2b0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d046      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 8003494:	4a90      	ldr	r2, [pc, #576]	@ (80036d8 <HAL_GPIO_Init+0x2b0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d85d      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 800349a:	2b12      	cmp	r3, #18
 800349c:	d82a      	bhi.n	80034f4 <HAL_GPIO_Init+0xcc>
 800349e:	2b12      	cmp	r3, #18
 80034a0:	d859      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 80034a2:	a201      	add	r2, pc, #4	@ (adr r2, 80034a8 <HAL_GPIO_Init+0x80>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	08003523 	.word	0x08003523
 80034ac:	080034fd 	.word	0x080034fd
 80034b0:	0800350f 	.word	0x0800350f
 80034b4:	08003551 	.word	0x08003551
 80034b8:	08003557 	.word	0x08003557
 80034bc:	08003557 	.word	0x08003557
 80034c0:	08003557 	.word	0x08003557
 80034c4:	08003557 	.word	0x08003557
 80034c8:	08003557 	.word	0x08003557
 80034cc:	08003557 	.word	0x08003557
 80034d0:	08003557 	.word	0x08003557
 80034d4:	08003557 	.word	0x08003557
 80034d8:	08003557 	.word	0x08003557
 80034dc:	08003557 	.word	0x08003557
 80034e0:	08003557 	.word	0x08003557
 80034e4:	08003557 	.word	0x08003557
 80034e8:	08003557 	.word	0x08003557
 80034ec:	08003505 	.word	0x08003505
 80034f0:	08003519 	.word	0x08003519
 80034f4:	4a79      	ldr	r2, [pc, #484]	@ (80036dc <HAL_GPIO_Init+0x2b4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034fa:	e02c      	b.n	8003556 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	623b      	str	r3, [r7, #32]
          break;
 8003502:	e029      	b.n	8003558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	3304      	adds	r3, #4
 800350a:	623b      	str	r3, [r7, #32]
          break;
 800350c:	e024      	b.n	8003558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	3308      	adds	r3, #8
 8003514:	623b      	str	r3, [r7, #32]
          break;
 8003516:	e01f      	b.n	8003558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	330c      	adds	r3, #12
 800351e:	623b      	str	r3, [r7, #32]
          break;
 8003520:	e01a      	b.n	8003558 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800352a:	2304      	movs	r3, #4
 800352c:	623b      	str	r3, [r7, #32]
          break;
 800352e:	e013      	b.n	8003558 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003538:	2308      	movs	r3, #8
 800353a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	611a      	str	r2, [r3, #16]
          break;
 8003542:	e009      	b.n	8003558 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003544:	2308      	movs	r3, #8
 8003546:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	615a      	str	r2, [r3, #20]
          break;
 800354e:	e003      	b.n	8003558 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
          break;
 8003554:	e000      	b.n	8003558 <HAL_GPIO_Init+0x130>
          break;
 8003556:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2bff      	cmp	r3, #255	@ 0xff
 800355c:	d801      	bhi.n	8003562 <HAL_GPIO_Init+0x13a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	e001      	b.n	8003566 <HAL_GPIO_Init+0x13e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2bff      	cmp	r3, #255	@ 0xff
 800356c:	d802      	bhi.n	8003574 <HAL_GPIO_Init+0x14c>
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	e002      	b.n	800357a <HAL_GPIO_Init+0x152>
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	3b08      	subs	r3, #8
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	210f      	movs	r1, #15
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	401a      	ands	r2, r3
 800358c:	6a39      	ldr	r1, [r7, #32]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	431a      	orrs	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80b1 	beq.w	800370a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035a8:	4b4d      	ldr	r3, [pc, #308]	@ (80036e0 <HAL_GPIO_Init+0x2b8>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a4c      	ldr	r2, [pc, #304]	@ (80036e0 <HAL_GPIO_Init+0x2b8>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b4a      	ldr	r3, [pc, #296]	@ (80036e0 <HAL_GPIO_Init+0x2b8>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035c0:	4a48      	ldr	r2, [pc, #288]	@ (80036e4 <HAL_GPIO_Init+0x2bc>)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	220f      	movs	r2, #15
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a40      	ldr	r2, [pc, #256]	@ (80036e8 <HAL_GPIO_Init+0x2c0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d013      	beq.n	8003614 <HAL_GPIO_Init+0x1ec>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3f      	ldr	r2, [pc, #252]	@ (80036ec <HAL_GPIO_Init+0x2c4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00d      	beq.n	8003610 <HAL_GPIO_Init+0x1e8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3e      	ldr	r2, [pc, #248]	@ (80036f0 <HAL_GPIO_Init+0x2c8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <HAL_GPIO_Init+0x1e4>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3d      	ldr	r2, [pc, #244]	@ (80036f4 <HAL_GPIO_Init+0x2cc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_GPIO_Init+0x1e0>
 8003604:	2303      	movs	r3, #3
 8003606:	e006      	b.n	8003616 <HAL_GPIO_Init+0x1ee>
 8003608:	2304      	movs	r3, #4
 800360a:	e004      	b.n	8003616 <HAL_GPIO_Init+0x1ee>
 800360c:	2302      	movs	r3, #2
 800360e:	e002      	b.n	8003616 <HAL_GPIO_Init+0x1ee>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_GPIO_Init+0x1ee>
 8003614:	2300      	movs	r3, #0
 8003616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003618:	f002 0203 	and.w	r2, r2, #3
 800361c:	0092      	lsls	r2, r2, #2
 800361e:	4093      	lsls	r3, r2
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003626:	492f      	ldr	r1, [pc, #188]	@ (80036e4 <HAL_GPIO_Init+0x2bc>)
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	3302      	adds	r3, #2
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003640:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	492c      	ldr	r1, [pc, #176]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
 800364c:	e006      	b.n	800365c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800364e:	4b2a      	ldr	r3, [pc, #168]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	43db      	mvns	r3, r3
 8003656:	4928      	ldr	r1, [pc, #160]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 8003658:	4013      	ands	r3, r2
 800365a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003668:	4b23      	ldr	r3, [pc, #140]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4922      	ldr	r1, [pc, #136]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	60cb      	str	r3, [r1, #12]
 8003674:	e006      	b.n	8003684 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	43db      	mvns	r3, r3
 800367e:	491e      	ldr	r1, [pc, #120]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 8003680:	4013      	ands	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d006      	beq.n	800369e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003690:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4918      	ldr	r1, [pc, #96]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	e006      	b.n	80036ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800369e:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	4914      	ldr	r1, [pc, #80]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d021      	beq.n	80036fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036b8:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	490e      	ldr	r1, [pc, #56]	@ (80036f8 <HAL_GPIO_Init+0x2d0>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	e021      	b.n	800370a <HAL_GPIO_Init+0x2e2>
 80036c6:	bf00      	nop
 80036c8:	10320000 	.word	0x10320000
 80036cc:	10310000 	.word	0x10310000
 80036d0:	10220000 	.word	0x10220000
 80036d4:	10210000 	.word	0x10210000
 80036d8:	10120000 	.word	0x10120000
 80036dc:	10110000 	.word	0x10110000
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40010800 	.word	0x40010800
 80036ec:	40010c00 	.word	0x40010c00
 80036f0:	40011000 	.word	0x40011000
 80036f4:	40011400 	.word	0x40011400
 80036f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_GPIO_Init+0x304>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	43db      	mvns	r3, r3
 8003704:	4909      	ldr	r1, [pc, #36]	@ (800372c <HAL_GPIO_Init+0x304>)
 8003706:	4013      	ands	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	3301      	adds	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	fa22 f303 	lsr.w	r3, r2, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	f47f ae8e 	bne.w	800343c <HAL_GPIO_Init+0x14>
  }
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	372c      	adds	r7, #44	@ 0x2c
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40010400 	.word	0x40010400

08003730 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	@ 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800373e:	e09a      	b.n	8003876 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003740:	2201      	movs	r2, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 808d 	beq.w	8003870 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003756:	4a4e      	ldr	r2, [pc, #312]	@ (8003890 <HAL_GPIO_DeInit+0x160>)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	3302      	adds	r3, #2
 800375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003762:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	220f      	movs	r2, #15
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4013      	ands	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a46      	ldr	r2, [pc, #280]	@ (8003894 <HAL_GPIO_DeInit+0x164>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_GPIO_DeInit+0x78>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a45      	ldr	r2, [pc, #276]	@ (8003898 <HAL_GPIO_DeInit+0x168>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00d      	beq.n	80037a4 <HAL_GPIO_DeInit+0x74>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a44      	ldr	r2, [pc, #272]	@ (800389c <HAL_GPIO_DeInit+0x16c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <HAL_GPIO_DeInit+0x70>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a43      	ldr	r2, [pc, #268]	@ (80038a0 <HAL_GPIO_DeInit+0x170>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <HAL_GPIO_DeInit+0x6c>
 8003798:	2303      	movs	r3, #3
 800379a:	e006      	b.n	80037aa <HAL_GPIO_DeInit+0x7a>
 800379c:	2304      	movs	r3, #4
 800379e:	e004      	b.n	80037aa <HAL_GPIO_DeInit+0x7a>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e002      	b.n	80037aa <HAL_GPIO_DeInit+0x7a>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_GPIO_DeInit+0x7a>
 80037a8:	2300      	movs	r3, #0
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	f002 0203 	and.w	r2, r2, #3
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	4093      	lsls	r3, r2
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d132      	bne.n	8003820 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80037ba:	4b3a      	ldr	r3, [pc, #232]	@ (80038a4 <HAL_GPIO_DeInit+0x174>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	4938      	ldr	r1, [pc, #224]	@ (80038a4 <HAL_GPIO_DeInit+0x174>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80037c8:	4b36      	ldr	r3, [pc, #216]	@ (80038a4 <HAL_GPIO_DeInit+0x174>)
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	4934      	ldr	r1, [pc, #208]	@ (80038a4 <HAL_GPIO_DeInit+0x174>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80037d6:	4b33      	ldr	r3, [pc, #204]	@ (80038a4 <HAL_GPIO_DeInit+0x174>)
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	43db      	mvns	r3, r3
 80037de:	4931      	ldr	r1, [pc, #196]	@ (80038a4 <HAL_GPIO_DeInit+0x174>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80037e4:	4b2f      	ldr	r3, [pc, #188]	@ (80038a4 <HAL_GPIO_DeInit+0x174>)
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	492d      	ldr	r1, [pc, #180]	@ (80038a4 <HAL_GPIO_DeInit+0x174>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	220f      	movs	r2, #15
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003802:	4a23      	ldr	r2, [pc, #140]	@ (8003890 <HAL_GPIO_DeInit+0x160>)
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	3302      	adds	r3, #2
 800380a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	43da      	mvns	r2, r3
 8003812:	481f      	ldr	r0, [pc, #124]	@ (8003890 <HAL_GPIO_DeInit+0x160>)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	400a      	ands	r2, r1
 800381a:	3302      	adds	r3, #2
 800381c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2bff      	cmp	r3, #255	@ 0xff
 8003824:	d801      	bhi.n	800382a <HAL_GPIO_DeInit+0xfa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	e001      	b.n	800382e <HAL_GPIO_DeInit+0xfe>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2bff      	cmp	r3, #255	@ 0xff
 8003834:	d802      	bhi.n	800383c <HAL_GPIO_DeInit+0x10c>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	e002      	b.n	8003842 <HAL_GPIO_DeInit+0x112>
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3b08      	subs	r3, #8
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	210f      	movs	r1, #15
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	2104      	movs	r1, #4
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	431a      	orrs	r2, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	3301      	adds	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	fa22 f303 	lsr.w	r3, r2, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	f47f af5e 	bne.w	8003740 <HAL_GPIO_DeInit+0x10>
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	@ 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	40010000 	.word	0x40010000
 8003894:	40010800 	.word	0x40010800
 8003898:	40010c00 	.word	0x40010c00
 800389c:	40011000 	.word	0x40011000
 80038a0:	40011400 	.word	0x40011400
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
 80038b4:	4613      	mov	r3, r2
 80038b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038b8:	787b      	ldrb	r3, [r7, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038c4:	e003      	b.n	80038ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038c6:	887b      	ldrh	r3, [r7, #2]
 80038c8:	041a      	lsls	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	611a      	str	r2, [r3, #16]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e0e8      	b.n	8003abc <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f007 fa4e 	bl	800ada0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2203      	movs	r2, #3
 8003908:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f003 f92b 	bl	8006b72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003926:	f003 f901 	bl	8006b2c <USB_CoreInit>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0bf      	b.n	8003abc <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f003 f92f 	bl	8006ba6 <USB_SetCurrentMode>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0b0      	b.n	8003abc <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e03e      	b.n	80039de <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	3311      	adds	r3, #17
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	3310      	adds	r3, #16
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	440b      	add	r3, r1
 8003996:	3313      	adds	r3, #19
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	3320      	adds	r3, #32
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039b0:	7bfa      	ldrb	r2, [r7, #15]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	440b      	add	r3, r1
 80039be:	3324      	adds	r3, #36	@ 0x24
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	440b      	add	r3, r1
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	3301      	adds	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	791b      	ldrb	r3, [r3, #4]
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3bb      	bcc.n	8003960 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e044      	b.n	8003a78 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	440b      	add	r3, r1
 80039fc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	440b      	add	r3, r1
 8003a12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	440b      	add	r3, r1
 8003a3e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	440b      	add	r3, r1
 8003a54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	3301      	adds	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	791b      	ldrb	r3, [r3, #4]
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3b5      	bcc.n	80039ee <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a8c:	f003 f897 	bl	8006bbe <USB_DevInit>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00c      	b.n	8003abc <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f005 fb16 	bl	80090e6 <USB_DevDisconnect>

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_PCD_Start+0x16>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e016      	b.n	8003b08 <HAL_PCD_Start+0x44>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 f82d 	bl	8006b46 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003aec:	2101      	movs	r1, #1
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f007 fbc9 	bl	800b286 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f005 faea 	bl	80090d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f005 faec 	bl	80090fa <USB_ReadInterrupts>
 8003b22:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fb1a 	bl	8004168 <PCD_EP_ISR_Handler>

    return;
 8003b34:	e119      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b52:	b292      	uxth	r2, r2
 8003b54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f007 f99c 	bl	800ae96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b5e:	2100      	movs	r1, #0
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f905 	bl	8003d70 <HAL_PCD_SetAddress>

    return;
 8003b66:	e100      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b84:	b292      	uxth	r2, r2
 8003b86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003b8a:	e0ee      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bae:	e0dc      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d027      	beq.n	8003c0a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0204 	bic.w	r2, r2, #4
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0208 	bic.w	r2, r2, #8
 8003be4:	b292      	uxth	r2, r2
 8003be6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f007 f98c 	bl	800af08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c02:	b292      	uxth	r2, r2
 8003c04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c08:	e0af      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8083 	beq.w	8003d1c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e010      	b.n	8003c3e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
 8003c2a:	8812      	ldrh	r2, [r2, #0]
 8003c2c:	b292      	uxth	r2, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	3320      	adds	r3, #32
 8003c32:	443b      	add	r3, r7
 8003c34:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003c38:	7ffb      	ldrb	r3, [r7, #31]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	7ffb      	ldrb	r3, [r7, #31]
 8003c40:	2b07      	cmp	r3, #7
 8003c42:	d9eb      	bls.n	8003c1c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	b292      	uxth	r2, r2
 8003c58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003c74:	bf00      	nop
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f6      	beq.n	8003c76 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e00f      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	4611      	mov	r1, r2
 8003cae:	7ffa      	ldrb	r2, [r7, #31]
 8003cb0:	0092      	lsls	r2, r2, #2
 8003cb2:	440a      	add	r2, r1
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	443b      	add	r3, r7
 8003cba:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003cbe:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003cc0:	7ffb      	ldrb	r3, [r7, #31]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	2b07      	cmp	r3, #7
 8003cca:	d9ec      	bls.n	8003ca6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	b292      	uxth	r2, r2
 8003ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cf6:	b292      	uxth	r2, r2
 8003cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0204 	orr.w	r2, r2, #4
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f007 f8dd 	bl	800aed4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d1a:	e026      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00f      	beq.n	8003d46 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d38:	b292      	uxth	r2, r2
 8003d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f007 f89b 	bl	800ae7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d44:	e011      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00c      	beq.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d62:	b292      	uxth	r2, r2
 8003d64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d68:	bf00      	nop
  }
}
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_SetAddress+0x1a>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e012      	b.n	8003db0 <HAL_PCD_SetAddress+0x40>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f005 f983 	bl	80090ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	70fb      	strb	r3, [r7, #3]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	803b      	strh	r3, [r7, #0]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	da0e      	bge.n	8003dfc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 0207 	and.w	r2, r3, #7
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	3310      	adds	r3, #16
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	705a      	strb	r2, [r3, #1]
 8003dfa:	e00e      	b.n	8003e1a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	f003 0207 	and.w	r2, r3, #7
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e26:	883a      	ldrh	r2, [r7, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	78ba      	ldrb	r2, [r7, #2]
 8003e30:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e32:	78bb      	ldrb	r3, [r7, #2]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d102      	bne.n	8003e3e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_PCD_EP_Open+0x94>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e00e      	b.n	8003e6a <HAL_PCD_EP_Open+0xb2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 fecc 	bl	8006bf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003e68:	7afb      	ldrb	r3, [r7, #11]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da0e      	bge.n	8003ea4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 0207 	and.w	r2, r3, #7
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	3310      	adds	r3, #16
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
 8003ea2:	e00e      	b.n	8003ec2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	f003 0207 	and.w	r2, r3, #7
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_EP_Close+0x6a>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e00e      	b.n	8003efa <HAL_PCD_EP_Close+0x88>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68f9      	ldr	r1, [r7, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 fa44 	bl	8007378 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f003 0207 	and.w	r2, r3, #7
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f42:	7afb      	ldrb	r3, [r7, #11]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 fbfb 	bl	8007750 <USB_EPStartXfer>

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	f003 0207 	and.w	r2, r3, #7
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	440b      	add	r3, r1
 8003f82:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b086      	sub	sp, #24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa2:	7afb      	ldrb	r3, [r7, #11]
 8003fa4:	f003 0207 	and.w	r2, r3, #7
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	3310      	adds	r3, #16
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fde:	7afb      	ldrb	r3, [r7, #11]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 fbad 	bl	8007750 <USB_EPStartXfer>

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	7912      	ldrb	r2, [r2, #4]
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e04c      	b.n	80040b8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800401e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004022:	2b00      	cmp	r3, #0
 8004024:	da0e      	bge.n	8004044 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	f003 0207 	and.w	r2, r3, #7
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	3310      	adds	r3, #16
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	705a      	strb	r2, [r3, #1]
 8004042:	e00c      	b.n	800405e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_PCD_EP_SetStall+0x7e>
 800407a:	2302      	movs	r3, #2
 800407c:	e01c      	b.n	80040b8 <HAL_PCD_EP_SetStall+0xb8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	4618      	mov	r0, r3
 800408e:	f004 ff10 	bl	8008eb2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	2b00      	cmp	r3, #0
 800409a:	d108      	bne.n	80040ae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f005 f835 	bl	8009118 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	7912      	ldrb	r2, [r2, #4]
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e040      	b.n	8004160 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da0e      	bge.n	8004104 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 0207 	and.w	r2, r3, #7
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	3310      	adds	r3, #16
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	705a      	strb	r2, [r3, #1]
 8004102:	e00e      	b.n	8004122 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 0207 	and.w	r2, r3, #7
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_PCD_EP_ClrStall+0x82>
 800413e:	2302      	movs	r3, #2
 8004140:	e00e      	b.n	8004160 <HAL_PCD_EP_ClrStall+0xa0>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	4618      	mov	r0, r3
 8004152:	f004 fefe 	bl	8008f52 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b096      	sub	sp, #88	@ 0x58
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004170:	e3bb      	b.n	80048ea <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800417a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800417e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800418c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8175 	bne.w	8004480 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004196:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d14e      	bne.n	8004240 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b2:	81fb      	strh	r3, [r7, #14]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	89fb      	ldrh	r3, [r7, #14]
 80041ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3310      	adds	r3, #16
 80041ca:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	3302      	adds	r3, #2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80041f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	441a      	add	r2, r3
 8004202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004204:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004206:	2100      	movs	r1, #0
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f006 fe1c 	bl	800ae46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	7b5b      	ldrb	r3, [r3, #13]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8368 	beq.w	80048ea <PCD_EP_ISR_Handler+0x782>
 800421a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 8363 	bne.w	80048ea <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	7b5b      	ldrb	r3, [r3, #13]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800422e:	b2da      	uxtb	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	735a      	strb	r2, [r3, #13]
 800423e:	e354      	b.n	80048ea <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004246:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004252:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425a:	2b00      	cmp	r3, #0
 800425c:	d034      	beq.n	80042c8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	3306      	adds	r3, #6
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004288:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004296:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800429c:	b29b      	uxth	r3, r3
 800429e:	f004 ff8b 	bl	80091b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042ae:	4013      	ands	r3, r2
 80042b0:	823b      	strh	r3, [r7, #16]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	8a3a      	ldrh	r2, [r7, #16]
 80042b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042bc:	b292      	uxth	r2, r2
 80042be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f006 fd93 	bl	800adec <HAL_PCD_SetupStageCallback>
 80042c6:	e310      	b.n	80048ea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f280 830c 	bge.w	80048ea <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042de:	4013      	ands	r3, r2
 80042e0:	83fb      	strh	r3, [r7, #30]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	8bfa      	ldrh	r2, [r7, #30]
 80042e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042ec:	b292      	uxth	r2, r2
 80042ee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	3306      	adds	r3, #6
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800431c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d019      	beq.n	8004358 <PCD_EP_ISR_Handler+0x1f0>
 8004324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004332:	6959      	ldr	r1, [r3, #20]
 8004334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004336:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800433c:	b29b      	uxth	r3, r3
 800433e:	f004 ff3b 	bl	80091b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	441a      	add	r2, r3
 800434c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004350:	2100      	movs	r1, #0
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f006 fd5c 	bl	800ae10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004362:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 82bd 	bne.w	80048ea <PCD_EP_ISR_Handler+0x782>
 8004370:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004374:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004378:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800437c:	f000 82b5 	beq.w	80048ea <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	4413      	add	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80043b6:	d91d      	bls.n	80043f4 <PCD_EP_ISR_Handler+0x28c>
 80043b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <PCD_EP_ISR_Handler+0x26a>
 80043cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ce:	3b01      	subs	r3, #1
 80043d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043da:	b29b      	uxth	r3, r3
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	b29b      	uxth	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	e026      	b.n	8004442 <PCD_EP_ISR_Handler+0x2da>
 80043f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <PCD_EP_ISR_Handler+0x2aa>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440a:	b29a      	uxth	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e017      	b.n	8004442 <PCD_EP_ISR_Handler+0x2da>
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	647b      	str	r3, [r7, #68]	@ 0x44
 800441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <PCD_EP_ISR_Handler+0x2c4>
 8004426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004428:	3301      	adds	r3, #1
 800442a:	647b      	str	r3, [r7, #68]	@ 0x44
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29a      	uxth	r2, r3
 8004432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004434:	b29b      	uxth	r3, r3
 8004436:	029b      	lsls	r3, r3, #10
 8004438:	b29b      	uxth	r3, r3
 800443a:	4313      	orrs	r3, r2
 800443c:	b29a      	uxth	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800444e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004452:	827b      	strh	r3, [r7, #18]
 8004454:	8a7b      	ldrh	r3, [r7, #18]
 8004456:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800445a:	827b      	strh	r3, [r7, #18]
 800445c:	8a7b      	ldrh	r3, [r7, #18]
 800445e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004462:	827b      	strh	r3, [r7, #18]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	8a7b      	ldrh	r3, [r7, #18]
 800446a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800446e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800447a:	b29b      	uxth	r3, r3
 800447c:	8013      	strh	r3, [r2, #0]
 800447e:	e234      	b.n	80048ea <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004494:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004498:	2b00      	cmp	r3, #0
 800449a:	f280 80fc 	bge.w	8004696 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80044b4:	4013      	ands	r3, r2
 80044b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80044cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044d0:	b292      	uxth	r2, r2
 80044d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4413      	add	r3, r2
 80044e8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80044ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ec:	7b1b      	ldrb	r3, [r3, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d125      	bne.n	800453e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	3306      	adds	r3, #6
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800451a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800451e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8092 	beq.w	800464c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452e:	6959      	ldr	r1, [r3, #20]
 8004530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004532:	88da      	ldrh	r2, [r3, #6]
 8004534:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004538:	f004 fe3e 	bl	80091b8 <USB_ReadPMA>
 800453c:	e086      	b.n	800464c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800453e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004540:	78db      	ldrb	r3, [r3, #3]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d10a      	bne.n	800455c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004546:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800454a:	461a      	mov	r2, r3
 800454c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f9d9 	bl	8004906 <HAL_PCD_EP_DB_Receive>
 8004554:	4603      	mov	r3, r0
 8004556:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800455a:	e077      	b.n	800464c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004576:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800458c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004598:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800459c:	b29b      	uxth	r3, r3
 800459e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d024      	beq.n	8004604 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	3302      	adds	r3, #2
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80045e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d02e      	beq.n	800464c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f4:	6959      	ldr	r1, [r3, #20]
 80045f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f8:	891a      	ldrh	r2, [r3, #8]
 80045fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045fe:	f004 fddb 	bl	80091b8 <USB_ReadPMA>
 8004602:	e023      	b.n	800464c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800460c:	b29b      	uxth	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	3306      	adds	r3, #6
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800462c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004630:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463e:	6959      	ldr	r1, [r3, #20]
 8004640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004642:	895a      	ldrh	r2, [r3, #10]
 8004644:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004648:	f004 fdb6 	bl	80091b8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800464c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004654:	441a      	add	r2, r3
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004662:	441a      	add	r2, r3
 8004664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004666:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <PCD_EP_ISR_Handler+0x514>
 8004670:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	d206      	bcs.n	800468a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f006 fbc4 	bl	800ae10 <HAL_PCD_DataOutStageCallback>
 8004688:	e005      	b.n	8004696 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004690:	4618      	mov	r0, r3
 8004692:	f003 f85d 	bl	8007750 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004696:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800469a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8123 	beq.w	80048ea <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80046a4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	3310      	adds	r3, #16
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80046ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	441a      	add	r2, r3
 80046e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80046e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80046f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f6:	78db      	ldrb	r3, [r3, #3]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	f040 80a2 	bne.w	8004842 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80046fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004700:	2200      	movs	r2, #0
 8004702:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004706:	7b1b      	ldrb	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8093 	beq.w	8004834 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800470e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d046      	beq.n	80047a8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800471a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d126      	bne.n	8004770 <PCD_EP_ISR_Handler+0x608>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004730:	b29b      	uxth	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	4413      	add	r3, r2
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
 800473a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	011a      	lsls	r2, r3, #4
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	4413      	add	r3, r2
 8004744:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004748:	623b      	str	r3, [r7, #32]
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004754:	b29a      	uxth	r2, r3
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004768:	b29a      	uxth	r2, r3
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	e061      	b.n	8004834 <PCD_EP_ISR_Handler+0x6cc>
 8004770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d15d      	bne.n	8004834 <PCD_EP_ISR_Handler+0x6cc>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	4413      	add	r3, r2
 800478e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	4413      	add	r3, r2
 800479a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800479e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a2:	2200      	movs	r2, #0
 80047a4:	801a      	strh	r2, [r3, #0]
 80047a6:	e045      	b.n	8004834 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d126      	bne.n	8004804 <PCD_EP_ISR_Handler+0x69c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ca:	4413      	add	r3, r2
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	011a      	lsls	r2, r3, #4
 80047d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d6:	4413      	add	r3, r2
 80047d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	801a      	strh	r2, [r3, #0]
 80047ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	e017      	b.n	8004834 <PCD_EP_ISR_Handler+0x6cc>
 8004804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d113      	bne.n	8004834 <PCD_EP_ISR_Handler+0x6cc>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800481a:	4413      	add	r3, r2
 800481c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800481e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	011a      	lsls	r2, r3, #4
 8004824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004826:	4413      	add	r3, r2
 8004828:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800482c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	2200      	movs	r2, #0
 8004832:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f006 fb03 	bl	800ae46 <HAL_PCD_DataInStageCallback>
 8004840:	e053      	b.n	80048ea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004842:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d146      	bne.n	80048dc <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004856:	b29b      	uxth	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	3302      	adds	r3, #2
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004876:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800487a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004882:	429a      	cmp	r2, r3
 8004884:	d907      	bls.n	8004896 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800488e:	1ad2      	subs	r2, r2, r3
 8004890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004892:	619a      	str	r2, [r3, #24]
 8004894:	e002      	b.n	800489c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	2200      	movs	r2, #0
 800489a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800489c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f006 facb 	bl	800ae46 <HAL_PCD_DataInStageCallback>
 80048b0:	e01b      	b.n	80048ea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048ba:	441a      	add	r2, r3
 80048bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048be:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80048c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048c8:	441a      	add	r2, r3
 80048ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048cc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048d4:	4618      	mov	r0, r3
 80048d6:	f002 ff3b 	bl	8007750 <USB_EPStartXfer>
 80048da:	e006      	b.n	80048ea <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80048dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048e0:	461a      	mov	r2, r3
 80048e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f91b 	bl	8004b20 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	b21b      	sxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f6ff ac3b 	blt.w	8004172 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3758      	adds	r7, #88	@ 0x58
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b088      	sub	sp, #32
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	4613      	mov	r3, r2
 8004912:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d07e      	beq.n	8004a1c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004926:	b29b      	uxth	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	3302      	adds	r3, #2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004946:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	699a      	ldr	r2, [r3, #24]
 800494c:	8b7b      	ldrh	r3, [r7, #26]
 800494e:	429a      	cmp	r2, r3
 8004950:	d306      	bcc.n	8004960 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	8b7b      	ldrh	r3, [r7, #26]
 8004958:	1ad2      	subs	r2, r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	619a      	str	r2, [r3, #24]
 800495e:	e002      	b.n	8004966 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2200      	movs	r2, #0
 8004964:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d123      	bne.n	80049b6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004988:	833b      	strh	r3, [r7, #24]
 800498a:	8b3b      	ldrh	r3, [r7, #24]
 800498c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004990:	833b      	strh	r3, [r7, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	441a      	add	r2, r3
 80049a0:	8b3b      	ldrh	r3, [r7, #24]
 80049a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01f      	beq.n	8004a00 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049da:	82fb      	strh	r3, [r7, #22]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	8afb      	ldrh	r3, [r7, #22]
 80049ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a00:	8b7b      	ldrh	r3, [r7, #26]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8087 	beq.w	8004b16 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6959      	ldr	r1, [r3, #20]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	891a      	ldrh	r2, [r3, #8]
 8004a14:	8b7b      	ldrh	r3, [r7, #26]
 8004a16:	f004 fbcf 	bl	80091b8 <USB_ReadPMA>
 8004a1a:	e07c      	b.n	8004b16 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4413      	add	r3, r2
 8004a30:	3306      	adds	r3, #6
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	8b7b      	ldrh	r3, [r7, #26]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d306      	bcc.n	8004a5e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	8b7b      	ldrh	r3, [r7, #26]
 8004a56:	1ad2      	subs	r2, r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	619a      	str	r2, [r3, #24]
 8004a5c:	e002      	b.n	8004a64 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2200      	movs	r2, #0
 8004a62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d123      	bne.n	8004ab4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a86:	83fb      	strh	r3, [r7, #30]
 8004a88:	8bfb      	ldrh	r3, [r7, #30]
 8004a8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a8e:	83fb      	strh	r3, [r7, #30]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	441a      	add	r2, r3
 8004a9e:	8bfb      	ldrh	r3, [r7, #30]
 8004aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11f      	bne.n	8004afe <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad8:	83bb      	strh	r3, [r7, #28]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	8bbb      	ldrh	r3, [r7, #28]
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004afe:	8b7b      	ldrh	r3, [r7, #26]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6959      	ldr	r1, [r3, #20]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	895a      	ldrh	r2, [r3, #10]
 8004b10:	8b7b      	ldrh	r3, [r7, #26]
 8004b12:	f004 fb51 	bl	80091b8 <USB_ReadPMA>
    }
  }

  return count;
 8004b16:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b0a4      	sub	sp, #144	@ 0x90
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 81dd 	beq.w	8004ef4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3302      	adds	r3, #2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b62:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d907      	bls.n	8004b82 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	619a      	str	r2, [r3, #24]
 8004b80:	e002      	b.n	8004b88 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f040 80b9 	bne.w	8004d04 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d126      	bne.n	8004be8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bae:	4413      	add	r3, r2
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	011a      	lsls	r2, r3, #4
 8004bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bba:	4413      	add	r3, r2
 8004bbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	e01a      	b.n	8004c1e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d116      	bne.n	8004c1e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c04:	4413      	add	r3, r2
 8004c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	011a      	lsls	r2, r3, #4
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c10:	4413      	add	r3, r2
 8004c12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c16:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d126      	bne.n	8004c7a <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	61fb      	str	r3, [r7, #28]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	011a      	lsls	r2, r3, #4
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	801a      	strh	r2, [r3, #0]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	e017      	b.n	8004caa <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d113      	bne.n	8004caa <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	4413      	add	r3, r2
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	011a      	lsls	r2, r3, #4
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ca2:	623b      	str	r3, [r7, #32]
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f006 f8c8 	bl	800ae46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 82fc 	beq.w	80052ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cdc:	82fb      	strh	r3, [r7, #22]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	8afb      	ldrh	r3, [r7, #22]
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
 8004d02:	e2da      	b.n	80052ba <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d021      	beq.n	8004d52 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	f040 82ae 	bne.w	80052ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d66:	441a      	add	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d74:	441a      	add	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d30b      	bcc.n	8004d9e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	6a1a      	ldr	r2, [r3, #32]
 8004d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d96:	1ad2      	subs	r2, r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	621a      	str	r2, [r3, #32]
 8004d9c:	e017      	b.n	8004dce <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004da6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004daa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004db6:	e00a      	b.n	8004dce <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d165      	bne.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x382>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dea:	4413      	add	r3, r2
 8004dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	011a      	lsls	r2, r3, #4
 8004df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df6:	4413      	add	r3, r2
 8004df8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e12:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e14:	d91d      	bls.n	8004e52 <HAL_PCD_EP_DB_Transmit+0x332>
 8004e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x310>
 8004e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	e044      	b.n	8004edc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <HAL_PCD_EP_DB_Transmit+0x350>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6c:	801a      	strh	r2, [r3, #0]
 8004e6e:	e035      	b.n	8004edc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e74:	085b      	lsrs	r3, r3, #1
 8004e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_PCD_EP_DB_Transmit+0x36a>
 8004e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e86:	3301      	adds	r3, #1
 8004e88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	029b      	lsls	r3, r3, #10
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	e01c      	b.n	8004edc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d118      	bne.n	8004edc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ebe:	4413      	add	r3, r2
 8004ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	011a      	lsls	r2, r3, #4
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eca:	4413      	add	r3, r2
 8004ecc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eda:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6959      	ldr	r1, [r3, #20]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	891a      	ldrh	r2, [r3, #8]
 8004ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f004 f91e 	bl	800912e <USB_WritePMA>
 8004ef2:	e1e2      	b.n	80052ba <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4413      	add	r3, r2
 8004f08:	3306      	adds	r3, #6
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f1c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d307      	bcc.n	8004f3c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	619a      	str	r2, [r3, #24]
 8004f3a:	e002      	b.n	8004f42 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f040 80c0 	bne.w	80050cc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d126      	bne.n	8004fa2 <HAL_PCD_EP_DB_Transmit+0x482>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f68:	4413      	add	r3, r2
 8004f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f74:	4413      	add	r3, r2
 8004f76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e01a      	b.n	8004fd8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d116      	bne.n	8004fd8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fbe:	4413      	add	r3, r2
 8004fc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fca:	4413      	add	r3, r2
 8004fcc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d12b      	bne.n	800503e <HAL_PCD_EP_DB_Transmit+0x51e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ffa:	4413      	add	r3, r2
 8004ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	011a      	lsls	r2, r3, #4
 8005004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005006:	4413      	add	r3, r2
 8005008:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800500c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005010:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800501c:	b29a      	uxth	r2, r3
 800501e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005034:	b29a      	uxth	r2, r3
 8005036:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e017      	b.n	800506e <HAL_PCD_EP_DB_Transmit+0x54e>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d113      	bne.n	800506e <HAL_PCD_EP_DB_Transmit+0x54e>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800504e:	b29b      	uxth	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005054:	4413      	add	r3, r2
 8005056:	677b      	str	r3, [r7, #116]	@ 0x74
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	011a      	lsls	r2, r3, #4
 800505e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005060:	4413      	add	r3, r2
 8005062:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005066:	673b      	str	r3, [r7, #112]	@ 0x70
 8005068:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800506a:	2200      	movs	r2, #0
 800506c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	4619      	mov	r1, r3
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f005 fee6 	bl	800ae46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005080:	2b00      	cmp	r3, #0
 8005082:	f040 811a 	bne.w	80052ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	441a      	add	r2, r3
 80050b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80050b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	8013      	strh	r3, [r2, #0]
 80050ca:	e0f6      	b.n	80052ba <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d121      	bne.n	800511a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800510a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800510e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005116:	b29b      	uxth	r3, r3
 8005118:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005120:	2b01      	cmp	r3, #1
 8005122:	f040 80ca 	bne.w	80052ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800512e:	441a      	add	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800513c:	441a      	add	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6a1a      	ldr	r2, [r3, #32]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	429a      	cmp	r2, r3
 800514c:	d30b      	bcc.n	8005166 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	621a      	str	r2, [r3, #32]
 8005164:	e017      	b.n	8005196 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d108      	bne.n	8005180 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800516e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800517e:	e00a      	b.n	8005196 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	657b      	str	r3, [r7, #84]	@ 0x54
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d165      	bne.n	8005270 <HAL_PCD_EP_DB_Transmit+0x750>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b8:	4413      	add	r3, r2
 80051ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	011a      	lsls	r2, r3, #4
 80051c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051c4:	4413      	add	r3, r2
 80051c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051da:	801a      	strh	r2, [r3, #0]
 80051dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80051e2:	d91d      	bls.n	8005220 <HAL_PCD_EP_DB_Transmit+0x700>
 80051e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <HAL_PCD_EP_DB_Transmit+0x6de>
 80051f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051fa:	3b01      	subs	r3, #1
 80051fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29a      	uxth	r2, r3
 8005204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005206:	b29b      	uxth	r3, r3
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	b29b      	uxth	r3, r3
 800520c:	4313      	orrs	r3, r2
 800520e:	b29b      	uxth	r3, r3
 8005210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005218:	b29a      	uxth	r2, r3
 800521a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	e041      	b.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8005220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <HAL_PCD_EP_DB_Transmit+0x71e>
 8005228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005236:	b29a      	uxth	r2, r3
 8005238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800523a:	801a      	strh	r2, [r3, #0]
 800523c:	e032      	b.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x784>
 800523e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005242:	085b      	lsrs	r3, r3, #1
 8005244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_PCD_EP_DB_Transmit+0x738>
 8005252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005254:	3301      	adds	r3, #1
 8005256:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29a      	uxth	r2, r3
 800525e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005260:	b29b      	uxth	r3, r3
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	b29b      	uxth	r3, r3
 8005266:	4313      	orrs	r3, r2
 8005268:	b29a      	uxth	r2, r3
 800526a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e019      	b.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d115      	bne.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005286:	4413      	add	r3, r2
 8005288:	657b      	str	r3, [r7, #84]	@ 0x54
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	011a      	lsls	r2, r3, #4
 8005290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005292:	4413      	add	r3, r2
 8005294:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005298:	653b      	str	r3, [r7, #80]	@ 0x50
 800529a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6959      	ldr	r1, [r3, #20]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	895a      	ldrh	r2, [r3, #10]
 80052b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f003 ff3a 	bl	800912e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d4:	82bb      	strh	r3, [r7, #20]
 80052d6:	8abb      	ldrh	r3, [r7, #20]
 80052d8:	f083 0310 	eor.w	r3, r3, #16
 80052dc:	82bb      	strh	r3, [r7, #20]
 80052de:	8abb      	ldrh	r3, [r7, #20]
 80052e0:	f083 0320 	eor.w	r3, r3, #32
 80052e4:	82bb      	strh	r3, [r7, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	8abb      	ldrh	r3, [r7, #20]
 80052f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005306:	b29b      	uxth	r3, r3
 8005308:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3790      	adds	r7, #144	@ 0x90
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	607b      	str	r3, [r7, #4]
 800531e:	460b      	mov	r3, r1
 8005320:	817b      	strh	r3, [r7, #10]
 8005322:	4613      	mov	r3, r2
 8005324:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	f003 0207 	and.w	r2, r3, #7
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	3310      	adds	r3, #16
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e009      	b.n	800535e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800534a:	897a      	ldrh	r2, [r7, #10]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800535e:	893b      	ldrh	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d107      	bne.n	8005374 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2200      	movs	r2, #0
 8005368:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	b29a      	uxth	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	80da      	strh	r2, [r3, #6]
 8005372:	e00b      	b.n	800538c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2201      	movs	r2, #1
 8005378:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	b29a      	uxth	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	b29a      	uxth	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e272      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 8087 	beq.w	80054c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053b8:	4b92      	ldr	r3, [pc, #584]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 030c 	and.w	r3, r3, #12
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d00c      	beq.n	80053de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053c4:	4b8f      	ldr	r3, [pc, #572]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d112      	bne.n	80053f6 <HAL_RCC_OscConfig+0x5e>
 80053d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053dc:	d10b      	bne.n	80053f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053de:	4b89      	ldr	r3, [pc, #548]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d06c      	beq.n	80054c4 <HAL_RCC_OscConfig+0x12c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d168      	bne.n	80054c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e24c      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053fe:	d106      	bne.n	800540e <HAL_RCC_OscConfig+0x76>
 8005400:	4b80      	ldr	r3, [pc, #512]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a7f      	ldr	r2, [pc, #508]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e02e      	b.n	800546c <HAL_RCC_OscConfig+0xd4>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10c      	bne.n	8005430 <HAL_RCC_OscConfig+0x98>
 8005416:	4b7b      	ldr	r3, [pc, #492]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a7a      	ldr	r2, [pc, #488]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 800541c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	4b78      	ldr	r3, [pc, #480]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a77      	ldr	r2, [pc, #476]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005428:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e01d      	b.n	800546c <HAL_RCC_OscConfig+0xd4>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0xbc>
 800543a:	4b72      	ldr	r3, [pc, #456]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a71      	ldr	r2, [pc, #452]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b6f      	ldr	r3, [pc, #444]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6e      	ldr	r2, [pc, #440]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e00b      	b.n	800546c <HAL_RCC_OscConfig+0xd4>
 8005454:	4b6b      	ldr	r3, [pc, #428]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a6a      	ldr	r2, [pc, #424]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b68      	ldr	r3, [pc, #416]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a67      	ldr	r2, [pc, #412]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fc fcee 	bl	8001e54 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fc fcea 	bl	8001e54 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	@ 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e200      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b5d      	ldr	r3, [pc, #372]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0xe4>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fc fcda 	bl	8001e54 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fc fcd6 	bl	8001e54 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	@ 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e1ec      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b6:	4b53      	ldr	r3, [pc, #332]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x10c>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d063      	beq.n	800559a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054d2:	4b4c      	ldr	r3, [pc, #304]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054de:	4b49      	ldr	r3, [pc, #292]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d11c      	bne.n	8005524 <HAL_RCC_OscConfig+0x18c>
 80054ea:	4b46      	ldr	r3, [pc, #280]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d116      	bne.n	8005524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f6:	4b43      	ldr	r3, [pc, #268]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_RCC_OscConfig+0x176>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d001      	beq.n	800550e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e1c0      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	4b3d      	ldr	r3, [pc, #244]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4939      	ldr	r1, [pc, #228]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005522:	e03a      	b.n	800559a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d020      	beq.n	800556e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800552c:	4b36      	ldr	r3, [pc, #216]	@ (8005608 <HAL_RCC_OscConfig+0x270>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005532:	f7fc fc8f 	bl	8001e54 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800553a:	f7fc fc8b 	bl	8001e54 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e1a1      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554c:	4b2d      	ldr	r3, [pc, #180]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	4b2a      	ldr	r3, [pc, #168]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4927      	ldr	r1, [pc, #156]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005568:	4313      	orrs	r3, r2
 800556a:	600b      	str	r3, [r1, #0]
 800556c:	e015      	b.n	800559a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556e:	4b26      	ldr	r3, [pc, #152]	@ (8005608 <HAL_RCC_OscConfig+0x270>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fc fc6e 	bl	8001e54 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800557c:	f7fc fc6a 	bl	8001e54 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e180      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558e:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d03a      	beq.n	800561c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d019      	beq.n	80055e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ae:	4b17      	ldr	r3, [pc, #92]	@ (800560c <HAL_RCC_OscConfig+0x274>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b4:	f7fc fc4e 	bl	8001e54 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055bc:	f7fc fc4a 	bl	8001e54 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e160      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <HAL_RCC_OscConfig+0x26c>)
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055da:	2001      	movs	r0, #1
 80055dc:	f000 faba 	bl	8005b54 <RCC_Delay>
 80055e0:	e01c      	b.n	800561c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e2:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <HAL_RCC_OscConfig+0x274>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e8:	f7fc fc34 	bl	8001e54 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ee:	e00f      	b.n	8005610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f0:	f7fc fc30 	bl	8001e54 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d908      	bls.n	8005610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e146      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
 8005602:	bf00      	nop
 8005604:	40021000 	.word	0x40021000
 8005608:	42420000 	.word	0x42420000
 800560c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005610:	4b92      	ldr	r3, [pc, #584]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e9      	bne.n	80055f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80a6 	beq.w	8005776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562e:	4b8b      	ldr	r3, [pc, #556]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10d      	bne.n	8005656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563a:	4b88      	ldr	r3, [pc, #544]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	4a87      	ldr	r2, [pc, #540]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005644:	61d3      	str	r3, [r2, #28]
 8005646:	4b85      	ldr	r3, [pc, #532]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005656:	4b82      	ldr	r3, [pc, #520]	@ (8005860 <HAL_RCC_OscConfig+0x4c8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d118      	bne.n	8005694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005662:	4b7f      	ldr	r3, [pc, #508]	@ (8005860 <HAL_RCC_OscConfig+0x4c8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a7e      	ldr	r2, [pc, #504]	@ (8005860 <HAL_RCC_OscConfig+0x4c8>)
 8005668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800566c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566e:	f7fc fbf1 	bl	8001e54 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005676:	f7fc fbed 	bl	8001e54 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b64      	cmp	r3, #100	@ 0x64
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e103      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005688:	4b75      	ldr	r3, [pc, #468]	@ (8005860 <HAL_RCC_OscConfig+0x4c8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d106      	bne.n	80056aa <HAL_RCC_OscConfig+0x312>
 800569c:	4b6f      	ldr	r3, [pc, #444]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	4a6e      	ldr	r2, [pc, #440]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	6213      	str	r3, [r2, #32]
 80056a8:	e02d      	b.n	8005706 <HAL_RCC_OscConfig+0x36e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10c      	bne.n	80056cc <HAL_RCC_OscConfig+0x334>
 80056b2:	4b6a      	ldr	r3, [pc, #424]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	4a69      	ldr	r2, [pc, #420]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6213      	str	r3, [r2, #32]
 80056be:	4b67      	ldr	r3, [pc, #412]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4a66      	ldr	r2, [pc, #408]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	6213      	str	r3, [r2, #32]
 80056ca:	e01c      	b.n	8005706 <HAL_RCC_OscConfig+0x36e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d10c      	bne.n	80056ee <HAL_RCC_OscConfig+0x356>
 80056d4:	4b61      	ldr	r3, [pc, #388]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	4a60      	ldr	r2, [pc, #384]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056da:	f043 0304 	orr.w	r3, r3, #4
 80056de:	6213      	str	r3, [r2, #32]
 80056e0:	4b5e      	ldr	r3, [pc, #376]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4a5d      	ldr	r2, [pc, #372]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6213      	str	r3, [r2, #32]
 80056ec:	e00b      	b.n	8005706 <HAL_RCC_OscConfig+0x36e>
 80056ee:	4b5b      	ldr	r3, [pc, #364]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4a5a      	ldr	r2, [pc, #360]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	6213      	str	r3, [r2, #32]
 80056fa:	4b58      	ldr	r3, [pc, #352]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	4a57      	ldr	r2, [pc, #348]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005700:	f023 0304 	bic.w	r3, r3, #4
 8005704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d015      	beq.n	800573a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800570e:	f7fc fba1 	bl	8001e54 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005714:	e00a      	b.n	800572c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005716:	f7fc fb9d 	bl	8001e54 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e0b1      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572c:	4b4b      	ldr	r3, [pc, #300]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ee      	beq.n	8005716 <HAL_RCC_OscConfig+0x37e>
 8005738:	e014      	b.n	8005764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573a:	f7fc fb8b 	bl	8001e54 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005740:	e00a      	b.n	8005758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fc fb87 	bl	8001e54 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e09b      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005758:	4b40      	ldr	r3, [pc, #256]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ee      	bne.n	8005742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576a:	4b3c      	ldr	r3, [pc, #240]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4a3b      	ldr	r2, [pc, #236]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8087 	beq.w	800588e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005780:	4b36      	ldr	r3, [pc, #216]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 030c 	and.w	r3, r3, #12
 8005788:	2b08      	cmp	r3, #8
 800578a:	d061      	beq.n	8005850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d146      	bne.n	8005822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005794:	4b33      	ldr	r3, [pc, #204]	@ (8005864 <HAL_RCC_OscConfig+0x4cc>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579a:	f7fc fb5b 	bl	8001e54 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a2:	f7fc fb57 	bl	8001e54 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e06d      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b4:	4b29      	ldr	r3, [pc, #164]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f0      	bne.n	80057a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c8:	d108      	bne.n	80057dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057ca:	4b24      	ldr	r3, [pc, #144]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	4921      	ldr	r1, [pc, #132]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057dc:	4b1f      	ldr	r3, [pc, #124]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a19      	ldr	r1, [r3, #32]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	430b      	orrs	r3, r1
 80057ee:	491b      	ldr	r1, [pc, #108]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005864 <HAL_RCC_OscConfig+0x4cc>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fa:	f7fc fb2b 	bl	8001e54 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005802:	f7fc fb27 	bl	8001e54 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e03d      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005814:	4b11      	ldr	r3, [pc, #68]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f0      	beq.n	8005802 <HAL_RCC_OscConfig+0x46a>
 8005820:	e035      	b.n	800588e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005822:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <HAL_RCC_OscConfig+0x4cc>)
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fc fb14 	bl	8001e54 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005830:	f7fc fb10 	bl	8001e54 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e026      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005842:	4b06      	ldr	r3, [pc, #24]	@ (800585c <HAL_RCC_OscConfig+0x4c4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f0      	bne.n	8005830 <HAL_RCC_OscConfig+0x498>
 800584e:	e01e      	b.n	800588e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d107      	bne.n	8005868 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e019      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
 800585c:	40021000 	.word	0x40021000
 8005860:	40007000 	.word	0x40007000
 8005864:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005868:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <HAL_RCC_OscConfig+0x500>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	429a      	cmp	r2, r3
 800587a:	d106      	bne.n	800588a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005886:	429a      	cmp	r2, r3
 8005888:	d001      	beq.n	800588e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40021000 	.word	0x40021000

0800589c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e0d0      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058b0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d910      	bls.n	80058e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058be:	4b67      	ldr	r3, [pc, #412]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f023 0207 	bic.w	r2, r3, #7
 80058c6:	4965      	ldr	r1, [pc, #404]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c0>)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ce:	4b63      	ldr	r3, [pc, #396]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d001      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0b8      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d020      	beq.n	800592e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058f8:	4b59      	ldr	r3, [pc, #356]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a58      	ldr	r2, [pc, #352]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 80058fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005910:	4b53      	ldr	r3, [pc, #332]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a52      	ldr	r2, [pc, #328]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 8005916:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800591a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800591c:	4b50      	ldr	r3, [pc, #320]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	494d      	ldr	r1, [pc, #308]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 800592a:	4313      	orrs	r3, r2
 800592c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d040      	beq.n	80059bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d107      	bne.n	8005952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005942:	4b47      	ldr	r3, [pc, #284]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d115      	bne.n	800597a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e07f      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d107      	bne.n	800596a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800595a:	4b41      	ldr	r3, [pc, #260]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e073      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800596a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e06b      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800597a:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f023 0203 	bic.w	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4936      	ldr	r1, [pc, #216]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800598c:	f7fc fa62 	bl	8001e54 <HAL_GetTick>
 8005990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005992:	e00a      	b.n	80059aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005994:	f7fc fa5e 	bl	8001e54 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e053      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 020c 	and.w	r2, r3, #12
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d1eb      	bne.n	8005994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059bc:	4b27      	ldr	r3, [pc, #156]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d210      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ca:	4b24      	ldr	r3, [pc, #144]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f023 0207 	bic.w	r2, r3, #7
 80059d2:	4922      	ldr	r1, [pc, #136]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c0>)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059da:	4b20      	ldr	r3, [pc, #128]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e032      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d008      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f8:	4b19      	ldr	r3, [pc, #100]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4916      	ldr	r1, [pc, #88]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a16:	4b12      	ldr	r3, [pc, #72]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	490e      	ldr	r1, [pc, #56]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a2a:	f000 f821 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c4>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	490a      	ldr	r1, [pc, #40]	@ (8005a64 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3c:	5ccb      	ldrb	r3, [r1, r3]
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	4a09      	ldr	r2, [pc, #36]	@ (8005a68 <HAL_RCC_ClockConfig+0x1cc>)
 8005a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a46:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <HAL_RCC_ClockConfig+0x1d0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fc f9c0 	bl	8001dd0 <HAL_InitTick>

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40022000 	.word	0x40022000
 8005a60:	40021000 	.word	0x40021000
 8005a64:	0800eee8 	.word	0x0800eee8
 8005a68:	20000000 	.word	0x20000000
 8005a6c:	20000004 	.word	0x20000004

08005a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	2300      	movs	r3, #0
 8005a84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d002      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x30>
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d003      	beq.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x36>
 8005a9e:	e027      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005aa0:	4b19      	ldr	r3, [pc, #100]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8005aa2:	613b      	str	r3, [r7, #16]
      break;
 8005aa4:	e027      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	0c9b      	lsrs	r3, r3, #18
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	4a17      	ldr	r2, [pc, #92]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ab0:	5cd3      	ldrb	r3, [r2, r3]
 8005ab2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d010      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005abe:	4b11      	ldr	r3, [pc, #68]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	0c5b      	lsrs	r3, r3, #17
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	4a11      	ldr	r2, [pc, #68]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005aca:	5cd3      	ldrb	r3, [r2, r3]
 8005acc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ad2:	fb03 f202 	mul.w	r2, r3, r2
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	e004      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	613b      	str	r3, [r7, #16]
      break;
 8005aee:	e002      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005af0:	4b05      	ldr	r3, [pc, #20]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8005af2:	613b      	str	r3, [r7, #16]
      break;
 8005af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af6:	693b      	ldr	r3, [r7, #16]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40021000 	.word	0x40021000
 8005b08:	007a1200 	.word	0x007a1200
 8005b0c:	0800ef00 	.word	0x0800ef00
 8005b10:	0800ef10 	.word	0x0800ef10
 8005b14:	003d0900 	.word	0x003d0900

08005b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b1c:	4b02      	ldr	r3, [pc, #8]	@ (8005b28 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr
 8005b28:	20000000 	.word	0x20000000

08005b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b30:	f7ff fff2 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	0adb      	lsrs	r3, r3, #11
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	4903      	ldr	r1, [pc, #12]	@ (8005b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b42:	5ccb      	ldrb	r3, [r1, r3]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	0800eef8 	.word	0x0800eef8

08005b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b88 <RCC_Delay+0x34>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	@ (8005b8c <RCC_Delay+0x38>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	0a5b      	lsrs	r3, r3, #9
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b70:	bf00      	nop
  }
  while (Delay --);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	60fa      	str	r2, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f9      	bne.n	8005b70 <RCC_Delay+0x1c>
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	10624dd3 	.word	0x10624dd3

08005b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d07d      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005bac:	2300      	movs	r3, #0
 8005bae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10d      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bbc:	4b4c      	ldr	r3, [pc, #304]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	4a4b      	ldr	r2, [pc, #300]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc6:	61d3      	str	r3, [r2, #28]
 8005bc8:	4b49      	ldr	r3, [pc, #292]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd8:	4b46      	ldr	r3, [pc, #280]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d118      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005be4:	4b43      	ldr	r3, [pc, #268]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a42      	ldr	r2, [pc, #264]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bf0:	f7fc f930 	bl	8001e54 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf6:	e008      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf8:	f7fc f92c 	bl	8001e54 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b64      	cmp	r3, #100	@ 0x64
 8005c04:	d901      	bls.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e06d      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c16:	4b36      	ldr	r3, [pc, #216]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d02e      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d027      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c34:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c44:	4b2c      	ldr	r3, [pc, #176]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c4a:	4a29      	ldr	r2, [pc, #164]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d014      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5a:	f7fc f8fb 	bl	8001e54 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c60:	e00a      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7fc f8f7 	bl	8001e54 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e036      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c78:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0ee      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c84:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4917      	ldr	r1, [pc, #92]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c9c:	4b14      	ldr	r3, [pc, #80]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4a13      	ldr	r2, [pc, #76]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	490b      	ldr	r1, [pc, #44]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cd2:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	4904      	ldr	r1, [pc, #16]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	40007000 	.word	0x40007000
 8005cf8:	42420440 	.word	0x42420440

08005cfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	2300      	movs	r3, #0
 8005d16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	f200 808a 	bhi.w	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d045      	beq.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d075      	beq.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005d32:	e082      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005d34:	4b46      	ldr	r3, [pc, #280]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005d3a:	4b45      	ldr	r3, [pc, #276]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d07b      	beq.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	0c9b      	lsrs	r3, r3, #18
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	4a41      	ldr	r2, [pc, #260]	@ (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005d50:	5cd3      	ldrb	r3, [r2, r3]
 8005d52:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d015      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	0c5b      	lsrs	r3, r3, #17
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	4a3b      	ldr	r2, [pc, #236]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005d6a:	5cd3      	ldrb	r3, [r2, r3]
 8005d6c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005d78:	4a38      	ldr	r2, [pc, #224]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	fb02 f303 	mul.w	r3, r2, r3
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e004      	b.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4a34      	ldr	r2, [pc, #208]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005d94:	4b2e      	ldr	r3, [pc, #184]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005da0:	d102      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	61bb      	str	r3, [r7, #24]
      break;
 8005da6:	e04a      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4a2d      	ldr	r2, [pc, #180]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	61bb      	str	r3, [r7, #24]
      break;
 8005db6:	e042      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005db8:	4b25      	ldr	r3, [pc, #148]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc8:	d108      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005dd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	e01f      	b.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de6:	d109      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005de8:	4b19      	ldr	r3, [pc, #100]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005df4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e00f      	b.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e06:	d11c      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005e08:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d016      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005e14:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005e18:	61bb      	str	r3, [r7, #24]
      break;
 8005e1a:	e012      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005e1c:	e011      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005e1e:	f7ff fe85 	bl	8005b2c <HAL_RCC_GetPCLK2Freq>
 8005e22:	4602      	mov	r2, r0
 8005e24:	4b0a      	ldr	r3, [pc, #40]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	0b9b      	lsrs	r3, r3, #14
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	3301      	adds	r3, #1
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e36:	61bb      	str	r3, [r7, #24]
      break;
 8005e38:	e004      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e002      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e42:	bf00      	nop
    }
  }
  return (frequency);
 8005e44:	69bb      	ldr	r3, [r7, #24]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40021000 	.word	0x40021000
 8005e54:	0800ef14 	.word	0x0800ef14
 8005e58:	0800ef24 	.word	0x0800ef24
 8005e5c:	007a1200 	.word	0x007a1200
 8005e60:	003d0900 	.word	0x003d0900
 8005e64:	aaaaaaab 	.word	0xaaaaaaab

08005e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e076      	b.n	8005f68 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d108      	bne.n	8005e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e8a:	d009      	beq.n	8005ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61da      	str	r2, [r3, #28]
 8005e92:	e005      	b.n	8005ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fb fcfc 	bl	80018b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ed6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f24:	ea42 0103 	orr.w	r1, r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	0c1a      	lsrs	r2, r3, #16
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f002 0204 	and.w	r2, r2, #4
 8005f46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e041      	b.n	8006006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fb fd96 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f000 fa10 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e041      	b.n	80060a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f839 	bl	80060ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3304      	adds	r3, #4
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f000 f9c1 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr
	...

080060c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060da:	2302      	movs	r3, #2
 80060dc:	e0ae      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b0c      	cmp	r3, #12
 80060ea:	f200 809f 	bhi.w	800622c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060ee:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006129 	.word	0x08006129
 80060f8:	0800622d 	.word	0x0800622d
 80060fc:	0800622d 	.word	0x0800622d
 8006100:	0800622d 	.word	0x0800622d
 8006104:	08006169 	.word	0x08006169
 8006108:	0800622d 	.word	0x0800622d
 800610c:	0800622d 	.word	0x0800622d
 8006110:	0800622d 	.word	0x0800622d
 8006114:	080061ab 	.word	0x080061ab
 8006118:	0800622d 	.word	0x0800622d
 800611c:	0800622d 	.word	0x0800622d
 8006120:	0800622d 	.word	0x0800622d
 8006124:	080061eb 	.word	0x080061eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f9be 	bl	80064b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0208 	orr.w	r2, r2, #8
 8006142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0204 	bic.w	r2, r2, #4
 8006152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6999      	ldr	r1, [r3, #24]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	619a      	str	r2, [r3, #24]
      break;
 8006166:	e064      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fa04 	bl	800657c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6999      	ldr	r1, [r3, #24]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	021a      	lsls	r2, r3, #8
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	619a      	str	r2, [r3, #24]
      break;
 80061a8:	e043      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fa4d 	bl	8006650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 0208 	orr.w	r2, r2, #8
 80061c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0204 	bic.w	r2, r2, #4
 80061d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69d9      	ldr	r1, [r3, #28]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	61da      	str	r2, [r3, #28]
      break;
 80061e8:	e023      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fa97 	bl	8006724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69d9      	ldr	r1, [r3, #28]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	021a      	lsls	r2, r3, #8
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	61da      	str	r2, [r3, #28]
      break;
 800622a:	e002      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	75fb      	strb	r3, [r7, #23]
      break;
 8006230:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIM_ConfigClockSource+0x1c>
 800625c:	2302      	movs	r3, #2
 800625e:	e0b4      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x186>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800627e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006298:	d03e      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0xd4>
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800629e:	f200 8087 	bhi.w	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a6:	f000 8086 	beq.w	80063b6 <HAL_TIM_ConfigClockSource+0x172>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ae:	d87f      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b70      	cmp	r3, #112	@ 0x70
 80062b2:	d01a      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0xa6>
 80062b4:	2b70      	cmp	r3, #112	@ 0x70
 80062b6:	d87b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b60      	cmp	r3, #96	@ 0x60
 80062ba:	d050      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x11a>
 80062bc:	2b60      	cmp	r3, #96	@ 0x60
 80062be:	d877      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b50      	cmp	r3, #80	@ 0x50
 80062c2:	d03c      	beq.n	800633e <HAL_TIM_ConfigClockSource+0xfa>
 80062c4:	2b50      	cmp	r3, #80	@ 0x50
 80062c6:	d873      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b40      	cmp	r3, #64	@ 0x40
 80062ca:	d058      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x13a>
 80062cc:	2b40      	cmp	r3, #64	@ 0x40
 80062ce:	d86f      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b30      	cmp	r3, #48	@ 0x30
 80062d2:	d064      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15a>
 80062d4:	2b30      	cmp	r3, #48	@ 0x30
 80062d6:	d86b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d060      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15a>
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d867      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d05c      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15a>
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d05a      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15a>
 80062e8:	e062      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062fa:	f000 fad8 	bl	80068ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800630c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	609a      	str	r2, [r3, #8]
      break;
 8006316:	e04f      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006328:	f000 fac1 	bl	80068ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800633a:	609a      	str	r2, [r3, #8]
      break;
 800633c:	e03c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800634a:	461a      	mov	r2, r3
 800634c:	f000 fa38 	bl	80067c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2150      	movs	r1, #80	@ 0x50
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fa8f 	bl	800687a <TIM_ITRx_SetConfig>
      break;
 800635c:	e02c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fa56 	bl	800681c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2160      	movs	r1, #96	@ 0x60
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fa7f 	bl	800687a <TIM_ITRx_SetConfig>
      break;
 800637c:	e01c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	461a      	mov	r2, r3
 800638c:	f000 fa18 	bl	80067c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2140      	movs	r1, #64	@ 0x40
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fa6f 	bl	800687a <TIM_ITRx_SetConfig>
      break;
 800639c:	e00c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4619      	mov	r1, r3
 80063a8:	4610      	mov	r0, r2
 80063aa:	f000 fa66 	bl	800687a <TIM_ITRx_SetConfig>
      break;
 80063ae:	e003      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
      break;
 80063b4:	e000      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a2f      	ldr	r2, [pc, #188]	@ (80064a4 <TIM_Base_SetConfig+0xd0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00b      	beq.n	8006404 <TIM_Base_SetConfig+0x30>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f2:	d007      	beq.n	8006404 <TIM_Base_SetConfig+0x30>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a2c      	ldr	r2, [pc, #176]	@ (80064a8 <TIM_Base_SetConfig+0xd4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_Base_SetConfig+0x30>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a2b      	ldr	r2, [pc, #172]	@ (80064ac <TIM_Base_SetConfig+0xd8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d108      	bne.n	8006416 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a22      	ldr	r2, [pc, #136]	@ (80064a4 <TIM_Base_SetConfig+0xd0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_Base_SetConfig+0x62>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006424:	d007      	beq.n	8006436 <TIM_Base_SetConfig+0x62>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1f      	ldr	r2, [pc, #124]	@ (80064a8 <TIM_Base_SetConfig+0xd4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_Base_SetConfig+0x62>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1e      	ldr	r2, [pc, #120]	@ (80064ac <TIM_Base_SetConfig+0xd8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d108      	bne.n	8006448 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a0d      	ldr	r2, [pc, #52]	@ (80064a4 <TIM_Base_SetConfig+0xd0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d103      	bne.n	800647c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f023 0201 	bic.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	611a      	str	r2, [r3, #16]
  }
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800

080064b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 0201 	bic.w	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0302 	bic.w	r3, r3, #2
 80064f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1c      	ldr	r2, [pc, #112]	@ (8006578 <TIM_OC1_SetConfig+0xc8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10c      	bne.n	8006526 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0308 	bic.w	r3, r3, #8
 8006512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 0304 	bic.w	r3, r3, #4
 8006524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a13      	ldr	r2, [pc, #76]	@ (8006578 <TIM_OC1_SetConfig+0xc8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d111      	bne.n	8006552 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	621a      	str	r2, [r3, #32]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40012c00 	.word	0x40012c00

0800657c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f023 0210 	bic.w	r2, r3, #16
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0320 	bic.w	r3, r3, #32
 80065c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a1d      	ldr	r2, [pc, #116]	@ (800664c <TIM_OC2_SetConfig+0xd0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d10d      	bne.n	80065f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a14      	ldr	r2, [pc, #80]	@ (800664c <TIM_OC2_SetConfig+0xd0>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d113      	bne.n	8006628 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800660e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	40012c00 	.word	0x40012c00

08006650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <TIM_OC3_SetConfig+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d10d      	bne.n	80066ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a14      	ldr	r2, [pc, #80]	@ (8006720 <TIM_OC3_SetConfig+0xd0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d113      	bne.n	80066fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	621a      	str	r2, [r3, #32]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00

08006724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800675a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800676e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	031b      	lsls	r3, r3, #12
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a0f      	ldr	r2, [pc, #60]	@ (80067bc <TIM_OC4_SetConfig+0x98>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d109      	bne.n	8006798 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800678a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	019b      	lsls	r3, r3, #6
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr
 80067bc:	40012c00 	.word	0x40012c00

080067c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f023 0201 	bic.w	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 030a 	bic.w	r3, r3, #10
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr

0800681c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f023 0210 	bic.w	r2, r3, #16
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	031b      	lsls	r3, r3, #12
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006858:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr

0800687a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800687a:	b480      	push	{r7}
 800687c:	b085      	sub	sp, #20
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	f043 0307 	orr.w	r3, r3, #7
 800689c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	609a      	str	r2, [r3, #8]
}
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b087      	sub	sp, #28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	021a      	lsls	r2, r3, #8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	431a      	orrs	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	609a      	str	r2, [r3, #8]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr

080068ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_TIMEx_PWMN_Start+0x24>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e022      	b.n	8006956 <HAL_TIMEx_PWMN_Start+0x6a>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b04      	cmp	r3, #4
 8006914:	d109      	bne.n	800692a <HAL_TIMEx_PWMN_Start+0x3e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b01      	cmp	r3, #1
 8006920:	bf14      	ite	ne
 8006922:	2301      	movne	r3, #1
 8006924:	2300      	moveq	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	e015      	b.n	8006956 <HAL_TIMEx_PWMN_Start+0x6a>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d109      	bne.n	8006944 <HAL_TIMEx_PWMN_Start+0x58>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	bf14      	ite	ne
 800693c:	2301      	movne	r3, #1
 800693e:	2300      	moveq	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	e008      	b.n	8006956 <HAL_TIMEx_PWMN_Start+0x6a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e059      	b.n	8006a12 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_TIMEx_PWMN_Start+0x82>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800696c:	e013      	b.n	8006996 <HAL_TIMEx_PWMN_Start+0xaa>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d104      	bne.n	800697e <HAL_TIMEx_PWMN_Start+0x92>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800697c:	e00b      	b.n	8006996 <HAL_TIMEx_PWMN_Start+0xaa>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d104      	bne.n	800698e <HAL_TIMEx_PWMN_Start+0xa2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800698c:	e003      	b.n	8006996 <HAL_TIMEx_PWMN_Start+0xaa>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2204      	movs	r2, #4
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f8a0 	bl	8006ae4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a18      	ldr	r2, [pc, #96]	@ (8006a1c <HAL_TIMEx_PWMN_Start+0x130>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00e      	beq.n	80069dc <HAL_TIMEx_PWMN_Start+0xf0>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c6:	d009      	beq.n	80069dc <HAL_TIMEx_PWMN_Start+0xf0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a14      	ldr	r2, [pc, #80]	@ (8006a20 <HAL_TIMEx_PWMN_Start+0x134>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <HAL_TIMEx_PWMN_Start+0xf0>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a13      	ldr	r2, [pc, #76]	@ (8006a24 <HAL_TIMEx_PWMN_Start+0x138>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d111      	bne.n	8006a00 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b06      	cmp	r3, #6
 80069ec:	d010      	beq.n	8006a10 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fe:	e007      	b.n	8006a10 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40000400 	.word	0x40000400
 8006a24:	40000800 	.word	0x40000800

08006a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e046      	b.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a16      	ldr	r2, [pc, #88]	@ (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a8c:	d009      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a12      	ldr	r2, [pc, #72]	@ (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a10      	ldr	r2, [pc, #64]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d10c      	bne.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr
 8006ad8:	40012c00 	.word	0x40012c00
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800

08006ae4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	2204      	movs	r2, #4
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	4638      	mov	r0, r7
 8006b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b56:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006b5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b7a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006b7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	4013      	ands	r3, r2
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr

08006bbe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bc80      	pop	{r7}
 8006bf6:	4770      	bx	lr

08006bf8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b09d      	sub	sp, #116	@ 0x74
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c1e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	78db      	ldrb	r3, [r3, #3]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d81f      	bhi.n	8006c6a <USB_ActivateEndpoint+0x72>
 8006c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c30 <USB_ActivateEndpoint+0x38>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c5d 	.word	0x08006c5d
 8006c38:	08006c73 	.word	0x08006c73
 8006c3c:	08006c4f 	.word	0x08006c4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006c4c:	e012      	b.n	8006c74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c52:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006c56:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006c5a:	e00b      	b.n	8006c74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006c68:	e004      	b.n	8006c74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006c70:	e000      	b.n	8006c74 <USB_ActivateEndpoint+0x7c>
      break;
 8006c72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	7812      	ldrb	r2, [r2, #0]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	7b1b      	ldrb	r3, [r3, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 8178 	bne.w	8006fd4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8084 	beq.w	8006df6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	4413      	add	r3, r2
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	011a      	lsls	r2, r3, #4
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	88db      	ldrh	r3, [r3, #6]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	827b      	strh	r3, [r7, #18]
 8006d30:	8a7b      	ldrh	r3, [r7, #18]
 8006d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01b      	beq.n	8006d72 <USB_ActivateEndpoint+0x17a>
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d50:	823b      	strh	r3, [r7, #16]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	8a3b      	ldrh	r3, [r7, #16]
 8006d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	78db      	ldrb	r3, [r3, #3]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d020      	beq.n	8006dbc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d90:	81bb      	strh	r3, [r7, #12]
 8006d92:	89bb      	ldrh	r3, [r7, #12]
 8006d94:	f083 0320 	eor.w	r3, r3, #32
 8006d98:	81bb      	strh	r3, [r7, #12]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	89bb      	ldrh	r3, [r7, #12]
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]
 8006dba:	e2d5      	b.n	8007368 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dd2:	81fb      	strh	r3, [r7, #14]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	441a      	add	r2, r3
 8006dde:	89fb      	ldrh	r3, [r7, #14]
 8006de0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	8013      	strh	r3, [r2, #0]
 8006df4:	e2b8      	b.n	8007368 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	4413      	add	r3, r2
 8006e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	011a      	lsls	r2, r3, #4
 8006e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	88db      	ldrh	r3, [r3, #6]
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e28:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	4413      	add	r3, r2
 8006e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	011a      	lsls	r2, r3, #4
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e64:	d91d      	bls.n	8006ea2 <USB_ActivateEndpoint+0x2aa>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <USB_ActivateEndpoint+0x288>
 8006e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	029b      	lsls	r3, r3, #10
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e026      	b.n	8006ef0 <USB_ActivateEndpoint+0x2f8>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10a      	bne.n	8006ec0 <USB_ActivateEndpoint+0x2c8>
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	e017      	b.n	8006ef0 <USB_ActivateEndpoint+0x2f8>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <USB_ActivateEndpoint+0x2e2>
 8006ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006efe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01b      	beq.n	8006f40 <USB_ActivateEndpoint+0x348>
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1e:	843b      	strh	r3, [r7, #32]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	441a      	add	r2, r3
 8006f2a:	8c3b      	ldrh	r3, [r7, #32]
 8006f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d124      	bne.n	8006f92 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f5e:	83bb      	strh	r3, [r7, #28]
 8006f60:	8bbb      	ldrh	r3, [r7, #28]
 8006f62:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f66:	83bb      	strh	r3, [r7, #28]
 8006f68:	8bbb      	ldrh	r3, [r7, #28]
 8006f6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f6e:	83bb      	strh	r3, [r7, #28]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	8bbb      	ldrh	r3, [r7, #28]
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
 8006f90:	e1ea      	b.n	8007368 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa8:	83fb      	strh	r3, [r7, #30]
 8006faa:	8bfb      	ldrh	r3, [r7, #30]
 8006fac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006fb0:	83fb      	strh	r3, [r7, #30]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	8bfb      	ldrh	r3, [r7, #30]
 8006fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	8013      	strh	r3, [r2, #0]
 8006fd2:	e1c9      	b.n	8007368 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	78db      	ldrb	r3, [r3, #3]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d11e      	bne.n	800701a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	441a      	add	r2, r3
 8007000:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007014:	b29b      	uxth	r3, r3
 8007016:	8013      	strh	r3, [r2, #0]
 8007018:	e01d      	b.n	8007056 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800702c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007030:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	441a      	add	r2, r3
 800703e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800704a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800704e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007052:	b29b      	uxth	r3, r3
 8007054:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007060:	b29b      	uxth	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007066:	4413      	add	r3, r2
 8007068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	011a      	lsls	r2, r3, #4
 8007070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007072:	4413      	add	r3, r2
 8007074:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007078:	65bb      	str	r3, [r7, #88]	@ 0x58
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	891b      	ldrh	r3, [r3, #8]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	657b      	str	r3, [r7, #84]	@ 0x54
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800709a:	4413      	add	r3, r2
 800709c:	657b      	str	r3, [r7, #84]	@ 0x54
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	011a      	lsls	r2, r3, #4
 80070a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80070ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	895b      	ldrh	r3, [r3, #10]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070bc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f040 8093 	bne.w	80071ee <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80070d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80070dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01b      	beq.n	800711c <USB_ActivateEndpoint+0x524>
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	441a      	add	r2, r3
 8007106:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800710c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007110:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007118:	b29b      	uxth	r3, r3
 800711a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800712a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800712c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01b      	beq.n	800716c <USB_ActivateEndpoint+0x574>
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800715c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007164:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007168:	b29b      	uxth	r3, r3
 800716a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800717e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007182:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007184:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007186:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800718a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800718c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800718e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007192:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	441a      	add	r2, r3
 800719e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80071a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	441a      	add	r2, r3
 80071d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	8013      	strh	r3, [r2, #0]
 80071ec:	e0bc      	b.n	8007368 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80071fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d01d      	beq.n	8007246 <USB_ActivateEndpoint+0x64e>
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800721c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007220:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800723a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800723e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007256:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800725a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01d      	beq.n	800729e <USB_ActivateEndpoint+0x6a6>
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007278:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	441a      	add	r2, r3
 8007286:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800728a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800728e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007296:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800729a:	b29b      	uxth	r3, r3
 800729c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d024      	beq.n	80072f0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80072c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80072c4:	f083 0320 	eor.w	r3, r3, #32
 80072c8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	441a      	add	r2, r3
 80072d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]
 80072ee:	e01d      	b.n	800732c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007302:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007306:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800731c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007328:	b29b      	uxth	r3, r3
 800732a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800733e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007342:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	441a      	add	r2, r3
 8007350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800735c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007364:	b29b      	uxth	r3, r3
 8007366:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007368:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800736c:	4618      	mov	r0, r3
 800736e:	3774      	adds	r7, #116	@ 0x74
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop

08007378 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007378:	b480      	push	{r7}
 800737a:	b08d      	sub	sp, #52	@ 0x34
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	7b1b      	ldrb	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f040 808e 	bne.w	80074a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d044      	beq.n	800741e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	81bb      	strh	r3, [r7, #12]
 80073a2:	89bb      	ldrh	r3, [r7, #12]
 80073a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <USB_DeactivateEndpoint+0x6c>
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c2:	817b      	strh	r3, [r7, #10]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	441a      	add	r2, r3
 80073ce:	897b      	ldrh	r3, [r7, #10]
 80073d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073fa:	813b      	strh	r3, [r7, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]
 800741c:	e192      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	827b      	strh	r3, [r7, #18]
 800742c:	8a7b      	ldrh	r3, [r7, #18]
 800742e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01b      	beq.n	800746e <USB_DeactivateEndpoint+0xf6>
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744c:	823b      	strh	r3, [r7, #16]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	8a3b      	ldrh	r3, [r7, #16]
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007462:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007484:	81fb      	strh	r3, [r7, #14]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	89fb      	ldrh	r3, [r7, #14]
 8007492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800749a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800749e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	8013      	strh	r3, [r2, #0]
 80074a6:	e14d      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 80a5 	bne.w	80075fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	843b      	strh	r3, [r7, #32]
 80074c0:	8c3b      	ldrh	r3, [r7, #32]
 80074c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01b      	beq.n	8007502 <USB_DeactivateEndpoint+0x18a>
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e0:	83fb      	strh	r3, [r7, #30]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	441a      	add	r2, r3
 80074ec:	8bfb      	ldrh	r3, [r7, #30]
 80074ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	83bb      	strh	r3, [r7, #28]
 8007510:	8bbb      	ldrh	r3, [r7, #28]
 8007512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01b      	beq.n	8007552 <USB_DeactivateEndpoint+0x1da>
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800752c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007530:	837b      	strh	r3, [r7, #26]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	8b7b      	ldrh	r3, [r7, #26]
 800753e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800754a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800754e:	b29b      	uxth	r3, r3
 8007550:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007568:	833b      	strh	r3, [r7, #24]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	8b3b      	ldrh	r3, [r7, #24]
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800757e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007582:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800759c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075a0:	82fb      	strh	r3, [r7, #22]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	8afb      	ldrh	r3, [r7, #22]
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075d8:	82bb      	strh	r3, [r7, #20]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	441a      	add	r2, r3
 80075e4:	8abb      	ldrh	r3, [r7, #20]
 80075e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	8013      	strh	r3, [r2, #0]
 80075fa:	e0a3      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800760a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800760c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01b      	beq.n	800764c <USB_DeactivateEndpoint+0x2d4>
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800762a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800763c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007640:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007648:	b29b      	uxth	r3, r3
 800764a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800765a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800765c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <USB_DeactivateEndpoint+0x324>
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	441a      	add	r2, r3
 8007686:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007694:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007698:	b29b      	uxth	r3, r3
 800769a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800771e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007722:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800773c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3734      	adds	r7, #52	@ 0x34
 800774a:	46bd      	mov	sp, r7
 800774c:	bc80      	pop	{r7}
 800774e:	4770      	bx	lr

08007750 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b0c2      	sub	sp, #264	@ 0x108
 8007754:	af00      	add	r7, sp, #0
 8007756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800775e:	6018      	str	r0, [r3, #0]
 8007760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007768:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800776a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b01      	cmp	r3, #1
 8007778:	f040 86b7 	bne.w	80084ea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800777c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699a      	ldr	r2, [r3, #24]
 8007788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	429a      	cmp	r2, r3
 8007796:	d908      	bls.n	80077aa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80077a8:	e007      	b.n	80077ba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80077aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80077ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	7b1b      	ldrb	r3, [r3, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d13a      	bne.n	8007840 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6959      	ldr	r1, [r3, #20]
 80077d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	88da      	ldrh	r2, [r3, #6]
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80077ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077f0:	6800      	ldr	r0, [r0, #0]
 80077f2:	f001 fc9c 	bl	800912e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007810:	b29b      	uxth	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4413      	add	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	011a      	lsls	r2, r3, #4
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	4413      	add	r3, r2
 800782c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	f000 be1f 	b.w	800847e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	78db      	ldrb	r3, [r3, #3]
 800784c:	2b02      	cmp	r3, #2
 800784e:	f040 8462 	bne.w	8008116 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6a1a      	ldr	r2, [r3, #32]
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	429a      	cmp	r2, r3
 800786c:	f240 83df 	bls.w	800802e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	b29b      	uxth	r3, r3
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007896:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800789a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80078b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078c0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80078c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6a1a      	ldr	r2, [r3, #32]
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078dc:	1ad2      	subs	r2, r2, r3
 80078de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 81c7 	beq.w	8007ca0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	633b      	str	r3, [r7, #48]	@ 0x30
 800791e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d177      	bne.n	8007a1e <USB_EPStartXfer+0x2ce>
 800792e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800793a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007948:	b29b      	uxth	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794e:	4413      	add	r3, r2
 8007950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	011a      	lsls	r2, r3, #4
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	4413      	add	r3, r2
 8007964:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007968:	627b      	str	r3, [r7, #36]	@ 0x24
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007974:	b29a      	uxth	r2, r3
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	801a      	strh	r2, [r3, #0]
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007980:	d921      	bls.n	80079c6 <USB_EPStartXfer+0x276>
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007986:	095b      	lsrs	r3, r3, #5
 8007988:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <USB_EPStartXfer+0x252>
 8007998:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800799c:	3b01      	subs	r3, #1
 800799e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	029b      	lsls	r3, r3, #10
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4313      	orrs	r3, r2
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079be:	b29a      	uxth	r2, r3
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	e050      	b.n	8007a68 <USB_EPStartXfer+0x318>
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <USB_EPStartXfer+0x294>
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079dc:	b29a      	uxth	r2, r3
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	e041      	b.n	8007a68 <USB_EPStartXfer+0x318>
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <USB_EPStartXfer+0x2b4>
 80079fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80079fe:	3301      	adds	r3, #1
 8007a00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e024      	b.n	8007a68 <USB_EPStartXfer+0x318>
 8007a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d11c      	bne.n	8007a68 <USB_EPStartXfer+0x318>
 8007a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a42:	4413      	add	r3, r2
 8007a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	011a      	lsls	r2, r3, #4
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	4413      	add	r3, r2
 8007a58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	895b      	ldrh	r3, [r3, #10]
 8007a74:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6959      	ldr	r1, [r3, #20]
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a8e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a92:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a96:	6800      	ldr	r0, [r0, #0]
 8007a98:	f001 fb49 	bl	800912e <USB_WritePMA>
            ep->xfer_buff += len;
 8007a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	695a      	ldr	r2, [r3, #20]
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aac:	441a      	add	r2, r3
 8007aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
 8007ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d90f      	bls.n	8007af6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6a1a      	ldr	r2, [r3, #32]
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	621a      	str	r2, [r3, #32]
 8007af4:	e00e      	b.n	8007b14 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2200      	movs	r2, #0
 8007b12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d177      	bne.n	8007c14 <USB_EPStartXfer+0x4c4>
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	4413      	add	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	011a      	lsls	r2, r3, #4
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b74:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b76:	d921      	bls.n	8007bbc <USB_EPStartXfer+0x46c>
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b86:	f003 031f 	and.w	r3, r3, #31
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d104      	bne.n	8007b98 <USB_EPStartXfer+0x448>
 8007b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b92:	3b01      	subs	r3, #1
 8007b94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	029b      	lsls	r3, r3, #10
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	e056      	b.n	8007c6a <USB_EPStartXfer+0x51a>
 8007bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <USB_EPStartXfer+0x48a>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	e047      	b.n	8007c6a <USB_EPStartXfer+0x51a>
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <USB_EPStartXfer+0x4aa>
 8007bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	029b      	lsls	r3, r3, #10
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	e02a      	b.n	8007c6a <USB_EPStartXfer+0x51a>
 8007c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d122      	bne.n	8007c6a <USB_EPStartXfer+0x51a>
 8007c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	623b      	str	r3, [r7, #32]
 8007c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	4413      	add	r3, r2
 8007c46:	623b      	str	r3, [r7, #32]
 8007c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	011a      	lsls	r2, r3, #4
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	891b      	ldrh	r3, [r3, #8]
 8007c76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6959      	ldr	r1, [r3, #20]
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c90:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c94:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c98:	6800      	ldr	r0, [r0, #0]
 8007c9a:	f001 fa48 	bl	800912e <USB_WritePMA>
 8007c9e:	e3ee      	b.n	800847e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	785b      	ldrb	r3, [r3, #1]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d177      	bne.n	8007da0 <USB_EPStartXfer+0x650>
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cd0:	4413      	add	r3, r2
 8007cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	011a      	lsls	r2, r3, #4
 8007ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d00:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d02:	d921      	bls.n	8007d48 <USB_EPStartXfer+0x5f8>
 8007d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d12:	f003 031f 	and.w	r3, r3, #31
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <USB_EPStartXfer+0x5d4>
 8007d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	029b      	lsls	r3, r3, #10
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	4313      	orrs	r3, r2
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d44:	801a      	strh	r2, [r3, #0]
 8007d46:	e056      	b.n	8007df6 <USB_EPStartXfer+0x6a6>
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <USB_EPStartXfer+0x616>
 8007d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e047      	b.n	8007df6 <USB_EPStartXfer+0x6a6>
 8007d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6a:	085b      	lsrs	r3, r3, #1
 8007d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <USB_EPStartXfer+0x636>
 8007d7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d80:	3301      	adds	r3, #1
 8007d82:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	029b      	lsls	r3, r3, #10
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4313      	orrs	r3, r2
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d9c:	801a      	strh	r2, [r3, #0]
 8007d9e:	e02a      	b.n	8007df6 <USB_EPStartXfer+0x6a6>
 8007da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d122      	bne.n	8007df6 <USB_EPStartXfer+0x6a6>
 8007db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dd0:	4413      	add	r3, r2
 8007dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	011a      	lsls	r2, r3, #4
 8007de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007de4:	4413      	add	r3, r2
 8007de6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	891b      	ldrh	r3, [r3, #8]
 8007e02:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6959      	ldr	r1, [r3, #20]
 8007e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e1c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e20:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e24:	6800      	ldr	r0, [r0, #0]
 8007e26:	f001 f982 	bl	800912e <USB_WritePMA>
            ep->xfer_buff += len;
 8007e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695a      	ldr	r2, [r3, #20]
 8007e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3a:	441a      	add	r2, r3
 8007e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6a1a      	ldr	r2, [r3, #32]
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d90f      	bls.n	8007e84 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6a1a      	ldr	r2, [r3, #32]
 8007e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e74:	1ad2      	subs	r2, r2, r3
 8007e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	621a      	str	r2, [r3, #32]
 8007e82:	e00e      	b.n	8007ea2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d177      	bne.n	8007fae <USB_EPStartXfer+0x85e>
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ede:	4413      	add	r3, r2
 8007ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	011a      	lsls	r2, r3, #4
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f10:	d921      	bls.n	8007f56 <USB_EPStartXfer+0x806>
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d104      	bne.n	8007f32 <USB_EPStartXfer+0x7e2>
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	029b      	lsls	r3, r3, #10
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	4313      	orrs	r3, r2
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f52:	801a      	strh	r2, [r3, #0]
 8007f54:	e050      	b.n	8007ff8 <USB_EPStartXfer+0x8a8>
 8007f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <USB_EPStartXfer+0x824>
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f70:	801a      	strh	r2, [r3, #0]
 8007f72:	e041      	b.n	8007ff8 <USB_EPStartXfer+0x8a8>
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <USB_EPStartXfer+0x844>
 8007f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	029b      	lsls	r3, r3, #10
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	e024      	b.n	8007ff8 <USB_EPStartXfer+0x8a8>
 8007fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d11c      	bne.n	8007ff8 <USB_EPStartXfer+0x8a8>
 8007fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fd2:	4413      	add	r3, r2
 8007fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	011a      	lsls	r2, r3, #4
 8007fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	895b      	ldrh	r3, [r3, #10]
 8008004:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6959      	ldr	r1, [r3, #20]
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008018:	b29b      	uxth	r3, r3
 800801a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800801e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008022:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008026:	6800      	ldr	r0, [r0, #0]
 8008028:	f001 f881 	bl	800912e <USB_WritePMA>
 800802c:	e227      	b.n	800847e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800802e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800803e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008064:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	441a      	add	r2, r3
 8008082:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800808e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008096:	b29b      	uxth	r3, r3
 8008098:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800809a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	461a      	mov	r2, r3
 80080b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080ba:	4413      	add	r3, r2
 80080bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	011a      	lsls	r2, r3, #4
 80080cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080ce:	4413      	add	r3, r2
 80080d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080da:	b29a      	uxth	r2, r3
 80080dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	891b      	ldrh	r3, [r3, #8]
 80080ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6959      	ldr	r1, [r3, #20]
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008100:	b29b      	uxth	r3, r3
 8008102:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008106:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800810a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800810e:	6800      	ldr	r0, [r0, #0]
 8008110:	f001 f80d 	bl	800912e <USB_WritePMA>
 8008114:	e1b3      	b.n	800847e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6a1a      	ldr	r2, [r3, #32]
 8008122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008126:	1ad2      	subs	r2, r2, r3
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 80c6 	beq.w	80082e8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800815c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	673b      	str	r3, [r7, #112]	@ 0x70
 8008168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d177      	bne.n	8008268 <USB_EPStartXfer+0xb18>
 8008178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008188:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008192:	b29b      	uxth	r3, r3
 8008194:	461a      	mov	r2, r3
 8008196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008198:	4413      	add	r3, r2
 800819a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800819c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	011a      	lsls	r2, r3, #4
 80081aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081ac:	4413      	add	r3, r2
 80081ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80081b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081be:	b29a      	uxth	r2, r3
 80081c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80081ca:	d921      	bls.n	8008210 <USB_EPStartXfer+0xac0>
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d104      	bne.n	80081ec <USB_EPStartXfer+0xa9c>
 80081e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80081e6:	3b01      	subs	r3, #1
 80081e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	029b      	lsls	r3, r3, #10
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4313      	orrs	r3, r2
 80081fe:	b29b      	uxth	r3, r3
 8008200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008208:	b29a      	uxth	r2, r3
 800820a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	e050      	b.n	80082b2 <USB_EPStartXfer+0xb62>
 8008210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <USB_EPStartXfer+0xade>
 8008218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29b      	uxth	r3, r3
 800821e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008226:	b29a      	uxth	r2, r3
 8008228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	e041      	b.n	80082b2 <USB_EPStartXfer+0xb62>
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <USB_EPStartXfer+0xafe>
 8008244:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008248:	3301      	adds	r3, #1
 800824a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800824e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29a      	uxth	r2, r3
 8008254:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008258:	b29b      	uxth	r3, r3
 800825a:	029b      	lsls	r3, r3, #10
 800825c:	b29b      	uxth	r3, r3
 800825e:	4313      	orrs	r3, r2
 8008260:	b29a      	uxth	r2, r3
 8008262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008264:	801a      	strh	r2, [r3, #0]
 8008266:	e024      	b.n	80082b2 <USB_EPStartXfer+0xb62>
 8008268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d11c      	bne.n	80082b2 <USB_EPStartXfer+0xb62>
 8008278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800828c:	4413      	add	r3, r2
 800828e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	011a      	lsls	r2, r3, #4
 800829e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082a0:	4413      	add	r3, r2
 80082a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80082b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	895b      	ldrh	r3, [r3, #10]
 80082be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6959      	ldr	r1, [r3, #20]
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80082d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80082dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80082e0:	6800      	ldr	r0, [r0, #0]
 80082e2:	f000 ff24 	bl	800912e <USB_WritePMA>
 80082e6:	e0ca      	b.n	800847e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	785b      	ldrb	r3, [r3, #1]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d177      	bne.n	80083e8 <USB_EPStartXfer+0xc98>
 80082f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008308:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008312:	b29b      	uxth	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008318:	4413      	add	r3, r2
 800831a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800831c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	011a      	lsls	r2, r3, #4
 800832a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800832c:	4413      	add	r3, r2
 800832e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008332:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	b29b      	uxth	r3, r3
 800833a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800833e:	b29a      	uxth	r2, r3
 8008340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008342:	801a      	strh	r2, [r3, #0]
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008348:	2b3e      	cmp	r3, #62	@ 0x3e
 800834a:	d921      	bls.n	8008390 <USB_EPStartXfer+0xc40>
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008350:	095b      	lsrs	r3, r3, #5
 8008352:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835a:	f003 031f 	and.w	r3, r3, #31
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <USB_EPStartXfer+0xc1c>
 8008362:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008366:	3b01      	subs	r3, #1
 8008368:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800836c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29a      	uxth	r2, r3
 8008372:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008376:	b29b      	uxth	r3, r3
 8008378:	029b      	lsls	r3, r3, #10
 800837a:	b29b      	uxth	r3, r3
 800837c:	4313      	orrs	r3, r2
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008388:	b29a      	uxth	r2, r3
 800838a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e05c      	b.n	800844a <USB_EPStartXfer+0xcfa>
 8008390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <USB_EPStartXfer+0xc5e>
 8008398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e04d      	b.n	800844a <USB_EPStartXfer+0xcfa>
 80083ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <USB_EPStartXfer+0xc7e>
 80083c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80083c8:	3301      	adds	r3, #1
 80083ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80083d8:	b29b      	uxth	r3, r3
 80083da:	029b      	lsls	r3, r3, #10
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4313      	orrs	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	e030      	b.n	800844a <USB_EPStartXfer+0xcfa>
 80083e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d128      	bne.n	800844a <USB_EPStartXfer+0xcfa>
 80083f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008414:	b29b      	uxth	r3, r3
 8008416:	461a      	mov	r2, r3
 8008418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800841c:	4413      	add	r3, r2
 800841e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	011a      	lsls	r2, r3, #4
 8008430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008434:	4413      	add	r3, r2
 8008436:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800843a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008442:	b29a      	uxth	r2, r3
 8008444:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008448:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800844a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	891b      	ldrh	r3, [r3, #8]
 8008456:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800845a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6959      	ldr	r1, [r3, #20]
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846a:	b29b      	uxth	r3, r3
 800846c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008470:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008474:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008478:	6800      	ldr	r0, [r0, #0]
 800847a:	f000 fe58 	bl	800912e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800847e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a4:	817b      	strh	r3, [r7, #10]
 80084a6:	897b      	ldrh	r3, [r7, #10]
 80084a8:	f083 0310 	eor.w	r3, r3, #16
 80084ac:	817b      	strh	r3, [r7, #10]
 80084ae:	897b      	ldrh	r3, [r7, #10]
 80084b0:	f083 0320 	eor.w	r3, r3, #32
 80084b4:	817b      	strh	r3, [r7, #10]
 80084b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	441a      	add	r2, r3
 80084d0:	897b      	ldrh	r3, [r7, #10]
 80084d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	8013      	strh	r3, [r2, #0]
 80084e6:	f000 bcde 	b.w	8008ea6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80084ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	7b1b      	ldrb	r3, [r3, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f040 80bb 	bne.w	8008672 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80084fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	429a      	cmp	r2, r3
 8008516:	d917      	bls.n	8008548 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699a      	ldr	r2, [r3, #24]
 8008534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008538:	1ad2      	subs	r2, r2, r3
 800853a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	619a      	str	r2, [r3, #24]
 8008546:	e00e      	b.n	8008566 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800858a:	4413      	add	r3, r2
 800858c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	011a      	lsls	r2, r3, #4
 800859e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085a2:	4413      	add	r3, r2
 80085a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80085a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80085c6:	d924      	bls.n	8008612 <USB_EPStartXfer+0xec2>
 80085c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085cc:	095b      	lsrs	r3, r3, #5
 80085ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d6:	f003 031f 	and.w	r3, r3, #31
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d104      	bne.n	80085e8 <USB_EPStartXfer+0xe98>
 80085de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80085e2:	3b01      	subs	r3, #1
 80085e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	029b      	lsls	r3, r3, #10
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008606:	b29a      	uxth	r2, r3
 8008608:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	f000 bc10 	b.w	8008e32 <USB_EPStartXfer+0x16e2>
 8008612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10c      	bne.n	8008634 <USB_EPStartXfer+0xee4>
 800861a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862a:	b29a      	uxth	r2, r3
 800862c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008630:	801a      	strh	r2, [r3, #0]
 8008632:	e3fe      	b.n	8008e32 <USB_EPStartXfer+0x16e2>
 8008634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008638:	085b      	lsrs	r3, r3, #1
 800863a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d004      	beq.n	8008654 <USB_EPStartXfer+0xf04>
 800864a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800864e:	3301      	adds	r3, #1
 8008650:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008660:	b29b      	uxth	r3, r3
 8008662:	029b      	lsls	r3, r3, #10
 8008664:	b29b      	uxth	r3, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	b29a      	uxth	r2, r3
 800866a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800866e:	801a      	strh	r2, [r3, #0]
 8008670:	e3df      	b.n	8008e32 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	78db      	ldrb	r3, [r3, #3]
 800867e:	2b02      	cmp	r3, #2
 8008680:	f040 8218 	bne.w	8008ab4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	785b      	ldrb	r3, [r3, #1]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f040 809d 	bne.w	80087d0 <USB_EPStartXfer+0x1080>
 8008696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	461a      	mov	r2, r3
 80086b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ba:	4413      	add	r3, r2
 80086bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	011a      	lsls	r2, r3, #4
 80086ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086d2:	4413      	add	r3, r2
 80086d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086ee:	801a      	strh	r2, [r3, #0]
 80086f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80086fe:	d92b      	bls.n	8008758 <USB_EPStartXfer+0x1008>
 8008700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 031f 	and.w	r3, r3, #31
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <USB_EPStartXfer+0xfe0>
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872a:	3b01      	subs	r3, #1
 800872c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	b29a      	uxth	r2, r3
 8008738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800873c:	b29b      	uxth	r3, r3
 800873e:	029b      	lsls	r3, r3, #10
 8008740:	b29b      	uxth	r3, r3
 8008742:	4313      	orrs	r3, r2
 8008744:	b29b      	uxth	r3, r3
 8008746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874e:	b29a      	uxth	r2, r3
 8008750:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	e070      	b.n	800883a <USB_EPStartXfer+0x10ea>
 8008758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10c      	bne.n	8008782 <USB_EPStartXfer+0x1032>
 8008768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	b29b      	uxth	r3, r3
 8008770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008778:	b29a      	uxth	r2, r3
 800877a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800877e:	801a      	strh	r2, [r3, #0]
 8008780:	e05b      	b.n	800883a <USB_EPStartXfer+0x10ea>
 8008782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	085b      	lsrs	r3, r3, #1
 8008790:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <USB_EPStartXfer+0x1062>
 80087a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ac:	3301      	adds	r3, #1
 80087ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087be:	b29b      	uxth	r3, r3
 80087c0:	029b      	lsls	r3, r3, #10
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	4313      	orrs	r3, r2
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087cc:	801a      	strh	r2, [r3, #0]
 80087ce:	e034      	b.n	800883a <USB_EPStartXfer+0x10ea>
 80087d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	785b      	ldrb	r3, [r3, #1]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d12c      	bne.n	800883a <USB_EPStartXfer+0x10ea>
 80087e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008804:	4413      	add	r3, r2
 8008806:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800880a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	011a      	lsls	r2, r3, #4
 8008818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800881c:	4413      	add	r3, r2
 800881e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008822:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	b29a      	uxth	r2, r3
 8008834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008838:	801a      	strh	r2, [r3, #0]
 800883a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800884c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	785b      	ldrb	r3, [r3, #1]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 809d 	bne.w	8008994 <USB_EPStartXfer+0x1244>
 800885a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800885e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800887e:	4413      	add	r3, r2
 8008880:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	011a      	lsls	r2, r3, #4
 8008892:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008896:	4413      	add	r3, r2
 8008898:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800889c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80088c2:	d92b      	bls.n	800891c <USB_EPStartXfer+0x11cc>
 80088c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	095b      	lsrs	r3, r3, #5
 80088d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d104      	bne.n	80088f4 <USB_EPStartXfer+0x11a4>
 80088ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ee:	3b01      	subs	r3, #1
 80088f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008900:	b29b      	uxth	r3, r3
 8008902:	029b      	lsls	r3, r3, #10
 8008904:	b29b      	uxth	r3, r3
 8008906:	4313      	orrs	r3, r2
 8008908:	b29b      	uxth	r3, r3
 800890a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008912:	b29a      	uxth	r2, r3
 8008914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008918:	801a      	strh	r2, [r3, #0]
 800891a:	e069      	b.n	80089f0 <USB_EPStartXfer+0x12a0>
 800891c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <USB_EPStartXfer+0x11f6>
 800892c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893c:	b29a      	uxth	r2, r3
 800893e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008942:	801a      	strh	r2, [r3, #0]
 8008944:	e054      	b.n	80089f0 <USB_EPStartXfer+0x12a0>
 8008946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800894a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	085b      	lsrs	r3, r3, #1
 8008954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d004      	beq.n	8008976 <USB_EPStartXfer+0x1226>
 800896c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008970:	3301      	adds	r3, #1
 8008972:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008976:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	b29a      	uxth	r2, r3
 800897e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008982:	b29b      	uxth	r3, r3
 8008984:	029b      	lsls	r3, r3, #10
 8008986:	b29b      	uxth	r3, r3
 8008988:	4313      	orrs	r3, r2
 800898a:	b29a      	uxth	r2, r3
 800898c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008990:	801a      	strh	r2, [r3, #0]
 8008992:	e02d      	b.n	80089f0 <USB_EPStartXfer+0x12a0>
 8008994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d125      	bne.n	80089f0 <USB_EPStartXfer+0x12a0>
 80089a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	461a      	mov	r2, r3
 80089b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089ba:	4413      	add	r3, r2
 80089bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	011a      	lsls	r2, r3, #4
 80089ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089d2:	4413      	add	r3, r2
 80089d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80089d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089ee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 8218 	beq.w	8008e32 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <USB_EPStartXfer+0x12ea>
 8008a2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10d      	bne.n	8008a56 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 81f5 	bne.w	8008e32 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f040 81ee 	bne.w	8008e32 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a7c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	441a      	add	r2, r3
 8008a9a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	8013      	strh	r3, [r2, #0]
 8008ab2:	e1be      	b.n	8008e32 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	78db      	ldrb	r3, [r3, #3]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	f040 81b4 	bne.w	8008e2e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699a      	ldr	r2, [r3, #24]
 8008ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d917      	bls.n	8008b12 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	699a      	ldr	r2, [r3, #24]
 8008afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b02:	1ad2      	subs	r2, r2, r3
 8008b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	619a      	str	r2, [r3, #24]
 8008b10:	e00e      	b.n	8008b30 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 8085 	bne.w	8008c4c <USB_EPStartXfer+0x14fc>
 8008b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b66:	4413      	add	r3, r2
 8008b68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	011a      	lsls	r2, r3, #4
 8008b7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b7e:	4413      	add	r3, r2
 8008b80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b9a:	801a      	strh	r2, [r3, #0]
 8008b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ba2:	d923      	bls.n	8008bec <USB_EPStartXfer+0x149c>
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba8:	095b      	lsrs	r3, r3, #5
 8008baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb2:	f003 031f 	and.w	r3, r3, #31
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <USB_EPStartXfer+0x1474>
 8008bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	029b      	lsls	r3, r3, #10
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008be8:	801a      	strh	r2, [r3, #0]
 8008bea:	e060      	b.n	8008cae <USB_EPStartXfer+0x155e>
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10c      	bne.n	8008c0e <USB_EPStartXfer+0x14be>
 8008bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c0a:	801a      	strh	r2, [r3, #0]
 8008c0c:	e04f      	b.n	8008cae <USB_EPStartXfer+0x155e>
 8008c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c12:	085b      	lsrs	r3, r3, #1
 8008c14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <USB_EPStartXfer+0x14de>
 8008c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	029b      	lsls	r3, r3, #10
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	4313      	orrs	r3, r2
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c48:	801a      	strh	r2, [r3, #0]
 8008c4a:	e030      	b.n	8008cae <USB_EPStartXfer+0x155e>
 8008c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	785b      	ldrb	r3, [r3, #1]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d128      	bne.n	8008cae <USB_EPStartXfer+0x155e>
 8008c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c80:	4413      	add	r3, r2
 8008c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	011a      	lsls	r2, r3, #4
 8008c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c98:	4413      	add	r3, r2
 8008c9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f040 8085 	bne.w	8008dd8 <USB_EPStartXfer+0x1688>
 8008cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	461a      	mov	r2, r3
 8008cee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	011a      	lsls	r2, r3, #4
 8008d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008d10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d26:	801a      	strh	r2, [r3, #0]
 8008d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d2e:	d923      	bls.n	8008d78 <USB_EPStartXfer+0x1628>
 8008d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d3e:	f003 031f 	and.w	r3, r3, #31
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <USB_EPStartXfer+0x1600>
 8008d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	029b      	lsls	r3, r3, #10
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	4313      	orrs	r3, r2
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d74:	801a      	strh	r2, [r3, #0]
 8008d76:	e05c      	b.n	8008e32 <USB_EPStartXfer+0x16e2>
 8008d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10c      	bne.n	8008d9a <USB_EPStartXfer+0x164a>
 8008d80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e04b      	b.n	8008e32 <USB_EPStartXfer+0x16e2>
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9e:	085b      	lsrs	r3, r3, #1
 8008da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d004      	beq.n	8008dba <USB_EPStartXfer+0x166a>
 8008db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008db4:	3301      	adds	r3, #1
 8008db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	029b      	lsls	r3, r3, #10
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dd4:	801a      	strh	r2, [r3, #0]
 8008dd6:	e02c      	b.n	8008e32 <USB_EPStartXfer+0x16e2>
 8008dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d124      	bne.n	8008e32 <USB_EPStartXfer+0x16e2>
 8008de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	461a      	mov	r2, r3
 8008dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008dfe:	4413      	add	r3, r2
 8008e00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	011a      	lsls	r2, r3, #4
 8008e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008e16:	4413      	add	r3, r2
 8008e18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008e2a:	801a      	strh	r2, [r3, #0]
 8008e2c:	e001      	b.n	8008e32 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e03a      	b.n	8008ea8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e60:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e64:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	441a      	add	r2, r3
 8008e8e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d020      	beq.n	8008f06 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eda:	81bb      	strh	r3, [r7, #12]
 8008edc:	89bb      	ldrh	r3, [r7, #12]
 8008ede:	f083 0310 	eor.w	r3, r3, #16
 8008ee2:	81bb      	strh	r3, [r7, #12]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	441a      	add	r2, r3
 8008eee:	89bb      	ldrh	r3, [r7, #12]
 8008ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	8013      	strh	r3, [r2, #0]
 8008f04:	e01f      	b.n	8008f46 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1c:	81fb      	strh	r3, [r7, #14]
 8008f1e:	89fb      	ldrh	r3, [r7, #14]
 8008f20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f24:	81fb      	strh	r3, [r7, #14]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	441a      	add	r2, r3
 8008f30:	89fb      	ldrh	r3, [r7, #14]
 8008f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr

08008f52 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b087      	sub	sp, #28
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	7b1b      	ldrb	r3, [r3, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f040 809d 	bne.w	80090a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	785b      	ldrb	r3, [r3, #1]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d04c      	beq.n	8009008 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	823b      	strh	r3, [r7, #16]
 8008f7c:	8a3b      	ldrh	r3, [r7, #16]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01b      	beq.n	8008fbe <USB_EPClearStall+0x6c>
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f9c:	81fb      	strh	r3, [r7, #14]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	441a      	add	r2, r3
 8008fa8:	89fb      	ldrh	r3, [r7, #14]
 8008faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	78db      	ldrb	r3, [r3, #3]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d06c      	beq.n	80090a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fdc:	81bb      	strh	r3, [r7, #12]
 8008fde:	89bb      	ldrh	r3, [r7, #12]
 8008fe0:	f083 0320 	eor.w	r3, r3, #32
 8008fe4:	81bb      	strh	r3, [r7, #12]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	441a      	add	r2, r3
 8008ff0:	89bb      	ldrh	r3, [r7, #12]
 8008ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009002:	b29b      	uxth	r3, r3
 8009004:	8013      	strh	r3, [r2, #0]
 8009006:	e04b      	b.n	80090a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	82fb      	strh	r3, [r7, #22]
 8009016:	8afb      	ldrh	r3, [r7, #22]
 8009018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d01b      	beq.n	8009058 <USB_EPClearStall+0x106>
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	b29b      	uxth	r3, r3
 800902e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009036:	82bb      	strh	r3, [r7, #20]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	441a      	add	r2, r3
 8009042:	8abb      	ldrh	r3, [r7, #20]
 8009044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800904c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009054:	b29b      	uxth	r3, r3
 8009056:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	b29b      	uxth	r3, r3
 8009066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800906a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800906e:	827b      	strh	r3, [r7, #18]
 8009070:	8a7b      	ldrh	r3, [r7, #18]
 8009072:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009076:	827b      	strh	r3, [r7, #18]
 8009078:	8a7b      	ldrh	r3, [r7, #18]
 800907a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800907e:	827b      	strh	r3, [r7, #18]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	441a      	add	r2, r3
 800908a:	8a7b      	ldrh	r3, [r7, #18]
 800908c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800909c:	b29b      	uxth	r3, r3
 800909e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc80      	pop	{r7}
 80090aa:	4770      	bx	lr

080090ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d103      	bne.n	80090c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2280      	movs	r2, #128	@ 0x80
 80090c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr

080090e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bc80      	pop	{r7}
 80090f8:	4770      	bx	lr

080090fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009108:	b29b      	uxth	r3, r3
 800910a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800910c:	68fb      	ldr	r3, [r7, #12]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	bc80      	pop	{r7}
 800912c:	4770      	bx	lr

0800912e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800912e:	b480      	push	{r7}
 8009130:	b08b      	sub	sp, #44	@ 0x2c
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	4611      	mov	r1, r2
 800913a:	461a      	mov	r2, r3
 800913c:	460b      	mov	r3, r1
 800913e:	80fb      	strh	r3, [r7, #6]
 8009140:	4613      	mov	r3, r2
 8009142:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009144:	88bb      	ldrh	r3, [r7, #4]
 8009146:	3301      	adds	r3, #1
 8009148:	085b      	lsrs	r3, r3, #1
 800914a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	005a      	lsls	r2, r3, #1
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009160:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
 8009166:	e01e      	b.n	80091a6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	3301      	adds	r3, #1
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	b21a      	sxth	r2, r3
 8009178:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800917c:	4313      	orrs	r3, r2
 800917e:	b21b      	sxth	r3, r3
 8009180:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	8a7a      	ldrh	r2, [r7, #18]
 8009186:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	3302      	adds	r3, #2
 800918c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	3302      	adds	r3, #2
 8009192:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	3301      	adds	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	3301      	adds	r3, #1
 800919e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a2:	3b01      	subs	r3, #1
 80091a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1dd      	bne.n	8009168 <USB_WritePMA+0x3a>
  }
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	372c      	adds	r7, #44	@ 0x2c
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bc80      	pop	{r7}
 80091b6:	4770      	bx	lr

080091b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b08b      	sub	sp, #44	@ 0x2c
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4611      	mov	r1, r2
 80091c4:	461a      	mov	r2, r3
 80091c6:	460b      	mov	r3, r1
 80091c8:	80fb      	strh	r3, [r7, #6]
 80091ca:	4613      	mov	r3, r2
 80091cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80091ce:	88bb      	ldrh	r3, [r7, #4]
 80091d0:	085b      	lsrs	r3, r3, #1
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	005a      	lsls	r2, r3, #1
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091ea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80091f0:	e01b      	b.n	800922a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	3302      	adds	r3, #2
 80091fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	b2da      	uxtb	r2, r3
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	3301      	adds	r3, #1
 800920c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	0a1b      	lsrs	r3, r3, #8
 8009212:	b2da      	uxtb	r2, r3
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	3301      	adds	r3, #1
 800921c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	3302      	adds	r3, #2
 8009222:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	3b01      	subs	r3, #1
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e0      	bne.n	80091f2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009230:	88bb      	ldrh	r3, [r7, #4]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	b29b      	uxth	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	701a      	strb	r2, [r3, #0]
  }
}
 800924c:	bf00      	nop
 800924e:	372c      	adds	r7, #44	@ 0x2c
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr

08009256 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	7c1b      	ldrb	r3, [r3, #16]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d115      	bne.n	800929a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800926e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009272:	2202      	movs	r2, #2
 8009274:	2181      	movs	r1, #129	@ 0x81
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 fec9 	bl	800b00e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009286:	2202      	movs	r2, #2
 8009288:	2101      	movs	r1, #1
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 febf 	bl	800b00e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009298:	e012      	b.n	80092c0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800929a:	2340      	movs	r3, #64	@ 0x40
 800929c:	2202      	movs	r2, #2
 800929e:	2181      	movs	r1, #129	@ 0x81
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 feb4 	bl	800b00e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092ac:	2340      	movs	r3, #64	@ 0x40
 80092ae:	2202      	movs	r2, #2
 80092b0:	2101      	movs	r1, #1
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 feab 	bl	800b00e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092c0:	2308      	movs	r3, #8
 80092c2:	2203      	movs	r2, #3
 80092c4:	2182      	movs	r1, #130	@ 0x82
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 fea1 	bl	800b00e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80092d2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80092d6:	f001 ffc1 	bl	800b25c <USBD_static_malloc>
 80092da:	4602      	mov	r2, r0
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d102      	bne.n	80092f2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80092ec:	2301      	movs	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]
 80092f0:	e026      	b.n	8009340 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7c1b      	ldrb	r3, [r3, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d109      	bne.n	8009330 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009322:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009326:	2101      	movs	r1, #1
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 ff60 	bl	800b1ee <USBD_LL_PrepareReceive>
 800932e:	e007      	b.n	8009340 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009336:	2340      	movs	r3, #64	@ 0x40
 8009338:	2101      	movs	r1, #1
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f001 ff57 	bl	800b1ee <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	460b      	mov	r3, r1
 8009354:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800935a:	2181      	movs	r1, #129	@ 0x81
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fe7c 	bl	800b05a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009368:	2101      	movs	r1, #1
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fe75 	bl	800b05a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009378:	2182      	movs	r1, #130	@ 0x82
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fe6d 	bl	800b05a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00e      	beq.n	80093ae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093a0:	4618      	mov	r0, r3
 80093a2:	f001 ff67 	bl	800b274 <USBD_static_free>
    pdev->pClassData = NULL;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d039      	beq.n	8009456 <USBD_CDC_Setup+0x9e>
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	d17f      	bne.n	80094e6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	88db      	ldrh	r3, [r3, #6]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d029      	beq.n	8009442 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	b25b      	sxtb	r3, r3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	da11      	bge.n	800941c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009404:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	88d2      	ldrh	r2, [r2, #6]
 800940a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800940c:	6939      	ldr	r1, [r7, #16]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	88db      	ldrh	r3, [r3, #6]
 8009412:	461a      	mov	r2, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 fa05 	bl	800a824 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800941a:	e06b      	b.n	80094f4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	785a      	ldrb	r2, [r3, #1]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	88db      	ldrh	r3, [r3, #6]
 800942a:	b2da      	uxtb	r2, r3
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009432:	6939      	ldr	r1, [r7, #16]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	88db      	ldrh	r3, [r3, #6]
 8009438:	461a      	mov	r2, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 fa20 	bl	800a880 <USBD_CtlPrepareRx>
      break;
 8009440:	e058      	b.n	80094f4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	7850      	ldrb	r0, [r2, #1]
 800944e:	2200      	movs	r2, #0
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	4798      	blx	r3
      break;
 8009454:	e04e      	b.n	80094f4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	785b      	ldrb	r3, [r3, #1]
 800945a:	2b0b      	cmp	r3, #11
 800945c:	d02e      	beq.n	80094bc <USBD_CDC_Setup+0x104>
 800945e:	2b0b      	cmp	r3, #11
 8009460:	dc38      	bgt.n	80094d4 <USBD_CDC_Setup+0x11c>
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <USBD_CDC_Setup+0xb4>
 8009466:	2b0a      	cmp	r3, #10
 8009468:	d014      	beq.n	8009494 <USBD_CDC_Setup+0xdc>
 800946a:	e033      	b.n	80094d4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009472:	2b03      	cmp	r3, #3
 8009474:	d107      	bne.n	8009486 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009476:	f107 030c 	add.w	r3, r7, #12
 800947a:	2202      	movs	r2, #2
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 f9d0 	bl	800a824 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009484:	e02e      	b.n	80094e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 f961 	bl	800a750 <USBD_CtlError>
            ret = USBD_FAIL;
 800948e:	2302      	movs	r3, #2
 8009490:	75fb      	strb	r3, [r7, #23]
          break;
 8009492:	e027      	b.n	80094e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800949a:	2b03      	cmp	r3, #3
 800949c:	d107      	bne.n	80094ae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800949e:	f107 030f 	add.w	r3, r7, #15
 80094a2:	2201      	movs	r2, #1
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 f9bc 	bl	800a824 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094ac:	e01a      	b.n	80094e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f001 f94d 	bl	800a750 <USBD_CtlError>
            ret = USBD_FAIL;
 80094b6:	2302      	movs	r3, #2
 80094b8:	75fb      	strb	r3, [r7, #23]
          break;
 80094ba:	e013      	b.n	80094e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d00d      	beq.n	80094e2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 f941 	bl	800a750 <USBD_CtlError>
            ret = USBD_FAIL;
 80094ce:	2302      	movs	r3, #2
 80094d0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80094d2:	e006      	b.n	80094e2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 f93a 	bl	800a750 <USBD_CtlError>
          ret = USBD_FAIL;
 80094dc:	2302      	movs	r3, #2
 80094de:	75fb      	strb	r3, [r7, #23]
          break;
 80094e0:	e000      	b.n	80094e4 <USBD_CDC_Setup+0x12c>
          break;
 80094e2:	bf00      	nop
      }
      break;
 80094e4:	e006      	b.n	80094f4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 f931 	bl	800a750 <USBD_CtlError>
      ret = USBD_FAIL;
 80094ee:	2302      	movs	r3, #2
 80094f0:	75fb      	strb	r3, [r7, #23]
      break;
 80094f2:	bf00      	nop
  }

  return ret;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009510:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009518:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009520:	2b00      	cmp	r3, #0
 8009522:	d03a      	beq.n	800959a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009524:	78fa      	ldrb	r2, [r7, #3]
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	331c      	adds	r3, #28
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d029      	beq.n	800958e <USBD_CDC_DataIn+0x90>
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	331c      	adds	r3, #28
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	78f9      	ldrb	r1, [r7, #3]
 800954e:	68b8      	ldr	r0, [r7, #8]
 8009550:	460b      	mov	r3, r1
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	440b      	add	r3, r1
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	4403      	add	r3, r0
 800955a:	3320      	adds	r3, #32
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009562:	fb01 f303 	mul.w	r3, r1, r3
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d110      	bne.n	800958e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	440b      	add	r3, r1
 800957a:	331c      	adds	r3, #28
 800957c:	2200      	movs	r2, #0
 800957e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009580:	78f9      	ldrb	r1, [r7, #3]
 8009582:	2300      	movs	r3, #0
 8009584:	2200      	movs	r2, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fe0e 	bl	800b1a8 <USBD_LL_Transmit>
 800958c:	e003      	b.n	8009596 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	e000      	b.n	800959c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800959a:	2302      	movs	r3, #2
  }
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fe39 	bl	800b234 <USBD_LL_GetRxDataSize>
 80095c2:	4602      	mov	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00d      	beq.n	80095f0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80095e8:	4611      	mov	r1, r2
 80095ea:	4798      	blx	r3

    return USBD_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	e000      	b.n	80095f2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80095f0:	2302      	movs	r3, #2
  }
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009608:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009610:	2b00      	cmp	r3, #0
 8009612:	d014      	beq.n	800963e <USBD_CDC_EP0_RxReady+0x44>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800961a:	2bff      	cmp	r3, #255	@ 0xff
 800961c:	d00f      	beq.n	800963e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800962c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009634:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	22ff      	movs	r2, #255	@ 0xff
 800963a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2243      	movs	r2, #67	@ 0x43
 8009654:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009656:	4b03      	ldr	r3, [pc, #12]	@ (8009664 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bc80      	pop	{r7}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20000094 	.word	0x20000094

08009668 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2243      	movs	r2, #67	@ 0x43
 8009674:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009676:	4b03      	ldr	r3, [pc, #12]	@ (8009684 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	bc80      	pop	{r7}
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20000050 	.word	0x20000050

08009688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2243      	movs	r2, #67	@ 0x43
 8009694:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009696:	4b03      	ldr	r3, [pc, #12]	@ (80096a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	bc80      	pop	{r7}
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	200000d8 	.word	0x200000d8

080096a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	220a      	movs	r2, #10
 80096b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80096b6:	4b03      	ldr	r3, [pc, #12]	@ (80096c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	bc80      	pop	{r7}
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	2000000c 	.word	0x2000000c

080096c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80096d2:	2302      	movs	r3, #2
 80096d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009708:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009712:	88fa      	ldrh	r2, [r7, #6]
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	371c      	adds	r7, #28
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr

08009726 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009736:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr

0800974c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800975a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009762:	2b00      	cmp	r3, #0
 8009764:	d01c      	beq.n	80097a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800976c:	2b00      	cmp	r3, #0
 800976e:	d115      	bne.n	800979c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2201      	movs	r2, #1
 8009774:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800978e:	b29b      	uxth	r3, r3
 8009790:	2181      	movs	r1, #129	@ 0x81
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 fd08 	bl	800b1a8 <USBD_LL_Transmit>

      return USBD_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	e002      	b.n	80097a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800979c:	2301      	movs	r3, #1
 800979e:	e000      	b.n	80097a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80097a0:	2302      	movs	r3, #2
  }
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b084      	sub	sp, #16
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d017      	beq.n	80097f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	7c1b      	ldrb	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d109      	bne.n	80097e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097d6:	2101      	movs	r1, #1
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 fd08 	bl	800b1ee <USBD_LL_PrepareReceive>
 80097de:	e007      	b.n	80097f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097e6:	2340      	movs	r3, #64	@ 0x40
 80097e8:	2101      	movs	r1, #1
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f001 fcff 	bl	800b1ee <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	e000      	b.n	80097f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80097f4:	2302      	movs	r3, #2
  }
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	60f8      	str	r0, [r7, #12]
 8009806:	60b9      	str	r1, [r7, #8]
 8009808:	4613      	mov	r3, r2
 800980a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009812:	2302      	movs	r3, #2
 8009814:	e01a      	b.n	800984c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800981c:	2b00      	cmp	r3, #0
 800981e:	d003      	beq.n	8009828 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	79fa      	ldrb	r2, [r7, #7]
 8009842:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f001 fb6d 	bl	800af24 <USBD_LL_Init>

  return USBD_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d006      	beq.n	8009876 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
 8009874:	e001      	b.n	800987a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009876:	2302      	movs	r3, #2
 8009878:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	bc80      	pop	{r7}
 8009884:	4770      	bx	lr

08009886 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 fba2 	bl	800afd8 <USBD_LL_Start>

  return USBD_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bc80      	pop	{r7}
 80098b0:	4770      	bx	lr

080098b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80098be:	2302      	movs	r3, #2
 80098c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00c      	beq.n	80098e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	78fa      	ldrb	r2, [r7, #3]
 80098d6:	4611      	mov	r1, r2
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	78fa      	ldrb	r2, [r7, #3]
 8009906:	4611      	mov	r1, r2
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fed8 	bl	800a6de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800993c:	461a      	mov	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800994a:	f003 031f 	and.w	r3, r3, #31
 800994e:	2b02      	cmp	r3, #2
 8009950:	d016      	beq.n	8009980 <USBD_LL_SetupStage+0x6a>
 8009952:	2b02      	cmp	r3, #2
 8009954:	d81c      	bhi.n	8009990 <USBD_LL_SetupStage+0x7a>
 8009956:	2b00      	cmp	r3, #0
 8009958:	d002      	beq.n	8009960 <USBD_LL_SetupStage+0x4a>
 800995a:	2b01      	cmp	r3, #1
 800995c:	d008      	beq.n	8009970 <USBD_LL_SetupStage+0x5a>
 800995e:	e017      	b.n	8009990 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f9cb 	bl	8009d04 <USBD_StdDevReq>
      break;
 800996e:	e01a      	b.n	80099a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fa2d 	bl	8009dd8 <USBD_StdItfReq>
      break;
 800997e:	e012      	b.n	80099a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa6d 	bl	8009e68 <USBD_StdEPReq>
      break;
 800998e:	e00a      	b.n	80099a6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009996:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800999a:	b2db      	uxtb	r3, r3
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 fb7a 	bl	800b098 <USBD_LL_StallEP>
      break;
 80099a4:	bf00      	nop
  }

  return USBD_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	460b      	mov	r3, r1
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d14b      	bne.n	8009a5c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80099ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d134      	bne.n	8009a40 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d919      	bls.n	8009a16 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	1ad2      	subs	r2, r2, r3
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d203      	bcs.n	8009a04 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	e002      	b.n	8009a0a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 ff54 	bl	800a8bc <USBD_CtlContinueRx>
 8009a14:	e038      	b.n	8009a88 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d105      	bne.n	8009a38 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 ff51 	bl	800a8e0 <USBD_CtlSendStatus>
 8009a3e:	e023      	b.n	8009a88 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d11e      	bne.n	8009a88 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009a52:	2100      	movs	r1, #0
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f001 fb1f 	bl	800b098 <USBD_LL_StallEP>
 8009a5a:	e015      	b.n	8009a88 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00d      	beq.n	8009a84 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d108      	bne.n	8009a84 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	7afa      	ldrb	r2, [r7, #11]
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	4798      	blx	r3
 8009a82:	e001      	b.n	8009a88 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a84:	2302      	movs	r3, #2
 8009a86:	e000      	b.n	8009a8a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b086      	sub	sp, #24
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	607a      	str	r2, [r7, #4]
 8009a9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009aa0:	7afb      	ldrb	r3, [r7, #11]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d17f      	bne.n	8009ba6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3314      	adds	r3, #20
 8009aaa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d15c      	bne.n	8009b70 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d915      	bls.n	8009aee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	1ad2      	subs	r2, r2, r3
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 febe 	bl	800a85c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f001 fb81 	bl	800b1ee <USBD_LL_PrepareReceive>
 8009aec:	e04e      	b.n	8009b8c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	6912      	ldr	r2, [r2, #16]
 8009af6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009afa:	fb01 f202 	mul.w	r2, r1, r2
 8009afe:	1a9b      	subs	r3, r3, r2
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d11c      	bne.n	8009b3e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d316      	bcc.n	8009b3e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d20f      	bcs.n	8009b3e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2100      	movs	r1, #0
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 fe9a 	bl	800a85c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b30:	2300      	movs	r3, #0
 8009b32:	2200      	movs	r2, #0
 8009b34:	2100      	movs	r1, #0
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f001 fb59 	bl	800b1ee <USBD_LL_PrepareReceive>
 8009b3c:	e026      	b.n	8009b8c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	d105      	bne.n	8009b60 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009b60:	2180      	movs	r1, #128	@ 0x80
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f001 fa98 	bl	800b098 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fecc 	bl	800a906 <USBD_CtlReceiveStatus>
 8009b6e:	e00d      	b.n	8009b8c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b76:	2b04      	cmp	r3, #4
 8009b78:	d004      	beq.n	8009b84 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009b84:	2180      	movs	r1, #128	@ 0x80
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f001 fa86 	bl	800b098 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d11d      	bne.n	8009bd2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff fe81 	bl	800989e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009ba4:	e015      	b.n	8009bd2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00d      	beq.n	8009bce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d108      	bne.n	8009bce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	7afa      	ldrb	r2, [r7, #11]
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	4798      	blx	r3
 8009bcc:	e001      	b.n	8009bd2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e000      	b.n	8009bd4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009be4:	2340      	movs	r3, #64	@ 0x40
 8009be6:	2200      	movs	r2, #0
 8009be8:	2100      	movs	r1, #0
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 fa0f 	bl	800b00e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2240      	movs	r2, #64	@ 0x40
 8009bfc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c00:	2340      	movs	r3, #64	@ 0x40
 8009c02:	2200      	movs	r2, #0
 8009c04:	2180      	movs	r1, #128	@ 0x80
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f001 fa01 	bl	800b00e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2240      	movs	r2, #64	@ 0x40
 8009c16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d009      	beq.n	8009c54 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6852      	ldr	r2, [r2, #4]
 8009c4c:	b2d2      	uxtb	r2, r2
 8009c4e:	4611      	mov	r1, r2
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
  }

  return USBD_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	78fa      	ldrb	r2, [r7, #3]
 8009c6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	370c      	adds	r7, #12
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bc80      	pop	{r7}
 8009c7a:	4770      	bx	lr

08009c7c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2204      	movs	r2, #4
 8009c94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc80      	pop	{r7}
 8009ca2:	4770      	bx	lr

08009ca4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d105      	bne.n	8009cc2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bc80      	pop	{r7}
 8009ccc:	4770      	bx	lr

08009cce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	d10b      	bne.n	8009cf8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d1a:	2b40      	cmp	r3, #64	@ 0x40
 8009d1c:	d005      	beq.n	8009d2a <USBD_StdDevReq+0x26>
 8009d1e:	2b40      	cmp	r3, #64	@ 0x40
 8009d20:	d84f      	bhi.n	8009dc2 <USBD_StdDevReq+0xbe>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d009      	beq.n	8009d3a <USBD_StdDevReq+0x36>
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	d14b      	bne.n	8009dc2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	4798      	blx	r3
      break;
 8009d38:	e048      	b.n	8009dcc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	785b      	ldrb	r3, [r3, #1]
 8009d3e:	2b09      	cmp	r3, #9
 8009d40:	d839      	bhi.n	8009db6 <USBD_StdDevReq+0xb2>
 8009d42:	a201      	add	r2, pc, #4	@ (adr r2, 8009d48 <USBD_StdDevReq+0x44>)
 8009d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d48:	08009d99 	.word	0x08009d99
 8009d4c:	08009dad 	.word	0x08009dad
 8009d50:	08009db7 	.word	0x08009db7
 8009d54:	08009da3 	.word	0x08009da3
 8009d58:	08009db7 	.word	0x08009db7
 8009d5c:	08009d7b 	.word	0x08009d7b
 8009d60:	08009d71 	.word	0x08009d71
 8009d64:	08009db7 	.word	0x08009db7
 8009d68:	08009d8f 	.word	0x08009d8f
 8009d6c:	08009d85 	.word	0x08009d85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f9dc 	bl	800a130 <USBD_GetDescriptor>
          break;
 8009d78:	e022      	b.n	8009dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fb3f 	bl	800a400 <USBD_SetAddress>
          break;
 8009d82:	e01d      	b.n	8009dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fb7e 	bl	800a488 <USBD_SetConfig>
          break;
 8009d8c:	e018      	b.n	8009dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fc07 	bl	800a5a4 <USBD_GetConfig>
          break;
 8009d96:	e013      	b.n	8009dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fc37 	bl	800a60e <USBD_GetStatus>
          break;
 8009da0:	e00e      	b.n	8009dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fc65 	bl	800a674 <USBD_SetFeature>
          break;
 8009daa:	e009      	b.n	8009dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fc74 	bl	800a69c <USBD_ClrFeature>
          break;
 8009db4:	e004      	b.n	8009dc0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fcc9 	bl	800a750 <USBD_CtlError>
          break;
 8009dbe:	bf00      	nop
      }
      break;
 8009dc0:	e004      	b.n	8009dcc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fcc3 	bl	800a750 <USBD_CtlError>
      break;
 8009dca:	bf00      	nop
  }

  return ret;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop

08009dd8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dee:	2b40      	cmp	r3, #64	@ 0x40
 8009df0:	d005      	beq.n	8009dfe <USBD_StdItfReq+0x26>
 8009df2:	2b40      	cmp	r3, #64	@ 0x40
 8009df4:	d82e      	bhi.n	8009e54 <USBD_StdItfReq+0x7c>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <USBD_StdItfReq+0x26>
 8009dfa:	2b20      	cmp	r3, #32
 8009dfc:	d12a      	bne.n	8009e54 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e04:	3b01      	subs	r3, #1
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d81d      	bhi.n	8009e46 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	889b      	ldrh	r3, [r3, #4]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d813      	bhi.n	8009e3c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	4798      	blx	r3
 8009e22:	4603      	mov	r3, r0
 8009e24:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	88db      	ldrh	r3, [r3, #6]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d110      	bne.n	8009e50 <USBD_StdItfReq+0x78>
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10d      	bne.n	8009e50 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fd53 	bl	800a8e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e3a:	e009      	b.n	8009e50 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fc86 	bl	800a750 <USBD_CtlError>
          break;
 8009e44:	e004      	b.n	8009e50 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fc81 	bl	800a750 <USBD_CtlError>
          break;
 8009e4e:	e000      	b.n	8009e52 <USBD_StdItfReq+0x7a>
          break;
 8009e50:	bf00      	nop
      }
      break;
 8009e52:	e004      	b.n	8009e5e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fc7a 	bl	800a750 <USBD_CtlError>
      break;
 8009e5c:	bf00      	nop
  }

  return USBD_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	889b      	ldrh	r3, [r3, #4]
 8009e7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e84:	2b40      	cmp	r3, #64	@ 0x40
 8009e86:	d007      	beq.n	8009e98 <USBD_StdEPReq+0x30>
 8009e88:	2b40      	cmp	r3, #64	@ 0x40
 8009e8a:	f200 8146 	bhi.w	800a11a <USBD_StdEPReq+0x2b2>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00a      	beq.n	8009ea8 <USBD_StdEPReq+0x40>
 8009e92:	2b20      	cmp	r3, #32
 8009e94:	f040 8141 	bne.w	800a11a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	4798      	blx	r3
      break;
 8009ea6:	e13d      	b.n	800a124 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	d10a      	bne.n	8009eca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	4798      	blx	r3
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	e12d      	b.n	800a126 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	785b      	ldrb	r3, [r3, #1]
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d007      	beq.n	8009ee2 <USBD_StdEPReq+0x7a>
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	f300 811b 	bgt.w	800a10e <USBD_StdEPReq+0x2a6>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d072      	beq.n	8009fc2 <USBD_StdEPReq+0x15a>
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d03a      	beq.n	8009f56 <USBD_StdEPReq+0xee>
 8009ee0:	e115      	b.n	800a10e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d002      	beq.n	8009ef2 <USBD_StdEPReq+0x8a>
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d015      	beq.n	8009f1c <USBD_StdEPReq+0xb4>
 8009ef0:	e02b      	b.n	8009f4a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00c      	beq.n	8009f12 <USBD_StdEPReq+0xaa>
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	2b80      	cmp	r3, #128	@ 0x80
 8009efc:	d009      	beq.n	8009f12 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 f8c8 	bl	800b098 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f08:	2180      	movs	r1, #128	@ 0x80
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 f8c4 	bl	800b098 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f10:	e020      	b.n	8009f54 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fc1b 	bl	800a750 <USBD_CtlError>
              break;
 8009f1a:	e01b      	b.n	8009f54 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	885b      	ldrh	r3, [r3, #2]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10e      	bne.n	8009f42 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00b      	beq.n	8009f42 <USBD_StdEPReq+0xda>
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	2b80      	cmp	r3, #128	@ 0x80
 8009f2e:	d008      	beq.n	8009f42 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	88db      	ldrh	r3, [r3, #6]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d104      	bne.n	8009f42 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f8ab 	bl	800b098 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fccc 	bl	800a8e0 <USBD_CtlSendStatus>

              break;
 8009f48:	e004      	b.n	8009f54 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fbff 	bl	800a750 <USBD_CtlError>
              break;
 8009f52:	bf00      	nop
          }
          break;
 8009f54:	e0e0      	b.n	800a118 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d002      	beq.n	8009f66 <USBD_StdEPReq+0xfe>
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d015      	beq.n	8009f90 <USBD_StdEPReq+0x128>
 8009f64:	e026      	b.n	8009fb4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00c      	beq.n	8009f86 <USBD_StdEPReq+0x11e>
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	2b80      	cmp	r3, #128	@ 0x80
 8009f70:	d009      	beq.n	8009f86 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f001 f88e 	bl	800b098 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f7c:	2180      	movs	r1, #128	@ 0x80
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 f88a 	bl	800b098 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f84:	e01c      	b.n	8009fc0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fbe1 	bl	800a750 <USBD_CtlError>
              break;
 8009f8e:	e017      	b.n	8009fc0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	885b      	ldrh	r3, [r3, #2]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d112      	bne.n	8009fbe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d004      	beq.n	8009fac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 f895 	bl	800b0d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fc97 	bl	800a8e0 <USBD_CtlSendStatus>
              }
              break;
 8009fb2:	e004      	b.n	8009fbe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fbca 	bl	800a750 <USBD_CtlError>
              break;
 8009fbc:	e000      	b.n	8009fc0 <USBD_StdEPReq+0x158>
              break;
 8009fbe:	bf00      	nop
          }
          break;
 8009fc0:	e0aa      	b.n	800a118 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d002      	beq.n	8009fd2 <USBD_StdEPReq+0x16a>
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d032      	beq.n	800a036 <USBD_StdEPReq+0x1ce>
 8009fd0:	e097      	b.n	800a102 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d007      	beq.n	8009fe8 <USBD_StdEPReq+0x180>
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	2b80      	cmp	r3, #128	@ 0x80
 8009fdc:	d004      	beq.n	8009fe8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fbb5 	bl	800a750 <USBD_CtlError>
                break;
 8009fe6:	e091      	b.n	800a10c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	da0b      	bge.n	800a008 <USBD_StdEPReq+0x1a0>
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	3310      	adds	r3, #16
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	4413      	add	r3, r2
 800a004:	3304      	adds	r3, #4
 800a006:	e00b      	b.n	800a020 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a008:	7bbb      	ldrb	r3, [r7, #14]
 800a00a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	4413      	add	r3, r2
 800a01e:	3304      	adds	r3, #4
 800a020:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2202      	movs	r2, #2
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fbf8 	bl	800a824 <USBD_CtlSendData>
              break;
 800a034:	e06a      	b.n	800a10c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	da11      	bge.n	800a062 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a03e:	7bbb      	ldrb	r3, [r7, #14]
 800a040:	f003 020f 	and.w	r2, r3, #15
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	440b      	add	r3, r1
 800a050:	3318      	adds	r3, #24
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d117      	bne.n	800a088 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fb78 	bl	800a750 <USBD_CtlError>
                  break;
 800a060:	e054      	b.n	800a10c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a062:	7bbb      	ldrb	r3, [r7, #14]
 800a064:	f003 020f 	and.w	r2, r3, #15
 800a068:	6879      	ldr	r1, [r7, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	440b      	add	r3, r1
 800a074:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d104      	bne.n	800a088 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb65 	bl	800a750 <USBD_CtlError>
                  break;
 800a086:	e041      	b.n	800a10c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	da0b      	bge.n	800a0a8 <USBD_StdEPReq+0x240>
 800a090:	7bbb      	ldrb	r3, [r7, #14]
 800a092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	3310      	adds	r3, #16
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	e00b      	b.n	800a0c0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	3304      	adds	r3, #4
 800a0c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <USBD_StdEPReq+0x266>
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	2b80      	cmp	r3, #128	@ 0x80
 800a0cc:	d103      	bne.n	800a0d6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e00e      	b.n	800a0f4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 f81a 	bl	800b114 <USBD_LL_IsStallEP>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	e002      	b.n	800a0f4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fb92 	bl	800a824 <USBD_CtlSendData>
              break;
 800a100:	e004      	b.n	800a10c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fb23 	bl	800a750 <USBD_CtlError>
              break;
 800a10a:	bf00      	nop
          }
          break;
 800a10c:	e004      	b.n	800a118 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fb1d 	bl	800a750 <USBD_CtlError>
          break;
 800a116:	bf00      	nop
      }
      break;
 800a118:	e004      	b.n	800a124 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fb17 	bl	800a750 <USBD_CtlError>
      break;
 800a122:	bf00      	nop
  }

  return ret;
 800a124:	7bfb      	ldrb	r3, [r7, #15]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
	...

0800a130 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	885b      	ldrh	r3, [r3, #2]
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3b01      	subs	r3, #1
 800a150:	2b06      	cmp	r3, #6
 800a152:	f200 8128 	bhi.w	800a3a6 <USBD_GetDescriptor+0x276>
 800a156:	a201      	add	r2, pc, #4	@ (adr r2, 800a15c <USBD_GetDescriptor+0x2c>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a179 	.word	0x0800a179
 800a160:	0800a191 	.word	0x0800a191
 800a164:	0800a1d1 	.word	0x0800a1d1
 800a168:	0800a3a7 	.word	0x0800a3a7
 800a16c:	0800a3a7 	.word	0x0800a3a7
 800a170:	0800a347 	.word	0x0800a347
 800a174:	0800a373 	.word	0x0800a373
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	7c12      	ldrb	r2, [r2, #16]
 800a184:	f107 0108 	add.w	r1, r7, #8
 800a188:	4610      	mov	r0, r2
 800a18a:	4798      	blx	r3
 800a18c:	60f8      	str	r0, [r7, #12]
      break;
 800a18e:	e112      	b.n	800a3b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7c1b      	ldrb	r3, [r3, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10d      	bne.n	800a1b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a0:	f107 0208 	add.w	r2, r7, #8
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	4798      	blx	r3
 800a1a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1b2:	e100      	b.n	800a3b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1bc:	f107 0208 	add.w	r2, r7, #8
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
 800a1c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	701a      	strb	r2, [r3, #0]
      break;
 800a1ce:	e0f2      	b.n	800a3b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	885b      	ldrh	r3, [r3, #2]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	f200 80ac 	bhi.w	800a334 <USBD_GetDescriptor+0x204>
 800a1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e4 <USBD_GetDescriptor+0xb4>)
 800a1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e2:	bf00      	nop
 800a1e4:	0800a1fd 	.word	0x0800a1fd
 800a1e8:	0800a231 	.word	0x0800a231
 800a1ec:	0800a265 	.word	0x0800a265
 800a1f0:	0800a299 	.word	0x0800a299
 800a1f4:	0800a2cd 	.word	0x0800a2cd
 800a1f8:	0800a301 	.word	0x0800a301
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	7c12      	ldrb	r2, [r2, #16]
 800a214:	f107 0108 	add.w	r1, r7, #8
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
 800a21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a21e:	e091      	b.n	800a344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fa94 	bl	800a750 <USBD_CtlError>
            err++;
 800a228:	7afb      	ldrb	r3, [r7, #11]
 800a22a:	3301      	adds	r3, #1
 800a22c:	72fb      	strb	r3, [r7, #11]
          break;
 800a22e:	e089      	b.n	800a344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	7c12      	ldrb	r2, [r2, #16]
 800a248:	f107 0108 	add.w	r1, r7, #8
 800a24c:	4610      	mov	r0, r2
 800a24e:	4798      	blx	r3
 800a250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a252:	e077      	b.n	800a344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa7a 	bl	800a750 <USBD_CtlError>
            err++;
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	3301      	adds	r3, #1
 800a260:	72fb      	strb	r3, [r7, #11]
          break;
 800a262:	e06f      	b.n	800a344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	7c12      	ldrb	r2, [r2, #16]
 800a27c:	f107 0108 	add.w	r1, r7, #8
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
 800a284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a286:	e05d      	b.n	800a344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa60 	bl	800a750 <USBD_CtlError>
            err++;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	3301      	adds	r3, #1
 800a294:	72fb      	strb	r3, [r7, #11]
          break;
 800a296:	e055      	b.n	800a344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	7c12      	ldrb	r2, [r2, #16]
 800a2b0:	f107 0108 	add.w	r1, r7, #8
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
 800a2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ba:	e043      	b.n	800a344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa46 	bl	800a750 <USBD_CtlError>
            err++;
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ca:	e03b      	b.n	800a344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	7c12      	ldrb	r2, [r2, #16]
 800a2e4:	f107 0108 	add.w	r1, r7, #8
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ee:	e029      	b.n	800a344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fa2c 	bl	800a750 <USBD_CtlError>
            err++;
 800a2f8:	7afb      	ldrb	r3, [r7, #11]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2fe:	e021      	b.n	800a344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00b      	beq.n	800a324 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	7c12      	ldrb	r2, [r2, #16]
 800a318:	f107 0108 	add.w	r1, r7, #8
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
 800a320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a322:	e00f      	b.n	800a344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa12 	bl	800a750 <USBD_CtlError>
            err++;
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	3301      	adds	r3, #1
 800a330:	72fb      	strb	r3, [r7, #11]
          break;
 800a332:	e007      	b.n	800a344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa0a 	bl	800a750 <USBD_CtlError>
          err++;
 800a33c:	7afb      	ldrb	r3, [r7, #11]
 800a33e:	3301      	adds	r3, #1
 800a340:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a342:	e038      	b.n	800a3b6 <USBD_GetDescriptor+0x286>
 800a344:	e037      	b.n	800a3b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	7c1b      	ldrb	r3, [r3, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d109      	bne.n	800a362 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a356:	f107 0208 	add.w	r2, r7, #8
 800a35a:	4610      	mov	r0, r2
 800a35c:	4798      	blx	r3
 800a35e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a360:	e029      	b.n	800a3b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f9f3 	bl	800a750 <USBD_CtlError>
        err++;
 800a36a:	7afb      	ldrb	r3, [r7, #11]
 800a36c:	3301      	adds	r3, #1
 800a36e:	72fb      	strb	r3, [r7, #11]
      break;
 800a370:	e021      	b.n	800a3b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	7c1b      	ldrb	r3, [r3, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10d      	bne.n	800a396 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a382:	f107 0208 	add.w	r2, r7, #8
 800a386:	4610      	mov	r0, r2
 800a388:	4798      	blx	r3
 800a38a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3301      	adds	r3, #1
 800a390:	2207      	movs	r2, #7
 800a392:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a394:	e00f      	b.n	800a3b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f9d9 	bl	800a750 <USBD_CtlError>
        err++;
 800a39e:	7afb      	ldrb	r3, [r7, #11]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3a4:	e007      	b.n	800a3b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f9d1 	bl	800a750 <USBD_CtlError>
      err++;
 800a3ae:	7afb      	ldrb	r3, [r7, #11]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3b4:	bf00      	nop
  }

  if (err != 0U)
 800a3b6:	7afb      	ldrb	r3, [r7, #11]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d11c      	bne.n	800a3f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a3bc:	893b      	ldrh	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d011      	beq.n	800a3e6 <USBD_GetDescriptor+0x2b6>
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	88db      	ldrh	r3, [r3, #6]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00d      	beq.n	800a3e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	88da      	ldrh	r2, [r3, #6]
 800a3ce:	893b      	ldrh	r3, [r7, #8]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	bf28      	it	cs
 800a3d4:	4613      	movcs	r3, r2
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3da:	893b      	ldrh	r3, [r7, #8]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68f9      	ldr	r1, [r7, #12]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fa1f 	bl	800a824 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	88db      	ldrh	r3, [r3, #6]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fa76 	bl	800a8e0 <USBD_CtlSendStatus>
 800a3f4:	e000      	b.n	800a3f8 <USBD_GetDescriptor+0x2c8>
    return;
 800a3f6:	bf00      	nop
    }
  }
}
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop

0800a400 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	889b      	ldrh	r3, [r3, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d130      	bne.n	800a474 <USBD_SetAddress+0x74>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	88db      	ldrh	r3, [r3, #6]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d12c      	bne.n	800a474 <USBD_SetAddress+0x74>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	885b      	ldrh	r3, [r3, #2]
 800a41e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a420:	d828      	bhi.n	800a474 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	885b      	ldrh	r3, [r3, #2]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a42c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a434:	2b03      	cmp	r3, #3
 800a436:	d104      	bne.n	800a442 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f988 	bl	800a750 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a440:	e01d      	b.n	800a47e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7bfa      	ldrb	r2, [r7, #15]
 800a446:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fe8b 	bl	800b16a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fa43 	bl	800a8e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a468:	e009      	b.n	800a47e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a472:	e004      	b.n	800a47e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f96a 	bl	800a750 <USBD_CtlError>
  }
}
 800a47c:	bf00      	nop
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	885b      	ldrh	r3, [r3, #2]
 800a496:	b2da      	uxtb	r2, r3
 800a498:	4b41      	ldr	r3, [pc, #260]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a49a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a49c:	4b40      	ldr	r3, [pc, #256]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d904      	bls.n	800a4ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a4a4:	6839      	ldr	r1, [r7, #0]
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f952 	bl	800a750 <USBD_CtlError>
 800a4ac:	e075      	b.n	800a59a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d002      	beq.n	800a4be <USBD_SetConfig+0x36>
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d023      	beq.n	800a504 <USBD_SetConfig+0x7c>
 800a4bc:	e062      	b.n	800a584 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a4be:	4b38      	ldr	r3, [pc, #224]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d01a      	beq.n	800a4fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a4c6:	4b36      	ldr	r3, [pc, #216]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a4d8:	4b31      	ldr	r3, [pc, #196]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff f9e7 	bl	80098b2 <USBD_SetClassConfig>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d104      	bne.n	800a4f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f92f 	bl	800a750 <USBD_CtlError>
            return;
 800a4f2:	e052      	b.n	800a59a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f9f3 	bl	800a8e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a4fa:	e04e      	b.n	800a59a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f9ef 	bl	800a8e0 <USBD_CtlSendStatus>
        break;
 800a502:	e04a      	b.n	800a59a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a504:	4b26      	ldr	r3, [pc, #152]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d112      	bne.n	800a532 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a514:	4b22      	ldr	r3, [pc, #136]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	461a      	mov	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a51e:	4b20      	ldr	r3, [pc, #128]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff f9e3 	bl	80098f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f9d8 	bl	800a8e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a530:	e033      	b.n	800a59a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a532:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d01d      	beq.n	800a57c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	b2db      	uxtb	r3, r3
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7ff f9d1 	bl	80098f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a54e:	4b14      	ldr	r3, [pc, #80]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a558:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff f9a7 	bl	80098b2 <USBD_SetClassConfig>
 800a564:	4603      	mov	r3, r0
 800a566:	2b02      	cmp	r3, #2
 800a568:	d104      	bne.n	800a574 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f8ef 	bl	800a750 <USBD_CtlError>
            return;
 800a572:	e012      	b.n	800a59a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f9b3 	bl	800a8e0 <USBD_CtlSendStatus>
        break;
 800a57a:	e00e      	b.n	800a59a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f9af 	bl	800a8e0 <USBD_CtlSendStatus>
        break;
 800a582:	e00a      	b.n	800a59a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f8e2 	bl	800a750 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a58c:	4b04      	ldr	r3, [pc, #16]	@ (800a5a0 <USBD_SetConfig+0x118>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	4619      	mov	r1, r3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff f9ac 	bl	80098f0 <USBD_ClrClassConfig>
        break;
 800a598:	bf00      	nop
    }
  }
}
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	200005d4 	.word	0x200005d4

0800a5a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	88db      	ldrh	r3, [r3, #6]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d004      	beq.n	800a5c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f8c9 	bl	800a750 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5be:	e022      	b.n	800a606 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	dc02      	bgt.n	800a5d0 <USBD_GetConfig+0x2c>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dc03      	bgt.n	800a5d6 <USBD_GetConfig+0x32>
 800a5ce:	e015      	b.n	800a5fc <USBD_GetConfig+0x58>
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d00b      	beq.n	800a5ec <USBD_GetConfig+0x48>
 800a5d4:	e012      	b.n	800a5fc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f91d 	bl	800a824 <USBD_CtlSendData>
        break;
 800a5ea:	e00c      	b.n	800a606 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f915 	bl	800a824 <USBD_CtlSendData>
        break;
 800a5fa:	e004      	b.n	800a606 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f8a6 	bl	800a750 <USBD_CtlError>
        break;
 800a604:	bf00      	nop
}
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b082      	sub	sp, #8
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a61e:	3b01      	subs	r3, #1
 800a620:	2b02      	cmp	r3, #2
 800a622:	d81e      	bhi.n	800a662 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	88db      	ldrh	r3, [r3, #6]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d004      	beq.n	800a636 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f88e 	bl	800a750 <USBD_CtlError>
        break;
 800a634:	e01a      	b.n	800a66c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a642:	2b00      	cmp	r3, #0
 800a644:	d005      	beq.n	800a652 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f043 0202 	orr.w	r2, r3, #2
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	330c      	adds	r3, #12
 800a656:	2202      	movs	r2, #2
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f8e2 	bl	800a824 <USBD_CtlSendData>
      break;
 800a660:	e004      	b.n	800a66c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f873 	bl	800a750 <USBD_CtlError>
      break;
 800a66a:	bf00      	nop
  }
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	885b      	ldrh	r3, [r3, #2]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d106      	bne.n	800a694 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f926 	bl	800a8e0 <USBD_CtlSendStatus>
  }
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d80b      	bhi.n	800a6ca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	885b      	ldrh	r3, [r3, #2]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d10c      	bne.n	800a6d4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f90c 	bl	800a8e0 <USBD_CtlSendStatus>
      }
      break;
 800a6c8:	e004      	b.n	800a6d4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f83f 	bl	800a750 <USBD_CtlError>
      break;
 800a6d2:	e000      	b.n	800a6d6 <USBD_ClrFeature+0x3a>
      break;
 800a6d4:	bf00      	nop
  }
}
 800a6d6:	bf00      	nop
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	785a      	ldrb	r2, [r3, #1]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	3303      	adds	r3, #3
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	021b      	lsls	r3, r3, #8
 800a708:	b29b      	uxth	r3, r3
 800a70a:	4413      	add	r3, r2
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	3304      	adds	r3, #4
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	461a      	mov	r2, r3
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	3305      	adds	r3, #5
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	021b      	lsls	r3, r3, #8
 800a722:	b29b      	uxth	r3, r3
 800a724:	4413      	add	r3, r2
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	3306      	adds	r3, #6
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	3307      	adds	r3, #7
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	021b      	lsls	r3, r3, #8
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	4413      	add	r3, r2
 800a740:	b29a      	uxth	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	80da      	strh	r2, [r3, #6]

}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bc80      	pop	{r7}
 800a74e:	4770      	bx	lr

0800a750 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a75a:	2180      	movs	r1, #128	@ 0x80
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fc9b 	bl	800b098 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a762:	2100      	movs	r1, #0
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fc97 	bl	800b098 <USBD_LL_StallEP>
}
 800a76a:	bf00      	nop
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b086      	sub	sp, #24
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d032      	beq.n	800a7ee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f834 	bl	800a7f6 <USBD_GetLen>
 800a78e:	4603      	mov	r3, r0
 800a790:	3301      	adds	r3, #1
 800a792:	b29b      	uxth	r3, r3
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	b29a      	uxth	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	75fa      	strb	r2, [r7, #23]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	7812      	ldrb	r2, [r2, #0]
 800a7ac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	75fa      	strb	r2, [r7, #23]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	2203      	movs	r2, #3
 800a7bc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a7be:	e012      	b.n	800a7e6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	60fa      	str	r2, [r7, #12]
 800a7c6:	7dfa      	ldrb	r2, [r7, #23]
 800a7c8:	1c51      	adds	r1, r2, #1
 800a7ca:	75f9      	strb	r1, [r7, #23]
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a7d6:	7dfb      	ldrb	r3, [r7, #23]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	75fa      	strb	r2, [r7, #23]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e8      	bne.n	800a7c0 <USBD_GetString+0x4e>
    }
  }
}
 800a7ee:	bf00      	nop
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a802:	e005      	b.n	800a810 <USBD_GetLen+0x1a>
  {
    len++;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	3301      	adds	r3, #1
 800a808:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3301      	adds	r3, #1
 800a80e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1f5      	bne.n	800a804 <USBD_GetLen+0xe>
  }

  return len;
 800a818:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	bc80      	pop	{r7}
 800a822:	4770      	bx	lr

0800a824 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2202      	movs	r2, #2
 800a836:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a83a:	88fa      	ldrh	r2, [r7, #6]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a840:	88fa      	ldrh	r2, [r7, #6]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	2100      	movs	r1, #0
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 fcab 	bl	800b1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	4613      	mov	r3, r2
 800a868:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	2100      	movs	r1, #0
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 fc99 	bl	800b1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	4613      	mov	r3, r2
 800a88c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2203      	movs	r2, #3
 800a892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a896:	88fa      	ldrh	r2, [r7, #6]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a89e:	88fa      	ldrh	r2, [r7, #6]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8a6:	88fb      	ldrh	r3, [r7, #6]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 fc9e 	bl	800b1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8ca:	88fb      	ldrh	r3, [r7, #6]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 fc8c 	bl	800b1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2204      	movs	r2, #4
 800a8ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fc56 	bl	800b1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2205      	movs	r2, #5
 800a912:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a916:	2300      	movs	r3, #0
 800a918:	2200      	movs	r2, #0
 800a91a:	2100      	movs	r1, #0
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fc66 	bl	800b1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a930:	2200      	movs	r2, #0
 800a932:	4912      	ldr	r1, [pc, #72]	@ (800a97c <MX_USB_DEVICE_Init+0x50>)
 800a934:	4812      	ldr	r0, [pc, #72]	@ (800a980 <MX_USB_DEVICE_Init+0x54>)
 800a936:	f7fe ff62 	bl	80097fe <USBD_Init>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a940:	f7f6 feac 	bl	800169c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a944:	490f      	ldr	r1, [pc, #60]	@ (800a984 <MX_USB_DEVICE_Init+0x58>)
 800a946:	480e      	ldr	r0, [pc, #56]	@ (800a980 <MX_USB_DEVICE_Init+0x54>)
 800a948:	f7fe ff84 	bl	8009854 <USBD_RegisterClass>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a952:	f7f6 fea3 	bl	800169c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a956:	490c      	ldr	r1, [pc, #48]	@ (800a988 <MX_USB_DEVICE_Init+0x5c>)
 800a958:	4809      	ldr	r0, [pc, #36]	@ (800a980 <MX_USB_DEVICE_Init+0x54>)
 800a95a:	f7fe feb5 	bl	80096c8 <USBD_CDC_RegisterInterface>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a964:	f7f6 fe9a 	bl	800169c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a968:	4805      	ldr	r0, [pc, #20]	@ (800a980 <MX_USB_DEVICE_Init+0x54>)
 800a96a:	f7fe ff8c 	bl	8009886 <USBD_Start>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a974:	f7f6 fe92 	bl	800169c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a978:	bf00      	nop
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	2000012c 	.word	0x2000012c
 800a980:	200005d8 	.word	0x200005d8
 800a984:	20000018 	.word	0x20000018
 800a988:	2000011c 	.word	0x2000011c

0800a98c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a990:	2200      	movs	r2, #0
 800a992:	4905      	ldr	r1, [pc, #20]	@ (800a9a8 <CDC_Init_FS+0x1c>)
 800a994:	4805      	ldr	r0, [pc, #20]	@ (800a9ac <CDC_Init_FS+0x20>)
 800a996:	f7fe fead 	bl	80096f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a99a:	4905      	ldr	r1, [pc, #20]	@ (800a9b0 <CDC_Init_FS+0x24>)
 800a99c:	4803      	ldr	r0, [pc, #12]	@ (800a9ac <CDC_Init_FS+0x20>)
 800a99e:	f7fe fec2 	bl	8009726 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20000c9c 	.word	0x20000c9c
 800a9ac:	200005d8 	.word	0x200005d8
 800a9b0:	2000089c 	.word	0x2000089c

0800a9b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	6039      	str	r1, [r7, #0]
 800a9ce:	71fb      	strb	r3, [r7, #7]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	2b23      	cmp	r3, #35	@ 0x23
 800a9d8:	d84a      	bhi.n	800aa70 <CDC_Control_FS+0xac>
 800a9da:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e0 <CDC_Control_FS+0x1c>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800aa71 	.word	0x0800aa71
 800a9e4:	0800aa71 	.word	0x0800aa71
 800a9e8:	0800aa71 	.word	0x0800aa71
 800a9ec:	0800aa71 	.word	0x0800aa71
 800a9f0:	0800aa71 	.word	0x0800aa71
 800a9f4:	0800aa71 	.word	0x0800aa71
 800a9f8:	0800aa71 	.word	0x0800aa71
 800a9fc:	0800aa71 	.word	0x0800aa71
 800aa00:	0800aa71 	.word	0x0800aa71
 800aa04:	0800aa71 	.word	0x0800aa71
 800aa08:	0800aa71 	.word	0x0800aa71
 800aa0c:	0800aa71 	.word	0x0800aa71
 800aa10:	0800aa71 	.word	0x0800aa71
 800aa14:	0800aa71 	.word	0x0800aa71
 800aa18:	0800aa71 	.word	0x0800aa71
 800aa1c:	0800aa71 	.word	0x0800aa71
 800aa20:	0800aa71 	.word	0x0800aa71
 800aa24:	0800aa71 	.word	0x0800aa71
 800aa28:	0800aa71 	.word	0x0800aa71
 800aa2c:	0800aa71 	.word	0x0800aa71
 800aa30:	0800aa71 	.word	0x0800aa71
 800aa34:	0800aa71 	.word	0x0800aa71
 800aa38:	0800aa71 	.word	0x0800aa71
 800aa3c:	0800aa71 	.word	0x0800aa71
 800aa40:	0800aa71 	.word	0x0800aa71
 800aa44:	0800aa71 	.word	0x0800aa71
 800aa48:	0800aa71 	.word	0x0800aa71
 800aa4c:	0800aa71 	.word	0x0800aa71
 800aa50:	0800aa71 	.word	0x0800aa71
 800aa54:	0800aa71 	.word	0x0800aa71
 800aa58:	0800aa71 	.word	0x0800aa71
 800aa5c:	0800aa71 	.word	0x0800aa71
 800aa60:	0800aa71 	.word	0x0800aa71
 800aa64:	0800aa71 	.word	0x0800aa71
 800aa68:	0800aa71 	.word	0x0800aa71
 800aa6c:	0800aa71 	.word	0x0800aa71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa70:	bf00      	nop
  }

  return (USBD_OK);
 800aa72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bc80      	pop	{r7}
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop

0800aa80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	480a      	ldr	r0, [pc, #40]	@ (800aab8 <CDC_Receive_FS+0x38>)
 800aa8e:	f7fe fe4a 	bl	8009726 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa92:	4809      	ldr	r0, [pc, #36]	@ (800aab8 <CDC_Receive_FS+0x38>)
 800aa94:	f7fe fe89 	bl	80097aa <USBD_CDC_ReceivePacket>
  data_recieved += strlen(UserRxBufferFS);
 800aa98:	4808      	ldr	r0, [pc, #32]	@ (800aabc <CDC_Receive_FS+0x3c>)
 800aa9a:	f7f5 fb59 	bl	8000150 <strlen>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	4b07      	ldr	r3, [pc, #28]	@ (800aac0 <CDC_Receive_FS+0x40>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	4b05      	ldr	r3, [pc, #20]	@ (800aac0 <CDC_Receive_FS+0x40>)
 800aaac:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800aaae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	200005d8 	.word	0x200005d8
 800aabc:	2000089c 	.word	0x2000089c
 800aac0:	2000109c 	.word	0x2000109c

0800aac4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aad4:	4b0d      	ldr	r3, [pc, #52]	@ (800ab0c <CDC_Transmit_FS+0x48>)
 800aad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aada:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e00b      	b.n	800ab02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aaea:	887b      	ldrh	r3, [r7, #2]
 800aaec:	461a      	mov	r2, r3
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4806      	ldr	r0, [pc, #24]	@ (800ab0c <CDC_Transmit_FS+0x48>)
 800aaf2:	f7fe fdff 	bl	80096f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aaf6:	4805      	ldr	r0, [pc, #20]	@ (800ab0c <CDC_Transmit_FS+0x48>)
 800aaf8:	f7fe fe28 	bl	800974c <USBD_CDC_TransmitPacket>
 800aafc:	4603      	mov	r3, r0
 800aafe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	200005d8 	.word	0x200005d8

0800ab10 <CDC_data_recieved>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_data_recieved()
{
 800ab10:	b480      	push	{r7}
 800ab12:	af00      	add	r7, sp, #0
	return data_recieved;
 800ab14:	4b02      	ldr	r3, [pc, #8]	@ (800ab20 <CDC_data_recieved+0x10>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bc80      	pop	{r7}
 800ab1e:	4770      	bx	lr
 800ab20:	2000109c 	.word	0x2000109c

0800ab24 <CDC_Receive_data>:

uint8_t CDC_Receive_data(uint8_t* buf, size_t size)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
	if (data_recieved + 1 <= size) size = data_recieved + 1;
 800ab2e:	4b13      	ldr	r3, [pc, #76]	@ (800ab7c <CDC_Receive_data+0x58>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	461a      	mov	r2, r3
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d303      	bcc.n	800ab44 <CDC_Receive_data+0x20>
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab7c <CDC_Receive_data+0x58>)
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	3301      	adds	r3, #1
 800ab42:	603b      	str	r3, [r7, #0]
	memset(buf, '\0', size);
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 fb06 	bl	800c15a <memset>
	memcpy(buf, UserRxBufferFS, size);
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	490b      	ldr	r1, [pc, #44]	@ (800ab80 <CDC_Receive_data+0x5c>)
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 fb8f 	bl	800c276 <memcpy>
	memset(UserRxBufferFS, '\0', data_recieved);
 800ab58:	4b08      	ldr	r3, [pc, #32]	@ (800ab7c <CDC_Receive_data+0x58>)
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	2100      	movs	r1, #0
 800ab60:	4807      	ldr	r0, [pc, #28]	@ (800ab80 <CDC_Receive_data+0x5c>)
 800ab62:	f001 fafa 	bl	800c15a <memset>
	data_recieved = 0;
 800ab66:	4b05      	ldr	r3, [pc, #20]	@ (800ab7c <CDC_Receive_data+0x58>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
	return size - 1;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	3b01      	subs	r3, #1
 800ab72:	b2db      	uxtb	r3, r3
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	2000109c 	.word	0x2000109c
 800ab80:	2000089c 	.word	0x2000089c

0800ab84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	6039      	str	r1, [r7, #0]
 800ab8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2212      	movs	r2, #18
 800ab94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab96:	4b03      	ldr	r3, [pc, #12]	@ (800aba4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bc80      	pop	{r7}
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20000148 	.word	0x20000148

0800aba8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	6039      	str	r1, [r7, #0]
 800abb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2204      	movs	r2, #4
 800abb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abba:	4b03      	ldr	r3, [pc, #12]	@ (800abc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bc80      	pop	{r7}
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	2000015c 	.word	0x2000015c

0800abcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	6039      	str	r1, [r7, #0]
 800abd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d105      	bne.n	800abea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	4907      	ldr	r1, [pc, #28]	@ (800ac00 <USBD_FS_ProductStrDescriptor+0x34>)
 800abe2:	4808      	ldr	r0, [pc, #32]	@ (800ac04 <USBD_FS_ProductStrDescriptor+0x38>)
 800abe4:	f7ff fdc5 	bl	800a772 <USBD_GetString>
 800abe8:	e004      	b.n	800abf4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	4904      	ldr	r1, [pc, #16]	@ (800ac00 <USBD_FS_ProductStrDescriptor+0x34>)
 800abee:	4805      	ldr	r0, [pc, #20]	@ (800ac04 <USBD_FS_ProductStrDescriptor+0x38>)
 800abf0:	f7ff fdbf 	bl	800a772 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abf4:	4b02      	ldr	r3, [pc, #8]	@ (800ac00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	200010a0 	.word	0x200010a0
 800ac04:	0800eea0 	.word	0x0800eea0

0800ac08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	6039      	str	r1, [r7, #0]
 800ac12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	4904      	ldr	r1, [pc, #16]	@ (800ac28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac18:	4804      	ldr	r0, [pc, #16]	@ (800ac2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac1a:	f7ff fdaa 	bl	800a772 <USBD_GetString>
  return USBD_StrDesc;
 800ac1e:	4b02      	ldr	r3, [pc, #8]	@ (800ac28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	200010a0 	.word	0x200010a0
 800ac2c:	0800eeb8 	.word	0x0800eeb8

0800ac30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	6039      	str	r1, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	221a      	movs	r2, #26
 800ac40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac42:	f000 f843 	bl	800accc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac46:	4b02      	ldr	r3, [pc, #8]	@ (800ac50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000160 	.word	0x20000160

0800ac54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	6039      	str	r1, [r7, #0]
 800ac5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d105      	bne.n	800ac72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	4907      	ldr	r1, [pc, #28]	@ (800ac88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac6a:	4808      	ldr	r0, [pc, #32]	@ (800ac8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac6c:	f7ff fd81 	bl	800a772 <USBD_GetString>
 800ac70:	e004      	b.n	800ac7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	4904      	ldr	r1, [pc, #16]	@ (800ac88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac76:	4805      	ldr	r0, [pc, #20]	@ (800ac8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac78:	f7ff fd7b 	bl	800a772 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac7c:	4b02      	ldr	r3, [pc, #8]	@ (800ac88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	200010a0 	.word	0x200010a0
 800ac8c:	0800eecc 	.word	0x0800eecc

0800ac90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	6039      	str	r1, [r7, #0]
 800ac9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d105      	bne.n	800acae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	4907      	ldr	r1, [pc, #28]	@ (800acc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aca6:	4808      	ldr	r0, [pc, #32]	@ (800acc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aca8:	f7ff fd63 	bl	800a772 <USBD_GetString>
 800acac:	e004      	b.n	800acb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	4904      	ldr	r1, [pc, #16]	@ (800acc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acb2:	4805      	ldr	r0, [pc, #20]	@ (800acc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800acb4:	f7ff fd5d 	bl	800a772 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acb8:	4b02      	ldr	r3, [pc, #8]	@ (800acc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	200010a0 	.word	0x200010a0
 800acc8:	0800eed8 	.word	0x0800eed8

0800accc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acd2:	4b0f      	ldr	r3, [pc, #60]	@ (800ad10 <Get_SerialNum+0x44>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800acd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ad14 <Get_SerialNum+0x48>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acde:	4b0e      	ldr	r3, [pc, #56]	@ (800ad18 <Get_SerialNum+0x4c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4413      	add	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d009      	beq.n	800ad06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acf2:	2208      	movs	r2, #8
 800acf4:	4909      	ldr	r1, [pc, #36]	@ (800ad1c <Get_SerialNum+0x50>)
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f000 f814 	bl	800ad24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acfc:	2204      	movs	r2, #4
 800acfe:	4908      	ldr	r1, [pc, #32]	@ (800ad20 <Get_SerialNum+0x54>)
 800ad00:	68b8      	ldr	r0, [r7, #8]
 800ad02:	f000 f80f 	bl	800ad24 <IntToUnicode>
  }
}
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	1ffff7e8 	.word	0x1ffff7e8
 800ad14:	1ffff7ec 	.word	0x1ffff7ec
 800ad18:	1ffff7f0 	.word	0x1ffff7f0
 800ad1c:	20000162 	.word	0x20000162
 800ad20:	20000172 	.word	0x20000172

0800ad24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad36:	2300      	movs	r3, #0
 800ad38:	75fb      	strb	r3, [r7, #23]
 800ad3a:	e027      	b.n	800ad8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	0f1b      	lsrs	r3, r3, #28
 800ad40:	2b09      	cmp	r3, #9
 800ad42:	d80b      	bhi.n	800ad5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	0f1b      	lsrs	r3, r3, #28
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	005b      	lsls	r3, r3, #1
 800ad4e:	4619      	mov	r1, r3
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	440b      	add	r3, r1
 800ad54:	3230      	adds	r2, #48	@ 0x30
 800ad56:	b2d2      	uxtb	r2, r2
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	e00a      	b.n	800ad72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	0f1b      	lsrs	r3, r3, #28
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	4619      	mov	r1, r3
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	440b      	add	r3, r1
 800ad6c:	3237      	adds	r2, #55	@ 0x37
 800ad6e:	b2d2      	uxtb	r2, r2
 800ad70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	011b      	lsls	r3, r3, #4
 800ad76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	4413      	add	r3, r2
 800ad82:	2200      	movs	r2, #0
 800ad84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	75fb      	strb	r3, [r7, #23]
 800ad8c:	7dfa      	ldrb	r2, [r7, #23]
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d3d3      	bcc.n	800ad3c <IntToUnicode+0x18>
  }
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bc80      	pop	{r7}
 800ad9e:	4770      	bx	lr

0800ada0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a0d      	ldr	r2, [pc, #52]	@ (800ade4 <HAL_PCD_MspInit+0x44>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d113      	bne.n	800adda <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800adb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ade8 <HAL_PCD_MspInit+0x48>)
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ade8 <HAL_PCD_MspInit+0x48>)
 800adb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800adbc:	61d3      	str	r3, [r2, #28]
 800adbe:	4b0a      	ldr	r3, [pc, #40]	@ (800ade8 <HAL_PCD_MspInit+0x48>)
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	2014      	movs	r0, #20
 800add0:	f7f8 f985 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800add4:	2014      	movs	r0, #20
 800add6:	f7f8 f99e 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800adda:	bf00      	nop
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	40005c00 	.word	0x40005c00
 800ade8:	40021000 	.word	0x40021000

0800adec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f7fe fd87 	bl	8009916 <USBD_LL_SetupStage>
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ae22:	78fa      	ldrb	r2, [r7, #3]
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	440b      	add	r3, r1
 800ae30:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	78fb      	ldrb	r3, [r7, #3]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	f7fe fdb9 	bl	80099b0 <USBD_LL_DataOutStage>
}
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b082      	sub	sp, #8
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ae58:	78fa      	ldrb	r2, [r7, #3]
 800ae5a:	6879      	ldr	r1, [r7, #4]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	00db      	lsls	r3, r3, #3
 800ae64:	440b      	add	r3, r1
 800ae66:	3324      	adds	r3, #36	@ 0x24
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	78fb      	ldrb	r3, [r7, #3]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f7fe fe10 	bl	8009a92 <USBD_LL_DataInStage>
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe ff20 	bl	8009cce <USBD_LL_SOF>
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	799b      	ldrb	r3, [r3, #6]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d001      	beq.n	800aeae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aeaa:	f7f6 fbf7 	bl	800169c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aeb4:	7bfa      	ldrb	r2, [r7, #15]
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fed0 	bl	8009c5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fe fe89 	bl	8009bdc <USBD_LL_Reset>
}
 800aeca:	bf00      	nop
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe feca 	bl	8009c7c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	7a9b      	ldrb	r3, [r3, #10]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aef0:	4b04      	ldr	r3, [pc, #16]	@ (800af04 <HAL_PCD_SuspendCallback+0x30>)
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	4a03      	ldr	r2, [pc, #12]	@ (800af04 <HAL_PCD_SuspendCallback+0x30>)
 800aef6:	f043 0306 	orr.w	r3, r3, #6
 800aefa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aefc:	bf00      	nop
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	e000ed00 	.word	0xe000ed00

0800af08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe fec4 	bl	8009ca4 <USBD_LL_Resume>
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800af2c:	4a28      	ldr	r2, [pc, #160]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a26      	ldr	r2, [pc, #152]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af38:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800af3c:	4b24      	ldr	r3, [pc, #144]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af3e:	4a25      	ldr	r2, [pc, #148]	@ (800afd4 <USBD_LL_Init+0xb0>)
 800af40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af42:	4b23      	ldr	r3, [pc, #140]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af44:	2208      	movs	r2, #8
 800af46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af48:	4b21      	ldr	r3, [pc, #132]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af4a:	2202      	movs	r2, #2
 800af4c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af4e:	4b20      	ldr	r3, [pc, #128]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af50:	2200      	movs	r2, #0
 800af52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af54:	4b1e      	ldr	r3, [pc, #120]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af56:	2200      	movs	r2, #0
 800af58:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af5a:	4b1d      	ldr	r3, [pc, #116]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af60:	481b      	ldr	r0, [pc, #108]	@ (800afd0 <USBD_LL_Init+0xac>)
 800af62:	f7f8 fcb9 	bl	80038d8 <HAL_PCD_Init>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800af6c:	f7f6 fb96 	bl	800169c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af76:	2318      	movs	r3, #24
 800af78:	2200      	movs	r2, #0
 800af7a:	2100      	movs	r1, #0
 800af7c:	f7fa f9ca 	bl	8005314 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af86:	2358      	movs	r3, #88	@ 0x58
 800af88:	2200      	movs	r2, #0
 800af8a:	2180      	movs	r1, #128	@ 0x80
 800af8c:	f7fa f9c2 	bl	8005314 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af96:	23c0      	movs	r3, #192	@ 0xc0
 800af98:	2200      	movs	r2, #0
 800af9a:	2181      	movs	r1, #129	@ 0x81
 800af9c:	f7fa f9ba 	bl	8005314 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800afa6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800afaa:	2200      	movs	r2, #0
 800afac:	2101      	movs	r1, #1
 800afae:	f7fa f9b1 	bl	8005314 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800afb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afbc:	2200      	movs	r2, #0
 800afbe:	2182      	movs	r1, #130	@ 0x82
 800afc0:	f7fa f9a8 	bl	8005314 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	200012a0 	.word	0x200012a0
 800afd4:	40005c00 	.word	0x40005c00

0800afd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afee:	4618      	mov	r0, r3
 800aff0:	f7f8 fd68 	bl	8003ac4 <HAL_PCD_Start>
 800aff4:	4603      	mov	r3, r0
 800aff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	4618      	mov	r0, r3
 800affc:	f000 f94e 	bl	800b29c <USBD_Get_USB_Status>
 800b000:	4603      	mov	r3, r0
 800b002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b004:	7bbb      	ldrb	r3, [r7, #14]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	4608      	mov	r0, r1
 800b018:	4611      	mov	r1, r2
 800b01a:	461a      	mov	r2, r3
 800b01c:	4603      	mov	r3, r0
 800b01e:	70fb      	strb	r3, [r7, #3]
 800b020:	460b      	mov	r3, r1
 800b022:	70bb      	strb	r3, [r7, #2]
 800b024:	4613      	mov	r3, r2
 800b026:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b036:	78bb      	ldrb	r3, [r7, #2]
 800b038:	883a      	ldrh	r2, [r7, #0]
 800b03a:	78f9      	ldrb	r1, [r7, #3]
 800b03c:	f7f8 febc 	bl	8003db8 <HAL_PCD_EP_Open>
 800b040:	4603      	mov	r3, r0
 800b042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 f928 	bl	800b29c <USBD_Get_USB_Status>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b050:	7bbb      	ldrb	r3, [r7, #14]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	460b      	mov	r3, r1
 800b064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b074:	78fa      	ldrb	r2, [r7, #3]
 800b076:	4611      	mov	r1, r2
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f8 fefa 	bl	8003e72 <HAL_PCD_EP_Close>
 800b07e:	4603      	mov	r3, r0
 800b080:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b082:	7bfb      	ldrb	r3, [r7, #15]
 800b084:	4618      	mov	r0, r3
 800b086:	f000 f909 	bl	800b29c <USBD_Get_USB_Status>
 800b08a:	4603      	mov	r3, r0
 800b08c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0b2:	78fa      	ldrb	r2, [r7, #3]
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7f8 ffa2 	bl	8004000 <HAL_PCD_EP_SetStall>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 f8ea 	bl	800b29c <USBD_Get_USB_Status>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0f0:	78fa      	ldrb	r2, [r7, #3]
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7f8 ffe3 	bl	80040c0 <HAL_PCD_EP_ClrStall>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	4618      	mov	r0, r3
 800b102:	f000 f8cb 	bl	800b29c <USBD_Get_USB_Status>
 800b106:	4603      	mov	r3, r0
 800b108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b126:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	da0b      	bge.n	800b148 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b136:	68f9      	ldr	r1, [r7, #12]
 800b138:	4613      	mov	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	00db      	lsls	r3, r3, #3
 800b140:	440b      	add	r3, r1
 800b142:	3312      	adds	r3, #18
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	e00b      	b.n	800b160 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b14e:	68f9      	ldr	r1, [r7, #12]
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	440b      	add	r3, r1
 800b15a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b15e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	bc80      	pop	{r7}
 800b168:	4770      	bx	lr

0800b16a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f8 fdf1 	bl	8003d70 <HAL_PCD_SetAddress>
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 f881 	bl	800b29c <USBD_Get_USB_Status>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	607a      	str	r2, [r7, #4]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	72fb      	strb	r3, [r7, #11]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b1ca:	893b      	ldrh	r3, [r7, #8]
 800b1cc:	7af9      	ldrb	r1, [r7, #11]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	f7f8 fedf 	bl	8003f92 <HAL_PCD_EP_Transmit>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 f85e 	bl	800b29c <USBD_Get_USB_Status>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b086      	sub	sp, #24
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	607a      	str	r2, [r7, #4]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	72fb      	strb	r3, [r7, #11]
 800b1fe:	4613      	mov	r3, r2
 800b200:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b210:	893b      	ldrh	r3, [r7, #8]
 800b212:	7af9      	ldrb	r1, [r7, #11]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	f7f8 fe74 	bl	8003f02 <HAL_PCD_EP_Receive>
 800b21a:	4603      	mov	r3, r0
 800b21c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f83b 	bl	800b29c <USBD_Get_USB_Status>
 800b226:	4603      	mov	r3, r0
 800b228:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b22a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b246:	78fa      	ldrb	r2, [r7, #3]
 800b248:	4611      	mov	r1, r2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7f8 fe8a 	bl	8003f64 <HAL_PCD_EP_GetRxCount>
 800b250:	4603      	mov	r3, r0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b264:	4b02      	ldr	r3, [pc, #8]	@ (800b270 <USBD_static_malloc+0x14>)
}
 800b266:	4618      	mov	r0, r3
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bc80      	pop	{r7}
 800b26e:	4770      	bx	lr
 800b270:	20001578 	.word	0x20001578

0800b274 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]

}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	bc80      	pop	{r7}
 800b284:	4770      	bx	lr

0800b286 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	bc80      	pop	{r7}
 800b29a:	4770      	bx	lr

0800b29c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d817      	bhi.n	800b2e0 <USBD_Get_USB_Status+0x44>
 800b2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b8 <USBD_Get_USB_Status+0x1c>)
 800b2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b6:	bf00      	nop
 800b2b8:	0800b2c9 	.word	0x0800b2c9
 800b2bc:	0800b2cf 	.word	0x0800b2cf
 800b2c0:	0800b2d5 	.word	0x0800b2d5
 800b2c4:	0800b2db 	.word	0x0800b2db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b2cc:	e00b      	b.n	800b2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d2:	e008      	b.n	800b2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d8:	e005      	b.n	800b2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2da:	2302      	movs	r3, #2
 800b2dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2de:	e002      	b.n	800b2e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e4:	bf00      	nop
  }
  return usb_status;
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bc80      	pop	{r7}
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop

0800b2f4 <atof>:
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	f000 bdfb 	b.w	800bef0 <strtod>

0800b2fa <sulp>:
 800b2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fe:	460f      	mov	r7, r1
 800b300:	4690      	mov	r8, r2
 800b302:	f001 ff81 	bl	800d208 <__ulp>
 800b306:	4604      	mov	r4, r0
 800b308:	460d      	mov	r5, r1
 800b30a:	f1b8 0f00 	cmp.w	r8, #0
 800b30e:	d011      	beq.n	800b334 <sulp+0x3a>
 800b310:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b314:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b318:	2b00      	cmp	r3, #0
 800b31a:	dd0b      	ble.n	800b334 <sulp+0x3a>
 800b31c:	2400      	movs	r4, #0
 800b31e:	051b      	lsls	r3, r3, #20
 800b320:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b324:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b328:	4622      	mov	r2, r4
 800b32a:	462b      	mov	r3, r5
 800b32c:	f7f5 f988 	bl	8000640 <__aeabi_dmul>
 800b330:	4604      	mov	r4, r0
 800b332:	460d      	mov	r5, r1
 800b334:	4620      	mov	r0, r4
 800b336:	4629      	mov	r1, r5
 800b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33c:	0000      	movs	r0, r0
	...

0800b340 <_strtod_l>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	b09f      	sub	sp, #124	@ 0x7c
 800b346:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b348:	2200      	movs	r2, #0
 800b34a:	460c      	mov	r4, r1
 800b34c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b34e:	f04f 0a00 	mov.w	sl, #0
 800b352:	f04f 0b00 	mov.w	fp, #0
 800b356:	460a      	mov	r2, r1
 800b358:	9005      	str	r0, [sp, #20]
 800b35a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b35c:	7811      	ldrb	r1, [r2, #0]
 800b35e:	292b      	cmp	r1, #43	@ 0x2b
 800b360:	d048      	beq.n	800b3f4 <_strtod_l+0xb4>
 800b362:	d836      	bhi.n	800b3d2 <_strtod_l+0x92>
 800b364:	290d      	cmp	r1, #13
 800b366:	d830      	bhi.n	800b3ca <_strtod_l+0x8a>
 800b368:	2908      	cmp	r1, #8
 800b36a:	d830      	bhi.n	800b3ce <_strtod_l+0x8e>
 800b36c:	2900      	cmp	r1, #0
 800b36e:	d039      	beq.n	800b3e4 <_strtod_l+0xa4>
 800b370:	2200      	movs	r2, #0
 800b372:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b374:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b376:	782a      	ldrb	r2, [r5, #0]
 800b378:	2a30      	cmp	r2, #48	@ 0x30
 800b37a:	f040 80b1 	bne.w	800b4e0 <_strtod_l+0x1a0>
 800b37e:	786a      	ldrb	r2, [r5, #1]
 800b380:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b384:	2a58      	cmp	r2, #88	@ 0x58
 800b386:	d16c      	bne.n	800b462 <_strtod_l+0x122>
 800b388:	9302      	str	r3, [sp, #8]
 800b38a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b38c:	4a8e      	ldr	r2, [pc, #568]	@ (800b5c8 <_strtod_l+0x288>)
 800b38e:	9301      	str	r3, [sp, #4]
 800b390:	ab1a      	add	r3, sp, #104	@ 0x68
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	9805      	ldr	r0, [sp, #20]
 800b396:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b398:	a919      	add	r1, sp, #100	@ 0x64
 800b39a:	f001 f831 	bl	800c400 <__gethex>
 800b39e:	f010 060f 	ands.w	r6, r0, #15
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	d005      	beq.n	800b3b2 <_strtod_l+0x72>
 800b3a6:	2e06      	cmp	r6, #6
 800b3a8:	d126      	bne.n	800b3f8 <_strtod_l+0xb8>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	3501      	adds	r5, #1
 800b3ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800b3b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f040 8584 	bne.w	800bec2 <_strtod_l+0xb82>
 800b3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3bc:	b1bb      	cbz	r3, 800b3ee <_strtod_l+0xae>
 800b3be:	4650      	mov	r0, sl
 800b3c0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b3c4:	b01f      	add	sp, #124	@ 0x7c
 800b3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ca:	2920      	cmp	r1, #32
 800b3cc:	d1d0      	bne.n	800b370 <_strtod_l+0x30>
 800b3ce:	3201      	adds	r2, #1
 800b3d0:	e7c3      	b.n	800b35a <_strtod_l+0x1a>
 800b3d2:	292d      	cmp	r1, #45	@ 0x2d
 800b3d4:	d1cc      	bne.n	800b370 <_strtod_l+0x30>
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b3da:	1c51      	adds	r1, r2, #1
 800b3dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800b3de:	7852      	ldrb	r2, [r2, #1]
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	d1c7      	bne.n	800b374 <_strtod_l+0x34>
 800b3e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3e6:	9419      	str	r4, [sp, #100]	@ 0x64
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f040 8568 	bne.w	800bebe <_strtod_l+0xb7e>
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	4659      	mov	r1, fp
 800b3f2:	e7e7      	b.n	800b3c4 <_strtod_l+0x84>
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	e7ef      	b.n	800b3d8 <_strtod_l+0x98>
 800b3f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3fa:	b13a      	cbz	r2, 800b40c <_strtod_l+0xcc>
 800b3fc:	2135      	movs	r1, #53	@ 0x35
 800b3fe:	a81c      	add	r0, sp, #112	@ 0x70
 800b400:	f002 f80e 	bl	800d420 <__copybits>
 800b404:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b406:	9805      	ldr	r0, [sp, #20]
 800b408:	f001 fbcc 	bl	800cba4 <_Bfree>
 800b40c:	3e01      	subs	r6, #1
 800b40e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b410:	2e04      	cmp	r6, #4
 800b412:	d806      	bhi.n	800b422 <_strtod_l+0xe2>
 800b414:	e8df f006 	tbb	[pc, r6]
 800b418:	201d0314 	.word	0x201d0314
 800b41c:	14          	.byte	0x14
 800b41d:	00          	.byte	0x00
 800b41e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b422:	05e1      	lsls	r1, r4, #23
 800b424:	bf48      	it	mi
 800b426:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b42a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b42e:	0d1b      	lsrs	r3, r3, #20
 800b430:	051b      	lsls	r3, r3, #20
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1bd      	bne.n	800b3b2 <_strtod_l+0x72>
 800b436:	f000 fef1 	bl	800c21c <__errno>
 800b43a:	2322      	movs	r3, #34	@ 0x22
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	e7b8      	b.n	800b3b2 <_strtod_l+0x72>
 800b440:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b444:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b448:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b44c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b450:	e7e7      	b.n	800b422 <_strtod_l+0xe2>
 800b452:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b5cc <_strtod_l+0x28c>
 800b456:	e7e4      	b.n	800b422 <_strtod_l+0xe2>
 800b458:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b45c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b460:	e7df      	b.n	800b422 <_strtod_l+0xe2>
 800b462:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b464:	1c5a      	adds	r2, r3, #1
 800b466:	9219      	str	r2, [sp, #100]	@ 0x64
 800b468:	785b      	ldrb	r3, [r3, #1]
 800b46a:	2b30      	cmp	r3, #48	@ 0x30
 800b46c:	d0f9      	beq.n	800b462 <_strtod_l+0x122>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d09f      	beq.n	800b3b2 <_strtod_l+0x72>
 800b472:	2301      	movs	r3, #1
 800b474:	9309      	str	r3, [sp, #36]	@ 0x24
 800b476:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b478:	220a      	movs	r2, #10
 800b47a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b47c:	2300      	movs	r3, #0
 800b47e:	461f      	mov	r7, r3
 800b480:	9308      	str	r3, [sp, #32]
 800b482:	930a      	str	r3, [sp, #40]	@ 0x28
 800b484:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b486:	7805      	ldrb	r5, [r0, #0]
 800b488:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b48c:	b2d9      	uxtb	r1, r3
 800b48e:	2909      	cmp	r1, #9
 800b490:	d928      	bls.n	800b4e4 <_strtod_l+0x1a4>
 800b492:	2201      	movs	r2, #1
 800b494:	494e      	ldr	r1, [pc, #312]	@ (800b5d0 <_strtod_l+0x290>)
 800b496:	f000 fe68 	bl	800c16a <strncmp>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d032      	beq.n	800b504 <_strtod_l+0x1c4>
 800b49e:	2000      	movs	r0, #0
 800b4a0:	462a      	mov	r2, r5
 800b4a2:	4681      	mov	r9, r0
 800b4a4:	463d      	mov	r5, r7
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2a65      	cmp	r2, #101	@ 0x65
 800b4aa:	d001      	beq.n	800b4b0 <_strtod_l+0x170>
 800b4ac:	2a45      	cmp	r2, #69	@ 0x45
 800b4ae:	d114      	bne.n	800b4da <_strtod_l+0x19a>
 800b4b0:	b91d      	cbnz	r5, 800b4ba <_strtod_l+0x17a>
 800b4b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4b4:	4302      	orrs	r2, r0
 800b4b6:	d095      	beq.n	800b3e4 <_strtod_l+0xa4>
 800b4b8:	2500      	movs	r5, #0
 800b4ba:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b4bc:	1c62      	adds	r2, r4, #1
 800b4be:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4c0:	7862      	ldrb	r2, [r4, #1]
 800b4c2:	2a2b      	cmp	r2, #43	@ 0x2b
 800b4c4:	d077      	beq.n	800b5b6 <_strtod_l+0x276>
 800b4c6:	2a2d      	cmp	r2, #45	@ 0x2d
 800b4c8:	d07b      	beq.n	800b5c2 <_strtod_l+0x282>
 800b4ca:	f04f 0c00 	mov.w	ip, #0
 800b4ce:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b4d2:	2909      	cmp	r1, #9
 800b4d4:	f240 8082 	bls.w	800b5dc <_strtod_l+0x29c>
 800b4d8:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4da:	f04f 0800 	mov.w	r8, #0
 800b4de:	e0a2      	b.n	800b626 <_strtod_l+0x2e6>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	e7c7      	b.n	800b474 <_strtod_l+0x134>
 800b4e4:	2f08      	cmp	r7, #8
 800b4e6:	bfd5      	itete	le
 800b4e8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b4ea:	9908      	ldrgt	r1, [sp, #32]
 800b4ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800b4f0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b4f4:	f100 0001 	add.w	r0, r0, #1
 800b4f8:	bfd4      	ite	le
 800b4fa:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b4fc:	9308      	strgt	r3, [sp, #32]
 800b4fe:	3701      	adds	r7, #1
 800b500:	9019      	str	r0, [sp, #100]	@ 0x64
 800b502:	e7bf      	b.n	800b484 <_strtod_l+0x144>
 800b504:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	9219      	str	r2, [sp, #100]	@ 0x64
 800b50a:	785a      	ldrb	r2, [r3, #1]
 800b50c:	b37f      	cbz	r7, 800b56e <_strtod_l+0x22e>
 800b50e:	4681      	mov	r9, r0
 800b510:	463d      	mov	r5, r7
 800b512:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b516:	2b09      	cmp	r3, #9
 800b518:	d912      	bls.n	800b540 <_strtod_l+0x200>
 800b51a:	2301      	movs	r3, #1
 800b51c:	e7c4      	b.n	800b4a8 <_strtod_l+0x168>
 800b51e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b520:	3001      	adds	r0, #1
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	9219      	str	r2, [sp, #100]	@ 0x64
 800b526:	785a      	ldrb	r2, [r3, #1]
 800b528:	2a30      	cmp	r2, #48	@ 0x30
 800b52a:	d0f8      	beq.n	800b51e <_strtod_l+0x1de>
 800b52c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b530:	2b08      	cmp	r3, #8
 800b532:	f200 84cb 	bhi.w	800becc <_strtod_l+0xb8c>
 800b536:	4681      	mov	r9, r0
 800b538:	2000      	movs	r0, #0
 800b53a:	4605      	mov	r5, r0
 800b53c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b53e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b540:	3a30      	subs	r2, #48	@ 0x30
 800b542:	f100 0301 	add.w	r3, r0, #1
 800b546:	d02a      	beq.n	800b59e <_strtod_l+0x25e>
 800b548:	4499      	add	r9, r3
 800b54a:	210a      	movs	r1, #10
 800b54c:	462b      	mov	r3, r5
 800b54e:	eb00 0c05 	add.w	ip, r0, r5
 800b552:	4563      	cmp	r3, ip
 800b554:	d10d      	bne.n	800b572 <_strtod_l+0x232>
 800b556:	1c69      	adds	r1, r5, #1
 800b558:	4401      	add	r1, r0
 800b55a:	4428      	add	r0, r5
 800b55c:	2808      	cmp	r0, #8
 800b55e:	dc16      	bgt.n	800b58e <_strtod_l+0x24e>
 800b560:	230a      	movs	r3, #10
 800b562:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b564:	fb03 2300 	mla	r3, r3, r0, r2
 800b568:	930a      	str	r3, [sp, #40]	@ 0x28
 800b56a:	2300      	movs	r3, #0
 800b56c:	e018      	b.n	800b5a0 <_strtod_l+0x260>
 800b56e:	4638      	mov	r0, r7
 800b570:	e7da      	b.n	800b528 <_strtod_l+0x1e8>
 800b572:	2b08      	cmp	r3, #8
 800b574:	f103 0301 	add.w	r3, r3, #1
 800b578:	dc03      	bgt.n	800b582 <_strtod_l+0x242>
 800b57a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b57c:	434e      	muls	r6, r1
 800b57e:	960a      	str	r6, [sp, #40]	@ 0x28
 800b580:	e7e7      	b.n	800b552 <_strtod_l+0x212>
 800b582:	2b10      	cmp	r3, #16
 800b584:	bfde      	ittt	le
 800b586:	9e08      	ldrle	r6, [sp, #32]
 800b588:	434e      	mulle	r6, r1
 800b58a:	9608      	strle	r6, [sp, #32]
 800b58c:	e7e1      	b.n	800b552 <_strtod_l+0x212>
 800b58e:	280f      	cmp	r0, #15
 800b590:	dceb      	bgt.n	800b56a <_strtod_l+0x22a>
 800b592:	230a      	movs	r3, #10
 800b594:	9808      	ldr	r0, [sp, #32]
 800b596:	fb03 2300 	mla	r3, r3, r0, r2
 800b59a:	9308      	str	r3, [sp, #32]
 800b59c:	e7e5      	b.n	800b56a <_strtod_l+0x22a>
 800b59e:	4629      	mov	r1, r5
 800b5a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	1c50      	adds	r0, r2, #1
 800b5a6:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5a8:	7852      	ldrb	r2, [r2, #1]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	e7b1      	b.n	800b512 <_strtod_l+0x1d2>
 800b5ae:	f04f 0900 	mov.w	r9, #0
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e77d      	b.n	800b4b2 <_strtod_l+0x172>
 800b5b6:	f04f 0c00 	mov.w	ip, #0
 800b5ba:	1ca2      	adds	r2, r4, #2
 800b5bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5be:	78a2      	ldrb	r2, [r4, #2]
 800b5c0:	e785      	b.n	800b4ce <_strtod_l+0x18e>
 800b5c2:	f04f 0c01 	mov.w	ip, #1
 800b5c6:	e7f8      	b.n	800b5ba <_strtod_l+0x27a>
 800b5c8:	0800ef44 	.word	0x0800ef44
 800b5cc:	7ff00000 	.word	0x7ff00000
 800b5d0:	0800ef26 	.word	0x0800ef26
 800b5d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5d6:	1c51      	adds	r1, r2, #1
 800b5d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b5da:	7852      	ldrb	r2, [r2, #1]
 800b5dc:	2a30      	cmp	r2, #48	@ 0x30
 800b5de:	d0f9      	beq.n	800b5d4 <_strtod_l+0x294>
 800b5e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b5e4:	2908      	cmp	r1, #8
 800b5e6:	f63f af78 	bhi.w	800b4da <_strtod_l+0x19a>
 800b5ea:	f04f 080a 	mov.w	r8, #10
 800b5ee:	3a30      	subs	r2, #48	@ 0x30
 800b5f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b5f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5f8:	1c56      	adds	r6, r2, #1
 800b5fa:	9619      	str	r6, [sp, #100]	@ 0x64
 800b5fc:	7852      	ldrb	r2, [r2, #1]
 800b5fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b602:	f1be 0f09 	cmp.w	lr, #9
 800b606:	d939      	bls.n	800b67c <_strtod_l+0x33c>
 800b608:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b60a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b60e:	1a76      	subs	r6, r6, r1
 800b610:	2e08      	cmp	r6, #8
 800b612:	dc03      	bgt.n	800b61c <_strtod_l+0x2dc>
 800b614:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b616:	4588      	cmp	r8, r1
 800b618:	bfa8      	it	ge
 800b61a:	4688      	movge	r8, r1
 800b61c:	f1bc 0f00 	cmp.w	ip, #0
 800b620:	d001      	beq.n	800b626 <_strtod_l+0x2e6>
 800b622:	f1c8 0800 	rsb	r8, r8, #0
 800b626:	2d00      	cmp	r5, #0
 800b628:	d14e      	bne.n	800b6c8 <_strtod_l+0x388>
 800b62a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b62c:	4308      	orrs	r0, r1
 800b62e:	f47f aec0 	bne.w	800b3b2 <_strtod_l+0x72>
 800b632:	2b00      	cmp	r3, #0
 800b634:	f47f aed6 	bne.w	800b3e4 <_strtod_l+0xa4>
 800b638:	2a69      	cmp	r2, #105	@ 0x69
 800b63a:	d028      	beq.n	800b68e <_strtod_l+0x34e>
 800b63c:	dc25      	bgt.n	800b68a <_strtod_l+0x34a>
 800b63e:	2a49      	cmp	r2, #73	@ 0x49
 800b640:	d025      	beq.n	800b68e <_strtod_l+0x34e>
 800b642:	2a4e      	cmp	r2, #78	@ 0x4e
 800b644:	f47f aece 	bne.w	800b3e4 <_strtod_l+0xa4>
 800b648:	499a      	ldr	r1, [pc, #616]	@ (800b8b4 <_strtod_l+0x574>)
 800b64a:	a819      	add	r0, sp, #100	@ 0x64
 800b64c:	f001 f8fa 	bl	800c844 <__match>
 800b650:	2800      	cmp	r0, #0
 800b652:	f43f aec7 	beq.w	800b3e4 <_strtod_l+0xa4>
 800b656:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	2b28      	cmp	r3, #40	@ 0x28
 800b65c:	d12e      	bne.n	800b6bc <_strtod_l+0x37c>
 800b65e:	4996      	ldr	r1, [pc, #600]	@ (800b8b8 <_strtod_l+0x578>)
 800b660:	aa1c      	add	r2, sp, #112	@ 0x70
 800b662:	a819      	add	r0, sp, #100	@ 0x64
 800b664:	f001 f902 	bl	800c86c <__hexnan>
 800b668:	2805      	cmp	r0, #5
 800b66a:	d127      	bne.n	800b6bc <_strtod_l+0x37c>
 800b66c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b66e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b672:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b676:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b67a:	e69a      	b.n	800b3b2 <_strtod_l+0x72>
 800b67c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b67e:	fb08 2101 	mla	r1, r8, r1, r2
 800b682:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b686:	920e      	str	r2, [sp, #56]	@ 0x38
 800b688:	e7b5      	b.n	800b5f6 <_strtod_l+0x2b6>
 800b68a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b68c:	e7da      	b.n	800b644 <_strtod_l+0x304>
 800b68e:	498b      	ldr	r1, [pc, #556]	@ (800b8bc <_strtod_l+0x57c>)
 800b690:	a819      	add	r0, sp, #100	@ 0x64
 800b692:	f001 f8d7 	bl	800c844 <__match>
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f aea4 	beq.w	800b3e4 <_strtod_l+0xa4>
 800b69c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b69e:	4988      	ldr	r1, [pc, #544]	@ (800b8c0 <_strtod_l+0x580>)
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	a819      	add	r0, sp, #100	@ 0x64
 800b6a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6a6:	f001 f8cd 	bl	800c844 <__match>
 800b6aa:	b910      	cbnz	r0, 800b6b2 <_strtod_l+0x372>
 800b6ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6b2:	f04f 0a00 	mov.w	sl, #0
 800b6b6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b8c4 <_strtod_l+0x584>
 800b6ba:	e67a      	b.n	800b3b2 <_strtod_l+0x72>
 800b6bc:	4882      	ldr	r0, [pc, #520]	@ (800b8c8 <_strtod_l+0x588>)
 800b6be:	f000 fde9 	bl	800c294 <nan>
 800b6c2:	4682      	mov	sl, r0
 800b6c4:	468b      	mov	fp, r1
 800b6c6:	e674      	b.n	800b3b2 <_strtod_l+0x72>
 800b6c8:	eba8 0309 	sub.w	r3, r8, r9
 800b6cc:	2f00      	cmp	r7, #0
 800b6ce:	bf08      	it	eq
 800b6d0:	462f      	moveq	r7, r5
 800b6d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b6d4:	2d10      	cmp	r5, #16
 800b6d6:	462c      	mov	r4, r5
 800b6d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6da:	bfa8      	it	ge
 800b6dc:	2410      	movge	r4, #16
 800b6de:	f7f4 ff35 	bl	800054c <__aeabi_ui2d>
 800b6e2:	2d09      	cmp	r5, #9
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	468b      	mov	fp, r1
 800b6e8:	dc11      	bgt.n	800b70e <_strtod_l+0x3ce>
 800b6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f43f ae60 	beq.w	800b3b2 <_strtod_l+0x72>
 800b6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6f4:	dd76      	ble.n	800b7e4 <_strtod_l+0x4a4>
 800b6f6:	2b16      	cmp	r3, #22
 800b6f8:	dc5d      	bgt.n	800b7b6 <_strtod_l+0x476>
 800b6fa:	4974      	ldr	r1, [pc, #464]	@ (800b8cc <_strtod_l+0x58c>)
 800b6fc:	4652      	mov	r2, sl
 800b6fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b702:	465b      	mov	r3, fp
 800b704:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b708:	f7f4 ff9a 	bl	8000640 <__aeabi_dmul>
 800b70c:	e7d9      	b.n	800b6c2 <_strtod_l+0x382>
 800b70e:	4b6f      	ldr	r3, [pc, #444]	@ (800b8cc <_strtod_l+0x58c>)
 800b710:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b714:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b718:	f7f4 ff92 	bl	8000640 <__aeabi_dmul>
 800b71c:	4682      	mov	sl, r0
 800b71e:	9808      	ldr	r0, [sp, #32]
 800b720:	468b      	mov	fp, r1
 800b722:	f7f4 ff13 	bl	800054c <__aeabi_ui2d>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	4650      	mov	r0, sl
 800b72c:	4659      	mov	r1, fp
 800b72e:	f7f4 fdd1 	bl	80002d4 <__adddf3>
 800b732:	2d0f      	cmp	r5, #15
 800b734:	4682      	mov	sl, r0
 800b736:	468b      	mov	fp, r1
 800b738:	ddd7      	ble.n	800b6ea <_strtod_l+0x3aa>
 800b73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b73c:	1b2c      	subs	r4, r5, r4
 800b73e:	441c      	add	r4, r3
 800b740:	2c00      	cmp	r4, #0
 800b742:	f340 8096 	ble.w	800b872 <_strtod_l+0x532>
 800b746:	f014 030f 	ands.w	r3, r4, #15
 800b74a:	d00a      	beq.n	800b762 <_strtod_l+0x422>
 800b74c:	495f      	ldr	r1, [pc, #380]	@ (800b8cc <_strtod_l+0x58c>)
 800b74e:	4652      	mov	r2, sl
 800b750:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b754:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b758:	465b      	mov	r3, fp
 800b75a:	f7f4 ff71 	bl	8000640 <__aeabi_dmul>
 800b75e:	4682      	mov	sl, r0
 800b760:	468b      	mov	fp, r1
 800b762:	f034 040f 	bics.w	r4, r4, #15
 800b766:	d073      	beq.n	800b850 <_strtod_l+0x510>
 800b768:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b76c:	dd48      	ble.n	800b800 <_strtod_l+0x4c0>
 800b76e:	2400      	movs	r4, #0
 800b770:	46a0      	mov	r8, r4
 800b772:	46a1      	mov	r9, r4
 800b774:	940a      	str	r4, [sp, #40]	@ 0x28
 800b776:	2322      	movs	r3, #34	@ 0x22
 800b778:	f04f 0a00 	mov.w	sl, #0
 800b77c:	9a05      	ldr	r2, [sp, #20]
 800b77e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800b8c4 <_strtod_l+0x584>
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b786:	2b00      	cmp	r3, #0
 800b788:	f43f ae13 	beq.w	800b3b2 <_strtod_l+0x72>
 800b78c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b78e:	9805      	ldr	r0, [sp, #20]
 800b790:	f001 fa08 	bl	800cba4 <_Bfree>
 800b794:	4649      	mov	r1, r9
 800b796:	9805      	ldr	r0, [sp, #20]
 800b798:	f001 fa04 	bl	800cba4 <_Bfree>
 800b79c:	4641      	mov	r1, r8
 800b79e:	9805      	ldr	r0, [sp, #20]
 800b7a0:	f001 fa00 	bl	800cba4 <_Bfree>
 800b7a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b7a6:	9805      	ldr	r0, [sp, #20]
 800b7a8:	f001 f9fc 	bl	800cba4 <_Bfree>
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	9805      	ldr	r0, [sp, #20]
 800b7b0:	f001 f9f8 	bl	800cba4 <_Bfree>
 800b7b4:	e5fd      	b.n	800b3b2 <_strtod_l+0x72>
 800b7b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	dbbc      	blt.n	800b73a <_strtod_l+0x3fa>
 800b7c0:	4c42      	ldr	r4, [pc, #264]	@ (800b8cc <_strtod_l+0x58c>)
 800b7c2:	f1c5 050f 	rsb	r5, r5, #15
 800b7c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b7ca:	4652      	mov	r2, sl
 800b7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7d0:	465b      	mov	r3, fp
 800b7d2:	f7f4 ff35 	bl	8000640 <__aeabi_dmul>
 800b7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7d8:	1b5d      	subs	r5, r3, r5
 800b7da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b7de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b7e2:	e791      	b.n	800b708 <_strtod_l+0x3c8>
 800b7e4:	3316      	adds	r3, #22
 800b7e6:	dba8      	blt.n	800b73a <_strtod_l+0x3fa>
 800b7e8:	4b38      	ldr	r3, [pc, #224]	@ (800b8cc <_strtod_l+0x58c>)
 800b7ea:	eba9 0808 	sub.w	r8, r9, r8
 800b7ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b7f8:	4659      	mov	r1, fp
 800b7fa:	f7f5 f84b 	bl	8000894 <__aeabi_ddiv>
 800b7fe:	e760      	b.n	800b6c2 <_strtod_l+0x382>
 800b800:	4b33      	ldr	r3, [pc, #204]	@ (800b8d0 <_strtod_l+0x590>)
 800b802:	4650      	mov	r0, sl
 800b804:	9308      	str	r3, [sp, #32]
 800b806:	2300      	movs	r3, #0
 800b808:	4659      	mov	r1, fp
 800b80a:	461e      	mov	r6, r3
 800b80c:	1124      	asrs	r4, r4, #4
 800b80e:	2c01      	cmp	r4, #1
 800b810:	dc21      	bgt.n	800b856 <_strtod_l+0x516>
 800b812:	b10b      	cbz	r3, 800b818 <_strtod_l+0x4d8>
 800b814:	4682      	mov	sl, r0
 800b816:	468b      	mov	fp, r1
 800b818:	492d      	ldr	r1, [pc, #180]	@ (800b8d0 <_strtod_l+0x590>)
 800b81a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b81e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b822:	4652      	mov	r2, sl
 800b824:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b828:	465b      	mov	r3, fp
 800b82a:	f7f4 ff09 	bl	8000640 <__aeabi_dmul>
 800b82e:	4b25      	ldr	r3, [pc, #148]	@ (800b8c4 <_strtod_l+0x584>)
 800b830:	460a      	mov	r2, r1
 800b832:	400b      	ands	r3, r1
 800b834:	4927      	ldr	r1, [pc, #156]	@ (800b8d4 <_strtod_l+0x594>)
 800b836:	4682      	mov	sl, r0
 800b838:	428b      	cmp	r3, r1
 800b83a:	d898      	bhi.n	800b76e <_strtod_l+0x42e>
 800b83c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b840:	428b      	cmp	r3, r1
 800b842:	bf86      	itte	hi
 800b844:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b848:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b8d8 <_strtod_l+0x598>
 800b84c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b850:	2300      	movs	r3, #0
 800b852:	9308      	str	r3, [sp, #32]
 800b854:	e07a      	b.n	800b94c <_strtod_l+0x60c>
 800b856:	07e2      	lsls	r2, r4, #31
 800b858:	d505      	bpl.n	800b866 <_strtod_l+0x526>
 800b85a:	9b08      	ldr	r3, [sp, #32]
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	f7f4 feee 	bl	8000640 <__aeabi_dmul>
 800b864:	2301      	movs	r3, #1
 800b866:	9a08      	ldr	r2, [sp, #32]
 800b868:	3601      	adds	r6, #1
 800b86a:	3208      	adds	r2, #8
 800b86c:	1064      	asrs	r4, r4, #1
 800b86e:	9208      	str	r2, [sp, #32]
 800b870:	e7cd      	b.n	800b80e <_strtod_l+0x4ce>
 800b872:	d0ed      	beq.n	800b850 <_strtod_l+0x510>
 800b874:	4264      	negs	r4, r4
 800b876:	f014 020f 	ands.w	r2, r4, #15
 800b87a:	d00a      	beq.n	800b892 <_strtod_l+0x552>
 800b87c:	4b13      	ldr	r3, [pc, #76]	@ (800b8cc <_strtod_l+0x58c>)
 800b87e:	4650      	mov	r0, sl
 800b880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b884:	4659      	mov	r1, fp
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f7f5 f803 	bl	8000894 <__aeabi_ddiv>
 800b88e:	4682      	mov	sl, r0
 800b890:	468b      	mov	fp, r1
 800b892:	1124      	asrs	r4, r4, #4
 800b894:	d0dc      	beq.n	800b850 <_strtod_l+0x510>
 800b896:	2c1f      	cmp	r4, #31
 800b898:	dd20      	ble.n	800b8dc <_strtod_l+0x59c>
 800b89a:	2400      	movs	r4, #0
 800b89c:	46a0      	mov	r8, r4
 800b89e:	46a1      	mov	r9, r4
 800b8a0:	940a      	str	r4, [sp, #40]	@ 0x28
 800b8a2:	2322      	movs	r3, #34	@ 0x22
 800b8a4:	9a05      	ldr	r2, [sp, #20]
 800b8a6:	f04f 0a00 	mov.w	sl, #0
 800b8aa:	f04f 0b00 	mov.w	fp, #0
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	e768      	b.n	800b784 <_strtod_l+0x444>
 800b8b2:	bf00      	nop
 800b8b4:	0800ef2b 	.word	0x0800ef2b
 800b8b8:	0800ef30 	.word	0x0800ef30
 800b8bc:	0800ef28 	.word	0x0800ef28
 800b8c0:	0800f2a8 	.word	0x0800f2a8
 800b8c4:	7ff00000 	.word	0x7ff00000
 800b8c8:	0800f2a4 	.word	0x0800f2a4
 800b8cc:	0800f0a0 	.word	0x0800f0a0
 800b8d0:	0800f078 	.word	0x0800f078
 800b8d4:	7ca00000 	.word	0x7ca00000
 800b8d8:	7fefffff 	.word	0x7fefffff
 800b8dc:	f014 0310 	ands.w	r3, r4, #16
 800b8e0:	bf18      	it	ne
 800b8e2:	236a      	movne	r3, #106	@ 0x6a
 800b8e4:	4650      	mov	r0, sl
 800b8e6:	9308      	str	r3, [sp, #32]
 800b8e8:	4659      	mov	r1, fp
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	4ea9      	ldr	r6, [pc, #676]	@ (800bb94 <_strtod_l+0x854>)
 800b8ee:	07e2      	lsls	r2, r4, #31
 800b8f0:	d504      	bpl.n	800b8fc <_strtod_l+0x5bc>
 800b8f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8f6:	f7f4 fea3 	bl	8000640 <__aeabi_dmul>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	1064      	asrs	r4, r4, #1
 800b8fe:	f106 0608 	add.w	r6, r6, #8
 800b902:	d1f4      	bne.n	800b8ee <_strtod_l+0x5ae>
 800b904:	b10b      	cbz	r3, 800b90a <_strtod_l+0x5ca>
 800b906:	4682      	mov	sl, r0
 800b908:	468b      	mov	fp, r1
 800b90a:	9b08      	ldr	r3, [sp, #32]
 800b90c:	b1b3      	cbz	r3, 800b93c <_strtod_l+0x5fc>
 800b90e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b912:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b916:	2b00      	cmp	r3, #0
 800b918:	4659      	mov	r1, fp
 800b91a:	dd0f      	ble.n	800b93c <_strtod_l+0x5fc>
 800b91c:	2b1f      	cmp	r3, #31
 800b91e:	dd57      	ble.n	800b9d0 <_strtod_l+0x690>
 800b920:	2b34      	cmp	r3, #52	@ 0x34
 800b922:	bfd8      	it	le
 800b924:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b928:	f04f 0a00 	mov.w	sl, #0
 800b92c:	bfcf      	iteee	gt
 800b92e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b932:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b936:	4093      	lslle	r3, r2
 800b938:	ea03 0b01 	andle.w	fp, r3, r1
 800b93c:	2200      	movs	r2, #0
 800b93e:	2300      	movs	r3, #0
 800b940:	4650      	mov	r0, sl
 800b942:	4659      	mov	r1, fp
 800b944:	f7f5 f8e4 	bl	8000b10 <__aeabi_dcmpeq>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d1a6      	bne.n	800b89a <_strtod_l+0x55a>
 800b94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94e:	463a      	mov	r2, r7
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b954:	462b      	mov	r3, r5
 800b956:	9805      	ldr	r0, [sp, #20]
 800b958:	f001 f98c 	bl	800cc74 <__s2b>
 800b95c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b95e:	2800      	cmp	r0, #0
 800b960:	f43f af05 	beq.w	800b76e <_strtod_l+0x42e>
 800b964:	2400      	movs	r4, #0
 800b966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b968:	eba9 0308 	sub.w	r3, r9, r8
 800b96c:	2a00      	cmp	r2, #0
 800b96e:	bfa8      	it	ge
 800b970:	2300      	movge	r3, #0
 800b972:	46a0      	mov	r8, r4
 800b974:	9312      	str	r3, [sp, #72]	@ 0x48
 800b976:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b97a:	9316      	str	r3, [sp, #88]	@ 0x58
 800b97c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b97e:	9805      	ldr	r0, [sp, #20]
 800b980:	6859      	ldr	r1, [r3, #4]
 800b982:	f001 f8cf 	bl	800cb24 <_Balloc>
 800b986:	4681      	mov	r9, r0
 800b988:	2800      	cmp	r0, #0
 800b98a:	f43f aef4 	beq.w	800b776 <_strtod_l+0x436>
 800b98e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b990:	300c      	adds	r0, #12
 800b992:	691a      	ldr	r2, [r3, #16]
 800b994:	f103 010c 	add.w	r1, r3, #12
 800b998:	3202      	adds	r2, #2
 800b99a:	0092      	lsls	r2, r2, #2
 800b99c:	f000 fc6b 	bl	800c276 <memcpy>
 800b9a0:	ab1c      	add	r3, sp, #112	@ 0x70
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	4652      	mov	r2, sl
 800b9aa:	465b      	mov	r3, fp
 800b9ac:	9805      	ldr	r0, [sp, #20]
 800b9ae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b9b2:	f001 fc91 	bl	800d2d8 <__d2b>
 800b9b6:	901a      	str	r0, [sp, #104]	@ 0x68
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	f43f aedc 	beq.w	800b776 <_strtod_l+0x436>
 800b9be:	2101      	movs	r1, #1
 800b9c0:	9805      	ldr	r0, [sp, #20]
 800b9c2:	f001 f9ed 	bl	800cda0 <__i2b>
 800b9c6:	4680      	mov	r8, r0
 800b9c8:	b948      	cbnz	r0, 800b9de <_strtod_l+0x69e>
 800b9ca:	f04f 0800 	mov.w	r8, #0
 800b9ce:	e6d2      	b.n	800b776 <_strtod_l+0x436>
 800b9d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d8:	ea03 0a0a 	and.w	sl, r3, sl
 800b9dc:	e7ae      	b.n	800b93c <_strtod_l+0x5fc>
 800b9de:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b9e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b9e2:	2d00      	cmp	r5, #0
 800b9e4:	bfab      	itete	ge
 800b9e6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b9e8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b9ea:	18ef      	addge	r7, r5, r3
 800b9ec:	1b5e      	sublt	r6, r3, r5
 800b9ee:	9b08      	ldr	r3, [sp, #32]
 800b9f0:	bfa8      	it	ge
 800b9f2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b9f4:	eba5 0503 	sub.w	r5, r5, r3
 800b9f8:	4415      	add	r5, r2
 800b9fa:	4b67      	ldr	r3, [pc, #412]	@ (800bb98 <_strtod_l+0x858>)
 800b9fc:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800ba00:	bfb8      	it	lt
 800ba02:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ba04:	429d      	cmp	r5, r3
 800ba06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba0a:	da50      	bge.n	800baae <_strtod_l+0x76e>
 800ba0c:	1b5b      	subs	r3, r3, r5
 800ba0e:	2b1f      	cmp	r3, #31
 800ba10:	f04f 0101 	mov.w	r1, #1
 800ba14:	eba2 0203 	sub.w	r2, r2, r3
 800ba18:	dc3d      	bgt.n	800ba96 <_strtod_l+0x756>
 800ba1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba20:	2300      	movs	r3, #0
 800ba22:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba24:	18bd      	adds	r5, r7, r2
 800ba26:	9b08      	ldr	r3, [sp, #32]
 800ba28:	42af      	cmp	r7, r5
 800ba2a:	4416      	add	r6, r2
 800ba2c:	441e      	add	r6, r3
 800ba2e:	463b      	mov	r3, r7
 800ba30:	bfa8      	it	ge
 800ba32:	462b      	movge	r3, r5
 800ba34:	42b3      	cmp	r3, r6
 800ba36:	bfa8      	it	ge
 800ba38:	4633      	movge	r3, r6
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	bfc2      	ittt	gt
 800ba3e:	1aed      	subgt	r5, r5, r3
 800ba40:	1af6      	subgt	r6, r6, r3
 800ba42:	1aff      	subgt	r7, r7, r3
 800ba44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	dd16      	ble.n	800ba78 <_strtod_l+0x738>
 800ba4a:	4641      	mov	r1, r8
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	9805      	ldr	r0, [sp, #20]
 800ba50:	f001 fa64 	bl	800cf1c <__pow5mult>
 800ba54:	4680      	mov	r8, r0
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d0b7      	beq.n	800b9ca <_strtod_l+0x68a>
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba5e:	9805      	ldr	r0, [sp, #20]
 800ba60:	f001 f9b4 	bl	800cdcc <__multiply>
 800ba64:	900e      	str	r0, [sp, #56]	@ 0x38
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f43f ae85 	beq.w	800b776 <_strtod_l+0x436>
 800ba6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba6e:	9805      	ldr	r0, [sp, #20]
 800ba70:	f001 f898 	bl	800cba4 <_Bfree>
 800ba74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba76:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba78:	2d00      	cmp	r5, #0
 800ba7a:	dc1d      	bgt.n	800bab8 <_strtod_l+0x778>
 800ba7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	dd23      	ble.n	800baca <_strtod_l+0x78a>
 800ba82:	4649      	mov	r1, r9
 800ba84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ba86:	9805      	ldr	r0, [sp, #20]
 800ba88:	f001 fa48 	bl	800cf1c <__pow5mult>
 800ba8c:	4681      	mov	r9, r0
 800ba8e:	b9e0      	cbnz	r0, 800baca <_strtod_l+0x78a>
 800ba90:	f04f 0900 	mov.w	r9, #0
 800ba94:	e66f      	b.n	800b776 <_strtod_l+0x436>
 800ba96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ba9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ba9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800baa2:	35e2      	adds	r5, #226	@ 0xe2
 800baa4:	fa01 f305 	lsl.w	r3, r1, r5
 800baa8:	9310      	str	r3, [sp, #64]	@ 0x40
 800baaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800baac:	e7ba      	b.n	800ba24 <_strtod_l+0x6e4>
 800baae:	2300      	movs	r3, #0
 800bab0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bab2:	2301      	movs	r3, #1
 800bab4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bab6:	e7b5      	b.n	800ba24 <_strtod_l+0x6e4>
 800bab8:	462a      	mov	r2, r5
 800baba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800babc:	9805      	ldr	r0, [sp, #20]
 800babe:	f001 fa87 	bl	800cfd0 <__lshift>
 800bac2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d1d9      	bne.n	800ba7c <_strtod_l+0x73c>
 800bac8:	e655      	b.n	800b776 <_strtod_l+0x436>
 800baca:	2e00      	cmp	r6, #0
 800bacc:	dd07      	ble.n	800bade <_strtod_l+0x79e>
 800bace:	4649      	mov	r1, r9
 800bad0:	4632      	mov	r2, r6
 800bad2:	9805      	ldr	r0, [sp, #20]
 800bad4:	f001 fa7c 	bl	800cfd0 <__lshift>
 800bad8:	4681      	mov	r9, r0
 800bada:	2800      	cmp	r0, #0
 800badc:	d0d8      	beq.n	800ba90 <_strtod_l+0x750>
 800bade:	2f00      	cmp	r7, #0
 800bae0:	dd08      	ble.n	800baf4 <_strtod_l+0x7b4>
 800bae2:	4641      	mov	r1, r8
 800bae4:	463a      	mov	r2, r7
 800bae6:	9805      	ldr	r0, [sp, #20]
 800bae8:	f001 fa72 	bl	800cfd0 <__lshift>
 800baec:	4680      	mov	r8, r0
 800baee:	2800      	cmp	r0, #0
 800baf0:	f43f ae41 	beq.w	800b776 <_strtod_l+0x436>
 800baf4:	464a      	mov	r2, r9
 800baf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baf8:	9805      	ldr	r0, [sp, #20]
 800bafa:	f001 faf1 	bl	800d0e0 <__mdiff>
 800bafe:	4604      	mov	r4, r0
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f43f ae38 	beq.w	800b776 <_strtod_l+0x436>
 800bb06:	68c3      	ldr	r3, [r0, #12]
 800bb08:	4641      	mov	r1, r8
 800bb0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	60c3      	str	r3, [r0, #12]
 800bb10:	f001 faca 	bl	800d0a8 <__mcmp>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	da45      	bge.n	800bba4 <_strtod_l+0x864>
 800bb18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb1a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb1e:	d16b      	bne.n	800bbf8 <_strtod_l+0x8b8>
 800bb20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d167      	bne.n	800bbf8 <_strtod_l+0x8b8>
 800bb28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb2c:	0d1b      	lsrs	r3, r3, #20
 800bb2e:	051b      	lsls	r3, r3, #20
 800bb30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb34:	d960      	bls.n	800bbf8 <_strtod_l+0x8b8>
 800bb36:	6963      	ldr	r3, [r4, #20]
 800bb38:	b913      	cbnz	r3, 800bb40 <_strtod_l+0x800>
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	dd5b      	ble.n	800bbf8 <_strtod_l+0x8b8>
 800bb40:	4621      	mov	r1, r4
 800bb42:	2201      	movs	r2, #1
 800bb44:	9805      	ldr	r0, [sp, #20]
 800bb46:	f001 fa43 	bl	800cfd0 <__lshift>
 800bb4a:	4641      	mov	r1, r8
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	f001 faab 	bl	800d0a8 <__mcmp>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	dd50      	ble.n	800bbf8 <_strtod_l+0x8b8>
 800bb56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb5a:	9a08      	ldr	r2, [sp, #32]
 800bb5c:	0d1b      	lsrs	r3, r3, #20
 800bb5e:	051b      	lsls	r3, r3, #20
 800bb60:	2a00      	cmp	r2, #0
 800bb62:	d06a      	beq.n	800bc3a <_strtod_l+0x8fa>
 800bb64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb68:	d867      	bhi.n	800bc3a <_strtod_l+0x8fa>
 800bb6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bb6e:	f67f ae98 	bls.w	800b8a2 <_strtod_l+0x562>
 800bb72:	4650      	mov	r0, sl
 800bb74:	4659      	mov	r1, fp
 800bb76:	4b09      	ldr	r3, [pc, #36]	@ (800bb9c <_strtod_l+0x85c>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f7f4 fd61 	bl	8000640 <__aeabi_dmul>
 800bb7e:	4b08      	ldr	r3, [pc, #32]	@ (800bba0 <_strtod_l+0x860>)
 800bb80:	4682      	mov	sl, r0
 800bb82:	400b      	ands	r3, r1
 800bb84:	468b      	mov	fp, r1
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f47f ae00 	bne.w	800b78c <_strtod_l+0x44c>
 800bb8c:	2322      	movs	r3, #34	@ 0x22
 800bb8e:	9a05      	ldr	r2, [sp, #20]
 800bb90:	6013      	str	r3, [r2, #0]
 800bb92:	e5fb      	b.n	800b78c <_strtod_l+0x44c>
 800bb94:	0800ef58 	.word	0x0800ef58
 800bb98:	fffffc02 	.word	0xfffffc02
 800bb9c:	39500000 	.word	0x39500000
 800bba0:	7ff00000 	.word	0x7ff00000
 800bba4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bba8:	d165      	bne.n	800bc76 <_strtod_l+0x936>
 800bbaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bbac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbb0:	b35a      	cbz	r2, 800bc0a <_strtod_l+0x8ca>
 800bbb2:	4a99      	ldr	r2, [pc, #612]	@ (800be18 <_strtod_l+0xad8>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d12b      	bne.n	800bc10 <_strtod_l+0x8d0>
 800bbb8:	9b08      	ldr	r3, [sp, #32]
 800bbba:	4651      	mov	r1, sl
 800bbbc:	b303      	cbz	r3, 800bc00 <_strtod_l+0x8c0>
 800bbbe:	465a      	mov	r2, fp
 800bbc0:	4b96      	ldr	r3, [pc, #600]	@ (800be1c <_strtod_l+0xadc>)
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bbc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbcc:	d81b      	bhi.n	800bc06 <_strtod_l+0x8c6>
 800bbce:	0d1b      	lsrs	r3, r3, #20
 800bbd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd8:	4299      	cmp	r1, r3
 800bbda:	d119      	bne.n	800bc10 <_strtod_l+0x8d0>
 800bbdc:	4b90      	ldr	r3, [pc, #576]	@ (800be20 <_strtod_l+0xae0>)
 800bbde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d102      	bne.n	800bbea <_strtod_l+0x8aa>
 800bbe4:	3101      	adds	r1, #1
 800bbe6:	f43f adc6 	beq.w	800b776 <_strtod_l+0x436>
 800bbea:	f04f 0a00 	mov.w	sl, #0
 800bbee:	4b8b      	ldr	r3, [pc, #556]	@ (800be1c <_strtod_l+0xadc>)
 800bbf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbf2:	401a      	ands	r2, r3
 800bbf4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bbf8:	9b08      	ldr	r3, [sp, #32]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1b9      	bne.n	800bb72 <_strtod_l+0x832>
 800bbfe:	e5c5      	b.n	800b78c <_strtod_l+0x44c>
 800bc00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc04:	e7e8      	b.n	800bbd8 <_strtod_l+0x898>
 800bc06:	4613      	mov	r3, r2
 800bc08:	e7e6      	b.n	800bbd8 <_strtod_l+0x898>
 800bc0a:	ea53 030a 	orrs.w	r3, r3, sl
 800bc0e:	d0a2      	beq.n	800bb56 <_strtod_l+0x816>
 800bc10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc12:	b1db      	cbz	r3, 800bc4c <_strtod_l+0x90c>
 800bc14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc16:	4213      	tst	r3, r2
 800bc18:	d0ee      	beq.n	800bbf8 <_strtod_l+0x8b8>
 800bc1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc1c:	4650      	mov	r0, sl
 800bc1e:	4659      	mov	r1, fp
 800bc20:	9a08      	ldr	r2, [sp, #32]
 800bc22:	b1bb      	cbz	r3, 800bc54 <_strtod_l+0x914>
 800bc24:	f7ff fb69 	bl	800b2fa <sulp>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc30:	f7f4 fb50 	bl	80002d4 <__adddf3>
 800bc34:	4682      	mov	sl, r0
 800bc36:	468b      	mov	fp, r1
 800bc38:	e7de      	b.n	800bbf8 <_strtod_l+0x8b8>
 800bc3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bc3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bc42:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bc46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bc4a:	e7d5      	b.n	800bbf8 <_strtod_l+0x8b8>
 800bc4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc4e:	ea13 0f0a 	tst.w	r3, sl
 800bc52:	e7e1      	b.n	800bc18 <_strtod_l+0x8d8>
 800bc54:	f7ff fb51 	bl	800b2fa <sulp>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc60:	f7f4 fb36 	bl	80002d0 <__aeabi_dsub>
 800bc64:	2200      	movs	r2, #0
 800bc66:	2300      	movs	r3, #0
 800bc68:	4682      	mov	sl, r0
 800bc6a:	468b      	mov	fp, r1
 800bc6c:	f7f4 ff50 	bl	8000b10 <__aeabi_dcmpeq>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d0c1      	beq.n	800bbf8 <_strtod_l+0x8b8>
 800bc74:	e615      	b.n	800b8a2 <_strtod_l+0x562>
 800bc76:	4641      	mov	r1, r8
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f001 fb85 	bl	800d388 <__ratio>
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bc84:	4606      	mov	r6, r0
 800bc86:	460f      	mov	r7, r1
 800bc88:	f7f4 ff56 	bl	8000b38 <__aeabi_dcmple>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d06d      	beq.n	800bd6c <_strtod_l+0xa2c>
 800bc90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d178      	bne.n	800bd88 <_strtod_l+0xa48>
 800bc96:	f1ba 0f00 	cmp.w	sl, #0
 800bc9a:	d156      	bne.n	800bd4a <_strtod_l+0xa0a>
 800bc9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d158      	bne.n	800bd58 <_strtod_l+0xa18>
 800bca6:	2200      	movs	r2, #0
 800bca8:	4630      	mov	r0, r6
 800bcaa:	4639      	mov	r1, r7
 800bcac:	4b5d      	ldr	r3, [pc, #372]	@ (800be24 <_strtod_l+0xae4>)
 800bcae:	f7f4 ff39 	bl	8000b24 <__aeabi_dcmplt>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d157      	bne.n	800bd66 <_strtod_l+0xa26>
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4639      	mov	r1, r7
 800bcba:	2200      	movs	r2, #0
 800bcbc:	4b5a      	ldr	r3, [pc, #360]	@ (800be28 <_strtod_l+0xae8>)
 800bcbe:	f7f4 fcbf 	bl	8000640 <__aeabi_dmul>
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	460f      	mov	r7, r1
 800bcc6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bcca:	9606      	str	r6, [sp, #24]
 800bccc:	9307      	str	r3, [sp, #28]
 800bcce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcd2:	4d52      	ldr	r5, [pc, #328]	@ (800be1c <_strtod_l+0xadc>)
 800bcd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bcd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcda:	401d      	ands	r5, r3
 800bcdc:	4b53      	ldr	r3, [pc, #332]	@ (800be2c <_strtod_l+0xaec>)
 800bcde:	429d      	cmp	r5, r3
 800bce0:	f040 80aa 	bne.w	800be38 <_strtod_l+0xaf8>
 800bce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce6:	4650      	mov	r0, sl
 800bce8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bcec:	4659      	mov	r1, fp
 800bcee:	f001 fa8b 	bl	800d208 <__ulp>
 800bcf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcf6:	f7f4 fca3 	bl	8000640 <__aeabi_dmul>
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	465b      	mov	r3, fp
 800bcfe:	f7f4 fae9 	bl	80002d4 <__adddf3>
 800bd02:	460b      	mov	r3, r1
 800bd04:	4945      	ldr	r1, [pc, #276]	@ (800be1c <_strtod_l+0xadc>)
 800bd06:	4a4a      	ldr	r2, [pc, #296]	@ (800be30 <_strtod_l+0xaf0>)
 800bd08:	4019      	ands	r1, r3
 800bd0a:	4291      	cmp	r1, r2
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	d942      	bls.n	800bd96 <_strtod_l+0xa56>
 800bd10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd12:	4b43      	ldr	r3, [pc, #268]	@ (800be20 <_strtod_l+0xae0>)
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d103      	bne.n	800bd20 <_strtod_l+0x9e0>
 800bd18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	f43f ad2b 	beq.w	800b776 <_strtod_l+0x436>
 800bd20:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bd24:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800be20 <_strtod_l+0xae0>
 800bd28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd2a:	9805      	ldr	r0, [sp, #20]
 800bd2c:	f000 ff3a 	bl	800cba4 <_Bfree>
 800bd30:	4649      	mov	r1, r9
 800bd32:	9805      	ldr	r0, [sp, #20]
 800bd34:	f000 ff36 	bl	800cba4 <_Bfree>
 800bd38:	4641      	mov	r1, r8
 800bd3a:	9805      	ldr	r0, [sp, #20]
 800bd3c:	f000 ff32 	bl	800cba4 <_Bfree>
 800bd40:	4621      	mov	r1, r4
 800bd42:	9805      	ldr	r0, [sp, #20]
 800bd44:	f000 ff2e 	bl	800cba4 <_Bfree>
 800bd48:	e618      	b.n	800b97c <_strtod_l+0x63c>
 800bd4a:	f1ba 0f01 	cmp.w	sl, #1
 800bd4e:	d103      	bne.n	800bd58 <_strtod_l+0xa18>
 800bd50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f43f ada5 	beq.w	800b8a2 <_strtod_l+0x562>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4b36      	ldr	r3, [pc, #216]	@ (800be34 <_strtod_l+0xaf4>)
 800bd5c:	2600      	movs	r6, #0
 800bd5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd62:	4f30      	ldr	r7, [pc, #192]	@ (800be24 <_strtod_l+0xae4>)
 800bd64:	e7b3      	b.n	800bcce <_strtod_l+0x98e>
 800bd66:	2600      	movs	r6, #0
 800bd68:	4f2f      	ldr	r7, [pc, #188]	@ (800be28 <_strtod_l+0xae8>)
 800bd6a:	e7ac      	b.n	800bcc6 <_strtod_l+0x986>
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	4639      	mov	r1, r7
 800bd70:	4b2d      	ldr	r3, [pc, #180]	@ (800be28 <_strtod_l+0xae8>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	f7f4 fc64 	bl	8000640 <__aeabi_dmul>
 800bd78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd7a:	4606      	mov	r6, r0
 800bd7c:	460f      	mov	r7, r1
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0a1      	beq.n	800bcc6 <_strtod_l+0x986>
 800bd82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bd86:	e7a2      	b.n	800bcce <_strtod_l+0x98e>
 800bd88:	2200      	movs	r2, #0
 800bd8a:	4b26      	ldr	r3, [pc, #152]	@ (800be24 <_strtod_l+0xae4>)
 800bd8c:	4616      	mov	r6, r2
 800bd8e:	461f      	mov	r7, r3
 800bd90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd94:	e79b      	b.n	800bcce <_strtod_l+0x98e>
 800bd96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bd9a:	9b08      	ldr	r3, [sp, #32]
 800bd9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1c1      	bne.n	800bd28 <_strtod_l+0x9e8>
 800bda4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bda8:	0d1b      	lsrs	r3, r3, #20
 800bdaa:	051b      	lsls	r3, r3, #20
 800bdac:	429d      	cmp	r5, r3
 800bdae:	d1bb      	bne.n	800bd28 <_strtod_l+0x9e8>
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	4639      	mov	r1, r7
 800bdb4:	f7f5 f8a4 	bl	8000f00 <__aeabi_d2lz>
 800bdb8:	f7f4 fc14 	bl	80005e4 <__aeabi_l2d>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	f7f4 fa84 	bl	80002d0 <__aeabi_dsub>
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4602      	mov	r2, r0
 800bdcc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bdd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bdd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdd6:	ea46 060a 	orr.w	r6, r6, sl
 800bdda:	431e      	orrs	r6, r3
 800bddc:	d069      	beq.n	800beb2 <_strtod_l+0xb72>
 800bdde:	a30a      	add	r3, pc, #40	@ (adr r3, 800be08 <_strtod_l+0xac8>)
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	f7f4 fe9e 	bl	8000b24 <__aeabi_dcmplt>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	f47f accf 	bne.w	800b78c <_strtod_l+0x44c>
 800bdee:	a308      	add	r3, pc, #32	@ (adr r3, 800be10 <_strtod_l+0xad0>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdf8:	f7f4 feb2 	bl	8000b60 <__aeabi_dcmpgt>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d093      	beq.n	800bd28 <_strtod_l+0x9e8>
 800be00:	e4c4      	b.n	800b78c <_strtod_l+0x44c>
 800be02:	bf00      	nop
 800be04:	f3af 8000 	nop.w
 800be08:	94a03595 	.word	0x94a03595
 800be0c:	3fdfffff 	.word	0x3fdfffff
 800be10:	35afe535 	.word	0x35afe535
 800be14:	3fe00000 	.word	0x3fe00000
 800be18:	000fffff 	.word	0x000fffff
 800be1c:	7ff00000 	.word	0x7ff00000
 800be20:	7fefffff 	.word	0x7fefffff
 800be24:	3ff00000 	.word	0x3ff00000
 800be28:	3fe00000 	.word	0x3fe00000
 800be2c:	7fe00000 	.word	0x7fe00000
 800be30:	7c9fffff 	.word	0x7c9fffff
 800be34:	bff00000 	.word	0xbff00000
 800be38:	9b08      	ldr	r3, [sp, #32]
 800be3a:	b323      	cbz	r3, 800be86 <_strtod_l+0xb46>
 800be3c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800be40:	d821      	bhi.n	800be86 <_strtod_l+0xb46>
 800be42:	a327      	add	r3, pc, #156	@ (adr r3, 800bee0 <_strtod_l+0xba0>)
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	f7f4 fe74 	bl	8000b38 <__aeabi_dcmple>
 800be50:	b1a0      	cbz	r0, 800be7c <_strtod_l+0xb3c>
 800be52:	4639      	mov	r1, r7
 800be54:	4630      	mov	r0, r6
 800be56:	f7f4 feb5 	bl	8000bc4 <__aeabi_d2uiz>
 800be5a:	2801      	cmp	r0, #1
 800be5c:	bf38      	it	cc
 800be5e:	2001      	movcc	r0, #1
 800be60:	f7f4 fb74 	bl	800054c <__aeabi_ui2d>
 800be64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be66:	4606      	mov	r6, r0
 800be68:	460f      	mov	r7, r1
 800be6a:	b9fb      	cbnz	r3, 800beac <_strtod_l+0xb6c>
 800be6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be70:	9014      	str	r0, [sp, #80]	@ 0x50
 800be72:	9315      	str	r3, [sp, #84]	@ 0x54
 800be74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800be78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be7e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800be82:	1b5b      	subs	r3, r3, r5
 800be84:	9311      	str	r3, [sp, #68]	@ 0x44
 800be86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be8a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800be8e:	f001 f9bb 	bl	800d208 <__ulp>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4650      	mov	r0, sl
 800be98:	4659      	mov	r1, fp
 800be9a:	f7f4 fbd1 	bl	8000640 <__aeabi_dmul>
 800be9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bea2:	f7f4 fa17 	bl	80002d4 <__adddf3>
 800bea6:	4682      	mov	sl, r0
 800bea8:	468b      	mov	fp, r1
 800beaa:	e776      	b.n	800bd9a <_strtod_l+0xa5a>
 800beac:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800beb0:	e7e0      	b.n	800be74 <_strtod_l+0xb34>
 800beb2:	a30d      	add	r3, pc, #52	@ (adr r3, 800bee8 <_strtod_l+0xba8>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f7f4 fe34 	bl	8000b24 <__aeabi_dcmplt>
 800bebc:	e79e      	b.n	800bdfc <_strtod_l+0xabc>
 800bebe:	2300      	movs	r3, #0
 800bec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bec4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	f7ff ba77 	b.w	800b3ba <_strtod_l+0x7a>
 800becc:	2a65      	cmp	r2, #101	@ 0x65
 800bece:	f43f ab6e 	beq.w	800b5ae <_strtod_l+0x26e>
 800bed2:	2a45      	cmp	r2, #69	@ 0x45
 800bed4:	f43f ab6b 	beq.w	800b5ae <_strtod_l+0x26e>
 800bed8:	2301      	movs	r3, #1
 800beda:	f7ff bba6 	b.w	800b62a <_strtod_l+0x2ea>
 800bede:	bf00      	nop
 800bee0:	ffc00000 	.word	0xffc00000
 800bee4:	41dfffff 	.word	0x41dfffff
 800bee8:	94a03595 	.word	0x94a03595
 800beec:	3fcfffff 	.word	0x3fcfffff

0800bef0 <strtod>:
 800bef0:	460a      	mov	r2, r1
 800bef2:	4601      	mov	r1, r0
 800bef4:	4802      	ldr	r0, [pc, #8]	@ (800bf00 <strtod+0x10>)
 800bef6:	4b03      	ldr	r3, [pc, #12]	@ (800bf04 <strtod+0x14>)
 800bef8:	6800      	ldr	r0, [r0, #0]
 800befa:	f7ff ba21 	b.w	800b340 <_strtod_l>
 800befe:	bf00      	nop
 800bf00:	200002f4 	.word	0x200002f4
 800bf04:	20000188 	.word	0x20000188

0800bf08 <gcvt>:
 800bf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf0a:	461c      	mov	r4, r3
 800bf0c:	4615      	mov	r5, r2
 800bf0e:	2300      	movs	r3, #0
 800bf10:	2200      	movs	r2, #0
 800bf12:	b085      	sub	sp, #20
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	f7f4 fe04 	bl	8000b24 <__aeabi_dcmplt>
 800bf1c:	4623      	mov	r3, r4
 800bf1e:	b118      	cbz	r0, 800bf28 <gcvt+0x20>
 800bf20:	222d      	movs	r2, #45	@ 0x2d
 800bf22:	3d01      	subs	r5, #1
 800bf24:	f803 2b01 	strb.w	r2, [r3], #1
 800bf28:	2267      	movs	r2, #103	@ 0x67
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	e9cd 5300 	strd	r5, r3, [sp]
 800bf30:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800bf34:	4905      	ldr	r1, [pc, #20]	@ (800bf4c <gcvt+0x44>)
 800bf36:	4632      	mov	r2, r6
 800bf38:	463b      	mov	r3, r7
 800bf3a:	6808      	ldr	r0, [r1, #0]
 800bf3c:	f001 fb38 	bl	800d5b0 <_gcvt>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	bf18      	it	ne
 800bf44:	4620      	movne	r0, r4
 800bf46:	b005      	add	sp, #20
 800bf48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200002f4 	.word	0x200002f4

0800bf50 <std>:
 800bf50:	2300      	movs	r3, #0
 800bf52:	b510      	push	{r4, lr}
 800bf54:	4604      	mov	r4, r0
 800bf56:	e9c0 3300 	strd	r3, r3, [r0]
 800bf5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf5e:	6083      	str	r3, [r0, #8]
 800bf60:	8181      	strh	r1, [r0, #12]
 800bf62:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf64:	81c2      	strh	r2, [r0, #14]
 800bf66:	6183      	str	r3, [r0, #24]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	305c      	adds	r0, #92	@ 0x5c
 800bf6e:	f000 f8f4 	bl	800c15a <memset>
 800bf72:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa8 <std+0x58>)
 800bf74:	6224      	str	r4, [r4, #32]
 800bf76:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf78:	4b0c      	ldr	r3, [pc, #48]	@ (800bfac <std+0x5c>)
 800bf7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf7c:	4b0c      	ldr	r3, [pc, #48]	@ (800bfb0 <std+0x60>)
 800bf7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf80:	4b0c      	ldr	r3, [pc, #48]	@ (800bfb4 <std+0x64>)
 800bf82:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf84:	4b0c      	ldr	r3, [pc, #48]	@ (800bfb8 <std+0x68>)
 800bf86:	429c      	cmp	r4, r3
 800bf88:	d006      	beq.n	800bf98 <std+0x48>
 800bf8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf8e:	4294      	cmp	r4, r2
 800bf90:	d002      	beq.n	800bf98 <std+0x48>
 800bf92:	33d0      	adds	r3, #208	@ 0xd0
 800bf94:	429c      	cmp	r4, r3
 800bf96:	d105      	bne.n	800bfa4 <std+0x54>
 800bf98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa0:	f000 b966 	b.w	800c270 <__retarget_lock_init_recursive>
 800bfa4:	bd10      	pop	{r4, pc}
 800bfa6:	bf00      	nop
 800bfa8:	0800c0d5 	.word	0x0800c0d5
 800bfac:	0800c0f7 	.word	0x0800c0f7
 800bfb0:	0800c12f 	.word	0x0800c12f
 800bfb4:	0800c153 	.word	0x0800c153
 800bfb8:	20001798 	.word	0x20001798

0800bfbc <stdio_exit_handler>:
 800bfbc:	4a02      	ldr	r2, [pc, #8]	@ (800bfc8 <stdio_exit_handler+0xc>)
 800bfbe:	4903      	ldr	r1, [pc, #12]	@ (800bfcc <stdio_exit_handler+0x10>)
 800bfc0:	4803      	ldr	r0, [pc, #12]	@ (800bfd0 <stdio_exit_handler+0x14>)
 800bfc2:	f000 b869 	b.w	800c098 <_fwalk_sglue>
 800bfc6:	bf00      	nop
 800bfc8:	2000017c 	.word	0x2000017c
 800bfcc:	0800d839 	.word	0x0800d839
 800bfd0:	200002f8 	.word	0x200002f8

0800bfd4 <cleanup_stdio>:
 800bfd4:	6841      	ldr	r1, [r0, #4]
 800bfd6:	4b0c      	ldr	r3, [pc, #48]	@ (800c008 <cleanup_stdio+0x34>)
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	4299      	cmp	r1, r3
 800bfdc:	4604      	mov	r4, r0
 800bfde:	d001      	beq.n	800bfe4 <cleanup_stdio+0x10>
 800bfe0:	f001 fc2a 	bl	800d838 <_fflush_r>
 800bfe4:	68a1      	ldr	r1, [r4, #8]
 800bfe6:	4b09      	ldr	r3, [pc, #36]	@ (800c00c <cleanup_stdio+0x38>)
 800bfe8:	4299      	cmp	r1, r3
 800bfea:	d002      	beq.n	800bff2 <cleanup_stdio+0x1e>
 800bfec:	4620      	mov	r0, r4
 800bfee:	f001 fc23 	bl	800d838 <_fflush_r>
 800bff2:	68e1      	ldr	r1, [r4, #12]
 800bff4:	4b06      	ldr	r3, [pc, #24]	@ (800c010 <cleanup_stdio+0x3c>)
 800bff6:	4299      	cmp	r1, r3
 800bff8:	d004      	beq.n	800c004 <cleanup_stdio+0x30>
 800bffa:	4620      	mov	r0, r4
 800bffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c000:	f001 bc1a 	b.w	800d838 <_fflush_r>
 800c004:	bd10      	pop	{r4, pc}
 800c006:	bf00      	nop
 800c008:	20001798 	.word	0x20001798
 800c00c:	20001800 	.word	0x20001800
 800c010:	20001868 	.word	0x20001868

0800c014 <global_stdio_init.part.0>:
 800c014:	b510      	push	{r4, lr}
 800c016:	4b0b      	ldr	r3, [pc, #44]	@ (800c044 <global_stdio_init.part.0+0x30>)
 800c018:	4c0b      	ldr	r4, [pc, #44]	@ (800c048 <global_stdio_init.part.0+0x34>)
 800c01a:	4a0c      	ldr	r2, [pc, #48]	@ (800c04c <global_stdio_init.part.0+0x38>)
 800c01c:	4620      	mov	r0, r4
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	2104      	movs	r1, #4
 800c022:	2200      	movs	r2, #0
 800c024:	f7ff ff94 	bl	800bf50 <std>
 800c028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c02c:	2201      	movs	r2, #1
 800c02e:	2109      	movs	r1, #9
 800c030:	f7ff ff8e 	bl	800bf50 <std>
 800c034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c038:	2202      	movs	r2, #2
 800c03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c03e:	2112      	movs	r1, #18
 800c040:	f7ff bf86 	b.w	800bf50 <std>
 800c044:	200018d0 	.word	0x200018d0
 800c048:	20001798 	.word	0x20001798
 800c04c:	0800bfbd 	.word	0x0800bfbd

0800c050 <__sfp_lock_acquire>:
 800c050:	4801      	ldr	r0, [pc, #4]	@ (800c058 <__sfp_lock_acquire+0x8>)
 800c052:	f000 b90e 	b.w	800c272 <__retarget_lock_acquire_recursive>
 800c056:	bf00      	nop
 800c058:	200018d9 	.word	0x200018d9

0800c05c <__sfp_lock_release>:
 800c05c:	4801      	ldr	r0, [pc, #4]	@ (800c064 <__sfp_lock_release+0x8>)
 800c05e:	f000 b909 	b.w	800c274 <__retarget_lock_release_recursive>
 800c062:	bf00      	nop
 800c064:	200018d9 	.word	0x200018d9

0800c068 <__sinit>:
 800c068:	b510      	push	{r4, lr}
 800c06a:	4604      	mov	r4, r0
 800c06c:	f7ff fff0 	bl	800c050 <__sfp_lock_acquire>
 800c070:	6a23      	ldr	r3, [r4, #32]
 800c072:	b11b      	cbz	r3, 800c07c <__sinit+0x14>
 800c074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c078:	f7ff bff0 	b.w	800c05c <__sfp_lock_release>
 800c07c:	4b04      	ldr	r3, [pc, #16]	@ (800c090 <__sinit+0x28>)
 800c07e:	6223      	str	r3, [r4, #32]
 800c080:	4b04      	ldr	r3, [pc, #16]	@ (800c094 <__sinit+0x2c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1f5      	bne.n	800c074 <__sinit+0xc>
 800c088:	f7ff ffc4 	bl	800c014 <global_stdio_init.part.0>
 800c08c:	e7f2      	b.n	800c074 <__sinit+0xc>
 800c08e:	bf00      	nop
 800c090:	0800bfd5 	.word	0x0800bfd5
 800c094:	200018d0 	.word	0x200018d0

0800c098 <_fwalk_sglue>:
 800c098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c09c:	4607      	mov	r7, r0
 800c09e:	4688      	mov	r8, r1
 800c0a0:	4614      	mov	r4, r2
 800c0a2:	2600      	movs	r6, #0
 800c0a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0a8:	f1b9 0901 	subs.w	r9, r9, #1
 800c0ac:	d505      	bpl.n	800c0ba <_fwalk_sglue+0x22>
 800c0ae:	6824      	ldr	r4, [r4, #0]
 800c0b0:	2c00      	cmp	r4, #0
 800c0b2:	d1f7      	bne.n	800c0a4 <_fwalk_sglue+0xc>
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ba:	89ab      	ldrh	r3, [r5, #12]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d907      	bls.n	800c0d0 <_fwalk_sglue+0x38>
 800c0c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	d003      	beq.n	800c0d0 <_fwalk_sglue+0x38>
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	47c0      	blx	r8
 800c0ce:	4306      	orrs	r6, r0
 800c0d0:	3568      	adds	r5, #104	@ 0x68
 800c0d2:	e7e9      	b.n	800c0a8 <_fwalk_sglue+0x10>

0800c0d4 <__sread>:
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0dc:	f000 f87a 	bl	800c1d4 <_read_r>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	bfab      	itete	ge
 800c0e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0e8:	181b      	addge	r3, r3, r0
 800c0ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0ee:	bfac      	ite	ge
 800c0f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c0f2:	81a3      	strhlt	r3, [r4, #12]
 800c0f4:	bd10      	pop	{r4, pc}

0800c0f6 <__swrite>:
 800c0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fa:	461f      	mov	r7, r3
 800c0fc:	898b      	ldrh	r3, [r1, #12]
 800c0fe:	4605      	mov	r5, r0
 800c100:	05db      	lsls	r3, r3, #23
 800c102:	460c      	mov	r4, r1
 800c104:	4616      	mov	r6, r2
 800c106:	d505      	bpl.n	800c114 <__swrite+0x1e>
 800c108:	2302      	movs	r3, #2
 800c10a:	2200      	movs	r2, #0
 800c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c110:	f000 f84e 	bl	800c1b0 <_lseek_r>
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	4632      	mov	r2, r6
 800c118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c11c:	81a3      	strh	r3, [r4, #12]
 800c11e:	4628      	mov	r0, r5
 800c120:	463b      	mov	r3, r7
 800c122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c12a:	f000 b865 	b.w	800c1f8 <_write_r>

0800c12e <__sseek>:
 800c12e:	b510      	push	{r4, lr}
 800c130:	460c      	mov	r4, r1
 800c132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c136:	f000 f83b 	bl	800c1b0 <_lseek_r>
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	bf15      	itete	ne
 800c140:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c14a:	81a3      	strheq	r3, [r4, #12]
 800c14c:	bf18      	it	ne
 800c14e:	81a3      	strhne	r3, [r4, #12]
 800c150:	bd10      	pop	{r4, pc}

0800c152 <__sclose>:
 800c152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c156:	f000 b81b 	b.w	800c190 <_close_r>

0800c15a <memset>:
 800c15a:	4603      	mov	r3, r0
 800c15c:	4402      	add	r2, r0
 800c15e:	4293      	cmp	r3, r2
 800c160:	d100      	bne.n	800c164 <memset+0xa>
 800c162:	4770      	bx	lr
 800c164:	f803 1b01 	strb.w	r1, [r3], #1
 800c168:	e7f9      	b.n	800c15e <memset+0x4>

0800c16a <strncmp>:
 800c16a:	b510      	push	{r4, lr}
 800c16c:	b16a      	cbz	r2, 800c18a <strncmp+0x20>
 800c16e:	3901      	subs	r1, #1
 800c170:	1884      	adds	r4, r0, r2
 800c172:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c176:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d103      	bne.n	800c186 <strncmp+0x1c>
 800c17e:	42a0      	cmp	r0, r4
 800c180:	d001      	beq.n	800c186 <strncmp+0x1c>
 800c182:	2a00      	cmp	r2, #0
 800c184:	d1f5      	bne.n	800c172 <strncmp+0x8>
 800c186:	1ad0      	subs	r0, r2, r3
 800c188:	bd10      	pop	{r4, pc}
 800c18a:	4610      	mov	r0, r2
 800c18c:	e7fc      	b.n	800c188 <strncmp+0x1e>
	...

0800c190 <_close_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	2300      	movs	r3, #0
 800c194:	4d05      	ldr	r5, [pc, #20]	@ (800c1ac <_close_r+0x1c>)
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	f7f5 fd6f 	bl	8001c7e <_close>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_close_r+0x1a>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_close_r+0x1a>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	200018d4 	.word	0x200018d4

0800c1b0 <_lseek_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	4608      	mov	r0, r1
 800c1b6:	4611      	mov	r1, r2
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	4d05      	ldr	r5, [pc, #20]	@ (800c1d0 <_lseek_r+0x20>)
 800c1bc:	602a      	str	r2, [r5, #0]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	f7f5 fd81 	bl	8001cc6 <_lseek>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_lseek_r+0x1e>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_lseek_r+0x1e>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	200018d4 	.word	0x200018d4

0800c1d4 <_read_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	4608      	mov	r0, r1
 800c1da:	4611      	mov	r1, r2
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4d05      	ldr	r5, [pc, #20]	@ (800c1f4 <_read_r+0x20>)
 800c1e0:	602a      	str	r2, [r5, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f7f5 fd12 	bl	8001c0c <_read>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_read_r+0x1e>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_read_r+0x1e>
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	200018d4 	.word	0x200018d4

0800c1f8 <_write_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	4611      	mov	r1, r2
 800c200:	2200      	movs	r2, #0
 800c202:	4d05      	ldr	r5, [pc, #20]	@ (800c218 <_write_r+0x20>)
 800c204:	602a      	str	r2, [r5, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	f7f5 fd1d 	bl	8001c46 <_write>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_write_r+0x1e>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	b103      	cbz	r3, 800c216 <_write_r+0x1e>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	200018d4 	.word	0x200018d4

0800c21c <__errno>:
 800c21c:	4b01      	ldr	r3, [pc, #4]	@ (800c224 <__errno+0x8>)
 800c21e:	6818      	ldr	r0, [r3, #0]
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	200002f4 	.word	0x200002f4

0800c228 <__libc_init_array>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	2600      	movs	r6, #0
 800c22c:	4d0c      	ldr	r5, [pc, #48]	@ (800c260 <__libc_init_array+0x38>)
 800c22e:	4c0d      	ldr	r4, [pc, #52]	@ (800c264 <__libc_init_array+0x3c>)
 800c230:	1b64      	subs	r4, r4, r5
 800c232:	10a4      	asrs	r4, r4, #2
 800c234:	42a6      	cmp	r6, r4
 800c236:	d109      	bne.n	800c24c <__libc_init_array+0x24>
 800c238:	f002 fe1e 	bl	800ee78 <_init>
 800c23c:	2600      	movs	r6, #0
 800c23e:	4d0a      	ldr	r5, [pc, #40]	@ (800c268 <__libc_init_array+0x40>)
 800c240:	4c0a      	ldr	r4, [pc, #40]	@ (800c26c <__libc_init_array+0x44>)
 800c242:	1b64      	subs	r4, r4, r5
 800c244:	10a4      	asrs	r4, r4, #2
 800c246:	42a6      	cmp	r6, r4
 800c248:	d105      	bne.n	800c256 <__libc_init_array+0x2e>
 800c24a:	bd70      	pop	{r4, r5, r6, pc}
 800c24c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c250:	4798      	blx	r3
 800c252:	3601      	adds	r6, #1
 800c254:	e7ee      	b.n	800c234 <__libc_init_array+0xc>
 800c256:	f855 3b04 	ldr.w	r3, [r5], #4
 800c25a:	4798      	blx	r3
 800c25c:	3601      	adds	r6, #1
 800c25e:	e7f2      	b.n	800c246 <__libc_init_array+0x1e>
 800c260:	0800f348 	.word	0x0800f348
 800c264:	0800f348 	.word	0x0800f348
 800c268:	0800f348 	.word	0x0800f348
 800c26c:	0800f34c 	.word	0x0800f34c

0800c270 <__retarget_lock_init_recursive>:
 800c270:	4770      	bx	lr

0800c272 <__retarget_lock_acquire_recursive>:
 800c272:	4770      	bx	lr

0800c274 <__retarget_lock_release_recursive>:
 800c274:	4770      	bx	lr

0800c276 <memcpy>:
 800c276:	440a      	add	r2, r1
 800c278:	4291      	cmp	r1, r2
 800c27a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c27e:	d100      	bne.n	800c282 <memcpy+0xc>
 800c280:	4770      	bx	lr
 800c282:	b510      	push	{r4, lr}
 800c284:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c288:	4291      	cmp	r1, r2
 800c28a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c28e:	d1f9      	bne.n	800c284 <memcpy+0xe>
 800c290:	bd10      	pop	{r4, pc}
	...

0800c294 <nan>:
 800c294:	2000      	movs	r0, #0
 800c296:	4901      	ldr	r1, [pc, #4]	@ (800c29c <nan+0x8>)
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	7ff80000 	.word	0x7ff80000

0800c2a0 <_free_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	2900      	cmp	r1, #0
 800c2a6:	d040      	beq.n	800c32a <_free_r+0x8a>
 800c2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ac:	1f0c      	subs	r4, r1, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfb8      	it	lt
 800c2b2:	18e4      	addlt	r4, r4, r3
 800c2b4:	f000 fc2a 	bl	800cb0c <__malloc_lock>
 800c2b8:	4a1c      	ldr	r2, [pc, #112]	@ (800c32c <_free_r+0x8c>)
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	b933      	cbnz	r3, 800c2cc <_free_r+0x2c>
 800c2be:	6063      	str	r3, [r4, #4]
 800c2c0:	6014      	str	r4, [r2, #0]
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2c8:	f000 bc26 	b.w	800cb18 <__malloc_unlock>
 800c2cc:	42a3      	cmp	r3, r4
 800c2ce:	d908      	bls.n	800c2e2 <_free_r+0x42>
 800c2d0:	6820      	ldr	r0, [r4, #0]
 800c2d2:	1821      	adds	r1, r4, r0
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	bf01      	itttt	eq
 800c2d8:	6819      	ldreq	r1, [r3, #0]
 800c2da:	685b      	ldreq	r3, [r3, #4]
 800c2dc:	1809      	addeq	r1, r1, r0
 800c2de:	6021      	streq	r1, [r4, #0]
 800c2e0:	e7ed      	b.n	800c2be <_free_r+0x1e>
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	b10b      	cbz	r3, 800c2ec <_free_r+0x4c>
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	d9fa      	bls.n	800c2e2 <_free_r+0x42>
 800c2ec:	6811      	ldr	r1, [r2, #0]
 800c2ee:	1850      	adds	r0, r2, r1
 800c2f0:	42a0      	cmp	r0, r4
 800c2f2:	d10b      	bne.n	800c30c <_free_r+0x6c>
 800c2f4:	6820      	ldr	r0, [r4, #0]
 800c2f6:	4401      	add	r1, r0
 800c2f8:	1850      	adds	r0, r2, r1
 800c2fa:	4283      	cmp	r3, r0
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	d1e0      	bne.n	800c2c2 <_free_r+0x22>
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	4408      	add	r0, r1
 800c306:	6010      	str	r0, [r2, #0]
 800c308:	6053      	str	r3, [r2, #4]
 800c30a:	e7da      	b.n	800c2c2 <_free_r+0x22>
 800c30c:	d902      	bls.n	800c314 <_free_r+0x74>
 800c30e:	230c      	movs	r3, #12
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	e7d6      	b.n	800c2c2 <_free_r+0x22>
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	1821      	adds	r1, r4, r0
 800c318:	428b      	cmp	r3, r1
 800c31a:	bf01      	itttt	eq
 800c31c:	6819      	ldreq	r1, [r3, #0]
 800c31e:	685b      	ldreq	r3, [r3, #4]
 800c320:	1809      	addeq	r1, r1, r0
 800c322:	6021      	streq	r1, [r4, #0]
 800c324:	6063      	str	r3, [r4, #4]
 800c326:	6054      	str	r4, [r2, #4]
 800c328:	e7cb      	b.n	800c2c2 <_free_r+0x22>
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	200018e0 	.word	0x200018e0

0800c330 <rshift>:
 800c330:	6903      	ldr	r3, [r0, #16]
 800c332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c336:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c33a:	f100 0414 	add.w	r4, r0, #20
 800c33e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c342:	dd46      	ble.n	800c3d2 <rshift+0xa2>
 800c344:	f011 011f 	ands.w	r1, r1, #31
 800c348:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c34c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c350:	d10c      	bne.n	800c36c <rshift+0x3c>
 800c352:	4629      	mov	r1, r5
 800c354:	f100 0710 	add.w	r7, r0, #16
 800c358:	42b1      	cmp	r1, r6
 800c35a:	d335      	bcc.n	800c3c8 <rshift+0x98>
 800c35c:	1a9b      	subs	r3, r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	1eea      	subs	r2, r5, #3
 800c362:	4296      	cmp	r6, r2
 800c364:	bf38      	it	cc
 800c366:	2300      	movcc	r3, #0
 800c368:	4423      	add	r3, r4
 800c36a:	e015      	b.n	800c398 <rshift+0x68>
 800c36c:	46a1      	mov	r9, r4
 800c36e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c372:	f1c1 0820 	rsb	r8, r1, #32
 800c376:	40cf      	lsrs	r7, r1
 800c378:	f105 0e04 	add.w	lr, r5, #4
 800c37c:	4576      	cmp	r6, lr
 800c37e:	46f4      	mov	ip, lr
 800c380:	d816      	bhi.n	800c3b0 <rshift+0x80>
 800c382:	1a9a      	subs	r2, r3, r2
 800c384:	0092      	lsls	r2, r2, #2
 800c386:	3a04      	subs	r2, #4
 800c388:	3501      	adds	r5, #1
 800c38a:	42ae      	cmp	r6, r5
 800c38c:	bf38      	it	cc
 800c38e:	2200      	movcc	r2, #0
 800c390:	18a3      	adds	r3, r4, r2
 800c392:	50a7      	str	r7, [r4, r2]
 800c394:	b107      	cbz	r7, 800c398 <rshift+0x68>
 800c396:	3304      	adds	r3, #4
 800c398:	42a3      	cmp	r3, r4
 800c39a:	eba3 0204 	sub.w	r2, r3, r4
 800c39e:	bf08      	it	eq
 800c3a0:	2300      	moveq	r3, #0
 800c3a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3a6:	6102      	str	r2, [r0, #16]
 800c3a8:	bf08      	it	eq
 800c3aa:	6143      	streq	r3, [r0, #20]
 800c3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3b0:	f8dc c000 	ldr.w	ip, [ip]
 800c3b4:	fa0c fc08 	lsl.w	ip, ip, r8
 800c3b8:	ea4c 0707 	orr.w	r7, ip, r7
 800c3bc:	f849 7b04 	str.w	r7, [r9], #4
 800c3c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3c4:	40cf      	lsrs	r7, r1
 800c3c6:	e7d9      	b.n	800c37c <rshift+0x4c>
 800c3c8:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3cc:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3d0:	e7c2      	b.n	800c358 <rshift+0x28>
 800c3d2:	4623      	mov	r3, r4
 800c3d4:	e7e0      	b.n	800c398 <rshift+0x68>

0800c3d6 <__hexdig_fun>:
 800c3d6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c3da:	2b09      	cmp	r3, #9
 800c3dc:	d802      	bhi.n	800c3e4 <__hexdig_fun+0xe>
 800c3de:	3820      	subs	r0, #32
 800c3e0:	b2c0      	uxtb	r0, r0
 800c3e2:	4770      	bx	lr
 800c3e4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c3e8:	2b05      	cmp	r3, #5
 800c3ea:	d801      	bhi.n	800c3f0 <__hexdig_fun+0x1a>
 800c3ec:	3847      	subs	r0, #71	@ 0x47
 800c3ee:	e7f7      	b.n	800c3e0 <__hexdig_fun+0xa>
 800c3f0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c3f4:	2b05      	cmp	r3, #5
 800c3f6:	d801      	bhi.n	800c3fc <__hexdig_fun+0x26>
 800c3f8:	3827      	subs	r0, #39	@ 0x27
 800c3fa:	e7f1      	b.n	800c3e0 <__hexdig_fun+0xa>
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	4770      	bx	lr

0800c400 <__gethex>:
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	468a      	mov	sl, r1
 800c406:	4690      	mov	r8, r2
 800c408:	b085      	sub	sp, #20
 800c40a:	9302      	str	r3, [sp, #8]
 800c40c:	680b      	ldr	r3, [r1, #0]
 800c40e:	9001      	str	r0, [sp, #4]
 800c410:	1c9c      	adds	r4, r3, #2
 800c412:	46a1      	mov	r9, r4
 800c414:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c418:	2830      	cmp	r0, #48	@ 0x30
 800c41a:	d0fa      	beq.n	800c412 <__gethex+0x12>
 800c41c:	eba9 0303 	sub.w	r3, r9, r3
 800c420:	f1a3 0b02 	sub.w	fp, r3, #2
 800c424:	f7ff ffd7 	bl	800c3d6 <__hexdig_fun>
 800c428:	4605      	mov	r5, r0
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d168      	bne.n	800c500 <__gethex+0x100>
 800c42e:	2201      	movs	r2, #1
 800c430:	4648      	mov	r0, r9
 800c432:	499f      	ldr	r1, [pc, #636]	@ (800c6b0 <__gethex+0x2b0>)
 800c434:	f7ff fe99 	bl	800c16a <strncmp>
 800c438:	4607      	mov	r7, r0
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d167      	bne.n	800c50e <__gethex+0x10e>
 800c43e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c442:	4626      	mov	r6, r4
 800c444:	f7ff ffc7 	bl	800c3d6 <__hexdig_fun>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d062      	beq.n	800c512 <__gethex+0x112>
 800c44c:	4623      	mov	r3, r4
 800c44e:	7818      	ldrb	r0, [r3, #0]
 800c450:	4699      	mov	r9, r3
 800c452:	2830      	cmp	r0, #48	@ 0x30
 800c454:	f103 0301 	add.w	r3, r3, #1
 800c458:	d0f9      	beq.n	800c44e <__gethex+0x4e>
 800c45a:	f7ff ffbc 	bl	800c3d6 <__hexdig_fun>
 800c45e:	fab0 f580 	clz	r5, r0
 800c462:	f04f 0b01 	mov.w	fp, #1
 800c466:	096d      	lsrs	r5, r5, #5
 800c468:	464a      	mov	r2, r9
 800c46a:	4616      	mov	r6, r2
 800c46c:	7830      	ldrb	r0, [r6, #0]
 800c46e:	3201      	adds	r2, #1
 800c470:	f7ff ffb1 	bl	800c3d6 <__hexdig_fun>
 800c474:	2800      	cmp	r0, #0
 800c476:	d1f8      	bne.n	800c46a <__gethex+0x6a>
 800c478:	2201      	movs	r2, #1
 800c47a:	4630      	mov	r0, r6
 800c47c:	498c      	ldr	r1, [pc, #560]	@ (800c6b0 <__gethex+0x2b0>)
 800c47e:	f7ff fe74 	bl	800c16a <strncmp>
 800c482:	2800      	cmp	r0, #0
 800c484:	d13f      	bne.n	800c506 <__gethex+0x106>
 800c486:	b944      	cbnz	r4, 800c49a <__gethex+0x9a>
 800c488:	1c74      	adds	r4, r6, #1
 800c48a:	4622      	mov	r2, r4
 800c48c:	4616      	mov	r6, r2
 800c48e:	7830      	ldrb	r0, [r6, #0]
 800c490:	3201      	adds	r2, #1
 800c492:	f7ff ffa0 	bl	800c3d6 <__hexdig_fun>
 800c496:	2800      	cmp	r0, #0
 800c498:	d1f8      	bne.n	800c48c <__gethex+0x8c>
 800c49a:	1ba4      	subs	r4, r4, r6
 800c49c:	00a7      	lsls	r7, r4, #2
 800c49e:	7833      	ldrb	r3, [r6, #0]
 800c4a0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c4a4:	2b50      	cmp	r3, #80	@ 0x50
 800c4a6:	d13e      	bne.n	800c526 <__gethex+0x126>
 800c4a8:	7873      	ldrb	r3, [r6, #1]
 800c4aa:	2b2b      	cmp	r3, #43	@ 0x2b
 800c4ac:	d033      	beq.n	800c516 <__gethex+0x116>
 800c4ae:	2b2d      	cmp	r3, #45	@ 0x2d
 800c4b0:	d034      	beq.n	800c51c <__gethex+0x11c>
 800c4b2:	2400      	movs	r4, #0
 800c4b4:	1c71      	adds	r1, r6, #1
 800c4b6:	7808      	ldrb	r0, [r1, #0]
 800c4b8:	f7ff ff8d 	bl	800c3d6 <__hexdig_fun>
 800c4bc:	1e43      	subs	r3, r0, #1
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b18      	cmp	r3, #24
 800c4c2:	d830      	bhi.n	800c526 <__gethex+0x126>
 800c4c4:	f1a0 0210 	sub.w	r2, r0, #16
 800c4c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4cc:	f7ff ff83 	bl	800c3d6 <__hexdig_fun>
 800c4d0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c4d4:	fa5f fc8c 	uxtb.w	ip, ip
 800c4d8:	f1bc 0f18 	cmp.w	ip, #24
 800c4dc:	f04f 030a 	mov.w	r3, #10
 800c4e0:	d91e      	bls.n	800c520 <__gethex+0x120>
 800c4e2:	b104      	cbz	r4, 800c4e6 <__gethex+0xe6>
 800c4e4:	4252      	negs	r2, r2
 800c4e6:	4417      	add	r7, r2
 800c4e8:	f8ca 1000 	str.w	r1, [sl]
 800c4ec:	b1ed      	cbz	r5, 800c52a <__gethex+0x12a>
 800c4ee:	f1bb 0f00 	cmp.w	fp, #0
 800c4f2:	bf0c      	ite	eq
 800c4f4:	2506      	moveq	r5, #6
 800c4f6:	2500      	movne	r5, #0
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	b005      	add	sp, #20
 800c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c500:	2500      	movs	r5, #0
 800c502:	462c      	mov	r4, r5
 800c504:	e7b0      	b.n	800c468 <__gethex+0x68>
 800c506:	2c00      	cmp	r4, #0
 800c508:	d1c7      	bne.n	800c49a <__gethex+0x9a>
 800c50a:	4627      	mov	r7, r4
 800c50c:	e7c7      	b.n	800c49e <__gethex+0x9e>
 800c50e:	464e      	mov	r6, r9
 800c510:	462f      	mov	r7, r5
 800c512:	2501      	movs	r5, #1
 800c514:	e7c3      	b.n	800c49e <__gethex+0x9e>
 800c516:	2400      	movs	r4, #0
 800c518:	1cb1      	adds	r1, r6, #2
 800c51a:	e7cc      	b.n	800c4b6 <__gethex+0xb6>
 800c51c:	2401      	movs	r4, #1
 800c51e:	e7fb      	b.n	800c518 <__gethex+0x118>
 800c520:	fb03 0002 	mla	r0, r3, r2, r0
 800c524:	e7ce      	b.n	800c4c4 <__gethex+0xc4>
 800c526:	4631      	mov	r1, r6
 800c528:	e7de      	b.n	800c4e8 <__gethex+0xe8>
 800c52a:	4629      	mov	r1, r5
 800c52c:	eba6 0309 	sub.w	r3, r6, r9
 800c530:	3b01      	subs	r3, #1
 800c532:	2b07      	cmp	r3, #7
 800c534:	dc0a      	bgt.n	800c54c <__gethex+0x14c>
 800c536:	9801      	ldr	r0, [sp, #4]
 800c538:	f000 faf4 	bl	800cb24 <_Balloc>
 800c53c:	4604      	mov	r4, r0
 800c53e:	b940      	cbnz	r0, 800c552 <__gethex+0x152>
 800c540:	4602      	mov	r2, r0
 800c542:	21e4      	movs	r1, #228	@ 0xe4
 800c544:	4b5b      	ldr	r3, [pc, #364]	@ (800c6b4 <__gethex+0x2b4>)
 800c546:	485c      	ldr	r0, [pc, #368]	@ (800c6b8 <__gethex+0x2b8>)
 800c548:	f001 f9b6 	bl	800d8b8 <__assert_func>
 800c54c:	3101      	adds	r1, #1
 800c54e:	105b      	asrs	r3, r3, #1
 800c550:	e7ef      	b.n	800c532 <__gethex+0x132>
 800c552:	2300      	movs	r3, #0
 800c554:	f100 0a14 	add.w	sl, r0, #20
 800c558:	4655      	mov	r5, sl
 800c55a:	469b      	mov	fp, r3
 800c55c:	45b1      	cmp	r9, r6
 800c55e:	d337      	bcc.n	800c5d0 <__gethex+0x1d0>
 800c560:	f845 bb04 	str.w	fp, [r5], #4
 800c564:	eba5 050a 	sub.w	r5, r5, sl
 800c568:	10ad      	asrs	r5, r5, #2
 800c56a:	6125      	str	r5, [r4, #16]
 800c56c:	4658      	mov	r0, fp
 800c56e:	f000 fbcb 	bl	800cd08 <__hi0bits>
 800c572:	016d      	lsls	r5, r5, #5
 800c574:	f8d8 6000 	ldr.w	r6, [r8]
 800c578:	1a2d      	subs	r5, r5, r0
 800c57a:	42b5      	cmp	r5, r6
 800c57c:	dd54      	ble.n	800c628 <__gethex+0x228>
 800c57e:	1bad      	subs	r5, r5, r6
 800c580:	4629      	mov	r1, r5
 800c582:	4620      	mov	r0, r4
 800c584:	f000 ff6f 	bl	800d466 <__any_on>
 800c588:	4681      	mov	r9, r0
 800c58a:	b178      	cbz	r0, 800c5ac <__gethex+0x1ac>
 800c58c:	f04f 0901 	mov.w	r9, #1
 800c590:	1e6b      	subs	r3, r5, #1
 800c592:	1159      	asrs	r1, r3, #5
 800c594:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c598:	f003 021f 	and.w	r2, r3, #31
 800c59c:	fa09 f202 	lsl.w	r2, r9, r2
 800c5a0:	420a      	tst	r2, r1
 800c5a2:	d003      	beq.n	800c5ac <__gethex+0x1ac>
 800c5a4:	454b      	cmp	r3, r9
 800c5a6:	dc36      	bgt.n	800c616 <__gethex+0x216>
 800c5a8:	f04f 0902 	mov.w	r9, #2
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f7ff febe 	bl	800c330 <rshift>
 800c5b4:	442f      	add	r7, r5
 800c5b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5ba:	42bb      	cmp	r3, r7
 800c5bc:	da42      	bge.n	800c644 <__gethex+0x244>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	9801      	ldr	r0, [sp, #4]
 800c5c2:	f000 faef 	bl	800cba4 <_Bfree>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5ca:	25a3      	movs	r5, #163	@ 0xa3
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	e793      	b.n	800c4f8 <__gethex+0xf8>
 800c5d0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c5d4:	2a2e      	cmp	r2, #46	@ 0x2e
 800c5d6:	d012      	beq.n	800c5fe <__gethex+0x1fe>
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	d104      	bne.n	800c5e6 <__gethex+0x1e6>
 800c5dc:	f845 bb04 	str.w	fp, [r5], #4
 800c5e0:	f04f 0b00 	mov.w	fp, #0
 800c5e4:	465b      	mov	r3, fp
 800c5e6:	7830      	ldrb	r0, [r6, #0]
 800c5e8:	9303      	str	r3, [sp, #12]
 800c5ea:	f7ff fef4 	bl	800c3d6 <__hexdig_fun>
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	f000 000f 	and.w	r0, r0, #15
 800c5f4:	4098      	lsls	r0, r3
 800c5f6:	ea4b 0b00 	orr.w	fp, fp, r0
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	e7ae      	b.n	800c55c <__gethex+0x15c>
 800c5fe:	45b1      	cmp	r9, r6
 800c600:	d8ea      	bhi.n	800c5d8 <__gethex+0x1d8>
 800c602:	2201      	movs	r2, #1
 800c604:	4630      	mov	r0, r6
 800c606:	492a      	ldr	r1, [pc, #168]	@ (800c6b0 <__gethex+0x2b0>)
 800c608:	9303      	str	r3, [sp, #12]
 800c60a:	f7ff fdae 	bl	800c16a <strncmp>
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	2800      	cmp	r0, #0
 800c612:	d1e1      	bne.n	800c5d8 <__gethex+0x1d8>
 800c614:	e7a2      	b.n	800c55c <__gethex+0x15c>
 800c616:	4620      	mov	r0, r4
 800c618:	1ea9      	subs	r1, r5, #2
 800c61a:	f000 ff24 	bl	800d466 <__any_on>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d0c2      	beq.n	800c5a8 <__gethex+0x1a8>
 800c622:	f04f 0903 	mov.w	r9, #3
 800c626:	e7c1      	b.n	800c5ac <__gethex+0x1ac>
 800c628:	da09      	bge.n	800c63e <__gethex+0x23e>
 800c62a:	1b75      	subs	r5, r6, r5
 800c62c:	4621      	mov	r1, r4
 800c62e:	462a      	mov	r2, r5
 800c630:	9801      	ldr	r0, [sp, #4]
 800c632:	f000 fccd 	bl	800cfd0 <__lshift>
 800c636:	4604      	mov	r4, r0
 800c638:	1b7f      	subs	r7, r7, r5
 800c63a:	f100 0a14 	add.w	sl, r0, #20
 800c63e:	f04f 0900 	mov.w	r9, #0
 800c642:	e7b8      	b.n	800c5b6 <__gethex+0x1b6>
 800c644:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c648:	42bd      	cmp	r5, r7
 800c64a:	dd6f      	ble.n	800c72c <__gethex+0x32c>
 800c64c:	1bed      	subs	r5, r5, r7
 800c64e:	42ae      	cmp	r6, r5
 800c650:	dc34      	bgt.n	800c6bc <__gethex+0x2bc>
 800c652:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d022      	beq.n	800c6a0 <__gethex+0x2a0>
 800c65a:	2b03      	cmp	r3, #3
 800c65c:	d024      	beq.n	800c6a8 <__gethex+0x2a8>
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d115      	bne.n	800c68e <__gethex+0x28e>
 800c662:	42ae      	cmp	r6, r5
 800c664:	d113      	bne.n	800c68e <__gethex+0x28e>
 800c666:	2e01      	cmp	r6, #1
 800c668:	d10b      	bne.n	800c682 <__gethex+0x282>
 800c66a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c66e:	9a02      	ldr	r2, [sp, #8]
 800c670:	2562      	movs	r5, #98	@ 0x62
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	2301      	movs	r3, #1
 800c676:	6123      	str	r3, [r4, #16]
 800c678:	f8ca 3000 	str.w	r3, [sl]
 800c67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c67e:	601c      	str	r4, [r3, #0]
 800c680:	e73a      	b.n	800c4f8 <__gethex+0xf8>
 800c682:	4620      	mov	r0, r4
 800c684:	1e71      	subs	r1, r6, #1
 800c686:	f000 feee 	bl	800d466 <__any_on>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d1ed      	bne.n	800c66a <__gethex+0x26a>
 800c68e:	4621      	mov	r1, r4
 800c690:	9801      	ldr	r0, [sp, #4]
 800c692:	f000 fa87 	bl	800cba4 <_Bfree>
 800c696:	2300      	movs	r3, #0
 800c698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c69a:	2550      	movs	r5, #80	@ 0x50
 800c69c:	6013      	str	r3, [r2, #0]
 800c69e:	e72b      	b.n	800c4f8 <__gethex+0xf8>
 800c6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1f3      	bne.n	800c68e <__gethex+0x28e>
 800c6a6:	e7e0      	b.n	800c66a <__gethex+0x26a>
 800c6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1dd      	bne.n	800c66a <__gethex+0x26a>
 800c6ae:	e7ee      	b.n	800c68e <__gethex+0x28e>
 800c6b0:	0800ef26 	.word	0x0800ef26
 800c6b4:	0800ef88 	.word	0x0800ef88
 800c6b8:	0800ef99 	.word	0x0800ef99
 800c6bc:	1e6f      	subs	r7, r5, #1
 800c6be:	f1b9 0f00 	cmp.w	r9, #0
 800c6c2:	d130      	bne.n	800c726 <__gethex+0x326>
 800c6c4:	b127      	cbz	r7, 800c6d0 <__gethex+0x2d0>
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 fecc 	bl	800d466 <__any_on>
 800c6ce:	4681      	mov	r9, r0
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	1b76      	subs	r6, r6, r5
 800c6d6:	2502      	movs	r5, #2
 800c6d8:	117a      	asrs	r2, r7, #5
 800c6da:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c6de:	f007 071f 	and.w	r7, r7, #31
 800c6e2:	40bb      	lsls	r3, r7
 800c6e4:	4213      	tst	r3, r2
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	bf18      	it	ne
 800c6ea:	f049 0902 	orrne.w	r9, r9, #2
 800c6ee:	f7ff fe1f 	bl	800c330 <rshift>
 800c6f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c6f6:	f1b9 0f00 	cmp.w	r9, #0
 800c6fa:	d047      	beq.n	800c78c <__gethex+0x38c>
 800c6fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d015      	beq.n	800c730 <__gethex+0x330>
 800c704:	2b03      	cmp	r3, #3
 800c706:	d017      	beq.n	800c738 <__gethex+0x338>
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d109      	bne.n	800c720 <__gethex+0x320>
 800c70c:	f019 0f02 	tst.w	r9, #2
 800c710:	d006      	beq.n	800c720 <__gethex+0x320>
 800c712:	f8da 3000 	ldr.w	r3, [sl]
 800c716:	ea49 0903 	orr.w	r9, r9, r3
 800c71a:	f019 0f01 	tst.w	r9, #1
 800c71e:	d10e      	bne.n	800c73e <__gethex+0x33e>
 800c720:	f045 0510 	orr.w	r5, r5, #16
 800c724:	e032      	b.n	800c78c <__gethex+0x38c>
 800c726:	f04f 0901 	mov.w	r9, #1
 800c72a:	e7d1      	b.n	800c6d0 <__gethex+0x2d0>
 800c72c:	2501      	movs	r5, #1
 800c72e:	e7e2      	b.n	800c6f6 <__gethex+0x2f6>
 800c730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c732:	f1c3 0301 	rsb	r3, r3, #1
 800c736:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d0f0      	beq.n	800c720 <__gethex+0x320>
 800c73e:	f04f 0c00 	mov.w	ip, #0
 800c742:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c746:	f104 0314 	add.w	r3, r4, #20
 800c74a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c74e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c752:	4618      	mov	r0, r3
 800c754:	f853 2b04 	ldr.w	r2, [r3], #4
 800c758:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c75c:	d01b      	beq.n	800c796 <__gethex+0x396>
 800c75e:	3201      	adds	r2, #1
 800c760:	6002      	str	r2, [r0, #0]
 800c762:	2d02      	cmp	r5, #2
 800c764:	f104 0314 	add.w	r3, r4, #20
 800c768:	d13c      	bne.n	800c7e4 <__gethex+0x3e4>
 800c76a:	f8d8 2000 	ldr.w	r2, [r8]
 800c76e:	3a01      	subs	r2, #1
 800c770:	42b2      	cmp	r2, r6
 800c772:	d109      	bne.n	800c788 <__gethex+0x388>
 800c774:	2201      	movs	r2, #1
 800c776:	1171      	asrs	r1, r6, #5
 800c778:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c77c:	f006 061f 	and.w	r6, r6, #31
 800c780:	fa02 f606 	lsl.w	r6, r2, r6
 800c784:	421e      	tst	r6, r3
 800c786:	d13a      	bne.n	800c7fe <__gethex+0x3fe>
 800c788:	f045 0520 	orr.w	r5, r5, #32
 800c78c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c78e:	601c      	str	r4, [r3, #0]
 800c790:	9b02      	ldr	r3, [sp, #8]
 800c792:	601f      	str	r7, [r3, #0]
 800c794:	e6b0      	b.n	800c4f8 <__gethex+0xf8>
 800c796:	4299      	cmp	r1, r3
 800c798:	f843 cc04 	str.w	ip, [r3, #-4]
 800c79c:	d8d9      	bhi.n	800c752 <__gethex+0x352>
 800c79e:	68a3      	ldr	r3, [r4, #8]
 800c7a0:	459b      	cmp	fp, r3
 800c7a2:	db17      	blt.n	800c7d4 <__gethex+0x3d4>
 800c7a4:	6861      	ldr	r1, [r4, #4]
 800c7a6:	9801      	ldr	r0, [sp, #4]
 800c7a8:	3101      	adds	r1, #1
 800c7aa:	f000 f9bb 	bl	800cb24 <_Balloc>
 800c7ae:	4681      	mov	r9, r0
 800c7b0:	b918      	cbnz	r0, 800c7ba <__gethex+0x3ba>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	2184      	movs	r1, #132	@ 0x84
 800c7b6:	4b19      	ldr	r3, [pc, #100]	@ (800c81c <__gethex+0x41c>)
 800c7b8:	e6c5      	b.n	800c546 <__gethex+0x146>
 800c7ba:	6922      	ldr	r2, [r4, #16]
 800c7bc:	f104 010c 	add.w	r1, r4, #12
 800c7c0:	3202      	adds	r2, #2
 800c7c2:	0092      	lsls	r2, r2, #2
 800c7c4:	300c      	adds	r0, #12
 800c7c6:	f7ff fd56 	bl	800c276 <memcpy>
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	9801      	ldr	r0, [sp, #4]
 800c7ce:	f000 f9e9 	bl	800cba4 <_Bfree>
 800c7d2:	464c      	mov	r4, r9
 800c7d4:	6923      	ldr	r3, [r4, #16]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	6122      	str	r2, [r4, #16]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7e0:	615a      	str	r2, [r3, #20]
 800c7e2:	e7be      	b.n	800c762 <__gethex+0x362>
 800c7e4:	6922      	ldr	r2, [r4, #16]
 800c7e6:	455a      	cmp	r2, fp
 800c7e8:	dd0b      	ble.n	800c802 <__gethex+0x402>
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7ff fd9f 	bl	800c330 <rshift>
 800c7f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7f6:	3701      	adds	r7, #1
 800c7f8:	42bb      	cmp	r3, r7
 800c7fa:	f6ff aee0 	blt.w	800c5be <__gethex+0x1be>
 800c7fe:	2501      	movs	r5, #1
 800c800:	e7c2      	b.n	800c788 <__gethex+0x388>
 800c802:	f016 061f 	ands.w	r6, r6, #31
 800c806:	d0fa      	beq.n	800c7fe <__gethex+0x3fe>
 800c808:	4453      	add	r3, sl
 800c80a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c80e:	f000 fa7b 	bl	800cd08 <__hi0bits>
 800c812:	f1c6 0620 	rsb	r6, r6, #32
 800c816:	42b0      	cmp	r0, r6
 800c818:	dbe7      	blt.n	800c7ea <__gethex+0x3ea>
 800c81a:	e7f0      	b.n	800c7fe <__gethex+0x3fe>
 800c81c:	0800ef88 	.word	0x0800ef88

0800c820 <L_shift>:
 800c820:	f1c2 0208 	rsb	r2, r2, #8
 800c824:	0092      	lsls	r2, r2, #2
 800c826:	b570      	push	{r4, r5, r6, lr}
 800c828:	f1c2 0620 	rsb	r6, r2, #32
 800c82c:	6843      	ldr	r3, [r0, #4]
 800c82e:	6804      	ldr	r4, [r0, #0]
 800c830:	fa03 f506 	lsl.w	r5, r3, r6
 800c834:	432c      	orrs	r4, r5
 800c836:	40d3      	lsrs	r3, r2
 800c838:	6004      	str	r4, [r0, #0]
 800c83a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c83e:	4288      	cmp	r0, r1
 800c840:	d3f4      	bcc.n	800c82c <L_shift+0xc>
 800c842:	bd70      	pop	{r4, r5, r6, pc}

0800c844 <__match>:
 800c844:	b530      	push	{r4, r5, lr}
 800c846:	6803      	ldr	r3, [r0, #0]
 800c848:	3301      	adds	r3, #1
 800c84a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c84e:	b914      	cbnz	r4, 800c856 <__match+0x12>
 800c850:	6003      	str	r3, [r0, #0]
 800c852:	2001      	movs	r0, #1
 800c854:	bd30      	pop	{r4, r5, pc}
 800c856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c85a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c85e:	2d19      	cmp	r5, #25
 800c860:	bf98      	it	ls
 800c862:	3220      	addls	r2, #32
 800c864:	42a2      	cmp	r2, r4
 800c866:	d0f0      	beq.n	800c84a <__match+0x6>
 800c868:	2000      	movs	r0, #0
 800c86a:	e7f3      	b.n	800c854 <__match+0x10>

0800c86c <__hexnan>:
 800c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	2500      	movs	r5, #0
 800c872:	680b      	ldr	r3, [r1, #0]
 800c874:	4682      	mov	sl, r0
 800c876:	115e      	asrs	r6, r3, #5
 800c878:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c87c:	f013 031f 	ands.w	r3, r3, #31
 800c880:	bf18      	it	ne
 800c882:	3604      	addne	r6, #4
 800c884:	1f37      	subs	r7, r6, #4
 800c886:	4690      	mov	r8, r2
 800c888:	46b9      	mov	r9, r7
 800c88a:	463c      	mov	r4, r7
 800c88c:	46ab      	mov	fp, r5
 800c88e:	b087      	sub	sp, #28
 800c890:	6801      	ldr	r1, [r0, #0]
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	f846 5c04 	str.w	r5, [r6, #-4]
 800c898:	9502      	str	r5, [sp, #8]
 800c89a:	784a      	ldrb	r2, [r1, #1]
 800c89c:	1c4b      	adds	r3, r1, #1
 800c89e:	9303      	str	r3, [sp, #12]
 800c8a0:	b342      	cbz	r2, 800c8f4 <__hexnan+0x88>
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	9105      	str	r1, [sp, #20]
 800c8a6:	9204      	str	r2, [sp, #16]
 800c8a8:	f7ff fd95 	bl	800c3d6 <__hexdig_fun>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d151      	bne.n	800c954 <__hexnan+0xe8>
 800c8b0:	9a04      	ldr	r2, [sp, #16]
 800c8b2:	9905      	ldr	r1, [sp, #20]
 800c8b4:	2a20      	cmp	r2, #32
 800c8b6:	d818      	bhi.n	800c8ea <__hexnan+0x7e>
 800c8b8:	9b02      	ldr	r3, [sp, #8]
 800c8ba:	459b      	cmp	fp, r3
 800c8bc:	dd13      	ble.n	800c8e6 <__hexnan+0x7a>
 800c8be:	454c      	cmp	r4, r9
 800c8c0:	d206      	bcs.n	800c8d0 <__hexnan+0x64>
 800c8c2:	2d07      	cmp	r5, #7
 800c8c4:	dc04      	bgt.n	800c8d0 <__hexnan+0x64>
 800c8c6:	462a      	mov	r2, r5
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f7ff ffa8 	bl	800c820 <L_shift>
 800c8d0:	4544      	cmp	r4, r8
 800c8d2:	d952      	bls.n	800c97a <__hexnan+0x10e>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f1a4 0904 	sub.w	r9, r4, #4
 800c8da:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8de:	461d      	mov	r5, r3
 800c8e0:	464c      	mov	r4, r9
 800c8e2:	f8cd b008 	str.w	fp, [sp, #8]
 800c8e6:	9903      	ldr	r1, [sp, #12]
 800c8e8:	e7d7      	b.n	800c89a <__hexnan+0x2e>
 800c8ea:	2a29      	cmp	r2, #41	@ 0x29
 800c8ec:	d157      	bne.n	800c99e <__hexnan+0x132>
 800c8ee:	3102      	adds	r1, #2
 800c8f0:	f8ca 1000 	str.w	r1, [sl]
 800c8f4:	f1bb 0f00 	cmp.w	fp, #0
 800c8f8:	d051      	beq.n	800c99e <__hexnan+0x132>
 800c8fa:	454c      	cmp	r4, r9
 800c8fc:	d206      	bcs.n	800c90c <__hexnan+0xa0>
 800c8fe:	2d07      	cmp	r5, #7
 800c900:	dc04      	bgt.n	800c90c <__hexnan+0xa0>
 800c902:	462a      	mov	r2, r5
 800c904:	4649      	mov	r1, r9
 800c906:	4620      	mov	r0, r4
 800c908:	f7ff ff8a 	bl	800c820 <L_shift>
 800c90c:	4544      	cmp	r4, r8
 800c90e:	d936      	bls.n	800c97e <__hexnan+0x112>
 800c910:	4623      	mov	r3, r4
 800c912:	f1a8 0204 	sub.w	r2, r8, #4
 800c916:	f853 1b04 	ldr.w	r1, [r3], #4
 800c91a:	429f      	cmp	r7, r3
 800c91c:	f842 1f04 	str.w	r1, [r2, #4]!
 800c920:	d2f9      	bcs.n	800c916 <__hexnan+0xaa>
 800c922:	1b3b      	subs	r3, r7, r4
 800c924:	f023 0303 	bic.w	r3, r3, #3
 800c928:	3304      	adds	r3, #4
 800c92a:	3401      	adds	r4, #1
 800c92c:	3e03      	subs	r6, #3
 800c92e:	42b4      	cmp	r4, r6
 800c930:	bf88      	it	hi
 800c932:	2304      	movhi	r3, #4
 800c934:	2200      	movs	r2, #0
 800c936:	4443      	add	r3, r8
 800c938:	f843 2b04 	str.w	r2, [r3], #4
 800c93c:	429f      	cmp	r7, r3
 800c93e:	d2fb      	bcs.n	800c938 <__hexnan+0xcc>
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	b91b      	cbnz	r3, 800c94c <__hexnan+0xe0>
 800c944:	4547      	cmp	r7, r8
 800c946:	d128      	bne.n	800c99a <__hexnan+0x12e>
 800c948:	2301      	movs	r3, #1
 800c94a:	603b      	str	r3, [r7, #0]
 800c94c:	2005      	movs	r0, #5
 800c94e:	b007      	add	sp, #28
 800c950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c954:	3501      	adds	r5, #1
 800c956:	2d08      	cmp	r5, #8
 800c958:	f10b 0b01 	add.w	fp, fp, #1
 800c95c:	dd06      	ble.n	800c96c <__hexnan+0x100>
 800c95e:	4544      	cmp	r4, r8
 800c960:	d9c1      	bls.n	800c8e6 <__hexnan+0x7a>
 800c962:	2300      	movs	r3, #0
 800c964:	2501      	movs	r5, #1
 800c966:	f844 3c04 	str.w	r3, [r4, #-4]
 800c96a:	3c04      	subs	r4, #4
 800c96c:	6822      	ldr	r2, [r4, #0]
 800c96e:	f000 000f 	and.w	r0, r0, #15
 800c972:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c976:	6020      	str	r0, [r4, #0]
 800c978:	e7b5      	b.n	800c8e6 <__hexnan+0x7a>
 800c97a:	2508      	movs	r5, #8
 800c97c:	e7b3      	b.n	800c8e6 <__hexnan+0x7a>
 800c97e:	9b01      	ldr	r3, [sp, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d0dd      	beq.n	800c940 <__hexnan+0xd4>
 800c984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c988:	f1c3 0320 	rsb	r3, r3, #32
 800c98c:	40da      	lsrs	r2, r3
 800c98e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c992:	4013      	ands	r3, r2
 800c994:	f846 3c04 	str.w	r3, [r6, #-4]
 800c998:	e7d2      	b.n	800c940 <__hexnan+0xd4>
 800c99a:	3f04      	subs	r7, #4
 800c99c:	e7d0      	b.n	800c940 <__hexnan+0xd4>
 800c99e:	2004      	movs	r0, #4
 800c9a0:	e7d5      	b.n	800c94e <__hexnan+0xe2>
	...

0800c9a4 <sbrk_aligned>:
 800c9a4:	b570      	push	{r4, r5, r6, lr}
 800c9a6:	4e0f      	ldr	r6, [pc, #60]	@ (800c9e4 <sbrk_aligned+0x40>)
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	6831      	ldr	r1, [r6, #0]
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	b911      	cbnz	r1, 800c9b6 <sbrk_aligned+0x12>
 800c9b0:	f000 ff6a 	bl	800d888 <_sbrk_r>
 800c9b4:	6030      	str	r0, [r6, #0]
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f000 ff65 	bl	800d888 <_sbrk_r>
 800c9be:	1c43      	adds	r3, r0, #1
 800c9c0:	d103      	bne.n	800c9ca <sbrk_aligned+0x26>
 800c9c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	1cc4      	adds	r4, r0, #3
 800c9cc:	f024 0403 	bic.w	r4, r4, #3
 800c9d0:	42a0      	cmp	r0, r4
 800c9d2:	d0f8      	beq.n	800c9c6 <sbrk_aligned+0x22>
 800c9d4:	1a21      	subs	r1, r4, r0
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 ff56 	bl	800d888 <_sbrk_r>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d1f2      	bne.n	800c9c6 <sbrk_aligned+0x22>
 800c9e0:	e7ef      	b.n	800c9c2 <sbrk_aligned+0x1e>
 800c9e2:	bf00      	nop
 800c9e4:	200018dc 	.word	0x200018dc

0800c9e8 <_malloc_r>:
 800c9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ec:	1ccd      	adds	r5, r1, #3
 800c9ee:	f025 0503 	bic.w	r5, r5, #3
 800c9f2:	3508      	adds	r5, #8
 800c9f4:	2d0c      	cmp	r5, #12
 800c9f6:	bf38      	it	cc
 800c9f8:	250c      	movcc	r5, #12
 800c9fa:	2d00      	cmp	r5, #0
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	db01      	blt.n	800ca04 <_malloc_r+0x1c>
 800ca00:	42a9      	cmp	r1, r5
 800ca02:	d904      	bls.n	800ca0e <_malloc_r+0x26>
 800ca04:	230c      	movs	r3, #12
 800ca06:	6033      	str	r3, [r6, #0]
 800ca08:	2000      	movs	r0, #0
 800ca0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cae4 <_malloc_r+0xfc>
 800ca12:	f000 f87b 	bl	800cb0c <__malloc_lock>
 800ca16:	f8d8 3000 	ldr.w	r3, [r8]
 800ca1a:	461c      	mov	r4, r3
 800ca1c:	bb44      	cbnz	r4, 800ca70 <_malloc_r+0x88>
 800ca1e:	4629      	mov	r1, r5
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7ff ffbf 	bl	800c9a4 <sbrk_aligned>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	4604      	mov	r4, r0
 800ca2a:	d158      	bne.n	800cade <_malloc_r+0xf6>
 800ca2c:	f8d8 4000 	ldr.w	r4, [r8]
 800ca30:	4627      	mov	r7, r4
 800ca32:	2f00      	cmp	r7, #0
 800ca34:	d143      	bne.n	800cabe <_malloc_r+0xd6>
 800ca36:	2c00      	cmp	r4, #0
 800ca38:	d04b      	beq.n	800cad2 <_malloc_r+0xea>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4630      	mov	r0, r6
 800ca40:	eb04 0903 	add.w	r9, r4, r3
 800ca44:	f000 ff20 	bl	800d888 <_sbrk_r>
 800ca48:	4581      	cmp	r9, r0
 800ca4a:	d142      	bne.n	800cad2 <_malloc_r+0xea>
 800ca4c:	6821      	ldr	r1, [r4, #0]
 800ca4e:	4630      	mov	r0, r6
 800ca50:	1a6d      	subs	r5, r5, r1
 800ca52:	4629      	mov	r1, r5
 800ca54:	f7ff ffa6 	bl	800c9a4 <sbrk_aligned>
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d03a      	beq.n	800cad2 <_malloc_r+0xea>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	442b      	add	r3, r5
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	f8d8 3000 	ldr.w	r3, [r8]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	bb62      	cbnz	r2, 800cac4 <_malloc_r+0xdc>
 800ca6a:	f8c8 7000 	str.w	r7, [r8]
 800ca6e:	e00f      	b.n	800ca90 <_malloc_r+0xa8>
 800ca70:	6822      	ldr	r2, [r4, #0]
 800ca72:	1b52      	subs	r2, r2, r5
 800ca74:	d420      	bmi.n	800cab8 <_malloc_r+0xd0>
 800ca76:	2a0b      	cmp	r2, #11
 800ca78:	d917      	bls.n	800caaa <_malloc_r+0xc2>
 800ca7a:	1961      	adds	r1, r4, r5
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	6025      	str	r5, [r4, #0]
 800ca80:	bf18      	it	ne
 800ca82:	6059      	strne	r1, [r3, #4]
 800ca84:	6863      	ldr	r3, [r4, #4]
 800ca86:	bf08      	it	eq
 800ca88:	f8c8 1000 	streq.w	r1, [r8]
 800ca8c:	5162      	str	r2, [r4, r5]
 800ca8e:	604b      	str	r3, [r1, #4]
 800ca90:	4630      	mov	r0, r6
 800ca92:	f000 f841 	bl	800cb18 <__malloc_unlock>
 800ca96:	f104 000b 	add.w	r0, r4, #11
 800ca9a:	1d23      	adds	r3, r4, #4
 800ca9c:	f020 0007 	bic.w	r0, r0, #7
 800caa0:	1ac2      	subs	r2, r0, r3
 800caa2:	bf1c      	itt	ne
 800caa4:	1a1b      	subne	r3, r3, r0
 800caa6:	50a3      	strne	r3, [r4, r2]
 800caa8:	e7af      	b.n	800ca0a <_malloc_r+0x22>
 800caaa:	6862      	ldr	r2, [r4, #4]
 800caac:	42a3      	cmp	r3, r4
 800caae:	bf0c      	ite	eq
 800cab0:	f8c8 2000 	streq.w	r2, [r8]
 800cab4:	605a      	strne	r2, [r3, #4]
 800cab6:	e7eb      	b.n	800ca90 <_malloc_r+0xa8>
 800cab8:	4623      	mov	r3, r4
 800caba:	6864      	ldr	r4, [r4, #4]
 800cabc:	e7ae      	b.n	800ca1c <_malloc_r+0x34>
 800cabe:	463c      	mov	r4, r7
 800cac0:	687f      	ldr	r7, [r7, #4]
 800cac2:	e7b6      	b.n	800ca32 <_malloc_r+0x4a>
 800cac4:	461a      	mov	r2, r3
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	42a3      	cmp	r3, r4
 800caca:	d1fb      	bne.n	800cac4 <_malloc_r+0xdc>
 800cacc:	2300      	movs	r3, #0
 800cace:	6053      	str	r3, [r2, #4]
 800cad0:	e7de      	b.n	800ca90 <_malloc_r+0xa8>
 800cad2:	230c      	movs	r3, #12
 800cad4:	4630      	mov	r0, r6
 800cad6:	6033      	str	r3, [r6, #0]
 800cad8:	f000 f81e 	bl	800cb18 <__malloc_unlock>
 800cadc:	e794      	b.n	800ca08 <_malloc_r+0x20>
 800cade:	6005      	str	r5, [r0, #0]
 800cae0:	e7d6      	b.n	800ca90 <_malloc_r+0xa8>
 800cae2:	bf00      	nop
 800cae4:	200018e0 	.word	0x200018e0

0800cae8 <__ascii_mbtowc>:
 800cae8:	b082      	sub	sp, #8
 800caea:	b901      	cbnz	r1, 800caee <__ascii_mbtowc+0x6>
 800caec:	a901      	add	r1, sp, #4
 800caee:	b142      	cbz	r2, 800cb02 <__ascii_mbtowc+0x1a>
 800caf0:	b14b      	cbz	r3, 800cb06 <__ascii_mbtowc+0x1e>
 800caf2:	7813      	ldrb	r3, [r2, #0]
 800caf4:	600b      	str	r3, [r1, #0]
 800caf6:	7812      	ldrb	r2, [r2, #0]
 800caf8:	1e10      	subs	r0, r2, #0
 800cafa:	bf18      	it	ne
 800cafc:	2001      	movne	r0, #1
 800cafe:	b002      	add	sp, #8
 800cb00:	4770      	bx	lr
 800cb02:	4610      	mov	r0, r2
 800cb04:	e7fb      	b.n	800cafe <__ascii_mbtowc+0x16>
 800cb06:	f06f 0001 	mvn.w	r0, #1
 800cb0a:	e7f8      	b.n	800cafe <__ascii_mbtowc+0x16>

0800cb0c <__malloc_lock>:
 800cb0c:	4801      	ldr	r0, [pc, #4]	@ (800cb14 <__malloc_lock+0x8>)
 800cb0e:	f7ff bbb0 	b.w	800c272 <__retarget_lock_acquire_recursive>
 800cb12:	bf00      	nop
 800cb14:	200018d8 	.word	0x200018d8

0800cb18 <__malloc_unlock>:
 800cb18:	4801      	ldr	r0, [pc, #4]	@ (800cb20 <__malloc_unlock+0x8>)
 800cb1a:	f7ff bbab 	b.w	800c274 <__retarget_lock_release_recursive>
 800cb1e:	bf00      	nop
 800cb20:	200018d8 	.word	0x200018d8

0800cb24 <_Balloc>:
 800cb24:	b570      	push	{r4, r5, r6, lr}
 800cb26:	69c6      	ldr	r6, [r0, #28]
 800cb28:	4604      	mov	r4, r0
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	b976      	cbnz	r6, 800cb4c <_Balloc+0x28>
 800cb2e:	2010      	movs	r0, #16
 800cb30:	f001 fd46 	bl	800e5c0 <malloc>
 800cb34:	4602      	mov	r2, r0
 800cb36:	61e0      	str	r0, [r4, #28]
 800cb38:	b920      	cbnz	r0, 800cb44 <_Balloc+0x20>
 800cb3a:	216b      	movs	r1, #107	@ 0x6b
 800cb3c:	4b17      	ldr	r3, [pc, #92]	@ (800cb9c <_Balloc+0x78>)
 800cb3e:	4818      	ldr	r0, [pc, #96]	@ (800cba0 <_Balloc+0x7c>)
 800cb40:	f000 feba 	bl	800d8b8 <__assert_func>
 800cb44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb48:	6006      	str	r6, [r0, #0]
 800cb4a:	60c6      	str	r6, [r0, #12]
 800cb4c:	69e6      	ldr	r6, [r4, #28]
 800cb4e:	68f3      	ldr	r3, [r6, #12]
 800cb50:	b183      	cbz	r3, 800cb74 <_Balloc+0x50>
 800cb52:	69e3      	ldr	r3, [r4, #28]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb5a:	b9b8      	cbnz	r0, 800cb8c <_Balloc+0x68>
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb62:	1d72      	adds	r2, r6, #5
 800cb64:	4620      	mov	r0, r4
 800cb66:	0092      	lsls	r2, r2, #2
 800cb68:	f000 fec4 	bl	800d8f4 <_calloc_r>
 800cb6c:	b160      	cbz	r0, 800cb88 <_Balloc+0x64>
 800cb6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb72:	e00e      	b.n	800cb92 <_Balloc+0x6e>
 800cb74:	2221      	movs	r2, #33	@ 0x21
 800cb76:	2104      	movs	r1, #4
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 febb 	bl	800d8f4 <_calloc_r>
 800cb7e:	69e3      	ldr	r3, [r4, #28]
 800cb80:	60f0      	str	r0, [r6, #12]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e4      	bne.n	800cb52 <_Balloc+0x2e>
 800cb88:	2000      	movs	r0, #0
 800cb8a:	bd70      	pop	{r4, r5, r6, pc}
 800cb8c:	6802      	ldr	r2, [r0, #0]
 800cb8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb92:	2300      	movs	r3, #0
 800cb94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb98:	e7f7      	b.n	800cb8a <_Balloc+0x66>
 800cb9a:	bf00      	nop
 800cb9c:	0800eff9 	.word	0x0800eff9
 800cba0:	0800f010 	.word	0x0800f010

0800cba4 <_Bfree>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	69c6      	ldr	r6, [r0, #28]
 800cba8:	4605      	mov	r5, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	b976      	cbnz	r6, 800cbcc <_Bfree+0x28>
 800cbae:	2010      	movs	r0, #16
 800cbb0:	f001 fd06 	bl	800e5c0 <malloc>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	61e8      	str	r0, [r5, #28]
 800cbb8:	b920      	cbnz	r0, 800cbc4 <_Bfree+0x20>
 800cbba:	218f      	movs	r1, #143	@ 0x8f
 800cbbc:	4b08      	ldr	r3, [pc, #32]	@ (800cbe0 <_Bfree+0x3c>)
 800cbbe:	4809      	ldr	r0, [pc, #36]	@ (800cbe4 <_Bfree+0x40>)
 800cbc0:	f000 fe7a 	bl	800d8b8 <__assert_func>
 800cbc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbc8:	6006      	str	r6, [r0, #0]
 800cbca:	60c6      	str	r6, [r0, #12]
 800cbcc:	b13c      	cbz	r4, 800cbde <_Bfree+0x3a>
 800cbce:	69eb      	ldr	r3, [r5, #28]
 800cbd0:	6862      	ldr	r2, [r4, #4]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbd8:	6021      	str	r1, [r4, #0]
 800cbda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	0800eff9 	.word	0x0800eff9
 800cbe4:	0800f010 	.word	0x0800f010

0800cbe8 <__multadd>:
 800cbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbec:	4607      	mov	r7, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	461e      	mov	r6, r3
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	690d      	ldr	r5, [r1, #16]
 800cbf6:	f101 0c14 	add.w	ip, r1, #20
 800cbfa:	f8dc 3000 	ldr.w	r3, [ip]
 800cbfe:	3001      	adds	r0, #1
 800cc00:	b299      	uxth	r1, r3
 800cc02:	fb02 6101 	mla	r1, r2, r1, r6
 800cc06:	0c1e      	lsrs	r6, r3, #16
 800cc08:	0c0b      	lsrs	r3, r1, #16
 800cc0a:	fb02 3306 	mla	r3, r2, r6, r3
 800cc0e:	b289      	uxth	r1, r1
 800cc10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc14:	4285      	cmp	r5, r0
 800cc16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc1a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc1e:	dcec      	bgt.n	800cbfa <__multadd+0x12>
 800cc20:	b30e      	cbz	r6, 800cc66 <__multadd+0x7e>
 800cc22:	68a3      	ldr	r3, [r4, #8]
 800cc24:	42ab      	cmp	r3, r5
 800cc26:	dc19      	bgt.n	800cc5c <__multadd+0x74>
 800cc28:	6861      	ldr	r1, [r4, #4]
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	3101      	adds	r1, #1
 800cc2e:	f7ff ff79 	bl	800cb24 <_Balloc>
 800cc32:	4680      	mov	r8, r0
 800cc34:	b928      	cbnz	r0, 800cc42 <__multadd+0x5a>
 800cc36:	4602      	mov	r2, r0
 800cc38:	21ba      	movs	r1, #186	@ 0xba
 800cc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc6c <__multadd+0x84>)
 800cc3c:	480c      	ldr	r0, [pc, #48]	@ (800cc70 <__multadd+0x88>)
 800cc3e:	f000 fe3b 	bl	800d8b8 <__assert_func>
 800cc42:	6922      	ldr	r2, [r4, #16]
 800cc44:	f104 010c 	add.w	r1, r4, #12
 800cc48:	3202      	adds	r2, #2
 800cc4a:	0092      	lsls	r2, r2, #2
 800cc4c:	300c      	adds	r0, #12
 800cc4e:	f7ff fb12 	bl	800c276 <memcpy>
 800cc52:	4621      	mov	r1, r4
 800cc54:	4638      	mov	r0, r7
 800cc56:	f7ff ffa5 	bl	800cba4 <_Bfree>
 800cc5a:	4644      	mov	r4, r8
 800cc5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc60:	3501      	adds	r5, #1
 800cc62:	615e      	str	r6, [r3, #20]
 800cc64:	6125      	str	r5, [r4, #16]
 800cc66:	4620      	mov	r0, r4
 800cc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc6c:	0800ef88 	.word	0x0800ef88
 800cc70:	0800f010 	.word	0x0800f010

0800cc74 <__s2b>:
 800cc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc78:	4615      	mov	r5, r2
 800cc7a:	2209      	movs	r2, #9
 800cc7c:	461f      	mov	r7, r3
 800cc7e:	3308      	adds	r3, #8
 800cc80:	460c      	mov	r4, r1
 800cc82:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc86:	4606      	mov	r6, r0
 800cc88:	2201      	movs	r2, #1
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	db09      	blt.n	800cca4 <__s2b+0x30>
 800cc90:	4630      	mov	r0, r6
 800cc92:	f7ff ff47 	bl	800cb24 <_Balloc>
 800cc96:	b940      	cbnz	r0, 800ccaa <__s2b+0x36>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	21d3      	movs	r1, #211	@ 0xd3
 800cc9c:	4b18      	ldr	r3, [pc, #96]	@ (800cd00 <__s2b+0x8c>)
 800cc9e:	4819      	ldr	r0, [pc, #100]	@ (800cd04 <__s2b+0x90>)
 800cca0:	f000 fe0a 	bl	800d8b8 <__assert_func>
 800cca4:	0052      	lsls	r2, r2, #1
 800cca6:	3101      	adds	r1, #1
 800cca8:	e7f0      	b.n	800cc8c <__s2b+0x18>
 800ccaa:	9b08      	ldr	r3, [sp, #32]
 800ccac:	2d09      	cmp	r5, #9
 800ccae:	6143      	str	r3, [r0, #20]
 800ccb0:	f04f 0301 	mov.w	r3, #1
 800ccb4:	6103      	str	r3, [r0, #16]
 800ccb6:	dd16      	ble.n	800cce6 <__s2b+0x72>
 800ccb8:	f104 0909 	add.w	r9, r4, #9
 800ccbc:	46c8      	mov	r8, r9
 800ccbe:	442c      	add	r4, r5
 800ccc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccc4:	4601      	mov	r1, r0
 800ccc6:	220a      	movs	r2, #10
 800ccc8:	4630      	mov	r0, r6
 800ccca:	3b30      	subs	r3, #48	@ 0x30
 800cccc:	f7ff ff8c 	bl	800cbe8 <__multadd>
 800ccd0:	45a0      	cmp	r8, r4
 800ccd2:	d1f5      	bne.n	800ccc0 <__s2b+0x4c>
 800ccd4:	f1a5 0408 	sub.w	r4, r5, #8
 800ccd8:	444c      	add	r4, r9
 800ccda:	1b2d      	subs	r5, r5, r4
 800ccdc:	1963      	adds	r3, r4, r5
 800ccde:	42bb      	cmp	r3, r7
 800cce0:	db04      	blt.n	800ccec <__s2b+0x78>
 800cce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cce6:	2509      	movs	r5, #9
 800cce8:	340a      	adds	r4, #10
 800ccea:	e7f6      	b.n	800ccda <__s2b+0x66>
 800ccec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccf0:	4601      	mov	r1, r0
 800ccf2:	220a      	movs	r2, #10
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	3b30      	subs	r3, #48	@ 0x30
 800ccf8:	f7ff ff76 	bl	800cbe8 <__multadd>
 800ccfc:	e7ee      	b.n	800ccdc <__s2b+0x68>
 800ccfe:	bf00      	nop
 800cd00:	0800ef88 	.word	0x0800ef88
 800cd04:	0800f010 	.word	0x0800f010

0800cd08 <__hi0bits>:
 800cd08:	4603      	mov	r3, r0
 800cd0a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd0e:	bf3a      	itte	cc
 800cd10:	0403      	lslcc	r3, r0, #16
 800cd12:	2010      	movcc	r0, #16
 800cd14:	2000      	movcs	r0, #0
 800cd16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd1a:	bf3c      	itt	cc
 800cd1c:	021b      	lslcc	r3, r3, #8
 800cd1e:	3008      	addcc	r0, #8
 800cd20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd24:	bf3c      	itt	cc
 800cd26:	011b      	lslcc	r3, r3, #4
 800cd28:	3004      	addcc	r0, #4
 800cd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd2e:	bf3c      	itt	cc
 800cd30:	009b      	lslcc	r3, r3, #2
 800cd32:	3002      	addcc	r0, #2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	db05      	blt.n	800cd44 <__hi0bits+0x3c>
 800cd38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd3c:	f100 0001 	add.w	r0, r0, #1
 800cd40:	bf08      	it	eq
 800cd42:	2020      	moveq	r0, #32
 800cd44:	4770      	bx	lr

0800cd46 <__lo0bits>:
 800cd46:	6803      	ldr	r3, [r0, #0]
 800cd48:	4602      	mov	r2, r0
 800cd4a:	f013 0007 	ands.w	r0, r3, #7
 800cd4e:	d00b      	beq.n	800cd68 <__lo0bits+0x22>
 800cd50:	07d9      	lsls	r1, r3, #31
 800cd52:	d421      	bmi.n	800cd98 <__lo0bits+0x52>
 800cd54:	0798      	lsls	r0, r3, #30
 800cd56:	bf49      	itett	mi
 800cd58:	085b      	lsrmi	r3, r3, #1
 800cd5a:	089b      	lsrpl	r3, r3, #2
 800cd5c:	2001      	movmi	r0, #1
 800cd5e:	6013      	strmi	r3, [r2, #0]
 800cd60:	bf5c      	itt	pl
 800cd62:	2002      	movpl	r0, #2
 800cd64:	6013      	strpl	r3, [r2, #0]
 800cd66:	4770      	bx	lr
 800cd68:	b299      	uxth	r1, r3
 800cd6a:	b909      	cbnz	r1, 800cd70 <__lo0bits+0x2a>
 800cd6c:	2010      	movs	r0, #16
 800cd6e:	0c1b      	lsrs	r3, r3, #16
 800cd70:	b2d9      	uxtb	r1, r3
 800cd72:	b909      	cbnz	r1, 800cd78 <__lo0bits+0x32>
 800cd74:	3008      	adds	r0, #8
 800cd76:	0a1b      	lsrs	r3, r3, #8
 800cd78:	0719      	lsls	r1, r3, #28
 800cd7a:	bf04      	itt	eq
 800cd7c:	091b      	lsreq	r3, r3, #4
 800cd7e:	3004      	addeq	r0, #4
 800cd80:	0799      	lsls	r1, r3, #30
 800cd82:	bf04      	itt	eq
 800cd84:	089b      	lsreq	r3, r3, #2
 800cd86:	3002      	addeq	r0, #2
 800cd88:	07d9      	lsls	r1, r3, #31
 800cd8a:	d403      	bmi.n	800cd94 <__lo0bits+0x4e>
 800cd8c:	085b      	lsrs	r3, r3, #1
 800cd8e:	f100 0001 	add.w	r0, r0, #1
 800cd92:	d003      	beq.n	800cd9c <__lo0bits+0x56>
 800cd94:	6013      	str	r3, [r2, #0]
 800cd96:	4770      	bx	lr
 800cd98:	2000      	movs	r0, #0
 800cd9a:	4770      	bx	lr
 800cd9c:	2020      	movs	r0, #32
 800cd9e:	4770      	bx	lr

0800cda0 <__i2b>:
 800cda0:	b510      	push	{r4, lr}
 800cda2:	460c      	mov	r4, r1
 800cda4:	2101      	movs	r1, #1
 800cda6:	f7ff febd 	bl	800cb24 <_Balloc>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	b928      	cbnz	r0, 800cdba <__i2b+0x1a>
 800cdae:	f240 1145 	movw	r1, #325	@ 0x145
 800cdb2:	4b04      	ldr	r3, [pc, #16]	@ (800cdc4 <__i2b+0x24>)
 800cdb4:	4804      	ldr	r0, [pc, #16]	@ (800cdc8 <__i2b+0x28>)
 800cdb6:	f000 fd7f 	bl	800d8b8 <__assert_func>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	6144      	str	r4, [r0, #20]
 800cdbe:	6103      	str	r3, [r0, #16]
 800cdc0:	bd10      	pop	{r4, pc}
 800cdc2:	bf00      	nop
 800cdc4:	0800ef88 	.word	0x0800ef88
 800cdc8:	0800f010 	.word	0x0800f010

0800cdcc <__multiply>:
 800cdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd0:	4614      	mov	r4, r2
 800cdd2:	690a      	ldr	r2, [r1, #16]
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	bfa2      	ittt	ge
 800cddc:	4623      	movge	r3, r4
 800cdde:	460c      	movge	r4, r1
 800cde0:	461f      	movge	r7, r3
 800cde2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cde6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cdea:	68a3      	ldr	r3, [r4, #8]
 800cdec:	6861      	ldr	r1, [r4, #4]
 800cdee:	eb0a 0609 	add.w	r6, sl, r9
 800cdf2:	42b3      	cmp	r3, r6
 800cdf4:	b085      	sub	sp, #20
 800cdf6:	bfb8      	it	lt
 800cdf8:	3101      	addlt	r1, #1
 800cdfa:	f7ff fe93 	bl	800cb24 <_Balloc>
 800cdfe:	b930      	cbnz	r0, 800ce0e <__multiply+0x42>
 800ce00:	4602      	mov	r2, r0
 800ce02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce06:	4b43      	ldr	r3, [pc, #268]	@ (800cf14 <__multiply+0x148>)
 800ce08:	4843      	ldr	r0, [pc, #268]	@ (800cf18 <__multiply+0x14c>)
 800ce0a:	f000 fd55 	bl	800d8b8 <__assert_func>
 800ce0e:	f100 0514 	add.w	r5, r0, #20
 800ce12:	462b      	mov	r3, r5
 800ce14:	2200      	movs	r2, #0
 800ce16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce1a:	4543      	cmp	r3, r8
 800ce1c:	d321      	bcc.n	800ce62 <__multiply+0x96>
 800ce1e:	f107 0114 	add.w	r1, r7, #20
 800ce22:	f104 0214 	add.w	r2, r4, #20
 800ce26:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce2a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce2e:	9302      	str	r3, [sp, #8]
 800ce30:	1b13      	subs	r3, r2, r4
 800ce32:	3b15      	subs	r3, #21
 800ce34:	f023 0303 	bic.w	r3, r3, #3
 800ce38:	3304      	adds	r3, #4
 800ce3a:	f104 0715 	add.w	r7, r4, #21
 800ce3e:	42ba      	cmp	r2, r7
 800ce40:	bf38      	it	cc
 800ce42:	2304      	movcc	r3, #4
 800ce44:	9301      	str	r3, [sp, #4]
 800ce46:	9b02      	ldr	r3, [sp, #8]
 800ce48:	9103      	str	r1, [sp, #12]
 800ce4a:	428b      	cmp	r3, r1
 800ce4c:	d80c      	bhi.n	800ce68 <__multiply+0x9c>
 800ce4e:	2e00      	cmp	r6, #0
 800ce50:	dd03      	ble.n	800ce5a <__multiply+0x8e>
 800ce52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d05a      	beq.n	800cf10 <__multiply+0x144>
 800ce5a:	6106      	str	r6, [r0, #16]
 800ce5c:	b005      	add	sp, #20
 800ce5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce62:	f843 2b04 	str.w	r2, [r3], #4
 800ce66:	e7d8      	b.n	800ce1a <__multiply+0x4e>
 800ce68:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce6c:	f1ba 0f00 	cmp.w	sl, #0
 800ce70:	d023      	beq.n	800ceba <__multiply+0xee>
 800ce72:	46a9      	mov	r9, r5
 800ce74:	f04f 0c00 	mov.w	ip, #0
 800ce78:	f104 0e14 	add.w	lr, r4, #20
 800ce7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce80:	f8d9 3000 	ldr.w	r3, [r9]
 800ce84:	fa1f fb87 	uxth.w	fp, r7
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce8e:	4463      	add	r3, ip
 800ce90:	f8d9 c000 	ldr.w	ip, [r9]
 800ce94:	0c3f      	lsrs	r7, r7, #16
 800ce96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ce9a:	fb0a c707 	mla	r7, sl, r7, ip
 800ce9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cea8:	4572      	cmp	r2, lr
 800ceaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ceae:	f849 3b04 	str.w	r3, [r9], #4
 800ceb2:	d8e3      	bhi.n	800ce7c <__multiply+0xb0>
 800ceb4:	9b01      	ldr	r3, [sp, #4]
 800ceb6:	f845 c003 	str.w	ip, [r5, r3]
 800ceba:	9b03      	ldr	r3, [sp, #12]
 800cebc:	3104      	adds	r1, #4
 800cebe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cec2:	f1b9 0f00 	cmp.w	r9, #0
 800cec6:	d021      	beq.n	800cf0c <__multiply+0x140>
 800cec8:	46ae      	mov	lr, r5
 800ceca:	f04f 0a00 	mov.w	sl, #0
 800cece:	682b      	ldr	r3, [r5, #0]
 800ced0:	f104 0c14 	add.w	ip, r4, #20
 800ced4:	f8bc b000 	ldrh.w	fp, [ip]
 800ced8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cedc:	b29b      	uxth	r3, r3
 800cede:	fb09 770b 	mla	r7, r9, fp, r7
 800cee2:	4457      	add	r7, sl
 800cee4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cee8:	f84e 3b04 	str.w	r3, [lr], #4
 800ceec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cef0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cef4:	f8be 3000 	ldrh.w	r3, [lr]
 800cef8:	4562      	cmp	r2, ip
 800cefa:	fb09 330a 	mla	r3, r9, sl, r3
 800cefe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf06:	d8e5      	bhi.n	800ced4 <__multiply+0x108>
 800cf08:	9f01      	ldr	r7, [sp, #4]
 800cf0a:	51eb      	str	r3, [r5, r7]
 800cf0c:	3504      	adds	r5, #4
 800cf0e:	e79a      	b.n	800ce46 <__multiply+0x7a>
 800cf10:	3e01      	subs	r6, #1
 800cf12:	e79c      	b.n	800ce4e <__multiply+0x82>
 800cf14:	0800ef88 	.word	0x0800ef88
 800cf18:	0800f010 	.word	0x0800f010

0800cf1c <__pow5mult>:
 800cf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf20:	4615      	mov	r5, r2
 800cf22:	f012 0203 	ands.w	r2, r2, #3
 800cf26:	4607      	mov	r7, r0
 800cf28:	460e      	mov	r6, r1
 800cf2a:	d007      	beq.n	800cf3c <__pow5mult+0x20>
 800cf2c:	4c25      	ldr	r4, [pc, #148]	@ (800cfc4 <__pow5mult+0xa8>)
 800cf2e:	3a01      	subs	r2, #1
 800cf30:	2300      	movs	r3, #0
 800cf32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf36:	f7ff fe57 	bl	800cbe8 <__multadd>
 800cf3a:	4606      	mov	r6, r0
 800cf3c:	10ad      	asrs	r5, r5, #2
 800cf3e:	d03d      	beq.n	800cfbc <__pow5mult+0xa0>
 800cf40:	69fc      	ldr	r4, [r7, #28]
 800cf42:	b97c      	cbnz	r4, 800cf64 <__pow5mult+0x48>
 800cf44:	2010      	movs	r0, #16
 800cf46:	f001 fb3b 	bl	800e5c0 <malloc>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	61f8      	str	r0, [r7, #28]
 800cf4e:	b928      	cbnz	r0, 800cf5c <__pow5mult+0x40>
 800cf50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf54:	4b1c      	ldr	r3, [pc, #112]	@ (800cfc8 <__pow5mult+0xac>)
 800cf56:	481d      	ldr	r0, [pc, #116]	@ (800cfcc <__pow5mult+0xb0>)
 800cf58:	f000 fcae 	bl	800d8b8 <__assert_func>
 800cf5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf60:	6004      	str	r4, [r0, #0]
 800cf62:	60c4      	str	r4, [r0, #12]
 800cf64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf6c:	b94c      	cbnz	r4, 800cf82 <__pow5mult+0x66>
 800cf6e:	f240 2171 	movw	r1, #625	@ 0x271
 800cf72:	4638      	mov	r0, r7
 800cf74:	f7ff ff14 	bl	800cda0 <__i2b>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf80:	6003      	str	r3, [r0, #0]
 800cf82:	f04f 0900 	mov.w	r9, #0
 800cf86:	07eb      	lsls	r3, r5, #31
 800cf88:	d50a      	bpl.n	800cfa0 <__pow5mult+0x84>
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	4622      	mov	r2, r4
 800cf8e:	4638      	mov	r0, r7
 800cf90:	f7ff ff1c 	bl	800cdcc <__multiply>
 800cf94:	4680      	mov	r8, r0
 800cf96:	4631      	mov	r1, r6
 800cf98:	4638      	mov	r0, r7
 800cf9a:	f7ff fe03 	bl	800cba4 <_Bfree>
 800cf9e:	4646      	mov	r6, r8
 800cfa0:	106d      	asrs	r5, r5, #1
 800cfa2:	d00b      	beq.n	800cfbc <__pow5mult+0xa0>
 800cfa4:	6820      	ldr	r0, [r4, #0]
 800cfa6:	b938      	cbnz	r0, 800cfb8 <__pow5mult+0x9c>
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	4621      	mov	r1, r4
 800cfac:	4638      	mov	r0, r7
 800cfae:	f7ff ff0d 	bl	800cdcc <__multiply>
 800cfb2:	6020      	str	r0, [r4, #0]
 800cfb4:	f8c0 9000 	str.w	r9, [r0]
 800cfb8:	4604      	mov	r4, r0
 800cfba:	e7e4      	b.n	800cf86 <__pow5mult+0x6a>
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfc2:	bf00      	nop
 800cfc4:	0800f06c 	.word	0x0800f06c
 800cfc8:	0800eff9 	.word	0x0800eff9
 800cfcc:	0800f010 	.word	0x0800f010

0800cfd0 <__lshift>:
 800cfd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd4:	460c      	mov	r4, r1
 800cfd6:	4607      	mov	r7, r0
 800cfd8:	4691      	mov	r9, r2
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	6849      	ldr	r1, [r1, #4]
 800cfde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfe2:	68a3      	ldr	r3, [r4, #8]
 800cfe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfe8:	f108 0601 	add.w	r6, r8, #1
 800cfec:	42b3      	cmp	r3, r6
 800cfee:	db0b      	blt.n	800d008 <__lshift+0x38>
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7ff fd97 	bl	800cb24 <_Balloc>
 800cff6:	4605      	mov	r5, r0
 800cff8:	b948      	cbnz	r0, 800d00e <__lshift+0x3e>
 800cffa:	4602      	mov	r2, r0
 800cffc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d000:	4b27      	ldr	r3, [pc, #156]	@ (800d0a0 <__lshift+0xd0>)
 800d002:	4828      	ldr	r0, [pc, #160]	@ (800d0a4 <__lshift+0xd4>)
 800d004:	f000 fc58 	bl	800d8b8 <__assert_func>
 800d008:	3101      	adds	r1, #1
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	e7ee      	b.n	800cfec <__lshift+0x1c>
 800d00e:	2300      	movs	r3, #0
 800d010:	f100 0114 	add.w	r1, r0, #20
 800d014:	f100 0210 	add.w	r2, r0, #16
 800d018:	4618      	mov	r0, r3
 800d01a:	4553      	cmp	r3, sl
 800d01c:	db33      	blt.n	800d086 <__lshift+0xb6>
 800d01e:	6920      	ldr	r0, [r4, #16]
 800d020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d024:	f104 0314 	add.w	r3, r4, #20
 800d028:	f019 091f 	ands.w	r9, r9, #31
 800d02c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d030:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d034:	d02b      	beq.n	800d08e <__lshift+0xbe>
 800d036:	468a      	mov	sl, r1
 800d038:	2200      	movs	r2, #0
 800d03a:	f1c9 0e20 	rsb	lr, r9, #32
 800d03e:	6818      	ldr	r0, [r3, #0]
 800d040:	fa00 f009 	lsl.w	r0, r0, r9
 800d044:	4310      	orrs	r0, r2
 800d046:	f84a 0b04 	str.w	r0, [sl], #4
 800d04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d04e:	459c      	cmp	ip, r3
 800d050:	fa22 f20e 	lsr.w	r2, r2, lr
 800d054:	d8f3      	bhi.n	800d03e <__lshift+0x6e>
 800d056:	ebac 0304 	sub.w	r3, ip, r4
 800d05a:	3b15      	subs	r3, #21
 800d05c:	f023 0303 	bic.w	r3, r3, #3
 800d060:	3304      	adds	r3, #4
 800d062:	f104 0015 	add.w	r0, r4, #21
 800d066:	4584      	cmp	ip, r0
 800d068:	bf38      	it	cc
 800d06a:	2304      	movcc	r3, #4
 800d06c:	50ca      	str	r2, [r1, r3]
 800d06e:	b10a      	cbz	r2, 800d074 <__lshift+0xa4>
 800d070:	f108 0602 	add.w	r6, r8, #2
 800d074:	3e01      	subs	r6, #1
 800d076:	4638      	mov	r0, r7
 800d078:	4621      	mov	r1, r4
 800d07a:	612e      	str	r6, [r5, #16]
 800d07c:	f7ff fd92 	bl	800cba4 <_Bfree>
 800d080:	4628      	mov	r0, r5
 800d082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d086:	f842 0f04 	str.w	r0, [r2, #4]!
 800d08a:	3301      	adds	r3, #1
 800d08c:	e7c5      	b.n	800d01a <__lshift+0x4a>
 800d08e:	3904      	subs	r1, #4
 800d090:	f853 2b04 	ldr.w	r2, [r3], #4
 800d094:	459c      	cmp	ip, r3
 800d096:	f841 2f04 	str.w	r2, [r1, #4]!
 800d09a:	d8f9      	bhi.n	800d090 <__lshift+0xc0>
 800d09c:	e7ea      	b.n	800d074 <__lshift+0xa4>
 800d09e:	bf00      	nop
 800d0a0:	0800ef88 	.word	0x0800ef88
 800d0a4:	0800f010 	.word	0x0800f010

0800d0a8 <__mcmp>:
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	690a      	ldr	r2, [r1, #16]
 800d0ac:	6900      	ldr	r0, [r0, #16]
 800d0ae:	b530      	push	{r4, r5, lr}
 800d0b0:	1a80      	subs	r0, r0, r2
 800d0b2:	d10e      	bne.n	800d0d2 <__mcmp+0x2a>
 800d0b4:	3314      	adds	r3, #20
 800d0b6:	3114      	adds	r1, #20
 800d0b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0c8:	4295      	cmp	r5, r2
 800d0ca:	d003      	beq.n	800d0d4 <__mcmp+0x2c>
 800d0cc:	d205      	bcs.n	800d0da <__mcmp+0x32>
 800d0ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0d2:	bd30      	pop	{r4, r5, pc}
 800d0d4:	42a3      	cmp	r3, r4
 800d0d6:	d3f3      	bcc.n	800d0c0 <__mcmp+0x18>
 800d0d8:	e7fb      	b.n	800d0d2 <__mcmp+0x2a>
 800d0da:	2001      	movs	r0, #1
 800d0dc:	e7f9      	b.n	800d0d2 <__mcmp+0x2a>
	...

0800d0e0 <__mdiff>:
 800d0e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e4:	4689      	mov	r9, r1
 800d0e6:	4606      	mov	r6, r0
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	4648      	mov	r0, r9
 800d0ec:	4614      	mov	r4, r2
 800d0ee:	f7ff ffdb 	bl	800d0a8 <__mcmp>
 800d0f2:	1e05      	subs	r5, r0, #0
 800d0f4:	d112      	bne.n	800d11c <__mdiff+0x3c>
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	f7ff fd13 	bl	800cb24 <_Balloc>
 800d0fe:	4602      	mov	r2, r0
 800d100:	b928      	cbnz	r0, 800d10e <__mdiff+0x2e>
 800d102:	f240 2137 	movw	r1, #567	@ 0x237
 800d106:	4b3e      	ldr	r3, [pc, #248]	@ (800d200 <__mdiff+0x120>)
 800d108:	483e      	ldr	r0, [pc, #248]	@ (800d204 <__mdiff+0x124>)
 800d10a:	f000 fbd5 	bl	800d8b8 <__assert_func>
 800d10e:	2301      	movs	r3, #1
 800d110:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d114:	4610      	mov	r0, r2
 800d116:	b003      	add	sp, #12
 800d118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11c:	bfbc      	itt	lt
 800d11e:	464b      	movlt	r3, r9
 800d120:	46a1      	movlt	r9, r4
 800d122:	4630      	mov	r0, r6
 800d124:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d128:	bfba      	itte	lt
 800d12a:	461c      	movlt	r4, r3
 800d12c:	2501      	movlt	r5, #1
 800d12e:	2500      	movge	r5, #0
 800d130:	f7ff fcf8 	bl	800cb24 <_Balloc>
 800d134:	4602      	mov	r2, r0
 800d136:	b918      	cbnz	r0, 800d140 <__mdiff+0x60>
 800d138:	f240 2145 	movw	r1, #581	@ 0x245
 800d13c:	4b30      	ldr	r3, [pc, #192]	@ (800d200 <__mdiff+0x120>)
 800d13e:	e7e3      	b.n	800d108 <__mdiff+0x28>
 800d140:	f100 0b14 	add.w	fp, r0, #20
 800d144:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d148:	f109 0310 	add.w	r3, r9, #16
 800d14c:	60c5      	str	r5, [r0, #12]
 800d14e:	f04f 0c00 	mov.w	ip, #0
 800d152:	f109 0514 	add.w	r5, r9, #20
 800d156:	46d9      	mov	r9, fp
 800d158:	6926      	ldr	r6, [r4, #16]
 800d15a:	f104 0e14 	add.w	lr, r4, #20
 800d15e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d162:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d166:	9301      	str	r3, [sp, #4]
 800d168:	9b01      	ldr	r3, [sp, #4]
 800d16a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d16e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d172:	b281      	uxth	r1, r0
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	fa1f f38a 	uxth.w	r3, sl
 800d17a:	1a5b      	subs	r3, r3, r1
 800d17c:	0c00      	lsrs	r0, r0, #16
 800d17e:	4463      	add	r3, ip
 800d180:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d184:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d188:	b29b      	uxth	r3, r3
 800d18a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d18e:	4576      	cmp	r6, lr
 800d190:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d194:	f849 3b04 	str.w	r3, [r9], #4
 800d198:	d8e6      	bhi.n	800d168 <__mdiff+0x88>
 800d19a:	1b33      	subs	r3, r6, r4
 800d19c:	3b15      	subs	r3, #21
 800d19e:	f023 0303 	bic.w	r3, r3, #3
 800d1a2:	3415      	adds	r4, #21
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	42a6      	cmp	r6, r4
 800d1a8:	bf38      	it	cc
 800d1aa:	2304      	movcc	r3, #4
 800d1ac:	441d      	add	r5, r3
 800d1ae:	445b      	add	r3, fp
 800d1b0:	461e      	mov	r6, r3
 800d1b2:	462c      	mov	r4, r5
 800d1b4:	4544      	cmp	r4, r8
 800d1b6:	d30e      	bcc.n	800d1d6 <__mdiff+0xf6>
 800d1b8:	f108 0103 	add.w	r1, r8, #3
 800d1bc:	1b49      	subs	r1, r1, r5
 800d1be:	f021 0103 	bic.w	r1, r1, #3
 800d1c2:	3d03      	subs	r5, #3
 800d1c4:	45a8      	cmp	r8, r5
 800d1c6:	bf38      	it	cc
 800d1c8:	2100      	movcc	r1, #0
 800d1ca:	440b      	add	r3, r1
 800d1cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1d0:	b199      	cbz	r1, 800d1fa <__mdiff+0x11a>
 800d1d2:	6117      	str	r7, [r2, #16]
 800d1d4:	e79e      	b.n	800d114 <__mdiff+0x34>
 800d1d6:	46e6      	mov	lr, ip
 800d1d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1dc:	fa1f fc81 	uxth.w	ip, r1
 800d1e0:	44f4      	add	ip, lr
 800d1e2:	0c08      	lsrs	r0, r1, #16
 800d1e4:	4471      	add	r1, lr
 800d1e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1ea:	b289      	uxth	r1, r1
 800d1ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1f4:	f846 1b04 	str.w	r1, [r6], #4
 800d1f8:	e7dc      	b.n	800d1b4 <__mdiff+0xd4>
 800d1fa:	3f01      	subs	r7, #1
 800d1fc:	e7e6      	b.n	800d1cc <__mdiff+0xec>
 800d1fe:	bf00      	nop
 800d200:	0800ef88 	.word	0x0800ef88
 800d204:	0800f010 	.word	0x0800f010

0800d208 <__ulp>:
 800d208:	4b0e      	ldr	r3, [pc, #56]	@ (800d244 <__ulp+0x3c>)
 800d20a:	400b      	ands	r3, r1
 800d20c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d210:	2b00      	cmp	r3, #0
 800d212:	dc08      	bgt.n	800d226 <__ulp+0x1e>
 800d214:	425b      	negs	r3, r3
 800d216:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d21a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d21e:	da04      	bge.n	800d22a <__ulp+0x22>
 800d220:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d224:	4113      	asrs	r3, r2
 800d226:	2200      	movs	r2, #0
 800d228:	e008      	b.n	800d23c <__ulp+0x34>
 800d22a:	f1a2 0314 	sub.w	r3, r2, #20
 800d22e:	2b1e      	cmp	r3, #30
 800d230:	bfd6      	itet	le
 800d232:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d236:	2201      	movgt	r2, #1
 800d238:	40da      	lsrle	r2, r3
 800d23a:	2300      	movs	r3, #0
 800d23c:	4619      	mov	r1, r3
 800d23e:	4610      	mov	r0, r2
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	7ff00000 	.word	0x7ff00000

0800d248 <__b2d>:
 800d248:	6902      	ldr	r2, [r0, #16]
 800d24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24c:	f100 0614 	add.w	r6, r0, #20
 800d250:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d254:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d258:	4f1e      	ldr	r7, [pc, #120]	@ (800d2d4 <__b2d+0x8c>)
 800d25a:	4620      	mov	r0, r4
 800d25c:	f7ff fd54 	bl	800cd08 <__hi0bits>
 800d260:	4603      	mov	r3, r0
 800d262:	f1c0 0020 	rsb	r0, r0, #32
 800d266:	2b0a      	cmp	r3, #10
 800d268:	f1a2 0504 	sub.w	r5, r2, #4
 800d26c:	6008      	str	r0, [r1, #0]
 800d26e:	dc12      	bgt.n	800d296 <__b2d+0x4e>
 800d270:	42ae      	cmp	r6, r5
 800d272:	bf2c      	ite	cs
 800d274:	2200      	movcs	r2, #0
 800d276:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d27a:	f1c3 0c0b 	rsb	ip, r3, #11
 800d27e:	3315      	adds	r3, #21
 800d280:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d284:	fa04 f303 	lsl.w	r3, r4, r3
 800d288:	fa22 f20c 	lsr.w	r2, r2, ip
 800d28c:	ea4e 0107 	orr.w	r1, lr, r7
 800d290:	431a      	orrs	r2, r3
 800d292:	4610      	mov	r0, r2
 800d294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d296:	42ae      	cmp	r6, r5
 800d298:	bf36      	itet	cc
 800d29a:	f1a2 0508 	subcc.w	r5, r2, #8
 800d29e:	2200      	movcs	r2, #0
 800d2a0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d2a4:	3b0b      	subs	r3, #11
 800d2a6:	d012      	beq.n	800d2ce <__b2d+0x86>
 800d2a8:	f1c3 0720 	rsb	r7, r3, #32
 800d2ac:	fa22 f107 	lsr.w	r1, r2, r7
 800d2b0:	409c      	lsls	r4, r3
 800d2b2:	430c      	orrs	r4, r1
 800d2b4:	42b5      	cmp	r5, r6
 800d2b6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d2ba:	bf94      	ite	ls
 800d2bc:	2400      	movls	r4, #0
 800d2be:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d2c2:	409a      	lsls	r2, r3
 800d2c4:	40fc      	lsrs	r4, r7
 800d2c6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d2ca:	4322      	orrs	r2, r4
 800d2cc:	e7e1      	b.n	800d292 <__b2d+0x4a>
 800d2ce:	ea44 0107 	orr.w	r1, r4, r7
 800d2d2:	e7de      	b.n	800d292 <__b2d+0x4a>
 800d2d4:	3ff00000 	.word	0x3ff00000

0800d2d8 <__d2b>:
 800d2d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d2dc:	2101      	movs	r1, #1
 800d2de:	4690      	mov	r8, r2
 800d2e0:	4699      	mov	r9, r3
 800d2e2:	9e08      	ldr	r6, [sp, #32]
 800d2e4:	f7ff fc1e 	bl	800cb24 <_Balloc>
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	b930      	cbnz	r0, 800d2fa <__d2b+0x22>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2f2:	4b23      	ldr	r3, [pc, #140]	@ (800d380 <__d2b+0xa8>)
 800d2f4:	4823      	ldr	r0, [pc, #140]	@ (800d384 <__d2b+0xac>)
 800d2f6:	f000 fadf 	bl	800d8b8 <__assert_func>
 800d2fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d302:	b10d      	cbz	r5, 800d308 <__d2b+0x30>
 800d304:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	f1b8 0300 	subs.w	r3, r8, #0
 800d30e:	d024      	beq.n	800d35a <__d2b+0x82>
 800d310:	4668      	mov	r0, sp
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	f7ff fd17 	bl	800cd46 <__lo0bits>
 800d318:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d31c:	b1d8      	cbz	r0, 800d356 <__d2b+0x7e>
 800d31e:	f1c0 0320 	rsb	r3, r0, #32
 800d322:	fa02 f303 	lsl.w	r3, r2, r3
 800d326:	430b      	orrs	r3, r1
 800d328:	40c2      	lsrs	r2, r0
 800d32a:	6163      	str	r3, [r4, #20]
 800d32c:	9201      	str	r2, [sp, #4]
 800d32e:	9b01      	ldr	r3, [sp, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	bf0c      	ite	eq
 800d334:	2201      	moveq	r2, #1
 800d336:	2202      	movne	r2, #2
 800d338:	61a3      	str	r3, [r4, #24]
 800d33a:	6122      	str	r2, [r4, #16]
 800d33c:	b1ad      	cbz	r5, 800d36a <__d2b+0x92>
 800d33e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d342:	4405      	add	r5, r0
 800d344:	6035      	str	r5, [r6, #0]
 800d346:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d34c:	6018      	str	r0, [r3, #0]
 800d34e:	4620      	mov	r0, r4
 800d350:	b002      	add	sp, #8
 800d352:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d356:	6161      	str	r1, [r4, #20]
 800d358:	e7e9      	b.n	800d32e <__d2b+0x56>
 800d35a:	a801      	add	r0, sp, #4
 800d35c:	f7ff fcf3 	bl	800cd46 <__lo0bits>
 800d360:	9b01      	ldr	r3, [sp, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	6163      	str	r3, [r4, #20]
 800d366:	3020      	adds	r0, #32
 800d368:	e7e7      	b.n	800d33a <__d2b+0x62>
 800d36a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d36e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d372:	6030      	str	r0, [r6, #0]
 800d374:	6918      	ldr	r0, [r3, #16]
 800d376:	f7ff fcc7 	bl	800cd08 <__hi0bits>
 800d37a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d37e:	e7e4      	b.n	800d34a <__d2b+0x72>
 800d380:	0800ef88 	.word	0x0800ef88
 800d384:	0800f010 	.word	0x0800f010

0800d388 <__ratio>:
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	b085      	sub	sp, #20
 800d38e:	e9cd 1000 	strd	r1, r0, [sp]
 800d392:	a902      	add	r1, sp, #8
 800d394:	f7ff ff58 	bl	800d248 <__b2d>
 800d398:	468b      	mov	fp, r1
 800d39a:	4606      	mov	r6, r0
 800d39c:	460f      	mov	r7, r1
 800d39e:	9800      	ldr	r0, [sp, #0]
 800d3a0:	a903      	add	r1, sp, #12
 800d3a2:	f7ff ff51 	bl	800d248 <__b2d>
 800d3a6:	460d      	mov	r5, r1
 800d3a8:	9b01      	ldr	r3, [sp, #4]
 800d3aa:	4689      	mov	r9, r1
 800d3ac:	6919      	ldr	r1, [r3, #16]
 800d3ae:	9b00      	ldr	r3, [sp, #0]
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	1ac9      	subs	r1, r1, r3
 800d3b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d3bc:	1a9b      	subs	r3, r3, r2
 800d3be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	bfcd      	iteet	gt
 800d3c6:	463a      	movgt	r2, r7
 800d3c8:	462a      	movle	r2, r5
 800d3ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3ce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d3d2:	bfd8      	it	le
 800d3d4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d3d8:	464b      	mov	r3, r9
 800d3da:	4622      	mov	r2, r4
 800d3dc:	4659      	mov	r1, fp
 800d3de:	f7f3 fa59 	bl	8000894 <__aeabi_ddiv>
 800d3e2:	b005      	add	sp, #20
 800d3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3e8 <_mprec_log10>:
 800d3e8:	2817      	cmp	r0, #23
 800d3ea:	b5d0      	push	{r4, r6, r7, lr}
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	dc05      	bgt.n	800d3fc <_mprec_log10+0x14>
 800d3f0:	4b08      	ldr	r3, [pc, #32]	@ (800d414 <_mprec_log10+0x2c>)
 800d3f2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800d3f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3fa:	bdd0      	pop	{r4, r6, r7, pc}
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	2600      	movs	r6, #0
 800d400:	4905      	ldr	r1, [pc, #20]	@ (800d418 <_mprec_log10+0x30>)
 800d402:	4f06      	ldr	r7, [pc, #24]	@ (800d41c <_mprec_log10+0x34>)
 800d404:	4632      	mov	r2, r6
 800d406:	463b      	mov	r3, r7
 800d408:	f7f3 f91a 	bl	8000640 <__aeabi_dmul>
 800d40c:	3c01      	subs	r4, #1
 800d40e:	d1f9      	bne.n	800d404 <_mprec_log10+0x1c>
 800d410:	e7f3      	b.n	800d3fa <_mprec_log10+0x12>
 800d412:	bf00      	nop
 800d414:	0800f0a0 	.word	0x0800f0a0
 800d418:	3ff00000 	.word	0x3ff00000
 800d41c:	40240000 	.word	0x40240000

0800d420 <__copybits>:
 800d420:	3901      	subs	r1, #1
 800d422:	b570      	push	{r4, r5, r6, lr}
 800d424:	1149      	asrs	r1, r1, #5
 800d426:	6914      	ldr	r4, [r2, #16]
 800d428:	3101      	adds	r1, #1
 800d42a:	f102 0314 	add.w	r3, r2, #20
 800d42e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d432:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d436:	1f05      	subs	r5, r0, #4
 800d438:	42a3      	cmp	r3, r4
 800d43a:	d30c      	bcc.n	800d456 <__copybits+0x36>
 800d43c:	1aa3      	subs	r3, r4, r2
 800d43e:	3b11      	subs	r3, #17
 800d440:	f023 0303 	bic.w	r3, r3, #3
 800d444:	3211      	adds	r2, #17
 800d446:	42a2      	cmp	r2, r4
 800d448:	bf88      	it	hi
 800d44a:	2300      	movhi	r3, #0
 800d44c:	4418      	add	r0, r3
 800d44e:	2300      	movs	r3, #0
 800d450:	4288      	cmp	r0, r1
 800d452:	d305      	bcc.n	800d460 <__copybits+0x40>
 800d454:	bd70      	pop	{r4, r5, r6, pc}
 800d456:	f853 6b04 	ldr.w	r6, [r3], #4
 800d45a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d45e:	e7eb      	b.n	800d438 <__copybits+0x18>
 800d460:	f840 3b04 	str.w	r3, [r0], #4
 800d464:	e7f4      	b.n	800d450 <__copybits+0x30>

0800d466 <__any_on>:
 800d466:	f100 0214 	add.w	r2, r0, #20
 800d46a:	6900      	ldr	r0, [r0, #16]
 800d46c:	114b      	asrs	r3, r1, #5
 800d46e:	4298      	cmp	r0, r3
 800d470:	b510      	push	{r4, lr}
 800d472:	db11      	blt.n	800d498 <__any_on+0x32>
 800d474:	dd0a      	ble.n	800d48c <__any_on+0x26>
 800d476:	f011 011f 	ands.w	r1, r1, #31
 800d47a:	d007      	beq.n	800d48c <__any_on+0x26>
 800d47c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d480:	fa24 f001 	lsr.w	r0, r4, r1
 800d484:	fa00 f101 	lsl.w	r1, r0, r1
 800d488:	428c      	cmp	r4, r1
 800d48a:	d10b      	bne.n	800d4a4 <__any_on+0x3e>
 800d48c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d490:	4293      	cmp	r3, r2
 800d492:	d803      	bhi.n	800d49c <__any_on+0x36>
 800d494:	2000      	movs	r0, #0
 800d496:	bd10      	pop	{r4, pc}
 800d498:	4603      	mov	r3, r0
 800d49a:	e7f7      	b.n	800d48c <__any_on+0x26>
 800d49c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4a0:	2900      	cmp	r1, #0
 800d4a2:	d0f5      	beq.n	800d490 <__any_on+0x2a>
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	e7f6      	b.n	800d496 <__any_on+0x30>

0800d4a8 <__ascii_wctomb>:
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	4608      	mov	r0, r1
 800d4ac:	b141      	cbz	r1, 800d4c0 <__ascii_wctomb+0x18>
 800d4ae:	2aff      	cmp	r2, #255	@ 0xff
 800d4b0:	d904      	bls.n	800d4bc <__ascii_wctomb+0x14>
 800d4b2:	228a      	movs	r2, #138	@ 0x8a
 800d4b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4b8:	601a      	str	r2, [r3, #0]
 800d4ba:	4770      	bx	lr
 800d4bc:	2001      	movs	r0, #1
 800d4be:	700a      	strb	r2, [r1, #0]
 800d4c0:	4770      	bx	lr

0800d4c2 <print_e>:
 800d4c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4c4:	b08b      	sub	sp, #44	@ 0x2c
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	a908      	add	r1, sp, #32
 800d4ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d4cc:	9104      	str	r1, [sp, #16]
 800d4ce:	a907      	add	r1, sp, #28
 800d4d0:	9103      	str	r1, [sp, #12]
 800d4d2:	a909      	add	r1, sp, #36	@ 0x24
 800d4d4:	9102      	str	r1, [sp, #8]
 800d4d6:	1c71      	adds	r1, r6, #1
 800d4d8:	9101      	str	r1, [sp, #4]
 800d4da:	2102      	movs	r1, #2
 800d4dc:	9100      	str	r1, [sp, #0]
 800d4de:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 800d4e2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800d4e4:	f000 faa4 	bl	800da30 <_dtoa_r>
 800d4e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d104      	bne.n	800d4fe <print_e+0x3c>
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f000 f9d7 	bl	800d8a8 <strcpy>
 800d4fa:	b00b      	add	sp, #44	@ 0x2c
 800d4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fe:	462b      	mov	r3, r5
 800d500:	7800      	ldrb	r0, [r0, #0]
 800d502:	2e00      	cmp	r6, #0
 800d504:	f803 0b01 	strb.w	r0, [r3], #1
 800d508:	bfc8      	it	gt
 800d50a:	2401      	movgt	r4, #1
 800d50c:	202e      	movs	r0, #46	@ 0x2e
 800d50e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d512:	b10d      	cbz	r5, 800d518 <print_e+0x56>
 800d514:	2e00      	cmp	r6, #0
 800d516:	dc29      	bgt.n	800d56c <print_e+0xaa>
 800d518:	2f67      	cmp	r7, #103	@ 0x67
 800d51a:	d038      	beq.n	800d58e <print_e+0xcc>
 800d51c:	2f47      	cmp	r7, #71	@ 0x47
 800d51e:	d038      	beq.n	800d592 <print_e+0xd0>
 800d520:	212e      	movs	r1, #46	@ 0x2e
 800d522:	2030      	movs	r0, #48	@ 0x30
 800d524:	2e00      	cmp	r6, #0
 800d526:	dc2a      	bgt.n	800d57e <print_e+0xbc>
 800d528:	1e51      	subs	r1, r2, #1
 800d52a:	2900      	cmp	r1, #0
 800d52c:	bfa8      	it	ge
 800d52e:	222b      	movge	r2, #43	@ 0x2b
 800d530:	9109      	str	r1, [sp, #36]	@ 0x24
 800d532:	bfbd      	ittte	lt
 800d534:	212d      	movlt	r1, #45	@ 0x2d
 800d536:	f1c2 0201 	rsblt	r2, r2, #1
 800d53a:	9209      	strlt	r2, [sp, #36]	@ 0x24
 800d53c:	705a      	strbge	r2, [r3, #1]
 800d53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d540:	bfb8      	it	lt
 800d542:	7059      	strblt	r1, [r3, #1]
 800d544:	2a63      	cmp	r2, #99	@ 0x63
 800d546:	701f      	strb	r7, [r3, #0]
 800d548:	dc25      	bgt.n	800d596 <print_e+0xd4>
 800d54a:	1c98      	adds	r0, r3, #2
 800d54c:	220a      	movs	r2, #10
 800d54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d550:	fb93 f2f2 	sdiv	r2, r3, r2
 800d554:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800d558:	7001      	strb	r1, [r0, #0]
 800d55a:	f06f 0109 	mvn.w	r1, #9
 800d55e:	fb01 3302 	mla	r3, r1, r2, r3
 800d562:	3330      	adds	r3, #48	@ 0x30
 800d564:	7043      	strb	r3, [r0, #1]
 800d566:	2300      	movs	r3, #0
 800d568:	7083      	strb	r3, [r0, #2]
 800d56a:	e7c6      	b.n	800d4fa <print_e+0x38>
 800d56c:	b10c      	cbz	r4, 800d572 <print_e+0xb0>
 800d56e:	f803 0b01 	strb.w	r0, [r3], #1
 800d572:	780c      	ldrb	r4, [r1, #0]
 800d574:	3e01      	subs	r6, #1
 800d576:	f803 4b01 	strb.w	r4, [r3], #1
 800d57a:	2400      	movs	r4, #0
 800d57c:	e7c7      	b.n	800d50e <print_e+0x4c>
 800d57e:	b10c      	cbz	r4, 800d584 <print_e+0xc2>
 800d580:	f803 1b01 	strb.w	r1, [r3], #1
 800d584:	2400      	movs	r4, #0
 800d586:	f803 0b01 	strb.w	r0, [r3], #1
 800d58a:	3e01      	subs	r6, #1
 800d58c:	e7ca      	b.n	800d524 <print_e+0x62>
 800d58e:	2765      	movs	r7, #101	@ 0x65
 800d590:	e7ca      	b.n	800d528 <print_e+0x66>
 800d592:	2745      	movs	r7, #69	@ 0x45
 800d594:	e7c8      	b.n	800d528 <print_e+0x66>
 800d596:	2164      	movs	r1, #100	@ 0x64
 800d598:	fb92 f1f1 	sdiv	r1, r2, r1
 800d59c:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 800d5a0:	1cd8      	adds	r0, r3, #3
 800d5a2:	709c      	strb	r4, [r3, #2]
 800d5a4:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800d5a8:	fb03 2201 	mla	r2, r3, r1, r2
 800d5ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5ae:	e7cd      	b.n	800d54c <print_e+0x8a>

0800d5b0 <_gcvt>:
 800d5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5b4:	4690      	mov	r8, r2
 800d5b6:	4699      	mov	r9, r3
 800d5b8:	b08b      	sub	sp, #44	@ 0x2c
 800d5ba:	4607      	mov	r7, r0
 800d5bc:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	@ 0x48
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4640      	mov	r0, r8
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d5ca:	f7f3 faab 	bl	8000b24 <__aeabi_dcmplt>
 800d5ce:	b110      	cbz	r0, 800d5d6 <_gcvt+0x26>
 800d5d0:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d5d4:	4699      	mov	r9, r3
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4640      	mov	r0, r8
 800d5dc:	4649      	mov	r1, r9
 800d5de:	f7f3 fa97 	bl	8000b10 <__aeabi_dcmpeq>
 800d5e2:	b138      	cbz	r0, 800d5f4 <_gcvt+0x44>
 800d5e4:	2330      	movs	r3, #48	@ 0x30
 800d5e6:	702b      	strb	r3, [r5, #0]
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	706b      	strb	r3, [r5, #1]
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	b00b      	add	sp, #44	@ 0x2c
 800d5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5f4:	4640      	mov	r0, r8
 800d5f6:	a34e      	add	r3, pc, #312	@ (adr r3, 800d730 <_gcvt+0x180>)
 800d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fc:	4649      	mov	r1, r9
 800d5fe:	f7f3 fa9b 	bl	8000b38 <__aeabi_dcmple>
 800d602:	b160      	cbz	r0, 800d61e <_gcvt+0x6e>
 800d604:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800d608:	3c01      	subs	r4, #1
 800d60a:	9301      	str	r3, [sp, #4]
 800d60c:	4642      	mov	r2, r8
 800d60e:	464b      	mov	r3, r9
 800d610:	4629      	mov	r1, r5
 800d612:	4638      	mov	r0, r7
 800d614:	9602      	str	r6, [sp, #8]
 800d616:	9400      	str	r4, [sp, #0]
 800d618:	f7ff ff53 	bl	800d4c2 <print_e>
 800d61c:	e7e6      	b.n	800d5ec <_gcvt+0x3c>
 800d61e:	4620      	mov	r0, r4
 800d620:	f7ff fee2 	bl	800d3e8 <_mprec_log10>
 800d624:	4642      	mov	r2, r8
 800d626:	464b      	mov	r3, r9
 800d628:	f7f3 fa86 	bl	8000b38 <__aeabi_dcmple>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d1e9      	bne.n	800d604 <_gcvt+0x54>
 800d630:	ab09      	add	r3, sp, #36	@ 0x24
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	ab08      	add	r3, sp, #32
 800d636:	9303      	str	r3, [sp, #12]
 800d638:	ab07      	add	r3, sp, #28
 800d63a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800d63e:	2302      	movs	r3, #2
 800d640:	4642      	mov	r2, r8
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	4638      	mov	r0, r7
 800d646:	464b      	mov	r3, r9
 800d648:	f000 f9f2 	bl	800da30 <_dtoa_r>
 800d64c:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d650:	9a07      	ldr	r2, [sp, #28]
 800d652:	4601      	mov	r1, r0
 800d654:	429a      	cmp	r2, r3
 800d656:	d00d      	beq.n	800d674 <_gcvt+0xc4>
 800d658:	462b      	mov	r3, r5
 800d65a:	460f      	mov	r7, r1
 800d65c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d660:	9a07      	ldr	r2, [sp, #28]
 800d662:	b108      	cbz	r0, 800d668 <_gcvt+0xb8>
 800d664:	2a00      	cmp	r2, #0
 800d666:	dc09      	bgt.n	800d67c <_gcvt+0xcc>
 800d668:	1928      	adds	r0, r5, r4
 800d66a:	2100      	movs	r1, #0
 800d66c:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800d670:	1ac0      	subs	r0, r0, r3
 800d672:	e00c      	b.n	800d68e <_gcvt+0xde>
 800d674:	4628      	mov	r0, r5
 800d676:	f000 f917 	bl	800d8a8 <strcpy>
 800d67a:	e7b7      	b.n	800d5ec <_gcvt+0x3c>
 800d67c:	3a01      	subs	r2, #1
 800d67e:	f803 0b01 	strb.w	r0, [r3], #1
 800d682:	9207      	str	r2, [sp, #28]
 800d684:	e7e9      	b.n	800d65a <_gcvt+0xaa>
 800d686:	2101      	movs	r1, #1
 800d688:	f803 cb01 	strb.w	ip, [r3], #1
 800d68c:	3801      	subs	r0, #1
 800d68e:	2a00      	cmp	r2, #0
 800d690:	4614      	mov	r4, r2
 800d692:	dc2e      	bgt.n	800d6f2 <_gcvt+0x142>
 800d694:	b101      	cbz	r1, 800d698 <_gcvt+0xe8>
 800d696:	9207      	str	r2, [sp, #28]
 800d698:	b90e      	cbnz	r6, 800d69e <_gcvt+0xee>
 800d69a:	783a      	ldrb	r2, [r7, #0]
 800d69c:	b332      	cbz	r2, 800d6ec <_gcvt+0x13c>
 800d69e:	42ab      	cmp	r3, r5
 800d6a0:	bf04      	itt	eq
 800d6a2:	2230      	moveq	r2, #48	@ 0x30
 800d6a4:	f803 2b01 	strbeq.w	r2, [r3], #1
 800d6a8:	222e      	movs	r2, #46	@ 0x2e
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	f04f 0c00 	mov.w	ip, #0
 800d6b0:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 800d6b4:	701a      	strb	r2, [r3, #0]
 800d6b6:	9a07      	ldr	r2, [sp, #28]
 800d6b8:	1ad4      	subs	r4, r2, r3
 800d6ba:	42cc      	cmn	r4, r1
 800d6bc:	d421      	bmi.n	800d702 <_gcvt+0x152>
 800d6be:	2a00      	cmp	r2, #0
 800d6c0:	f1c2 0100 	rsb	r1, r2, #0
 800d6c4:	bfd4      	ite	le
 800d6c6:	460c      	movle	r4, r1
 800d6c8:	2400      	movgt	r4, #0
 800d6ca:	3401      	adds	r4, #1
 800d6cc:	4423      	add	r3, r4
 800d6ce:	f1bc 0f00 	cmp.w	ip, #0
 800d6d2:	d004      	beq.n	800d6de <_gcvt+0x12e>
 800d6d4:	2a00      	cmp	r2, #0
 800d6d6:	bfc8      	it	gt
 800d6d8:	2100      	movgt	r1, #0
 800d6da:	440a      	add	r2, r1
 800d6dc:	9207      	str	r2, [sp, #28]
 800d6de:	1e7a      	subs	r2, r7, #1
 800d6e0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d6e4:	b109      	cbz	r1, 800d6ea <_gcvt+0x13a>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	dc10      	bgt.n	800d70c <_gcvt+0x15c>
 800d6ea:	b9e6      	cbnz	r6, 800d726 <_gcvt+0x176>
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	e77c      	b.n	800d5ec <_gcvt+0x3c>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 800d6f8:	dcc5      	bgt.n	800d686 <_gcvt+0xd6>
 800d6fa:	2900      	cmp	r1, #0
 800d6fc:	d0cc      	beq.n	800d698 <_gcvt+0xe8>
 800d6fe:	9407      	str	r4, [sp, #28]
 800d700:	e7ca      	b.n	800d698 <_gcvt+0xe8>
 800d702:	f04f 0c01 	mov.w	ip, #1
 800d706:	f801 ef01 	strb.w	lr, [r1, #1]!
 800d70a:	e7d6      	b.n	800d6ba <_gcvt+0x10a>
 800d70c:	f803 1b01 	strb.w	r1, [r3], #1
 800d710:	3801      	subs	r0, #1
 800d712:	e7e5      	b.n	800d6e0 <_gcvt+0x130>
 800d714:	f802 6b01 	strb.w	r6, [r2], #1
 800d718:	1aa1      	subs	r1, r4, r2
 800d71a:	2900      	cmp	r1, #0
 800d71c:	dcfa      	bgt.n	800d714 <_gcvt+0x164>
 800d71e:	2800      	cmp	r0, #0
 800d720:	bfa8      	it	ge
 800d722:	181b      	addge	r3, r3, r0
 800d724:	e7e2      	b.n	800d6ec <_gcvt+0x13c>
 800d726:	461a      	mov	r2, r3
 800d728:	2630      	movs	r6, #48	@ 0x30
 800d72a:	181c      	adds	r4, r3, r0
 800d72c:	e7f4      	b.n	800d718 <_gcvt+0x168>
 800d72e:	bf00      	nop
 800d730:	eb1c432d 	.word	0xeb1c432d
 800d734:	3f1a36e2 	.word	0x3f1a36e2

0800d738 <__sflush_r>:
 800d738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	0716      	lsls	r6, r2, #28
 800d740:	4605      	mov	r5, r0
 800d742:	460c      	mov	r4, r1
 800d744:	d454      	bmi.n	800d7f0 <__sflush_r+0xb8>
 800d746:	684b      	ldr	r3, [r1, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	dc02      	bgt.n	800d752 <__sflush_r+0x1a>
 800d74c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d74e:	2b00      	cmp	r3, #0
 800d750:	dd48      	ble.n	800d7e4 <__sflush_r+0xac>
 800d752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d754:	2e00      	cmp	r6, #0
 800d756:	d045      	beq.n	800d7e4 <__sflush_r+0xac>
 800d758:	2300      	movs	r3, #0
 800d75a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d75e:	682f      	ldr	r7, [r5, #0]
 800d760:	6a21      	ldr	r1, [r4, #32]
 800d762:	602b      	str	r3, [r5, #0]
 800d764:	d030      	beq.n	800d7c8 <__sflush_r+0x90>
 800d766:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	0759      	lsls	r1, r3, #29
 800d76c:	d505      	bpl.n	800d77a <__sflush_r+0x42>
 800d76e:	6863      	ldr	r3, [r4, #4]
 800d770:	1ad2      	subs	r2, r2, r3
 800d772:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d774:	b10b      	cbz	r3, 800d77a <__sflush_r+0x42>
 800d776:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d778:	1ad2      	subs	r2, r2, r3
 800d77a:	2300      	movs	r3, #0
 800d77c:	4628      	mov	r0, r5
 800d77e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d780:	6a21      	ldr	r1, [r4, #32]
 800d782:	47b0      	blx	r6
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	d106      	bne.n	800d798 <__sflush_r+0x60>
 800d78a:	6829      	ldr	r1, [r5, #0]
 800d78c:	291d      	cmp	r1, #29
 800d78e:	d82b      	bhi.n	800d7e8 <__sflush_r+0xb0>
 800d790:	4a28      	ldr	r2, [pc, #160]	@ (800d834 <__sflush_r+0xfc>)
 800d792:	410a      	asrs	r2, r1
 800d794:	07d6      	lsls	r6, r2, #31
 800d796:	d427      	bmi.n	800d7e8 <__sflush_r+0xb0>
 800d798:	2200      	movs	r2, #0
 800d79a:	6062      	str	r2, [r4, #4]
 800d79c:	6922      	ldr	r2, [r4, #16]
 800d79e:	04d9      	lsls	r1, r3, #19
 800d7a0:	6022      	str	r2, [r4, #0]
 800d7a2:	d504      	bpl.n	800d7ae <__sflush_r+0x76>
 800d7a4:	1c42      	adds	r2, r0, #1
 800d7a6:	d101      	bne.n	800d7ac <__sflush_r+0x74>
 800d7a8:	682b      	ldr	r3, [r5, #0]
 800d7aa:	b903      	cbnz	r3, 800d7ae <__sflush_r+0x76>
 800d7ac:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7b0:	602f      	str	r7, [r5, #0]
 800d7b2:	b1b9      	cbz	r1, 800d7e4 <__sflush_r+0xac>
 800d7b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7b8:	4299      	cmp	r1, r3
 800d7ba:	d002      	beq.n	800d7c2 <__sflush_r+0x8a>
 800d7bc:	4628      	mov	r0, r5
 800d7be:	f7fe fd6f 	bl	800c2a0 <_free_r>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7c6:	e00d      	b.n	800d7e4 <__sflush_r+0xac>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	47b0      	blx	r6
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	1c50      	adds	r0, r2, #1
 800d7d2:	d1c9      	bne.n	800d768 <__sflush_r+0x30>
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0c6      	beq.n	800d768 <__sflush_r+0x30>
 800d7da:	2b1d      	cmp	r3, #29
 800d7dc:	d001      	beq.n	800d7e2 <__sflush_r+0xaa>
 800d7de:	2b16      	cmp	r3, #22
 800d7e0:	d11d      	bne.n	800d81e <__sflush_r+0xe6>
 800d7e2:	602f      	str	r7, [r5, #0]
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	e021      	b.n	800d82c <__sflush_r+0xf4>
 800d7e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ec:	b21b      	sxth	r3, r3
 800d7ee:	e01a      	b.n	800d826 <__sflush_r+0xee>
 800d7f0:	690f      	ldr	r7, [r1, #16]
 800d7f2:	2f00      	cmp	r7, #0
 800d7f4:	d0f6      	beq.n	800d7e4 <__sflush_r+0xac>
 800d7f6:	0793      	lsls	r3, r2, #30
 800d7f8:	bf18      	it	ne
 800d7fa:	2300      	movne	r3, #0
 800d7fc:	680e      	ldr	r6, [r1, #0]
 800d7fe:	bf08      	it	eq
 800d800:	694b      	ldreq	r3, [r1, #20]
 800d802:	1bf6      	subs	r6, r6, r7
 800d804:	600f      	str	r7, [r1, #0]
 800d806:	608b      	str	r3, [r1, #8]
 800d808:	2e00      	cmp	r6, #0
 800d80a:	ddeb      	ble.n	800d7e4 <__sflush_r+0xac>
 800d80c:	4633      	mov	r3, r6
 800d80e:	463a      	mov	r2, r7
 800d810:	4628      	mov	r0, r5
 800d812:	6a21      	ldr	r1, [r4, #32]
 800d814:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d818:	47e0      	blx	ip
 800d81a:	2800      	cmp	r0, #0
 800d81c:	dc07      	bgt.n	800d82e <__sflush_r+0xf6>
 800d81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d826:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d82a:	81a3      	strh	r3, [r4, #12]
 800d82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d82e:	4407      	add	r7, r0
 800d830:	1a36      	subs	r6, r6, r0
 800d832:	e7e9      	b.n	800d808 <__sflush_r+0xd0>
 800d834:	dfbffffe 	.word	0xdfbffffe

0800d838 <_fflush_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	690b      	ldr	r3, [r1, #16]
 800d83c:	4605      	mov	r5, r0
 800d83e:	460c      	mov	r4, r1
 800d840:	b913      	cbnz	r3, 800d848 <_fflush_r+0x10>
 800d842:	2500      	movs	r5, #0
 800d844:	4628      	mov	r0, r5
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	b118      	cbz	r0, 800d852 <_fflush_r+0x1a>
 800d84a:	6a03      	ldr	r3, [r0, #32]
 800d84c:	b90b      	cbnz	r3, 800d852 <_fflush_r+0x1a>
 800d84e:	f7fe fc0b 	bl	800c068 <__sinit>
 800d852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d0f3      	beq.n	800d842 <_fflush_r+0xa>
 800d85a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d85c:	07d0      	lsls	r0, r2, #31
 800d85e:	d404      	bmi.n	800d86a <_fflush_r+0x32>
 800d860:	0599      	lsls	r1, r3, #22
 800d862:	d402      	bmi.n	800d86a <_fflush_r+0x32>
 800d864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d866:	f7fe fd04 	bl	800c272 <__retarget_lock_acquire_recursive>
 800d86a:	4628      	mov	r0, r5
 800d86c:	4621      	mov	r1, r4
 800d86e:	f7ff ff63 	bl	800d738 <__sflush_r>
 800d872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d874:	4605      	mov	r5, r0
 800d876:	07da      	lsls	r2, r3, #31
 800d878:	d4e4      	bmi.n	800d844 <_fflush_r+0xc>
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	059b      	lsls	r3, r3, #22
 800d87e:	d4e1      	bmi.n	800d844 <_fflush_r+0xc>
 800d880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d882:	f7fe fcf7 	bl	800c274 <__retarget_lock_release_recursive>
 800d886:	e7dd      	b.n	800d844 <_fflush_r+0xc>

0800d888 <_sbrk_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	2300      	movs	r3, #0
 800d88c:	4d05      	ldr	r5, [pc, #20]	@ (800d8a4 <_sbrk_r+0x1c>)
 800d88e:	4604      	mov	r4, r0
 800d890:	4608      	mov	r0, r1
 800d892:	602b      	str	r3, [r5, #0]
 800d894:	f7f4 fa24 	bl	8001ce0 <_sbrk>
 800d898:	1c43      	adds	r3, r0, #1
 800d89a:	d102      	bne.n	800d8a2 <_sbrk_r+0x1a>
 800d89c:	682b      	ldr	r3, [r5, #0]
 800d89e:	b103      	cbz	r3, 800d8a2 <_sbrk_r+0x1a>
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	bd38      	pop	{r3, r4, r5, pc}
 800d8a4:	200018d4 	.word	0x200018d4

0800d8a8 <strcpy>:
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8ae:	f803 2b01 	strb.w	r2, [r3], #1
 800d8b2:	2a00      	cmp	r2, #0
 800d8b4:	d1f9      	bne.n	800d8aa <strcpy+0x2>
 800d8b6:	4770      	bx	lr

0800d8b8 <__assert_func>:
 800d8b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ba:	4614      	mov	r4, r2
 800d8bc:	461a      	mov	r2, r3
 800d8be:	4b09      	ldr	r3, [pc, #36]	@ (800d8e4 <__assert_func+0x2c>)
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68d8      	ldr	r0, [r3, #12]
 800d8c6:	b954      	cbnz	r4, 800d8de <__assert_func+0x26>
 800d8c8:	4b07      	ldr	r3, [pc, #28]	@ (800d8e8 <__assert_func+0x30>)
 800d8ca:	461c      	mov	r4, r3
 800d8cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8d0:	9100      	str	r1, [sp, #0]
 800d8d2:	462b      	mov	r3, r5
 800d8d4:	4905      	ldr	r1, [pc, #20]	@ (800d8ec <__assert_func+0x34>)
 800d8d6:	f000 fe7b 	bl	800e5d0 <fiprintf>
 800d8da:	f000 fe8b 	bl	800e5f4 <abort>
 800d8de:	4b04      	ldr	r3, [pc, #16]	@ (800d8f0 <__assert_func+0x38>)
 800d8e0:	e7f4      	b.n	800d8cc <__assert_func+0x14>
 800d8e2:	bf00      	nop
 800d8e4:	200002f4 	.word	0x200002f4
 800d8e8:	0800f2a4 	.word	0x0800f2a4
 800d8ec:	0800f276 	.word	0x0800f276
 800d8f0:	0800f269 	.word	0x0800f269

0800d8f4 <_calloc_r>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	fba1 5402 	umull	r5, r4, r1, r2
 800d8fa:	b93c      	cbnz	r4, 800d90c <_calloc_r+0x18>
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7ff f873 	bl	800c9e8 <_malloc_r>
 800d902:	4606      	mov	r6, r0
 800d904:	b928      	cbnz	r0, 800d912 <_calloc_r+0x1e>
 800d906:	2600      	movs	r6, #0
 800d908:	4630      	mov	r0, r6
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	220c      	movs	r2, #12
 800d90e:	6002      	str	r2, [r0, #0]
 800d910:	e7f9      	b.n	800d906 <_calloc_r+0x12>
 800d912:	462a      	mov	r2, r5
 800d914:	4621      	mov	r1, r4
 800d916:	f7fe fc20 	bl	800c15a <memset>
 800d91a:	e7f5      	b.n	800d908 <_calloc_r+0x14>

0800d91c <quorem>:
 800d91c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d920:	6903      	ldr	r3, [r0, #16]
 800d922:	690c      	ldr	r4, [r1, #16]
 800d924:	4607      	mov	r7, r0
 800d926:	42a3      	cmp	r3, r4
 800d928:	db7e      	blt.n	800da28 <quorem+0x10c>
 800d92a:	3c01      	subs	r4, #1
 800d92c:	00a3      	lsls	r3, r4, #2
 800d92e:	f100 0514 	add.w	r5, r0, #20
 800d932:	f101 0814 	add.w	r8, r1, #20
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d946:	3301      	adds	r3, #1
 800d948:	429a      	cmp	r2, r3
 800d94a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d94e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d952:	d32e      	bcc.n	800d9b2 <quorem+0x96>
 800d954:	f04f 0a00 	mov.w	sl, #0
 800d958:	46c4      	mov	ip, r8
 800d95a:	46ae      	mov	lr, r5
 800d95c:	46d3      	mov	fp, sl
 800d95e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d962:	b298      	uxth	r0, r3
 800d964:	fb06 a000 	mla	r0, r6, r0, sl
 800d968:	0c1b      	lsrs	r3, r3, #16
 800d96a:	0c02      	lsrs	r2, r0, #16
 800d96c:	fb06 2303 	mla	r3, r6, r3, r2
 800d970:	f8de 2000 	ldr.w	r2, [lr]
 800d974:	b280      	uxth	r0, r0
 800d976:	b292      	uxth	r2, r2
 800d978:	1a12      	subs	r2, r2, r0
 800d97a:	445a      	add	r2, fp
 800d97c:	f8de 0000 	ldr.w	r0, [lr]
 800d980:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d984:	b29b      	uxth	r3, r3
 800d986:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d98a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d98e:	b292      	uxth	r2, r2
 800d990:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d994:	45e1      	cmp	r9, ip
 800d996:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d99a:	f84e 2b04 	str.w	r2, [lr], #4
 800d99e:	d2de      	bcs.n	800d95e <quorem+0x42>
 800d9a0:	9b00      	ldr	r3, [sp, #0]
 800d9a2:	58eb      	ldr	r3, [r5, r3]
 800d9a4:	b92b      	cbnz	r3, 800d9b2 <quorem+0x96>
 800d9a6:	9b01      	ldr	r3, [sp, #4]
 800d9a8:	3b04      	subs	r3, #4
 800d9aa:	429d      	cmp	r5, r3
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	d32f      	bcc.n	800da10 <quorem+0xf4>
 800d9b0:	613c      	str	r4, [r7, #16]
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	f7ff fb78 	bl	800d0a8 <__mcmp>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	db25      	blt.n	800da08 <quorem+0xec>
 800d9bc:	4629      	mov	r1, r5
 800d9be:	2000      	movs	r0, #0
 800d9c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d9c4:	f8d1 c000 	ldr.w	ip, [r1]
 800d9c8:	fa1f fe82 	uxth.w	lr, r2
 800d9cc:	fa1f f38c 	uxth.w	r3, ip
 800d9d0:	eba3 030e 	sub.w	r3, r3, lr
 800d9d4:	4403      	add	r3, r0
 800d9d6:	0c12      	lsrs	r2, r2, #16
 800d9d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d9dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9e6:	45c1      	cmp	r9, r8
 800d9e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d9ec:	f841 3b04 	str.w	r3, [r1], #4
 800d9f0:	d2e6      	bcs.n	800d9c0 <quorem+0xa4>
 800d9f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9fa:	b922      	cbnz	r2, 800da06 <quorem+0xea>
 800d9fc:	3b04      	subs	r3, #4
 800d9fe:	429d      	cmp	r5, r3
 800da00:	461a      	mov	r2, r3
 800da02:	d30b      	bcc.n	800da1c <quorem+0x100>
 800da04:	613c      	str	r4, [r7, #16]
 800da06:	3601      	adds	r6, #1
 800da08:	4630      	mov	r0, r6
 800da0a:	b003      	add	sp, #12
 800da0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da10:	6812      	ldr	r2, [r2, #0]
 800da12:	3b04      	subs	r3, #4
 800da14:	2a00      	cmp	r2, #0
 800da16:	d1cb      	bne.n	800d9b0 <quorem+0x94>
 800da18:	3c01      	subs	r4, #1
 800da1a:	e7c6      	b.n	800d9aa <quorem+0x8e>
 800da1c:	6812      	ldr	r2, [r2, #0]
 800da1e:	3b04      	subs	r3, #4
 800da20:	2a00      	cmp	r2, #0
 800da22:	d1ef      	bne.n	800da04 <quorem+0xe8>
 800da24:	3c01      	subs	r4, #1
 800da26:	e7ea      	b.n	800d9fe <quorem+0xe2>
 800da28:	2000      	movs	r0, #0
 800da2a:	e7ee      	b.n	800da0a <quorem+0xee>
 800da2c:	0000      	movs	r0, r0
	...

0800da30 <_dtoa_r>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	4614      	mov	r4, r2
 800da36:	461d      	mov	r5, r3
 800da38:	69c7      	ldr	r7, [r0, #28]
 800da3a:	b097      	sub	sp, #92	@ 0x5c
 800da3c:	4683      	mov	fp, r0
 800da3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800da42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800da44:	b97f      	cbnz	r7, 800da66 <_dtoa_r+0x36>
 800da46:	2010      	movs	r0, #16
 800da48:	f000 fdba 	bl	800e5c0 <malloc>
 800da4c:	4602      	mov	r2, r0
 800da4e:	f8cb 001c 	str.w	r0, [fp, #28]
 800da52:	b920      	cbnz	r0, 800da5e <_dtoa_r+0x2e>
 800da54:	21ef      	movs	r1, #239	@ 0xef
 800da56:	4ba8      	ldr	r3, [pc, #672]	@ (800dcf8 <_dtoa_r+0x2c8>)
 800da58:	48a8      	ldr	r0, [pc, #672]	@ (800dcfc <_dtoa_r+0x2cc>)
 800da5a:	f7ff ff2d 	bl	800d8b8 <__assert_func>
 800da5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800da62:	6007      	str	r7, [r0, #0]
 800da64:	60c7      	str	r7, [r0, #12]
 800da66:	f8db 301c 	ldr.w	r3, [fp, #28]
 800da6a:	6819      	ldr	r1, [r3, #0]
 800da6c:	b159      	cbz	r1, 800da86 <_dtoa_r+0x56>
 800da6e:	685a      	ldr	r2, [r3, #4]
 800da70:	2301      	movs	r3, #1
 800da72:	4093      	lsls	r3, r2
 800da74:	604a      	str	r2, [r1, #4]
 800da76:	608b      	str	r3, [r1, #8]
 800da78:	4658      	mov	r0, fp
 800da7a:	f7ff f893 	bl	800cba4 <_Bfree>
 800da7e:	2200      	movs	r2, #0
 800da80:	f8db 301c 	ldr.w	r3, [fp, #28]
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	1e2b      	subs	r3, r5, #0
 800da88:	bfaf      	iteee	ge
 800da8a:	2300      	movge	r3, #0
 800da8c:	2201      	movlt	r2, #1
 800da8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800da92:	9303      	strlt	r3, [sp, #12]
 800da94:	bfa8      	it	ge
 800da96:	6033      	strge	r3, [r6, #0]
 800da98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800da9c:	4b98      	ldr	r3, [pc, #608]	@ (800dd00 <_dtoa_r+0x2d0>)
 800da9e:	bfb8      	it	lt
 800daa0:	6032      	strlt	r2, [r6, #0]
 800daa2:	ea33 0308 	bics.w	r3, r3, r8
 800daa6:	d112      	bne.n	800dace <_dtoa_r+0x9e>
 800daa8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800daac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800daae:	6013      	str	r3, [r2, #0]
 800dab0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dab4:	4323      	orrs	r3, r4
 800dab6:	f000 8550 	beq.w	800e55a <_dtoa_r+0xb2a>
 800daba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dabc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800dd04 <_dtoa_r+0x2d4>
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f000 8552 	beq.w	800e56a <_dtoa_r+0xb3a>
 800dac6:	f10a 0303 	add.w	r3, sl, #3
 800daca:	f000 bd4c 	b.w	800e566 <_dtoa_r+0xb36>
 800dace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dad2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dada:	2200      	movs	r2, #0
 800dadc:	2300      	movs	r3, #0
 800dade:	f7f3 f817 	bl	8000b10 <__aeabi_dcmpeq>
 800dae2:	4607      	mov	r7, r0
 800dae4:	b158      	cbz	r0, 800dafe <_dtoa_r+0xce>
 800dae6:	2301      	movs	r3, #1
 800dae8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800daea:	6013      	str	r3, [r2, #0]
 800daec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800daee:	b113      	cbz	r3, 800daf6 <_dtoa_r+0xc6>
 800daf0:	4b85      	ldr	r3, [pc, #532]	@ (800dd08 <_dtoa_r+0x2d8>)
 800daf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800dd0c <_dtoa_r+0x2dc>
 800dafa:	f000 bd36 	b.w	800e56a <_dtoa_r+0xb3a>
 800dafe:	ab14      	add	r3, sp, #80	@ 0x50
 800db00:	9301      	str	r3, [sp, #4]
 800db02:	ab15      	add	r3, sp, #84	@ 0x54
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	4658      	mov	r0, fp
 800db08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800db0c:	f7ff fbe4 	bl	800d2d8 <__d2b>
 800db10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800db14:	4681      	mov	r9, r0
 800db16:	2e00      	cmp	r6, #0
 800db18:	d077      	beq.n	800dc0a <_dtoa_r+0x1da>
 800db1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800db24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800db2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800db30:	9712      	str	r7, [sp, #72]	@ 0x48
 800db32:	4619      	mov	r1, r3
 800db34:	2200      	movs	r2, #0
 800db36:	4b76      	ldr	r3, [pc, #472]	@ (800dd10 <_dtoa_r+0x2e0>)
 800db38:	f7f2 fbca 	bl	80002d0 <__aeabi_dsub>
 800db3c:	a368      	add	r3, pc, #416	@ (adr r3, 800dce0 <_dtoa_r+0x2b0>)
 800db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db42:	f7f2 fd7d 	bl	8000640 <__aeabi_dmul>
 800db46:	a368      	add	r3, pc, #416	@ (adr r3, 800dce8 <_dtoa_r+0x2b8>)
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	f7f2 fbc2 	bl	80002d4 <__adddf3>
 800db50:	4604      	mov	r4, r0
 800db52:	4630      	mov	r0, r6
 800db54:	460d      	mov	r5, r1
 800db56:	f7f2 fd09 	bl	800056c <__aeabi_i2d>
 800db5a:	a365      	add	r3, pc, #404	@ (adr r3, 800dcf0 <_dtoa_r+0x2c0>)
 800db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db60:	f7f2 fd6e 	bl	8000640 <__aeabi_dmul>
 800db64:	4602      	mov	r2, r0
 800db66:	460b      	mov	r3, r1
 800db68:	4620      	mov	r0, r4
 800db6a:	4629      	mov	r1, r5
 800db6c:	f7f2 fbb2 	bl	80002d4 <__adddf3>
 800db70:	4604      	mov	r4, r0
 800db72:	460d      	mov	r5, r1
 800db74:	f7f2 fffe 	bl	8000b74 <__aeabi_d2iz>
 800db78:	2200      	movs	r2, #0
 800db7a:	4607      	mov	r7, r0
 800db7c:	2300      	movs	r3, #0
 800db7e:	4620      	mov	r0, r4
 800db80:	4629      	mov	r1, r5
 800db82:	f7f2 ffcf 	bl	8000b24 <__aeabi_dcmplt>
 800db86:	b140      	cbz	r0, 800db9a <_dtoa_r+0x16a>
 800db88:	4638      	mov	r0, r7
 800db8a:	f7f2 fcef 	bl	800056c <__aeabi_i2d>
 800db8e:	4622      	mov	r2, r4
 800db90:	462b      	mov	r3, r5
 800db92:	f7f2 ffbd 	bl	8000b10 <__aeabi_dcmpeq>
 800db96:	b900      	cbnz	r0, 800db9a <_dtoa_r+0x16a>
 800db98:	3f01      	subs	r7, #1
 800db9a:	2f16      	cmp	r7, #22
 800db9c:	d853      	bhi.n	800dc46 <_dtoa_r+0x216>
 800db9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dba2:	4b5c      	ldr	r3, [pc, #368]	@ (800dd14 <_dtoa_r+0x2e4>)
 800dba4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbac:	f7f2 ffba 	bl	8000b24 <__aeabi_dcmplt>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d04a      	beq.n	800dc4a <_dtoa_r+0x21a>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	3f01      	subs	r7, #1
 800dbb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dbbc:	1b9b      	subs	r3, r3, r6
 800dbbe:	1e5a      	subs	r2, r3, #1
 800dbc0:	bf46      	itte	mi
 800dbc2:	f1c3 0801 	rsbmi	r8, r3, #1
 800dbc6:	2300      	movmi	r3, #0
 800dbc8:	f04f 0800 	movpl.w	r8, #0
 800dbcc:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbce:	bf48      	it	mi
 800dbd0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800dbd2:	2f00      	cmp	r7, #0
 800dbd4:	db3b      	blt.n	800dc4e <_dtoa_r+0x21e>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd8:	970e      	str	r7, [sp, #56]	@ 0x38
 800dbda:	443b      	add	r3, r7
 800dbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbde:	2300      	movs	r3, #0
 800dbe0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbe2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dbe4:	2b09      	cmp	r3, #9
 800dbe6:	d866      	bhi.n	800dcb6 <_dtoa_r+0x286>
 800dbe8:	2b05      	cmp	r3, #5
 800dbea:	bfc4      	itt	gt
 800dbec:	3b04      	subgt	r3, #4
 800dbee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800dbf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dbf2:	bfc8      	it	gt
 800dbf4:	2400      	movgt	r4, #0
 800dbf6:	f1a3 0302 	sub.w	r3, r3, #2
 800dbfa:	bfd8      	it	le
 800dbfc:	2401      	movle	r4, #1
 800dbfe:	2b03      	cmp	r3, #3
 800dc00:	d864      	bhi.n	800dccc <_dtoa_r+0x29c>
 800dc02:	e8df f003 	tbb	[pc, r3]
 800dc06:	382b      	.short	0x382b
 800dc08:	5636      	.short	0x5636
 800dc0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800dc0e:	441e      	add	r6, r3
 800dc10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dc14:	2b20      	cmp	r3, #32
 800dc16:	bfc1      	itttt	gt
 800dc18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dc1c:	fa08 f803 	lslgt.w	r8, r8, r3
 800dc20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dc24:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dc28:	bfd6      	itet	le
 800dc2a:	f1c3 0320 	rsble	r3, r3, #32
 800dc2e:	ea48 0003 	orrgt.w	r0, r8, r3
 800dc32:	fa04 f003 	lslle.w	r0, r4, r3
 800dc36:	f7f2 fc89 	bl	800054c <__aeabi_ui2d>
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dc40:	3e01      	subs	r6, #1
 800dc42:	9212      	str	r2, [sp, #72]	@ 0x48
 800dc44:	e775      	b.n	800db32 <_dtoa_r+0x102>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e7b6      	b.n	800dbb8 <_dtoa_r+0x188>
 800dc4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dc4c:	e7b5      	b.n	800dbba <_dtoa_r+0x18a>
 800dc4e:	427b      	negs	r3, r7
 800dc50:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc52:	2300      	movs	r3, #0
 800dc54:	eba8 0807 	sub.w	r8, r8, r7
 800dc58:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc5a:	e7c2      	b.n	800dbe2 <_dtoa_r+0x1b2>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	dc35      	bgt.n	800dcd2 <_dtoa_r+0x2a2>
 800dc66:	2301      	movs	r3, #1
 800dc68:	461a      	mov	r2, r3
 800dc6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800dc6e:	9221      	str	r2, [sp, #132]	@ 0x84
 800dc70:	e00b      	b.n	800dc8a <_dtoa_r+0x25a>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e7f3      	b.n	800dc5e <_dtoa_r+0x22e>
 800dc76:	2300      	movs	r3, #0
 800dc78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc7c:	18fb      	adds	r3, r7, r3
 800dc7e:	9308      	str	r3, [sp, #32]
 800dc80:	3301      	adds	r3, #1
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	9307      	str	r3, [sp, #28]
 800dc86:	bfb8      	it	lt
 800dc88:	2301      	movlt	r3, #1
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	2204      	movs	r2, #4
 800dc8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dc92:	f102 0514 	add.w	r5, r2, #20
 800dc96:	429d      	cmp	r5, r3
 800dc98:	d91f      	bls.n	800dcda <_dtoa_r+0x2aa>
 800dc9a:	6041      	str	r1, [r0, #4]
 800dc9c:	4658      	mov	r0, fp
 800dc9e:	f7fe ff41 	bl	800cb24 <_Balloc>
 800dca2:	4682      	mov	sl, r0
 800dca4:	2800      	cmp	r0, #0
 800dca6:	d139      	bne.n	800dd1c <_dtoa_r+0x2ec>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	f240 11af 	movw	r1, #431	@ 0x1af
 800dcae:	4b1a      	ldr	r3, [pc, #104]	@ (800dd18 <_dtoa_r+0x2e8>)
 800dcb0:	e6d2      	b.n	800da58 <_dtoa_r+0x28>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e7e0      	b.n	800dc78 <_dtoa_r+0x248>
 800dcb6:	2401      	movs	r4, #1
 800dcb8:	2300      	movs	r3, #0
 800dcba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dcbc:	9320      	str	r3, [sp, #128]	@ 0x80
 800dcbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800dcc8:	2312      	movs	r3, #18
 800dcca:	e7d0      	b.n	800dc6e <_dtoa_r+0x23e>
 800dccc:	2301      	movs	r3, #1
 800dcce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcd0:	e7f5      	b.n	800dcbe <_dtoa_r+0x28e>
 800dcd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dcd4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800dcd8:	e7d7      	b.n	800dc8a <_dtoa_r+0x25a>
 800dcda:	3101      	adds	r1, #1
 800dcdc:	0052      	lsls	r2, r2, #1
 800dcde:	e7d8      	b.n	800dc92 <_dtoa_r+0x262>
 800dce0:	636f4361 	.word	0x636f4361
 800dce4:	3fd287a7 	.word	0x3fd287a7
 800dce8:	8b60c8b3 	.word	0x8b60c8b3
 800dcec:	3fc68a28 	.word	0x3fc68a28
 800dcf0:	509f79fb 	.word	0x509f79fb
 800dcf4:	3fd34413 	.word	0x3fd34413
 800dcf8:	0800eff9 	.word	0x0800eff9
 800dcfc:	0800f2b4 	.word	0x0800f2b4
 800dd00:	7ff00000 	.word	0x7ff00000
 800dd04:	0800f2ae 	.word	0x0800f2ae
 800dd08:	0800f2b3 	.word	0x0800f2b3
 800dd0c:	0800f2b2 	.word	0x0800f2b2
 800dd10:	3ff80000 	.word	0x3ff80000
 800dd14:	0800f0a0 	.word	0x0800f0a0
 800dd18:	0800ef88 	.word	0x0800ef88
 800dd1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd20:	6018      	str	r0, [r3, #0]
 800dd22:	9b07      	ldr	r3, [sp, #28]
 800dd24:	2b0e      	cmp	r3, #14
 800dd26:	f200 80a4 	bhi.w	800de72 <_dtoa_r+0x442>
 800dd2a:	2c00      	cmp	r4, #0
 800dd2c:	f000 80a1 	beq.w	800de72 <_dtoa_r+0x442>
 800dd30:	2f00      	cmp	r7, #0
 800dd32:	dd33      	ble.n	800dd9c <_dtoa_r+0x36c>
 800dd34:	4b86      	ldr	r3, [pc, #536]	@ (800df50 <_dtoa_r+0x520>)
 800dd36:	f007 020f 	and.w	r2, r7, #15
 800dd3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd3e:	05f8      	lsls	r0, r7, #23
 800dd40:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dd44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dd48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dd4c:	d516      	bpl.n	800dd7c <_dtoa_r+0x34c>
 800dd4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd52:	4b80      	ldr	r3, [pc, #512]	@ (800df54 <_dtoa_r+0x524>)
 800dd54:	2603      	movs	r6, #3
 800dd56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd5a:	f7f2 fd9b 	bl	8000894 <__aeabi_ddiv>
 800dd5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd62:	f004 040f 	and.w	r4, r4, #15
 800dd66:	4d7b      	ldr	r5, [pc, #492]	@ (800df54 <_dtoa_r+0x524>)
 800dd68:	b954      	cbnz	r4, 800dd80 <_dtoa_r+0x350>
 800dd6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd72:	f7f2 fd8f 	bl	8000894 <__aeabi_ddiv>
 800dd76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd7a:	e028      	b.n	800ddce <_dtoa_r+0x39e>
 800dd7c:	2602      	movs	r6, #2
 800dd7e:	e7f2      	b.n	800dd66 <_dtoa_r+0x336>
 800dd80:	07e1      	lsls	r1, r4, #31
 800dd82:	d508      	bpl.n	800dd96 <_dtoa_r+0x366>
 800dd84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd8c:	f7f2 fc58 	bl	8000640 <__aeabi_dmul>
 800dd90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd94:	3601      	adds	r6, #1
 800dd96:	1064      	asrs	r4, r4, #1
 800dd98:	3508      	adds	r5, #8
 800dd9a:	e7e5      	b.n	800dd68 <_dtoa_r+0x338>
 800dd9c:	f000 80d2 	beq.w	800df44 <_dtoa_r+0x514>
 800dda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dda4:	427c      	negs	r4, r7
 800dda6:	4b6a      	ldr	r3, [pc, #424]	@ (800df50 <_dtoa_r+0x520>)
 800dda8:	f004 020f 	and.w	r2, r4, #15
 800ddac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb4:	f7f2 fc44 	bl	8000640 <__aeabi_dmul>
 800ddb8:	2602      	movs	r6, #2
 800ddba:	2300      	movs	r3, #0
 800ddbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddc0:	4d64      	ldr	r5, [pc, #400]	@ (800df54 <_dtoa_r+0x524>)
 800ddc2:	1124      	asrs	r4, r4, #4
 800ddc4:	2c00      	cmp	r4, #0
 800ddc6:	f040 80b2 	bne.w	800df2e <_dtoa_r+0x4fe>
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1d3      	bne.n	800dd76 <_dtoa_r+0x346>
 800ddce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ddd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 80b7 	beq.w	800df48 <_dtoa_r+0x518>
 800ddda:	2200      	movs	r2, #0
 800dddc:	4620      	mov	r0, r4
 800ddde:	4629      	mov	r1, r5
 800dde0:	4b5d      	ldr	r3, [pc, #372]	@ (800df58 <_dtoa_r+0x528>)
 800dde2:	f7f2 fe9f 	bl	8000b24 <__aeabi_dcmplt>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	f000 80ae 	beq.w	800df48 <_dtoa_r+0x518>
 800ddec:	9b07      	ldr	r3, [sp, #28]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f000 80aa 	beq.w	800df48 <_dtoa_r+0x518>
 800ddf4:	9b08      	ldr	r3, [sp, #32]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	dd37      	ble.n	800de6a <_dtoa_r+0x43a>
 800ddfa:	1e7b      	subs	r3, r7, #1
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	9304      	str	r3, [sp, #16]
 800de00:	2200      	movs	r2, #0
 800de02:	4629      	mov	r1, r5
 800de04:	4b55      	ldr	r3, [pc, #340]	@ (800df5c <_dtoa_r+0x52c>)
 800de06:	f7f2 fc1b 	bl	8000640 <__aeabi_dmul>
 800de0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de0e:	9c08      	ldr	r4, [sp, #32]
 800de10:	3601      	adds	r6, #1
 800de12:	4630      	mov	r0, r6
 800de14:	f7f2 fbaa 	bl	800056c <__aeabi_i2d>
 800de18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de1c:	f7f2 fc10 	bl	8000640 <__aeabi_dmul>
 800de20:	2200      	movs	r2, #0
 800de22:	4b4f      	ldr	r3, [pc, #316]	@ (800df60 <_dtoa_r+0x530>)
 800de24:	f7f2 fa56 	bl	80002d4 <__adddf3>
 800de28:	4605      	mov	r5, r0
 800de2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800de2e:	2c00      	cmp	r4, #0
 800de30:	f040 809a 	bne.w	800df68 <_dtoa_r+0x538>
 800de34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de38:	2200      	movs	r2, #0
 800de3a:	4b4a      	ldr	r3, [pc, #296]	@ (800df64 <_dtoa_r+0x534>)
 800de3c:	f7f2 fa48 	bl	80002d0 <__aeabi_dsub>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de48:	462a      	mov	r2, r5
 800de4a:	4633      	mov	r3, r6
 800de4c:	f7f2 fe88 	bl	8000b60 <__aeabi_dcmpgt>
 800de50:	2800      	cmp	r0, #0
 800de52:	f040 828e 	bne.w	800e372 <_dtoa_r+0x942>
 800de56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de5a:	462a      	mov	r2, r5
 800de5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800de60:	f7f2 fe60 	bl	8000b24 <__aeabi_dcmplt>
 800de64:	2800      	cmp	r0, #0
 800de66:	f040 8127 	bne.w	800e0b8 <_dtoa_r+0x688>
 800de6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800de6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800de72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800de74:	2b00      	cmp	r3, #0
 800de76:	f2c0 8163 	blt.w	800e140 <_dtoa_r+0x710>
 800de7a:	2f0e      	cmp	r7, #14
 800de7c:	f300 8160 	bgt.w	800e140 <_dtoa_r+0x710>
 800de80:	4b33      	ldr	r3, [pc, #204]	@ (800df50 <_dtoa_r+0x520>)
 800de82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de86:	e9d3 3400 	ldrd	r3, r4, [r3]
 800de8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800de8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de90:	2b00      	cmp	r3, #0
 800de92:	da03      	bge.n	800de9c <_dtoa_r+0x46c>
 800de94:	9b07      	ldr	r3, [sp, #28]
 800de96:	2b00      	cmp	r3, #0
 800de98:	f340 8100 	ble.w	800e09c <_dtoa_r+0x66c>
 800de9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dea0:	4656      	mov	r6, sl
 800dea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dea6:	4620      	mov	r0, r4
 800dea8:	4629      	mov	r1, r5
 800deaa:	f7f2 fcf3 	bl	8000894 <__aeabi_ddiv>
 800deae:	f7f2 fe61 	bl	8000b74 <__aeabi_d2iz>
 800deb2:	4680      	mov	r8, r0
 800deb4:	f7f2 fb5a 	bl	800056c <__aeabi_i2d>
 800deb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800debc:	f7f2 fbc0 	bl	8000640 <__aeabi_dmul>
 800dec0:	4602      	mov	r2, r0
 800dec2:	460b      	mov	r3, r1
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 fa02 	bl	80002d0 <__aeabi_dsub>
 800decc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ded0:	9d07      	ldr	r5, [sp, #28]
 800ded2:	f806 4b01 	strb.w	r4, [r6], #1
 800ded6:	eba6 040a 	sub.w	r4, r6, sl
 800deda:	42a5      	cmp	r5, r4
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	f040 8116 	bne.w	800e110 <_dtoa_r+0x6e0>
 800dee4:	f7f2 f9f6 	bl	80002d4 <__adddf3>
 800dee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deec:	4604      	mov	r4, r0
 800deee:	460d      	mov	r5, r1
 800def0:	f7f2 fe36 	bl	8000b60 <__aeabi_dcmpgt>
 800def4:	2800      	cmp	r0, #0
 800def6:	f040 80f8 	bne.w	800e0ea <_dtoa_r+0x6ba>
 800defa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800defe:	4620      	mov	r0, r4
 800df00:	4629      	mov	r1, r5
 800df02:	f7f2 fe05 	bl	8000b10 <__aeabi_dcmpeq>
 800df06:	b118      	cbz	r0, 800df10 <_dtoa_r+0x4e0>
 800df08:	f018 0f01 	tst.w	r8, #1
 800df0c:	f040 80ed 	bne.w	800e0ea <_dtoa_r+0x6ba>
 800df10:	4649      	mov	r1, r9
 800df12:	4658      	mov	r0, fp
 800df14:	f7fe fe46 	bl	800cba4 <_Bfree>
 800df18:	2300      	movs	r3, #0
 800df1a:	7033      	strb	r3, [r6, #0]
 800df1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800df1e:	3701      	adds	r7, #1
 800df20:	601f      	str	r7, [r3, #0]
 800df22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 8320 	beq.w	800e56a <_dtoa_r+0xb3a>
 800df2a:	601e      	str	r6, [r3, #0]
 800df2c:	e31d      	b.n	800e56a <_dtoa_r+0xb3a>
 800df2e:	07e2      	lsls	r2, r4, #31
 800df30:	d505      	bpl.n	800df3e <_dtoa_r+0x50e>
 800df32:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df36:	f7f2 fb83 	bl	8000640 <__aeabi_dmul>
 800df3a:	2301      	movs	r3, #1
 800df3c:	3601      	adds	r6, #1
 800df3e:	1064      	asrs	r4, r4, #1
 800df40:	3508      	adds	r5, #8
 800df42:	e73f      	b.n	800ddc4 <_dtoa_r+0x394>
 800df44:	2602      	movs	r6, #2
 800df46:	e742      	b.n	800ddce <_dtoa_r+0x39e>
 800df48:	9c07      	ldr	r4, [sp, #28]
 800df4a:	9704      	str	r7, [sp, #16]
 800df4c:	e761      	b.n	800de12 <_dtoa_r+0x3e2>
 800df4e:	bf00      	nop
 800df50:	0800f0a0 	.word	0x0800f0a0
 800df54:	0800f078 	.word	0x0800f078
 800df58:	3ff00000 	.word	0x3ff00000
 800df5c:	40240000 	.word	0x40240000
 800df60:	401c0000 	.word	0x401c0000
 800df64:	40140000 	.word	0x40140000
 800df68:	4b70      	ldr	r3, [pc, #448]	@ (800e12c <_dtoa_r+0x6fc>)
 800df6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df74:	4454      	add	r4, sl
 800df76:	2900      	cmp	r1, #0
 800df78:	d045      	beq.n	800e006 <_dtoa_r+0x5d6>
 800df7a:	2000      	movs	r0, #0
 800df7c:	496c      	ldr	r1, [pc, #432]	@ (800e130 <_dtoa_r+0x700>)
 800df7e:	f7f2 fc89 	bl	8000894 <__aeabi_ddiv>
 800df82:	4633      	mov	r3, r6
 800df84:	462a      	mov	r2, r5
 800df86:	f7f2 f9a3 	bl	80002d0 <__aeabi_dsub>
 800df8a:	4656      	mov	r6, sl
 800df8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800df90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df94:	f7f2 fdee 	bl	8000b74 <__aeabi_d2iz>
 800df98:	4605      	mov	r5, r0
 800df9a:	f7f2 fae7 	bl	800056c <__aeabi_i2d>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfa6:	f7f2 f993 	bl	80002d0 <__aeabi_dsub>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	3530      	adds	r5, #48	@ 0x30
 800dfb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dfb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dfb8:	f806 5b01 	strb.w	r5, [r6], #1
 800dfbc:	f7f2 fdb2 	bl	8000b24 <__aeabi_dcmplt>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d163      	bne.n	800e08c <_dtoa_r+0x65c>
 800dfc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfc8:	2000      	movs	r0, #0
 800dfca:	495a      	ldr	r1, [pc, #360]	@ (800e134 <_dtoa_r+0x704>)
 800dfcc:	f7f2 f980 	bl	80002d0 <__aeabi_dsub>
 800dfd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dfd4:	f7f2 fda6 	bl	8000b24 <__aeabi_dcmplt>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	f040 8087 	bne.w	800e0ec <_dtoa_r+0x6bc>
 800dfde:	42a6      	cmp	r6, r4
 800dfe0:	f43f af43 	beq.w	800de6a <_dtoa_r+0x43a>
 800dfe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dfe8:	2200      	movs	r2, #0
 800dfea:	4b53      	ldr	r3, [pc, #332]	@ (800e138 <_dtoa_r+0x708>)
 800dfec:	f7f2 fb28 	bl	8000640 <__aeabi_dmul>
 800dff0:	2200      	movs	r2, #0
 800dff2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dffa:	4b4f      	ldr	r3, [pc, #316]	@ (800e138 <_dtoa_r+0x708>)
 800dffc:	f7f2 fb20 	bl	8000640 <__aeabi_dmul>
 800e000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e004:	e7c4      	b.n	800df90 <_dtoa_r+0x560>
 800e006:	4631      	mov	r1, r6
 800e008:	4628      	mov	r0, r5
 800e00a:	f7f2 fb19 	bl	8000640 <__aeabi_dmul>
 800e00e:	4656      	mov	r6, sl
 800e010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e014:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e01a:	f7f2 fdab 	bl	8000b74 <__aeabi_d2iz>
 800e01e:	4605      	mov	r5, r0
 800e020:	f7f2 faa4 	bl	800056c <__aeabi_i2d>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e02c:	f7f2 f950 	bl	80002d0 <__aeabi_dsub>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	3530      	adds	r5, #48	@ 0x30
 800e036:	f806 5b01 	strb.w	r5, [r6], #1
 800e03a:	42a6      	cmp	r6, r4
 800e03c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e040:	f04f 0200 	mov.w	r2, #0
 800e044:	d124      	bne.n	800e090 <_dtoa_r+0x660>
 800e046:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e04a:	4b39      	ldr	r3, [pc, #228]	@ (800e130 <_dtoa_r+0x700>)
 800e04c:	f7f2 f942 	bl	80002d4 <__adddf3>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e058:	f7f2 fd82 	bl	8000b60 <__aeabi_dcmpgt>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d145      	bne.n	800e0ec <_dtoa_r+0x6bc>
 800e060:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e064:	2000      	movs	r0, #0
 800e066:	4932      	ldr	r1, [pc, #200]	@ (800e130 <_dtoa_r+0x700>)
 800e068:	f7f2 f932 	bl	80002d0 <__aeabi_dsub>
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e074:	f7f2 fd56 	bl	8000b24 <__aeabi_dcmplt>
 800e078:	2800      	cmp	r0, #0
 800e07a:	f43f aef6 	beq.w	800de6a <_dtoa_r+0x43a>
 800e07e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e080:	1e73      	subs	r3, r6, #1
 800e082:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e084:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e088:	2b30      	cmp	r3, #48	@ 0x30
 800e08a:	d0f8      	beq.n	800e07e <_dtoa_r+0x64e>
 800e08c:	9f04      	ldr	r7, [sp, #16]
 800e08e:	e73f      	b.n	800df10 <_dtoa_r+0x4e0>
 800e090:	4b29      	ldr	r3, [pc, #164]	@ (800e138 <_dtoa_r+0x708>)
 800e092:	f7f2 fad5 	bl	8000640 <__aeabi_dmul>
 800e096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e09a:	e7bc      	b.n	800e016 <_dtoa_r+0x5e6>
 800e09c:	d10c      	bne.n	800e0b8 <_dtoa_r+0x688>
 800e09e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	4b25      	ldr	r3, [pc, #148]	@ (800e13c <_dtoa_r+0x70c>)
 800e0a6:	f7f2 facb 	bl	8000640 <__aeabi_dmul>
 800e0aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0ae:	f7f2 fd4d 	bl	8000b4c <__aeabi_dcmpge>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	f000 815b 	beq.w	800e36e <_dtoa_r+0x93e>
 800e0b8:	2400      	movs	r4, #0
 800e0ba:	4625      	mov	r5, r4
 800e0bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e0be:	4656      	mov	r6, sl
 800e0c0:	43db      	mvns	r3, r3
 800e0c2:	9304      	str	r3, [sp, #16]
 800e0c4:	2700      	movs	r7, #0
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	4658      	mov	r0, fp
 800e0ca:	f7fe fd6b 	bl	800cba4 <_Bfree>
 800e0ce:	2d00      	cmp	r5, #0
 800e0d0:	d0dc      	beq.n	800e08c <_dtoa_r+0x65c>
 800e0d2:	b12f      	cbz	r7, 800e0e0 <_dtoa_r+0x6b0>
 800e0d4:	42af      	cmp	r7, r5
 800e0d6:	d003      	beq.n	800e0e0 <_dtoa_r+0x6b0>
 800e0d8:	4639      	mov	r1, r7
 800e0da:	4658      	mov	r0, fp
 800e0dc:	f7fe fd62 	bl	800cba4 <_Bfree>
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	4658      	mov	r0, fp
 800e0e4:	f7fe fd5e 	bl	800cba4 <_Bfree>
 800e0e8:	e7d0      	b.n	800e08c <_dtoa_r+0x65c>
 800e0ea:	9704      	str	r7, [sp, #16]
 800e0ec:	4633      	mov	r3, r6
 800e0ee:	461e      	mov	r6, r3
 800e0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0f4:	2a39      	cmp	r2, #57	@ 0x39
 800e0f6:	d107      	bne.n	800e108 <_dtoa_r+0x6d8>
 800e0f8:	459a      	cmp	sl, r3
 800e0fa:	d1f8      	bne.n	800e0ee <_dtoa_r+0x6be>
 800e0fc:	9a04      	ldr	r2, [sp, #16]
 800e0fe:	3201      	adds	r2, #1
 800e100:	9204      	str	r2, [sp, #16]
 800e102:	2230      	movs	r2, #48	@ 0x30
 800e104:	f88a 2000 	strb.w	r2, [sl]
 800e108:	781a      	ldrb	r2, [r3, #0]
 800e10a:	3201      	adds	r2, #1
 800e10c:	701a      	strb	r2, [r3, #0]
 800e10e:	e7bd      	b.n	800e08c <_dtoa_r+0x65c>
 800e110:	2200      	movs	r2, #0
 800e112:	4b09      	ldr	r3, [pc, #36]	@ (800e138 <_dtoa_r+0x708>)
 800e114:	f7f2 fa94 	bl	8000640 <__aeabi_dmul>
 800e118:	2200      	movs	r2, #0
 800e11a:	2300      	movs	r3, #0
 800e11c:	4604      	mov	r4, r0
 800e11e:	460d      	mov	r5, r1
 800e120:	f7f2 fcf6 	bl	8000b10 <__aeabi_dcmpeq>
 800e124:	2800      	cmp	r0, #0
 800e126:	f43f aebc 	beq.w	800dea2 <_dtoa_r+0x472>
 800e12a:	e6f1      	b.n	800df10 <_dtoa_r+0x4e0>
 800e12c:	0800f0a0 	.word	0x0800f0a0
 800e130:	3fe00000 	.word	0x3fe00000
 800e134:	3ff00000 	.word	0x3ff00000
 800e138:	40240000 	.word	0x40240000
 800e13c:	40140000 	.word	0x40140000
 800e140:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e142:	2a00      	cmp	r2, #0
 800e144:	f000 80db 	beq.w	800e2fe <_dtoa_r+0x8ce>
 800e148:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e14a:	2a01      	cmp	r2, #1
 800e14c:	f300 80bf 	bgt.w	800e2ce <_dtoa_r+0x89e>
 800e150:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e152:	2a00      	cmp	r2, #0
 800e154:	f000 80b7 	beq.w	800e2c6 <_dtoa_r+0x896>
 800e158:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e15c:	4646      	mov	r6, r8
 800e15e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e162:	2101      	movs	r1, #1
 800e164:	441a      	add	r2, r3
 800e166:	4658      	mov	r0, fp
 800e168:	4498      	add	r8, r3
 800e16a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e16c:	f7fe fe18 	bl	800cda0 <__i2b>
 800e170:	4605      	mov	r5, r0
 800e172:	b15e      	cbz	r6, 800e18c <_dtoa_r+0x75c>
 800e174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e176:	2b00      	cmp	r3, #0
 800e178:	dd08      	ble.n	800e18c <_dtoa_r+0x75c>
 800e17a:	42b3      	cmp	r3, r6
 800e17c:	bfa8      	it	ge
 800e17e:	4633      	movge	r3, r6
 800e180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e182:	eba8 0803 	sub.w	r8, r8, r3
 800e186:	1af6      	subs	r6, r6, r3
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e18e:	b1f3      	cbz	r3, 800e1ce <_dtoa_r+0x79e>
 800e190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e192:	2b00      	cmp	r3, #0
 800e194:	f000 80b7 	beq.w	800e306 <_dtoa_r+0x8d6>
 800e198:	b18c      	cbz	r4, 800e1be <_dtoa_r+0x78e>
 800e19a:	4629      	mov	r1, r5
 800e19c:	4622      	mov	r2, r4
 800e19e:	4658      	mov	r0, fp
 800e1a0:	f7fe febc 	bl	800cf1c <__pow5mult>
 800e1a4:	464a      	mov	r2, r9
 800e1a6:	4601      	mov	r1, r0
 800e1a8:	4605      	mov	r5, r0
 800e1aa:	4658      	mov	r0, fp
 800e1ac:	f7fe fe0e 	bl	800cdcc <__multiply>
 800e1b0:	4649      	mov	r1, r9
 800e1b2:	9004      	str	r0, [sp, #16]
 800e1b4:	4658      	mov	r0, fp
 800e1b6:	f7fe fcf5 	bl	800cba4 <_Bfree>
 800e1ba:	9b04      	ldr	r3, [sp, #16]
 800e1bc:	4699      	mov	r9, r3
 800e1be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1c0:	1b1a      	subs	r2, r3, r4
 800e1c2:	d004      	beq.n	800e1ce <_dtoa_r+0x79e>
 800e1c4:	4649      	mov	r1, r9
 800e1c6:	4658      	mov	r0, fp
 800e1c8:	f7fe fea8 	bl	800cf1c <__pow5mult>
 800e1cc:	4681      	mov	r9, r0
 800e1ce:	2101      	movs	r1, #1
 800e1d0:	4658      	mov	r0, fp
 800e1d2:	f7fe fde5 	bl	800cda0 <__i2b>
 800e1d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1d8:	4604      	mov	r4, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f000 81c9 	beq.w	800e572 <_dtoa_r+0xb42>
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	4658      	mov	r0, fp
 800e1e6:	f7fe fe99 	bl	800cf1c <__pow5mult>
 800e1ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	f300 808f 	bgt.w	800e312 <_dtoa_r+0x8e2>
 800e1f4:	9b02      	ldr	r3, [sp, #8]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f040 8087 	bne.w	800e30a <_dtoa_r+0x8da>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e202:	2b00      	cmp	r3, #0
 800e204:	f040 8083 	bne.w	800e30e <_dtoa_r+0x8de>
 800e208:	9b03      	ldr	r3, [sp, #12]
 800e20a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e20e:	0d1b      	lsrs	r3, r3, #20
 800e210:	051b      	lsls	r3, r3, #20
 800e212:	b12b      	cbz	r3, 800e220 <_dtoa_r+0x7f0>
 800e214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e216:	f108 0801 	add.w	r8, r8, #1
 800e21a:	3301      	adds	r3, #1
 800e21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e21e:	2301      	movs	r3, #1
 800e220:	930a      	str	r3, [sp, #40]	@ 0x28
 800e222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e224:	2b00      	cmp	r3, #0
 800e226:	f000 81aa 	beq.w	800e57e <_dtoa_r+0xb4e>
 800e22a:	6923      	ldr	r3, [r4, #16]
 800e22c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e230:	6918      	ldr	r0, [r3, #16]
 800e232:	f7fe fd69 	bl	800cd08 <__hi0bits>
 800e236:	f1c0 0020 	rsb	r0, r0, #32
 800e23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e23c:	4418      	add	r0, r3
 800e23e:	f010 001f 	ands.w	r0, r0, #31
 800e242:	d071      	beq.n	800e328 <_dtoa_r+0x8f8>
 800e244:	f1c0 0320 	rsb	r3, r0, #32
 800e248:	2b04      	cmp	r3, #4
 800e24a:	dd65      	ble.n	800e318 <_dtoa_r+0x8e8>
 800e24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e24e:	f1c0 001c 	rsb	r0, r0, #28
 800e252:	4403      	add	r3, r0
 800e254:	4480      	add	r8, r0
 800e256:	4406      	add	r6, r0
 800e258:	9309      	str	r3, [sp, #36]	@ 0x24
 800e25a:	f1b8 0f00 	cmp.w	r8, #0
 800e25e:	dd05      	ble.n	800e26c <_dtoa_r+0x83c>
 800e260:	4649      	mov	r1, r9
 800e262:	4642      	mov	r2, r8
 800e264:	4658      	mov	r0, fp
 800e266:	f7fe feb3 	bl	800cfd0 <__lshift>
 800e26a:	4681      	mov	r9, r0
 800e26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e26e:	2b00      	cmp	r3, #0
 800e270:	dd05      	ble.n	800e27e <_dtoa_r+0x84e>
 800e272:	4621      	mov	r1, r4
 800e274:	461a      	mov	r2, r3
 800e276:	4658      	mov	r0, fp
 800e278:	f7fe feaa 	bl	800cfd0 <__lshift>
 800e27c:	4604      	mov	r4, r0
 800e27e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e280:	2b00      	cmp	r3, #0
 800e282:	d053      	beq.n	800e32c <_dtoa_r+0x8fc>
 800e284:	4621      	mov	r1, r4
 800e286:	4648      	mov	r0, r9
 800e288:	f7fe ff0e 	bl	800d0a8 <__mcmp>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	da4d      	bge.n	800e32c <_dtoa_r+0x8fc>
 800e290:	1e7b      	subs	r3, r7, #1
 800e292:	4649      	mov	r1, r9
 800e294:	9304      	str	r3, [sp, #16]
 800e296:	220a      	movs	r2, #10
 800e298:	2300      	movs	r3, #0
 800e29a:	4658      	mov	r0, fp
 800e29c:	f7fe fca4 	bl	800cbe8 <__multadd>
 800e2a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2a2:	4681      	mov	r9, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f000 816c 	beq.w	800e582 <_dtoa_r+0xb52>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	4629      	mov	r1, r5
 800e2ae:	220a      	movs	r2, #10
 800e2b0:	4658      	mov	r0, fp
 800e2b2:	f7fe fc99 	bl	800cbe8 <__multadd>
 800e2b6:	9b08      	ldr	r3, [sp, #32]
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	dc61      	bgt.n	800e382 <_dtoa_r+0x952>
 800e2be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	dc3b      	bgt.n	800e33c <_dtoa_r+0x90c>
 800e2c4:	e05d      	b.n	800e382 <_dtoa_r+0x952>
 800e2c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e2c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e2cc:	e746      	b.n	800e15c <_dtoa_r+0x72c>
 800e2ce:	9b07      	ldr	r3, [sp, #28]
 800e2d0:	1e5c      	subs	r4, r3, #1
 800e2d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2d4:	42a3      	cmp	r3, r4
 800e2d6:	bfbf      	itttt	lt
 800e2d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e2da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800e2dc:	1ae3      	sublt	r3, r4, r3
 800e2de:	18d2      	addlt	r2, r2, r3
 800e2e0:	bfa8      	it	ge
 800e2e2:	1b1c      	subge	r4, r3, r4
 800e2e4:	9b07      	ldr	r3, [sp, #28]
 800e2e6:	bfbe      	ittt	lt
 800e2e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e2ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800e2ec:	2400      	movlt	r4, #0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	bfb5      	itete	lt
 800e2f2:	eba8 0603 	sublt.w	r6, r8, r3
 800e2f6:	4646      	movge	r6, r8
 800e2f8:	2300      	movlt	r3, #0
 800e2fa:	9b07      	ldrge	r3, [sp, #28]
 800e2fc:	e730      	b.n	800e160 <_dtoa_r+0x730>
 800e2fe:	4646      	mov	r6, r8
 800e300:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e302:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e304:	e735      	b.n	800e172 <_dtoa_r+0x742>
 800e306:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e308:	e75c      	b.n	800e1c4 <_dtoa_r+0x794>
 800e30a:	2300      	movs	r3, #0
 800e30c:	e788      	b.n	800e220 <_dtoa_r+0x7f0>
 800e30e:	9b02      	ldr	r3, [sp, #8]
 800e310:	e786      	b.n	800e220 <_dtoa_r+0x7f0>
 800e312:	2300      	movs	r3, #0
 800e314:	930a      	str	r3, [sp, #40]	@ 0x28
 800e316:	e788      	b.n	800e22a <_dtoa_r+0x7fa>
 800e318:	d09f      	beq.n	800e25a <_dtoa_r+0x82a>
 800e31a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e31c:	331c      	adds	r3, #28
 800e31e:	441a      	add	r2, r3
 800e320:	4498      	add	r8, r3
 800e322:	441e      	add	r6, r3
 800e324:	9209      	str	r2, [sp, #36]	@ 0x24
 800e326:	e798      	b.n	800e25a <_dtoa_r+0x82a>
 800e328:	4603      	mov	r3, r0
 800e32a:	e7f6      	b.n	800e31a <_dtoa_r+0x8ea>
 800e32c:	9b07      	ldr	r3, [sp, #28]
 800e32e:	9704      	str	r7, [sp, #16]
 800e330:	2b00      	cmp	r3, #0
 800e332:	dc20      	bgt.n	800e376 <_dtoa_r+0x946>
 800e334:	9308      	str	r3, [sp, #32]
 800e336:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e338:	2b02      	cmp	r3, #2
 800e33a:	dd1e      	ble.n	800e37a <_dtoa_r+0x94a>
 800e33c:	9b08      	ldr	r3, [sp, #32]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f47f aebc 	bne.w	800e0bc <_dtoa_r+0x68c>
 800e344:	4621      	mov	r1, r4
 800e346:	2205      	movs	r2, #5
 800e348:	4658      	mov	r0, fp
 800e34a:	f7fe fc4d 	bl	800cbe8 <__multadd>
 800e34e:	4601      	mov	r1, r0
 800e350:	4604      	mov	r4, r0
 800e352:	4648      	mov	r0, r9
 800e354:	f7fe fea8 	bl	800d0a8 <__mcmp>
 800e358:	2800      	cmp	r0, #0
 800e35a:	f77f aeaf 	ble.w	800e0bc <_dtoa_r+0x68c>
 800e35e:	2331      	movs	r3, #49	@ 0x31
 800e360:	4656      	mov	r6, sl
 800e362:	f806 3b01 	strb.w	r3, [r6], #1
 800e366:	9b04      	ldr	r3, [sp, #16]
 800e368:	3301      	adds	r3, #1
 800e36a:	9304      	str	r3, [sp, #16]
 800e36c:	e6aa      	b.n	800e0c4 <_dtoa_r+0x694>
 800e36e:	9c07      	ldr	r4, [sp, #28]
 800e370:	9704      	str	r7, [sp, #16]
 800e372:	4625      	mov	r5, r4
 800e374:	e7f3      	b.n	800e35e <_dtoa_r+0x92e>
 800e376:	9b07      	ldr	r3, [sp, #28]
 800e378:	9308      	str	r3, [sp, #32]
 800e37a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 8104 	beq.w	800e58a <_dtoa_r+0xb5a>
 800e382:	2e00      	cmp	r6, #0
 800e384:	dd05      	ble.n	800e392 <_dtoa_r+0x962>
 800e386:	4629      	mov	r1, r5
 800e388:	4632      	mov	r2, r6
 800e38a:	4658      	mov	r0, fp
 800e38c:	f7fe fe20 	bl	800cfd0 <__lshift>
 800e390:	4605      	mov	r5, r0
 800e392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e394:	2b00      	cmp	r3, #0
 800e396:	d05a      	beq.n	800e44e <_dtoa_r+0xa1e>
 800e398:	4658      	mov	r0, fp
 800e39a:	6869      	ldr	r1, [r5, #4]
 800e39c:	f7fe fbc2 	bl	800cb24 <_Balloc>
 800e3a0:	4606      	mov	r6, r0
 800e3a2:	b928      	cbnz	r0, 800e3b0 <_dtoa_r+0x980>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e3aa:	4b83      	ldr	r3, [pc, #524]	@ (800e5b8 <_dtoa_r+0xb88>)
 800e3ac:	f7ff bb54 	b.w	800da58 <_dtoa_r+0x28>
 800e3b0:	692a      	ldr	r2, [r5, #16]
 800e3b2:	f105 010c 	add.w	r1, r5, #12
 800e3b6:	3202      	adds	r2, #2
 800e3b8:	0092      	lsls	r2, r2, #2
 800e3ba:	300c      	adds	r0, #12
 800e3bc:	f7fd ff5b 	bl	800c276 <memcpy>
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4658      	mov	r0, fp
 800e3c6:	f7fe fe03 	bl	800cfd0 <__lshift>
 800e3ca:	462f      	mov	r7, r5
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	f10a 0301 	add.w	r3, sl, #1
 800e3d2:	9307      	str	r3, [sp, #28]
 800e3d4:	9b08      	ldr	r3, [sp, #32]
 800e3d6:	4453      	add	r3, sl
 800e3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3da:	9b02      	ldr	r3, [sp, #8]
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e2:	9b07      	ldr	r3, [sp, #28]
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	4648      	mov	r0, r9
 800e3ea:	9302      	str	r3, [sp, #8]
 800e3ec:	f7ff fa96 	bl	800d91c <quorem>
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	9008      	str	r0, [sp, #32]
 800e3f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e3f8:	4648      	mov	r0, r9
 800e3fa:	f7fe fe55 	bl	800d0a8 <__mcmp>
 800e3fe:	462a      	mov	r2, r5
 800e400:	9009      	str	r0, [sp, #36]	@ 0x24
 800e402:	4621      	mov	r1, r4
 800e404:	4658      	mov	r0, fp
 800e406:	f7fe fe6b 	bl	800d0e0 <__mdiff>
 800e40a:	68c2      	ldr	r2, [r0, #12]
 800e40c:	4606      	mov	r6, r0
 800e40e:	bb02      	cbnz	r2, 800e452 <_dtoa_r+0xa22>
 800e410:	4601      	mov	r1, r0
 800e412:	4648      	mov	r0, r9
 800e414:	f7fe fe48 	bl	800d0a8 <__mcmp>
 800e418:	4602      	mov	r2, r0
 800e41a:	4631      	mov	r1, r6
 800e41c:	4658      	mov	r0, fp
 800e41e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e420:	f7fe fbc0 	bl	800cba4 <_Bfree>
 800e424:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e426:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e428:	9e07      	ldr	r6, [sp, #28]
 800e42a:	ea43 0102 	orr.w	r1, r3, r2
 800e42e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e430:	4319      	orrs	r1, r3
 800e432:	d110      	bne.n	800e456 <_dtoa_r+0xa26>
 800e434:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e438:	d029      	beq.n	800e48e <_dtoa_r+0xa5e>
 800e43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	dd02      	ble.n	800e446 <_dtoa_r+0xa16>
 800e440:	9b08      	ldr	r3, [sp, #32]
 800e442:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e446:	9b02      	ldr	r3, [sp, #8]
 800e448:	f883 8000 	strb.w	r8, [r3]
 800e44c:	e63b      	b.n	800e0c6 <_dtoa_r+0x696>
 800e44e:	4628      	mov	r0, r5
 800e450:	e7bb      	b.n	800e3ca <_dtoa_r+0x99a>
 800e452:	2201      	movs	r2, #1
 800e454:	e7e1      	b.n	800e41a <_dtoa_r+0x9ea>
 800e456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e458:	2b00      	cmp	r3, #0
 800e45a:	db04      	blt.n	800e466 <_dtoa_r+0xa36>
 800e45c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800e45e:	430b      	orrs	r3, r1
 800e460:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e462:	430b      	orrs	r3, r1
 800e464:	d120      	bne.n	800e4a8 <_dtoa_r+0xa78>
 800e466:	2a00      	cmp	r2, #0
 800e468:	dded      	ble.n	800e446 <_dtoa_r+0xa16>
 800e46a:	4649      	mov	r1, r9
 800e46c:	2201      	movs	r2, #1
 800e46e:	4658      	mov	r0, fp
 800e470:	f7fe fdae 	bl	800cfd0 <__lshift>
 800e474:	4621      	mov	r1, r4
 800e476:	4681      	mov	r9, r0
 800e478:	f7fe fe16 	bl	800d0a8 <__mcmp>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	dc03      	bgt.n	800e488 <_dtoa_r+0xa58>
 800e480:	d1e1      	bne.n	800e446 <_dtoa_r+0xa16>
 800e482:	f018 0f01 	tst.w	r8, #1
 800e486:	d0de      	beq.n	800e446 <_dtoa_r+0xa16>
 800e488:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e48c:	d1d8      	bne.n	800e440 <_dtoa_r+0xa10>
 800e48e:	2339      	movs	r3, #57	@ 0x39
 800e490:	9a02      	ldr	r2, [sp, #8]
 800e492:	7013      	strb	r3, [r2, #0]
 800e494:	4633      	mov	r3, r6
 800e496:	461e      	mov	r6, r3
 800e498:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	2a39      	cmp	r2, #57	@ 0x39
 800e4a0:	d052      	beq.n	800e548 <_dtoa_r+0xb18>
 800e4a2:	3201      	adds	r2, #1
 800e4a4:	701a      	strb	r2, [r3, #0]
 800e4a6:	e60e      	b.n	800e0c6 <_dtoa_r+0x696>
 800e4a8:	2a00      	cmp	r2, #0
 800e4aa:	dd07      	ble.n	800e4bc <_dtoa_r+0xa8c>
 800e4ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e4b0:	d0ed      	beq.n	800e48e <_dtoa_r+0xa5e>
 800e4b2:	9a02      	ldr	r2, [sp, #8]
 800e4b4:	f108 0301 	add.w	r3, r8, #1
 800e4b8:	7013      	strb	r3, [r2, #0]
 800e4ba:	e604      	b.n	800e0c6 <_dtoa_r+0x696>
 800e4bc:	9b07      	ldr	r3, [sp, #28]
 800e4be:	9a07      	ldr	r2, [sp, #28]
 800e4c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e4c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d028      	beq.n	800e51c <_dtoa_r+0xaec>
 800e4ca:	4649      	mov	r1, r9
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	220a      	movs	r2, #10
 800e4d0:	4658      	mov	r0, fp
 800e4d2:	f7fe fb89 	bl	800cbe8 <__multadd>
 800e4d6:	42af      	cmp	r7, r5
 800e4d8:	4681      	mov	r9, r0
 800e4da:	f04f 0300 	mov.w	r3, #0
 800e4de:	f04f 020a 	mov.w	r2, #10
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	4658      	mov	r0, fp
 800e4e6:	d107      	bne.n	800e4f8 <_dtoa_r+0xac8>
 800e4e8:	f7fe fb7e 	bl	800cbe8 <__multadd>
 800e4ec:	4607      	mov	r7, r0
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	9b07      	ldr	r3, [sp, #28]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	9307      	str	r3, [sp, #28]
 800e4f6:	e774      	b.n	800e3e2 <_dtoa_r+0x9b2>
 800e4f8:	f7fe fb76 	bl	800cbe8 <__multadd>
 800e4fc:	4629      	mov	r1, r5
 800e4fe:	4607      	mov	r7, r0
 800e500:	2300      	movs	r3, #0
 800e502:	220a      	movs	r2, #10
 800e504:	4658      	mov	r0, fp
 800e506:	f7fe fb6f 	bl	800cbe8 <__multadd>
 800e50a:	4605      	mov	r5, r0
 800e50c:	e7f0      	b.n	800e4f0 <_dtoa_r+0xac0>
 800e50e:	9b08      	ldr	r3, [sp, #32]
 800e510:	2700      	movs	r7, #0
 800e512:	2b00      	cmp	r3, #0
 800e514:	bfcc      	ite	gt
 800e516:	461e      	movgt	r6, r3
 800e518:	2601      	movle	r6, #1
 800e51a:	4456      	add	r6, sl
 800e51c:	4649      	mov	r1, r9
 800e51e:	2201      	movs	r2, #1
 800e520:	4658      	mov	r0, fp
 800e522:	f7fe fd55 	bl	800cfd0 <__lshift>
 800e526:	4621      	mov	r1, r4
 800e528:	4681      	mov	r9, r0
 800e52a:	f7fe fdbd 	bl	800d0a8 <__mcmp>
 800e52e:	2800      	cmp	r0, #0
 800e530:	dcb0      	bgt.n	800e494 <_dtoa_r+0xa64>
 800e532:	d102      	bne.n	800e53a <_dtoa_r+0xb0a>
 800e534:	f018 0f01 	tst.w	r8, #1
 800e538:	d1ac      	bne.n	800e494 <_dtoa_r+0xa64>
 800e53a:	4633      	mov	r3, r6
 800e53c:	461e      	mov	r6, r3
 800e53e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e542:	2a30      	cmp	r2, #48	@ 0x30
 800e544:	d0fa      	beq.n	800e53c <_dtoa_r+0xb0c>
 800e546:	e5be      	b.n	800e0c6 <_dtoa_r+0x696>
 800e548:	459a      	cmp	sl, r3
 800e54a:	d1a4      	bne.n	800e496 <_dtoa_r+0xa66>
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	3301      	adds	r3, #1
 800e550:	9304      	str	r3, [sp, #16]
 800e552:	2331      	movs	r3, #49	@ 0x31
 800e554:	f88a 3000 	strb.w	r3, [sl]
 800e558:	e5b5      	b.n	800e0c6 <_dtoa_r+0x696>
 800e55a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e55c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e5bc <_dtoa_r+0xb8c>
 800e560:	b11b      	cbz	r3, 800e56a <_dtoa_r+0xb3a>
 800e562:	f10a 0308 	add.w	r3, sl, #8
 800e566:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e568:	6013      	str	r3, [r2, #0]
 800e56a:	4650      	mov	r0, sl
 800e56c:	b017      	add	sp, #92	@ 0x5c
 800e56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e572:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e574:	2b01      	cmp	r3, #1
 800e576:	f77f ae3d 	ble.w	800e1f4 <_dtoa_r+0x7c4>
 800e57a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e57c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e57e:	2001      	movs	r0, #1
 800e580:	e65b      	b.n	800e23a <_dtoa_r+0x80a>
 800e582:	9b08      	ldr	r3, [sp, #32]
 800e584:	2b00      	cmp	r3, #0
 800e586:	f77f aed6 	ble.w	800e336 <_dtoa_r+0x906>
 800e58a:	4656      	mov	r6, sl
 800e58c:	4621      	mov	r1, r4
 800e58e:	4648      	mov	r0, r9
 800e590:	f7ff f9c4 	bl	800d91c <quorem>
 800e594:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e598:	9b08      	ldr	r3, [sp, #32]
 800e59a:	f806 8b01 	strb.w	r8, [r6], #1
 800e59e:	eba6 020a 	sub.w	r2, r6, sl
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	ddb3      	ble.n	800e50e <_dtoa_r+0xade>
 800e5a6:	4649      	mov	r1, r9
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	220a      	movs	r2, #10
 800e5ac:	4658      	mov	r0, fp
 800e5ae:	f7fe fb1b 	bl	800cbe8 <__multadd>
 800e5b2:	4681      	mov	r9, r0
 800e5b4:	e7ea      	b.n	800e58c <_dtoa_r+0xb5c>
 800e5b6:	bf00      	nop
 800e5b8:	0800ef88 	.word	0x0800ef88
 800e5bc:	0800f2a5 	.word	0x0800f2a5

0800e5c0 <malloc>:
 800e5c0:	4b02      	ldr	r3, [pc, #8]	@ (800e5cc <malloc+0xc>)
 800e5c2:	4601      	mov	r1, r0
 800e5c4:	6818      	ldr	r0, [r3, #0]
 800e5c6:	f7fe ba0f 	b.w	800c9e8 <_malloc_r>
 800e5ca:	bf00      	nop
 800e5cc:	200002f4 	.word	0x200002f4

0800e5d0 <fiprintf>:
 800e5d0:	b40e      	push	{r1, r2, r3}
 800e5d2:	b503      	push	{r0, r1, lr}
 800e5d4:	4601      	mov	r1, r0
 800e5d6:	ab03      	add	r3, sp, #12
 800e5d8:	4805      	ldr	r0, [pc, #20]	@ (800e5f0 <fiprintf+0x20>)
 800e5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5de:	6800      	ldr	r0, [r0, #0]
 800e5e0:	9301      	str	r3, [sp, #4]
 800e5e2:	f000 f835 	bl	800e650 <_vfiprintf_r>
 800e5e6:	b002      	add	sp, #8
 800e5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5ec:	b003      	add	sp, #12
 800e5ee:	4770      	bx	lr
 800e5f0:	200002f4 	.word	0x200002f4

0800e5f4 <abort>:
 800e5f4:	2006      	movs	r0, #6
 800e5f6:	b508      	push	{r3, lr}
 800e5f8:	f000 fb90 	bl	800ed1c <raise>
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	f7f3 fafa 	bl	8001bf6 <_exit>

0800e602 <__sfputc_r>:
 800e602:	6893      	ldr	r3, [r2, #8]
 800e604:	b410      	push	{r4}
 800e606:	3b01      	subs	r3, #1
 800e608:	2b00      	cmp	r3, #0
 800e60a:	6093      	str	r3, [r2, #8]
 800e60c:	da07      	bge.n	800e61e <__sfputc_r+0x1c>
 800e60e:	6994      	ldr	r4, [r2, #24]
 800e610:	42a3      	cmp	r3, r4
 800e612:	db01      	blt.n	800e618 <__sfputc_r+0x16>
 800e614:	290a      	cmp	r1, #10
 800e616:	d102      	bne.n	800e61e <__sfputc_r+0x1c>
 800e618:	bc10      	pop	{r4}
 800e61a:	f000 bac3 	b.w	800eba4 <__swbuf_r>
 800e61e:	6813      	ldr	r3, [r2, #0]
 800e620:	1c58      	adds	r0, r3, #1
 800e622:	6010      	str	r0, [r2, #0]
 800e624:	7019      	strb	r1, [r3, #0]
 800e626:	4608      	mov	r0, r1
 800e628:	bc10      	pop	{r4}
 800e62a:	4770      	bx	lr

0800e62c <__sfputs_r>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	4606      	mov	r6, r0
 800e630:	460f      	mov	r7, r1
 800e632:	4614      	mov	r4, r2
 800e634:	18d5      	adds	r5, r2, r3
 800e636:	42ac      	cmp	r4, r5
 800e638:	d101      	bne.n	800e63e <__sfputs_r+0x12>
 800e63a:	2000      	movs	r0, #0
 800e63c:	e007      	b.n	800e64e <__sfputs_r+0x22>
 800e63e:	463a      	mov	r2, r7
 800e640:	4630      	mov	r0, r6
 800e642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e646:	f7ff ffdc 	bl	800e602 <__sfputc_r>
 800e64a:	1c43      	adds	r3, r0, #1
 800e64c:	d1f3      	bne.n	800e636 <__sfputs_r+0xa>
 800e64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e650 <_vfiprintf_r>:
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	460d      	mov	r5, r1
 800e656:	4614      	mov	r4, r2
 800e658:	4698      	mov	r8, r3
 800e65a:	4606      	mov	r6, r0
 800e65c:	b09d      	sub	sp, #116	@ 0x74
 800e65e:	b118      	cbz	r0, 800e668 <_vfiprintf_r+0x18>
 800e660:	6a03      	ldr	r3, [r0, #32]
 800e662:	b90b      	cbnz	r3, 800e668 <_vfiprintf_r+0x18>
 800e664:	f7fd fd00 	bl	800c068 <__sinit>
 800e668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e66a:	07d9      	lsls	r1, r3, #31
 800e66c:	d405      	bmi.n	800e67a <_vfiprintf_r+0x2a>
 800e66e:	89ab      	ldrh	r3, [r5, #12]
 800e670:	059a      	lsls	r2, r3, #22
 800e672:	d402      	bmi.n	800e67a <_vfiprintf_r+0x2a>
 800e674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e676:	f7fd fdfc 	bl	800c272 <__retarget_lock_acquire_recursive>
 800e67a:	89ab      	ldrh	r3, [r5, #12]
 800e67c:	071b      	lsls	r3, r3, #28
 800e67e:	d501      	bpl.n	800e684 <_vfiprintf_r+0x34>
 800e680:	692b      	ldr	r3, [r5, #16]
 800e682:	b99b      	cbnz	r3, 800e6ac <_vfiprintf_r+0x5c>
 800e684:	4629      	mov	r1, r5
 800e686:	4630      	mov	r0, r6
 800e688:	f000 faca 	bl	800ec20 <__swsetup_r>
 800e68c:	b170      	cbz	r0, 800e6ac <_vfiprintf_r+0x5c>
 800e68e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e690:	07dc      	lsls	r4, r3, #31
 800e692:	d504      	bpl.n	800e69e <_vfiprintf_r+0x4e>
 800e694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e698:	b01d      	add	sp, #116	@ 0x74
 800e69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69e:	89ab      	ldrh	r3, [r5, #12]
 800e6a0:	0598      	lsls	r0, r3, #22
 800e6a2:	d4f7      	bmi.n	800e694 <_vfiprintf_r+0x44>
 800e6a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6a6:	f7fd fde5 	bl	800c274 <__retarget_lock_release_recursive>
 800e6aa:	e7f3      	b.n	800e694 <_vfiprintf_r+0x44>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6b0:	2320      	movs	r3, #32
 800e6b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6b6:	2330      	movs	r3, #48	@ 0x30
 800e6b8:	f04f 0901 	mov.w	r9, #1
 800e6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e86c <_vfiprintf_r+0x21c>
 800e6c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e6c8:	4623      	mov	r3, r4
 800e6ca:	469a      	mov	sl, r3
 800e6cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d0:	b10a      	cbz	r2, 800e6d6 <_vfiprintf_r+0x86>
 800e6d2:	2a25      	cmp	r2, #37	@ 0x25
 800e6d4:	d1f9      	bne.n	800e6ca <_vfiprintf_r+0x7a>
 800e6d6:	ebba 0b04 	subs.w	fp, sl, r4
 800e6da:	d00b      	beq.n	800e6f4 <_vfiprintf_r+0xa4>
 800e6dc:	465b      	mov	r3, fp
 800e6de:	4622      	mov	r2, r4
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f7ff ffa2 	bl	800e62c <__sfputs_r>
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	f000 80a7 	beq.w	800e83c <_vfiprintf_r+0x1ec>
 800e6ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6f0:	445a      	add	r2, fp
 800e6f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f000 809f 	beq.w	800e83c <_vfiprintf_r+0x1ec>
 800e6fe:	2300      	movs	r3, #0
 800e700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e708:	f10a 0a01 	add.w	sl, sl, #1
 800e70c:	9304      	str	r3, [sp, #16]
 800e70e:	9307      	str	r3, [sp, #28]
 800e710:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e714:	931a      	str	r3, [sp, #104]	@ 0x68
 800e716:	4654      	mov	r4, sl
 800e718:	2205      	movs	r2, #5
 800e71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e71e:	4853      	ldr	r0, [pc, #332]	@ (800e86c <_vfiprintf_r+0x21c>)
 800e720:	f000 fb18 	bl	800ed54 <memchr>
 800e724:	9a04      	ldr	r2, [sp, #16]
 800e726:	b9d8      	cbnz	r0, 800e760 <_vfiprintf_r+0x110>
 800e728:	06d1      	lsls	r1, r2, #27
 800e72a:	bf44      	itt	mi
 800e72c:	2320      	movmi	r3, #32
 800e72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e732:	0713      	lsls	r3, r2, #28
 800e734:	bf44      	itt	mi
 800e736:	232b      	movmi	r3, #43	@ 0x2b
 800e738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e73c:	f89a 3000 	ldrb.w	r3, [sl]
 800e740:	2b2a      	cmp	r3, #42	@ 0x2a
 800e742:	d015      	beq.n	800e770 <_vfiprintf_r+0x120>
 800e744:	4654      	mov	r4, sl
 800e746:	2000      	movs	r0, #0
 800e748:	f04f 0c0a 	mov.w	ip, #10
 800e74c:	9a07      	ldr	r2, [sp, #28]
 800e74e:	4621      	mov	r1, r4
 800e750:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e754:	3b30      	subs	r3, #48	@ 0x30
 800e756:	2b09      	cmp	r3, #9
 800e758:	d94b      	bls.n	800e7f2 <_vfiprintf_r+0x1a2>
 800e75a:	b1b0      	cbz	r0, 800e78a <_vfiprintf_r+0x13a>
 800e75c:	9207      	str	r2, [sp, #28]
 800e75e:	e014      	b.n	800e78a <_vfiprintf_r+0x13a>
 800e760:	eba0 0308 	sub.w	r3, r0, r8
 800e764:	fa09 f303 	lsl.w	r3, r9, r3
 800e768:	4313      	orrs	r3, r2
 800e76a:	46a2      	mov	sl, r4
 800e76c:	9304      	str	r3, [sp, #16]
 800e76e:	e7d2      	b.n	800e716 <_vfiprintf_r+0xc6>
 800e770:	9b03      	ldr	r3, [sp, #12]
 800e772:	1d19      	adds	r1, r3, #4
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	9103      	str	r1, [sp, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	bfbb      	ittet	lt
 800e77c:	425b      	neglt	r3, r3
 800e77e:	f042 0202 	orrlt.w	r2, r2, #2
 800e782:	9307      	strge	r3, [sp, #28]
 800e784:	9307      	strlt	r3, [sp, #28]
 800e786:	bfb8      	it	lt
 800e788:	9204      	strlt	r2, [sp, #16]
 800e78a:	7823      	ldrb	r3, [r4, #0]
 800e78c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e78e:	d10a      	bne.n	800e7a6 <_vfiprintf_r+0x156>
 800e790:	7863      	ldrb	r3, [r4, #1]
 800e792:	2b2a      	cmp	r3, #42	@ 0x2a
 800e794:	d132      	bne.n	800e7fc <_vfiprintf_r+0x1ac>
 800e796:	9b03      	ldr	r3, [sp, #12]
 800e798:	3402      	adds	r4, #2
 800e79a:	1d1a      	adds	r2, r3, #4
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	9203      	str	r2, [sp, #12]
 800e7a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e7a4:	9305      	str	r3, [sp, #20]
 800e7a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e870 <_vfiprintf_r+0x220>
 800e7aa:	2203      	movs	r2, #3
 800e7ac:	4650      	mov	r0, sl
 800e7ae:	7821      	ldrb	r1, [r4, #0]
 800e7b0:	f000 fad0 	bl	800ed54 <memchr>
 800e7b4:	b138      	cbz	r0, 800e7c6 <_vfiprintf_r+0x176>
 800e7b6:	2240      	movs	r2, #64	@ 0x40
 800e7b8:	9b04      	ldr	r3, [sp, #16]
 800e7ba:	eba0 000a 	sub.w	r0, r0, sl
 800e7be:	4082      	lsls	r2, r0
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	3401      	adds	r4, #1
 800e7c4:	9304      	str	r3, [sp, #16]
 800e7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ca:	2206      	movs	r2, #6
 800e7cc:	4829      	ldr	r0, [pc, #164]	@ (800e874 <_vfiprintf_r+0x224>)
 800e7ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e7d2:	f000 fabf 	bl	800ed54 <memchr>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d03f      	beq.n	800e85a <_vfiprintf_r+0x20a>
 800e7da:	4b27      	ldr	r3, [pc, #156]	@ (800e878 <_vfiprintf_r+0x228>)
 800e7dc:	bb1b      	cbnz	r3, 800e826 <_vfiprintf_r+0x1d6>
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	3307      	adds	r3, #7
 800e7e2:	f023 0307 	bic.w	r3, r3, #7
 800e7e6:	3308      	adds	r3, #8
 800e7e8:	9303      	str	r3, [sp, #12]
 800e7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7ec:	443b      	add	r3, r7
 800e7ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7f0:	e76a      	b.n	800e6c8 <_vfiprintf_r+0x78>
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	2001      	movs	r0, #1
 800e7f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7fa:	e7a8      	b.n	800e74e <_vfiprintf_r+0xfe>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	f04f 0c0a 	mov.w	ip, #10
 800e802:	4619      	mov	r1, r3
 800e804:	3401      	adds	r4, #1
 800e806:	9305      	str	r3, [sp, #20]
 800e808:	4620      	mov	r0, r4
 800e80a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e80e:	3a30      	subs	r2, #48	@ 0x30
 800e810:	2a09      	cmp	r2, #9
 800e812:	d903      	bls.n	800e81c <_vfiprintf_r+0x1cc>
 800e814:	2b00      	cmp	r3, #0
 800e816:	d0c6      	beq.n	800e7a6 <_vfiprintf_r+0x156>
 800e818:	9105      	str	r1, [sp, #20]
 800e81a:	e7c4      	b.n	800e7a6 <_vfiprintf_r+0x156>
 800e81c:	4604      	mov	r4, r0
 800e81e:	2301      	movs	r3, #1
 800e820:	fb0c 2101 	mla	r1, ip, r1, r2
 800e824:	e7f0      	b.n	800e808 <_vfiprintf_r+0x1b8>
 800e826:	ab03      	add	r3, sp, #12
 800e828:	9300      	str	r3, [sp, #0]
 800e82a:	462a      	mov	r2, r5
 800e82c:	4630      	mov	r0, r6
 800e82e:	4b13      	ldr	r3, [pc, #76]	@ (800e87c <_vfiprintf_r+0x22c>)
 800e830:	a904      	add	r1, sp, #16
 800e832:	f3af 8000 	nop.w
 800e836:	4607      	mov	r7, r0
 800e838:	1c78      	adds	r0, r7, #1
 800e83a:	d1d6      	bne.n	800e7ea <_vfiprintf_r+0x19a>
 800e83c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e83e:	07d9      	lsls	r1, r3, #31
 800e840:	d405      	bmi.n	800e84e <_vfiprintf_r+0x1fe>
 800e842:	89ab      	ldrh	r3, [r5, #12]
 800e844:	059a      	lsls	r2, r3, #22
 800e846:	d402      	bmi.n	800e84e <_vfiprintf_r+0x1fe>
 800e848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e84a:	f7fd fd13 	bl	800c274 <__retarget_lock_release_recursive>
 800e84e:	89ab      	ldrh	r3, [r5, #12]
 800e850:	065b      	lsls	r3, r3, #25
 800e852:	f53f af1f 	bmi.w	800e694 <_vfiprintf_r+0x44>
 800e856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e858:	e71e      	b.n	800e698 <_vfiprintf_r+0x48>
 800e85a:	ab03      	add	r3, sp, #12
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	462a      	mov	r2, r5
 800e860:	4630      	mov	r0, r6
 800e862:	4b06      	ldr	r3, [pc, #24]	@ (800e87c <_vfiprintf_r+0x22c>)
 800e864:	a904      	add	r1, sp, #16
 800e866:	f000 f87d 	bl	800e964 <_printf_i>
 800e86a:	e7e4      	b.n	800e836 <_vfiprintf_r+0x1e6>
 800e86c:	0800f30c 	.word	0x0800f30c
 800e870:	0800f312 	.word	0x0800f312
 800e874:	0800f316 	.word	0x0800f316
 800e878:	00000000 	.word	0x00000000
 800e87c:	0800e62d 	.word	0x0800e62d

0800e880 <_printf_common>:
 800e880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e884:	4616      	mov	r6, r2
 800e886:	4698      	mov	r8, r3
 800e888:	688a      	ldr	r2, [r1, #8]
 800e88a:	690b      	ldr	r3, [r1, #16]
 800e88c:	4607      	mov	r7, r0
 800e88e:	4293      	cmp	r3, r2
 800e890:	bfb8      	it	lt
 800e892:	4613      	movlt	r3, r2
 800e894:	6033      	str	r3, [r6, #0]
 800e896:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e89a:	460c      	mov	r4, r1
 800e89c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8a0:	b10a      	cbz	r2, 800e8a6 <_printf_common+0x26>
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	6033      	str	r3, [r6, #0]
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	0699      	lsls	r1, r3, #26
 800e8aa:	bf42      	ittt	mi
 800e8ac:	6833      	ldrmi	r3, [r6, #0]
 800e8ae:	3302      	addmi	r3, #2
 800e8b0:	6033      	strmi	r3, [r6, #0]
 800e8b2:	6825      	ldr	r5, [r4, #0]
 800e8b4:	f015 0506 	ands.w	r5, r5, #6
 800e8b8:	d106      	bne.n	800e8c8 <_printf_common+0x48>
 800e8ba:	f104 0a19 	add.w	sl, r4, #25
 800e8be:	68e3      	ldr	r3, [r4, #12]
 800e8c0:	6832      	ldr	r2, [r6, #0]
 800e8c2:	1a9b      	subs	r3, r3, r2
 800e8c4:	42ab      	cmp	r3, r5
 800e8c6:	dc2b      	bgt.n	800e920 <_printf_common+0xa0>
 800e8c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e8cc:	6822      	ldr	r2, [r4, #0]
 800e8ce:	3b00      	subs	r3, #0
 800e8d0:	bf18      	it	ne
 800e8d2:	2301      	movne	r3, #1
 800e8d4:	0692      	lsls	r2, r2, #26
 800e8d6:	d430      	bmi.n	800e93a <_printf_common+0xba>
 800e8d8:	4641      	mov	r1, r8
 800e8da:	4638      	mov	r0, r7
 800e8dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e8e0:	47c8      	blx	r9
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	d023      	beq.n	800e92e <_printf_common+0xae>
 800e8e6:	6823      	ldr	r3, [r4, #0]
 800e8e8:	6922      	ldr	r2, [r4, #16]
 800e8ea:	f003 0306 	and.w	r3, r3, #6
 800e8ee:	2b04      	cmp	r3, #4
 800e8f0:	bf14      	ite	ne
 800e8f2:	2500      	movne	r5, #0
 800e8f4:	6833      	ldreq	r3, [r6, #0]
 800e8f6:	f04f 0600 	mov.w	r6, #0
 800e8fa:	bf08      	it	eq
 800e8fc:	68e5      	ldreq	r5, [r4, #12]
 800e8fe:	f104 041a 	add.w	r4, r4, #26
 800e902:	bf08      	it	eq
 800e904:	1aed      	subeq	r5, r5, r3
 800e906:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e90a:	bf08      	it	eq
 800e90c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e910:	4293      	cmp	r3, r2
 800e912:	bfc4      	itt	gt
 800e914:	1a9b      	subgt	r3, r3, r2
 800e916:	18ed      	addgt	r5, r5, r3
 800e918:	42b5      	cmp	r5, r6
 800e91a:	d11a      	bne.n	800e952 <_printf_common+0xd2>
 800e91c:	2000      	movs	r0, #0
 800e91e:	e008      	b.n	800e932 <_printf_common+0xb2>
 800e920:	2301      	movs	r3, #1
 800e922:	4652      	mov	r2, sl
 800e924:	4641      	mov	r1, r8
 800e926:	4638      	mov	r0, r7
 800e928:	47c8      	blx	r9
 800e92a:	3001      	adds	r0, #1
 800e92c:	d103      	bne.n	800e936 <_printf_common+0xb6>
 800e92e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e936:	3501      	adds	r5, #1
 800e938:	e7c1      	b.n	800e8be <_printf_common+0x3e>
 800e93a:	2030      	movs	r0, #48	@ 0x30
 800e93c:	18e1      	adds	r1, r4, r3
 800e93e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e942:	1c5a      	adds	r2, r3, #1
 800e944:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e948:	4422      	add	r2, r4
 800e94a:	3302      	adds	r3, #2
 800e94c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e950:	e7c2      	b.n	800e8d8 <_printf_common+0x58>
 800e952:	2301      	movs	r3, #1
 800e954:	4622      	mov	r2, r4
 800e956:	4641      	mov	r1, r8
 800e958:	4638      	mov	r0, r7
 800e95a:	47c8      	blx	r9
 800e95c:	3001      	adds	r0, #1
 800e95e:	d0e6      	beq.n	800e92e <_printf_common+0xae>
 800e960:	3601      	adds	r6, #1
 800e962:	e7d9      	b.n	800e918 <_printf_common+0x98>

0800e964 <_printf_i>:
 800e964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e968:	7e0f      	ldrb	r7, [r1, #24]
 800e96a:	4691      	mov	r9, r2
 800e96c:	2f78      	cmp	r7, #120	@ 0x78
 800e96e:	4680      	mov	r8, r0
 800e970:	460c      	mov	r4, r1
 800e972:	469a      	mov	sl, r3
 800e974:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e97a:	d807      	bhi.n	800e98c <_printf_i+0x28>
 800e97c:	2f62      	cmp	r7, #98	@ 0x62
 800e97e:	d80a      	bhi.n	800e996 <_printf_i+0x32>
 800e980:	2f00      	cmp	r7, #0
 800e982:	f000 80d3 	beq.w	800eb2c <_printf_i+0x1c8>
 800e986:	2f58      	cmp	r7, #88	@ 0x58
 800e988:	f000 80ba 	beq.w	800eb00 <_printf_i+0x19c>
 800e98c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e994:	e03a      	b.n	800ea0c <_printf_i+0xa8>
 800e996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e99a:	2b15      	cmp	r3, #21
 800e99c:	d8f6      	bhi.n	800e98c <_printf_i+0x28>
 800e99e:	a101      	add	r1, pc, #4	@ (adr r1, 800e9a4 <_printf_i+0x40>)
 800e9a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9a4:	0800e9fd 	.word	0x0800e9fd
 800e9a8:	0800ea11 	.word	0x0800ea11
 800e9ac:	0800e98d 	.word	0x0800e98d
 800e9b0:	0800e98d 	.word	0x0800e98d
 800e9b4:	0800e98d 	.word	0x0800e98d
 800e9b8:	0800e98d 	.word	0x0800e98d
 800e9bc:	0800ea11 	.word	0x0800ea11
 800e9c0:	0800e98d 	.word	0x0800e98d
 800e9c4:	0800e98d 	.word	0x0800e98d
 800e9c8:	0800e98d 	.word	0x0800e98d
 800e9cc:	0800e98d 	.word	0x0800e98d
 800e9d0:	0800eb13 	.word	0x0800eb13
 800e9d4:	0800ea3b 	.word	0x0800ea3b
 800e9d8:	0800eacd 	.word	0x0800eacd
 800e9dc:	0800e98d 	.word	0x0800e98d
 800e9e0:	0800e98d 	.word	0x0800e98d
 800e9e4:	0800eb35 	.word	0x0800eb35
 800e9e8:	0800e98d 	.word	0x0800e98d
 800e9ec:	0800ea3b 	.word	0x0800ea3b
 800e9f0:	0800e98d 	.word	0x0800e98d
 800e9f4:	0800e98d 	.word	0x0800e98d
 800e9f8:	0800ead5 	.word	0x0800ead5
 800e9fc:	6833      	ldr	r3, [r6, #0]
 800e9fe:	1d1a      	adds	r2, r3, #4
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	6032      	str	r2, [r6, #0]
 800ea04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	e09e      	b.n	800eb4e <_printf_i+0x1ea>
 800ea10:	6833      	ldr	r3, [r6, #0]
 800ea12:	6820      	ldr	r0, [r4, #0]
 800ea14:	1d19      	adds	r1, r3, #4
 800ea16:	6031      	str	r1, [r6, #0]
 800ea18:	0606      	lsls	r6, r0, #24
 800ea1a:	d501      	bpl.n	800ea20 <_printf_i+0xbc>
 800ea1c:	681d      	ldr	r5, [r3, #0]
 800ea1e:	e003      	b.n	800ea28 <_printf_i+0xc4>
 800ea20:	0645      	lsls	r5, r0, #25
 800ea22:	d5fb      	bpl.n	800ea1c <_printf_i+0xb8>
 800ea24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea28:	2d00      	cmp	r5, #0
 800ea2a:	da03      	bge.n	800ea34 <_printf_i+0xd0>
 800ea2c:	232d      	movs	r3, #45	@ 0x2d
 800ea2e:	426d      	negs	r5, r5
 800ea30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea34:	230a      	movs	r3, #10
 800ea36:	4859      	ldr	r0, [pc, #356]	@ (800eb9c <_printf_i+0x238>)
 800ea38:	e011      	b.n	800ea5e <_printf_i+0xfa>
 800ea3a:	6821      	ldr	r1, [r4, #0]
 800ea3c:	6833      	ldr	r3, [r6, #0]
 800ea3e:	0608      	lsls	r0, r1, #24
 800ea40:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea44:	d402      	bmi.n	800ea4c <_printf_i+0xe8>
 800ea46:	0649      	lsls	r1, r1, #25
 800ea48:	bf48      	it	mi
 800ea4a:	b2ad      	uxthmi	r5, r5
 800ea4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea4e:	6033      	str	r3, [r6, #0]
 800ea50:	bf14      	ite	ne
 800ea52:	230a      	movne	r3, #10
 800ea54:	2308      	moveq	r3, #8
 800ea56:	4851      	ldr	r0, [pc, #324]	@ (800eb9c <_printf_i+0x238>)
 800ea58:	2100      	movs	r1, #0
 800ea5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea5e:	6866      	ldr	r6, [r4, #4]
 800ea60:	2e00      	cmp	r6, #0
 800ea62:	bfa8      	it	ge
 800ea64:	6821      	ldrge	r1, [r4, #0]
 800ea66:	60a6      	str	r6, [r4, #8]
 800ea68:	bfa4      	itt	ge
 800ea6a:	f021 0104 	bicge.w	r1, r1, #4
 800ea6e:	6021      	strge	r1, [r4, #0]
 800ea70:	b90d      	cbnz	r5, 800ea76 <_printf_i+0x112>
 800ea72:	2e00      	cmp	r6, #0
 800ea74:	d04b      	beq.n	800eb0e <_printf_i+0x1aa>
 800ea76:	4616      	mov	r6, r2
 800ea78:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea7c:	fb03 5711 	mls	r7, r3, r1, r5
 800ea80:	5dc7      	ldrb	r7, [r0, r7]
 800ea82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea86:	462f      	mov	r7, r5
 800ea88:	42bb      	cmp	r3, r7
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	d9f4      	bls.n	800ea78 <_printf_i+0x114>
 800ea8e:	2b08      	cmp	r3, #8
 800ea90:	d10b      	bne.n	800eaaa <_printf_i+0x146>
 800ea92:	6823      	ldr	r3, [r4, #0]
 800ea94:	07df      	lsls	r7, r3, #31
 800ea96:	d508      	bpl.n	800eaaa <_printf_i+0x146>
 800ea98:	6923      	ldr	r3, [r4, #16]
 800ea9a:	6861      	ldr	r1, [r4, #4]
 800ea9c:	4299      	cmp	r1, r3
 800ea9e:	bfde      	ittt	le
 800eaa0:	2330      	movle	r3, #48	@ 0x30
 800eaa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eaa6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800eaaa:	1b92      	subs	r2, r2, r6
 800eaac:	6122      	str	r2, [r4, #16]
 800eaae:	464b      	mov	r3, r9
 800eab0:	4621      	mov	r1, r4
 800eab2:	4640      	mov	r0, r8
 800eab4:	f8cd a000 	str.w	sl, [sp]
 800eab8:	aa03      	add	r2, sp, #12
 800eaba:	f7ff fee1 	bl	800e880 <_printf_common>
 800eabe:	3001      	adds	r0, #1
 800eac0:	d14a      	bne.n	800eb58 <_printf_i+0x1f4>
 800eac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eac6:	b004      	add	sp, #16
 800eac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	f043 0320 	orr.w	r3, r3, #32
 800ead2:	6023      	str	r3, [r4, #0]
 800ead4:	2778      	movs	r7, #120	@ 0x78
 800ead6:	4832      	ldr	r0, [pc, #200]	@ (800eba0 <_printf_i+0x23c>)
 800ead8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	6831      	ldr	r1, [r6, #0]
 800eae0:	061f      	lsls	r7, r3, #24
 800eae2:	f851 5b04 	ldr.w	r5, [r1], #4
 800eae6:	d402      	bmi.n	800eaee <_printf_i+0x18a>
 800eae8:	065f      	lsls	r7, r3, #25
 800eaea:	bf48      	it	mi
 800eaec:	b2ad      	uxthmi	r5, r5
 800eaee:	6031      	str	r1, [r6, #0]
 800eaf0:	07d9      	lsls	r1, r3, #31
 800eaf2:	bf44      	itt	mi
 800eaf4:	f043 0320 	orrmi.w	r3, r3, #32
 800eaf8:	6023      	strmi	r3, [r4, #0]
 800eafa:	b11d      	cbz	r5, 800eb04 <_printf_i+0x1a0>
 800eafc:	2310      	movs	r3, #16
 800eafe:	e7ab      	b.n	800ea58 <_printf_i+0xf4>
 800eb00:	4826      	ldr	r0, [pc, #152]	@ (800eb9c <_printf_i+0x238>)
 800eb02:	e7e9      	b.n	800ead8 <_printf_i+0x174>
 800eb04:	6823      	ldr	r3, [r4, #0]
 800eb06:	f023 0320 	bic.w	r3, r3, #32
 800eb0a:	6023      	str	r3, [r4, #0]
 800eb0c:	e7f6      	b.n	800eafc <_printf_i+0x198>
 800eb0e:	4616      	mov	r6, r2
 800eb10:	e7bd      	b.n	800ea8e <_printf_i+0x12a>
 800eb12:	6833      	ldr	r3, [r6, #0]
 800eb14:	6825      	ldr	r5, [r4, #0]
 800eb16:	1d18      	adds	r0, r3, #4
 800eb18:	6961      	ldr	r1, [r4, #20]
 800eb1a:	6030      	str	r0, [r6, #0]
 800eb1c:	062e      	lsls	r6, r5, #24
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	d501      	bpl.n	800eb26 <_printf_i+0x1c2>
 800eb22:	6019      	str	r1, [r3, #0]
 800eb24:	e002      	b.n	800eb2c <_printf_i+0x1c8>
 800eb26:	0668      	lsls	r0, r5, #25
 800eb28:	d5fb      	bpl.n	800eb22 <_printf_i+0x1be>
 800eb2a:	8019      	strh	r1, [r3, #0]
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	4616      	mov	r6, r2
 800eb30:	6123      	str	r3, [r4, #16]
 800eb32:	e7bc      	b.n	800eaae <_printf_i+0x14a>
 800eb34:	6833      	ldr	r3, [r6, #0]
 800eb36:	2100      	movs	r1, #0
 800eb38:	1d1a      	adds	r2, r3, #4
 800eb3a:	6032      	str	r2, [r6, #0]
 800eb3c:	681e      	ldr	r6, [r3, #0]
 800eb3e:	6862      	ldr	r2, [r4, #4]
 800eb40:	4630      	mov	r0, r6
 800eb42:	f000 f907 	bl	800ed54 <memchr>
 800eb46:	b108      	cbz	r0, 800eb4c <_printf_i+0x1e8>
 800eb48:	1b80      	subs	r0, r0, r6
 800eb4a:	6060      	str	r0, [r4, #4]
 800eb4c:	6863      	ldr	r3, [r4, #4]
 800eb4e:	6123      	str	r3, [r4, #16]
 800eb50:	2300      	movs	r3, #0
 800eb52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb56:	e7aa      	b.n	800eaae <_printf_i+0x14a>
 800eb58:	4632      	mov	r2, r6
 800eb5a:	4649      	mov	r1, r9
 800eb5c:	4640      	mov	r0, r8
 800eb5e:	6923      	ldr	r3, [r4, #16]
 800eb60:	47d0      	blx	sl
 800eb62:	3001      	adds	r0, #1
 800eb64:	d0ad      	beq.n	800eac2 <_printf_i+0x15e>
 800eb66:	6823      	ldr	r3, [r4, #0]
 800eb68:	079b      	lsls	r3, r3, #30
 800eb6a:	d413      	bmi.n	800eb94 <_printf_i+0x230>
 800eb6c:	68e0      	ldr	r0, [r4, #12]
 800eb6e:	9b03      	ldr	r3, [sp, #12]
 800eb70:	4298      	cmp	r0, r3
 800eb72:	bfb8      	it	lt
 800eb74:	4618      	movlt	r0, r3
 800eb76:	e7a6      	b.n	800eac6 <_printf_i+0x162>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	4632      	mov	r2, r6
 800eb7c:	4649      	mov	r1, r9
 800eb7e:	4640      	mov	r0, r8
 800eb80:	47d0      	blx	sl
 800eb82:	3001      	adds	r0, #1
 800eb84:	d09d      	beq.n	800eac2 <_printf_i+0x15e>
 800eb86:	3501      	adds	r5, #1
 800eb88:	68e3      	ldr	r3, [r4, #12]
 800eb8a:	9903      	ldr	r1, [sp, #12]
 800eb8c:	1a5b      	subs	r3, r3, r1
 800eb8e:	42ab      	cmp	r3, r5
 800eb90:	dcf2      	bgt.n	800eb78 <_printf_i+0x214>
 800eb92:	e7eb      	b.n	800eb6c <_printf_i+0x208>
 800eb94:	2500      	movs	r5, #0
 800eb96:	f104 0619 	add.w	r6, r4, #25
 800eb9a:	e7f5      	b.n	800eb88 <_printf_i+0x224>
 800eb9c:	0800f31d 	.word	0x0800f31d
 800eba0:	0800f32e 	.word	0x0800f32e

0800eba4 <__swbuf_r>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	460e      	mov	r6, r1
 800eba8:	4614      	mov	r4, r2
 800ebaa:	4605      	mov	r5, r0
 800ebac:	b118      	cbz	r0, 800ebb6 <__swbuf_r+0x12>
 800ebae:	6a03      	ldr	r3, [r0, #32]
 800ebb0:	b90b      	cbnz	r3, 800ebb6 <__swbuf_r+0x12>
 800ebb2:	f7fd fa59 	bl	800c068 <__sinit>
 800ebb6:	69a3      	ldr	r3, [r4, #24]
 800ebb8:	60a3      	str	r3, [r4, #8]
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	071a      	lsls	r2, r3, #28
 800ebbe:	d501      	bpl.n	800ebc4 <__swbuf_r+0x20>
 800ebc0:	6923      	ldr	r3, [r4, #16]
 800ebc2:	b943      	cbnz	r3, 800ebd6 <__swbuf_r+0x32>
 800ebc4:	4621      	mov	r1, r4
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f000 f82a 	bl	800ec20 <__swsetup_r>
 800ebcc:	b118      	cbz	r0, 800ebd6 <__swbuf_r+0x32>
 800ebce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ebd2:	4638      	mov	r0, r7
 800ebd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebd6:	6823      	ldr	r3, [r4, #0]
 800ebd8:	6922      	ldr	r2, [r4, #16]
 800ebda:	b2f6      	uxtb	r6, r6
 800ebdc:	1a98      	subs	r0, r3, r2
 800ebde:	6963      	ldr	r3, [r4, #20]
 800ebe0:	4637      	mov	r7, r6
 800ebe2:	4283      	cmp	r3, r0
 800ebe4:	dc05      	bgt.n	800ebf2 <__swbuf_r+0x4e>
 800ebe6:	4621      	mov	r1, r4
 800ebe8:	4628      	mov	r0, r5
 800ebea:	f7fe fe25 	bl	800d838 <_fflush_r>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d1ed      	bne.n	800ebce <__swbuf_r+0x2a>
 800ebf2:	68a3      	ldr	r3, [r4, #8]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	60a3      	str	r3, [r4, #8]
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	1c5a      	adds	r2, r3, #1
 800ebfc:	6022      	str	r2, [r4, #0]
 800ebfe:	701e      	strb	r6, [r3, #0]
 800ec00:	6962      	ldr	r2, [r4, #20]
 800ec02:	1c43      	adds	r3, r0, #1
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d004      	beq.n	800ec12 <__swbuf_r+0x6e>
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	07db      	lsls	r3, r3, #31
 800ec0c:	d5e1      	bpl.n	800ebd2 <__swbuf_r+0x2e>
 800ec0e:	2e0a      	cmp	r6, #10
 800ec10:	d1df      	bne.n	800ebd2 <__swbuf_r+0x2e>
 800ec12:	4621      	mov	r1, r4
 800ec14:	4628      	mov	r0, r5
 800ec16:	f7fe fe0f 	bl	800d838 <_fflush_r>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d0d9      	beq.n	800ebd2 <__swbuf_r+0x2e>
 800ec1e:	e7d6      	b.n	800ebce <__swbuf_r+0x2a>

0800ec20 <__swsetup_r>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	4b29      	ldr	r3, [pc, #164]	@ (800ecc8 <__swsetup_r+0xa8>)
 800ec24:	4605      	mov	r5, r0
 800ec26:	6818      	ldr	r0, [r3, #0]
 800ec28:	460c      	mov	r4, r1
 800ec2a:	b118      	cbz	r0, 800ec34 <__swsetup_r+0x14>
 800ec2c:	6a03      	ldr	r3, [r0, #32]
 800ec2e:	b90b      	cbnz	r3, 800ec34 <__swsetup_r+0x14>
 800ec30:	f7fd fa1a 	bl	800c068 <__sinit>
 800ec34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec38:	0719      	lsls	r1, r3, #28
 800ec3a:	d422      	bmi.n	800ec82 <__swsetup_r+0x62>
 800ec3c:	06da      	lsls	r2, r3, #27
 800ec3e:	d407      	bmi.n	800ec50 <__swsetup_r+0x30>
 800ec40:	2209      	movs	r2, #9
 800ec42:	602a      	str	r2, [r5, #0]
 800ec44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec4c:	81a3      	strh	r3, [r4, #12]
 800ec4e:	e033      	b.n	800ecb8 <__swsetup_r+0x98>
 800ec50:	0758      	lsls	r0, r3, #29
 800ec52:	d512      	bpl.n	800ec7a <__swsetup_r+0x5a>
 800ec54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec56:	b141      	cbz	r1, 800ec6a <__swsetup_r+0x4a>
 800ec58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec5c:	4299      	cmp	r1, r3
 800ec5e:	d002      	beq.n	800ec66 <__swsetup_r+0x46>
 800ec60:	4628      	mov	r0, r5
 800ec62:	f7fd fb1d 	bl	800c2a0 <_free_r>
 800ec66:	2300      	movs	r3, #0
 800ec68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec6a:	89a3      	ldrh	r3, [r4, #12]
 800ec6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec70:	81a3      	strh	r3, [r4, #12]
 800ec72:	2300      	movs	r3, #0
 800ec74:	6063      	str	r3, [r4, #4]
 800ec76:	6923      	ldr	r3, [r4, #16]
 800ec78:	6023      	str	r3, [r4, #0]
 800ec7a:	89a3      	ldrh	r3, [r4, #12]
 800ec7c:	f043 0308 	orr.w	r3, r3, #8
 800ec80:	81a3      	strh	r3, [r4, #12]
 800ec82:	6923      	ldr	r3, [r4, #16]
 800ec84:	b94b      	cbnz	r3, 800ec9a <__swsetup_r+0x7a>
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ec8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec90:	d003      	beq.n	800ec9a <__swsetup_r+0x7a>
 800ec92:	4621      	mov	r1, r4
 800ec94:	4628      	mov	r0, r5
 800ec96:	f000 f890 	bl	800edba <__smakebuf_r>
 800ec9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec9e:	f013 0201 	ands.w	r2, r3, #1
 800eca2:	d00a      	beq.n	800ecba <__swsetup_r+0x9a>
 800eca4:	2200      	movs	r2, #0
 800eca6:	60a2      	str	r2, [r4, #8]
 800eca8:	6962      	ldr	r2, [r4, #20]
 800ecaa:	4252      	negs	r2, r2
 800ecac:	61a2      	str	r2, [r4, #24]
 800ecae:	6922      	ldr	r2, [r4, #16]
 800ecb0:	b942      	cbnz	r2, 800ecc4 <__swsetup_r+0xa4>
 800ecb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecb6:	d1c5      	bne.n	800ec44 <__swsetup_r+0x24>
 800ecb8:	bd38      	pop	{r3, r4, r5, pc}
 800ecba:	0799      	lsls	r1, r3, #30
 800ecbc:	bf58      	it	pl
 800ecbe:	6962      	ldrpl	r2, [r4, #20]
 800ecc0:	60a2      	str	r2, [r4, #8]
 800ecc2:	e7f4      	b.n	800ecae <__swsetup_r+0x8e>
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	e7f7      	b.n	800ecb8 <__swsetup_r+0x98>
 800ecc8:	200002f4 	.word	0x200002f4

0800eccc <_raise_r>:
 800eccc:	291f      	cmp	r1, #31
 800ecce:	b538      	push	{r3, r4, r5, lr}
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	d904      	bls.n	800ece0 <_raise_r+0x14>
 800ecd6:	2316      	movs	r3, #22
 800ecd8:	6003      	str	r3, [r0, #0]
 800ecda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ecde:	bd38      	pop	{r3, r4, r5, pc}
 800ece0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ece2:	b112      	cbz	r2, 800ecea <_raise_r+0x1e>
 800ece4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ece8:	b94b      	cbnz	r3, 800ecfe <_raise_r+0x32>
 800ecea:	4628      	mov	r0, r5
 800ecec:	f000 f830 	bl	800ed50 <_getpid_r>
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecfa:	f000 b817 	b.w	800ed2c <_kill_r>
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d00a      	beq.n	800ed18 <_raise_r+0x4c>
 800ed02:	1c59      	adds	r1, r3, #1
 800ed04:	d103      	bne.n	800ed0e <_raise_r+0x42>
 800ed06:	2316      	movs	r3, #22
 800ed08:	6003      	str	r3, [r0, #0]
 800ed0a:	2001      	movs	r0, #1
 800ed0c:	e7e7      	b.n	800ecde <_raise_r+0x12>
 800ed0e:	2100      	movs	r1, #0
 800ed10:	4620      	mov	r0, r4
 800ed12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed16:	4798      	blx	r3
 800ed18:	2000      	movs	r0, #0
 800ed1a:	e7e0      	b.n	800ecde <_raise_r+0x12>

0800ed1c <raise>:
 800ed1c:	4b02      	ldr	r3, [pc, #8]	@ (800ed28 <raise+0xc>)
 800ed1e:	4601      	mov	r1, r0
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	f7ff bfd3 	b.w	800eccc <_raise_r>
 800ed26:	bf00      	nop
 800ed28:	200002f4 	.word	0x200002f4

0800ed2c <_kill_r>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	2300      	movs	r3, #0
 800ed30:	4d06      	ldr	r5, [pc, #24]	@ (800ed4c <_kill_r+0x20>)
 800ed32:	4604      	mov	r4, r0
 800ed34:	4608      	mov	r0, r1
 800ed36:	4611      	mov	r1, r2
 800ed38:	602b      	str	r3, [r5, #0]
 800ed3a:	f7f2 ff4c 	bl	8001bd6 <_kill>
 800ed3e:	1c43      	adds	r3, r0, #1
 800ed40:	d102      	bne.n	800ed48 <_kill_r+0x1c>
 800ed42:	682b      	ldr	r3, [r5, #0]
 800ed44:	b103      	cbz	r3, 800ed48 <_kill_r+0x1c>
 800ed46:	6023      	str	r3, [r4, #0]
 800ed48:	bd38      	pop	{r3, r4, r5, pc}
 800ed4a:	bf00      	nop
 800ed4c:	200018d4 	.word	0x200018d4

0800ed50 <_getpid_r>:
 800ed50:	f7f2 bf3a 	b.w	8001bc8 <_getpid>

0800ed54 <memchr>:
 800ed54:	4603      	mov	r3, r0
 800ed56:	b510      	push	{r4, lr}
 800ed58:	b2c9      	uxtb	r1, r1
 800ed5a:	4402      	add	r2, r0
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	4618      	mov	r0, r3
 800ed60:	d101      	bne.n	800ed66 <memchr+0x12>
 800ed62:	2000      	movs	r0, #0
 800ed64:	e003      	b.n	800ed6e <memchr+0x1a>
 800ed66:	7804      	ldrb	r4, [r0, #0]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	428c      	cmp	r4, r1
 800ed6c:	d1f6      	bne.n	800ed5c <memchr+0x8>
 800ed6e:	bd10      	pop	{r4, pc}

0800ed70 <__swhatbuf_r>:
 800ed70:	b570      	push	{r4, r5, r6, lr}
 800ed72:	460c      	mov	r4, r1
 800ed74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed78:	4615      	mov	r5, r2
 800ed7a:	2900      	cmp	r1, #0
 800ed7c:	461e      	mov	r6, r3
 800ed7e:	b096      	sub	sp, #88	@ 0x58
 800ed80:	da0c      	bge.n	800ed9c <__swhatbuf_r+0x2c>
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	2100      	movs	r1, #0
 800ed86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed8a:	bf14      	ite	ne
 800ed8c:	2340      	movne	r3, #64	@ 0x40
 800ed8e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed92:	2000      	movs	r0, #0
 800ed94:	6031      	str	r1, [r6, #0]
 800ed96:	602b      	str	r3, [r5, #0]
 800ed98:	b016      	add	sp, #88	@ 0x58
 800ed9a:	bd70      	pop	{r4, r5, r6, pc}
 800ed9c:	466a      	mov	r2, sp
 800ed9e:	f000 f849 	bl	800ee34 <_fstat_r>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	dbed      	blt.n	800ed82 <__swhatbuf_r+0x12>
 800eda6:	9901      	ldr	r1, [sp, #4]
 800eda8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800edac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800edb0:	4259      	negs	r1, r3
 800edb2:	4159      	adcs	r1, r3
 800edb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edb8:	e7eb      	b.n	800ed92 <__swhatbuf_r+0x22>

0800edba <__smakebuf_r>:
 800edba:	898b      	ldrh	r3, [r1, #12]
 800edbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edbe:	079d      	lsls	r5, r3, #30
 800edc0:	4606      	mov	r6, r0
 800edc2:	460c      	mov	r4, r1
 800edc4:	d507      	bpl.n	800edd6 <__smakebuf_r+0x1c>
 800edc6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800edca:	6023      	str	r3, [r4, #0]
 800edcc:	6123      	str	r3, [r4, #16]
 800edce:	2301      	movs	r3, #1
 800edd0:	6163      	str	r3, [r4, #20]
 800edd2:	b003      	add	sp, #12
 800edd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edd6:	466a      	mov	r2, sp
 800edd8:	ab01      	add	r3, sp, #4
 800edda:	f7ff ffc9 	bl	800ed70 <__swhatbuf_r>
 800edde:	9f00      	ldr	r7, [sp, #0]
 800ede0:	4605      	mov	r5, r0
 800ede2:	4639      	mov	r1, r7
 800ede4:	4630      	mov	r0, r6
 800ede6:	f7fd fdff 	bl	800c9e8 <_malloc_r>
 800edea:	b948      	cbnz	r0, 800ee00 <__smakebuf_r+0x46>
 800edec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edf0:	059a      	lsls	r2, r3, #22
 800edf2:	d4ee      	bmi.n	800edd2 <__smakebuf_r+0x18>
 800edf4:	f023 0303 	bic.w	r3, r3, #3
 800edf8:	f043 0302 	orr.w	r3, r3, #2
 800edfc:	81a3      	strh	r3, [r4, #12]
 800edfe:	e7e2      	b.n	800edc6 <__smakebuf_r+0xc>
 800ee00:	89a3      	ldrh	r3, [r4, #12]
 800ee02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee0a:	81a3      	strh	r3, [r4, #12]
 800ee0c:	9b01      	ldr	r3, [sp, #4]
 800ee0e:	6020      	str	r0, [r4, #0]
 800ee10:	b15b      	cbz	r3, 800ee2a <__smakebuf_r+0x70>
 800ee12:	4630      	mov	r0, r6
 800ee14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee18:	f000 f81e 	bl	800ee58 <_isatty_r>
 800ee1c:	b128      	cbz	r0, 800ee2a <__smakebuf_r+0x70>
 800ee1e:	89a3      	ldrh	r3, [r4, #12]
 800ee20:	f023 0303 	bic.w	r3, r3, #3
 800ee24:	f043 0301 	orr.w	r3, r3, #1
 800ee28:	81a3      	strh	r3, [r4, #12]
 800ee2a:	89a3      	ldrh	r3, [r4, #12]
 800ee2c:	431d      	orrs	r5, r3
 800ee2e:	81a5      	strh	r5, [r4, #12]
 800ee30:	e7cf      	b.n	800edd2 <__smakebuf_r+0x18>
	...

0800ee34 <_fstat_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	2300      	movs	r3, #0
 800ee38:	4d06      	ldr	r5, [pc, #24]	@ (800ee54 <_fstat_r+0x20>)
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	4611      	mov	r1, r2
 800ee40:	602b      	str	r3, [r5, #0]
 800ee42:	f7f2 ff27 	bl	8001c94 <_fstat>
 800ee46:	1c43      	adds	r3, r0, #1
 800ee48:	d102      	bne.n	800ee50 <_fstat_r+0x1c>
 800ee4a:	682b      	ldr	r3, [r5, #0]
 800ee4c:	b103      	cbz	r3, 800ee50 <_fstat_r+0x1c>
 800ee4e:	6023      	str	r3, [r4, #0]
 800ee50:	bd38      	pop	{r3, r4, r5, pc}
 800ee52:	bf00      	nop
 800ee54:	200018d4 	.word	0x200018d4

0800ee58 <_isatty_r>:
 800ee58:	b538      	push	{r3, r4, r5, lr}
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	4d05      	ldr	r5, [pc, #20]	@ (800ee74 <_isatty_r+0x1c>)
 800ee5e:	4604      	mov	r4, r0
 800ee60:	4608      	mov	r0, r1
 800ee62:	602b      	str	r3, [r5, #0]
 800ee64:	f7f2 ff25 	bl	8001cb2 <_isatty>
 800ee68:	1c43      	adds	r3, r0, #1
 800ee6a:	d102      	bne.n	800ee72 <_isatty_r+0x1a>
 800ee6c:	682b      	ldr	r3, [r5, #0]
 800ee6e:	b103      	cbz	r3, 800ee72 <_isatty_r+0x1a>
 800ee70:	6023      	str	r3, [r4, #0]
 800ee72:	bd38      	pop	{r3, r4, r5, pc}
 800ee74:	200018d4 	.word	0x200018d4

0800ee78 <_init>:
 800ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7a:	bf00      	nop
 800ee7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee7e:	bc08      	pop	{r3}
 800ee80:	469e      	mov	lr, r3
 800ee82:	4770      	bx	lr

0800ee84 <_fini>:
 800ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee86:	bf00      	nop
 800ee88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee8a:	bc08      	pop	{r3}
 800ee8c:	469e      	mov	lr, r3
 800ee8e:	4770      	bx	lr
