
Tesis_LGBS_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efe4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800f0f8  0800f0f8  000100f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5d0  0800f5d0  00011348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f5d0  0800f5d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5d8  0800f5d8  00011348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5d8  0800f5d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f5dc  0800f5dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  0800f5e0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a4  20000348  0800f928  00011348  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017ec  0800f928  000117ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ec4  00000000  00000000  00011371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ba  00000000  00000000  00028235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0002c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102d  00000000  00000000  0002d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c956  00000000  00000000  0002e975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019408  00000000  00000000  0004b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095df4  00000000  00000000  000646d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa4c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d44  00000000  00000000  000fa50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00101250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f0dc 	.word	0x0800f0dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800f0dc 	.word	0x0800f0dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_d2lz>:
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	2200      	movs	r2, #0
 8001134:	2300      	movs	r3, #0
 8001136:	4604      	mov	r4, r0
 8001138:	460d      	mov	r5, r1
 800113a:	f7ff fc3f 	bl	80009bc <__aeabi_dcmplt>
 800113e:	b928      	cbnz	r0, 800114c <__aeabi_d2lz+0x1c>
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001148:	f000 b80a 	b.w	8001160 <__aeabi_d2ulz>
 800114c:	4620      	mov	r0, r4
 800114e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001152:	f000 f805 	bl	8001160 <__aeabi_d2ulz>
 8001156:	4240      	negs	r0, r0
 8001158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800115c:	bd38      	pop	{r3, r4, r5, pc}
 800115e:	bf00      	nop

08001160 <__aeabi_d2ulz>:
 8001160:	b5d0      	push	{r4, r6, r7, lr}
 8001162:	2200      	movs	r2, #0
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <__aeabi_d2ulz+0x34>)
 8001166:	4606      	mov	r6, r0
 8001168:	460f      	mov	r7, r1
 800116a:	f7ff f9b5 	bl	80004d8 <__aeabi_dmul>
 800116e:	f7ff fc75 	bl	8000a5c <__aeabi_d2uiz>
 8001172:	4604      	mov	r4, r0
 8001174:	f7ff f936 	bl	80003e4 <__aeabi_ui2d>
 8001178:	2200      	movs	r2, #0
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <__aeabi_d2ulz+0x38>)
 800117c:	f7ff f9ac 	bl	80004d8 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4630      	mov	r0, r6
 8001186:	4639      	mov	r1, r7
 8001188:	f7fe ffee 	bl	8000168 <__aeabi_dsub>
 800118c:	f7ff fc66 	bl	8000a5c <__aeabi_d2uiz>
 8001190:	4621      	mov	r1, r4
 8001192:	bdd0      	pop	{r4, r6, r7, pc}
 8001194:	3df00000 	.word	0x3df00000
 8001198:	41f00000 	.word	0x41f00000

0800119c <curr_control_init>:
static int16_t i_offset = 0;
static bool calibrated = false;


void curr_control_init(ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2101      	movs	r1, #1
 80011aa:	4817      	ldr	r0, [pc, #92]	@ (8001208 <curr_control_init+0x6c>)
 80011ac:	f002 f8c2 	bl	8003334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2102      	movs	r1, #2
 80011b4:	4814      	ldr	r0, [pc, #80]	@ (8001208 <curr_control_init+0x6c>)
 80011b6:	f002 f8bd 	bl	8003334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_B, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2104      	movs	r1, #4
 80011be:	4812      	ldr	r0, [pc, #72]	@ (8001208 <curr_control_init+0x6c>)
 80011c0:	f002 f8b8 	bl	8003334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_B, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2108      	movs	r1, #8
 80011c8:	480f      	ldr	r0, [pc, #60]	@ (8001208 <curr_control_init+0x6c>)
 80011ca:	f002 f8b3 	bl	8003334 <HAL_GPIO_WritePin>

	if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f001 fb00 	bl	80027d4 <HAL_ADCEx_Calibration_Start>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <curr_control_init+0x42>
	{
		Error_Handler();
 80011da:	f000 fc1d 	bl	8001a18 <Error_Handler>
	}

	if (HAL_ADC_Start_IT(hadc) != HAL_OK)
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 ffda 	bl	8002198 <HAL_ADC_Start_IT>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <curr_control_init+0x52>
	{
		Error_Handler();
 80011ea:	f000 fc15 	bl	8001a18 <Error_Handler>
	}

	if (HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f005 fbb9 	bl	8006968 <HAL_TIMEx_PWMN_Start>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <curr_control_init+0x64>
	{
		Error_Handler();
 80011fc:	f000 fc0c 	bl	8001a18 <Error_Handler>
	}


}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010800 	.word	0x40010800

0800120c <get_I_meas>:

float get_I_meas()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	return (float)(adc_value-i_offset)/(float)SENS_SENSITIVITY;
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <get_I_meas+0x2c>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	461a      	mov	r2, r3
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <get_I_meas+0x30>)
 800121a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd45 	bl	8000cb0 <__aeabi_i2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4905      	ldr	r1, [pc, #20]	@ (8001240 <get_I_meas+0x34>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fe48 	bl	8000ec0 <__aeabi_fdiv>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000364 	.word	0x20000364
 800123c:	2000036e 	.word	0x2000036e
 8001240:	43f80000 	.word	0x43f80000

08001244 <get_I>:

float get_I()
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return i_ref_float;
 8001248:	4b02      	ldr	r3, [pc, #8]	@ (8001254 <get_I+0x10>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20000368 	.word	0x20000368

08001258 <set_I>:

void set_I(float i)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	if (i > MAX_CURR || i < 0.0)
 8001260:	4917      	ldr	r1, [pc, #92]	@ (80012c0 <set_I+0x68>)
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff34 	bl	80010d0 <__aeabi_fcmpgt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d124      	bne.n	80012b8 <set_I+0x60>
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff0e 	bl	8001094 <__aeabi_fcmplt>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d11c      	bne.n	80012b8 <set_I+0x60>
	{
		return;
	}
	i_ref_float = i;
 800127e:	4a11      	ldr	r2, [pc, #68]	@ (80012c4 <set_I+0x6c>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6013      	str	r3, [r2, #0]
	i_ref_int = i * SENS_SENSITIVITY + i_offset;
 8001284:	4910      	ldr	r1, [pc, #64]	@ (80012c8 <set_I+0x70>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fd66 	bl	8000d58 <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	461c      	mov	r4, r3
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <set_I+0x74>)
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fd0a 	bl	8000cb0 <__aeabi_i2f>
 800129c:	4603      	mov	r3, r0
 800129e:	4619      	mov	r1, r3
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff fc51 	bl	8000b48 <__addsf3>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff1b 	bl	80010e4 <__aeabi_f2iz>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <set_I+0x78>)
 80012b4:	801a      	strh	r2, [r3, #0]
 80012b6:	e000      	b.n	80012ba <set_I+0x62>
		return;
 80012b8:	bf00      	nop
}
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd90      	pop	{r4, r7, pc}
 80012c0:	40a00000 	.word	0x40a00000
 80012c4:	20000368 	.word	0x20000368
 80012c8:	43f80000 	.word	0x43f80000
 80012cc:	2000036e 	.word	0x2000036e
 80012d0:	2000036c 	.word	0x2000036c

080012d4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f001 f811 	bl	8002304 <HAL_ADC_GetValue>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <HAL_ADC_ConvCpltCallback+0x9c>)
 80012e8:	801a      	strh	r2, [r3, #0]
	if (!calibrated)
 80012ea:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <HAL_ADC_ConvCpltCallback+0xa0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_ADC_ConvCpltCallback+0x36>
	{
		i_offset = adc_value;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <HAL_ADC_ConvCpltCallback+0x9c>)
 80012fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001300:	801a      	strh	r2, [r3, #0]
		calibrated = true;
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e02f      	b.n	800136a <HAL_ADC_ConvCpltCallback+0x96>
	}
	else
	{
		if (i_ref_int == i_offset)
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <HAL_ADC_ConvCpltCallback+0xa8>)
 800130c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001316:	429a      	cmp	r2, r3
 8001318:	d10a      	bne.n	8001330 <HAL_ADC_ConvCpltCallback+0x5c>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	4818      	ldr	r0, [pc, #96]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xac>)
 8001320:	f002 f808 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2102      	movs	r1, #2
 8001328:	4815      	ldr	r0, [pc, #84]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xac>)
 800132a:	f002 f803 	bl	8003334 <HAL_GPIO_WritePin>
			return;
 800132e:	e01c      	b.n	800136a <HAL_ADC_ConvCpltCallback+0x96>
		}
		if (adc_value > i_ref_int)
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001332:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_ADC_ConvCpltCallback+0xa8>)
 8001338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133c:	429a      	cmp	r2, r3
 800133e:	dd0a      	ble.n	8001356 <HAL_ADC_ConvCpltCallback+0x82>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2101      	movs	r1, #1
 8001344:	480e      	ldr	r0, [pc, #56]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xac>)
 8001346:	f001 fff5 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2102      	movs	r1, #2
 800134e:	480c      	ldr	r0, [pc, #48]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xac>)
 8001350:	f001 fff0 	bl	8003334 <HAL_GPIO_WritePin>
 8001354:	e009      	b.n	800136a <HAL_ADC_ConvCpltCallback+0x96>
		}
		else
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2102      	movs	r1, #2
 800135a:	4809      	ldr	r0, [pc, #36]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xac>)
 800135c:	f001 ffea 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2101      	movs	r1, #1
 8001364:	4806      	ldr	r0, [pc, #24]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xac>)
 8001366:	f001 ffe5 	bl	8003334 <HAL_GPIO_WritePin>
		}
	}
}
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000364 	.word	0x20000364
 8001374:	20000370 	.word	0x20000370
 8001378:	2000036e 	.word	0x2000036e
 800137c:	2000036c 	.word	0x2000036c
 8001380:	40010800 	.word	0x40010800

08001384 <init_LUT_comms>:
uint16_t offset = 50;
uint16_t spi_data = 0;


void init_LUT_comms(SPI_HandleTypeDef *hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(hspi, &spi_data, 23);
 800138c:	2217      	movs	r2, #23
 800138e:	4904      	ldr	r1, [pc, #16]	@ (80013a0 <init_LUT_comms+0x1c>)
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f004 fb33 	bl	80059fc <HAL_SPI_Transmit_DMA>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000372 	.word	0x20000372

080013a4 <set_offset>:
{
	return spi_data;
}

void set_offset(uint16_t value)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
	offset = value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <set_offset+0x1c>)
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	8013      	strh	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000000 	.word	0x20000000

080013c4 <get_offset>:

uint16_t get_offset(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	return offset;
 80013c8:	4b02      	ldr	r3, [pc, #8]	@ (80013d4 <get_offset+0x10>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000000 	.word	0x20000000

080013d8 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

	if (spi_data + offset > LUT_SIZE-1) {
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_SPI_TxCpltCallback+0x4c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <HAL_SPI_TxCpltCallback+0x50>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013f0:	db0b      	blt.n	800140a <HAL_SPI_TxCpltCallback+0x32>
		spi_data = spi_data + offset - (LUT_SIZE - 1);
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <HAL_SPI_TxCpltCallback+0x4c>)
 80013f4:	881a      	ldrh	r2, [r3, #0]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <HAL_SPI_TxCpltCallback+0x50>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <HAL_SPI_TxCpltCallback+0x4c>)
 8001406:	801a      	strh	r2, [r3, #0]
	}
	else {
		spi_data += offset;
	}
}
 8001408:	e007      	b.n	800141a <HAL_SPI_TxCpltCallback+0x42>
		spi_data += offset;
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_SPI_TxCpltCallback+0x4c>)
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_SPI_TxCpltCallback+0x50>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_SPI_TxCpltCallback+0x4c>)
 8001418:	801a      	strh	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000372 	.word	0x20000372
 8001428:	20000000 	.word	0x20000000

0800142c <command_I>:

#include "stdio.h"
#include "string.h"


void command_I(uint8_t *buff, uint16_t size){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
	static float i;
	if (buff[1] == '?')
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3301      	adds	r3, #1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001440:	d112      	bne.n	8001468 <command_I+0x3c>
	{
		gcvt(get_I(), 3, buff);
 8001442:	f7ff feff 	bl	8001244 <get_I>
 8001446:	4603      	mov	r3, r0
 8001448:	4618      	mov	r0, r3
 800144a:	f7fe ffed 	bl	8000428 <__aeabi_f2d>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f00a fe7b 	bl	800c14c <gcvt>
		buff[4] = '\n';
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	220a      	movs	r2, #10
 800145c:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 800145e:	2105      	movs	r1, #5
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f009 fb6f 	bl	800ab44 <CDC_Transmit_FS>
 8001466:	e02f      	b.n	80014c8 <command_I+0x9c>
	}
	else if (buff[1] == '=')
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001470:	d113      	bne.n	800149a <command_I+0x6e>
	{
		i = atof(&buff[2]);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3302      	adds	r3, #2
 8001476:	4618      	mov	r0, r3
 8001478:	f009 ff7c 	bl	800b374 <atof>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb0a 	bl	8000a9c <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <command_I+0xb8>)
 800148c:	6013      	str	r3, [r2, #0]
		set_I(i);
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <command_I+0xb8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fee0 	bl	8001258 <set_I>
 8001498:	e016      	b.n	80014c8 <command_I+0x9c>
	}
	else if (buff[1] == 'm')
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3301      	adds	r3, #1
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b6d      	cmp	r3, #109	@ 0x6d
 80014a2:	d111      	bne.n	80014c8 <command_I+0x9c>
	{
		gcvt(get_I_meas(), 3, buff);
 80014a4:	f7ff feb2 	bl	800120c <get_I_meas>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe ffbc 	bl	8000428 <__aeabi_f2d>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f00a fe4a 	bl	800c14c <gcvt>
		buff[4] = '\n';
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3304      	adds	r3, #4
 80014bc:	220a      	movs	r2, #10
 80014be:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 80014c0:	2105      	movs	r1, #5
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f009 fb3e 	bl	800ab44 <CDC_Transmit_FS>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 80014c8:	bf00      	nop
 80014ca:	2101      	movs	r1, #1
 80014cc:	200a      	movs	r0, #10
 80014ce:	f009 fb39 	bl	800ab44 <CDC_Transmit_FS>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d0f8      	beq.n	80014ca <command_I+0x9e>
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000374 	.word	0x20000374

080014e8 <command_O>:

void command_O(uint8_t *buff, uint16_t size){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
	static uint16_t data;
	if (buff[1] == '?')
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3301      	adds	r3, #1
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80014fc:	d11a      	bne.n	8001534 <command_O+0x4c>
	{
		itoa(get_offset(), buff, 10);
 80014fe:	f7ff ff61 	bl	80013c4 <get_offset>
 8001502:	4603      	mov	r3, r0
 8001504:	220a      	movs	r2, #10
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f009 ff52 	bl	800b3b2 <itoa>
		auto len = strlen(buff);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7fe fe1e 	bl	8000150 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	60fb      	str	r3, [r7, #12]
		buff[len] = '\n';
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	220a      	movs	r2, #10
 8001520:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, len + 1);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	b29b      	uxth	r3, r3
 8001526:	3301      	adds	r3, #1
 8001528:	b29b      	uxth	r3, r3
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f009 fb09 	bl	800ab44 <CDC_Transmit_FS>
 8001532:	e012      	b.n	800155a <command_O+0x72>
	}
	else if (buff[1] == '=')
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3301      	adds	r3, #1
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b3d      	cmp	r3, #61	@ 0x3d
 800153c:	d10d      	bne.n	800155a <command_O+0x72>
	{
		data = atoi(&buff[2]);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3302      	adds	r3, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f009 ff19 	bl	800b37a <atoi>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <command_O+0x8c>)
 800154e:	801a      	strh	r2, [r3, #0]
		set_offset(data);
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <command_O+0x8c>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff25 	bl	80013a4 <set_offset>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 800155a:	bf00      	nop
 800155c:	2101      	movs	r1, #1
 800155e:	200a      	movs	r0, #10
 8001560:	f009 faf0 	bl	800ab44 <CDC_Transmit_FS>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d0f8      	beq.n	800155c <command_O+0x74>
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000378 	.word	0x20000378

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157c:	f000 fcd2 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001580:	f000 f850 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001584:	f000 f9ae 	bl	80018e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001588:	f000 f98e 	bl	80018a8 <MX_DMA_Init>
  MX_SPI1_Init();
 800158c:	f000 f8e6 	bl	800175c <MX_SPI1_Init>
  MX_ADC1_Init();
 8001590:	f000 f8a6 	bl	80016e0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001594:	f000 f914 	bl	80017c0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001598:	f009 fa08 	bl	800a9ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  curr_control_init(&hadc1, &htim3);
 800159c:	491b      	ldr	r1, [pc, #108]	@ (800160c <main+0x94>)
 800159e:	481c      	ldr	r0, [pc, #112]	@ (8001610 <main+0x98>)
 80015a0:	f7ff fdfc 	bl	800119c <curr_control_init>
  init_LUT_comms(&hspi1);
 80015a4:	481b      	ldr	r0, [pc, #108]	@ (8001614 <main+0x9c>)
 80015a6:	f7ff feed 	bl	8001384 <init_LUT_comms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (CDC_data_recieved())
 80015aa:	f009 faf1 	bl	800ab90 <CDC_data_recieved>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0fa      	beq.n	80015aa <main+0x32>
	  {
		  rx_usb_amount = CDC_Receive_data(msg, 64);
 80015b4:	2140      	movs	r1, #64	@ 0x40
 80015b6:	4818      	ldr	r0, [pc, #96]	@ (8001618 <main+0xa0>)
 80015b8:	f009 faf4 	bl	800aba4 <CDC_Receive_data>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <main+0xa4>)
 80015c2:	801a      	strh	r2, [r3, #0]
		  switch ((int)msg[0])
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <main+0xa0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b49      	cmp	r3, #73	@ 0x49
 80015ca:	d002      	beq.n	80015d2 <main+0x5a>
 80015cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80015ce:	d007      	beq.n	80015e0 <main+0x68>
 80015d0:	e00d      	b.n	80015ee <main+0x76>
		  {
		  	  case 'I':
		  		  command_I(msg, rx_usb_amount);
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <main+0xa4>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	480f      	ldr	r0, [pc, #60]	@ (8001618 <main+0xa0>)
 80015da:	f7ff ff27 	bl	800142c <command_I>
		  		  break;
 80015de:	e014      	b.n	800160a <main+0x92>
		  	  case 'O':
		  		  command_O(msg, rx_usb_amount);
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <main+0xa4>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	480c      	ldr	r0, [pc, #48]	@ (8001618 <main+0xa0>)
 80015e8:	f7ff ff7e 	bl	80014e8 <command_O>
		  		  break;
 80015ec:	e00d      	b.n	800160a <main+0x92>
		  	  default:
		  		  CDC_Transmit_FS("\nNo reconocido\n", 15);
 80015ee:	210f      	movs	r1, #15
 80015f0:	480b      	ldr	r0, [pc, #44]	@ (8001620 <main+0xa8>)
 80015f2:	f009 faa7 	bl	800ab44 <CDC_Transmit_FS>
		  		  while (CDC_Transmit_FS(msg, rx_usb_amount) == USBD_BUSY);
 80015f6:	bf00      	nop
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <main+0xa4>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <main+0xa0>)
 8001600:	f009 faa0 	bl	800ab44 <CDC_Transmit_FS>
 8001604:	4603      	mov	r3, r0
 8001606:	2b01      	cmp	r3, #1
 8001608:	d0f6      	beq.n	80015f8 <main+0x80>
	  if (CDC_data_recieved())
 800160a:	e7ce      	b.n	80015aa <main+0x32>
 800160c:	20000448 	.word	0x20000448
 8001610:	2000037c 	.word	0x2000037c
 8001614:	200003ac 	.word	0x200003ac
 8001618:	20000490 	.word	0x20000490
 800161c:	200004d0 	.word	0x200004d0
 8001620:	0800f0f8 	.word	0x0800f0f8

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	@ 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800162e:	2228      	movs	r2, #40	@ 0x28
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f00a feb3 	bl	800c39e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001658:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001662:	2301      	movs	r3, #1
 8001664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001666:	2302      	movs	r3, #2
 8001668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800166e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001670:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fbd2 	bl	8004e24 <HAL_RCC_OscConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001686:	f000 f9c7 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168a:	230f      	movs	r3, #15
 800168c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168e:	2302      	movs	r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800169a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2102      	movs	r1, #2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fe3e 	bl	8005328 <HAL_RCC_ClockConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016b2:	f000 f9b1 	bl	8001a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80016b6:	2312      	movs	r3, #18
 80016b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80016ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 ffa8 	bl	800561c <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80016d2:	f000 f9a1 	bl	8001a18 <Error_Handler>
  }
}
 80016d6:	bf00      	nop
 80016d8:	3750      	adds	r7, #80	@ 0x50
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_ADC1_Init+0x74>)
 80016f2:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <MX_ADC1_Init+0x78>)
 80016f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <MX_ADC1_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_ADC1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <MX_ADC1_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <MX_ADC1_Init+0x74>)
 800170a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800170e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001710:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <MX_ADC1_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <MX_ADC1_Init+0x74>)
 8001718:	2201      	movs	r2, #1
 800171a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171c:	480d      	ldr	r0, [pc, #52]	@ (8001754 <MX_ADC1_Init+0x74>)
 800171e:	f000 fc63 	bl	8001fe8 <HAL_ADC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001728:	f000 f976 	bl	8001a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800172c:	2306      	movs	r3, #6
 800172e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001730:	2301      	movs	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_ADC1_Init+0x74>)
 800173e:	f000 feb5 	bl	80024ac <HAL_ADC_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001748:	f000 f966 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000037c 	.word	0x2000037c
 8001758:	40012400 	.word	0x40012400

0800175c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 8001762:	4a16      	ldr	r2, [pc, #88]	@ (80017bc <MX_SPI1_Init+0x60>)
 8001764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 8001774:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001780:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 8001782:	2201      	movs	r2, #1
 8001784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178c:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 800179a:	2200      	movs	r2, #0
 800179c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 80017a0:	220a      	movs	r2, #10
 80017a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <MX_SPI1_Init+0x5c>)
 80017a6:	f004 f8a5 	bl	80058f4 <HAL_SPI_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80017b0:	f000 f932 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200003ac 	.word	0x200003ac
 80017bc:	40013000 	.word	0x40013000

080017c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08e      	sub	sp, #56	@ 0x38
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	f107 0320 	add.w	r3, r7, #32
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 80017f2:	4a2c      	ldr	r2, [pc, #176]	@ (80018a4 <MX_TIM3_Init+0xe4>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017f6:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 720;
 8001802:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 8001804:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8001808:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001810:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001816:	4822      	ldr	r0, [pc, #136]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 8001818:	f004 fbe9 	bl	8005fee <HAL_TIM_Base_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001822:	f000 f8f9 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800182c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001830:	4619      	mov	r1, r3
 8001832:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 8001834:	f004 fd44 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800183e:	f000 f8eb 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001842:	4817      	ldr	r0, [pc, #92]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 8001844:	f004 fc22 	bl	800608c <HAL_TIM_PWM_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800184e:	f000 f8e3 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001852:	2320      	movs	r3, #32
 8001854:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	4619      	mov	r1, r3
 8001860:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 8001862:	f005 f91f 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800186c:	f000 f8d4 	bl	8001a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001870:	2360      	movs	r3, #96	@ 0x60
 8001872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 180;
 8001874:	23b4      	movs	r3, #180	@ 0xb4
 8001876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <MX_TIM3_Init+0xe0>)
 8001888:	f004 fc58 	bl	800613c <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001892:	f000 f8c1 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3738      	adds	r7, #56	@ 0x38
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000448 	.word	0x20000448
 80018a4:	40000400 	.word	0x40000400

080018a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_DMA_Init+0x38>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <MX_DMA_Init+0x38>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6153      	str	r3, [r2, #20]
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_DMA_Init+0x38>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	200d      	movs	r0, #13
 80018cc:	f001 f911 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018d0:	200d      	movs	r0, #13
 80018d2:	f001 f92a 	bl	8002b2a <HAL_NVIC_EnableIRQ>

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f8:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <MX_GPIO_Init+0x124>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <MX_GPIO_Init+0x124>)
 80018fe:	f043 0320 	orr.w	r3, r3, #32
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b40      	ldr	r3, [pc, #256]	@ (8001a08 <MX_GPIO_Init+0x124>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b3d      	ldr	r3, [pc, #244]	@ (8001a08 <MX_GPIO_Init+0x124>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a3c      	ldr	r2, [pc, #240]	@ (8001a08 <MX_GPIO_Init+0x124>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <MX_GPIO_Init+0x124>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <MX_GPIO_Init+0x124>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a36      	ldr	r2, [pc, #216]	@ (8001a08 <MX_GPIO_Init+0x124>)
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <MX_GPIO_Init+0x124>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	210f      	movs	r1, #15
 8001944:	4831      	ldr	r0, [pc, #196]	@ (8001a0c <MX_GPIO_Init+0x128>)
 8001946:	f001 fcf5 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2140      	movs	r1, #64	@ 0x40
 800194e:	4830      	ldr	r0, [pc, #192]	@ (8001a10 <MX_GPIO_Init+0x12c>)
 8001950:	f001 fcf0 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001954:	230f      	movs	r3, #15
 8001956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4619      	mov	r1, r3
 800196a:	4828      	ldr	r0, [pc, #160]	@ (8001a0c <MX_GPIO_Init+0x128>)
 800196c:	f001 fb5e 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001970:	f44f 4372 	mov.w	r3, #61952	@ 0xf200
 8001974:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4619      	mov	r1, r3
 8001984:	4822      	ldr	r0, [pc, #136]	@ (8001a10 <MX_GPIO_Init+0x12c>)
 8001986:	f001 fb51 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800198a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800198e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001994:	2301      	movs	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	481b      	ldr	r0, [pc, #108]	@ (8001a0c <MX_GPIO_Init+0x128>)
 80019a0:	f001 fb44 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a4:	2340      	movs	r3, #64	@ 0x40
 80019a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	4815      	ldr	r0, [pc, #84]	@ (8001a10 <MX_GPIO_Init+0x12c>)
 80019bc:	f001 fb36 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	480e      	ldr	r0, [pc, #56]	@ (8001a10 <MX_GPIO_Init+0x12c>)
 80019d6:	f001 fb29 	bl	800302c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_GPIO_Init+0x130>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	4a06      	ldr	r2, [pc, #24]	@ (8001a14 <MX_GPIO_Init+0x130>)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80019fe:	bf00      	nop
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	40010c00 	.word	0x40010c00
 8001a14:	40010000 	.word	0x40010000

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <Error_Handler+0x8>

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_MspInit+0x5c>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <HAL_MspInit+0x5c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6193      	str	r3, [r2, #24]
 8001a36:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_MspInit+0x5c>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_MspInit+0x5c>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <HAL_MspInit+0x5c>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_MspInit+0x5c>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <HAL_MspInit+0x60>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <HAL_MspInit+0x60>)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000

08001a88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a18      	ldr	r2, [pc, #96]	@ (8001b04 <HAL_ADC_MspInit+0x7c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d129      	bne.n	8001afc <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aa8:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <HAL_ADC_MspInit+0x80>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a16      	ldr	r2, [pc, #88]	@ (8001b08 <HAL_ADC_MspInit+0x80>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <HAL_ADC_MspInit+0x80>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_ADC_MspInit+0x80>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a10      	ldr	r2, [pc, #64]	@ (8001b08 <HAL_ADC_MspInit+0x80>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_ADC_MspInit+0x80>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ad8:	2340      	movs	r3, #64	@ 0x40
 8001ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001adc:	2303      	movs	r3, #3
 8001ade:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4809      	ldr	r0, [pc, #36]	@ (8001b0c <HAL_ADC_MspInit+0x84>)
 8001ae8:	f001 faa0 	bl	800302c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	2012      	movs	r0, #18
 8001af2:	f000 fffe 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001af6:	2012      	movs	r0, #18
 8001af8:	f001 f817 	bl	8002b2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40012400 	.word	0x40012400
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010800 	.word	0x40010800

08001b10 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a47      	ldr	r2, [pc, #284]	@ (8001c48 <HAL_SPI_MspInit+0x138>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	f040 8087 	bne.w	8001c40 <HAL_SPI_MspInit+0x130>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b32:	4b46      	ldr	r3, [pc, #280]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4a45      	ldr	r2, [pc, #276]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b3c:	6193      	str	r3, [r2, #24]
 8001b3e:	4b43      	ldr	r3, [pc, #268]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6193      	str	r3, [r2, #24]
 8001b56:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	4b3a      	ldr	r3, [pc, #232]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4a39      	ldr	r2, [pc, #228]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	4b37      	ldr	r3, [pc, #220]	@ (8001c4c <HAL_SPI_MspInit+0x13c>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4830      	ldr	r0, [pc, #192]	@ (8001c50 <HAL_SPI_MspInit+0x140>)
 8001b90:	f001 fa4c 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b94:	2308      	movs	r3, #8
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	482b      	ldr	r0, [pc, #172]	@ (8001c54 <HAL_SPI_MspInit+0x144>)
 8001ba8:	f001 fa40 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bac:	2330      	movs	r3, #48	@ 0x30
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4825      	ldr	r0, [pc, #148]	@ (8001c54 <HAL_SPI_MspInit+0x144>)
 8001bc0:	f001 fa34 	bl	800302c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_SPI_MspInit+0x148>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bda:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_SPI_MspInit+0x148>)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001be2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c60 <HAL_SPI_MspInit+0x150>)
 8001be4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001be8:	2210      	movs	r2, #16
 8001bea:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_DISABLE;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bfe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001c02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c06:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c14:	4811      	ldr	r0, [pc, #68]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001c16:	f000 ffa3 	bl	8002b60 <HAL_DMA_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8001c20:	f7ff fefa 	bl	8001a18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001c28:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <HAL_SPI_MspInit+0x14c>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2023      	movs	r0, #35	@ 0x23
 8001c36:	f000 ff5c 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c3a:	2023      	movs	r0, #35	@ 0x23
 8001c3c:	f000 ff75 	bl	8002b2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	@ 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40013000 	.word	0x40013000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010800 	.word	0x40010800
 8001c54:	40010c00 	.word	0x40010c00
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	20000404 	.word	0x20000404
 8001c60:	40020030 	.word	0x40020030

08001c64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <HAL_TIM_Base_MspInit+0x34>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10b      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_TIM_Base_MspInit+0x38>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	@ (8001c9c <HAL_TIM_Base_MspInit+0x38>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_TIM_Base_MspInit+0x38>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 f95e 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <DMA1_Channel3_IRQHandler+0x10>)
 8001cfe:	f001 f861 	bl	8002dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000404 	.word	0x20000404

08001d0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <ADC1_2_IRQHandler+0x10>)
 8001d12:	f000 fb03 	bl	800231c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000037c 	.word	0x2000037c

08001d20 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d26:	f001 fc39 	bl	800359c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200011a8 	.word	0x200011a8

08001d34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <SPI1_IRQHandler+0x10>)
 8001d3a:	f003 ff11 	bl	8005b60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003ac 	.word	0x200003ac

08001d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <_kill>:

int _kill(int pid, int sig)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d60:	f00a fb7e 	bl	800c460 <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2216      	movs	r2, #22
 8001d68:	601a      	str	r2, [r3, #0]
  return -1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_exit>:

void _exit (int status)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d7e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffe7 	bl	8001d56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <_exit+0x12>

08001d8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e00a      	b.n	8001db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d9e:	f3af 8000 	nop.w
 8001da2:	4601      	mov	r1, r0
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf0      	blt.n	8001d9e <_read+0x12>
  }

  return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e009      	b.n	8001dec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf1      	blt.n	8001dd8 <_write+0x12>
  }
  return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_close>:

int _close(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e24:	605a      	str	r2, [r3, #4]
  return 0;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <_isatty>:

int _isatty(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f00a fae6 	bl	800c460 <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20005000 	.word	0x20005000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	200004d4 	.word	0x200004d4
 8001ec8:	200017f0 	.word	0x200017f0

08001ecc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ed8:	f7ff fff8 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480b      	ldr	r0, [pc, #44]	@ (8001f0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ede:	490c      	ldr	r1, [pc, #48]	@ (8001f10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ef4:	4c09      	ldr	r4, [pc, #36]	@ (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f02:	f00a fab3 	bl	800c46c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f06:	f7ff fb37 	bl	8001578 <main>
  bx lr
 8001f0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8001f14:	0800f5e0 	.word	0x0800f5e0
  ldr r2, =_sbss
 8001f18:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001f1c:	200017ec 	.word	0x200017ec

08001f20 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <CAN1_RX1_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_Init+0x28>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	@ (8001f4c <HAL_Init+0x28>)
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f000 fdd1 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3a:	200f      	movs	r0, #15
 8001f3c:	f000 f808 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f40:	f7ff fd70 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000

08001f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_InitTick+0x54>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <HAL_InitTick+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fde9 	bl	8002b46 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f8c:	f000 fdb1 	bl	8002af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	@ (8001fac <HAL_InitTick+0x5c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000004 	.word	0x20000004
 8001fa8:	2000000c 	.word	0x2000000c
 8001fac:	20000008 	.word	0x20000008

08001fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_IncTick+0x1c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_IncTick+0x20>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a03      	ldr	r2, [pc, #12]	@ (8001fd0 <HAL_IncTick+0x20>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	200004d8 	.word	0x200004d8

08001fd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	@ (8001fe4 <HAL_GetTick+0x10>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	200004d8 	.word	0x200004d8

08001fe8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0be      	b.n	8002188 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fd2e 	bl	8001a88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fb8f 	bl	8002750 <ADC_ConversionStop_Disable>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 8099 	bne.w	8002176 <HAL_ADC_Init+0x18e>
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8095 	bne.w	8002176 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002050:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002054:	f023 0302 	bic.w	r3, r3, #2
 8002058:	f043 0202 	orr.w	r2, r3, #2
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002068:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7b1b      	ldrb	r3, [r3, #12]
 800206e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002070:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4313      	orrs	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002080:	d003      	beq.n	800208a <HAL_ADC_Init+0xa2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_ADC_Init+0xa8>
 800208a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800208e:	e000      	b.n	8002092 <HAL_ADC_Init+0xaa>
 8002090:	2300      	movs	r3, #0
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7d1b      	ldrb	r3, [r3, #20]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d119      	bne.n	80020d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7b1b      	ldrb	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	035a      	lsls	r2, r3, #13
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e00b      	b.n	80020d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	f043 0220 	orr.w	r2, r3, #32
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_ADC_Init+0x1a8>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002104:	d003      	beq.n	800210e <HAL_ADC_Init+0x126>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d104      	bne.n	8002118 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	3b01      	subs	r3, #1
 8002114:	051b      	lsls	r3, r3, #20
 8002116:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	430a      	orrs	r2, r1
 800212a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <HAL_ADC_Init+0x1ac>)
 8002134:	4013      	ands	r3, r2
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d10b      	bne.n	8002154 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	f023 0303 	bic.w	r3, r3, #3
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002152:	e018      	b.n	8002186 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	f023 0312 	bic.w	r3, r3, #18
 800215c:	f043 0210 	orr.w	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002174:	e007      	b.n	8002186 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	f043 0210 	orr.w	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002186:	7dfb      	ldrb	r3, [r7, #23]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	ffe1f7fd 	.word	0xffe1f7fd
 8002194:	ff1f0efe 	.word	0xff1f0efe

08002198 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Start_IT+0x1a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e0a0      	b.n	80022f4 <HAL_ADC_Start_IT+0x15c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa6e 	bl	800269c <ADC_Enable>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 808f 	bne.w	80022ea <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a45      	ldr	r2, [pc, #276]	@ (80022fc <HAL_ADC_Start_IT+0x164>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_Start_IT+0x5e>
 80021ea:	4b45      	ldr	r3, [pc, #276]	@ (8002300 <HAL_ADC_Start_IT+0x168>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d115      	bne.n	8002222 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d026      	beq.n	800225e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002214:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002218:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002220:	e01d      	b.n	800225e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002226:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a33      	ldr	r2, [pc, #204]	@ (8002300 <HAL_ADC_Start_IT+0x168>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d004      	beq.n	8002242 <HAL_ADC_Start_IT+0xaa>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2f      	ldr	r2, [pc, #188]	@ (80022fc <HAL_ADC_Start_IT+0x164>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10d      	bne.n	800225e <HAL_ADC_Start_IT+0xc6>
 8002242:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <HAL_ADC_Start_IT+0x168>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002256:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	f023 0206 	bic.w	r2, r3, #6
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002276:	e002      	b.n	800227e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f06f 0202 	mvn.w	r2, #2
 800228e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022aa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022ae:	d113      	bne.n	80022d8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022b4:	4a11      	ldr	r2, [pc, #68]	@ (80022fc <HAL_ADC_Start_IT+0x164>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d105      	bne.n	80022c6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_ADC_Start_IT+0x168>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	e00c      	b.n	80022f2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	e003      	b.n	80022f2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40012800 	.word	0x40012800
 8002300:	40012400 	.word	0x40012400

08002304 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03e      	beq.n	80023bc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d039      	beq.n	80023bc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800236a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800236e:	d11d      	bne.n	80023ac <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002374:	2b00      	cmp	r3, #0
 8002376:	d119      	bne.n	80023ac <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0220 	bic.w	r2, r2, #32
 8002386:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7fe ff91 	bl	80012d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f06f 0212 	mvn.w	r2, #18
 80023ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d04d      	beq.n	8002462 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d048      	beq.n	8002462 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80023f2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80023f6:	d012      	beq.n	800241e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002402:	2b00      	cmp	r3, #0
 8002404:	d125      	bne.n	8002452 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002410:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002414:	d11d      	bne.n	8002452 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800242c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa6c 	bl	8002930 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 020c 	mvn.w	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00d      	beq.n	8002492 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f809 	bl	800249a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0201 	mvn.w	r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x20>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0dc      	b.n	8002686 <HAL_ADC_ConfigChannel+0x1da>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b06      	cmp	r3, #6
 80024da:	d81c      	bhi.n	8002516 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	3b05      	subs	r3, #5
 80024ee:	221f      	movs	r2, #31
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	4019      	ands	r1, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	3b05      	subs	r3, #5
 8002508:	fa00 f203 	lsl.w	r2, r0, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	635a      	str	r2, [r3, #52]	@ 0x34
 8002514:	e03c      	b.n	8002590 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d81c      	bhi.n	8002558 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b23      	subs	r3, #35	@ 0x23
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	4019      	ands	r1, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3b23      	subs	r3, #35	@ 0x23
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30
 8002556:	e01b      	b.n	8002590 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3b41      	subs	r3, #65	@ 0x41
 800256a:	221f      	movs	r2, #31
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	4019      	ands	r1, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b41      	subs	r3, #65	@ 0x41
 8002584:	fa00 f203 	lsl.w	r2, r0, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b09      	cmp	r3, #9
 8002596:	d91c      	bls.n	80025d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68d9      	ldr	r1, [r3, #12]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	3b1e      	subs	r3, #30
 80025aa:	2207      	movs	r2, #7
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	4019      	ands	r1, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6898      	ldr	r0, [r3, #8]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	3b1e      	subs	r3, #30
 80025c4:	fa00 f203 	lsl.w	r2, r0, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	e019      	b.n	8002606 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6919      	ldr	r1, [r3, #16]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	2207      	movs	r2, #7
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4019      	ands	r1, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6898      	ldr	r0, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b10      	cmp	r3, #16
 800260c:	d003      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002612:	2b11      	cmp	r3, #17
 8002614:	d132      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1d      	ldr	r2, [pc, #116]	@ (8002690 <HAL_ADC_ConfigChannel+0x1e4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d125      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d126      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800263c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d11a      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_ADC_ConfigChannel+0x1e8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a13      	ldr	r2, [pc, #76]	@ (8002698 <HAL_ADC_ConfigChannel+0x1ec>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	0c9a      	lsrs	r2, r3, #18
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800265c:	e002      	b.n	8002664 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	3b01      	subs	r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f9      	bne.n	800265e <HAL_ADC_ConfigChannel+0x1b2>
 800266a:	e007      	b.n	800267c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40012400 	.word	0x40012400
 8002694:	20000004 	.word	0x20000004
 8002698:	431bde83 	.word	0x431bde83

0800269c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d040      	beq.n	800273c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002748 <ADC_Enable+0xac>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1f      	ldr	r2, [pc, #124]	@ (800274c <ADC_Enable+0xb0>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	0c9b      	lsrs	r3, r3, #18
 80026d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026d8:	e002      	b.n	80026e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3b01      	subs	r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f9      	bne.n	80026da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026e6:	f7ff fc75 	bl	8001fd4 <HAL_GetTick>
 80026ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026ec:	e01f      	b.n	800272e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ee:	f7ff fc71 	bl	8001fd4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d918      	bls.n	800272e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d011      	beq.n	800272e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	f043 0210 	orr.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e007      	b.n	800273e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d1d8      	bne.n	80026ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000004 	.word	0x20000004
 800274c:	431bde83 	.word	0x431bde83

08002750 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d12e      	bne.n	80027c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800277a:	f7ff fc2b 	bl	8001fd4 <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002780:	e01b      	b.n	80027ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002782:	f7ff fc27 	bl	8001fd4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d914      	bls.n	80027ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10d      	bne.n	80027ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a2:	f043 0210 	orr.w	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d0dc      	beq.n	8002782 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e097      	b.n	8002922 <HAL_ADCEx_Calibration_Start+0x14e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffa8 	bl	8002750 <ADC_ConversionStop_Disable>
 8002800:	4603      	mov	r3, r0
 8002802:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff49 	bl	800269c <ADC_Enable>
 800280a:	4603      	mov	r3, r0
 800280c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 8081 	bne.w	8002918 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800281e:	f023 0302 	bic.w	r3, r3, #2
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800282a:	4b40      	ldr	r3, [pc, #256]	@ (800292c <HAL_ADCEx_Calibration_Start+0x158>)
 800282c:	681c      	ldr	r4, [r3, #0]
 800282e:	2002      	movs	r0, #2
 8002830:	f002 ffaa 	bl	8005788 <HAL_RCCEx_GetPeriphCLKFreq>
 8002834:	4603      	mov	r3, r0
 8002836:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800283a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800283c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800283e:	e002      	b.n	8002846 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3b01      	subs	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0208 	orr.w	r2, r2, #8
 800285a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800285c:	f7ff fbba 	bl	8001fd4 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002862:	e01b      	b.n	800289c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002864:	f7ff fbb6 	bl	8001fd4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b0a      	cmp	r3, #10
 8002870:	d914      	bls.n	800289c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	f023 0312 	bic.w	r3, r3, #18
 8002888:	f043 0210 	orr.w	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e042      	b.n	8002922 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1dc      	bne.n	8002864 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0204 	orr.w	r2, r2, #4
 80028b8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80028ba:	f7ff fb8b 	bl	8001fd4 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80028c0:	e01b      	b.n	80028fa <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028c2:	f7ff fb87 	bl	8001fd4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b0a      	cmp	r3, #10
 80028ce:	d914      	bls.n	80028fa <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	f023 0312 	bic.w	r3, r3, #18
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e013      	b.n	8002922 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1dc      	bne.n	80028c2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	f023 0303 	bic.w	r3, r3, #3
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
}
 8002922:	4618      	mov	r0, r3
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	bf00      	nop
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
	...

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	@ (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0b      	blt.n	80029d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4906      	ldr	r1, [pc, #24]	@ (80029dc <__NVIC_EnableIRQ+0x34>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	e000e100 	.word	0xe000e100

080029e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	@ (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	@ (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	@ 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf28      	it	cs
 8002a52:	2304      	movcs	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d902      	bls.n	8002a64 <NVIC_EncodePriority+0x30>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b03      	subs	r3, #3
 8002a62:	e000      	b.n	8002a66 <NVIC_EncodePriority+0x32>
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	401a      	ands	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	4313      	orrs	r3, r2
         );
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	@ 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002abc:	f7ff ff90 	bl	80029e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff2d 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b04:	f7ff ff42 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff90 	bl	8002a34 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5f 	bl	80029e0 <__NVIC_SetPriority>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff35 	bl	80029a8 <__NVIC_EnableIRQ>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa2 	bl	8002a98 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e043      	b.n	8002bfe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b22      	ldr	r3, [pc, #136]	@ (8002c08 <HAL_DMA_Init+0xa8>)
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a22      	ldr	r2, [pc, #136]	@ (8002c0c <HAL_DMA_Init+0xac>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	009a      	lsls	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	@ (8002c10 <HAL_DMA_Init+0xb0>)
 8002b92:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002baa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002bae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	bffdfff8 	.word	0xbffdfff8
 8002c0c:	cccccccd 	.word	0xcccccccd
 8002c10:	40020000 	.word	0x40020000

08002c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_Start_IT+0x20>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e04b      	b.n	8002ccc <HAL_DMA_Start_IT+0xb8>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d13a      	bne.n	8002cbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f9af 	bl	8002fd0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 020e 	orr.w	r2, r2, #14
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e00f      	b.n	8002cac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 020a 	orr.w	r2, r2, #10
 8002caa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e005      	b.n	8002cca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d005      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e051      	b.n	8002d9c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 020e 	bic.w	r2, r2, #14
 8002d06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	@ (8002da8 <HAL_DMA_Abort_IT+0xd4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d029      	beq.n	8002d76 <HAL_DMA_Abort_IT+0xa2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a21      	ldr	r2, [pc, #132]	@ (8002dac <HAL_DMA_Abort_IT+0xd8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x9e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1f      	ldr	r2, [pc, #124]	@ (8002db0 <HAL_DMA_Abort_IT+0xdc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01a      	beq.n	8002d6c <HAL_DMA_Abort_IT+0x98>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_DMA_Abort_IT+0xe0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d012      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x92>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <HAL_DMA_Abort_IT+0xe4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00a      	beq.n	8002d60 <HAL_DMA_Abort_IT+0x8c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dbc <HAL_DMA_Abort_IT+0xe8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d102      	bne.n	8002d5a <HAL_DMA_Abort_IT+0x86>
 8002d54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d58:	e00e      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d5e:	e00b      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d64:	e008      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d6a:	e005      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d70:	e002      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d72:	2310      	movs	r3, #16
 8002d74:	e000      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d76:	2301      	movs	r3, #1
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <HAL_DMA_Abort_IT+0xec>)
 8002d7a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
    } 
  }
  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40020008 	.word	0x40020008
 8002dac:	4002001c 	.word	0x4002001c
 8002db0:	40020030 	.word	0x40020030
 8002db4:	40020044 	.word	0x40020044
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	4002006c 	.word	0x4002006c
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	2204      	movs	r2, #4
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d04f      	beq.n	8002e8c <HAL_DMA_IRQHandler+0xc8>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d04a      	beq.n	8002e8c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0204 	bic.w	r2, r2, #4
 8002e12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a66      	ldr	r2, [pc, #408]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d029      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xae>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a65      	ldr	r2, [pc, #404]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xaa>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a63      	ldr	r2, [pc, #396]	@ (8002fbc <HAL_DMA_IRQHandler+0x1f8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01a      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xa4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a62      	ldr	r2, [pc, #392]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1fc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d012      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x9e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a60      	ldr	r2, [pc, #384]	@ (8002fc4 <HAL_DMA_IRQHandler+0x200>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00a      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x98>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fc8 <HAL_DMA_IRQHandler+0x204>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d102      	bne.n	8002e56 <HAL_DMA_IRQHandler+0x92>
 8002e50:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e54:	e00e      	b.n	8002e74 <HAL_DMA_IRQHandler+0xb0>
 8002e56:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e5a:	e00b      	b.n	8002e74 <HAL_DMA_IRQHandler+0xb0>
 8002e5c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e60:	e008      	b.n	8002e74 <HAL_DMA_IRQHandler+0xb0>
 8002e62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e66:	e005      	b.n	8002e74 <HAL_DMA_IRQHandler+0xb0>
 8002e68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e6c:	e002      	b.n	8002e74 <HAL_DMA_IRQHandler+0xb0>
 8002e6e:	2340      	movs	r3, #64	@ 0x40
 8002e70:	e000      	b.n	8002e74 <HAL_DMA_IRQHandler+0xb0>
 8002e72:	2304      	movs	r3, #4
 8002e74:	4a55      	ldr	r2, [pc, #340]	@ (8002fcc <HAL_DMA_IRQHandler+0x208>)
 8002e76:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8094 	beq.w	8002faa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e8a:	e08e      	b.n	8002faa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	2202      	movs	r2, #2
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d056      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x186>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d051      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020a 	bic.w	r2, r2, #10
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a38      	ldr	r2, [pc, #224]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d029      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x166>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a37      	ldr	r2, [pc, #220]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1f4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d022      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x162>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a35      	ldr	r2, [pc, #212]	@ (8002fbc <HAL_DMA_IRQHandler+0x1f8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01a      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x15c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a34      	ldr	r2, [pc, #208]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1fc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d012      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x156>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a32      	ldr	r2, [pc, #200]	@ (8002fc4 <HAL_DMA_IRQHandler+0x200>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00a      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x150>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a31      	ldr	r2, [pc, #196]	@ (8002fc8 <HAL_DMA_IRQHandler+0x204>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d102      	bne.n	8002f0e <HAL_DMA_IRQHandler+0x14a>
 8002f08:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f0c:	e00e      	b.n	8002f2c <HAL_DMA_IRQHandler+0x168>
 8002f0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f12:	e00b      	b.n	8002f2c <HAL_DMA_IRQHandler+0x168>
 8002f14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f18:	e008      	b.n	8002f2c <HAL_DMA_IRQHandler+0x168>
 8002f1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f1e:	e005      	b.n	8002f2c <HAL_DMA_IRQHandler+0x168>
 8002f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f24:	e002      	b.n	8002f2c <HAL_DMA_IRQHandler+0x168>
 8002f26:	2320      	movs	r3, #32
 8002f28:	e000      	b.n	8002f2c <HAL_DMA_IRQHandler+0x168>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	4a27      	ldr	r2, [pc, #156]	@ (8002fcc <HAL_DMA_IRQHandler+0x208>)
 8002f2e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d034      	beq.n	8002faa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f48:	e02f      	b.n	8002faa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2208      	movs	r2, #8
 8002f50:	409a      	lsls	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d028      	beq.n	8002fac <HAL_DMA_IRQHandler+0x1e8>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d023      	beq.n	8002fac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 020e 	bic.w	r2, r2, #14
 8002f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
    }
  }
  return;
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
}
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40020008 	.word	0x40020008
 8002fb8:	4002001c 	.word	0x4002001c
 8002fbc:	40020030 	.word	0x40020030
 8002fc0:	40020044 	.word	0x40020044
 8002fc4:	40020058 	.word	0x40020058
 8002fc8:	4002006c 	.word	0x4002006c
 8002fcc:	40020000 	.word	0x40020000

08002fd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d108      	bne.n	8003010 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800300e:	e007      	b.n	8003020 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
	...

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b08b      	sub	sp, #44	@ 0x2c
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	e169      	b.n	8003314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003040:	2201      	movs	r2, #1
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	429a      	cmp	r2, r3
 800305a:	f040 8158 	bne.w	800330e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a9a      	ldr	r2, [pc, #616]	@ (80032cc <HAL_GPIO_Init+0x2a0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d05e      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 8003068:	4a98      	ldr	r2, [pc, #608]	@ (80032cc <HAL_GPIO_Init+0x2a0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d875      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 800306e:	4a98      	ldr	r2, [pc, #608]	@ (80032d0 <HAL_GPIO_Init+0x2a4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d058      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 8003074:	4a96      	ldr	r2, [pc, #600]	@ (80032d0 <HAL_GPIO_Init+0x2a4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d86f      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 800307a:	4a96      	ldr	r2, [pc, #600]	@ (80032d4 <HAL_GPIO_Init+0x2a8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d052      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 8003080:	4a94      	ldr	r2, [pc, #592]	@ (80032d4 <HAL_GPIO_Init+0x2a8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d869      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 8003086:	4a94      	ldr	r2, [pc, #592]	@ (80032d8 <HAL_GPIO_Init+0x2ac>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d04c      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 800308c:	4a92      	ldr	r2, [pc, #584]	@ (80032d8 <HAL_GPIO_Init+0x2ac>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d863      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 8003092:	4a92      	ldr	r2, [pc, #584]	@ (80032dc <HAL_GPIO_Init+0x2b0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d046      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 8003098:	4a90      	ldr	r2, [pc, #576]	@ (80032dc <HAL_GPIO_Init+0x2b0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d85d      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 800309e:	2b12      	cmp	r3, #18
 80030a0:	d82a      	bhi.n	80030f8 <HAL_GPIO_Init+0xcc>
 80030a2:	2b12      	cmp	r3, #18
 80030a4:	d859      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <HAL_GPIO_Init+0x80>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	08003127 	.word	0x08003127
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003113 	.word	0x08003113
 80030b8:	08003155 	.word	0x08003155
 80030bc:	0800315b 	.word	0x0800315b
 80030c0:	0800315b 	.word	0x0800315b
 80030c4:	0800315b 	.word	0x0800315b
 80030c8:	0800315b 	.word	0x0800315b
 80030cc:	0800315b 	.word	0x0800315b
 80030d0:	0800315b 	.word	0x0800315b
 80030d4:	0800315b 	.word	0x0800315b
 80030d8:	0800315b 	.word	0x0800315b
 80030dc:	0800315b 	.word	0x0800315b
 80030e0:	0800315b 	.word	0x0800315b
 80030e4:	0800315b 	.word	0x0800315b
 80030e8:	0800315b 	.word	0x0800315b
 80030ec:	0800315b 	.word	0x0800315b
 80030f0:	08003109 	.word	0x08003109
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	4a79      	ldr	r2, [pc, #484]	@ (80032e0 <HAL_GPIO_Init+0x2b4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030fe:	e02c      	b.n	800315a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	623b      	str	r3, [r7, #32]
          break;
 8003106:	e029      	b.n	800315c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	3304      	adds	r3, #4
 800310e:	623b      	str	r3, [r7, #32]
          break;
 8003110:	e024      	b.n	800315c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	3308      	adds	r3, #8
 8003118:	623b      	str	r3, [r7, #32]
          break;
 800311a:	e01f      	b.n	800315c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	330c      	adds	r3, #12
 8003122:	623b      	str	r3, [r7, #32]
          break;
 8003124:	e01a      	b.n	800315c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800312e:	2304      	movs	r3, #4
 8003130:	623b      	str	r3, [r7, #32]
          break;
 8003132:	e013      	b.n	800315c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800313c:	2308      	movs	r3, #8
 800313e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	611a      	str	r2, [r3, #16]
          break;
 8003146:	e009      	b.n	800315c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003148:	2308      	movs	r3, #8
 800314a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	615a      	str	r2, [r3, #20]
          break;
 8003152:	e003      	b.n	800315c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
          break;
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x130>
          break;
 800315a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2bff      	cmp	r3, #255	@ 0xff
 8003160:	d801      	bhi.n	8003166 <HAL_GPIO_Init+0x13a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	e001      	b.n	800316a <HAL_GPIO_Init+0x13e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2bff      	cmp	r3, #255	@ 0xff
 8003170:	d802      	bhi.n	8003178 <HAL_GPIO_Init+0x14c>
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	e002      	b.n	800317e <HAL_GPIO_Init+0x152>
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	3b08      	subs	r3, #8
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	210f      	movs	r1, #15
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	6a39      	ldr	r1, [r7, #32]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	431a      	orrs	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80b1 	beq.w	800330e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031ac:	4b4d      	ldr	r3, [pc, #308]	@ (80032e4 <HAL_GPIO_Init+0x2b8>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	4a4c      	ldr	r2, [pc, #304]	@ (80032e4 <HAL_GPIO_Init+0x2b8>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6193      	str	r3, [r2, #24]
 80031b8:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <HAL_GPIO_Init+0x2b8>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031c4:	4a48      	ldr	r2, [pc, #288]	@ (80032e8 <HAL_GPIO_Init+0x2bc>)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	3302      	adds	r3, #2
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	220f      	movs	r2, #15
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a40      	ldr	r2, [pc, #256]	@ (80032ec <HAL_GPIO_Init+0x2c0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_GPIO_Init+0x1ec>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3f      	ldr	r2, [pc, #252]	@ (80032f0 <HAL_GPIO_Init+0x2c4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00d      	beq.n	8003214 <HAL_GPIO_Init+0x1e8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3e      	ldr	r2, [pc, #248]	@ (80032f4 <HAL_GPIO_Init+0x2c8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <HAL_GPIO_Init+0x1e4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3d      	ldr	r2, [pc, #244]	@ (80032f8 <HAL_GPIO_Init+0x2cc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_GPIO_Init+0x1e0>
 8003208:	2303      	movs	r3, #3
 800320a:	e006      	b.n	800321a <HAL_GPIO_Init+0x1ee>
 800320c:	2304      	movs	r3, #4
 800320e:	e004      	b.n	800321a <HAL_GPIO_Init+0x1ee>
 8003210:	2302      	movs	r3, #2
 8003212:	e002      	b.n	800321a <HAL_GPIO_Init+0x1ee>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_GPIO_Init+0x1ee>
 8003218:	2300      	movs	r3, #0
 800321a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321c:	f002 0203 	and.w	r2, r2, #3
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	4093      	lsls	r3, r2
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800322a:	492f      	ldr	r1, [pc, #188]	@ (80032e8 <HAL_GPIO_Init+0x2bc>)
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d006      	beq.n	8003252 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003244:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	492c      	ldr	r1, [pc, #176]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003252:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	43db      	mvns	r3, r3
 800325a:	4928      	ldr	r1, [pc, #160]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800325c:	4013      	ands	r3, r2
 800325e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800326c:	4b23      	ldr	r3, [pc, #140]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4922      	ldr	r1, [pc, #136]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
 8003278:	e006      	b.n	8003288 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800327a:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	43db      	mvns	r3, r3
 8003282:	491e      	ldr	r1, [pc, #120]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003284:	4013      	ands	r3, r2
 8003286:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4918      	ldr	r1, [pc, #96]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032a2:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	4914      	ldr	r1, [pc, #80]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d021      	beq.n	8003300 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032bc:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	490e      	ldr	r1, [pc, #56]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
 80032c8:	e021      	b.n	800330e <HAL_GPIO_Init+0x2e2>
 80032ca:	bf00      	nop
 80032cc:	10320000 	.word	0x10320000
 80032d0:	10310000 	.word	0x10310000
 80032d4:	10220000 	.word	0x10220000
 80032d8:	10210000 	.word	0x10210000
 80032dc:	10120000 	.word	0x10120000
 80032e0:	10110000 	.word	0x10110000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40010800 	.word	0x40010800
 80032f0:	40010c00 	.word	0x40010c00
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40011400 	.word	0x40011400
 80032fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_GPIO_Init+0x304>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	43db      	mvns	r3, r3
 8003308:	4909      	ldr	r1, [pc, #36]	@ (8003330 <HAL_GPIO_Init+0x304>)
 800330a:	4013      	ands	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	3301      	adds	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	f47f ae8e 	bne.w	8003040 <HAL_GPIO_Init+0x14>
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	372c      	adds	r7, #44	@ 0x2c
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40010400 	.word	0x40010400

08003334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
 8003340:	4613      	mov	r3, r2
 8003342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003344:	787b      	ldrb	r3, [r7, #1]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003350:	e003      	b.n	800335a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003352:	887b      	ldrh	r3, [r7, #2]
 8003354:	041a      	lsls	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0e8      	b.n	8003548 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f007 fd48 	bl	800ae20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2203      	movs	r2, #3
 8003394:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f003 fc23 	bl	8006bee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b2:	f003 fbf9 	bl	8006ba8 <USB_CoreInit>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0bf      	b.n	8003548 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fc27 	bl	8006c22 <USB_SetCurrentMode>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0b0      	b.n	8003548 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	e03e      	b.n	800346a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	3311      	adds	r3, #17
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	3310      	adds	r3, #16
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	3313      	adds	r3, #19
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	3320      	adds	r3, #32
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	3324      	adds	r3, #36	@ 0x24
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	3301      	adds	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	791b      	ldrb	r3, [r3, #4]
 800346e:	7bfa      	ldrb	r2, [r7, #15]
 8003470:	429a      	cmp	r2, r3
 8003472:	d3bb      	bcc.n	80033ec <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e044      	b.n	8003504 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	3301      	adds	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	791b      	ldrb	r3, [r3, #4]
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	429a      	cmp	r2, r3
 800350c:	d3b5      	bcc.n	800347a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003518:	f003 fb8f 	bl	8006c3a <USB_DevInit>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e00c      	b.n	8003548 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f005 fe0e 	bl	8009162 <USB_DevDisconnect>

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_PCD_Start+0x16>
 8003562:	2302      	movs	r3, #2
 8003564:	e016      	b.n	8003594 <HAL_PCD_Start+0x44>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f003 fb25 	bl	8006bc2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003578:	2101      	movs	r1, #1
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f007 fec3 	bl	800b306 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f005 fde2 	bl	800914e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f005 fde4 	bl	8009176 <USB_ReadInterrupts>
 80035ae:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fb1a 	bl	8003bf4 <PCD_EP_ISR_Handler>

    return;
 80035c0:	e119      	b.n	80037f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035de:	b292      	uxth	r2, r2
 80035e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f007 fc96 	bl	800af16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035ea:	2100      	movs	r1, #0
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f905 	bl	80037fc <HAL_PCD_SetAddress>

    return;
 80035f2:	e100      	b.n	80037f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003606:	b29a      	uxth	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003610:	b292      	uxth	r2, r2
 8003612:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003616:	e0ee      	b.n	80037f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003634:	b292      	uxth	r2, r2
 8003636:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800363a:	e0dc      	b.n	80037f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d027      	beq.n	8003696 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0204 	bic.w	r2, r2, #4
 8003658:	b292      	uxth	r2, r2
 800365a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0208 	bic.w	r2, r2, #8
 8003670:	b292      	uxth	r2, r2
 8003672:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f007 fc86 	bl	800af88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003684:	b29a      	uxth	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800368e:	b292      	uxth	r2, r2
 8003690:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003694:	e0af      	b.n	80037f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8083 	beq.w	80037a8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e010      	b.n	80036ca <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	7ffb      	ldrb	r3, [r7, #31]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	7ffb      	ldrb	r3, [r7, #31]
 80036b6:	8812      	ldrh	r2, [r2, #0]
 80036b8:	b292      	uxth	r2, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	3320      	adds	r3, #32
 80036be:	443b      	add	r3, r7
 80036c0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80036c4:	7ffb      	ldrb	r3, [r7, #31]
 80036c6:	3301      	adds	r3, #1
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	7ffb      	ldrb	r3, [r7, #31]
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	d9eb      	bls.n	80036a8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	b292      	uxth	r2, r2
 80036e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	b292      	uxth	r2, r2
 80036fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003700:	bf00      	nop
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800370a:	b29b      	uxth	r3, r3
 800370c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f6      	beq.n	8003702 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800371c:	b29a      	uxth	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003726:	b292      	uxth	r2, r2
 8003728:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e00f      	b.n	8003752 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003732:	7ffb      	ldrb	r3, [r7, #31]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	4611      	mov	r1, r2
 800373a:	7ffa      	ldrb	r2, [r7, #31]
 800373c:	0092      	lsls	r2, r2, #2
 800373e:	440a      	add	r2, r1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	3320      	adds	r3, #32
 8003744:	443b      	add	r3, r7
 8003746:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800374a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800374c:	7ffb      	ldrb	r3, [r7, #31]
 800374e:	3301      	adds	r3, #1
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	7ffb      	ldrb	r3, [r7, #31]
 8003754:	2b07      	cmp	r3, #7
 8003756:	d9ec      	bls.n	8003732 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	b292      	uxth	r2, r2
 800376c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003782:	b292      	uxth	r2, r2
 8003784:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0204 	orr.w	r2, r2, #4
 800379a:	b292      	uxth	r2, r2
 800379c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f007 fbd7 	bl	800af54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037a6:	e026      	b.n	80037f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00f      	beq.n	80037d2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037c4:	b292      	uxth	r2, r2
 80037c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f007 fb95 	bl	800aefa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037d0:	e011      	b.n	80037f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037ee:	b292      	uxth	r2, r2
 80037f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037f4:	bf00      	nop
  }
}
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_PCD_SetAddress+0x1a>
 8003812:	2302      	movs	r3, #2
 8003814:	e012      	b.n	800383c <HAL_PCD_SetAddress+0x40>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f005 fc7b 	bl	8009128 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	461a      	mov	r2, r3
 8003852:	4603      	mov	r3, r0
 8003854:	70fb      	strb	r3, [r7, #3]
 8003856:	460b      	mov	r3, r1
 8003858:	803b      	strh	r3, [r7, #0]
 800385a:	4613      	mov	r3, r2
 800385c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003866:	2b00      	cmp	r3, #0
 8003868:	da0e      	bge.n	8003888 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 0207 	and.w	r2, r3, #7
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	3310      	adds	r3, #16
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	705a      	strb	r2, [r3, #1]
 8003886:	e00e      	b.n	80038a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	f003 0207 	and.w	r2, r3, #7
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038b2:	883a      	ldrh	r2, [r7, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	78ba      	ldrb	r2, [r7, #2]
 80038bc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038be:	78bb      	ldrb	r3, [r7, #2]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d102      	bne.n	80038ca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_PCD_EP_Open+0x94>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e00e      	b.n	80038f6 <HAL_PCD_EP_Open+0xb2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68f9      	ldr	r1, [r7, #12]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 f9c4 	bl	8006c74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80038f4:	7afb      	ldrb	r3, [r7, #11]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800390a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390e:	2b00      	cmp	r3, #0
 8003910:	da0e      	bge.n	8003930 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 0207 	and.w	r2, r3, #7
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	3310      	adds	r3, #16
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
 800392e:	e00e      	b.n	800394e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 0207 	and.w	r2, r3, #7
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_PCD_EP_Close+0x6a>
 8003964:	2302      	movs	r3, #2
 8003966:	e00e      	b.n	8003986 <HAL_PCD_EP_Close+0x88>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f003 fd3c 	bl	80073f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	460b      	mov	r3, r1
 800399c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	f003 0207 	and.w	r2, r3, #7
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2200      	movs	r2, #0
 80039cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ce:	7afb      	ldrb	r3, [r7, #11]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6979      	ldr	r1, [r7, #20]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f003 fef3 	bl	80077cc <USB_EPStartXfer>

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 0207 	and.w	r2, r3, #7
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	f003 0207 	and.w	r2, r3, #7
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2201      	movs	r2, #1
 8003a68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6979      	ldr	r1, [r7, #20]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 fea5 	bl	80077cc <USB_EPStartXfer>

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	7912      	ldrb	r2, [r2, #4]
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e04c      	b.n	8003b44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	da0e      	bge.n	8003ad0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 0207 	and.w	r2, r3, #7
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	3310      	adds	r3, #16
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	705a      	strb	r2, [r3, #1]
 8003ace:	e00c      	b.n	8003aea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_PCD_EP_SetStall+0x7e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e01c      	b.n	8003b44 <HAL_PCD_EP_SetStall+0xb8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68f9      	ldr	r1, [r7, #12]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f005 fa08 	bl	8008f2e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f005 fb2d 	bl	8009194 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	7912      	ldrb	r2, [r2, #4]
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e040      	b.n	8003bec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da0e      	bge.n	8003b90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 0207 	and.w	r2, r3, #7
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	3310      	adds	r3, #16
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	705a      	strb	r2, [r3, #1]
 8003b8e:	e00e      	b.n	8003bae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 0207 	and.w	r2, r3, #7
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_PCD_EP_ClrStall+0x82>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e00e      	b.n	8003bec <HAL_PCD_EP_ClrStall+0xa0>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f005 f9f6 	bl	8008fce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b096      	sub	sp, #88	@ 0x58
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bfc:	e3bb      	b.n	8004376 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003c18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 8175 	bne.w	8003f0c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d14e      	bne.n	8003ccc <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	81fb      	strh	r3, [r7, #14]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	89fb      	ldrh	r3, [r7, #14]
 8003c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3310      	adds	r3, #16
 8003c56:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	441a      	add	r2, r3
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c90:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c92:	2100      	movs	r1, #0
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f007 f916 	bl	800aec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	7b5b      	ldrb	r3, [r3, #13]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8368 	beq.w	8004376 <PCD_EP_ISR_Handler+0x782>
 8003ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 8363 	bne.w	8004376 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7b5b      	ldrb	r3, [r3, #13]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	735a      	strb	r2, [r3, #13]
 8003cca:	e354      	b.n	8004376 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cd2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003cde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d034      	beq.n	8003d54 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3306      	adds	r3, #6
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d14:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d22:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d26:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f005 fa84 	bl	8009236 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	823b      	strh	r3, [r7, #16]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	8a3a      	ldrh	r2, [r7, #16]
 8003d44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f007 f88d 	bl	800ae6c <HAL_PCD_SetupStageCallback>
 8003d52:	e310      	b.n	8004376 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d54:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f280 830c 	bge.w	8004376 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	83fb      	strh	r3, [r7, #30]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	8bfa      	ldrh	r2, [r7, #30]
 8003d74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d78:	b292      	uxth	r2, r2
 8003d7a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3306      	adds	r3, #6
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d019      	beq.n	8003de4 <PCD_EP_ISR_Handler+0x1f0>
 8003db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	6959      	ldr	r1, [r3, #20]
 8003dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f005 fa34 	bl	8009236 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	441a      	add	r2, r3
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dda:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f007 f856 	bl	800ae90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003dee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f040 82bd 	bne.w	8004376 <PCD_EP_ISR_Handler+0x782>
 8003dfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e00:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e08:	f000 82b5 	beq.w	8004376 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	4413      	add	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e42:	d91d      	bls.n	8003e80 <PCD_EP_ISR_Handler+0x28c>
 8003e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <PCD_EP_ISR_Handler+0x26a>
 8003e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	801a      	strh	r2, [r3, #0]
 8003e7e:	e026      	b.n	8003ece <PCD_EP_ISR_Handler+0x2da>
 8003e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <PCD_EP_ISR_Handler+0x2aa>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e017      	b.n	8003ece <PCD_EP_ISR_Handler+0x2da>
 8003e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <PCD_EP_ISR_Handler+0x2c4>
 8003eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	827b      	strh	r3, [r7, #18]
 8003ee0:	8a7b      	ldrh	r3, [r7, #18]
 8003ee2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003ee6:	827b      	strh	r3, [r7, #18]
 8003ee8:	8a7b      	ldrh	r3, [r7, #18]
 8003eea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003eee:	827b      	strh	r3, [r7, #18]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	8a7b      	ldrh	r3, [r7, #18]
 8003ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	8013      	strh	r3, [r2, #0]
 8003f0a:	e234      	b.n	8004376 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f20:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f280 80fc 	bge.w	8004122 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f40:	4013      	ands	r3, r2
 8003f42:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003f58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f60:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f78:	7b1b      	ldrb	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d125      	bne.n	8003fca <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	3306      	adds	r3, #6
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003faa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8092 	beq.w	80040d8 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fba:	6959      	ldr	r1, [r3, #20]
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbe:	88da      	ldrh	r2, [r3, #6]
 8003fc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fc4:	f005 f937 	bl	8009236 <USB_ReadPMA>
 8003fc8:	e086      	b.n	80040d8 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fcc:	78db      	ldrb	r3, [r3, #3]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d10a      	bne.n	8003fe8 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003fd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9d9 	bl	8004392 <HAL_PCD_EP_DB_Receive>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003fe6:	e077      	b.n	80040d8 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004002:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	441a      	add	r2, r3
 8004014:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800401c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004028:	b29b      	uxth	r3, r3
 800402a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d024      	beq.n	8004090 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404e:	b29b      	uxth	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	3302      	adds	r3, #2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004072:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	d02e      	beq.n	80040d8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004080:	6959      	ldr	r1, [r3, #20]
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	891a      	ldrh	r2, [r3, #8]
 8004086:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800408a:	f005 f8d4 	bl	8009236 <USB_ReadPMA>
 800408e:	e023      	b.n	80040d8 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	3306      	adds	r3, #6
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80040bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ca:	6959      	ldr	r1, [r3, #20]
 80040cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ce:	895a      	ldrh	r2, [r3, #10]
 80040d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040d4:	f005 f8af 	bl	8009236 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80040d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040e0:	441a      	add	r2, r3
 80040e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80040e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040ee:	441a      	add	r2, r3
 80040f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80040f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <PCD_EP_ISR_Handler+0x514>
 80040fc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	429a      	cmp	r2, r3
 8004106:	d206      	bcs.n	8004116 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f006 febe 	bl	800ae90 <HAL_PCD_DataOutStageCallback>
 8004114:	e005      	b.n	8004122 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800411c:	4618      	mov	r0, r3
 800411e:	f003 fb55 	bl	80077cc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004122:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8123 	beq.w	8004376 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004130:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	3310      	adds	r3, #16
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800415a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	441a      	add	r2, r3
 8004170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417c:	b29b      	uxth	r3, r3
 800417e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004182:	78db      	ldrb	r3, [r3, #3]
 8004184:	2b01      	cmp	r3, #1
 8004186:	f040 80a2 	bne.w	80042ce <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004192:	7b1b      	ldrb	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8093 	beq.w	80042c0 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800419a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d046      	beq.n	8004234 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a8:	785b      	ldrb	r3, [r3, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d126      	bne.n	80041fc <PCD_EP_ISR_Handler+0x608>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041bc:	b29b      	uxth	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	4413      	add	r3, r2
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	011a      	lsls	r2, r3, #4
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	4413      	add	r3, r2
 80041d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	e061      	b.n	80042c0 <PCD_EP_ISR_Handler+0x6cc>
 80041fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d15d      	bne.n	80042c0 <PCD_EP_ISR_Handler+0x6cc>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004212:	b29b      	uxth	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	4413      	add	r3, r2
 800421a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800421c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	011a      	lsls	r2, r3, #4
 8004222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004224:	4413      	add	r3, r2
 8004226:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800422c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422e:	2200      	movs	r2, #0
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	e045      	b.n	80042c0 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d126      	bne.n	8004290 <PCD_EP_ISR_Handler+0x69c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004250:	b29b      	uxth	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	4413      	add	r3, r2
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
 800425a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	011a      	lsls	r2, r3, #4
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	4413      	add	r3, r2
 8004264:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004268:	633b      	str	r3, [r7, #48]	@ 0x30
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004274:	b29a      	uxth	r2, r3
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004288:	b29a      	uxth	r2, r3
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	e017      	b.n	80042c0 <PCD_EP_ISR_Handler+0x6cc>
 8004290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d113      	bne.n	80042c0 <PCD_EP_ISR_Handler+0x6cc>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a6:	4413      	add	r3, r2
 80042a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	011a      	lsls	r2, r3, #4
 80042b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b2:	4413      	add	r3, r2
 80042b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	2200      	movs	r2, #0
 80042be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f006 fdfd 	bl	800aec6 <HAL_PCD_DataInStageCallback>
 80042cc:	e053      	b.n	8004376 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80042ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d146      	bne.n	8004368 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	3302      	adds	r3, #2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004302:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800430e:	429a      	cmp	r2, r3
 8004310:	d907      	bls.n	8004322 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800431a:	1ad2      	subs	r2, r2, r3
 800431c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431e:	619a      	str	r2, [r3, #24]
 8004320:	e002      	b.n	8004328 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004324:	2200      	movs	r2, #0
 8004326:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f006 fdc5 	bl	800aec6 <HAL_PCD_DataInStageCallback>
 800433c:	e01b      	b.n	8004376 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800433e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004346:	441a      	add	r2, r3
 8004348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800434c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004354:	441a      	add	r2, r3
 8004356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004358:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004360:	4618      	mov	r0, r3
 8004362:	f003 fa33 	bl	80077cc <USB_EPStartXfer>
 8004366:	e006      	b.n	8004376 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004368:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800436c:	461a      	mov	r2, r3
 800436e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f91b 	bl	80045ac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800437e:	b29b      	uxth	r3, r3
 8004380:	b21b      	sxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	f6ff ac3b 	blt.w	8003bfe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3758      	adds	r7, #88	@ 0x58
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b088      	sub	sp, #32
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d07e      	beq.n	80044a8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	3302      	adds	r3, #2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	8b7b      	ldrh	r3, [r7, #26]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d306      	bcc.n	80043ec <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	8b7b      	ldrh	r3, [r7, #26]
 80043e4:	1ad2      	subs	r2, r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	619a      	str	r2, [r3, #24]
 80043ea:	e002      	b.n	80043f2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d123      	bne.n	8004442 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004414:	833b      	strh	r3, [r7, #24]
 8004416:	8b3b      	ldrh	r3, [r7, #24]
 8004418:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800441c:	833b      	strh	r3, [r7, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	441a      	add	r2, r3
 800442c:	8b3b      	ldrh	r3, [r7, #24]
 800442e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800443a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443e:	b29b      	uxth	r3, r3
 8004440:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01f      	beq.n	800448c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004466:	82fb      	strh	r3, [r7, #22]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	8afb      	ldrh	r3, [r7, #22]
 8004478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800447c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004484:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004488:	b29b      	uxth	r3, r3
 800448a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800448c:	8b7b      	ldrh	r3, [r7, #26]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8087 	beq.w	80045a2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6959      	ldr	r1, [r3, #20]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	891a      	ldrh	r2, [r3, #8]
 80044a0:	8b7b      	ldrh	r3, [r7, #26]
 80044a2:	f004 fec8 	bl	8009236 <USB_ReadPMA>
 80044a6:	e07c      	b.n	80045a2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	3306      	adds	r3, #6
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	8b7b      	ldrh	r3, [r7, #26]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d306      	bcc.n	80044ea <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	8b7b      	ldrh	r3, [r7, #26]
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	619a      	str	r2, [r3, #24]
 80044e8:	e002      	b.n	80044f0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d123      	bne.n	8004540 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800450e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004512:	83fb      	strh	r3, [r7, #30]
 8004514:	8bfb      	ldrh	r3, [r7, #30]
 8004516:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800451a:	83fb      	strh	r3, [r7, #30]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	8bfb      	ldrh	r3, [r7, #30]
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004540:	88fb      	ldrh	r3, [r7, #6]
 8004542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11f      	bne.n	800458a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004564:	83bb      	strh	r3, [r7, #28]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	8bbb      	ldrh	r3, [r7, #28]
 8004576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800457a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800457e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004582:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004586:	b29b      	uxth	r3, r3
 8004588:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800458a:	8b7b      	ldrh	r3, [r7, #26]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6959      	ldr	r1, [r3, #20]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	895a      	ldrh	r2, [r3, #10]
 800459c:	8b7b      	ldrh	r3, [r7, #26]
 800459e:	f004 fe4a 	bl	8009236 <USB_ReadPMA>
    }
  }

  return count;
 80045a2:	8b7b      	ldrh	r3, [r7, #26]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b0a4      	sub	sp, #144	@ 0x90
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 81dd 	beq.w	8004980 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	3302      	adds	r3, #2
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d907      	bls.n	800460e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	619a      	str	r2, [r3, #24]
 800460c:	e002      	b.n	8004614 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 80b9 	bne.w	8004790 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d126      	bne.n	8004674 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004634:	b29b      	uxth	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463a:	4413      	add	r3, r2
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	011a      	lsls	r2, r3, #4
 8004644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004646:	4413      	add	r3, r2
 8004648:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800464c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004658:	b29a      	uxth	r2, r3
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466c:	b29a      	uxth	r2, r3
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	e01a      	b.n	80046aa <HAL_PCD_EP_DB_Transmit+0xfe>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d116      	bne.n	80046aa <HAL_PCD_EP_DB_Transmit+0xfe>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	637b      	str	r3, [r7, #52]	@ 0x34
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800468a:	b29b      	uxth	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004690:	4413      	add	r3, r2
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	011a      	lsls	r2, r3, #4
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	4413      	add	r3, r2
 800469e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80046a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	2200      	movs	r2, #0
 80046a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d126      	bne.n	8004706 <HAL_PCD_EP_DB_Transmit+0x15a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	4413      	add	r3, r2
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	011a      	lsls	r2, r3, #4
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fe:	b29a      	uxth	r2, r3
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	e017      	b.n	8004736 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d113      	bne.n	8004736 <HAL_PCD_EP_DB_Transmit+0x18a>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004716:	b29b      	uxth	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	4413      	add	r3, r2
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	011a      	lsls	r2, r3, #4
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	4413      	add	r3, r2
 800472a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	2200      	movs	r2, #0
 8004734:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f006 fbc2 	bl	800aec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 82fc 	beq.w	8004d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004768:	82fb      	strh	r3, [r7, #22]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	8afb      	ldrh	r3, [r7, #22]
 800477a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800477e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800478a:	b29b      	uxth	r3, r3
 800478c:	8013      	strh	r3, [r2, #0]
 800478e:	e2da      	b.n	8004d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d021      	beq.n	80047de <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	441a      	add	r2, r3
 80047c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80047ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	f040 82ae 	bne.w	8004d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047f2:	441a      	add	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004800:	441a      	add	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	429a      	cmp	r2, r3
 8004810:	d30b      	bcc.n	800482a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6a1a      	ldr	r2, [r3, #32]
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	621a      	str	r2, [r3, #32]
 8004828:	e017      	b.n	800485a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d108      	bne.n	8004844 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004836:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004842:	e00a      	b.n	800485a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2200      	movs	r2, #0
 8004858:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d165      	bne.n	800492e <HAL_PCD_EP_DB_Transmit+0x382>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004870:	b29b      	uxth	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004876:	4413      	add	r3, r2
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	011a      	lsls	r2, r3, #4
 8004880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004882:	4413      	add	r3, r2
 8004884:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004888:	63bb      	str	r3, [r7, #56]	@ 0x38
 800488a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004894:	b29a      	uxth	r2, r3
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800489e:	2b3e      	cmp	r3, #62	@ 0x3e
 80048a0:	d91d      	bls.n	80048de <HAL_PCD_EP_DB_Transmit+0x332>
 80048a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <HAL_PCD_EP_DB_Transmit+0x310>
 80048b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b8:	3b01      	subs	r3, #1
 80048ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	e044      	b.n	8004968 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <HAL_PCD_EP_DB_Transmit+0x350>
 80048e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e035      	b.n	8004968 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004912:	3301      	adds	r3, #1
 8004914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29a      	uxth	r2, r3
 800491c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800491e:	b29b      	uxth	r3, r3
 8004920:	029b      	lsls	r3, r3, #10
 8004922:	b29b      	uxth	r3, r3
 8004924:	4313      	orrs	r3, r2
 8004926:	b29a      	uxth	r2, r3
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e01c      	b.n	8004968 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	785b      	ldrb	r3, [r3, #1]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d118      	bne.n	8004968 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	647b      	str	r3, [r7, #68]	@ 0x44
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004944:	b29b      	uxth	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800494a:	4413      	add	r3, r2
 800494c:	647b      	str	r3, [r7, #68]	@ 0x44
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	011a      	lsls	r2, r3, #4
 8004954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004956:	4413      	add	r3, r2
 8004958:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800495c:	643b      	str	r3, [r7, #64]	@ 0x40
 800495e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004962:	b29a      	uxth	r2, r3
 8004964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004966:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6959      	ldr	r1, [r3, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	891a      	ldrh	r2, [r3, #8]
 8004974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004978:	b29b      	uxth	r3, r3
 800497a:	f004 fc16 	bl	80091aa <USB_WritePMA>
 800497e:	e1e2      	b.n	8004d46 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004988:	b29b      	uxth	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4413      	add	r3, r2
 8004994:	3306      	adds	r3, #6
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049a8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	699a      	ldr	r2, [r3, #24]
 80049b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d307      	bcc.n	80049c8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049c0:	1ad2      	subs	r2, r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	619a      	str	r2, [r3, #24]
 80049c6:	e002      	b.n	80049ce <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2200      	movs	r2, #0
 80049cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 80c0 	bne.w	8004b58 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d126      	bne.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x482>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049f4:	4413      	add	r3, r2
 80049f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	011a      	lsls	r2, r3, #4
 80049fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a00:	4413      	add	r3, r2
 8004a02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e01a      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d116      	bne.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a4a:	4413      	add	r3, r2
 8004a4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	011a      	lsls	r2, r3, #4
 8004a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a56:	4413      	add	r3, r2
 8004a58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a60:	2200      	movs	r2, #0
 8004a62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d12b      	bne.n	8004aca <HAL_PCD_EP_DB_Transmit+0x51e>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a86:	4413      	add	r3, r2
 8004a88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	011a      	lsls	r2, r3, #4
 8004a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a92:	4413      	add	r3, r2
 8004a94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	e017      	b.n	8004afa <HAL_PCD_EP_DB_Transmit+0x54e>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d113      	bne.n	8004afa <HAL_PCD_EP_DB_Transmit+0x54e>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae0:	4413      	add	r3, r2
 8004ae2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	011a      	lsls	r2, r3, #4
 8004aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aec:	4413      	add	r3, r2
 8004aee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004af2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004af4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004af6:	2200      	movs	r2, #0
 8004af8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f006 f9e0 	bl	800aec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 811a 	bne.w	8004d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]
 8004b56:	e0f6      	b.n	8004d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d121      	bne.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	441a      	add	r2, r3
 8004b8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	f040 80ca 	bne.w	8004d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bba:	441a      	add	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bc8:	441a      	add	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d30b      	bcc.n	8004bf2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a1a      	ldr	r2, [r3, #32]
 8004be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	621a      	str	r2, [r3, #32]
 8004bf0:	e017      	b.n	8004c22 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d108      	bne.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004bfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c0a:	e00a      	b.n	8004c22 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2200      	movs	r2, #0
 8004c18:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d165      	bne.n	8004cfc <HAL_PCD_EP_DB_Transmit+0x750>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c44:	4413      	add	r3, r2
 8004c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	011a      	lsls	r2, r3, #4
 8004c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c6e:	d91d      	bls.n	8004cac <HAL_PCD_EP_DB_Transmit+0x700>
 8004c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <HAL_PCD_EP_DB_Transmit+0x6de>
 8004c84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c86:	3b01      	subs	r3, #1
 8004c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	029b      	lsls	r3, r3, #10
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ca8:	801a      	strh	r2, [r3, #0]
 8004caa:	e041      	b.n	8004d30 <HAL_PCD_EP_DB_Transmit+0x784>
 8004cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <HAL_PCD_EP_DB_Transmit+0x71e>
 8004cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cc6:	801a      	strh	r2, [r3, #0]
 8004cc8:	e032      	b.n	8004d30 <HAL_PCD_EP_DB_Transmit+0x784>
 8004cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_PCD_EP_DB_Transmit+0x738>
 8004cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ce4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	029b      	lsls	r3, r3, #10
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cf8:	801a      	strh	r2, [r3, #0]
 8004cfa:	e019      	b.n	8004d30 <HAL_PCD_EP_DB_Transmit+0x784>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d115      	bne.n	8004d30 <HAL_PCD_EP_DB_Transmit+0x784>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d12:	4413      	add	r3, r2
 8004d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	011a      	lsls	r2, r3, #4
 8004d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1e:	4413      	add	r3, r2
 8004d20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d24:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d2e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6959      	ldr	r1, [r3, #20]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	895a      	ldrh	r2, [r3, #10]
 8004d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f004 fa32 	bl	80091aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d60:	82bb      	strh	r3, [r7, #20]
 8004d62:	8abb      	ldrh	r3, [r7, #20]
 8004d64:	f083 0310 	eor.w	r3, r3, #16
 8004d68:	82bb      	strh	r3, [r7, #20]
 8004d6a:	8abb      	ldrh	r3, [r7, #20]
 8004d6c:	f083 0320 	eor.w	r3, r3, #32
 8004d70:	82bb      	strh	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	8abb      	ldrh	r3, [r7, #20]
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3790      	adds	r7, #144	@ 0x90
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	817b      	strh	r3, [r7, #10]
 8004dae:	4613      	mov	r3, r2
 8004db0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004db2:	897b      	ldrh	r3, [r7, #10]
 8004db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	f003 0207 	and.w	r2, r3, #7
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	3310      	adds	r3, #16
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e009      	b.n	8004dea <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dd6:	897a      	ldrh	r2, [r7, #10]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004dea:	893b      	ldrh	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	80da      	strh	r2, [r3, #6]
 8004dfe:	e00b      	b.n	8004e18 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2201      	movs	r2, #1
 8004e04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e272      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8087 	beq.w	8004f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e44:	4b92      	ldr	r3, [pc, #584]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d00c      	beq.n	8004e6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e50:	4b8f      	ldr	r3, [pc, #572]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d112      	bne.n	8004e82 <HAL_RCC_OscConfig+0x5e>
 8004e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e68:	d10b      	bne.n	8004e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e6a:	4b89      	ldr	r3, [pc, #548]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d06c      	beq.n	8004f50 <HAL_RCC_OscConfig+0x12c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d168      	bne.n	8004f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e24c      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x76>
 8004e8c:	4b80      	ldr	r3, [pc, #512]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a7f      	ldr	r2, [pc, #508]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e02e      	b.n	8004ef8 <HAL_RCC_OscConfig+0xd4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x98>
 8004ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a7a      	ldr	r2, [pc, #488]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	4b78      	ldr	r3, [pc, #480]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a77      	ldr	r2, [pc, #476]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e01d      	b.n	8004ef8 <HAL_RCC_OscConfig+0xd4>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0xbc>
 8004ec6:	4b72      	ldr	r3, [pc, #456]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a71      	ldr	r2, [pc, #452]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCC_OscConfig+0xd4>
 8004ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4b68      	ldr	r3, [pc, #416]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a67      	ldr	r2, [pc, #412]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fd f868 	bl	8001fd4 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f08:	f7fd f864 	bl	8001fd4 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	@ 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e200      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0xe4>
 8004f26:	e014      	b.n	8004f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7fd f854 	bl	8001fd4 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fd f850 	bl	8001fd4 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	@ 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1ec      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	4b53      	ldr	r3, [pc, #332]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x10c>
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d063      	beq.n	8005026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f6a:	4b49      	ldr	r3, [pc, #292]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d11c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x18c>
 8004f76:	4b46      	ldr	r3, [pc, #280]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d116      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f82:	4b43      	ldr	r3, [pc, #268]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_RCC_OscConfig+0x176>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e1c0      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4939      	ldr	r1, [pc, #228]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fae:	e03a      	b.n	8005026 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d020      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb8:	4b36      	ldr	r3, [pc, #216]	@ (8005094 <HAL_RCC_OscConfig+0x270>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbe:	f7fd f809 	bl	8001fd4 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc6:	f7fd f805 	bl	8001fd4 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e1a1      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4927      	ldr	r1, [pc, #156]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]
 8004ff8:	e015      	b.n	8005026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffa:	4b26      	ldr	r3, [pc, #152]	@ (8005094 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fc ffe8 	bl	8001fd4 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005008:	f7fc ffe4 	bl	8001fd4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e180      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	4b1d      	ldr	r3, [pc, #116]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d03a      	beq.n	80050a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d019      	beq.n	800506e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503a:	4b17      	ldr	r3, [pc, #92]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005040:	f7fc ffc8 	bl	8001fd4 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005048:	f7fc ffc4 	bl	8001fd4 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e160      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <HAL_RCC_OscConfig+0x26c>)
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005066:	2001      	movs	r0, #1
 8005068:	f000 faba 	bl	80055e0 <RCC_Delay>
 800506c:	e01c      	b.n	80050a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800506e:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005074:	f7fc ffae 	bl	8001fd4 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507a:	e00f      	b.n	800509c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507c:	f7fc ffaa 	bl	8001fd4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d908      	bls.n	800509c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e146      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	42420000 	.word	0x42420000
 8005098:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	4b92      	ldr	r3, [pc, #584]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e9      	bne.n	800507c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80a6 	beq.w	8005202 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b6:	2300      	movs	r3, #0
 80050b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ba:	4b8b      	ldr	r3, [pc, #556]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c6:	4b88      	ldr	r3, [pc, #544]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4a87      	ldr	r2, [pc, #540]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d0:	61d3      	str	r3, [r2, #28]
 80050d2:	4b85      	ldr	r3, [pc, #532]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e2:	4b82      	ldr	r3, [pc, #520]	@ (80052ec <HAL_RCC_OscConfig+0x4c8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d118      	bne.n	8005120 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ee:	4b7f      	ldr	r3, [pc, #508]	@ (80052ec <HAL_RCC_OscConfig+0x4c8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a7e      	ldr	r2, [pc, #504]	@ (80052ec <HAL_RCC_OscConfig+0x4c8>)
 80050f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050fa:	f7fc ff6b 	bl	8001fd4 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005102:	f7fc ff67 	bl	8001fd4 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b64      	cmp	r3, #100	@ 0x64
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e103      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	4b75      	ldr	r3, [pc, #468]	@ (80052ec <HAL_RCC_OscConfig+0x4c8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <HAL_RCC_OscConfig+0x312>
 8005128:	4b6f      	ldr	r3, [pc, #444]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4a6e      	ldr	r2, [pc, #440]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	6213      	str	r3, [r2, #32]
 8005134:	e02d      	b.n	8005192 <HAL_RCC_OscConfig+0x36e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10c      	bne.n	8005158 <HAL_RCC_OscConfig+0x334>
 800513e:	4b6a      	ldr	r3, [pc, #424]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4a69      	ldr	r2, [pc, #420]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	6213      	str	r3, [r2, #32]
 800514a:	4b67      	ldr	r3, [pc, #412]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4a66      	ldr	r2, [pc, #408]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	6213      	str	r3, [r2, #32]
 8005156:	e01c      	b.n	8005192 <HAL_RCC_OscConfig+0x36e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b05      	cmp	r3, #5
 800515e:	d10c      	bne.n	800517a <HAL_RCC_OscConfig+0x356>
 8005160:	4b61      	ldr	r3, [pc, #388]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4a60      	ldr	r2, [pc, #384]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	f043 0304 	orr.w	r3, r3, #4
 800516a:	6213      	str	r3, [r2, #32]
 800516c:	4b5e      	ldr	r3, [pc, #376]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	4a5d      	ldr	r2, [pc, #372]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6213      	str	r3, [r2, #32]
 8005178:	e00b      	b.n	8005192 <HAL_RCC_OscConfig+0x36e>
 800517a:	4b5b      	ldr	r3, [pc, #364]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	4a5a      	ldr	r2, [pc, #360]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	6213      	str	r3, [r2, #32]
 8005186:	4b58      	ldr	r3, [pc, #352]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	4a57      	ldr	r2, [pc, #348]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800518c:	f023 0304 	bic.w	r3, r3, #4
 8005190:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d015      	beq.n	80051c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519a:	f7fc ff1b 	bl	8001fd4 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a0:	e00a      	b.n	80051b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a2:	f7fc ff17 	bl	8001fd4 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0b1      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b8:	4b4b      	ldr	r3, [pc, #300]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ee      	beq.n	80051a2 <HAL_RCC_OscConfig+0x37e>
 80051c4:	e014      	b.n	80051f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c6:	f7fc ff05 	bl	8001fd4 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051cc:	e00a      	b.n	80051e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fc ff01 	bl	8001fd4 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051dc:	4293      	cmp	r3, r2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e09b      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e4:	4b40      	ldr	r3, [pc, #256]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1ee      	bne.n	80051ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d105      	bne.n	8005202 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f6:	4b3c      	ldr	r3, [pc, #240]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	4a3b      	ldr	r2, [pc, #236]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80051fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005200:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8087 	beq.w	800531a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800520c:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 030c 	and.w	r3, r3, #12
 8005214:	2b08      	cmp	r3, #8
 8005216:	d061      	beq.n	80052dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d146      	bne.n	80052ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005220:	4b33      	ldr	r3, [pc, #204]	@ (80052f0 <HAL_RCC_OscConfig+0x4cc>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fc fed5 	bl	8001fd4 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522e:	f7fc fed1 	bl	8001fd4 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e06d      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005240:	4b29      	ldr	r3, [pc, #164]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005254:	d108      	bne.n	8005268 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005256:	4b24      	ldr	r3, [pc, #144]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	4921      	ldr	r1, [pc, #132]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005268:	4b1f      	ldr	r3, [pc, #124]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a19      	ldr	r1, [r3, #32]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	430b      	orrs	r3, r1
 800527a:	491b      	ldr	r1, [pc, #108]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005280:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <HAL_RCC_OscConfig+0x4cc>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005286:	f7fc fea5 	bl	8001fd4 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528e:	f7fc fea1 	bl	8001fd4 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e03d      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052a0:	4b11      	ldr	r3, [pc, #68]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x46a>
 80052ac:	e035      	b.n	800531a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ae:	4b10      	ldr	r3, [pc, #64]	@ (80052f0 <HAL_RCC_OscConfig+0x4cc>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fc fe8e 	bl	8001fd4 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fc fe8a 	bl	8001fd4 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e026      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ce:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x498>
 80052da:	e01e      	b.n	800531a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e019      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40007000 	.word	0x40007000
 80052f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <HAL_RCC_OscConfig+0x500>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	429a      	cmp	r2, r3
 8005306:	d106      	bne.n	8005316 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005312:	429a      	cmp	r2, r3
 8005314:	d001      	beq.n	800531a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40021000 	.word	0x40021000

08005328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0d0      	b.n	80054de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800533c:	4b6a      	ldr	r3, [pc, #424]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d910      	bls.n	800536c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534a:	4b67      	ldr	r3, [pc, #412]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 0207 	bic.w	r2, r3, #7
 8005352:	4965      	ldr	r1, [pc, #404]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	4313      	orrs	r3, r2
 8005358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b63      	ldr	r3, [pc, #396]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0b8      	b.n	80054de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d020      	beq.n	80053ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005384:	4b59      	ldr	r3, [pc, #356]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a58      	ldr	r2, [pc, #352]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 800538a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800538e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800539c:	4b53      	ldr	r3, [pc, #332]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a52      	ldr	r2, [pc, #328]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80053a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80053a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b50      	ldr	r3, [pc, #320]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	494d      	ldr	r1, [pc, #308]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d040      	beq.n	8005448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d107      	bne.n	80053de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	4b47      	ldr	r3, [pc, #284]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d115      	bne.n	8005406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e07f      	b.n	80054de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d107      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e6:	4b41      	ldr	r3, [pc, #260]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e073      	b.n	80054de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f6:	4b3d      	ldr	r3, [pc, #244]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e06b      	b.n	80054de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005406:	4b39      	ldr	r3, [pc, #228]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f023 0203 	bic.w	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4936      	ldr	r1, [pc, #216]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005418:	f7fc fddc 	bl	8001fd4 <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541e:	e00a      	b.n	8005436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005420:	f7fc fdd8 	bl	8001fd4 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e053      	b.n	80054de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005436:	4b2d      	ldr	r3, [pc, #180]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 020c 	and.w	r2, r3, #12
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	429a      	cmp	r2, r3
 8005446:	d1eb      	bne.n	8005420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005448:	4b27      	ldr	r3, [pc, #156]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c0>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d210      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005456:	4b24      	ldr	r3, [pc, #144]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 0207 	bic.w	r2, r3, #7
 800545e:	4922      	ldr	r1, [pc, #136]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4313      	orrs	r3, r2
 8005464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	4b20      	ldr	r3, [pc, #128]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e032      	b.n	80054de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005484:	4b19      	ldr	r3, [pc, #100]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4916      	ldr	r1, [pc, #88]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054a2:	4b12      	ldr	r3, [pc, #72]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	490e      	ldr	r1, [pc, #56]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054b6:	f000 f821 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 80054ba:	4602      	mov	r2, r0
 80054bc:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	490a      	ldr	r1, [pc, #40]	@ (80054f0 <HAL_RCC_ClockConfig+0x1c8>)
 80054c8:	5ccb      	ldrb	r3, [r1, r3]
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a09      	ldr	r2, [pc, #36]	@ (80054f4 <HAL_RCC_ClockConfig+0x1cc>)
 80054d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054d2:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <HAL_RCC_ClockConfig+0x1d0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fc fd3a 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40022000 	.word	0x40022000
 80054ec:	40021000 	.word	0x40021000
 80054f0:	0800f150 	.word	0x0800f150
 80054f4:	20000004 	.word	0x20000004
 80054f8:	20000008 	.word	0x20000008

080054fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005516:	4b1e      	ldr	r3, [pc, #120]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x94>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b04      	cmp	r3, #4
 8005524:	d002      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x30>
 8005526:	2b08      	cmp	r3, #8
 8005528:	d003      	beq.n	8005532 <HAL_RCC_GetSysClockFreq+0x36>
 800552a:	e027      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800552c:	4b19      	ldr	r3, [pc, #100]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x98>)
 800552e:	613b      	str	r3, [r7, #16]
      break;
 8005530:	e027      	b.n	8005582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	0c9b      	lsrs	r3, r3, #18
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	4a17      	ldr	r2, [pc, #92]	@ (8005598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800553c:	5cd3      	ldrb	r3, [r2, r3]
 800553e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d010      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800554a:	4b11      	ldr	r3, [pc, #68]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x94>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	0c5b      	lsrs	r3, r3, #17
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	4a11      	ldr	r2, [pc, #68]	@ (800559c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005556:	5cd3      	ldrb	r3, [r2, r3]
 8005558:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a0d      	ldr	r2, [pc, #52]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x98>)
 800555e:	fb03 f202 	mul.w	r2, r3, r2
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e004      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a0c      	ldr	r2, [pc, #48]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	613b      	str	r3, [r7, #16]
      break;
 800557a:	e002      	b.n	8005582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800557c:	4b05      	ldr	r3, [pc, #20]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x98>)
 800557e:	613b      	str	r3, [r7, #16]
      break;
 8005580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005582:	693b      	ldr	r3, [r7, #16]
}
 8005584:	4618      	mov	r0, r3
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
 8005594:	007a1200 	.word	0x007a1200
 8005598:	0800f168 	.word	0x0800f168
 800559c:	0800f178 	.word	0x0800f178
 80055a0:	003d0900 	.word	0x003d0900

080055a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a8:	4b02      	ldr	r3, [pc, #8]	@ (80055b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80055aa:	681b      	ldr	r3, [r3, #0]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	20000004 	.word	0x20000004

080055b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055bc:	f7ff fff2 	bl	80055a4 <HAL_RCC_GetHCLKFreq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	0adb      	lsrs	r3, r3, #11
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	4903      	ldr	r1, [pc, #12]	@ (80055dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ce:	5ccb      	ldrb	r3, [r1, r3]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40021000 	.word	0x40021000
 80055dc:	0800f160 	.word	0x0800f160

080055e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005614 <RCC_Delay+0x34>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <RCC_Delay+0x38>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	0a5b      	lsrs	r3, r3, #9
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	fb02 f303 	mul.w	r3, r2, r3
 80055fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055fc:	bf00      	nop
  }
  while (Delay --);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1e5a      	subs	r2, r3, #1
 8005602:	60fa      	str	r2, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f9      	bne.n	80055fc <RCC_Delay+0x1c>
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr
 8005614:	20000004 	.word	0x20000004
 8005618:	10624dd3 	.word	0x10624dd3

0800561c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d07d      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005638:	2300      	movs	r3, #0
 800563a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563c:	4b4f      	ldr	r3, [pc, #316]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10d      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005648:	4b4c      	ldr	r3, [pc, #304]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4a4b      	ldr	r2, [pc, #300]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005652:	61d3      	str	r3, [r2, #28]
 8005654:	4b49      	ldr	r3, [pc, #292]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005660:	2301      	movs	r3, #1
 8005662:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005664:	4b46      	ldr	r3, [pc, #280]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d118      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005670:	4b43      	ldr	r3, [pc, #268]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a42      	ldr	r2, [pc, #264]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567c:	f7fc fcaa 	bl	8001fd4 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005682:	e008      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005684:	f7fc fca6 	bl	8001fd4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	@ 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e06d      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005696:	4b3a      	ldr	r3, [pc, #232]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a2:	4b36      	ldr	r3, [pc, #216]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02e      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d027      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c0:	4b2e      	ldr	r3, [pc, #184]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056d6:	4a29      	ldr	r2, [pc, #164]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d014      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e6:	f7fc fc75 	bl	8001fd4 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7fc fc71 	bl	8001fd4 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e036      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ee      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005710:	4b1a      	ldr	r3, [pc, #104]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4917      	ldr	r1, [pc, #92]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571e:	4313      	orrs	r3, r2
 8005720:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d105      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005728:	4b14      	ldr	r3, [pc, #80]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	4a13      	ldr	r2, [pc, #76]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005732:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005740:	4b0e      	ldr	r3, [pc, #56]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	490b      	ldr	r1, [pc, #44]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574e:	4313      	orrs	r3, r2
 8005750:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800575e:	4b07      	ldr	r3, [pc, #28]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	4904      	ldr	r1, [pc, #16]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576c:	4313      	orrs	r3, r2
 800576e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000
 8005780:	40007000 	.word	0x40007000
 8005784:	42420440 	.word	0x42420440

08005788 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	2300      	movs	r3, #0
 80057a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	f200 808a 	bhi.w	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d045      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d075      	beq.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80057be:	e082      	b.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80057c0:	4b46      	ldr	r3, [pc, #280]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80057c6:	4b45      	ldr	r3, [pc, #276]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d07b      	beq.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	0c9b      	lsrs	r3, r3, #18
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	4a41      	ldr	r2, [pc, #260]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80057dc:	5cd3      	ldrb	r3, [r2, r3]
 80057de:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d015      	beq.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057ea:	4b3c      	ldr	r3, [pc, #240]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	0c5b      	lsrs	r3, r3, #17
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	4a3b      	ldr	r2, [pc, #236]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80057f6:	5cd3      	ldrb	r3, [r2, r3]
 80057f8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00d      	beq.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005804:	4a38      	ldr	r2, [pc, #224]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fbb2 f2f3 	udiv	r2, r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	e004      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4a34      	ldr	r2, [pc, #208]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005820:	4b2e      	ldr	r3, [pc, #184]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005828:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800582c:	d102      	bne.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	61bb      	str	r3, [r7, #24]
      break;
 8005832:	e04a      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4a2d      	ldr	r2, [pc, #180]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	61bb      	str	r3, [r7, #24]
      break;
 8005842:	e042      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005844:	4b25      	ldr	r3, [pc, #148]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005854:	d108      	bne.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	e01f      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800586e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005872:	d109      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005874:	4b19      	ldr	r3, [pc, #100]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005880:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e00f      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005892:	d11c      	bne.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005894:	4b11      	ldr	r3, [pc, #68]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d016      	beq.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80058a0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80058a4:	61bb      	str	r3, [r7, #24]
      break;
 80058a6:	e012      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80058a8:	e011      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80058aa:	f7ff fe85 	bl	80055b8 <HAL_RCC_GetPCLK2Freq>
 80058ae:	4602      	mov	r2, r0
 80058b0:	4b0a      	ldr	r3, [pc, #40]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	0b9b      	lsrs	r3, r3, #14
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	3301      	adds	r3, #1
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	61bb      	str	r3, [r7, #24]
      break;
 80058c4:	e004      	b.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058c6:	bf00      	nop
 80058c8:	e002      	b.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058ca:	bf00      	nop
 80058cc:	e000      	b.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058ce:	bf00      	nop
    }
  }
  return (frequency);
 80058d0:	69bb      	ldr	r3, [r7, #24]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	0800f17c 	.word	0x0800f17c
 80058e4:	0800f18c 	.word	0x0800f18c
 80058e8:	007a1200 	.word	0x007a1200
 80058ec:	003d0900 	.word	0x003d0900
 80058f0:	aaaaaaab 	.word	0xaaaaaaab

080058f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e076      	b.n	80059f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005916:	d009      	beq.n	800592c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	61da      	str	r2, [r3, #28]
 800591e:	e005      	b.n	800592c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fc f8e2 	bl	8001b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b0:	ea42 0103 	orr.w	r1, r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	0c1a      	lsrs	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f002 0204 	and.w	r2, r2, #4
 80059d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d001      	beq.n	8005a1a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
 8005a18:	e097      	b.n	8005b4a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Transmit_DMA+0x2a>
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e08f      	b.n	8005b4a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_SPI_Transmit_DMA+0x3c>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e088      	b.n	8005b4a <HAL_SPI_Transmit_DMA+0x14e>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2203      	movs	r2, #3
 8005a44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	88fa      	ldrh	r2, [r7, #6]
 8005a5e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a86:	d10f      	bne.n	8005aa8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aa6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aac:	4a29      	ldr	r2, [pc, #164]	@ (8005b54 <HAL_SPI_Transmit_DMA+0x158>)
 8005aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab4:	4a28      	ldr	r2, [pc, #160]	@ (8005b58 <HAL_SPI_Transmit_DMA+0x15c>)
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005abc:	4a27      	ldr	r2, [pc, #156]	@ (8005b5c <HAL_SPI_Transmit_DMA+0x160>)
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ade:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ae0:	f7fd f898 	bl	8002c14 <HAL_DMA_Start_IT>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aee:	f043 0210 	orr.w	r2, r3, #16
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e023      	b.n	8005b4a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d007      	beq.n	8005b20 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b1e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0220 	orr.w	r2, r2, #32
 8005b36:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0202 	orr.w	r2, r2, #2
 8005b46:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	08005df7 	.word	0x08005df7
 8005b58:	08005d51 	.word	0x08005d51
 8005b5c:	08005e13 	.word	0x08005e13

08005b60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	099b      	lsrs	r3, r3, #6
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10f      	bne.n	8005ba4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	099b      	lsrs	r3, r3, #6
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
    return;
 8005ba2:	e0be      	b.n	8005d22 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HAL_SPI_IRQHandler+0x66>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	09db      	lsrs	r3, r3, #7
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
    return;
 8005bc4:	e0ad      	b.n	8005d22 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_SPI_IRQHandler+0x80>
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	099b      	lsrs	r3, r3, #6
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 80a1 	beq.w	8005d22 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 809a 	beq.w	8005d22 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	099b      	lsrs	r3, r3, #6
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d023      	beq.n	8005c42 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d011      	beq.n	8005c2a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0a:	f043 0204 	orr.w	r2, r3, #4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	e00b      	b.n	8005c42 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	693b      	ldr	r3, [r7, #16]
        return;
 8005c40:	e06f      	b.n	8005d22 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d014      	beq.n	8005c78 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c52:	f043 0201 	orr.w	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d04f      	beq.n	8005d20 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <HAL_SPI_IRQHandler+0x14c>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d034      	beq.n	8005d16 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0203 	bic.w	r2, r2, #3
 8005cba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d011      	beq.n	8005ce8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc8:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <HAL_SPI_IRQHandler+0x1c8>)
 8005cca:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fc ffff 	bl	8002cd4 <HAL_DMA_Abort_IT>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d016      	beq.n	8005d1e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8005d28 <HAL_SPI_IRQHandler+0x1c8>)
 8005cf6:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fc ffe9 	bl	8002cd4 <HAL_DMA_Abort_IT>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005d14:	e003      	b.n	8005d1e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f811 	bl	8005d3e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d1c:	e000      	b.n	8005d20 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005d1e:	bf00      	nop
    return;
 8005d20:	bf00      	nop
  }
}
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	08005e53 	.word	0x08005e53

08005d2c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d5e:	f7fc f939 	bl	8001fd4 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d03b      	beq.n	8005dea <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0220 	bic.w	r2, r2, #32
 8005d80:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0202 	bic.w	r2, r2, #2
 8005d90:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	2164      	movs	r1, #100	@ 0x64
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f000 f8f8 	bl	8005f8c <SPI_EndRxTxTransaction>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005de2:	6978      	ldr	r0, [r7, #20]
 8005de4:	f7ff ffab 	bl	8005d3e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005de8:	e002      	b.n	8005df0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005dea:	6978      	ldr	r0, [r7, #20]
 8005dec:	f7fb faf4 	bl	80013d8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff ff91 	bl	8005d2c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0203 	bic.w	r2, r2, #3
 8005e2e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	f043 0210 	orr.w	r2, r3, #16
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff ff7a 	bl	8005d3e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff ff66 	bl	8005d3e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e8c:	f7fc f8a2 	bl	8001fd4 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	4413      	add	r3, r2
 8005e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e9c:	f7fc f89a 	bl	8001fd4 <HAL_GetTick>
 8005ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ea2:	4b39      	ldr	r3, [pc, #228]	@ (8005f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	015b      	lsls	r3, r3, #5
 8005ea8:	0d1b      	lsrs	r3, r3, #20
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eb2:	e054      	b.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eba:	d050      	beq.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ebc:	f7fc f88a 	bl	8001fd4 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d902      	bls.n	8005ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d13d      	bne.n	8005f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eea:	d111      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ef4:	d004      	beq.n	8005f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005efe:	d107      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f18:	d10f      	bne.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e017      	b.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	bf0c      	ite	eq
 8005f6e:	2301      	moveq	r3, #1
 8005f70:	2300      	movne	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d19b      	bne.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000004 	.word	0x20000004

08005f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff ff6a 	bl	8005e7c <SPI_WaitFlagStateUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	f043 0220 	orr.w	r2, r3, #32
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e013      	b.n	8005fe6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2180      	movs	r1, #128	@ 0x80
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ff57 	bl	8005e7c <SPI_WaitFlagStateUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd8:	f043 0220 	orr.w	r2, r3, #32
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e000      	b.n	8005fe6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e041      	b.n	8006084 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7fb fe25 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f000 fa0f 	bl	8006450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e041      	b.n	8006122 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f839 	bl	800612a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 f9c0 	bl	8006450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006156:	2302      	movs	r3, #2
 8006158:	e0ae      	b.n	80062b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b0c      	cmp	r3, #12
 8006166:	f200 809f 	bhi.w	80062a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800616a:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061a5 	.word	0x080061a5
 8006174:	080062a9 	.word	0x080062a9
 8006178:	080062a9 	.word	0x080062a9
 800617c:	080062a9 	.word	0x080062a9
 8006180:	080061e5 	.word	0x080061e5
 8006184:	080062a9 	.word	0x080062a9
 8006188:	080062a9 	.word	0x080062a9
 800618c:	080062a9 	.word	0x080062a9
 8006190:	08006227 	.word	0x08006227
 8006194:	080062a9 	.word	0x080062a9
 8006198:	080062a9 	.word	0x080062a9
 800619c:	080062a9 	.word	0x080062a9
 80061a0:	08006267 	.word	0x08006267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f9be 	bl	800652c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0208 	orr.w	r2, r2, #8
 80061be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0204 	bic.w	r2, r2, #4
 80061ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6999      	ldr	r1, [r3, #24]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	619a      	str	r2, [r3, #24]
      break;
 80061e2:	e064      	b.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fa04 	bl	80065f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800620e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6999      	ldr	r1, [r3, #24]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	021a      	lsls	r2, r3, #8
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	619a      	str	r2, [r3, #24]
      break;
 8006224:	e043      	b.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fa4d 	bl	80066cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0208 	orr.w	r2, r2, #8
 8006240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0204 	bic.w	r2, r2, #4
 8006250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69d9      	ldr	r1, [r3, #28]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	61da      	str	r2, [r3, #28]
      break;
 8006264:	e023      	b.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fa97 	bl	80067a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69d9      	ldr	r1, [r3, #28]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	021a      	lsls	r2, r3, #8
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	61da      	str	r2, [r3, #28]
      break;
 80062a6:	e002      	b.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_ConfigClockSource+0x1c>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0b4      	b.n	8006446 <HAL_TIM_ConfigClockSource+0x186>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006314:	d03e      	beq.n	8006394 <HAL_TIM_ConfigClockSource+0xd4>
 8006316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631a:	f200 8087 	bhi.w	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006322:	f000 8086 	beq.w	8006432 <HAL_TIM_ConfigClockSource+0x172>
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632a:	d87f      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b70      	cmp	r3, #112	@ 0x70
 800632e:	d01a      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0xa6>
 8006330:	2b70      	cmp	r3, #112	@ 0x70
 8006332:	d87b      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b60      	cmp	r3, #96	@ 0x60
 8006336:	d050      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x11a>
 8006338:	2b60      	cmp	r3, #96	@ 0x60
 800633a:	d877      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b50      	cmp	r3, #80	@ 0x50
 800633e:	d03c      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0xfa>
 8006340:	2b50      	cmp	r3, #80	@ 0x50
 8006342:	d873      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d058      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x13a>
 8006348:	2b40      	cmp	r3, #64	@ 0x40
 800634a:	d86f      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b30      	cmp	r3, #48	@ 0x30
 800634e:	d064      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006350:	2b30      	cmp	r3, #48	@ 0x30
 8006352:	d86b      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b20      	cmp	r3, #32
 8006356:	d060      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d867      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05c      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006360:	2b10      	cmp	r3, #16
 8006362:	d05a      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006364:	e062      	b.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006376:	f000 fad8 	bl	800692a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	609a      	str	r2, [r3, #8]
      break;
 8006392:	e04f      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063a4:	f000 fac1 	bl	800692a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b6:	609a      	str	r2, [r3, #8]
      break;
 80063b8:	e03c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	461a      	mov	r2, r3
 80063c8:	f000 fa38 	bl	800683c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2150      	movs	r1, #80	@ 0x50
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fa8f 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80063d8:	e02c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 fa56 	bl	8006898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2160      	movs	r1, #96	@ 0x60
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa7f 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80063f8:	e01c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006406:	461a      	mov	r2, r3
 8006408:	f000 fa18 	bl	800683c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2140      	movs	r1, #64	@ 0x40
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fa6f 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006418:	e00c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f000 fa66 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 800642a:	e003      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      break;
 8006430:	e000      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2f      	ldr	r2, [pc, #188]	@ (8006520 <TIM_Base_SetConfig+0xd0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_Base_SetConfig+0x30>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646e:	d007      	beq.n	8006480 <TIM_Base_SetConfig+0x30>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a2c      	ldr	r2, [pc, #176]	@ (8006524 <TIM_Base_SetConfig+0xd4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0x30>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a2b      	ldr	r2, [pc, #172]	@ (8006528 <TIM_Base_SetConfig+0xd8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d108      	bne.n	8006492 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a22      	ldr	r2, [pc, #136]	@ (8006520 <TIM_Base_SetConfig+0xd0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00b      	beq.n	80064b2 <TIM_Base_SetConfig+0x62>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a0:	d007      	beq.n	80064b2 <TIM_Base_SetConfig+0x62>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006524 <TIM_Base_SetConfig+0xd4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_Base_SetConfig+0x62>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006528 <TIM_Base_SetConfig+0xd8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d108      	bne.n	80064c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006520 <TIM_Base_SetConfig+0xd0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d103      	bne.n	80064f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f023 0201 	bic.w	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	611a      	str	r2, [r3, #16]
  }
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	40012c00 	.word	0x40012c00
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800

0800652c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f023 0201 	bic.w	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f023 0302 	bic.w	r3, r3, #2
 8006574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1c      	ldr	r2, [pc, #112]	@ (80065f4 <TIM_OC1_SetConfig+0xc8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d10c      	bne.n	80065a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0308 	bic.w	r3, r3, #8
 800658e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f023 0304 	bic.w	r3, r3, #4
 80065a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a13      	ldr	r2, [pc, #76]	@ (80065f4 <TIM_OC1_SetConfig+0xc8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d111      	bne.n	80065ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	621a      	str	r2, [r3, #32]
}
 80065e8:	bf00      	nop
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40012c00 	.word	0x40012c00

080065f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f023 0210 	bic.w	r2, r3, #16
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800662e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0320 	bic.w	r3, r3, #32
 8006642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a1d      	ldr	r2, [pc, #116]	@ (80066c8 <TIM_OC2_SetConfig+0xd0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d10d      	bne.n	8006674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800665e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a14      	ldr	r2, [pc, #80]	@ (80066c8 <TIM_OC2_SetConfig+0xd0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d113      	bne.n	80066a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800668a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00

080066cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <TIM_OC3_SetConfig+0xd0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d10d      	bne.n	8006746 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a14      	ldr	r2, [pc, #80]	@ (800679c <TIM_OC3_SetConfig+0xd0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d113      	bne.n	8006776 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800675c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40012c00 	.word	0x40012c00

080067a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	031b      	lsls	r3, r3, #12
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006838 <TIM_OC4_SetConfig+0x98>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d109      	bne.n	8006814 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr
 8006838:	40012c00 	.word	0x40012c00

0800683c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f023 0201 	bic.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f023 030a 	bic.w	r3, r3, #10
 8006878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f023 0210 	bic.w	r2, r3, #16
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	031b      	lsls	r3, r3, #12
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	f043 0307 	orr.w	r3, r3, #7
 8006918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	021a      	lsls	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	431a      	orrs	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4313      	orrs	r3, r2
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	609a      	str	r2, [r3, #8]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d109      	bne.n	800698c <HAL_TIMEx_PWMN_Start+0x24>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e022      	b.n	80069d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b04      	cmp	r3, #4
 8006990:	d109      	bne.n	80069a6 <HAL_TIMEx_PWMN_Start+0x3e>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b01      	cmp	r3, #1
 800699c:	bf14      	ite	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	2300      	moveq	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	e015      	b.n	80069d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d109      	bne.n	80069c0 <HAL_TIMEx_PWMN_Start+0x58>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	e008      	b.n	80069d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e059      	b.n	8006a8e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_TIMEx_PWMN_Start+0x82>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069e8:	e013      	b.n	8006a12 <HAL_TIMEx_PWMN_Start+0xaa>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d104      	bne.n	80069fa <HAL_TIMEx_PWMN_Start+0x92>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069f8:	e00b      	b.n	8006a12 <HAL_TIMEx_PWMN_Start+0xaa>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d104      	bne.n	8006a0a <HAL_TIMEx_PWMN_Start+0xa2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a08:	e003      	b.n	8006a12 <HAL_TIMEx_PWMN_Start+0xaa>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2204      	movs	r2, #4
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 f8a0 	bl	8006b60 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a18      	ldr	r2, [pc, #96]	@ (8006a98 <HAL_TIMEx_PWMN_Start+0x130>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00e      	beq.n	8006a58 <HAL_TIMEx_PWMN_Start+0xf0>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a42:	d009      	beq.n	8006a58 <HAL_TIMEx_PWMN_Start+0xf0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a14      	ldr	r2, [pc, #80]	@ (8006a9c <HAL_TIMEx_PWMN_Start+0x134>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_TIMEx_PWMN_Start+0xf0>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a13      	ldr	r2, [pc, #76]	@ (8006aa0 <HAL_TIMEx_PWMN_Start+0x138>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d111      	bne.n	8006a7c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b06      	cmp	r3, #6
 8006a68:	d010      	beq.n	8006a8c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7a:	e007      	b.n	8006a8c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800

08006aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e046      	b.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00e      	beq.n	8006b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b08:	d009      	beq.n	8006b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a12      	ldr	r2, [pc, #72]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d004      	beq.n	8006b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a10      	ldr	r2, [pc, #64]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d10c      	bne.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40000400 	.word	0x40000400
 8006b5c:	40000800 	.word	0x40000800

08006b60 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	2204      	movs	r2, #4
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1a      	ldr	r2, [r3, #32]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	401a      	ands	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1a      	ldr	r2, [r3, #32]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr

08006bc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bd2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006bd6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bf6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006bfa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	4638      	mov	r0, r7
 8006c44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b09d      	sub	sp, #116	@ 0x74
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	78db      	ldrb	r3, [r3, #3]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d81f      	bhi.n	8006ce6 <USB_ActivateEndpoint+0x72>
 8006ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <USB_ActivateEndpoint+0x38>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006cef 	.word	0x08006cef
 8006cb8:	08006ccb 	.word	0x08006ccb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006cbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006cc8:	e012      	b.n	8006cf0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006cca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cce:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006cd2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006cd6:	e00b      	b.n	8006cf0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ce0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006ce4:	e004      	b.n	8006cf0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006cec:	e000      	b.n	8006cf0 <USB_ActivateEndpoint+0x7c>
      break;
 8006cee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	441a      	add	r2, r3
 8006cfa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	7b1b      	ldrb	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 8178 	bne.w	8007050 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8084 	beq.w	8006e72 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	011a      	lsls	r2, r3, #4
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	88db      	ldrh	r3, [r3, #6]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	827b      	strh	r3, [r7, #18]
 8006dac:	8a7b      	ldrh	r3, [r7, #18]
 8006dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01b      	beq.n	8006dee <USB_ActivateEndpoint+0x17a>
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dcc:	823b      	strh	r3, [r7, #16]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	8a3b      	ldrh	r3, [r7, #16]
 8006dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	78db      	ldrb	r3, [r3, #3]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d020      	beq.n	8006e38 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e0c:	81bb      	strh	r3, [r7, #12]
 8006e0e:	89bb      	ldrh	r3, [r7, #12]
 8006e10:	f083 0320 	eor.w	r3, r3, #32
 8006e14:	81bb      	strh	r3, [r7, #12]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	441a      	add	r2, r3
 8006e20:	89bb      	ldrh	r3, [r7, #12]
 8006e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	8013      	strh	r3, [r2, #0]
 8006e36:	e2d5      	b.n	80073e4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e4e:	81fb      	strh	r3, [r7, #14]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	89fb      	ldrh	r3, [r7, #14]
 8006e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	8013      	strh	r3, [r2, #0]
 8006e70:	e2b8      	b.n	80073e4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	4413      	add	r3, r2
 8006e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	011a      	lsls	r2, r3, #4
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb6:	4413      	add	r3, r2
 8006eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	011a      	lsls	r2, r3, #4
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ee0:	d91d      	bls.n	8006f1e <USB_ActivateEndpoint+0x2aa>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <USB_ActivateEndpoint+0x288>
 8006ef6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	029b      	lsls	r3, r3, #10
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e026      	b.n	8006f6c <USB_ActivateEndpoint+0x2f8>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <USB_ActivateEndpoint+0x2c8>
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	e017      	b.n	8006f6c <USB_ActivateEndpoint+0x2f8>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	085b      	lsrs	r3, r3, #1
 8006f42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <USB_ActivateEndpoint+0x2e2>
 8006f50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f52:	3301      	adds	r3, #1
 8006f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	029b      	lsls	r3, r3, #10
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	4313      	orrs	r3, r2
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006f7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006f7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01b      	beq.n	8006fbc <USB_ActivateEndpoint+0x348>
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9a:	843b      	strh	r3, [r7, #32]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	441a      	add	r2, r3
 8006fa6:	8c3b      	ldrh	r3, [r7, #32]
 8006fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d124      	bne.n	800700e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fda:	83bb      	strh	r3, [r7, #28]
 8006fdc:	8bbb      	ldrh	r3, [r7, #28]
 8006fde:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fe2:	83bb      	strh	r3, [r7, #28]
 8006fe4:	8bbb      	ldrh	r3, [r7, #28]
 8006fe6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006fea:	83bb      	strh	r3, [r7, #28]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	8bbb      	ldrh	r3, [r7, #28]
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]
 800700c:	e1ea      	b.n	80073e4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007024:	83fb      	strh	r3, [r7, #30]
 8007026:	8bfb      	ldrh	r3, [r7, #30]
 8007028:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800702c:	83fb      	strh	r3, [r7, #30]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	441a      	add	r2, r3
 8007038:	8bfb      	ldrh	r3, [r7, #30]
 800703a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800704a:	b29b      	uxth	r3, r3
 800704c:	8013      	strh	r3, [r2, #0]
 800704e:	e1c9      	b.n	80073e4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	78db      	ldrb	r3, [r3, #3]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d11e      	bne.n	8007096 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800706a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	441a      	add	r2, r3
 800707c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007088:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800708c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007090:	b29b      	uxth	r3, r3
 8007092:	8013      	strh	r3, [r2, #0]
 8007094:	e01d      	b.n	80070d2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80070a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ac:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80070be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070dc:	b29b      	uxth	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e2:	4413      	add	r3, r2
 80070e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	011a      	lsls	r2, r3, #4
 80070ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	891b      	ldrh	r3, [r3, #8]
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	657b      	str	r3, [r7, #84]	@ 0x54
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007110:	b29b      	uxth	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007116:	4413      	add	r3, r2
 8007118:	657b      	str	r3, [r7, #84]	@ 0x54
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	011a      	lsls	r2, r3, #4
 8007120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007122:	4413      	add	r3, r2
 8007124:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007128:	653b      	str	r3, [r7, #80]	@ 0x50
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	895b      	ldrh	r3, [r3, #10]
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	b29b      	uxth	r3, r3
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	b29a      	uxth	r2, r3
 8007136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007138:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f040 8093 	bne.w	800726a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007154:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01b      	beq.n	8007198 <USB_ActivateEndpoint+0x524>
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007176:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	441a      	add	r2, r3
 8007182:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800718c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007194:	b29b      	uxth	r3, r3
 8007196:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80071a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80071a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01b      	beq.n	80071e8 <USB_ActivateEndpoint+0x574>
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	441a      	add	r2, r3
 80071d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007200:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007202:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007206:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007208:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800720a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800720e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	441a      	add	r2, r3
 800721a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800721c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800722c:	b29b      	uxth	r3, r3
 800722e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	b29b      	uxth	r3, r3
 800723e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007246:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	441a      	add	r2, r3
 8007252:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800725c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007264:	b29b      	uxth	r3, r3
 8007266:	8013      	strh	r3, [r2, #0]
 8007268:	e0bc      	b.n	80073e4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800727a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800727e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d01d      	beq.n	80072c2 <USB_ActivateEndpoint+0x64e>
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	441a      	add	r2, r3
 80072aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80072ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072be:	b29b      	uxth	r3, r3
 80072c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80072d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80072d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01d      	beq.n	800731a <USB_ActivateEndpoint+0x6a6>
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	441a      	add	r2, r3
 8007302:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800730a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800730e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007312:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007316:	b29b      	uxth	r3, r3
 8007318:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	78db      	ldrb	r3, [r3, #3]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d024      	beq.n	800736c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007338:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800733c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007340:	f083 0320 	eor.w	r3, r3, #32
 8007344:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	441a      	add	r2, r3
 8007352:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800735a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800735e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007366:	b29b      	uxth	r3, r3
 8007368:	8013      	strh	r3, [r2, #0]
 800736a:	e01d      	b.n	80073a8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800737e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007382:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	441a      	add	r2, r3
 8007390:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800739c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	441a      	add	r2, r3
 80073cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80073d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80073e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3774      	adds	r7, #116	@ 0x74
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop

080073f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b08d      	sub	sp, #52	@ 0x34
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	7b1b      	ldrb	r3, [r3, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 808e 	bne.w	8007524 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d044      	beq.n	800749a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	81bb      	strh	r3, [r7, #12]
 800741e:	89bb      	ldrh	r3, [r7, #12]
 8007420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01b      	beq.n	8007460 <USB_DeactivateEndpoint+0x6c>
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29b      	uxth	r3, r3
 8007436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800743a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743e:	817b      	strh	r3, [r7, #10]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	897b      	ldrh	r3, [r7, #10]
 800744c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007454:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007458:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800745c:	b29b      	uxth	r3, r3
 800745e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29b      	uxth	r3, r3
 800746e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007476:	813b      	strh	r3, [r7, #8]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	441a      	add	r2, r3
 8007482:	893b      	ldrh	r3, [r7, #8]
 8007484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800748c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007494:	b29b      	uxth	r3, r3
 8007496:	8013      	strh	r3, [r2, #0]
 8007498:	e192      	b.n	80077c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	827b      	strh	r3, [r7, #18]
 80074a8:	8a7b      	ldrh	r3, [r7, #18]
 80074aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01b      	beq.n	80074ea <USB_DeactivateEndpoint+0xf6>
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c8:	823b      	strh	r3, [r7, #16]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	441a      	add	r2, r3
 80074d4:	8a3b      	ldrh	r3, [r7, #16]
 80074d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007500:	81fb      	strh	r3, [r7, #14]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	441a      	add	r2, r3
 800750c:	89fb      	ldrh	r3, [r7, #14]
 800750e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800751a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751e:	b29b      	uxth	r3, r3
 8007520:	8013      	strh	r3, [r2, #0]
 8007522:	e14d      	b.n	80077c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f040 80a5 	bne.w	8007678 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	843b      	strh	r3, [r7, #32]
 800753c:	8c3b      	ldrh	r3, [r7, #32]
 800753e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d01b      	beq.n	800757e <USB_DeactivateEndpoint+0x18a>
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755c:	83fb      	strh	r3, [r7, #30]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	8bfb      	ldrh	r3, [r7, #30]
 800756a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800756e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800757a:	b29b      	uxth	r3, r3
 800757c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	83bb      	strh	r3, [r7, #28]
 800758c:	8bbb      	ldrh	r3, [r7, #28]
 800758e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01b      	beq.n	80075ce <USB_DeactivateEndpoint+0x1da>
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ac:	837b      	strh	r3, [r7, #26]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	441a      	add	r2, r3
 80075b8:	8b7b      	ldrh	r3, [r7, #26]
 80075ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e4:	833b      	strh	r3, [r7, #24]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	441a      	add	r2, r3
 80075f0:	8b3b      	ldrh	r3, [r7, #24]
 80075f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007602:	b29b      	uxth	r3, r3
 8007604:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800761c:	82fb      	strh	r3, [r7, #22]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	441a      	add	r2, r3
 8007628:	8afb      	ldrh	r3, [r7, #22]
 800762a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800762e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763a:	b29b      	uxth	r3, r3
 800763c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007654:	82bb      	strh	r3, [r7, #20]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	441a      	add	r2, r3
 8007660:	8abb      	ldrh	r3, [r7, #20]
 8007662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800766a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800766e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007672:	b29b      	uxth	r3, r3
 8007674:	8013      	strh	r3, [r2, #0]
 8007676:	e0a3      	b.n	80077c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007686:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01b      	beq.n	80076c8 <USB_DeactivateEndpoint+0x2d4>
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	441a      	add	r2, r3
 80076b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80076b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80076d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80076d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <USB_DeactivateEndpoint+0x324>
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800770c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007710:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007714:	b29b      	uxth	r3, r3
 8007716:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800772a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800772e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	441a      	add	r2, r3
 800773a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800773c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800774c:	b29b      	uxth	r3, r3
 800774e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007766:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	441a      	add	r2, r3
 8007772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800777c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007784:	b29b      	uxth	r3, r3
 8007786:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800779a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	441a      	add	r2, r3
 80077aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80077ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077bc:	b29b      	uxth	r3, r3
 80077be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3734      	adds	r7, #52	@ 0x34
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr

080077cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b0c2      	sub	sp, #264	@ 0x108
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077da:	6018      	str	r0, [r3, #0]
 80077dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	f040 86b7 	bne.w	8008566 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699a      	ldr	r2, [r3, #24]
 8007804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	429a      	cmp	r2, r3
 8007812:	d908      	bls.n	8007826 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007824:	e007      	b.n	8007836 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	7b1b      	ldrb	r3, [r3, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d13a      	bne.n	80078bc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6959      	ldr	r1, [r3, #20]
 8007852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	88da      	ldrh	r2, [r3, #6]
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007862:	b29b      	uxth	r3, r3
 8007864:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007868:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800786c:	6800      	ldr	r0, [r0, #0]
 800786e:	f001 fc9c 	bl	80091aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800788c:	b29b      	uxth	r3, r3
 800788e:	461a      	mov	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4413      	add	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	011a      	lsls	r2, r3, #4
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	f000 be1f 	b.w	80084fa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80078bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	78db      	ldrb	r3, [r3, #3]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	f040 8462 	bne.w	8008192 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80078ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6a1a      	ldr	r2, [r3, #32]
 80078da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	f240 83df 	bls.w	80080aa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800790e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007912:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	441a      	add	r2, r3
 8007930:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800793c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007944:	b29b      	uxth	r3, r3
 8007946:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6a1a      	ldr	r2, [r3, #32]
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 81c7 	beq.w	8007d1c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800798e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	633b      	str	r3, [r7, #48]	@ 0x30
 800799a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d177      	bne.n	8007a9a <USB_EPStartXfer+0x2ce>
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	4413      	add	r3, r2
 80079cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	011a      	lsls	r2, r3, #4
 80079dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079de:	4413      	add	r3, r2
 80079e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	801a      	strh	r2, [r3, #0]
 80079f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80079fc:	d921      	bls.n	8007a42 <USB_EPStartXfer+0x276>
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <USB_EPStartXfer+0x252>
 8007a14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	029b      	lsls	r3, r3, #10
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e050      	b.n	8007ae4 <USB_EPStartXfer+0x318>
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <USB_EPStartXfer+0x294>
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	e041      	b.n	8007ae4 <USB_EPStartXfer+0x318>
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d004      	beq.n	8007a80 <USB_EPStartXfer+0x2b4>
 8007a76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	029b      	lsls	r3, r3, #10
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4313      	orrs	r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	801a      	strh	r2, [r3, #0]
 8007a98:	e024      	b.n	8007ae4 <USB_EPStartXfer+0x318>
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d11c      	bne.n	8007ae4 <USB_EPStartXfer+0x318>
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	4413      	add	r3, r2
 8007ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	011a      	lsls	r2, r3, #4
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	895b      	ldrh	r3, [r3, #10]
 8007af0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6959      	ldr	r1, [r3, #20]
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b12:	6800      	ldr	r0, [r0, #0]
 8007b14:	f001 fb49 	bl	80091aa <USB_WritePMA>
            ep->xfer_buff += len;
 8007b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695a      	ldr	r2, [r3, #20]
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b28:	441a      	add	r2, r3
 8007b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a1a      	ldr	r2, [r3, #32]
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d90f      	bls.n	8007b72 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6a1a      	ldr	r2, [r3, #32]
 8007b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b62:	1ad2      	subs	r2, r2, r3
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	621a      	str	r2, [r3, #32]
 8007b70:	e00e      	b.n	8007b90 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d177      	bne.n	8007c90 <USB_EPStartXfer+0x4c4>
 8007ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	61bb      	str	r3, [r7, #24]
 8007bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
 8007bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	011a      	lsls	r2, r3, #4
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bf2:	d921      	bls.n	8007c38 <USB_EPStartXfer+0x46c>
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c02:	f003 031f 	and.w	r3, r3, #31
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d104      	bne.n	8007c14 <USB_EPStartXfer+0x448>
 8007c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	029b      	lsls	r3, r3, #10
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	4313      	orrs	r3, r2
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	801a      	strh	r2, [r3, #0]
 8007c36:	e056      	b.n	8007ce6 <USB_EPStartXfer+0x51a>
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <USB_EPStartXfer+0x48a>
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	e047      	b.n	8007ce6 <USB_EPStartXfer+0x51a>
 8007c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d004      	beq.n	8007c76 <USB_EPStartXfer+0x4aa>
 8007c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c70:	3301      	adds	r3, #1
 8007c72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	029b      	lsls	r3, r3, #10
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	801a      	strh	r2, [r3, #0]
 8007c8e:	e02a      	b.n	8007ce6 <USB_EPStartXfer+0x51a>
 8007c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d122      	bne.n	8007ce6 <USB_EPStartXfer+0x51a>
 8007ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	623b      	str	r3, [r7, #32]
 8007cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	623b      	str	r3, [r7, #32]
 8007cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	011a      	lsls	r2, r3, #4
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	891b      	ldrh	r3, [r3, #8]
 8007cf2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6959      	ldr	r1, [r3, #20]
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d14:	6800      	ldr	r0, [r0, #0]
 8007d16:	f001 fa48 	bl	80091aa <USB_WritePMA>
 8007d1a:	e3ee      	b.n	80084fa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d177      	bne.n	8007e1c <USB_EPStartXfer+0x650>
 8007d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d4c:	4413      	add	r3, r2
 8007d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	011a      	lsls	r2, r3, #4
 8007d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d60:	4413      	add	r3, r2
 8007d62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d7e:	d921      	bls.n	8007dc4 <USB_EPStartXfer+0x5f8>
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8e:	f003 031f 	and.w	r3, r3, #31
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <USB_EPStartXfer+0x5d4>
 8007d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	029b      	lsls	r3, r3, #10
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	e056      	b.n	8007e72 <USB_EPStartXfer+0x6a6>
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <USB_EPStartXfer+0x616>
 8007dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	e047      	b.n	8007e72 <USB_EPStartXfer+0x6a6>
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <USB_EPStartXfer+0x636>
 8007df8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	029b      	lsls	r3, r3, #10
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e02a      	b.n	8007e72 <USB_EPStartXfer+0x6a6>
 8007e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d122      	bne.n	8007e72 <USB_EPStartXfer+0x6a6>
 8007e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e4c:	4413      	add	r3, r2
 8007e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	011a      	lsls	r2, r3, #4
 8007e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	891b      	ldrh	r3, [r3, #8]
 8007e7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6959      	ldr	r1, [r3, #20]
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ea0:	6800      	ldr	r0, [r0, #0]
 8007ea2:	f001 f982 	bl	80091aa <USB_WritePMA>
            ep->xfer_buff += len;
 8007ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695a      	ldr	r2, [r3, #20]
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb6:	441a      	add	r2, r3
 8007eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6a1a      	ldr	r2, [r3, #32]
 8007ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d90f      	bls.n	8007f00 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6a1a      	ldr	r2, [r3, #32]
 8007eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef0:	1ad2      	subs	r2, r2, r3
 8007ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	621a      	str	r2, [r3, #32]
 8007efe:	e00e      	b.n	8007f1e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d177      	bne.n	800802a <USB_EPStartXfer+0x85e>
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	461a      	mov	r2, r3
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	4413      	add	r3, r2
 8007f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	011a      	lsls	r2, r3, #4
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6e:	4413      	add	r3, r2
 8007f70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f8c:	d921      	bls.n	8007fd2 <USB_EPStartXfer+0x806>
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <USB_EPStartXfer+0x7e2>
 8007fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	029b      	lsls	r3, r3, #10
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	e050      	b.n	8008074 <USB_EPStartXfer+0x8a8>
 8007fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <USB_EPStartXfer+0x824>
 8007fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fec:	801a      	strh	r2, [r3, #0]
 8007fee:	e041      	b.n	8008074 <USB_EPStartXfer+0x8a8>
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <USB_EPStartXfer+0x844>
 8008006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800800a:	3301      	adds	r3, #1
 800800c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29a      	uxth	r2, r3
 8008016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800801a:	b29b      	uxth	r3, r3
 800801c:	029b      	lsls	r3, r3, #10
 800801e:	b29b      	uxth	r3, r3
 8008020:	4313      	orrs	r3, r2
 8008022:	b29a      	uxth	r2, r3
 8008024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	e024      	b.n	8008074 <USB_EPStartXfer+0x8a8>
 800802a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	785b      	ldrb	r3, [r3, #1]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d11c      	bne.n	8008074 <USB_EPStartXfer+0x8a8>
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008048:	b29b      	uxth	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800804e:	4413      	add	r3, r2
 8008050:	643b      	str	r3, [r7, #64]	@ 0x40
 8008052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	011a      	lsls	r2, r3, #4
 8008060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008062:	4413      	add	r3, r2
 8008064:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806e:	b29a      	uxth	r2, r3
 8008070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008072:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	895b      	ldrh	r3, [r3, #10]
 8008080:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6959      	ldr	r1, [r3, #20]
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008094:	b29b      	uxth	r3, r3
 8008096:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800809a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800809e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80080a2:	6800      	ldr	r0, [r0, #0]
 80080a4:	f001 f881 	bl	80091aa <USB_WritePMA>
 80080a8:	e227      	b.n	80084fa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80080aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80080ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80080dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80080e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	441a      	add	r2, r3
 80080fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800810a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800810e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008112:	b29b      	uxth	r3, r3
 8008114:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008130:	b29b      	uxth	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008136:	4413      	add	r3, r2
 8008138:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800813a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	011a      	lsls	r2, r3, #4
 8008148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800814a:	4413      	add	r3, r2
 800814c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008156:	b29a      	uxth	r2, r3
 8008158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800815a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800815c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	891b      	ldrh	r3, [r3, #8]
 8008168:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800816c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6959      	ldr	r1, [r3, #20]
 8008178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817c:	b29b      	uxth	r3, r3
 800817e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008182:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008186:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	f001 f80d 	bl	80091aa <USB_WritePMA>
 8008190:	e1b3      	b.n	80084fa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6a1a      	ldr	r2, [r3, #32]
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80c6 	beq.w	8008364 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80081e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	785b      	ldrb	r3, [r3, #1]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d177      	bne.n	80082e4 <USB_EPStartXfer+0xb18>
 80081f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800820e:	b29b      	uxth	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008214:	4413      	add	r3, r2
 8008216:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	011a      	lsls	r2, r3, #4
 8008226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008228:	4413      	add	r3, r2
 800822a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800822e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800823a:	b29a      	uxth	r2, r3
 800823c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008244:	2b3e      	cmp	r3, #62	@ 0x3e
 8008246:	d921      	bls.n	800828c <USB_EPStartXfer+0xac0>
 8008248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824c:	095b      	lsrs	r3, r3, #5
 800824e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	2b00      	cmp	r3, #0
 800825c:	d104      	bne.n	8008268 <USB_EPStartXfer+0xa9c>
 800825e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008262:	3b01      	subs	r3, #1
 8008264:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008272:	b29b      	uxth	r3, r3
 8008274:	029b      	lsls	r3, r3, #10
 8008276:	b29b      	uxth	r3, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	b29b      	uxth	r3, r3
 800827c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008284:	b29a      	uxth	r2, r3
 8008286:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	e050      	b.n	800832e <USB_EPStartXfer+0xb62>
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <USB_EPStartXfer+0xade>
 8008294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800829e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	e041      	b.n	800832e <USB_EPStartXfer+0xb62>
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <USB_EPStartXfer+0xafe>
 80082c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082c4:	3301      	adds	r3, #1
 80082c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	029b      	lsls	r3, r3, #10
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082e0:	801a      	strh	r2, [r3, #0]
 80082e2:	e024      	b.n	800832e <USB_EPStartXfer+0xb62>
 80082e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d11c      	bne.n	800832e <USB_EPStartXfer+0xb62>
 80082f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008302:	b29b      	uxth	r3, r3
 8008304:	461a      	mov	r2, r3
 8008306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008308:	4413      	add	r3, r2
 800830a:	673b      	str	r3, [r7, #112]	@ 0x70
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	011a      	lsls	r2, r3, #4
 800831a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800831c:	4413      	add	r3, r2
 800831e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008328:	b29a      	uxth	r2, r3
 800832a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800832c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800832e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	895b      	ldrh	r3, [r3, #10]
 800833a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800833e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6959      	ldr	r1, [r3, #20]
 800834a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834e:	b29b      	uxth	r3, r3
 8008350:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008354:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008358:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800835c:	6800      	ldr	r0, [r0, #0]
 800835e:	f000 ff24 	bl	80091aa <USB_WritePMA>
 8008362:	e0ca      	b.n	80084fa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d177      	bne.n	8008464 <USB_EPStartXfer+0xc98>
 8008374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800838e:	b29b      	uxth	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008394:	4413      	add	r3, r2
 8008396:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	011a      	lsls	r2, r3, #4
 80083a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083a8:	4413      	add	r3, r2
 80083aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80083ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80083c6:	d921      	bls.n	800840c <USB_EPStartXfer+0xc40>
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083cc:	095b      	lsrs	r3, r3, #5
 80083ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d104      	bne.n	80083e8 <USB_EPStartXfer+0xc1c>
 80083de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80083e2:	3b01      	subs	r3, #1
 80083e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	4313      	orrs	r3, r2
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008404:	b29a      	uxth	r2, r3
 8008406:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	e05c      	b.n	80084c6 <USB_EPStartXfer+0xcfa>
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <USB_EPStartXfer+0xc5e>
 8008414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	b29b      	uxth	r3, r3
 800841a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800841e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008422:	b29a      	uxth	r2, r3
 8008424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	e04d      	b.n	80084c6 <USB_EPStartXfer+0xcfa>
 800842a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d004      	beq.n	800844a <USB_EPStartXfer+0xc7e>
 8008440:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008444:	3301      	adds	r3, #1
 8008446:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800844a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	b29a      	uxth	r2, r3
 8008450:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008454:	b29b      	uxth	r3, r3
 8008456:	029b      	lsls	r3, r3, #10
 8008458:	b29b      	uxth	r3, r3
 800845a:	4313      	orrs	r3, r2
 800845c:	b29a      	uxth	r2, r3
 800845e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	e030      	b.n	80084c6 <USB_EPStartXfer+0xcfa>
 8008464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d128      	bne.n	80084c6 <USB_EPStartXfer+0xcfa>
 8008474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008490:	b29b      	uxth	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008498:	4413      	add	r3, r2
 800849a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800849e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	011a      	lsls	r2, r3, #4
 80084ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084b0:	4413      	add	r3, r2
 80084b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084be:	b29a      	uxth	r2, r3
 80084c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80084c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80084c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	891b      	ldrh	r3, [r3, #8]
 80084d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6959      	ldr	r1, [r3, #20]
 80084e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084f4:	6800      	ldr	r0, [r0, #0]
 80084f6:	f000 fe58 	bl	80091aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80084fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800851c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008520:	817b      	strh	r3, [r7, #10]
 8008522:	897b      	ldrh	r3, [r7, #10]
 8008524:	f083 0310 	eor.w	r3, r3, #16
 8008528:	817b      	strh	r3, [r7, #10]
 800852a:	897b      	ldrh	r3, [r7, #10]
 800852c:	f083 0320 	eor.w	r3, r3, #32
 8008530:	817b      	strh	r3, [r7, #10]
 8008532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	441a      	add	r2, r3
 800854c:	897b      	ldrh	r3, [r7, #10]
 800854e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800855a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800855e:	b29b      	uxth	r3, r3
 8008560:	8013      	strh	r3, [r2, #0]
 8008562:	f000 bcde 	b.w	8008f22 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	7b1b      	ldrb	r3, [r3, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f040 80bb 	bne.w	80086ee <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	699a      	ldr	r2, [r3, #24]
 8008584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	429a      	cmp	r2, r3
 8008592:	d917      	bls.n	80085c4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80085a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b4:	1ad2      	subs	r2, r2, r3
 80085b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	619a      	str	r2, [r3, #24]
 80085c2:	e00e      	b.n	80085e2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80085c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2200      	movs	r2, #0
 80085e0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80085e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085fe:	b29b      	uxth	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008606:	4413      	add	r3, r2
 8008608:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800860c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	011a      	lsls	r2, r3, #4
 800861a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800861e:	4413      	add	r3, r2
 8008620:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008634:	b29a      	uxth	r2, r3
 8008636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008640:	2b3e      	cmp	r3, #62	@ 0x3e
 8008642:	d924      	bls.n	800868e <USB_EPStartXfer+0xec2>
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800864e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008652:	f003 031f 	and.w	r3, r3, #31
 8008656:	2b00      	cmp	r3, #0
 8008658:	d104      	bne.n	8008664 <USB_EPStartXfer+0xe98>
 800865a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800865e:	3b01      	subs	r3, #1
 8008660:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008664:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	b29a      	uxth	r2, r3
 800866c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008670:	b29b      	uxth	r3, r3
 8008672:	029b      	lsls	r3, r3, #10
 8008674:	b29b      	uxth	r3, r3
 8008676:	4313      	orrs	r3, r2
 8008678:	b29b      	uxth	r3, r3
 800867a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008682:	b29a      	uxth	r2, r3
 8008684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008688:	801a      	strh	r2, [r3, #0]
 800868a:	f000 bc10 	b.w	8008eae <USB_EPStartXfer+0x16e2>
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10c      	bne.n	80086b0 <USB_EPStartXfer+0xee4>
 8008696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086ac:	801a      	strh	r2, [r3, #0]
 80086ae:	e3fe      	b.n	8008eae <USB_EPStartXfer+0x16e2>
 80086b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b4:	085b      	lsrs	r3, r3, #1
 80086b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <USB_EPStartXfer+0xf04>
 80086c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80086ca:	3301      	adds	r3, #1
 80086cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80086dc:	b29b      	uxth	r3, r3
 80086de:	029b      	lsls	r3, r3, #10
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	4313      	orrs	r3, r2
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	e3df      	b.n	8008eae <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80086ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	78db      	ldrb	r3, [r3, #3]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	f040 8218 	bne.w	8008b30 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f040 809d 	bne.w	800884c <USB_EPStartXfer+0x1080>
 8008712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800872e:	b29b      	uxth	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008736:	4413      	add	r3, r2
 8008738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800873c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	011a      	lsls	r2, r3, #4
 800874a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800874e:	4413      	add	r3, r2
 8008750:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008754:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008764:	b29a      	uxth	r2, r3
 8008766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800876a:	801a      	strh	r2, [r3, #0]
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	2b3e      	cmp	r3, #62	@ 0x3e
 800877a:	d92b      	bls.n	80087d4 <USB_EPStartXfer+0x1008>
 800877c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	095b      	lsrs	r3, r3, #5
 800878a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800878e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 031f 	and.w	r3, r3, #31
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <USB_EPStartXfer+0xfe0>
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a6:	3b01      	subs	r3, #1
 80087a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	029b      	lsls	r3, r3, #10
 80087bc:	b29b      	uxth	r3, r3
 80087be:	4313      	orrs	r3, r2
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087d0:	801a      	strh	r2, [r3, #0]
 80087d2:	e070      	b.n	80088b6 <USB_EPStartXfer+0x10ea>
 80087d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10c      	bne.n	80087fe <USB_EPStartXfer+0x1032>
 80087e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087fa:	801a      	strh	r2, [r3, #0]
 80087fc:	e05b      	b.n	80088b6 <USB_EPStartXfer+0x10ea>
 80087fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	085b      	lsrs	r3, r3, #1
 800880c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <USB_EPStartXfer+0x1062>
 8008824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008828:	3301      	adds	r3, #1
 800882a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800882e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29a      	uxth	r2, r3
 8008836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800883a:	b29b      	uxth	r3, r3
 800883c:	029b      	lsls	r3, r3, #10
 800883e:	b29b      	uxth	r3, r3
 8008840:	4313      	orrs	r3, r2
 8008842:	b29a      	uxth	r2, r3
 8008844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008848:	801a      	strh	r2, [r3, #0]
 800884a:	e034      	b.n	80088b6 <USB_EPStartXfer+0x10ea>
 800884c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d12c      	bne.n	80088b6 <USB_EPStartXfer+0x10ea>
 800885c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800886a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008878:	b29b      	uxth	r3, r3
 800887a:	461a      	mov	r2, r3
 800887c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008880:	4413      	add	r3, r2
 8008882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	011a      	lsls	r2, r3, #4
 8008894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008898:	4413      	add	r3, r2
 800889a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800889e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f040 809d 	bne.w	8008a10 <USB_EPStartXfer+0x1244>
 80088d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088fa:	4413      	add	r3, r2
 80088fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	011a      	lsls	r2, r3, #4
 800890e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008912:	4413      	add	r3, r2
 8008914:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800891c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008928:	b29a      	uxth	r2, r3
 800892a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b3e      	cmp	r3, #62	@ 0x3e
 800893e:	d92b      	bls.n	8008998 <USB_EPStartXfer+0x11cc>
 8008940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	095b      	lsrs	r3, r3, #5
 800894e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <USB_EPStartXfer+0x11a4>
 8008966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800896a:	3b01      	subs	r3, #1
 800896c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29a      	uxth	r2, r3
 8008978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800897c:	b29b      	uxth	r3, r3
 800897e:	029b      	lsls	r3, r3, #10
 8008980:	b29b      	uxth	r3, r3
 8008982:	4313      	orrs	r3, r2
 8008984:	b29b      	uxth	r3, r3
 8008986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800898e:	b29a      	uxth	r2, r3
 8008990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008994:	801a      	strh	r2, [r3, #0]
 8008996:	e069      	b.n	8008a6c <USB_EPStartXfer+0x12a0>
 8008998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10c      	bne.n	80089c2 <USB_EPStartXfer+0x11f6>
 80089a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089be:	801a      	strh	r2, [r3, #0]
 80089c0:	e054      	b.n	8008a6c <USB_EPStartXfer+0x12a0>
 80089c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	085b      	lsrs	r3, r3, #1
 80089d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <USB_EPStartXfer+0x1226>
 80089e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089ec:	3301      	adds	r3, #1
 80089ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	029b      	lsls	r3, r3, #10
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	4313      	orrs	r3, r2
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	e02d      	b.n	8008a6c <USB_EPStartXfer+0x12a0>
 8008a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	785b      	ldrb	r3, [r3, #1]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d125      	bne.n	8008a6c <USB_EPStartXfer+0x12a0>
 8008a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a36:	4413      	add	r3, r2
 8008a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	011a      	lsls	r2, r3, #4
 8008a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a4e:	4413      	add	r3, r2
 8008a50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a6a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8218 	beq.w	8008eae <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <USB_EPStartXfer+0x12ea>
 8008aaa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10d      	bne.n	8008ad2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ab6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f040 81f5 	bne.w	8008eae <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ac4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f040 81ee 	bne.w	8008eae <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008af4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008af8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	441a      	add	r2, r3
 8008b16:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	8013      	strh	r3, [r2, #0]
 8008b2e:	e1be      	b.n	8008eae <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	78db      	ldrb	r3, [r3, #3]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	f040 81b4 	bne.w	8008eaa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d917      	bls.n	8008b8e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699a      	ldr	r2, [r3, #24]
 8008b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	619a      	str	r2, [r3, #24]
 8008b8c:	e00e      	b.n	8008bac <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	785b      	ldrb	r3, [r3, #1]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f040 8085 	bne.w	8008cc8 <USB_EPStartXfer+0x14fc>
 8008bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008be2:	4413      	add	r3, r2
 8008be4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	011a      	lsls	r2, r3, #4
 8008bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c1e:	d923      	bls.n	8008c68 <USB_EPStartXfer+0x149c>
 8008c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c24:	095b      	lsrs	r3, r3, #5
 8008c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2e:	f003 031f 	and.w	r3, r3, #31
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <USB_EPStartXfer+0x1474>
 8008c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	029b      	lsls	r3, r3, #10
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	4313      	orrs	r3, r2
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	e060      	b.n	8008d2a <USB_EPStartXfer+0x155e>
 8008c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10c      	bne.n	8008c8a <USB_EPStartXfer+0x14be>
 8008c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c86:	801a      	strh	r2, [r3, #0]
 8008c88:	e04f      	b.n	8008d2a <USB_EPStartXfer+0x155e>
 8008c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <USB_EPStartXfer+0x14de>
 8008ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	029b      	lsls	r3, r3, #10
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008cc4:	801a      	strh	r2, [r3, #0]
 8008cc6:	e030      	b.n	8008d2a <USB_EPStartXfer+0x155e>
 8008cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d128      	bne.n	8008d2a <USB_EPStartXfer+0x155e>
 8008cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	011a      	lsls	r2, r3, #4
 8008d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d14:	4413      	add	r3, r2
 8008d16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008d28:	801a      	strh	r2, [r3, #0]
 8008d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	785b      	ldrb	r3, [r3, #1]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 8085 	bne.w	8008e54 <USB_EPStartXfer+0x1688>
 8008d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008d6e:	4413      	add	r3, r2
 8008d70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	011a      	lsls	r2, r3, #4
 8008d82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008d86:	4413      	add	r3, r2
 8008d88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008da2:	801a      	strh	r2, [r3, #0]
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008daa:	d923      	bls.n	8008df4 <USB_EPStartXfer+0x1628>
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	095b      	lsrs	r3, r3, #5
 8008db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dba:	f003 031f 	and.w	r3, r3, #31
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d104      	bne.n	8008dcc <USB_EPStartXfer+0x1600>
 8008dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008dcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	029b      	lsls	r3, r3, #10
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	4313      	orrs	r3, r2
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008df0:	801a      	strh	r2, [r3, #0]
 8008df2:	e05c      	b.n	8008eae <USB_EPStartXfer+0x16e2>
 8008df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10c      	bne.n	8008e16 <USB_EPStartXfer+0x164a>
 8008dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e12:	801a      	strh	r2, [r3, #0]
 8008e14:	e04b      	b.n	8008eae <USB_EPStartXfer+0x16e2>
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <USB_EPStartXfer+0x166a>
 8008e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e30:	3301      	adds	r3, #1
 8008e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	029b      	lsls	r3, r3, #10
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e50:	801a      	strh	r2, [r3, #0]
 8008e52:	e02c      	b.n	8008eae <USB_EPStartXfer+0x16e2>
 8008e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d124      	bne.n	8008eae <USB_EPStartXfer+0x16e2>
 8008e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	011a      	lsls	r2, r3, #4
 8008e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008e92:	4413      	add	r3, r2
 8008e94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ea6:	801a      	strh	r2, [r3, #0]
 8008ea8:	e001      	b.n	8008eae <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e03a      	b.n	8008f24 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008ed8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008edc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ee0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008ee4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ee8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008eec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	441a      	add	r2, r3
 8008f0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b085      	sub	sp, #20
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	785b      	ldrb	r3, [r3, #1]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d020      	beq.n	8008f82 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f56:	81bb      	strh	r3, [r7, #12]
 8008f58:	89bb      	ldrh	r3, [r7, #12]
 8008f5a:	f083 0310 	eor.w	r3, r3, #16
 8008f5e:	81bb      	strh	r3, [r7, #12]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	441a      	add	r2, r3
 8008f6a:	89bb      	ldrh	r3, [r7, #12]
 8008f6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	8013      	strh	r3, [r2, #0]
 8008f80:	e01f      	b.n	8008fc2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f98:	81fb      	strh	r3, [r7, #14]
 8008f9a:	89fb      	ldrh	r3, [r7, #14]
 8008f9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008fa0:	81fb      	strh	r3, [r7, #14]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	441a      	add	r2, r3
 8008fac:	89fb      	ldrh	r3, [r7, #14]
 8008fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr

08008fce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b087      	sub	sp, #28
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	7b1b      	ldrb	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f040 809d 	bne.w	800911c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d04c      	beq.n	8009084 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	823b      	strh	r3, [r7, #16]
 8008ff8:	8a3b      	ldrh	r3, [r7, #16]
 8008ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d01b      	beq.n	800903a <USB_EPClearStall+0x6c>
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	b29b      	uxth	r3, r3
 8009010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009018:	81fb      	strh	r3, [r7, #14]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	441a      	add	r2, r3
 8009024:	89fb      	ldrh	r3, [r7, #14]
 8009026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800902a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800902e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009032:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009036:	b29b      	uxth	r3, r3
 8009038:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	78db      	ldrb	r3, [r3, #3]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d06c      	beq.n	800911c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009058:	81bb      	strh	r3, [r7, #12]
 800905a:	89bb      	ldrh	r3, [r7, #12]
 800905c:	f083 0320 	eor.w	r3, r3, #32
 8009060:	81bb      	strh	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	441a      	add	r2, r3
 800906c:	89bb      	ldrh	r3, [r7, #12]
 800906e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800907a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800907e:	b29b      	uxth	r3, r3
 8009080:	8013      	strh	r3, [r2, #0]
 8009082:	e04b      	b.n	800911c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	82fb      	strh	r3, [r7, #22]
 8009092:	8afb      	ldrh	r3, [r7, #22]
 8009094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01b      	beq.n	80090d4 <USB_EPClearStall+0x106>
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b2:	82bb      	strh	r3, [r7, #20]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	441a      	add	r2, r3
 80090be:	8abb      	ldrh	r3, [r7, #20]
 80090c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ea:	827b      	strh	r3, [r7, #18]
 80090ec:	8a7b      	ldrh	r3, [r7, #18]
 80090ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80090f2:	827b      	strh	r3, [r7, #18]
 80090f4:	8a7b      	ldrh	r3, [r7, #18]
 80090f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80090fa:	827b      	strh	r3, [r7, #18]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	441a      	add	r2, r3
 8009106:	8a7b      	ldrh	r3, [r7, #18]
 8009108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800910c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009118:	b29b      	uxth	r3, r3
 800911a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	bc80      	pop	{r7}
 8009126:	4770      	bx	lr

08009128 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d103      	bne.n	8009142 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2280      	movs	r2, #128	@ 0x80
 800913e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	bc80      	pop	{r7}
 800914c:	4770      	bx	lr

0800914e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr

08009162 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	bc80      	pop	{r7}
 8009174:	4770      	bx	lr

08009176 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009184:	b29b      	uxth	r3, r3
 8009186:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009188:	68fb      	ldr	r3, [r7, #12]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	bc80      	pop	{r7}
 8009192:	4770      	bx	lr

08009194 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bc80      	pop	{r7}
 80091a8:	4770      	bx	lr

080091aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b08b      	sub	sp, #44	@ 0x2c
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	4611      	mov	r1, r2
 80091b6:	461a      	mov	r2, r3
 80091b8:	460b      	mov	r3, r1
 80091ba:	80fb      	strh	r3, [r7, #6]
 80091bc:	4613      	mov	r3, r2
 80091be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091c0:	88bb      	ldrh	r3, [r7, #4]
 80091c2:	3301      	adds	r3, #1
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091d0:	88fb      	ldrh	r3, [r7, #6]
 80091d2:	005a      	lsls	r2, r3, #1
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80091e2:	e01f      	b.n	8009224 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3301      	adds	r3, #1
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	b21b      	sxth	r3, r3
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	b21a      	sxth	r2, r3
 80091f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	b21b      	sxth	r3, r3
 80091fe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	8a7a      	ldrh	r2, [r7, #18]
 8009204:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	3302      	adds	r3, #2
 800920a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	3302      	adds	r3, #2
 8009210:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	3301      	adds	r3, #1
 8009216:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	3301      	adds	r3, #1
 800921c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800921e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009220:	3b01      	subs	r3, #1
 8009222:	627b      	str	r3, [r7, #36]	@ 0x24
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1dc      	bne.n	80091e4 <USB_WritePMA+0x3a>
  }
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	372c      	adds	r7, #44	@ 0x2c
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr

08009236 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009236:	b480      	push	{r7}
 8009238:	b08b      	sub	sp, #44	@ 0x2c
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	4611      	mov	r1, r2
 8009242:	461a      	mov	r2, r3
 8009244:	460b      	mov	r3, r1
 8009246:	80fb      	strh	r3, [r7, #6]
 8009248:	4613      	mov	r3, r2
 800924a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800924c:	88bb      	ldrh	r3, [r7, #4]
 800924e:	085b      	lsrs	r3, r3, #1
 8009250:	b29b      	uxth	r3, r3
 8009252:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800925c:	88fb      	ldrh	r3, [r7, #6]
 800925e:	005a      	lsls	r2, r3, #1
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009268:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	627b      	str	r3, [r7, #36]	@ 0x24
 800926e:	e01b      	b.n	80092a8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	3302      	adds	r3, #2
 800927c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	b2da      	uxtb	r2, r3
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	3301      	adds	r3, #1
 800928a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	b2da      	uxtb	r2, r3
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	3301      	adds	r3, #1
 800929a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	3302      	adds	r3, #2
 80092a0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80092a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a4:	3b01      	subs	r3, #1
 80092a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e0      	bne.n	8009270 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80092ae:	88bb      	ldrh	r3, [r7, #4]
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	701a      	strb	r2, [r3, #0]
  }
}
 80092ca:	bf00      	nop
 80092cc:	372c      	adds	r7, #44	@ 0x2c
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bc80      	pop	{r7}
 80092d2:	4770      	bx	lr

080092d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7c1b      	ldrb	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d115      	bne.n	8009318 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092f0:	2202      	movs	r2, #2
 80092f2:	2181      	movs	r1, #129	@ 0x81
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 feca 	bl	800b08e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009304:	2202      	movs	r2, #2
 8009306:	2101      	movs	r1, #1
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 fec0 	bl	800b08e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009316:	e012      	b.n	800933e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009318:	2340      	movs	r3, #64	@ 0x40
 800931a:	2202      	movs	r2, #2
 800931c:	2181      	movs	r1, #129	@ 0x81
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 feb5 	bl	800b08e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800932a:	2340      	movs	r3, #64	@ 0x40
 800932c:	2202      	movs	r2, #2
 800932e:	2101      	movs	r1, #1
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 feac 	bl	800b08e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800933e:	2308      	movs	r3, #8
 8009340:	2203      	movs	r2, #3
 8009342:	2182      	movs	r1, #130	@ 0x82
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 fea2 	bl	800b08e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009350:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009354:	f001 ffc2 	bl	800b2dc <USBD_static_malloc>
 8009358:	4602      	mov	r2, r0
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800936a:	2301      	movs	r3, #1
 800936c:	73fb      	strb	r3, [r7, #15]
 800936e:	e026      	b.n	80093be <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009376:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2200      	movs	r2, #0
 8009386:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2200      	movs	r2, #0
 800938e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	7c1b      	ldrb	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d109      	bne.n	80093ae <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093a4:	2101      	movs	r1, #1
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 ff61 	bl	800b26e <USBD_LL_PrepareReceive>
 80093ac:	e007      	b.n	80093be <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093b4:	2340      	movs	r3, #64	@ 0x40
 80093b6:	2101      	movs	r1, #1
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 ff58 	bl	800b26e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093d8:	2181      	movs	r1, #129	@ 0x81
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f001 fe7d 	bl	800b0da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80093e6:	2101      	movs	r1, #1
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 fe76 	bl	800b0da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80093f6:	2182      	movs	r1, #130	@ 0x82
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 fe6e 	bl	800b0da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800941e:	4618      	mov	r0, r3
 8009420:	f001 ff68 	bl	800b2f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800942c:	7bfb      	ldrb	r3, [r7, #15]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009446:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800945c:	2b00      	cmp	r3, #0
 800945e:	d039      	beq.n	80094d4 <USBD_CDC_Setup+0x9e>
 8009460:	2b20      	cmp	r3, #32
 8009462:	d17f      	bne.n	8009564 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	88db      	ldrh	r3, [r3, #6]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d029      	beq.n	80094c0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	b25b      	sxtb	r3, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	da11      	bge.n	800949a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009482:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	88d2      	ldrh	r2, [r2, #6]
 8009488:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800948a:	6939      	ldr	r1, [r7, #16]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	88db      	ldrh	r3, [r3, #6]
 8009490:	461a      	mov	r2, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 fa06 	bl	800a8a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009498:	e06b      	b.n	8009572 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	785a      	ldrb	r2, [r3, #1]
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	88db      	ldrh	r3, [r3, #6]
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094b0:	6939      	ldr	r1, [r7, #16]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	88db      	ldrh	r3, [r3, #6]
 80094b6:	461a      	mov	r2, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 fa21 	bl	800a900 <USBD_CtlPrepareRx>
      break;
 80094be:	e058      	b.n	8009572 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	7850      	ldrb	r0, [r2, #1]
 80094cc:	2200      	movs	r2, #0
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	4798      	blx	r3
      break;
 80094d2:	e04e      	b.n	8009572 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	785b      	ldrb	r3, [r3, #1]
 80094d8:	2b0b      	cmp	r3, #11
 80094da:	d02e      	beq.n	800953a <USBD_CDC_Setup+0x104>
 80094dc:	2b0b      	cmp	r3, #11
 80094de:	dc38      	bgt.n	8009552 <USBD_CDC_Setup+0x11c>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <USBD_CDC_Setup+0xb4>
 80094e4:	2b0a      	cmp	r3, #10
 80094e6:	d014      	beq.n	8009512 <USBD_CDC_Setup+0xdc>
 80094e8:	e033      	b.n	8009552 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d107      	bne.n	8009504 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80094f4:	f107 030c 	add.w	r3, r7, #12
 80094f8:	2202      	movs	r2, #2
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 f9d1 	bl	800a8a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009502:	e02e      	b.n	8009562 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 f962 	bl	800a7d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800950c:	2302      	movs	r3, #2
 800950e:	75fb      	strb	r3, [r7, #23]
          break;
 8009510:	e027      	b.n	8009562 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009518:	2b03      	cmp	r3, #3
 800951a:	d107      	bne.n	800952c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800951c:	f107 030f 	add.w	r3, r7, #15
 8009520:	2201      	movs	r2, #1
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f9bd 	bl	800a8a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800952a:	e01a      	b.n	8009562 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 f94e 	bl	800a7d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009534:	2302      	movs	r3, #2
 8009536:	75fb      	strb	r3, [r7, #23]
          break;
 8009538:	e013      	b.n	8009562 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009540:	2b03      	cmp	r3, #3
 8009542:	d00d      	beq.n	8009560 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 f942 	bl	800a7d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800954c:	2302      	movs	r3, #2
 800954e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009550:	e006      	b.n	8009560 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f93b 	bl	800a7d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800955a:	2302      	movs	r3, #2
 800955c:	75fb      	strb	r3, [r7, #23]
          break;
 800955e:	e000      	b.n	8009562 <USBD_CDC_Setup+0x12c>
          break;
 8009560:	bf00      	nop
      }
      break;
 8009562:	e006      	b.n	8009572 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 f932 	bl	800a7d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800956c:	2302      	movs	r3, #2
 800956e:	75fb      	strb	r3, [r7, #23]
      break;
 8009570:	bf00      	nop
  }

  return ret;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800958e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009596:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d03a      	beq.n	8009618 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	331c      	adds	r3, #28
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d029      	beq.n	800960c <USBD_CDC_DataIn+0x90>
 80095b8:	78fa      	ldrb	r2, [r7, #3]
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	331c      	adds	r3, #28
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	78f9      	ldrb	r1, [r7, #3]
 80095cc:	68b8      	ldr	r0, [r7, #8]
 80095ce:	460b      	mov	r3, r1
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	4403      	add	r3, r0
 80095d8:	3320      	adds	r3, #32
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d110      	bne.n	800960c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	440b      	add	r3, r1
 80095f8:	331c      	adds	r3, #28
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095fe:	78f9      	ldrb	r1, [r7, #3]
 8009600:	2300      	movs	r3, #0
 8009602:	2200      	movs	r2, #0
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f001 fe0f 	bl	800b228 <USBD_LL_Transmit>
 800960a:	e003      	b.n	8009614 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	e000      	b.n	800961a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009618:	2302      	movs	r3, #2
  }
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009634:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 fe3a 	bl	800b2b4 <USBD_LL_GetRxDataSize>
 8009640:	4602      	mov	r2, r0
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00d      	beq.n	800966e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009666:	4611      	mov	r1, r2
 8009668:	4798      	blx	r3

    return USBD_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	e000      	b.n	8009670 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800966e:	2302      	movs	r3, #2
  }
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009686:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800968e:	2b00      	cmp	r3, #0
 8009690:	d014      	beq.n	80096bc <USBD_CDC_EP0_RxReady+0x44>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009698:	2bff      	cmp	r3, #255	@ 0xff
 800969a:	d00f      	beq.n	80096bc <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80096aa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	22ff      	movs	r2, #255	@ 0xff
 80096b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2243      	movs	r2, #67	@ 0x43
 80096d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80096d6:	4b03      	ldr	r3, [pc, #12]	@ (80096e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	bc80      	pop	{r7}
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	20000098 	.word	0x20000098

080096e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2243      	movs	r2, #67	@ 0x43
 80096f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80096f6:	4b03      	ldr	r3, [pc, #12]	@ (8009704 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20000054 	.word	0x20000054

08009708 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2243      	movs	r2, #67	@ 0x43
 8009714:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009716:	4b03      	ldr	r3, [pc, #12]	@ (8009724 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	200000dc 	.word	0x200000dc

08009728 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	220a      	movs	r2, #10
 8009734:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009736:	4b03      	ldr	r3, [pc, #12]	@ (8009744 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20000010 	.word	0x20000010

08009748 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009752:	2302      	movs	r3, #2
 8009754:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	bc80      	pop	{r7}
 8009772:	4770      	bx	lr

08009774 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	4613      	mov	r3, r2
 8009780:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009788:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009792:	88fa      	ldrh	r2, [r7, #6]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	371c      	adds	r7, #28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bc80      	pop	{r7}
 80097a4:	4770      	bx	lr

080097a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bc80      	pop	{r7}
 80097ca:	4770      	bx	lr

080097cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01c      	beq.n	8009820 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d115      	bne.n	800981c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800980e:	b29b      	uxth	r3, r3
 8009810:	2181      	movs	r1, #129	@ 0x81
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 fd08 	bl	800b228 <USBD_LL_Transmit>

      return USBD_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	e002      	b.n	8009822 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800981c:	2301      	movs	r3, #1
 800981e:	e000      	b.n	8009822 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009820:	2302      	movs	r3, #2
  }
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009838:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009840:	2b00      	cmp	r3, #0
 8009842:	d017      	beq.n	8009874 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7c1b      	ldrb	r3, [r3, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009852:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009856:	2101      	movs	r1, #1
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 fd08 	bl	800b26e <USBD_LL_PrepareReceive>
 800985e:	e007      	b.n	8009870 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009866:	2340      	movs	r3, #64	@ 0x40
 8009868:	2101      	movs	r1, #1
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fcff 	bl	800b26e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	e000      	b.n	8009876 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009874:	2302      	movs	r3, #2
  }
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	4613      	mov	r3, r2
 800988a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009892:	2302      	movs	r3, #2
 8009894:	e01a      	b.n	80098cc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	79fa      	ldrb	r2, [r7, #7]
 80098c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f001 fb6d 	bl	800afa4 <USBD_LL_Init>

  return USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d006      	beq.n	80098f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]
 80098f4:	e001      	b.n	80098fa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80098f6:	2302      	movs	r3, #2
 80098f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr

08009906 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 fba2 	bl	800b058 <USBD_LL_Start>

  return USBD_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr

08009932 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800993e:	2302      	movs	r3, #2
 8009940:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00c      	beq.n	8009966 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	4611      	mov	r1, r2
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	4798      	blx	r3
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	4611      	mov	r1, r2
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	4798      	blx	r3

  return USBD_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 fed8 	bl	800a75e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80099bc:	461a      	mov	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80099ca:	f003 031f 	and.w	r3, r3, #31
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d016      	beq.n	8009a00 <USBD_LL_SetupStage+0x6a>
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d81c      	bhi.n	8009a10 <USBD_LL_SetupStage+0x7a>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <USBD_LL_SetupStage+0x4a>
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d008      	beq.n	80099f0 <USBD_LL_SetupStage+0x5a>
 80099de:	e017      	b.n	8009a10 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f9cb 	bl	8009d84 <USBD_StdDevReq>
      break;
 80099ee:	e01a      	b.n	8009a26 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fa2d 	bl	8009e58 <USBD_StdItfReq>
      break;
 80099fe:	e012      	b.n	8009a26 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fa6d 	bl	8009ee8 <USBD_StdEPReq>
      break;
 8009a0e:	e00a      	b.n	8009a26 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009a16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 fb7a 	bl	800b118 <USBD_LL_StallEP>
      break;
 8009a24:	bf00      	nop
  }

  return USBD_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d14b      	bne.n	8009adc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009a4a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d134      	bne.n	8009ac0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	68da      	ldr	r2, [r3, #12]
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d919      	bls.n	8009a96 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	1ad2      	subs	r2, r2, r3
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	68da      	ldr	r2, [r3, #12]
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d203      	bcs.n	8009a84 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	e002      	b.n	8009a8a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 ff54 	bl	800a93c <USBD_CtlContinueRx>
 8009a94:	e038      	b.n	8009b08 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d105      	bne.n	8009ab8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 ff51 	bl	800a960 <USBD_CtlSendStatus>
 8009abe:	e023      	b.n	8009b08 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	d11e      	bne.n	8009b08 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f001 fb1f 	bl	800b118 <USBD_LL_StallEP>
 8009ada:	e015      	b.n	8009b08 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00d      	beq.n	8009b04 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d108      	bne.n	8009b04 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	7afa      	ldrb	r2, [r7, #11]
 8009afc:	4611      	mov	r1, r2
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	4798      	blx	r3
 8009b02:	e001      	b.n	8009b08 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b04:	2302      	movs	r3, #2
 8009b06:	e000      	b.n	8009b0a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	607a      	str	r2, [r7, #4]
 8009b1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d17f      	bne.n	8009c26 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3314      	adds	r3, #20
 8009b2a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d15c      	bne.n	8009bf0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d915      	bls.n	8009b6e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	1ad2      	subs	r2, r2, r3
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	461a      	mov	r2, r3
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 febe 	bl	800a8dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b60:	2300      	movs	r3, #0
 8009b62:	2200      	movs	r2, #0
 8009b64:	2100      	movs	r1, #0
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f001 fb81 	bl	800b26e <USBD_LL_PrepareReceive>
 8009b6c:	e04e      	b.n	8009c0c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	6912      	ldr	r2, [r2, #16]
 8009b76:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b7a:	fb01 f202 	mul.w	r2, r1, r2
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d11c      	bne.n	8009bbe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d316      	bcc.n	8009bbe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d20f      	bcs.n	8009bbe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fe9a 	bl	800a8dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f001 fb59 	bl	800b26e <USBD_LL_PrepareReceive>
 8009bbc:	e026      	b.n	8009c0c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d105      	bne.n	8009be0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009be0:	2180      	movs	r1, #128	@ 0x80
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f001 fa98 	bl	800b118 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 fecc 	bl	800a986 <USBD_CtlReceiveStatus>
 8009bee:	e00d      	b.n	8009c0c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d004      	beq.n	8009c04 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c04:	2180      	movs	r1, #128	@ 0x80
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f001 fa86 	bl	800b118 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d11d      	bne.n	8009c52 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7ff fe81 	bl	800991e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c24:	e015      	b.n	8009c52 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00d      	beq.n	8009c4e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d108      	bne.n	8009c4e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	7afa      	ldrb	r2, [r7, #11]
 8009c46:	4611      	mov	r1, r2
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	4798      	blx	r3
 8009c4c:	e001      	b.n	8009c52 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e000      	b.n	8009c54 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c64:	2340      	movs	r3, #64	@ 0x40
 8009c66:	2200      	movs	r2, #0
 8009c68:	2100      	movs	r1, #0
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 fa0f 	bl	800b08e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2240      	movs	r2, #64	@ 0x40
 8009c7c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c80:	2340      	movs	r3, #64	@ 0x40
 8009c82:	2200      	movs	r2, #0
 8009c84:	2180      	movs	r1, #128	@ 0x80
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 fa01 	bl	800b08e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2240      	movs	r2, #64	@ 0x40
 8009c96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d009      	beq.n	8009cd4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	6852      	ldr	r2, [r2, #4]
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	4611      	mov	r1, r2
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	4798      	blx	r3
  }

  return USBD_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bc80      	pop	{r7}
 8009cfa:	4770      	bx	lr

08009cfc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2204      	movs	r2, #4
 8009d14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bc80      	pop	{r7}
 8009d22:	4770      	bx	lr

08009d24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d105      	bne.n	8009d42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bc80      	pop	{r7}
 8009d4c:	4770      	bx	lr

08009d4e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d10b      	bne.n	8009d78 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d005      	beq.n	8009d78 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d9a:	2b40      	cmp	r3, #64	@ 0x40
 8009d9c:	d005      	beq.n	8009daa <USBD_StdDevReq+0x26>
 8009d9e:	2b40      	cmp	r3, #64	@ 0x40
 8009da0:	d84f      	bhi.n	8009e42 <USBD_StdDevReq+0xbe>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d009      	beq.n	8009dba <USBD_StdDevReq+0x36>
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d14b      	bne.n	8009e42 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	4798      	blx	r3
      break;
 8009db8:	e048      	b.n	8009e4c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	d839      	bhi.n	8009e36 <USBD_StdDevReq+0xb2>
 8009dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc8 <USBD_StdDevReq+0x44>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009e19 	.word	0x08009e19
 8009dcc:	08009e2d 	.word	0x08009e2d
 8009dd0:	08009e37 	.word	0x08009e37
 8009dd4:	08009e23 	.word	0x08009e23
 8009dd8:	08009e37 	.word	0x08009e37
 8009ddc:	08009dfb 	.word	0x08009dfb
 8009de0:	08009df1 	.word	0x08009df1
 8009de4:	08009e37 	.word	0x08009e37
 8009de8:	08009e0f 	.word	0x08009e0f
 8009dec:	08009e05 	.word	0x08009e05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f9dc 	bl	800a1b0 <USBD_GetDescriptor>
          break;
 8009df8:	e022      	b.n	8009e40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fb3f 	bl	800a480 <USBD_SetAddress>
          break;
 8009e02:	e01d      	b.n	8009e40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fb7e 	bl	800a508 <USBD_SetConfig>
          break;
 8009e0c:	e018      	b.n	8009e40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fc07 	bl	800a624 <USBD_GetConfig>
          break;
 8009e16:	e013      	b.n	8009e40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fc37 	bl	800a68e <USBD_GetStatus>
          break;
 8009e20:	e00e      	b.n	8009e40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc65 	bl	800a6f4 <USBD_SetFeature>
          break;
 8009e2a:	e009      	b.n	8009e40 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fc74 	bl	800a71c <USBD_ClrFeature>
          break;
 8009e34:	e004      	b.n	8009e40 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fcc9 	bl	800a7d0 <USBD_CtlError>
          break;
 8009e3e:	bf00      	nop
      }
      break;
 8009e40:	e004      	b.n	8009e4c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fcc3 	bl	800a7d0 <USBD_CtlError>
      break;
 8009e4a:	bf00      	nop
  }

  return ret;
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop

08009e58 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e6e:	2b40      	cmp	r3, #64	@ 0x40
 8009e70:	d005      	beq.n	8009e7e <USBD_StdItfReq+0x26>
 8009e72:	2b40      	cmp	r3, #64	@ 0x40
 8009e74:	d82e      	bhi.n	8009ed4 <USBD_StdItfReq+0x7c>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <USBD_StdItfReq+0x26>
 8009e7a:	2b20      	cmp	r3, #32
 8009e7c:	d12a      	bne.n	8009ed4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e84:	3b01      	subs	r3, #1
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d81d      	bhi.n	8009ec6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	889b      	ldrh	r3, [r3, #4]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d813      	bhi.n	8009ebc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	4798      	blx	r3
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	88db      	ldrh	r3, [r3, #6]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d110      	bne.n	8009ed0 <USBD_StdItfReq+0x78>
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10d      	bne.n	8009ed0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fd53 	bl	800a960 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009eba:	e009      	b.n	8009ed0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fc86 	bl	800a7d0 <USBD_CtlError>
          break;
 8009ec4:	e004      	b.n	8009ed0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fc81 	bl	800a7d0 <USBD_CtlError>
          break;
 8009ece:	e000      	b.n	8009ed2 <USBD_StdItfReq+0x7a>
          break;
 8009ed0:	bf00      	nop
      }
      break;
 8009ed2:	e004      	b.n	8009ede <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fc7a 	bl	800a7d0 <USBD_CtlError>
      break;
 8009edc:	bf00      	nop
  }

  return USBD_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	889b      	ldrh	r3, [r3, #4]
 8009efa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f04:	2b40      	cmp	r3, #64	@ 0x40
 8009f06:	d007      	beq.n	8009f18 <USBD_StdEPReq+0x30>
 8009f08:	2b40      	cmp	r3, #64	@ 0x40
 8009f0a:	f200 8146 	bhi.w	800a19a <USBD_StdEPReq+0x2b2>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <USBD_StdEPReq+0x40>
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	f040 8141 	bne.w	800a19a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	4798      	blx	r3
      break;
 8009f26:	e13d      	b.n	800a1a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f30:	2b20      	cmp	r3, #32
 8009f32:	d10a      	bne.n	8009f4a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	e12d      	b.n	800a1a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d007      	beq.n	8009f62 <USBD_StdEPReq+0x7a>
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	f300 811b 	bgt.w	800a18e <USBD_StdEPReq+0x2a6>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d072      	beq.n	800a042 <USBD_StdEPReq+0x15a>
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d03a      	beq.n	8009fd6 <USBD_StdEPReq+0xee>
 8009f60:	e115      	b.n	800a18e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d002      	beq.n	8009f72 <USBD_StdEPReq+0x8a>
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d015      	beq.n	8009f9c <USBD_StdEPReq+0xb4>
 8009f70:	e02b      	b.n	8009fca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00c      	beq.n	8009f92 <USBD_StdEPReq+0xaa>
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	2b80      	cmp	r3, #128	@ 0x80
 8009f7c:	d009      	beq.n	8009f92 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 f8c8 	bl	800b118 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f88:	2180      	movs	r1, #128	@ 0x80
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f8c4 	bl	800b118 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f90:	e020      	b.n	8009fd4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fc1b 	bl	800a7d0 <USBD_CtlError>
              break;
 8009f9a:	e01b      	b.n	8009fd4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	885b      	ldrh	r3, [r3, #2]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10e      	bne.n	8009fc2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00b      	beq.n	8009fc2 <USBD_StdEPReq+0xda>
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	2b80      	cmp	r3, #128	@ 0x80
 8009fae:	d008      	beq.n	8009fc2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	88db      	ldrh	r3, [r3, #6]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d104      	bne.n	8009fc2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 f8ab 	bl	800b118 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fccc 	bl	800a960 <USBD_CtlSendStatus>

              break;
 8009fc8:	e004      	b.n	8009fd4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fbff 	bl	800a7d0 <USBD_CtlError>
              break;
 8009fd2:	bf00      	nop
          }
          break;
 8009fd4:	e0e0      	b.n	800a198 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d002      	beq.n	8009fe6 <USBD_StdEPReq+0xfe>
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d015      	beq.n	800a010 <USBD_StdEPReq+0x128>
 8009fe4:	e026      	b.n	800a034 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00c      	beq.n	800a006 <USBD_StdEPReq+0x11e>
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	2b80      	cmp	r3, #128	@ 0x80
 8009ff0:	d009      	beq.n	800a006 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 f88e 	bl	800b118 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ffc:	2180      	movs	r1, #128	@ 0x80
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 f88a 	bl	800b118 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a004:	e01c      	b.n	800a040 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fbe1 	bl	800a7d0 <USBD_CtlError>
              break;
 800a00e:	e017      	b.n	800a040 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	885b      	ldrh	r3, [r3, #2]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d112      	bne.n	800a03e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d004      	beq.n	800a02c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 f895 	bl	800b156 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fc97 	bl	800a960 <USBD_CtlSendStatus>
              }
              break;
 800a032:	e004      	b.n	800a03e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fbca 	bl	800a7d0 <USBD_CtlError>
              break;
 800a03c:	e000      	b.n	800a040 <USBD_StdEPReq+0x158>
              break;
 800a03e:	bf00      	nop
          }
          break;
 800a040:	e0aa      	b.n	800a198 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d002      	beq.n	800a052 <USBD_StdEPReq+0x16a>
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d032      	beq.n	800a0b6 <USBD_StdEPReq+0x1ce>
 800a050:	e097      	b.n	800a182 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d007      	beq.n	800a068 <USBD_StdEPReq+0x180>
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	2b80      	cmp	r3, #128	@ 0x80
 800a05c:	d004      	beq.n	800a068 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fbb5 	bl	800a7d0 <USBD_CtlError>
                break;
 800a066:	e091      	b.n	800a18c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	da0b      	bge.n	800a088 <USBD_StdEPReq+0x1a0>
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	3310      	adds	r3, #16
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	4413      	add	r3, r2
 800a084:	3304      	adds	r3, #4
 800a086:	e00b      	b.n	800a0a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	3304      	adds	r3, #4
 800a0a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fbf8 	bl	800a8a4 <USBD_CtlSendData>
              break;
 800a0b4:	e06a      	b.n	800a18c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	da11      	bge.n	800a0e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	f003 020f 	and.w	r2, r3, #15
 800a0c4:	6879      	ldr	r1, [r7, #4]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	440b      	add	r3, r1
 800a0d0:	3318      	adds	r3, #24
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d117      	bne.n	800a108 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fb78 	bl	800a7d0 <USBD_CtlError>
                  break;
 800a0e0:	e054      	b.n	800a18c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	f003 020f 	and.w	r2, r3, #15
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d104      	bne.n	800a108 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fb65 	bl	800a7d0 <USBD_CtlError>
                  break;
 800a106:	e041      	b.n	800a18c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	da0b      	bge.n	800a128 <USBD_StdEPReq+0x240>
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	3310      	adds	r3, #16
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	4413      	add	r3, r2
 800a124:	3304      	adds	r3, #4
 800a126:	e00b      	b.n	800a140 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a12e:	4613      	mov	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	3304      	adds	r3, #4
 800a140:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <USBD_StdEPReq+0x266>
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	2b80      	cmp	r3, #128	@ 0x80
 800a14c:	d103      	bne.n	800a156 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2200      	movs	r2, #0
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e00e      	b.n	800a174 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 f81a 	bl	800b194 <USBD_LL_IsStallEP>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2201      	movs	r2, #1
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	e002      	b.n	800a174 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2202      	movs	r2, #2
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fb92 	bl	800a8a4 <USBD_CtlSendData>
              break;
 800a180:	e004      	b.n	800a18c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fb23 	bl	800a7d0 <USBD_CtlError>
              break;
 800a18a:	bf00      	nop
          }
          break;
 800a18c:	e004      	b.n	800a198 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fb1d 	bl	800a7d0 <USBD_CtlError>
          break;
 800a196:	bf00      	nop
      }
      break;
 800a198:	e004      	b.n	800a1a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fb17 	bl	800a7d0 <USBD_CtlError>
      break;
 800a1a2:	bf00      	nop
  }

  return ret;
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	885b      	ldrh	r3, [r3, #2]
 800a1ca:	0a1b      	lsrs	r3, r3, #8
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	2b06      	cmp	r3, #6
 800a1d2:	f200 8128 	bhi.w	800a426 <USBD_GetDescriptor+0x276>
 800a1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1dc <USBD_GetDescriptor+0x2c>)
 800a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1dc:	0800a1f9 	.word	0x0800a1f9
 800a1e0:	0800a211 	.word	0x0800a211
 800a1e4:	0800a251 	.word	0x0800a251
 800a1e8:	0800a427 	.word	0x0800a427
 800a1ec:	0800a427 	.word	0x0800a427
 800a1f0:	0800a3c7 	.word	0x0800a3c7
 800a1f4:	0800a3f3 	.word	0x0800a3f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	7c12      	ldrb	r2, [r2, #16]
 800a204:	f107 0108 	add.w	r1, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
      break;
 800a20e:	e112      	b.n	800a436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	7c1b      	ldrb	r3, [r3, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10d      	bne.n	800a234 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a220:	f107 0208 	add.w	r2, r7, #8
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3301      	adds	r3, #1
 800a22e:	2202      	movs	r2, #2
 800a230:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a232:	e100      	b.n	800a436 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23c:	f107 0208 	add.w	r2, r7, #8
 800a240:	4610      	mov	r0, r2
 800a242:	4798      	blx	r3
 800a244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	3301      	adds	r3, #1
 800a24a:	2202      	movs	r2, #2
 800a24c:	701a      	strb	r2, [r3, #0]
      break;
 800a24e:	e0f2      	b.n	800a436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	885b      	ldrh	r3, [r3, #2]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b05      	cmp	r3, #5
 800a258:	f200 80ac 	bhi.w	800a3b4 <USBD_GetDescriptor+0x204>
 800a25c:	a201      	add	r2, pc, #4	@ (adr r2, 800a264 <USBD_GetDescriptor+0xb4>)
 800a25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a262:	bf00      	nop
 800a264:	0800a27d 	.word	0x0800a27d
 800a268:	0800a2b1 	.word	0x0800a2b1
 800a26c:	0800a2e5 	.word	0x0800a2e5
 800a270:	0800a319 	.word	0x0800a319
 800a274:	0800a34d 	.word	0x0800a34d
 800a278:	0800a381 	.word	0x0800a381
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00b      	beq.n	800a2a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	7c12      	ldrb	r2, [r2, #16]
 800a294:	f107 0108 	add.w	r1, r7, #8
 800a298:	4610      	mov	r0, r2
 800a29a:	4798      	blx	r3
 800a29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a29e:	e091      	b.n	800a3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fa94 	bl	800a7d0 <USBD_CtlError>
            err++;
 800a2a8:	7afb      	ldrb	r3, [r7, #11]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ae:	e089      	b.n	800a3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00b      	beq.n	800a2d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	7c12      	ldrb	r2, [r2, #16]
 800a2c8:	f107 0108 	add.w	r1, r7, #8
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4798      	blx	r3
 800a2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2d2:	e077      	b.n	800a3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fa7a 	bl	800a7d0 <USBD_CtlError>
            err++;
 800a2dc:	7afb      	ldrb	r3, [r7, #11]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2e2:	e06f      	b.n	800a3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	7c12      	ldrb	r2, [r2, #16]
 800a2fc:	f107 0108 	add.w	r1, r7, #8
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
 800a304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a306:	e05d      	b.n	800a3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fa60 	bl	800a7d0 <USBD_CtlError>
            err++;
 800a310:	7afb      	ldrb	r3, [r7, #11]
 800a312:	3301      	adds	r3, #1
 800a314:	72fb      	strb	r3, [r7, #11]
          break;
 800a316:	e055      	b.n	800a3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	7c12      	ldrb	r2, [r2, #16]
 800a330:	f107 0108 	add.w	r1, r7, #8
 800a334:	4610      	mov	r0, r2
 800a336:	4798      	blx	r3
 800a338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a33a:	e043      	b.n	800a3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fa46 	bl	800a7d0 <USBD_CtlError>
            err++;
 800a344:	7afb      	ldrb	r3, [r7, #11]
 800a346:	3301      	adds	r3, #1
 800a348:	72fb      	strb	r3, [r7, #11]
          break;
 800a34a:	e03b      	b.n	800a3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a35e:	695b      	ldr	r3, [r3, #20]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	7c12      	ldrb	r2, [r2, #16]
 800a364:	f107 0108 	add.w	r1, r7, #8
 800a368:	4610      	mov	r0, r2
 800a36a:	4798      	blx	r3
 800a36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36e:	e029      	b.n	800a3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa2c 	bl	800a7d0 <USBD_CtlError>
            err++;
 800a378:	7afb      	ldrb	r3, [r7, #11]
 800a37a:	3301      	adds	r3, #1
 800a37c:	72fb      	strb	r3, [r7, #11]
          break;
 800a37e:	e021      	b.n	800a3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00b      	beq.n	800a3a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	7c12      	ldrb	r2, [r2, #16]
 800a398:	f107 0108 	add.w	r1, r7, #8
 800a39c:	4610      	mov	r0, r2
 800a39e:	4798      	blx	r3
 800a3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3a2:	e00f      	b.n	800a3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fa12 	bl	800a7d0 <USBD_CtlError>
            err++;
 800a3ac:	7afb      	ldrb	r3, [r7, #11]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3b2:	e007      	b.n	800a3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fa0a 	bl	800a7d0 <USBD_CtlError>
          err++;
 800a3bc:	7afb      	ldrb	r3, [r7, #11]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a3c2:	e038      	b.n	800a436 <USBD_GetDescriptor+0x286>
 800a3c4:	e037      	b.n	800a436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	7c1b      	ldrb	r3, [r3, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d109      	bne.n	800a3e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3d6:	f107 0208 	add.w	r2, r7, #8
 800a3da:	4610      	mov	r0, r2
 800a3dc:	4798      	blx	r3
 800a3de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3e0:	e029      	b.n	800a436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f9f3 	bl	800a7d0 <USBD_CtlError>
        err++;
 800a3ea:	7afb      	ldrb	r3, [r7, #11]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a3f0:	e021      	b.n	800a436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	7c1b      	ldrb	r3, [r3, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10d      	bne.n	800a416 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a402:	f107 0208 	add.w	r2, r7, #8
 800a406:	4610      	mov	r0, r2
 800a408:	4798      	blx	r3
 800a40a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3301      	adds	r3, #1
 800a410:	2207      	movs	r2, #7
 800a412:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a414:	e00f      	b.n	800a436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f9d9 	bl	800a7d0 <USBD_CtlError>
        err++;
 800a41e:	7afb      	ldrb	r3, [r7, #11]
 800a420:	3301      	adds	r3, #1
 800a422:	72fb      	strb	r3, [r7, #11]
      break;
 800a424:	e007      	b.n	800a436 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f9d1 	bl	800a7d0 <USBD_CtlError>
      err++;
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	3301      	adds	r3, #1
 800a432:	72fb      	strb	r3, [r7, #11]
      break;
 800a434:	bf00      	nop
  }

  if (err != 0U)
 800a436:	7afb      	ldrb	r3, [r7, #11]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d11c      	bne.n	800a476 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a43c:	893b      	ldrh	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d011      	beq.n	800a466 <USBD_GetDescriptor+0x2b6>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	88db      	ldrh	r3, [r3, #6]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00d      	beq.n	800a466 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	88da      	ldrh	r2, [r3, #6]
 800a44e:	893b      	ldrh	r3, [r7, #8]
 800a450:	4293      	cmp	r3, r2
 800a452:	bf28      	it	cs
 800a454:	4613      	movcs	r3, r2
 800a456:	b29b      	uxth	r3, r3
 800a458:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a45a:	893b      	ldrh	r3, [r7, #8]
 800a45c:	461a      	mov	r2, r3
 800a45e:	68f9      	ldr	r1, [r7, #12]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fa1f 	bl	800a8a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	88db      	ldrh	r3, [r3, #6]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d104      	bne.n	800a478 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fa76 	bl	800a960 <USBD_CtlSendStatus>
 800a474:	e000      	b.n	800a478 <USBD_GetDescriptor+0x2c8>
    return;
 800a476:	bf00      	nop
    }
  }
}
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop

0800a480 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	889b      	ldrh	r3, [r3, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d130      	bne.n	800a4f4 <USBD_SetAddress+0x74>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	88db      	ldrh	r3, [r3, #6]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d12c      	bne.n	800a4f4 <USBD_SetAddress+0x74>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	885b      	ldrh	r3, [r3, #2]
 800a49e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4a0:	d828      	bhi.n	800a4f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	885b      	ldrh	r3, [r3, #2]
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d104      	bne.n	800a4c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f988 	bl	800a7d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c0:	e01d      	b.n	800a4fe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	7bfa      	ldrb	r2, [r7, #15]
 800a4c6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fe8b 	bl	800b1ea <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fa43 	bl	800a960 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d004      	beq.n	800a4ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e8:	e009      	b.n	800a4fe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f2:	e004      	b.n	800a4fe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f96a 	bl	800a7d0 <USBD_CtlError>
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	bf00      	nop
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	885b      	ldrh	r3, [r3, #2]
 800a516:	b2da      	uxtb	r2, r3
 800a518:	4b41      	ldr	r3, [pc, #260]	@ (800a620 <USBD_SetConfig+0x118>)
 800a51a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a51c:	4b40      	ldr	r3, [pc, #256]	@ (800a620 <USBD_SetConfig+0x118>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d904      	bls.n	800a52e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f952 	bl	800a7d0 <USBD_CtlError>
 800a52c:	e075      	b.n	800a61a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a534:	2b02      	cmp	r3, #2
 800a536:	d002      	beq.n	800a53e <USBD_SetConfig+0x36>
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d023      	beq.n	800a584 <USBD_SetConfig+0x7c>
 800a53c:	e062      	b.n	800a604 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a53e:	4b38      	ldr	r3, [pc, #224]	@ (800a620 <USBD_SetConfig+0x118>)
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d01a      	beq.n	800a57c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a546:	4b36      	ldr	r3, [pc, #216]	@ (800a620 <USBD_SetConfig+0x118>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2203      	movs	r2, #3
 800a554:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a558:	4b31      	ldr	r3, [pc, #196]	@ (800a620 <USBD_SetConfig+0x118>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff f9e7 	bl	8009932 <USBD_SetClassConfig>
 800a564:	4603      	mov	r3, r0
 800a566:	2b02      	cmp	r3, #2
 800a568:	d104      	bne.n	800a574 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f92f 	bl	800a7d0 <USBD_CtlError>
            return;
 800a572:	e052      	b.n	800a61a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f9f3 	bl	800a960 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a57a:	e04e      	b.n	800a61a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f9ef 	bl	800a960 <USBD_CtlSendStatus>
        break;
 800a582:	e04a      	b.n	800a61a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a584:	4b26      	ldr	r3, [pc, #152]	@ (800a620 <USBD_SetConfig+0x118>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d112      	bne.n	800a5b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a594:	4b22      	ldr	r3, [pc, #136]	@ (800a620 <USBD_SetConfig+0x118>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	461a      	mov	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a59e:	4b20      	ldr	r3, [pc, #128]	@ (800a620 <USBD_SetConfig+0x118>)
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff f9e3 	bl	8009970 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f9d8 	bl	800a960 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5b0:	e033      	b.n	800a61a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a5b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a620 <USBD_SetConfig+0x118>)
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d01d      	beq.n	800a5fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff f9d1 	bl	8009970 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a5ce:	4b14      	ldr	r3, [pc, #80]	@ (800a620 <USBD_SetConfig+0x118>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5d8:	4b11      	ldr	r3, [pc, #68]	@ (800a620 <USBD_SetConfig+0x118>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff f9a7 	bl	8009932 <USBD_SetClassConfig>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d104      	bne.n	800a5f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f8ef 	bl	800a7d0 <USBD_CtlError>
            return;
 800a5f2:	e012      	b.n	800a61a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f9b3 	bl	800a960 <USBD_CtlSendStatus>
        break;
 800a5fa:	e00e      	b.n	800a61a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f9af 	bl	800a960 <USBD_CtlSendStatus>
        break;
 800a602:	e00a      	b.n	800a61a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f8e2 	bl	800a7d0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a60c:	4b04      	ldr	r3, [pc, #16]	@ (800a620 <USBD_SetConfig+0x118>)
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff f9ac 	bl	8009970 <USBD_ClrClassConfig>
        break;
 800a618:	bf00      	nop
    }
  }
}
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	200004dc 	.word	0x200004dc

0800a624 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	88db      	ldrh	r3, [r3, #6]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d004      	beq.n	800a640 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f8c9 	bl	800a7d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a63e:	e022      	b.n	800a686 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a646:	2b02      	cmp	r3, #2
 800a648:	dc02      	bgt.n	800a650 <USBD_GetConfig+0x2c>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	dc03      	bgt.n	800a656 <USBD_GetConfig+0x32>
 800a64e:	e015      	b.n	800a67c <USBD_GetConfig+0x58>
 800a650:	2b03      	cmp	r3, #3
 800a652:	d00b      	beq.n	800a66c <USBD_GetConfig+0x48>
 800a654:	e012      	b.n	800a67c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	3308      	adds	r3, #8
 800a660:	2201      	movs	r2, #1
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f91d 	bl	800a8a4 <USBD_CtlSendData>
        break;
 800a66a:	e00c      	b.n	800a686 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3304      	adds	r3, #4
 800a670:	2201      	movs	r2, #1
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f915 	bl	800a8a4 <USBD_CtlSendData>
        break;
 800a67a:	e004      	b.n	800a686 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f8a6 	bl	800a7d0 <USBD_CtlError>
        break;
 800a684:	bf00      	nop
}
 800a686:	bf00      	nop
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d81e      	bhi.n	800a6e2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	88db      	ldrh	r3, [r3, #6]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d004      	beq.n	800a6b6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f88e 	bl	800a7d0 <USBD_CtlError>
        break;
 800a6b4:	e01a      	b.n	800a6ec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d005      	beq.n	800a6d2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f043 0202 	orr.w	r2, r3, #2
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	330c      	adds	r3, #12
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f8e2 	bl	800a8a4 <USBD_CtlSendData>
      break;
 800a6e0:	e004      	b.n	800a6ec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f873 	bl	800a7d0 <USBD_CtlError>
      break;
 800a6ea:	bf00      	nop
  }
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	885b      	ldrh	r3, [r3, #2]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d106      	bne.n	800a714 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f926 	bl	800a960 <USBD_CtlSendStatus>
  }
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a72c:	3b01      	subs	r3, #1
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d80b      	bhi.n	800a74a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	885b      	ldrh	r3, [r3, #2]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d10c      	bne.n	800a754 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f90c 	bl	800a960 <USBD_CtlSendStatus>
      }
      break;
 800a748:	e004      	b.n	800a754 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f83f 	bl	800a7d0 <USBD_CtlError>
      break;
 800a752:	e000      	b.n	800a756 <USBD_ClrFeature+0x3a>
      break;
 800a754:	bf00      	nop
  }
}
 800a756:	bf00      	nop
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781a      	ldrb	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	785a      	ldrb	r2, [r3, #1]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	3302      	adds	r3, #2
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	3303      	adds	r3, #3
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	b29b      	uxth	r3, r3
 800a78a:	4413      	add	r3, r2
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	3304      	adds	r3, #4
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	461a      	mov	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	3305      	adds	r3, #5
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	021b      	lsls	r3, r3, #8
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	4413      	add	r3, r2
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	3306      	adds	r3, #6
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	3307      	adds	r3, #7
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	021b      	lsls	r3, r3, #8
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	4413      	add	r3, r2
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	80da      	strh	r2, [r3, #6]

}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bc80      	pop	{r7}
 800a7ce:	4770      	bx	lr

0800a7d0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a7da:	2180      	movs	r1, #128	@ 0x80
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fc9b 	bl	800b118 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fc97 	bl	800b118 <USBD_LL_StallEP>
}
 800a7ea:	bf00      	nop
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b086      	sub	sp, #24
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7fe:	2300      	movs	r3, #0
 800a800:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d032      	beq.n	800a86e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f834 	bl	800a876 <USBD_GetLen>
 800a80e:	4603      	mov	r3, r0
 800a810:	3301      	adds	r3, #1
 800a812:	b29b      	uxth	r3, r3
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	b29a      	uxth	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	75fa      	strb	r2, [r7, #23]
 800a822:	461a      	mov	r2, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4413      	add	r3, r2
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	7812      	ldrb	r2, [r2, #0]
 800a82c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	75fa      	strb	r2, [r7, #23]
 800a834:	461a      	mov	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	4413      	add	r3, r2
 800a83a:	2203      	movs	r2, #3
 800a83c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a83e:	e012      	b.n	800a866 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	60fa      	str	r2, [r7, #12]
 800a846:	7dfa      	ldrb	r2, [r7, #23]
 800a848:	1c51      	adds	r1, r2, #1
 800a84a:	75f9      	strb	r1, [r7, #23]
 800a84c:	4611      	mov	r1, r2
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	440a      	add	r2, r1
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	1c5a      	adds	r2, r3, #1
 800a85a:	75fa      	strb	r2, [r7, #23]
 800a85c:	461a      	mov	r2, r3
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	4413      	add	r3, r2
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e8      	bne.n	800a840 <USBD_GetString+0x4e>
    }
  }
}
 800a86e:	bf00      	nop
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a876:	b480      	push	{r7}
 800a878:	b085      	sub	sp, #20
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a882:	e005      	b.n	800a890 <USBD_GetLen+0x1a>
  {
    len++;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	3301      	adds	r3, #1
 800a888:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3301      	adds	r3, #1
 800a88e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1f5      	bne.n	800a884 <USBD_GetLen+0xe>
  }

  return len;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a8ba:	88fa      	ldrh	r2, [r7, #6]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a8c0:	88fa      	ldrh	r2, [r7, #6]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 fcab 	bl	800b228 <USBD_LL_Transmit>

  return USBD_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8ea:	88fb      	ldrh	r3, [r7, #6]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 fc99 	bl	800b228 <USBD_LL_Transmit>

  return USBD_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	4613      	mov	r3, r2
 800a90c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2203      	movs	r2, #3
 800a912:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a916:	88fa      	ldrh	r2, [r7, #6]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a91e:	88fa      	ldrh	r2, [r7, #6]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a926:	88fb      	ldrh	r3, [r7, #6]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	2100      	movs	r1, #0
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f000 fc9e 	bl	800b26e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	4613      	mov	r3, r2
 800a948:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	2100      	movs	r1, #0
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fc8c 	bl	800b26e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2204      	movs	r2, #4
 800a96c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a970:	2300      	movs	r3, #0
 800a972:	2200      	movs	r2, #0
 800a974:	2100      	movs	r1, #0
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fc56 	bl	800b228 <USBD_LL_Transmit>

  return USBD_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2205      	movs	r2, #5
 800a992:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a996:	2300      	movs	r3, #0
 800a998:	2200      	movs	r2, #0
 800a99a:	2100      	movs	r1, #0
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fc66 	bl	800b26e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	4912      	ldr	r1, [pc, #72]	@ (800a9fc <MX_USB_DEVICE_Init+0x50>)
 800a9b4:	4812      	ldr	r0, [pc, #72]	@ (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9b6:	f7fe ff62 	bl	800987e <USBD_Init>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9c0:	f7f7 f82a 	bl	8001a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a9c4:	490f      	ldr	r1, [pc, #60]	@ (800aa04 <MX_USB_DEVICE_Init+0x58>)
 800a9c6:	480e      	ldr	r0, [pc, #56]	@ (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9c8:	f7fe ff84 	bl	80098d4 <USBD_RegisterClass>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9d2:	f7f7 f821 	bl	8001a18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9d6:	490c      	ldr	r1, [pc, #48]	@ (800aa08 <MX_USB_DEVICE_Init+0x5c>)
 800a9d8:	4809      	ldr	r0, [pc, #36]	@ (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9da:	f7fe feb5 	bl	8009748 <USBD_CDC_RegisterInterface>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a9e4:	f7f7 f818 	bl	8001a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9e8:	4805      	ldr	r0, [pc, #20]	@ (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9ea:	f7fe ff8c 	bl	8009906 <USBD_Start>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a9f4:	f7f7 f810 	bl	8001a18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9f8:	bf00      	nop
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	20000130 	.word	0x20000130
 800aa00:	200004e0 	.word	0x200004e0
 800aa04:	2000001c 	.word	0x2000001c
 800aa08:	20000120 	.word	0x20000120

0800aa0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa10:	2200      	movs	r2, #0
 800aa12:	4905      	ldr	r1, [pc, #20]	@ (800aa28 <CDC_Init_FS+0x1c>)
 800aa14:	4805      	ldr	r0, [pc, #20]	@ (800aa2c <CDC_Init_FS+0x20>)
 800aa16:	f7fe fead 	bl	8009774 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa1a:	4905      	ldr	r1, [pc, #20]	@ (800aa30 <CDC_Init_FS+0x24>)
 800aa1c:	4803      	ldr	r0, [pc, #12]	@ (800aa2c <CDC_Init_FS+0x20>)
 800aa1e:	f7fe fec2 	bl	80097a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20000ba4 	.word	0x20000ba4
 800aa2c:	200004e0 	.word	0x200004e0
 800aa30:	200007a4 	.word	0x200007a4

0800aa34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa34:	b480      	push	{r7}
 800aa36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bc80      	pop	{r7}
 800aa40:	4770      	bx	lr
	...

0800aa44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	71fb      	strb	r3, [r7, #7]
 800aa50:	4613      	mov	r3, r2
 800aa52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	2b23      	cmp	r3, #35	@ 0x23
 800aa58:	d84a      	bhi.n	800aaf0 <CDC_Control_FS+0xac>
 800aa5a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa60 <CDC_Control_FS+0x1c>)
 800aa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa60:	0800aaf1 	.word	0x0800aaf1
 800aa64:	0800aaf1 	.word	0x0800aaf1
 800aa68:	0800aaf1 	.word	0x0800aaf1
 800aa6c:	0800aaf1 	.word	0x0800aaf1
 800aa70:	0800aaf1 	.word	0x0800aaf1
 800aa74:	0800aaf1 	.word	0x0800aaf1
 800aa78:	0800aaf1 	.word	0x0800aaf1
 800aa7c:	0800aaf1 	.word	0x0800aaf1
 800aa80:	0800aaf1 	.word	0x0800aaf1
 800aa84:	0800aaf1 	.word	0x0800aaf1
 800aa88:	0800aaf1 	.word	0x0800aaf1
 800aa8c:	0800aaf1 	.word	0x0800aaf1
 800aa90:	0800aaf1 	.word	0x0800aaf1
 800aa94:	0800aaf1 	.word	0x0800aaf1
 800aa98:	0800aaf1 	.word	0x0800aaf1
 800aa9c:	0800aaf1 	.word	0x0800aaf1
 800aaa0:	0800aaf1 	.word	0x0800aaf1
 800aaa4:	0800aaf1 	.word	0x0800aaf1
 800aaa8:	0800aaf1 	.word	0x0800aaf1
 800aaac:	0800aaf1 	.word	0x0800aaf1
 800aab0:	0800aaf1 	.word	0x0800aaf1
 800aab4:	0800aaf1 	.word	0x0800aaf1
 800aab8:	0800aaf1 	.word	0x0800aaf1
 800aabc:	0800aaf1 	.word	0x0800aaf1
 800aac0:	0800aaf1 	.word	0x0800aaf1
 800aac4:	0800aaf1 	.word	0x0800aaf1
 800aac8:	0800aaf1 	.word	0x0800aaf1
 800aacc:	0800aaf1 	.word	0x0800aaf1
 800aad0:	0800aaf1 	.word	0x0800aaf1
 800aad4:	0800aaf1 	.word	0x0800aaf1
 800aad8:	0800aaf1 	.word	0x0800aaf1
 800aadc:	0800aaf1 	.word	0x0800aaf1
 800aae0:	0800aaf1 	.word	0x0800aaf1
 800aae4:	0800aaf1 	.word	0x0800aaf1
 800aae8:	0800aaf1 	.word	0x0800aaf1
 800aaec:	0800aaf1 	.word	0x0800aaf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aaf0:	bf00      	nop
  }

  return (USBD_OK);
 800aaf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bc80      	pop	{r7}
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop

0800ab00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	480a      	ldr	r0, [pc, #40]	@ (800ab38 <CDC_Receive_FS+0x38>)
 800ab0e:	f7fe fe4a 	bl	80097a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab12:	4809      	ldr	r0, [pc, #36]	@ (800ab38 <CDC_Receive_FS+0x38>)
 800ab14:	f7fe fe89 	bl	800982a <USBD_CDC_ReceivePacket>
  data_recieved += strlen(UserRxBufferFS);
 800ab18:	4808      	ldr	r0, [pc, #32]	@ (800ab3c <CDC_Receive_FS+0x3c>)
 800ab1a:	f7f5 fb19 	bl	8000150 <strlen>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	4b07      	ldr	r3, [pc, #28]	@ (800ab40 <CDC_Receive_FS+0x40>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	4413      	add	r3, r2
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	4b05      	ldr	r3, [pc, #20]	@ (800ab40 <CDC_Receive_FS+0x40>)
 800ab2c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800ab2e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	200004e0 	.word	0x200004e0
 800ab3c:	200007a4 	.word	0x200007a4
 800ab40:	20000fa4 	.word	0x20000fa4

0800ab44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab54:	4b0d      	ldr	r3, [pc, #52]	@ (800ab8c <CDC_Transmit_FS+0x48>)
 800ab56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e00b      	b.n	800ab82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab6a:	887b      	ldrh	r3, [r7, #2]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	4806      	ldr	r0, [pc, #24]	@ (800ab8c <CDC_Transmit_FS+0x48>)
 800ab72:	f7fe fdff 	bl	8009774 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab76:	4805      	ldr	r0, [pc, #20]	@ (800ab8c <CDC_Transmit_FS+0x48>)
 800ab78:	f7fe fe28 	bl	80097cc <USBD_CDC_TransmitPacket>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	200004e0 	.word	0x200004e0

0800ab90 <CDC_data_recieved>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_data_recieved()
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
	return data_recieved;
 800ab94:	4b02      	ldr	r3, [pc, #8]	@ (800aba0 <CDC_data_recieved+0x10>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bc80      	pop	{r7}
 800ab9e:	4770      	bx	lr
 800aba0:	20000fa4 	.word	0x20000fa4

0800aba4 <CDC_Receive_data>:

uint8_t CDC_Receive_data(uint8_t* buf, size_t size)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
	if (data_recieved + 1 <= size) size = data_recieved + 1;
 800abae:	4b13      	ldr	r3, [pc, #76]	@ (800abfc <CDC_Receive_data+0x58>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	3301      	adds	r3, #1
 800abb4:	461a      	mov	r2, r3
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	4293      	cmp	r3, r2
 800abba:	d303      	bcc.n	800abc4 <CDC_Receive_data+0x20>
 800abbc:	4b0f      	ldr	r3, [pc, #60]	@ (800abfc <CDC_Receive_data+0x58>)
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	3301      	adds	r3, #1
 800abc2:	603b      	str	r3, [r7, #0]
	memset(buf, '\0', size);
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	2100      	movs	r1, #0
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 fbe8 	bl	800c39e <memset>
	memcpy(buf, UserRxBufferFS, size);
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	490b      	ldr	r1, [pc, #44]	@ (800ac00 <CDC_Receive_data+0x5c>)
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f001 fc71 	bl	800c4ba <memcpy>
	memset(UserRxBufferFS, '\0', data_recieved);
 800abd8:	4b08      	ldr	r3, [pc, #32]	@ (800abfc <CDC_Receive_data+0x58>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	461a      	mov	r2, r3
 800abde:	2100      	movs	r1, #0
 800abe0:	4807      	ldr	r0, [pc, #28]	@ (800ac00 <CDC_Receive_data+0x5c>)
 800abe2:	f001 fbdc 	bl	800c39e <memset>
	data_recieved = 0;
 800abe6:	4b05      	ldr	r3, [pc, #20]	@ (800abfc <CDC_Receive_data+0x58>)
 800abe8:	2200      	movs	r2, #0
 800abea:	701a      	strb	r2, [r3, #0]
	return size - 1;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	3b01      	subs	r3, #1
 800abf2:	b2db      	uxtb	r3, r3
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20000fa4 	.word	0x20000fa4
 800ac00:	200007a4 	.word	0x200007a4

0800ac04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2212      	movs	r2, #18
 800ac14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac16:	4b03      	ldr	r3, [pc, #12]	@ (800ac24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bc80      	pop	{r7}
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	2000014c 	.word	0x2000014c

0800ac28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	6039      	str	r1, [r7, #0]
 800ac32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	2204      	movs	r2, #4
 800ac38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac3a:	4b03      	ldr	r3, [pc, #12]	@ (800ac48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bc80      	pop	{r7}
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000160 	.word	0x20000160

0800ac4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	6039      	str	r1, [r7, #0]
 800ac56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d105      	bne.n	800ac6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	4907      	ldr	r1, [pc, #28]	@ (800ac80 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac62:	4808      	ldr	r0, [pc, #32]	@ (800ac84 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac64:	f7ff fdc5 	bl	800a7f2 <USBD_GetString>
 800ac68:	e004      	b.n	800ac74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4904      	ldr	r1, [pc, #16]	@ (800ac80 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac6e:	4805      	ldr	r0, [pc, #20]	@ (800ac84 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac70:	f7ff fdbf 	bl	800a7f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac74:	4b02      	ldr	r3, [pc, #8]	@ (800ac80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000fa8 	.word	0x20000fa8
 800ac84:	0800f108 	.word	0x0800f108

0800ac88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	4904      	ldr	r1, [pc, #16]	@ (800aca8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac98:	4804      	ldr	r0, [pc, #16]	@ (800acac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac9a:	f7ff fdaa 	bl	800a7f2 <USBD_GetString>
  return USBD_StrDesc;
 800ac9e:	4b02      	ldr	r3, [pc, #8]	@ (800aca8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	20000fa8 	.word	0x20000fa8
 800acac:	0800f120 	.word	0x0800f120

0800acb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	6039      	str	r1, [r7, #0]
 800acba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	221a      	movs	r2, #26
 800acc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acc2:	f000 f843 	bl	800ad4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800acc6:	4b02      	ldr	r3, [pc, #8]	@ (800acd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20000164 	.word	0x20000164

0800acd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d105      	bne.n	800acf2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4907      	ldr	r1, [pc, #28]	@ (800ad08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800acea:	4808      	ldr	r0, [pc, #32]	@ (800ad0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800acec:	f7ff fd81 	bl	800a7f2 <USBD_GetString>
 800acf0:	e004      	b.n	800acfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4904      	ldr	r1, [pc, #16]	@ (800ad08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800acf6:	4805      	ldr	r0, [pc, #20]	@ (800ad0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800acf8:	f7ff fd7b 	bl	800a7f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acfc:	4b02      	ldr	r3, [pc, #8]	@ (800ad08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000fa8 	.word	0x20000fa8
 800ad0c:	0800f134 	.word	0x0800f134

0800ad10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	4907      	ldr	r1, [pc, #28]	@ (800ad44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad26:	4808      	ldr	r0, [pc, #32]	@ (800ad48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad28:	f7ff fd63 	bl	800a7f2 <USBD_GetString>
 800ad2c:	e004      	b.n	800ad38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	4904      	ldr	r1, [pc, #16]	@ (800ad44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad32:	4805      	ldr	r0, [pc, #20]	@ (800ad48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad34:	f7ff fd5d 	bl	800a7f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad38:	4b02      	ldr	r3, [pc, #8]	@ (800ad44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20000fa8 	.word	0x20000fa8
 800ad48:	0800f140 	.word	0x0800f140

0800ad4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad52:	4b0f      	ldr	r3, [pc, #60]	@ (800ad90 <Get_SerialNum+0x44>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad58:	4b0e      	ldr	r3, [pc, #56]	@ (800ad94 <Get_SerialNum+0x48>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad98 <Get_SerialNum+0x4c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4413      	add	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad72:	2208      	movs	r2, #8
 800ad74:	4909      	ldr	r1, [pc, #36]	@ (800ad9c <Get_SerialNum+0x50>)
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 f814 	bl	800ada4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad7c:	2204      	movs	r2, #4
 800ad7e:	4908      	ldr	r1, [pc, #32]	@ (800ada0 <Get_SerialNum+0x54>)
 800ad80:	68b8      	ldr	r0, [r7, #8]
 800ad82:	f000 f80f 	bl	800ada4 <IntToUnicode>
  }
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	1ffff7e8 	.word	0x1ffff7e8
 800ad94:	1ffff7ec 	.word	0x1ffff7ec
 800ad98:	1ffff7f0 	.word	0x1ffff7f0
 800ad9c:	20000166 	.word	0x20000166
 800ada0:	20000176 	.word	0x20000176

0800ada4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	4613      	mov	r3, r2
 800adb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800adb6:	2300      	movs	r3, #0
 800adb8:	75fb      	strb	r3, [r7, #23]
 800adba:	e027      	b.n	800ae0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	0f1b      	lsrs	r3, r3, #28
 800adc0:	2b09      	cmp	r3, #9
 800adc2:	d80b      	bhi.n	800addc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	0f1b      	lsrs	r3, r3, #28
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	4619      	mov	r1, r3
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	440b      	add	r3, r1
 800add4:	3230      	adds	r2, #48	@ 0x30
 800add6:	b2d2      	uxtb	r2, r2
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	e00a      	b.n	800adf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	0f1b      	lsrs	r3, r3, #28
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	4619      	mov	r1, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	440b      	add	r3, r1
 800adec:	3237      	adds	r2, #55	@ 0x37
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	3301      	adds	r3, #1
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	4413      	add	r3, r2
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	75fb      	strb	r3, [r7, #23]
 800ae0c:	7dfa      	ldrb	r2, [r7, #23]
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d3d3      	bcc.n	800adbc <IntToUnicode+0x18>
  }
}
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bc80      	pop	{r7}
 800ae1e:	4770      	bx	lr

0800ae20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a0d      	ldr	r2, [pc, #52]	@ (800ae64 <HAL_PCD_MspInit+0x44>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d113      	bne.n	800ae5a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae32:	4b0d      	ldr	r3, [pc, #52]	@ (800ae68 <HAL_PCD_MspInit+0x48>)
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	4a0c      	ldr	r2, [pc, #48]	@ (800ae68 <HAL_PCD_MspInit+0x48>)
 800ae38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae3c:	61d3      	str	r3, [r2, #28]
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae68 <HAL_PCD_MspInit+0x48>)
 800ae40:	69db      	ldr	r3, [r3, #28]
 800ae42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	2014      	movs	r0, #20
 800ae50:	f7f7 fe4f 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ae54:	2014      	movs	r0, #20
 800ae56:	f7f7 fe68 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	40005c00 	.word	0x40005c00
 800ae68:	40021000 	.word	0x40021000

0800ae6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ae80:	4619      	mov	r1, r3
 800ae82:	4610      	mov	r0, r2
 800ae84:	f7fe fd87 	bl	8009996 <USBD_LL_SetupStage>
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800aea2:	78fa      	ldrb	r2, [r7, #3]
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	00db      	lsls	r3, r3, #3
 800aeae:	440b      	add	r3, r1
 800aeb0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	78fb      	ldrb	r3, [r7, #3]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	f7fe fdb9 	bl	8009a30 <USBD_LL_DataOutStage>
}
 800aebe:	bf00      	nop
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800aed8:	78fa      	ldrb	r2, [r7, #3]
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	440b      	add	r3, r1
 800aee6:	3324      	adds	r3, #36	@ 0x24
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	4619      	mov	r1, r3
 800aeee:	f7fe fe10 	bl	8009b12 <USBD_LL_DataInStage>
}
 800aef2:	bf00      	nop
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe ff20 	bl	8009d4e <USBD_LL_SOF>
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af1e:	2301      	movs	r3, #1
 800af20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	799b      	ldrb	r3, [r3, #6]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d001      	beq.n	800af2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af2a:	f7f6 fd75 	bl	8001a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af34:	7bfa      	ldrb	r2, [r7, #15]
 800af36:	4611      	mov	r1, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe fed0 	bl	8009cde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af44:	4618      	mov	r0, r3
 800af46:	f7fe fe89 	bl	8009c5c <USBD_LL_Reset>
}
 800af4a:	bf00      	nop
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
	...

0800af54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af62:	4618      	mov	r0, r3
 800af64:	f7fe feca 	bl	8009cfc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7a9b      	ldrb	r3, [r3, #10]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d005      	beq.n	800af7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af70:	4b04      	ldr	r3, [pc, #16]	@ (800af84 <HAL_PCD_SuspendCallback+0x30>)
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	4a03      	ldr	r2, [pc, #12]	@ (800af84 <HAL_PCD_SuspendCallback+0x30>)
 800af76:	f043 0306 	orr.w	r3, r3, #6
 800af7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	e000ed00 	.word	0xe000ed00

0800af88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fec4 	bl	8009d24 <USBD_LL_Resume>
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800afac:	4a28      	ldr	r2, [pc, #160]	@ (800b050 <USBD_LL_Init+0xac>)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a26      	ldr	r2, [pc, #152]	@ (800b050 <USBD_LL_Init+0xac>)
 800afb8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800afbc:	4b24      	ldr	r3, [pc, #144]	@ (800b050 <USBD_LL_Init+0xac>)
 800afbe:	4a25      	ldr	r2, [pc, #148]	@ (800b054 <USBD_LL_Init+0xb0>)
 800afc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afc2:	4b23      	ldr	r3, [pc, #140]	@ (800b050 <USBD_LL_Init+0xac>)
 800afc4:	2208      	movs	r2, #8
 800afc6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afc8:	4b21      	ldr	r3, [pc, #132]	@ (800b050 <USBD_LL_Init+0xac>)
 800afca:	2202      	movs	r2, #2
 800afcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afce:	4b20      	ldr	r3, [pc, #128]	@ (800b050 <USBD_LL_Init+0xac>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afd4:	4b1e      	ldr	r3, [pc, #120]	@ (800b050 <USBD_LL_Init+0xac>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afda:	4b1d      	ldr	r3, [pc, #116]	@ (800b050 <USBD_LL_Init+0xac>)
 800afdc:	2200      	movs	r2, #0
 800afde:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afe0:	481b      	ldr	r0, [pc, #108]	@ (800b050 <USBD_LL_Init+0xac>)
 800afe2:	f7f8 f9bf 	bl	8003364 <HAL_PCD_Init>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800afec:	f7f6 fd14 	bl	8001a18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aff6:	2318      	movs	r3, #24
 800aff8:	2200      	movs	r2, #0
 800affa:	2100      	movs	r1, #0
 800affc:	f7f9 fed0 	bl	8004da0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b006:	2358      	movs	r3, #88	@ 0x58
 800b008:	2200      	movs	r2, #0
 800b00a:	2180      	movs	r1, #128	@ 0x80
 800b00c:	f7f9 fec8 	bl	8004da0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b016:	23c0      	movs	r3, #192	@ 0xc0
 800b018:	2200      	movs	r2, #0
 800b01a:	2181      	movs	r1, #129	@ 0x81
 800b01c:	f7f9 fec0 	bl	8004da0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b026:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b02a:	2200      	movs	r2, #0
 800b02c:	2101      	movs	r1, #1
 800b02e:	f7f9 feb7 	bl	8004da0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b03c:	2200      	movs	r2, #0
 800b03e:	2182      	movs	r1, #130	@ 0x82
 800b040:	f7f9 feae 	bl	8004da0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200011a8 	.word	0x200011a8
 800b054:	40005c00 	.word	0x40005c00

0800b058 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b06e:	4618      	mov	r0, r3
 800b070:	f7f8 fa6e 	bl	8003550 <HAL_PCD_Start>
 800b074:	4603      	mov	r3, r0
 800b076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 f94e 	bl	800b31c <USBD_Get_USB_Status>
 800b080:	4603      	mov	r3, r0
 800b082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b084:	7bbb      	ldrb	r3, [r7, #14]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	4608      	mov	r0, r1
 800b098:	4611      	mov	r1, r2
 800b09a:	461a      	mov	r2, r3
 800b09c:	4603      	mov	r3, r0
 800b09e:	70fb      	strb	r3, [r7, #3]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	70bb      	strb	r3, [r7, #2]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b0b6:	78bb      	ldrb	r3, [r7, #2]
 800b0b8:	883a      	ldrh	r2, [r7, #0]
 800b0ba:	78f9      	ldrb	r1, [r7, #3]
 800b0bc:	f7f8 fbc2 	bl	8003844 <HAL_PCD_EP_Open>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 f928 	bl	800b31c <USBD_Get_USB_Status>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0f4:	78fa      	ldrb	r2, [r7, #3]
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7f8 fc00 	bl	80038fe <HAL_PCD_EP_Close>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	4618      	mov	r0, r3
 800b106:	f000 f909 	bl	800b31c <USBD_Get_USB_Status>
 800b10a:	4603      	mov	r3, r0
 800b10c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b10e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b124:	2300      	movs	r3, #0
 800b126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b132:	78fa      	ldrb	r2, [r7, #3]
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f7f8 fca8 	bl	8003a8c <HAL_PCD_EP_SetStall>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b140:	7bfb      	ldrb	r3, [r7, #15]
 800b142:	4618      	mov	r0, r3
 800b144:	f000 f8ea 	bl	800b31c <USBD_Get_USB_Status>
 800b148:	4603      	mov	r3, r0
 800b14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	460b      	mov	r3, r1
 800b160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b170:	78fa      	ldrb	r2, [r7, #3]
 800b172:	4611      	mov	r1, r2
 800b174:	4618      	mov	r0, r3
 800b176:	f7f8 fce9 	bl	8003b4c <HAL_PCD_EP_ClrStall>
 800b17a:	4603      	mov	r3, r0
 800b17c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
 800b180:	4618      	mov	r0, r3
 800b182:	f000 f8cb 	bl	800b31c <USBD_Get_USB_Status>
 800b186:	4603      	mov	r3, r0
 800b188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	460b      	mov	r3, r1
 800b19e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	da0b      	bge.n	800b1c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1b6:	68f9      	ldr	r1, [r7, #12]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	00db      	lsls	r3, r3, #3
 800b1c0:	440b      	add	r3, r1
 800b1c2:	3312      	adds	r3, #18
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	e00b      	b.n	800b1e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1c8:	78fb      	ldrb	r3, [r7, #3]
 800b1ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1ce:	68f9      	ldr	r1, [r7, #12]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	00db      	lsls	r3, r3, #3
 800b1d8:	440b      	add	r3, r1
 800b1da:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b1de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bc80      	pop	{r7}
 800b1e8:	4770      	bx	lr

0800b1ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b204:	78fa      	ldrb	r2, [r7, #3]
 800b206:	4611      	mov	r1, r2
 800b208:	4618      	mov	r0, r3
 800b20a:	f7f8 faf7 	bl	80037fc <HAL_PCD_SetAddress>
 800b20e:	4603      	mov	r3, r0
 800b210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f881 	bl	800b31c <USBD_Get_USB_Status>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	461a      	mov	r2, r3
 800b234:	460b      	mov	r3, r1
 800b236:	72fb      	strb	r3, [r7, #11]
 800b238:	4613      	mov	r3, r2
 800b23a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b24a:	893b      	ldrh	r3, [r7, #8]
 800b24c:	7af9      	ldrb	r1, [r7, #11]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	f7f8 fbe5 	bl	8003a1e <HAL_PCD_EP_Transmit>
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 f85e 	bl	800b31c <USBD_Get_USB_Status>
 800b260:	4603      	mov	r3, r0
 800b262:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b264:	7dbb      	ldrb	r3, [r7, #22]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b086      	sub	sp, #24
 800b272:	af00      	add	r7, sp, #0
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	461a      	mov	r2, r3
 800b27a:	460b      	mov	r3, r1
 800b27c:	72fb      	strb	r3, [r7, #11]
 800b27e:	4613      	mov	r3, r2
 800b280:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b290:	893b      	ldrh	r3, [r7, #8]
 800b292:	7af9      	ldrb	r1, [r7, #11]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	f7f8 fb7a 	bl	800398e <HAL_PCD_EP_Receive>
 800b29a:	4603      	mov	r3, r0
 800b29c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 f83b 	bl	800b31c <USBD_Get_USB_Status>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2c6:	78fa      	ldrb	r2, [r7, #3]
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7f8 fb90 	bl	80039f0 <HAL_PCD_EP_GetRxCount>
 800b2d0:	4603      	mov	r3, r0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
	...

0800b2dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2e4:	4b02      	ldr	r3, [pc, #8]	@ (800b2f0 <USBD_static_malloc+0x14>)
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr
 800b2f0:	20001480 	.word	0x20001480

0800b2f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]

}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	bc80      	pop	{r7}
 800b304:	4770      	bx	lr

0800b306 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	460b      	mov	r3, r1
 800b310:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b312:	bf00      	nop
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	bc80      	pop	{r7}
 800b31a:	4770      	bx	lr

0800b31c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d817      	bhi.n	800b360 <USBD_Get_USB_Status+0x44>
 800b330:	a201      	add	r2, pc, #4	@ (adr r2, 800b338 <USBD_Get_USB_Status+0x1c>)
 800b332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b336:	bf00      	nop
 800b338:	0800b349 	.word	0x0800b349
 800b33c:	0800b34f 	.word	0x0800b34f
 800b340:	0800b355 	.word	0x0800b355
 800b344:	0800b35b 	.word	0x0800b35b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73fb      	strb	r3, [r7, #15]
    break;
 800b34c:	e00b      	b.n	800b366 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b34e:	2302      	movs	r3, #2
 800b350:	73fb      	strb	r3, [r7, #15]
    break;
 800b352:	e008      	b.n	800b366 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b354:	2301      	movs	r3, #1
 800b356:	73fb      	strb	r3, [r7, #15]
    break;
 800b358:	e005      	b.n	800b366 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b35a:	2302      	movs	r3, #2
 800b35c:	73fb      	strb	r3, [r7, #15]
    break;
 800b35e:	e002      	b.n	800b366 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b360:	2302      	movs	r3, #2
 800b362:	73fb      	strb	r3, [r7, #15]
    break;
 800b364:	bf00      	nop
  }
  return usb_status;
 800b366:	7bfb      	ldrb	r3, [r7, #15]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop

0800b374 <atof>:
 800b374:	2100      	movs	r1, #0
 800b376:	f000 be17 	b.w	800bfa8 <strtod>

0800b37a <atoi>:
 800b37a:	220a      	movs	r2, #10
 800b37c:	2100      	movs	r1, #0
 800b37e:	f000 be99 	b.w	800c0b4 <strtol>

0800b382 <__itoa>:
 800b382:	1e93      	subs	r3, r2, #2
 800b384:	2b22      	cmp	r3, #34	@ 0x22
 800b386:	b510      	push	{r4, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	d904      	bls.n	800b396 <__itoa+0x14>
 800b38c:	2300      	movs	r3, #0
 800b38e:	461c      	mov	r4, r3
 800b390:	700b      	strb	r3, [r1, #0]
 800b392:	4620      	mov	r0, r4
 800b394:	bd10      	pop	{r4, pc}
 800b396:	2a0a      	cmp	r2, #10
 800b398:	d109      	bne.n	800b3ae <__itoa+0x2c>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	da07      	bge.n	800b3ae <__itoa+0x2c>
 800b39e:	232d      	movs	r3, #45	@ 0x2d
 800b3a0:	700b      	strb	r3, [r1, #0]
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4240      	negs	r0, r0
 800b3a6:	4421      	add	r1, r4
 800b3a8:	f000 fe8e 	bl	800c0c8 <__utoa>
 800b3ac:	e7f1      	b.n	800b392 <__itoa+0x10>
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	e7f9      	b.n	800b3a6 <__itoa+0x24>

0800b3b2 <itoa>:
 800b3b2:	f7ff bfe6 	b.w	800b382 <__itoa>

0800b3b6 <sulp>:
 800b3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	4690      	mov	r8, r2
 800b3be:	f002 f83f 	bl	800d440 <__ulp>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	460d      	mov	r5, r1
 800b3c6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ca:	d011      	beq.n	800b3f0 <sulp+0x3a>
 800b3cc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b3d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd0b      	ble.n	800b3f0 <sulp+0x3a>
 800b3d8:	2400      	movs	r4, #0
 800b3da:	051b      	lsls	r3, r3, #20
 800b3dc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b3e0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b3e4:	4622      	mov	r2, r4
 800b3e6:	462b      	mov	r3, r5
 800b3e8:	f7f5 f876 	bl	80004d8 <__aeabi_dmul>
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	460d      	mov	r5, r1
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3f8 <_strtod_l>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	b09f      	sub	sp, #124	@ 0x7c
 800b3fe:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b400:	2200      	movs	r2, #0
 800b402:	460c      	mov	r4, r1
 800b404:	921a      	str	r2, [sp, #104]	@ 0x68
 800b406:	f04f 0a00 	mov.w	sl, #0
 800b40a:	f04f 0b00 	mov.w	fp, #0
 800b40e:	460a      	mov	r2, r1
 800b410:	9005      	str	r0, [sp, #20]
 800b412:	9219      	str	r2, [sp, #100]	@ 0x64
 800b414:	7811      	ldrb	r1, [r2, #0]
 800b416:	292b      	cmp	r1, #43	@ 0x2b
 800b418:	d048      	beq.n	800b4ac <_strtod_l+0xb4>
 800b41a:	d836      	bhi.n	800b48a <_strtod_l+0x92>
 800b41c:	290d      	cmp	r1, #13
 800b41e:	d830      	bhi.n	800b482 <_strtod_l+0x8a>
 800b420:	2908      	cmp	r1, #8
 800b422:	d830      	bhi.n	800b486 <_strtod_l+0x8e>
 800b424:	2900      	cmp	r1, #0
 800b426:	d039      	beq.n	800b49c <_strtod_l+0xa4>
 800b428:	2200      	movs	r2, #0
 800b42a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b42c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b42e:	782a      	ldrb	r2, [r5, #0]
 800b430:	2a30      	cmp	r2, #48	@ 0x30
 800b432:	f040 80b0 	bne.w	800b596 <_strtod_l+0x19e>
 800b436:	786a      	ldrb	r2, [r5, #1]
 800b438:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b43c:	2a58      	cmp	r2, #88	@ 0x58
 800b43e:	d16c      	bne.n	800b51a <_strtod_l+0x122>
 800b440:	9302      	str	r3, [sp, #8]
 800b442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b444:	4a8f      	ldr	r2, [pc, #572]	@ (800b684 <_strtod_l+0x28c>)
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	ab1a      	add	r3, sp, #104	@ 0x68
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	9805      	ldr	r0, [sp, #20]
 800b44e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b450:	a919      	add	r1, sp, #100	@ 0x64
 800b452:	f001 f8f7 	bl	800c644 <__gethex>
 800b456:	f010 060f 	ands.w	r6, r0, #15
 800b45a:	4604      	mov	r4, r0
 800b45c:	d005      	beq.n	800b46a <_strtod_l+0x72>
 800b45e:	2e06      	cmp	r6, #6
 800b460:	d126      	bne.n	800b4b0 <_strtod_l+0xb8>
 800b462:	2300      	movs	r3, #0
 800b464:	3501      	adds	r5, #1
 800b466:	9519      	str	r5, [sp, #100]	@ 0x64
 800b468:	930e      	str	r3, [sp, #56]	@ 0x38
 800b46a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f040 8582 	bne.w	800bf76 <_strtod_l+0xb7e>
 800b472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b474:	b1bb      	cbz	r3, 800b4a6 <_strtod_l+0xae>
 800b476:	4650      	mov	r0, sl
 800b478:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b47c:	b01f      	add	sp, #124	@ 0x7c
 800b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b482:	2920      	cmp	r1, #32
 800b484:	d1d0      	bne.n	800b428 <_strtod_l+0x30>
 800b486:	3201      	adds	r2, #1
 800b488:	e7c3      	b.n	800b412 <_strtod_l+0x1a>
 800b48a:	292d      	cmp	r1, #45	@ 0x2d
 800b48c:	d1cc      	bne.n	800b428 <_strtod_l+0x30>
 800b48e:	2101      	movs	r1, #1
 800b490:	910e      	str	r1, [sp, #56]	@ 0x38
 800b492:	1c51      	adds	r1, r2, #1
 800b494:	9119      	str	r1, [sp, #100]	@ 0x64
 800b496:	7852      	ldrb	r2, [r2, #1]
 800b498:	2a00      	cmp	r2, #0
 800b49a:	d1c7      	bne.n	800b42c <_strtod_l+0x34>
 800b49c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b49e:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f040 8566 	bne.w	800bf72 <_strtod_l+0xb7a>
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	4659      	mov	r1, fp
 800b4aa:	e7e7      	b.n	800b47c <_strtod_l+0x84>
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	e7ef      	b.n	800b490 <_strtod_l+0x98>
 800b4b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b4b2:	b13a      	cbz	r2, 800b4c4 <_strtod_l+0xcc>
 800b4b4:	2135      	movs	r1, #53	@ 0x35
 800b4b6:	a81c      	add	r0, sp, #112	@ 0x70
 800b4b8:	f002 f8ce 	bl	800d658 <__copybits>
 800b4bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4be:	9805      	ldr	r0, [sp, #20]
 800b4c0:	f001 fc92 	bl	800cde8 <_Bfree>
 800b4c4:	3e01      	subs	r6, #1
 800b4c6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b4c8:	2e04      	cmp	r6, #4
 800b4ca:	d806      	bhi.n	800b4da <_strtod_l+0xe2>
 800b4cc:	e8df f006 	tbb	[pc, r6]
 800b4d0:	201d0314 	.word	0x201d0314
 800b4d4:	14          	.byte	0x14
 800b4d5:	00          	.byte	0x00
 800b4d6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b4da:	05e1      	lsls	r1, r4, #23
 800b4dc:	bf48      	it	mi
 800b4de:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b4e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4e6:	0d1b      	lsrs	r3, r3, #20
 800b4e8:	051b      	lsls	r3, r3, #20
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1bd      	bne.n	800b46a <_strtod_l+0x72>
 800b4ee:	f000 ffb7 	bl	800c460 <__errno>
 800b4f2:	2322      	movs	r3, #34	@ 0x22
 800b4f4:	6003      	str	r3, [r0, #0]
 800b4f6:	e7b8      	b.n	800b46a <_strtod_l+0x72>
 800b4f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b4fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b500:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b504:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b508:	e7e7      	b.n	800b4da <_strtod_l+0xe2>
 800b50a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b688 <_strtod_l+0x290>
 800b50e:	e7e4      	b.n	800b4da <_strtod_l+0xe2>
 800b510:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b514:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b518:	e7df      	b.n	800b4da <_strtod_l+0xe2>
 800b51a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b51c:	1c5a      	adds	r2, r3, #1
 800b51e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b520:	785b      	ldrb	r3, [r3, #1]
 800b522:	2b30      	cmp	r3, #48	@ 0x30
 800b524:	d0f9      	beq.n	800b51a <_strtod_l+0x122>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d09f      	beq.n	800b46a <_strtod_l+0x72>
 800b52a:	2301      	movs	r3, #1
 800b52c:	2700      	movs	r7, #0
 800b52e:	220a      	movs	r2, #10
 800b530:	46b9      	mov	r9, r7
 800b532:	9308      	str	r3, [sp, #32]
 800b534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b536:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b538:	930c      	str	r3, [sp, #48]	@ 0x30
 800b53a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b53c:	7805      	ldrb	r5, [r0, #0]
 800b53e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b542:	b2d9      	uxtb	r1, r3
 800b544:	2909      	cmp	r1, #9
 800b546:	d928      	bls.n	800b59a <_strtod_l+0x1a2>
 800b548:	2201      	movs	r2, #1
 800b54a:	4950      	ldr	r1, [pc, #320]	@ (800b68c <_strtod_l+0x294>)
 800b54c:	f000 ff2f 	bl	800c3ae <strncmp>
 800b550:	2800      	cmp	r0, #0
 800b552:	d032      	beq.n	800b5ba <_strtod_l+0x1c2>
 800b554:	2000      	movs	r0, #0
 800b556:	462a      	mov	r2, r5
 800b558:	4603      	mov	r3, r0
 800b55a:	464d      	mov	r5, r9
 800b55c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b55e:	2a65      	cmp	r2, #101	@ 0x65
 800b560:	d001      	beq.n	800b566 <_strtod_l+0x16e>
 800b562:	2a45      	cmp	r2, #69	@ 0x45
 800b564:	d114      	bne.n	800b590 <_strtod_l+0x198>
 800b566:	b91d      	cbnz	r5, 800b570 <_strtod_l+0x178>
 800b568:	9a08      	ldr	r2, [sp, #32]
 800b56a:	4302      	orrs	r2, r0
 800b56c:	d096      	beq.n	800b49c <_strtod_l+0xa4>
 800b56e:	2500      	movs	r5, #0
 800b570:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b572:	1c62      	adds	r2, r4, #1
 800b574:	9219      	str	r2, [sp, #100]	@ 0x64
 800b576:	7862      	ldrb	r2, [r4, #1]
 800b578:	2a2b      	cmp	r2, #43	@ 0x2b
 800b57a:	d07a      	beq.n	800b672 <_strtod_l+0x27a>
 800b57c:	2a2d      	cmp	r2, #45	@ 0x2d
 800b57e:	d07e      	beq.n	800b67e <_strtod_l+0x286>
 800b580:	f04f 0c00 	mov.w	ip, #0
 800b584:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b588:	2909      	cmp	r1, #9
 800b58a:	f240 8085 	bls.w	800b698 <_strtod_l+0x2a0>
 800b58e:	9419      	str	r4, [sp, #100]	@ 0x64
 800b590:	f04f 0800 	mov.w	r8, #0
 800b594:	e0a5      	b.n	800b6e2 <_strtod_l+0x2ea>
 800b596:	2300      	movs	r3, #0
 800b598:	e7c8      	b.n	800b52c <_strtod_l+0x134>
 800b59a:	f1b9 0f08 	cmp.w	r9, #8
 800b59e:	bfd8      	it	le
 800b5a0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b5a2:	f100 0001 	add.w	r0, r0, #1
 800b5a6:	bfd6      	itet	le
 800b5a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b5ac:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b5b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b5b2:	f109 0901 	add.w	r9, r9, #1
 800b5b6:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5b8:	e7bf      	b.n	800b53a <_strtod_l+0x142>
 800b5ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5c0:	785a      	ldrb	r2, [r3, #1]
 800b5c2:	f1b9 0f00 	cmp.w	r9, #0
 800b5c6:	d03b      	beq.n	800b640 <_strtod_l+0x248>
 800b5c8:	464d      	mov	r5, r9
 800b5ca:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5cc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b5d0:	2b09      	cmp	r3, #9
 800b5d2:	d912      	bls.n	800b5fa <_strtod_l+0x202>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e7c2      	b.n	800b55e <_strtod_l+0x166>
 800b5d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5da:	3001      	adds	r0, #1
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5e0:	785a      	ldrb	r2, [r3, #1]
 800b5e2:	2a30      	cmp	r2, #48	@ 0x30
 800b5e4:	d0f8      	beq.n	800b5d8 <_strtod_l+0x1e0>
 800b5e6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	f200 84c8 	bhi.w	800bf80 <_strtod_l+0xb88>
 800b5f0:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5fa:	3a30      	subs	r2, #48	@ 0x30
 800b5fc:	f100 0301 	add.w	r3, r0, #1
 800b600:	d018      	beq.n	800b634 <_strtod_l+0x23c>
 800b602:	462e      	mov	r6, r5
 800b604:	f04f 0e0a 	mov.w	lr, #10
 800b608:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b60a:	4419      	add	r1, r3
 800b60c:	910a      	str	r1, [sp, #40]	@ 0x28
 800b60e:	1c71      	adds	r1, r6, #1
 800b610:	eba1 0c05 	sub.w	ip, r1, r5
 800b614:	4563      	cmp	r3, ip
 800b616:	dc15      	bgt.n	800b644 <_strtod_l+0x24c>
 800b618:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b61c:	182b      	adds	r3, r5, r0
 800b61e:	2b08      	cmp	r3, #8
 800b620:	f105 0501 	add.w	r5, r5, #1
 800b624:	4405      	add	r5, r0
 800b626:	dc1a      	bgt.n	800b65e <_strtod_l+0x266>
 800b628:	230a      	movs	r3, #10
 800b62a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b62c:	fb03 2301 	mla	r3, r3, r1, r2
 800b630:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b632:	2300      	movs	r3, #0
 800b634:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b636:	4618      	mov	r0, r3
 800b638:	1c51      	adds	r1, r2, #1
 800b63a:	9119      	str	r1, [sp, #100]	@ 0x64
 800b63c:	7852      	ldrb	r2, [r2, #1]
 800b63e:	e7c5      	b.n	800b5cc <_strtod_l+0x1d4>
 800b640:	4648      	mov	r0, r9
 800b642:	e7ce      	b.n	800b5e2 <_strtod_l+0x1ea>
 800b644:	2e08      	cmp	r6, #8
 800b646:	dc05      	bgt.n	800b654 <_strtod_l+0x25c>
 800b648:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b64a:	fb0e f606 	mul.w	r6, lr, r6
 800b64e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b650:	460e      	mov	r6, r1
 800b652:	e7dc      	b.n	800b60e <_strtod_l+0x216>
 800b654:	2910      	cmp	r1, #16
 800b656:	bfd8      	it	le
 800b658:	fb0e f707 	mulle.w	r7, lr, r7
 800b65c:	e7f8      	b.n	800b650 <_strtod_l+0x258>
 800b65e:	2b0f      	cmp	r3, #15
 800b660:	bfdc      	itt	le
 800b662:	230a      	movle	r3, #10
 800b664:	fb03 2707 	mlale	r7, r3, r7, r2
 800b668:	e7e3      	b.n	800b632 <_strtod_l+0x23a>
 800b66a:	2300      	movs	r3, #0
 800b66c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b66e:	2301      	movs	r3, #1
 800b670:	e77a      	b.n	800b568 <_strtod_l+0x170>
 800b672:	f04f 0c00 	mov.w	ip, #0
 800b676:	1ca2      	adds	r2, r4, #2
 800b678:	9219      	str	r2, [sp, #100]	@ 0x64
 800b67a:	78a2      	ldrb	r2, [r4, #2]
 800b67c:	e782      	b.n	800b584 <_strtod_l+0x18c>
 800b67e:	f04f 0c01 	mov.w	ip, #1
 800b682:	e7f8      	b.n	800b676 <_strtod_l+0x27e>
 800b684:	0800f390 	.word	0x0800f390
 800b688:	7ff00000 	.word	0x7ff00000
 800b68c:	0800f18e 	.word	0x0800f18e
 800b690:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b692:	1c51      	adds	r1, r2, #1
 800b694:	9119      	str	r1, [sp, #100]	@ 0x64
 800b696:	7852      	ldrb	r2, [r2, #1]
 800b698:	2a30      	cmp	r2, #48	@ 0x30
 800b69a:	d0f9      	beq.n	800b690 <_strtod_l+0x298>
 800b69c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b6a0:	2908      	cmp	r1, #8
 800b6a2:	f63f af75 	bhi.w	800b590 <_strtod_l+0x198>
 800b6a6:	f04f 080a 	mov.w	r8, #10
 800b6aa:	3a30      	subs	r2, #48	@ 0x30
 800b6ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b6b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6b4:	1c56      	adds	r6, r2, #1
 800b6b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800b6b8:	7852      	ldrb	r2, [r2, #1]
 800b6ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b6be:	f1be 0f09 	cmp.w	lr, #9
 800b6c2:	d939      	bls.n	800b738 <_strtod_l+0x340>
 800b6c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b6c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b6ca:	1a76      	subs	r6, r6, r1
 800b6cc:	2e08      	cmp	r6, #8
 800b6ce:	dc03      	bgt.n	800b6d8 <_strtod_l+0x2e0>
 800b6d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6d2:	4588      	cmp	r8, r1
 800b6d4:	bfa8      	it	ge
 800b6d6:	4688      	movge	r8, r1
 800b6d8:	f1bc 0f00 	cmp.w	ip, #0
 800b6dc:	d001      	beq.n	800b6e2 <_strtod_l+0x2ea>
 800b6de:	f1c8 0800 	rsb	r8, r8, #0
 800b6e2:	2d00      	cmp	r5, #0
 800b6e4:	d14e      	bne.n	800b784 <_strtod_l+0x38c>
 800b6e6:	9908      	ldr	r1, [sp, #32]
 800b6e8:	4308      	orrs	r0, r1
 800b6ea:	f47f aebe 	bne.w	800b46a <_strtod_l+0x72>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f47f aed4 	bne.w	800b49c <_strtod_l+0xa4>
 800b6f4:	2a69      	cmp	r2, #105	@ 0x69
 800b6f6:	d028      	beq.n	800b74a <_strtod_l+0x352>
 800b6f8:	dc25      	bgt.n	800b746 <_strtod_l+0x34e>
 800b6fa:	2a49      	cmp	r2, #73	@ 0x49
 800b6fc:	d025      	beq.n	800b74a <_strtod_l+0x352>
 800b6fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800b700:	f47f aecc 	bne.w	800b49c <_strtod_l+0xa4>
 800b704:	4999      	ldr	r1, [pc, #612]	@ (800b96c <_strtod_l+0x574>)
 800b706:	a819      	add	r0, sp, #100	@ 0x64
 800b708:	f001 f9be 	bl	800ca88 <__match>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f43f aec5 	beq.w	800b49c <_strtod_l+0xa4>
 800b712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	2b28      	cmp	r3, #40	@ 0x28
 800b718:	d12e      	bne.n	800b778 <_strtod_l+0x380>
 800b71a:	4995      	ldr	r1, [pc, #596]	@ (800b970 <_strtod_l+0x578>)
 800b71c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b71e:	a819      	add	r0, sp, #100	@ 0x64
 800b720:	f001 f9c6 	bl	800cab0 <__hexnan>
 800b724:	2805      	cmp	r0, #5
 800b726:	d127      	bne.n	800b778 <_strtod_l+0x380>
 800b728:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b72a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b72e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b732:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b736:	e698      	b.n	800b46a <_strtod_l+0x72>
 800b738:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b73a:	fb08 2101 	mla	r1, r8, r1, r2
 800b73e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b742:	9209      	str	r2, [sp, #36]	@ 0x24
 800b744:	e7b5      	b.n	800b6b2 <_strtod_l+0x2ba>
 800b746:	2a6e      	cmp	r2, #110	@ 0x6e
 800b748:	e7da      	b.n	800b700 <_strtod_l+0x308>
 800b74a:	498a      	ldr	r1, [pc, #552]	@ (800b974 <_strtod_l+0x57c>)
 800b74c:	a819      	add	r0, sp, #100	@ 0x64
 800b74e:	f001 f99b 	bl	800ca88 <__match>
 800b752:	2800      	cmp	r0, #0
 800b754:	f43f aea2 	beq.w	800b49c <_strtod_l+0xa4>
 800b758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b75a:	4987      	ldr	r1, [pc, #540]	@ (800b978 <_strtod_l+0x580>)
 800b75c:	3b01      	subs	r3, #1
 800b75e:	a819      	add	r0, sp, #100	@ 0x64
 800b760:	9319      	str	r3, [sp, #100]	@ 0x64
 800b762:	f001 f991 	bl	800ca88 <__match>
 800b766:	b910      	cbnz	r0, 800b76e <_strtod_l+0x376>
 800b768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b76a:	3301      	adds	r3, #1
 800b76c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b76e:	f04f 0a00 	mov.w	sl, #0
 800b772:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800b97c <_strtod_l+0x584>
 800b776:	e678      	b.n	800b46a <_strtod_l+0x72>
 800b778:	4881      	ldr	r0, [pc, #516]	@ (800b980 <_strtod_l+0x588>)
 800b77a:	f000 fead 	bl	800c4d8 <nan>
 800b77e:	4682      	mov	sl, r0
 800b780:	468b      	mov	fp, r1
 800b782:	e672      	b.n	800b46a <_strtod_l+0x72>
 800b784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b786:	f1b9 0f00 	cmp.w	r9, #0
 800b78a:	bf08      	it	eq
 800b78c:	46a9      	moveq	r9, r5
 800b78e:	eba8 0303 	sub.w	r3, r8, r3
 800b792:	2d10      	cmp	r5, #16
 800b794:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b796:	462c      	mov	r4, r5
 800b798:	9309      	str	r3, [sp, #36]	@ 0x24
 800b79a:	bfa8      	it	ge
 800b79c:	2410      	movge	r4, #16
 800b79e:	f7f4 fe21 	bl	80003e4 <__aeabi_ui2d>
 800b7a2:	2d09      	cmp	r5, #9
 800b7a4:	4682      	mov	sl, r0
 800b7a6:	468b      	mov	fp, r1
 800b7a8:	dc11      	bgt.n	800b7ce <_strtod_l+0x3d6>
 800b7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f43f ae5c 	beq.w	800b46a <_strtod_l+0x72>
 800b7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b4:	dd76      	ble.n	800b8a4 <_strtod_l+0x4ac>
 800b7b6:	2b16      	cmp	r3, #22
 800b7b8:	dc5d      	bgt.n	800b876 <_strtod_l+0x47e>
 800b7ba:	4972      	ldr	r1, [pc, #456]	@ (800b984 <_strtod_l+0x58c>)
 800b7bc:	4652      	mov	r2, sl
 800b7be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7c2:	465b      	mov	r3, fp
 800b7c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7c8:	f7f4 fe86 	bl	80004d8 <__aeabi_dmul>
 800b7cc:	e7d7      	b.n	800b77e <_strtod_l+0x386>
 800b7ce:	4b6d      	ldr	r3, [pc, #436]	@ (800b984 <_strtod_l+0x58c>)
 800b7d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b7d8:	f7f4 fe7e 	bl	80004d8 <__aeabi_dmul>
 800b7dc:	4682      	mov	sl, r0
 800b7de:	4638      	mov	r0, r7
 800b7e0:	468b      	mov	fp, r1
 800b7e2:	f7f4 fdff 	bl	80003e4 <__aeabi_ui2d>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4650      	mov	r0, sl
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	f7f4 fcbd 	bl	800016c <__adddf3>
 800b7f2:	2d0f      	cmp	r5, #15
 800b7f4:	4682      	mov	sl, r0
 800b7f6:	468b      	mov	fp, r1
 800b7f8:	ddd7      	ble.n	800b7aa <_strtod_l+0x3b2>
 800b7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7fc:	1b2c      	subs	r4, r5, r4
 800b7fe:	441c      	add	r4, r3
 800b800:	2c00      	cmp	r4, #0
 800b802:	f340 8093 	ble.w	800b92c <_strtod_l+0x534>
 800b806:	f014 030f 	ands.w	r3, r4, #15
 800b80a:	d00a      	beq.n	800b822 <_strtod_l+0x42a>
 800b80c:	495d      	ldr	r1, [pc, #372]	@ (800b984 <_strtod_l+0x58c>)
 800b80e:	4652      	mov	r2, sl
 800b810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b814:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b818:	465b      	mov	r3, fp
 800b81a:	f7f4 fe5d 	bl	80004d8 <__aeabi_dmul>
 800b81e:	4682      	mov	sl, r0
 800b820:	468b      	mov	fp, r1
 800b822:	f034 040f 	bics.w	r4, r4, #15
 800b826:	d073      	beq.n	800b910 <_strtod_l+0x518>
 800b828:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b82c:	dd49      	ble.n	800b8c2 <_strtod_l+0x4ca>
 800b82e:	2400      	movs	r4, #0
 800b830:	46a0      	mov	r8, r4
 800b832:	46a1      	mov	r9, r4
 800b834:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b836:	2322      	movs	r3, #34	@ 0x22
 800b838:	f04f 0a00 	mov.w	sl, #0
 800b83c:	9a05      	ldr	r2, [sp, #20]
 800b83e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800b97c <_strtod_l+0x584>
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b846:	2b00      	cmp	r3, #0
 800b848:	f43f ae0f 	beq.w	800b46a <_strtod_l+0x72>
 800b84c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b84e:	9805      	ldr	r0, [sp, #20]
 800b850:	f001 faca 	bl	800cde8 <_Bfree>
 800b854:	4649      	mov	r1, r9
 800b856:	9805      	ldr	r0, [sp, #20]
 800b858:	f001 fac6 	bl	800cde8 <_Bfree>
 800b85c:	4641      	mov	r1, r8
 800b85e:	9805      	ldr	r0, [sp, #20]
 800b860:	f001 fac2 	bl	800cde8 <_Bfree>
 800b864:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b866:	9805      	ldr	r0, [sp, #20]
 800b868:	f001 fabe 	bl	800cde8 <_Bfree>
 800b86c:	4621      	mov	r1, r4
 800b86e:	9805      	ldr	r0, [sp, #20]
 800b870:	f001 faba 	bl	800cde8 <_Bfree>
 800b874:	e5f9      	b.n	800b46a <_strtod_l+0x72>
 800b876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b878:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b87c:	4293      	cmp	r3, r2
 800b87e:	dbbc      	blt.n	800b7fa <_strtod_l+0x402>
 800b880:	4c40      	ldr	r4, [pc, #256]	@ (800b984 <_strtod_l+0x58c>)
 800b882:	f1c5 050f 	rsb	r5, r5, #15
 800b886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b88a:	4652      	mov	r2, sl
 800b88c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b890:	465b      	mov	r3, fp
 800b892:	f7f4 fe21 	bl	80004d8 <__aeabi_dmul>
 800b896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b898:	1b5d      	subs	r5, r3, r5
 800b89a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b89e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b8a2:	e791      	b.n	800b7c8 <_strtod_l+0x3d0>
 800b8a4:	3316      	adds	r3, #22
 800b8a6:	dba8      	blt.n	800b7fa <_strtod_l+0x402>
 800b8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8aa:	4650      	mov	r0, sl
 800b8ac:	eba3 0808 	sub.w	r8, r3, r8
 800b8b0:	4b34      	ldr	r3, [pc, #208]	@ (800b984 <_strtod_l+0x58c>)
 800b8b2:	4659      	mov	r1, fp
 800b8b4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b8b8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b8bc:	f7f4 ff36 	bl	800072c <__aeabi_ddiv>
 800b8c0:	e75d      	b.n	800b77e <_strtod_l+0x386>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	4650      	mov	r0, sl
 800b8c6:	4659      	mov	r1, fp
 800b8c8:	461e      	mov	r6, r3
 800b8ca:	4f2f      	ldr	r7, [pc, #188]	@ (800b988 <_strtod_l+0x590>)
 800b8cc:	1124      	asrs	r4, r4, #4
 800b8ce:	2c01      	cmp	r4, #1
 800b8d0:	dc21      	bgt.n	800b916 <_strtod_l+0x51e>
 800b8d2:	b10b      	cbz	r3, 800b8d8 <_strtod_l+0x4e0>
 800b8d4:	4682      	mov	sl, r0
 800b8d6:	468b      	mov	fp, r1
 800b8d8:	492b      	ldr	r1, [pc, #172]	@ (800b988 <_strtod_l+0x590>)
 800b8da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b8de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b8e2:	4652      	mov	r2, sl
 800b8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e8:	465b      	mov	r3, fp
 800b8ea:	f7f4 fdf5 	bl	80004d8 <__aeabi_dmul>
 800b8ee:	4b23      	ldr	r3, [pc, #140]	@ (800b97c <_strtod_l+0x584>)
 800b8f0:	460a      	mov	r2, r1
 800b8f2:	400b      	ands	r3, r1
 800b8f4:	4925      	ldr	r1, [pc, #148]	@ (800b98c <_strtod_l+0x594>)
 800b8f6:	4682      	mov	sl, r0
 800b8f8:	428b      	cmp	r3, r1
 800b8fa:	d898      	bhi.n	800b82e <_strtod_l+0x436>
 800b8fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b900:	428b      	cmp	r3, r1
 800b902:	bf86      	itte	hi
 800b904:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b908:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800b990 <_strtod_l+0x598>
 800b90c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b910:	2300      	movs	r3, #0
 800b912:	9308      	str	r3, [sp, #32]
 800b914:	e076      	b.n	800ba04 <_strtod_l+0x60c>
 800b916:	07e2      	lsls	r2, r4, #31
 800b918:	d504      	bpl.n	800b924 <_strtod_l+0x52c>
 800b91a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b91e:	f7f4 fddb 	bl	80004d8 <__aeabi_dmul>
 800b922:	2301      	movs	r3, #1
 800b924:	3601      	adds	r6, #1
 800b926:	1064      	asrs	r4, r4, #1
 800b928:	3708      	adds	r7, #8
 800b92a:	e7d0      	b.n	800b8ce <_strtod_l+0x4d6>
 800b92c:	d0f0      	beq.n	800b910 <_strtod_l+0x518>
 800b92e:	4264      	negs	r4, r4
 800b930:	f014 020f 	ands.w	r2, r4, #15
 800b934:	d00a      	beq.n	800b94c <_strtod_l+0x554>
 800b936:	4b13      	ldr	r3, [pc, #76]	@ (800b984 <_strtod_l+0x58c>)
 800b938:	4650      	mov	r0, sl
 800b93a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b93e:	4659      	mov	r1, fp
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	f7f4 fef2 	bl	800072c <__aeabi_ddiv>
 800b948:	4682      	mov	sl, r0
 800b94a:	468b      	mov	fp, r1
 800b94c:	1124      	asrs	r4, r4, #4
 800b94e:	d0df      	beq.n	800b910 <_strtod_l+0x518>
 800b950:	2c1f      	cmp	r4, #31
 800b952:	dd1f      	ble.n	800b994 <_strtod_l+0x59c>
 800b954:	2400      	movs	r4, #0
 800b956:	46a0      	mov	r8, r4
 800b958:	46a1      	mov	r9, r4
 800b95a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b95c:	2322      	movs	r3, #34	@ 0x22
 800b95e:	9a05      	ldr	r2, [sp, #20]
 800b960:	f04f 0a00 	mov.w	sl, #0
 800b964:	f04f 0b00 	mov.w	fp, #0
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	e76b      	b.n	800b844 <_strtod_l+0x44c>
 800b96c:	0800f193 	.word	0x0800f193
 800b970:	0800f37c 	.word	0x0800f37c
 800b974:	0800f190 	.word	0x0800f190
 800b978:	0800f2e3 	.word	0x0800f2e3
 800b97c:	7ff00000 	.word	0x7ff00000
 800b980:	0800f2df 	.word	0x0800f2df
 800b984:	0800f508 	.word	0x0800f508
 800b988:	0800f4e0 	.word	0x0800f4e0
 800b98c:	7ca00000 	.word	0x7ca00000
 800b990:	7fefffff 	.word	0x7fefffff
 800b994:	f014 0310 	ands.w	r3, r4, #16
 800b998:	bf18      	it	ne
 800b99a:	236a      	movne	r3, #106	@ 0x6a
 800b99c:	4650      	mov	r0, sl
 800b99e:	9308      	str	r3, [sp, #32]
 800b9a0:	4659      	mov	r1, fp
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4e77      	ldr	r6, [pc, #476]	@ (800bb84 <_strtod_l+0x78c>)
 800b9a6:	07e7      	lsls	r7, r4, #31
 800b9a8:	d504      	bpl.n	800b9b4 <_strtod_l+0x5bc>
 800b9aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9ae:	f7f4 fd93 	bl	80004d8 <__aeabi_dmul>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	1064      	asrs	r4, r4, #1
 800b9b6:	f106 0608 	add.w	r6, r6, #8
 800b9ba:	d1f4      	bne.n	800b9a6 <_strtod_l+0x5ae>
 800b9bc:	b10b      	cbz	r3, 800b9c2 <_strtod_l+0x5ca>
 800b9be:	4682      	mov	sl, r0
 800b9c0:	468b      	mov	fp, r1
 800b9c2:	9b08      	ldr	r3, [sp, #32]
 800b9c4:	b1b3      	cbz	r3, 800b9f4 <_strtod_l+0x5fc>
 800b9c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b9ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	4659      	mov	r1, fp
 800b9d2:	dd0f      	ble.n	800b9f4 <_strtod_l+0x5fc>
 800b9d4:	2b1f      	cmp	r3, #31
 800b9d6:	dd58      	ble.n	800ba8a <_strtod_l+0x692>
 800b9d8:	2b34      	cmp	r3, #52	@ 0x34
 800b9da:	bfd8      	it	le
 800b9dc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b9e0:	f04f 0a00 	mov.w	sl, #0
 800b9e4:	bfcf      	iteee	gt
 800b9e6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b9ea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b9ee:	4093      	lslle	r3, r2
 800b9f0:	ea03 0b01 	andle.w	fp, r3, r1
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	4650      	mov	r0, sl
 800b9fa:	4659      	mov	r1, fp
 800b9fc:	f7f4 ffd4 	bl	80009a8 <__aeabi_dcmpeq>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d1a7      	bne.n	800b954 <_strtod_l+0x55c>
 800ba04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba06:	464a      	mov	r2, r9
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	9805      	ldr	r0, [sp, #20]
 800ba10:	f001 fa52 	bl	800ceb8 <__s2b>
 800ba14:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f43f af09 	beq.w	800b82e <_strtod_l+0x436>
 800ba1c:	2400      	movs	r4, #0
 800ba1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba22:	2a00      	cmp	r2, #0
 800ba24:	eba3 0308 	sub.w	r3, r3, r8
 800ba28:	bfa8      	it	ge
 800ba2a:	2300      	movge	r3, #0
 800ba2c:	46a0      	mov	r8, r4
 800ba2e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba30:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba34:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba38:	9805      	ldr	r0, [sp, #20]
 800ba3a:	6859      	ldr	r1, [r3, #4]
 800ba3c:	f001 f994 	bl	800cd68 <_Balloc>
 800ba40:	4681      	mov	r9, r0
 800ba42:	2800      	cmp	r0, #0
 800ba44:	f43f aef7 	beq.w	800b836 <_strtod_l+0x43e>
 800ba48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba4a:	300c      	adds	r0, #12
 800ba4c:	691a      	ldr	r2, [r3, #16]
 800ba4e:	f103 010c 	add.w	r1, r3, #12
 800ba52:	3202      	adds	r2, #2
 800ba54:	0092      	lsls	r2, r2, #2
 800ba56:	f000 fd30 	bl	800c4ba <memcpy>
 800ba5a:	ab1c      	add	r3, sp, #112	@ 0x70
 800ba5c:	9301      	str	r3, [sp, #4]
 800ba5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	4652      	mov	r2, sl
 800ba64:	465b      	mov	r3, fp
 800ba66:	9805      	ldr	r0, [sp, #20]
 800ba68:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ba6c:	f001 fd50 	bl	800d510 <__d2b>
 800ba70:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba72:	2800      	cmp	r0, #0
 800ba74:	f43f aedf 	beq.w	800b836 <_strtod_l+0x43e>
 800ba78:	2101      	movs	r1, #1
 800ba7a:	9805      	ldr	r0, [sp, #20]
 800ba7c:	f001 fab2 	bl	800cfe4 <__i2b>
 800ba80:	4680      	mov	r8, r0
 800ba82:	b948      	cbnz	r0, 800ba98 <_strtod_l+0x6a0>
 800ba84:	f04f 0800 	mov.w	r8, #0
 800ba88:	e6d5      	b.n	800b836 <_strtod_l+0x43e>
 800ba8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba92:	ea03 0a0a 	and.w	sl, r3, sl
 800ba96:	e7ad      	b.n	800b9f4 <_strtod_l+0x5fc>
 800ba98:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ba9a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ba9c:	2d00      	cmp	r5, #0
 800ba9e:	bfab      	itete	ge
 800baa0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800baa2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800baa4:	18ef      	addge	r7, r5, r3
 800baa6:	1b5e      	sublt	r6, r3, r5
 800baa8:	9b08      	ldr	r3, [sp, #32]
 800baaa:	bfa8      	it	ge
 800baac:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800baae:	eba5 0503 	sub.w	r5, r5, r3
 800bab2:	4415      	add	r5, r2
 800bab4:	4b34      	ldr	r3, [pc, #208]	@ (800bb88 <_strtod_l+0x790>)
 800bab6:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800baba:	bfb8      	it	lt
 800babc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800babe:	429d      	cmp	r5, r3
 800bac0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bac4:	da50      	bge.n	800bb68 <_strtod_l+0x770>
 800bac6:	1b5b      	subs	r3, r3, r5
 800bac8:	2b1f      	cmp	r3, #31
 800baca:	f04f 0101 	mov.w	r1, #1
 800bace:	eba2 0203 	sub.w	r2, r2, r3
 800bad2:	dc3d      	bgt.n	800bb50 <_strtod_l+0x758>
 800bad4:	fa01 f303 	lsl.w	r3, r1, r3
 800bad8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bada:	2300      	movs	r3, #0
 800badc:	9310      	str	r3, [sp, #64]	@ 0x40
 800bade:	18bd      	adds	r5, r7, r2
 800bae0:	9b08      	ldr	r3, [sp, #32]
 800bae2:	42af      	cmp	r7, r5
 800bae4:	4416      	add	r6, r2
 800bae6:	441e      	add	r6, r3
 800bae8:	463b      	mov	r3, r7
 800baea:	bfa8      	it	ge
 800baec:	462b      	movge	r3, r5
 800baee:	42b3      	cmp	r3, r6
 800baf0:	bfa8      	it	ge
 800baf2:	4633      	movge	r3, r6
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	bfc2      	ittt	gt
 800baf8:	1aed      	subgt	r5, r5, r3
 800bafa:	1af6      	subgt	r6, r6, r3
 800bafc:	1aff      	subgt	r7, r7, r3
 800bafe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	dd16      	ble.n	800bb32 <_strtod_l+0x73a>
 800bb04:	4641      	mov	r1, r8
 800bb06:	461a      	mov	r2, r3
 800bb08:	9805      	ldr	r0, [sp, #20]
 800bb0a:	f001 fb23 	bl	800d154 <__pow5mult>
 800bb0e:	4680      	mov	r8, r0
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d0b7      	beq.n	800ba84 <_strtod_l+0x68c>
 800bb14:	4601      	mov	r1, r0
 800bb16:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb18:	9805      	ldr	r0, [sp, #20]
 800bb1a:	f001 fa79 	bl	800d010 <__multiply>
 800bb1e:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb20:	2800      	cmp	r0, #0
 800bb22:	f43f ae88 	beq.w	800b836 <_strtod_l+0x43e>
 800bb26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb28:	9805      	ldr	r0, [sp, #20]
 800bb2a:	f001 f95d 	bl	800cde8 <_Bfree>
 800bb2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb30:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb32:	2d00      	cmp	r5, #0
 800bb34:	dc1d      	bgt.n	800bb72 <_strtod_l+0x77a>
 800bb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	dd27      	ble.n	800bb8c <_strtod_l+0x794>
 800bb3c:	4649      	mov	r1, r9
 800bb3e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb40:	9805      	ldr	r0, [sp, #20]
 800bb42:	f001 fb07 	bl	800d154 <__pow5mult>
 800bb46:	4681      	mov	r9, r0
 800bb48:	bb00      	cbnz	r0, 800bb8c <_strtod_l+0x794>
 800bb4a:	f04f 0900 	mov.w	r9, #0
 800bb4e:	e672      	b.n	800b836 <_strtod_l+0x43e>
 800bb50:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bb54:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bb58:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bb5c:	35e2      	adds	r5, #226	@ 0xe2
 800bb5e:	fa01 f305 	lsl.w	r3, r1, r5
 800bb62:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb64:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bb66:	e7ba      	b.n	800bade <_strtod_l+0x6e6>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb70:	e7b5      	b.n	800bade <_strtod_l+0x6e6>
 800bb72:	462a      	mov	r2, r5
 800bb74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb76:	9805      	ldr	r0, [sp, #20]
 800bb78:	f001 fb46 	bl	800d208 <__lshift>
 800bb7c:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d1d9      	bne.n	800bb36 <_strtod_l+0x73e>
 800bb82:	e658      	b.n	800b836 <_strtod_l+0x43e>
 800bb84:	0800f3a8 	.word	0x0800f3a8
 800bb88:	fffffc02 	.word	0xfffffc02
 800bb8c:	2e00      	cmp	r6, #0
 800bb8e:	dd07      	ble.n	800bba0 <_strtod_l+0x7a8>
 800bb90:	4649      	mov	r1, r9
 800bb92:	4632      	mov	r2, r6
 800bb94:	9805      	ldr	r0, [sp, #20]
 800bb96:	f001 fb37 	bl	800d208 <__lshift>
 800bb9a:	4681      	mov	r9, r0
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d0d4      	beq.n	800bb4a <_strtod_l+0x752>
 800bba0:	2f00      	cmp	r7, #0
 800bba2:	dd08      	ble.n	800bbb6 <_strtod_l+0x7be>
 800bba4:	4641      	mov	r1, r8
 800bba6:	463a      	mov	r2, r7
 800bba8:	9805      	ldr	r0, [sp, #20]
 800bbaa:	f001 fb2d 	bl	800d208 <__lshift>
 800bbae:	4680      	mov	r8, r0
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	f43f ae40 	beq.w	800b836 <_strtod_l+0x43e>
 800bbb6:	464a      	mov	r2, r9
 800bbb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbba:	9805      	ldr	r0, [sp, #20]
 800bbbc:	f001 fbac 	bl	800d318 <__mdiff>
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	f43f ae37 	beq.w	800b836 <_strtod_l+0x43e>
 800bbc8:	68c3      	ldr	r3, [r0, #12]
 800bbca:	4641      	mov	r1, r8
 800bbcc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60c3      	str	r3, [r0, #12]
 800bbd2:	f001 fb85 	bl	800d2e0 <__mcmp>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	da3d      	bge.n	800bc56 <_strtod_l+0x85e>
 800bbda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbdc:	ea53 030a 	orrs.w	r3, r3, sl
 800bbe0:	d163      	bne.n	800bcaa <_strtod_l+0x8b2>
 800bbe2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d15f      	bne.n	800bcaa <_strtod_l+0x8b2>
 800bbea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbee:	0d1b      	lsrs	r3, r3, #20
 800bbf0:	051b      	lsls	r3, r3, #20
 800bbf2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bbf6:	d958      	bls.n	800bcaa <_strtod_l+0x8b2>
 800bbf8:	6963      	ldr	r3, [r4, #20]
 800bbfa:	b913      	cbnz	r3, 800bc02 <_strtod_l+0x80a>
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	dd53      	ble.n	800bcaa <_strtod_l+0x8b2>
 800bc02:	4621      	mov	r1, r4
 800bc04:	2201      	movs	r2, #1
 800bc06:	9805      	ldr	r0, [sp, #20]
 800bc08:	f001 fafe 	bl	800d208 <__lshift>
 800bc0c:	4641      	mov	r1, r8
 800bc0e:	4604      	mov	r4, r0
 800bc10:	f001 fb66 	bl	800d2e0 <__mcmp>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	dd48      	ble.n	800bcaa <_strtod_l+0x8b2>
 800bc18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc1c:	9a08      	ldr	r2, [sp, #32]
 800bc1e:	0d1b      	lsrs	r3, r3, #20
 800bc20:	051b      	lsls	r3, r3, #20
 800bc22:	2a00      	cmp	r2, #0
 800bc24:	d062      	beq.n	800bcec <_strtod_l+0x8f4>
 800bc26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc2a:	d85f      	bhi.n	800bcec <_strtod_l+0x8f4>
 800bc2c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc30:	f67f ae94 	bls.w	800b95c <_strtod_l+0x564>
 800bc34:	4650      	mov	r0, sl
 800bc36:	4659      	mov	r1, fp
 800bc38:	4ba3      	ldr	r3, [pc, #652]	@ (800bec8 <_strtod_l+0xad0>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f7f4 fc4c 	bl	80004d8 <__aeabi_dmul>
 800bc40:	4ba2      	ldr	r3, [pc, #648]	@ (800becc <_strtod_l+0xad4>)
 800bc42:	4682      	mov	sl, r0
 800bc44:	400b      	ands	r3, r1
 800bc46:	468b      	mov	fp, r1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f47f adff 	bne.w	800b84c <_strtod_l+0x454>
 800bc4e:	2322      	movs	r3, #34	@ 0x22
 800bc50:	9a05      	ldr	r2, [sp, #20]
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	e5fa      	b.n	800b84c <_strtod_l+0x454>
 800bc56:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bc5a:	d165      	bne.n	800bd28 <_strtod_l+0x930>
 800bc5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc62:	b35a      	cbz	r2, 800bcbc <_strtod_l+0x8c4>
 800bc64:	4a9a      	ldr	r2, [pc, #616]	@ (800bed0 <_strtod_l+0xad8>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d12b      	bne.n	800bcc2 <_strtod_l+0x8ca>
 800bc6a:	9b08      	ldr	r3, [sp, #32]
 800bc6c:	4651      	mov	r1, sl
 800bc6e:	b303      	cbz	r3, 800bcb2 <_strtod_l+0x8ba>
 800bc70:	465a      	mov	r2, fp
 800bc72:	4b96      	ldr	r3, [pc, #600]	@ (800becc <_strtod_l+0xad4>)
 800bc74:	4013      	ands	r3, r2
 800bc76:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bc7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc7e:	d81b      	bhi.n	800bcb8 <_strtod_l+0x8c0>
 800bc80:	0d1b      	lsrs	r3, r3, #20
 800bc82:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc86:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8a:	4299      	cmp	r1, r3
 800bc8c:	d119      	bne.n	800bcc2 <_strtod_l+0x8ca>
 800bc8e:	4b91      	ldr	r3, [pc, #580]	@ (800bed4 <_strtod_l+0xadc>)
 800bc90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d102      	bne.n	800bc9c <_strtod_l+0x8a4>
 800bc96:	3101      	adds	r1, #1
 800bc98:	f43f adcd 	beq.w	800b836 <_strtod_l+0x43e>
 800bc9c:	f04f 0a00 	mov.w	sl, #0
 800bca0:	4b8a      	ldr	r3, [pc, #552]	@ (800becc <_strtod_l+0xad4>)
 800bca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bca4:	401a      	ands	r2, r3
 800bca6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bcaa:	9b08      	ldr	r3, [sp, #32]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1c1      	bne.n	800bc34 <_strtod_l+0x83c>
 800bcb0:	e5cc      	b.n	800b84c <_strtod_l+0x454>
 800bcb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcb6:	e7e8      	b.n	800bc8a <_strtod_l+0x892>
 800bcb8:	4613      	mov	r3, r2
 800bcba:	e7e6      	b.n	800bc8a <_strtod_l+0x892>
 800bcbc:	ea53 030a 	orrs.w	r3, r3, sl
 800bcc0:	d0aa      	beq.n	800bc18 <_strtod_l+0x820>
 800bcc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcc4:	b1db      	cbz	r3, 800bcfe <_strtod_l+0x906>
 800bcc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcc8:	4213      	tst	r3, r2
 800bcca:	d0ee      	beq.n	800bcaa <_strtod_l+0x8b2>
 800bccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcce:	4650      	mov	r0, sl
 800bcd0:	4659      	mov	r1, fp
 800bcd2:	9a08      	ldr	r2, [sp, #32]
 800bcd4:	b1bb      	cbz	r3, 800bd06 <_strtod_l+0x90e>
 800bcd6:	f7ff fb6e 	bl	800b3b6 <sulp>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bce2:	f7f4 fa43 	bl	800016c <__adddf3>
 800bce6:	4682      	mov	sl, r0
 800bce8:	468b      	mov	fp, r1
 800bcea:	e7de      	b.n	800bcaa <_strtod_l+0x8b2>
 800bcec:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bcf0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bcf4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bcf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bcfc:	e7d5      	b.n	800bcaa <_strtod_l+0x8b2>
 800bcfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd00:	ea13 0f0a 	tst.w	r3, sl
 800bd04:	e7e1      	b.n	800bcca <_strtod_l+0x8d2>
 800bd06:	f7ff fb56 	bl	800b3b6 <sulp>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd12:	f7f4 fa29 	bl	8000168 <__aeabi_dsub>
 800bd16:	2200      	movs	r2, #0
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4682      	mov	sl, r0
 800bd1c:	468b      	mov	fp, r1
 800bd1e:	f7f4 fe43 	bl	80009a8 <__aeabi_dcmpeq>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0c1      	beq.n	800bcaa <_strtod_l+0x8b2>
 800bd26:	e619      	b.n	800b95c <_strtod_l+0x564>
 800bd28:	4641      	mov	r1, r8
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f001 fc48 	bl	800d5c0 <__ratio>
 800bd30:	2200      	movs	r2, #0
 800bd32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd36:	4606      	mov	r6, r0
 800bd38:	460f      	mov	r7, r1
 800bd3a:	f7f4 fe49 	bl	80009d0 <__aeabi_dcmple>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d06d      	beq.n	800be1e <_strtod_l+0xa26>
 800bd42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d178      	bne.n	800be3a <_strtod_l+0xa42>
 800bd48:	f1ba 0f00 	cmp.w	sl, #0
 800bd4c:	d156      	bne.n	800bdfc <_strtod_l+0xa04>
 800bd4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d158      	bne.n	800be0a <_strtod_l+0xa12>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	4b5e      	ldr	r3, [pc, #376]	@ (800bed8 <_strtod_l+0xae0>)
 800bd60:	f7f4 fe2c 	bl	80009bc <__aeabi_dcmplt>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d157      	bne.n	800be18 <_strtod_l+0xa20>
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	4b5b      	ldr	r3, [pc, #364]	@ (800bedc <_strtod_l+0xae4>)
 800bd70:	f7f4 fbb2 	bl	80004d8 <__aeabi_dmul>
 800bd74:	4606      	mov	r6, r0
 800bd76:	460f      	mov	r7, r1
 800bd78:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bd7c:	9606      	str	r6, [sp, #24]
 800bd7e:	9307      	str	r3, [sp, #28]
 800bd80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd84:	4d51      	ldr	r5, [pc, #324]	@ (800becc <_strtod_l+0xad4>)
 800bd86:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd8c:	401d      	ands	r5, r3
 800bd8e:	4b54      	ldr	r3, [pc, #336]	@ (800bee0 <_strtod_l+0xae8>)
 800bd90:	429d      	cmp	r5, r3
 800bd92:	f040 80ab 	bne.w	800beec <_strtod_l+0xaf4>
 800bd96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd98:	4650      	mov	r0, sl
 800bd9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bd9e:	4659      	mov	r1, fp
 800bda0:	f001 fb4e 	bl	800d440 <__ulp>
 800bda4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bda8:	f7f4 fb96 	bl	80004d8 <__aeabi_dmul>
 800bdac:	4652      	mov	r2, sl
 800bdae:	465b      	mov	r3, fp
 800bdb0:	f7f4 f9dc 	bl	800016c <__adddf3>
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4945      	ldr	r1, [pc, #276]	@ (800becc <_strtod_l+0xad4>)
 800bdb8:	4a4a      	ldr	r2, [pc, #296]	@ (800bee4 <_strtod_l+0xaec>)
 800bdba:	4019      	ands	r1, r3
 800bdbc:	4291      	cmp	r1, r2
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	d942      	bls.n	800be48 <_strtod_l+0xa50>
 800bdc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bdc4:	4b43      	ldr	r3, [pc, #268]	@ (800bed4 <_strtod_l+0xadc>)
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d103      	bne.n	800bdd2 <_strtod_l+0x9da>
 800bdca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdcc:	3301      	adds	r3, #1
 800bdce:	f43f ad32 	beq.w	800b836 <_strtod_l+0x43e>
 800bdd2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bdd6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800bed4 <_strtod_l+0xadc>
 800bdda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bddc:	9805      	ldr	r0, [sp, #20]
 800bdde:	f001 f803 	bl	800cde8 <_Bfree>
 800bde2:	4649      	mov	r1, r9
 800bde4:	9805      	ldr	r0, [sp, #20]
 800bde6:	f000 ffff 	bl	800cde8 <_Bfree>
 800bdea:	4641      	mov	r1, r8
 800bdec:	9805      	ldr	r0, [sp, #20]
 800bdee:	f000 fffb 	bl	800cde8 <_Bfree>
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	9805      	ldr	r0, [sp, #20]
 800bdf6:	f000 fff7 	bl	800cde8 <_Bfree>
 800bdfa:	e61c      	b.n	800ba36 <_strtod_l+0x63e>
 800bdfc:	f1ba 0f01 	cmp.w	sl, #1
 800be00:	d103      	bne.n	800be0a <_strtod_l+0xa12>
 800be02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be04:	2b00      	cmp	r3, #0
 800be06:	f43f ada9 	beq.w	800b95c <_strtod_l+0x564>
 800be0a:	2200      	movs	r2, #0
 800be0c:	4b36      	ldr	r3, [pc, #216]	@ (800bee8 <_strtod_l+0xaf0>)
 800be0e:	2600      	movs	r6, #0
 800be10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be14:	4f30      	ldr	r7, [pc, #192]	@ (800bed8 <_strtod_l+0xae0>)
 800be16:	e7b3      	b.n	800bd80 <_strtod_l+0x988>
 800be18:	2600      	movs	r6, #0
 800be1a:	4f30      	ldr	r7, [pc, #192]	@ (800bedc <_strtod_l+0xae4>)
 800be1c:	e7ac      	b.n	800bd78 <_strtod_l+0x980>
 800be1e:	4630      	mov	r0, r6
 800be20:	4639      	mov	r1, r7
 800be22:	4b2e      	ldr	r3, [pc, #184]	@ (800bedc <_strtod_l+0xae4>)
 800be24:	2200      	movs	r2, #0
 800be26:	f7f4 fb57 	bl	80004d8 <__aeabi_dmul>
 800be2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0a1      	beq.n	800bd78 <_strtod_l+0x980>
 800be34:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be38:	e7a2      	b.n	800bd80 <_strtod_l+0x988>
 800be3a:	2200      	movs	r2, #0
 800be3c:	4b26      	ldr	r3, [pc, #152]	@ (800bed8 <_strtod_l+0xae0>)
 800be3e:	4616      	mov	r6, r2
 800be40:	461f      	mov	r7, r3
 800be42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be46:	e79b      	b.n	800bd80 <_strtod_l+0x988>
 800be48:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be4c:	9b08      	ldr	r3, [sp, #32]
 800be4e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1c1      	bne.n	800bdda <_strtod_l+0x9e2>
 800be56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be5a:	0d1b      	lsrs	r3, r3, #20
 800be5c:	051b      	lsls	r3, r3, #20
 800be5e:	429d      	cmp	r5, r3
 800be60:	d1bb      	bne.n	800bdda <_strtod_l+0x9e2>
 800be62:	4630      	mov	r0, r6
 800be64:	4639      	mov	r1, r7
 800be66:	f7f5 f963 	bl	8001130 <__aeabi_d2lz>
 800be6a:	f7f4 fb07 	bl	800047c <__aeabi_l2d>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	4630      	mov	r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	f7f4 f977 	bl	8000168 <__aeabi_dsub>
 800be7a:	460b      	mov	r3, r1
 800be7c:	4602      	mov	r2, r0
 800be7e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be82:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be88:	ea46 060a 	orr.w	r6, r6, sl
 800be8c:	431e      	orrs	r6, r3
 800be8e:	d06a      	beq.n	800bf66 <_strtod_l+0xb6e>
 800be90:	a309      	add	r3, pc, #36	@ (adr r3, 800beb8 <_strtod_l+0xac0>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f7f4 fd91 	bl	80009bc <__aeabi_dcmplt>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	f47f acd6 	bne.w	800b84c <_strtod_l+0x454>
 800bea0:	a307      	add	r3, pc, #28	@ (adr r3, 800bec0 <_strtod_l+0xac8>)
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beaa:	f7f4 fda5 	bl	80009f8 <__aeabi_dcmpgt>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d093      	beq.n	800bdda <_strtod_l+0x9e2>
 800beb2:	e4cb      	b.n	800b84c <_strtod_l+0x454>
 800beb4:	f3af 8000 	nop.w
 800beb8:	94a03595 	.word	0x94a03595
 800bebc:	3fdfffff 	.word	0x3fdfffff
 800bec0:	35afe535 	.word	0x35afe535
 800bec4:	3fe00000 	.word	0x3fe00000
 800bec8:	39500000 	.word	0x39500000
 800becc:	7ff00000 	.word	0x7ff00000
 800bed0:	000fffff 	.word	0x000fffff
 800bed4:	7fefffff 	.word	0x7fefffff
 800bed8:	3ff00000 	.word	0x3ff00000
 800bedc:	3fe00000 	.word	0x3fe00000
 800bee0:	7fe00000 	.word	0x7fe00000
 800bee4:	7c9fffff 	.word	0x7c9fffff
 800bee8:	bff00000 	.word	0xbff00000
 800beec:	9b08      	ldr	r3, [sp, #32]
 800beee:	b323      	cbz	r3, 800bf3a <_strtod_l+0xb42>
 800bef0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bef4:	d821      	bhi.n	800bf3a <_strtod_l+0xb42>
 800bef6:	a328      	add	r3, pc, #160	@ (adr r3, 800bf98 <_strtod_l+0xba0>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	4630      	mov	r0, r6
 800befe:	4639      	mov	r1, r7
 800bf00:	f7f4 fd66 	bl	80009d0 <__aeabi_dcmple>
 800bf04:	b1a0      	cbz	r0, 800bf30 <_strtod_l+0xb38>
 800bf06:	4639      	mov	r1, r7
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7f4 fda7 	bl	8000a5c <__aeabi_d2uiz>
 800bf0e:	2801      	cmp	r0, #1
 800bf10:	bf38      	it	cc
 800bf12:	2001      	movcc	r0, #1
 800bf14:	f7f4 fa66 	bl	80003e4 <__aeabi_ui2d>
 800bf18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	b9fb      	cbnz	r3, 800bf60 <_strtod_l+0xb68>
 800bf20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf24:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf26:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bf36:	1b5b      	subs	r3, r3, r5
 800bf38:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bf42:	f001 fa7d 	bl	800d440 <__ulp>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4650      	mov	r0, sl
 800bf4c:	4659      	mov	r1, fp
 800bf4e:	f7f4 fac3 	bl	80004d8 <__aeabi_dmul>
 800bf52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf56:	f7f4 f909 	bl	800016c <__adddf3>
 800bf5a:	4682      	mov	sl, r0
 800bf5c:	468b      	mov	fp, r1
 800bf5e:	e775      	b.n	800be4c <_strtod_l+0xa54>
 800bf60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bf64:	e7e0      	b.n	800bf28 <_strtod_l+0xb30>
 800bf66:	a30e      	add	r3, pc, #56	@ (adr r3, 800bfa0 <_strtod_l+0xba8>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f7f4 fd26 	bl	80009bc <__aeabi_dcmplt>
 800bf70:	e79d      	b.n	800beae <_strtod_l+0xab6>
 800bf72:	2300      	movs	r3, #0
 800bf74:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf78:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	f7ff ba79 	b.w	800b472 <_strtod_l+0x7a>
 800bf80:	2a65      	cmp	r2, #101	@ 0x65
 800bf82:	f43f ab72 	beq.w	800b66a <_strtod_l+0x272>
 800bf86:	2a45      	cmp	r2, #69	@ 0x45
 800bf88:	f43f ab6f 	beq.w	800b66a <_strtod_l+0x272>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	f7ff bbaa 	b.w	800b6e6 <_strtod_l+0x2ee>
 800bf92:	bf00      	nop
 800bf94:	f3af 8000 	nop.w
 800bf98:	ffc00000 	.word	0xffc00000
 800bf9c:	41dfffff 	.word	0x41dfffff
 800bfa0:	94a03595 	.word	0x94a03595
 800bfa4:	3fcfffff 	.word	0x3fcfffff

0800bfa8 <strtod>:
 800bfa8:	460a      	mov	r2, r1
 800bfaa:	4601      	mov	r1, r0
 800bfac:	4802      	ldr	r0, [pc, #8]	@ (800bfb8 <strtod+0x10>)
 800bfae:	4b03      	ldr	r3, [pc, #12]	@ (800bfbc <strtod+0x14>)
 800bfb0:	6800      	ldr	r0, [r0, #0]
 800bfb2:	f7ff ba21 	b.w	800b3f8 <_strtod_l>
 800bfb6:	bf00      	nop
 800bfb8:	200002f8 	.word	0x200002f8
 800bfbc:	2000018c 	.word	0x2000018c

0800bfc0 <_strtol_l.isra.0>:
 800bfc0:	2b24      	cmp	r3, #36	@ 0x24
 800bfc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc6:	4686      	mov	lr, r0
 800bfc8:	4690      	mov	r8, r2
 800bfca:	d801      	bhi.n	800bfd0 <_strtol_l.isra.0+0x10>
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d106      	bne.n	800bfde <_strtol_l.isra.0+0x1e>
 800bfd0:	f000 fa46 	bl	800c460 <__errno>
 800bfd4:	2316      	movs	r3, #22
 800bfd6:	6003      	str	r3, [r0, #0]
 800bfd8:	2000      	movs	r0, #0
 800bfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfde:	460d      	mov	r5, r1
 800bfe0:	4833      	ldr	r0, [pc, #204]	@ (800c0b0 <_strtol_l.isra.0+0xf0>)
 800bfe2:	462a      	mov	r2, r5
 800bfe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfe8:	5d06      	ldrb	r6, [r0, r4]
 800bfea:	f016 0608 	ands.w	r6, r6, #8
 800bfee:	d1f8      	bne.n	800bfe2 <_strtol_l.isra.0+0x22>
 800bff0:	2c2d      	cmp	r4, #45	@ 0x2d
 800bff2:	d110      	bne.n	800c016 <_strtol_l.isra.0+0x56>
 800bff4:	2601      	movs	r6, #1
 800bff6:	782c      	ldrb	r4, [r5, #0]
 800bff8:	1c95      	adds	r5, r2, #2
 800bffa:	f033 0210 	bics.w	r2, r3, #16
 800bffe:	d115      	bne.n	800c02c <_strtol_l.isra.0+0x6c>
 800c000:	2c30      	cmp	r4, #48	@ 0x30
 800c002:	d10d      	bne.n	800c020 <_strtol_l.isra.0+0x60>
 800c004:	782a      	ldrb	r2, [r5, #0]
 800c006:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c00a:	2a58      	cmp	r2, #88	@ 0x58
 800c00c:	d108      	bne.n	800c020 <_strtol_l.isra.0+0x60>
 800c00e:	786c      	ldrb	r4, [r5, #1]
 800c010:	3502      	adds	r5, #2
 800c012:	2310      	movs	r3, #16
 800c014:	e00a      	b.n	800c02c <_strtol_l.isra.0+0x6c>
 800c016:	2c2b      	cmp	r4, #43	@ 0x2b
 800c018:	bf04      	itt	eq
 800c01a:	782c      	ldrbeq	r4, [r5, #0]
 800c01c:	1c95      	addeq	r5, r2, #2
 800c01e:	e7ec      	b.n	800bffa <_strtol_l.isra.0+0x3a>
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1f6      	bne.n	800c012 <_strtol_l.isra.0+0x52>
 800c024:	2c30      	cmp	r4, #48	@ 0x30
 800c026:	bf14      	ite	ne
 800c028:	230a      	movne	r3, #10
 800c02a:	2308      	moveq	r3, #8
 800c02c:	2200      	movs	r2, #0
 800c02e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c032:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c036:	fbbc f9f3 	udiv	r9, ip, r3
 800c03a:	4610      	mov	r0, r2
 800c03c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c040:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c044:	2f09      	cmp	r7, #9
 800c046:	d80f      	bhi.n	800c068 <_strtol_l.isra.0+0xa8>
 800c048:	463c      	mov	r4, r7
 800c04a:	42a3      	cmp	r3, r4
 800c04c:	dd1b      	ble.n	800c086 <_strtol_l.isra.0+0xc6>
 800c04e:	1c57      	adds	r7, r2, #1
 800c050:	d007      	beq.n	800c062 <_strtol_l.isra.0+0xa2>
 800c052:	4581      	cmp	r9, r0
 800c054:	d314      	bcc.n	800c080 <_strtol_l.isra.0+0xc0>
 800c056:	d101      	bne.n	800c05c <_strtol_l.isra.0+0x9c>
 800c058:	45a2      	cmp	sl, r4
 800c05a:	db11      	blt.n	800c080 <_strtol_l.isra.0+0xc0>
 800c05c:	2201      	movs	r2, #1
 800c05e:	fb00 4003 	mla	r0, r0, r3, r4
 800c062:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c066:	e7eb      	b.n	800c040 <_strtol_l.isra.0+0x80>
 800c068:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c06c:	2f19      	cmp	r7, #25
 800c06e:	d801      	bhi.n	800c074 <_strtol_l.isra.0+0xb4>
 800c070:	3c37      	subs	r4, #55	@ 0x37
 800c072:	e7ea      	b.n	800c04a <_strtol_l.isra.0+0x8a>
 800c074:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c078:	2f19      	cmp	r7, #25
 800c07a:	d804      	bhi.n	800c086 <_strtol_l.isra.0+0xc6>
 800c07c:	3c57      	subs	r4, #87	@ 0x57
 800c07e:	e7e4      	b.n	800c04a <_strtol_l.isra.0+0x8a>
 800c080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c084:	e7ed      	b.n	800c062 <_strtol_l.isra.0+0xa2>
 800c086:	1c53      	adds	r3, r2, #1
 800c088:	d108      	bne.n	800c09c <_strtol_l.isra.0+0xdc>
 800c08a:	2322      	movs	r3, #34	@ 0x22
 800c08c:	4660      	mov	r0, ip
 800c08e:	f8ce 3000 	str.w	r3, [lr]
 800c092:	f1b8 0f00 	cmp.w	r8, #0
 800c096:	d0a0      	beq.n	800bfda <_strtol_l.isra.0+0x1a>
 800c098:	1e69      	subs	r1, r5, #1
 800c09a:	e006      	b.n	800c0aa <_strtol_l.isra.0+0xea>
 800c09c:	b106      	cbz	r6, 800c0a0 <_strtol_l.isra.0+0xe0>
 800c09e:	4240      	negs	r0, r0
 800c0a0:	f1b8 0f00 	cmp.w	r8, #0
 800c0a4:	d099      	beq.n	800bfda <_strtol_l.isra.0+0x1a>
 800c0a6:	2a00      	cmp	r2, #0
 800c0a8:	d1f6      	bne.n	800c098 <_strtol_l.isra.0+0xd8>
 800c0aa:	f8c8 1000 	str.w	r1, [r8]
 800c0ae:	e794      	b.n	800bfda <_strtol_l.isra.0+0x1a>
 800c0b0:	0800f3d1 	.word	0x0800f3d1

0800c0b4 <strtol>:
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	460a      	mov	r2, r1
 800c0b8:	4601      	mov	r1, r0
 800c0ba:	4802      	ldr	r0, [pc, #8]	@ (800c0c4 <strtol+0x10>)
 800c0bc:	6800      	ldr	r0, [r0, #0]
 800c0be:	f7ff bf7f 	b.w	800bfc0 <_strtol_l.isra.0>
 800c0c2:	bf00      	nop
 800c0c4:	200002f8 	.word	0x200002f8

0800c0c8 <__utoa>:
 800c0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ca:	b08b      	sub	sp, #44	@ 0x2c
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	466e      	mov	r6, sp
 800c0d2:	4c1d      	ldr	r4, [pc, #116]	@ (800c148 <__utoa+0x80>)
 800c0d4:	f104 0c20 	add.w	ip, r4, #32
 800c0d8:	4637      	mov	r7, r6
 800c0da:	6820      	ldr	r0, [r4, #0]
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	3408      	adds	r4, #8
 800c0e0:	c703      	stmia	r7!, {r0, r1}
 800c0e2:	4564      	cmp	r4, ip
 800c0e4:	463e      	mov	r6, r7
 800c0e6:	d1f7      	bne.n	800c0d8 <__utoa+0x10>
 800c0e8:	7921      	ldrb	r1, [r4, #4]
 800c0ea:	6820      	ldr	r0, [r4, #0]
 800c0ec:	7139      	strb	r1, [r7, #4]
 800c0ee:	1e91      	subs	r1, r2, #2
 800c0f0:	2922      	cmp	r1, #34	@ 0x22
 800c0f2:	6038      	str	r0, [r7, #0]
 800c0f4:	f04f 0100 	mov.w	r1, #0
 800c0f8:	d904      	bls.n	800c104 <__utoa+0x3c>
 800c0fa:	7019      	strb	r1, [r3, #0]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4618      	mov	r0, r3
 800c100:	b00b      	add	sp, #44	@ 0x2c
 800c102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c104:	1e58      	subs	r0, r3, #1
 800c106:	4684      	mov	ip, r0
 800c108:	fbb5 f7f2 	udiv	r7, r5, r2
 800c10c:	fb02 5617 	mls	r6, r2, r7, r5
 800c110:	3628      	adds	r6, #40	@ 0x28
 800c112:	446e      	add	r6, sp
 800c114:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c118:	460c      	mov	r4, r1
 800c11a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c11e:	462e      	mov	r6, r5
 800c120:	42b2      	cmp	r2, r6
 800c122:	463d      	mov	r5, r7
 800c124:	f101 0101 	add.w	r1, r1, #1
 800c128:	d9ee      	bls.n	800c108 <__utoa+0x40>
 800c12a:	2200      	movs	r2, #0
 800c12c:	545a      	strb	r2, [r3, r1]
 800c12e:	1919      	adds	r1, r3, r4
 800c130:	1aa5      	subs	r5, r4, r2
 800c132:	42aa      	cmp	r2, r5
 800c134:	dae3      	bge.n	800c0fe <__utoa+0x36>
 800c136:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c13a:	780e      	ldrb	r6, [r1, #0]
 800c13c:	3201      	adds	r2, #1
 800c13e:	7006      	strb	r6, [r0, #0]
 800c140:	f801 5901 	strb.w	r5, [r1], #-1
 800c144:	e7f4      	b.n	800c130 <__utoa+0x68>
 800c146:	bf00      	nop
 800c148:	0800f196 	.word	0x0800f196

0800c14c <gcvt>:
 800c14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c14e:	461c      	mov	r4, r3
 800c150:	4615      	mov	r5, r2
 800c152:	2300      	movs	r3, #0
 800c154:	2200      	movs	r2, #0
 800c156:	b085      	sub	sp, #20
 800c158:	4606      	mov	r6, r0
 800c15a:	460f      	mov	r7, r1
 800c15c:	f7f4 fc2e 	bl	80009bc <__aeabi_dcmplt>
 800c160:	4623      	mov	r3, r4
 800c162:	b118      	cbz	r0, 800c16c <gcvt+0x20>
 800c164:	222d      	movs	r2, #45	@ 0x2d
 800c166:	3d01      	subs	r5, #1
 800c168:	f803 2b01 	strb.w	r2, [r3], #1
 800c16c:	2267      	movs	r2, #103	@ 0x67
 800c16e:	2100      	movs	r1, #0
 800c170:	e9cd 5300 	strd	r5, r3, [sp]
 800c174:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c178:	4905      	ldr	r1, [pc, #20]	@ (800c190 <gcvt+0x44>)
 800c17a:	4632      	mov	r2, r6
 800c17c:	463b      	mov	r3, r7
 800c17e:	6808      	ldr	r0, [r1, #0]
 800c180:	f001 fb32 	bl	800d7e8 <_gcvt>
 800c184:	2800      	cmp	r0, #0
 800c186:	bf18      	it	ne
 800c188:	4620      	movne	r0, r4
 800c18a:	b005      	add	sp, #20
 800c18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18e:	bf00      	nop
 800c190:	200002f8 	.word	0x200002f8

0800c194 <std>:
 800c194:	2300      	movs	r3, #0
 800c196:	b510      	push	{r4, lr}
 800c198:	4604      	mov	r4, r0
 800c19a:	e9c0 3300 	strd	r3, r3, [r0]
 800c19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1a2:	6083      	str	r3, [r0, #8]
 800c1a4:	8181      	strh	r1, [r0, #12]
 800c1a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c1a8:	81c2      	strh	r2, [r0, #14]
 800c1aa:	6183      	str	r3, [r0, #24]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	2208      	movs	r2, #8
 800c1b0:	305c      	adds	r0, #92	@ 0x5c
 800c1b2:	f000 f8f4 	bl	800c39e <memset>
 800c1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c1ec <std+0x58>)
 800c1b8:	6224      	str	r4, [r4, #32]
 800c1ba:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c1f0 <std+0x5c>)
 800c1be:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c1f4 <std+0x60>)
 800c1c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c1f8 <std+0x64>)
 800c1c6:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c1fc <std+0x68>)
 800c1ca:	429c      	cmp	r4, r3
 800c1cc:	d006      	beq.n	800c1dc <std+0x48>
 800c1ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1d2:	4294      	cmp	r4, r2
 800c1d4:	d002      	beq.n	800c1dc <std+0x48>
 800c1d6:	33d0      	adds	r3, #208	@ 0xd0
 800c1d8:	429c      	cmp	r4, r3
 800c1da:	d105      	bne.n	800c1e8 <std+0x54>
 800c1dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1e4:	f000 b966 	b.w	800c4b4 <__retarget_lock_init_recursive>
 800c1e8:	bd10      	pop	{r4, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800c319 	.word	0x0800c319
 800c1f0:	0800c33b 	.word	0x0800c33b
 800c1f4:	0800c373 	.word	0x0800c373
 800c1f8:	0800c397 	.word	0x0800c397
 800c1fc:	200016a0 	.word	0x200016a0

0800c200 <stdio_exit_handler>:
 800c200:	4a02      	ldr	r2, [pc, #8]	@ (800c20c <stdio_exit_handler+0xc>)
 800c202:	4903      	ldr	r1, [pc, #12]	@ (800c210 <stdio_exit_handler+0x10>)
 800c204:	4803      	ldr	r0, [pc, #12]	@ (800c214 <stdio_exit_handler+0x14>)
 800c206:	f000 b869 	b.w	800c2dc <_fwalk_sglue>
 800c20a:	bf00      	nop
 800c20c:	20000180 	.word	0x20000180
 800c210:	0800da89 	.word	0x0800da89
 800c214:	200002fc 	.word	0x200002fc

0800c218 <cleanup_stdio>:
 800c218:	6841      	ldr	r1, [r0, #4]
 800c21a:	4b0c      	ldr	r3, [pc, #48]	@ (800c24c <cleanup_stdio+0x34>)
 800c21c:	b510      	push	{r4, lr}
 800c21e:	4299      	cmp	r1, r3
 800c220:	4604      	mov	r4, r0
 800c222:	d001      	beq.n	800c228 <cleanup_stdio+0x10>
 800c224:	f001 fc30 	bl	800da88 <_fflush_r>
 800c228:	68a1      	ldr	r1, [r4, #8]
 800c22a:	4b09      	ldr	r3, [pc, #36]	@ (800c250 <cleanup_stdio+0x38>)
 800c22c:	4299      	cmp	r1, r3
 800c22e:	d002      	beq.n	800c236 <cleanup_stdio+0x1e>
 800c230:	4620      	mov	r0, r4
 800c232:	f001 fc29 	bl	800da88 <_fflush_r>
 800c236:	68e1      	ldr	r1, [r4, #12]
 800c238:	4b06      	ldr	r3, [pc, #24]	@ (800c254 <cleanup_stdio+0x3c>)
 800c23a:	4299      	cmp	r1, r3
 800c23c:	d004      	beq.n	800c248 <cleanup_stdio+0x30>
 800c23e:	4620      	mov	r0, r4
 800c240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c244:	f001 bc20 	b.w	800da88 <_fflush_r>
 800c248:	bd10      	pop	{r4, pc}
 800c24a:	bf00      	nop
 800c24c:	200016a0 	.word	0x200016a0
 800c250:	20001708 	.word	0x20001708
 800c254:	20001770 	.word	0x20001770

0800c258 <global_stdio_init.part.0>:
 800c258:	b510      	push	{r4, lr}
 800c25a:	4b0b      	ldr	r3, [pc, #44]	@ (800c288 <global_stdio_init.part.0+0x30>)
 800c25c:	4c0b      	ldr	r4, [pc, #44]	@ (800c28c <global_stdio_init.part.0+0x34>)
 800c25e:	4a0c      	ldr	r2, [pc, #48]	@ (800c290 <global_stdio_init.part.0+0x38>)
 800c260:	4620      	mov	r0, r4
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	2104      	movs	r1, #4
 800c266:	2200      	movs	r2, #0
 800c268:	f7ff ff94 	bl	800c194 <std>
 800c26c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c270:	2201      	movs	r2, #1
 800c272:	2109      	movs	r1, #9
 800c274:	f7ff ff8e 	bl	800c194 <std>
 800c278:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c27c:	2202      	movs	r2, #2
 800c27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c282:	2112      	movs	r1, #18
 800c284:	f7ff bf86 	b.w	800c194 <std>
 800c288:	200017d8 	.word	0x200017d8
 800c28c:	200016a0 	.word	0x200016a0
 800c290:	0800c201 	.word	0x0800c201

0800c294 <__sfp_lock_acquire>:
 800c294:	4801      	ldr	r0, [pc, #4]	@ (800c29c <__sfp_lock_acquire+0x8>)
 800c296:	f000 b90e 	b.w	800c4b6 <__retarget_lock_acquire_recursive>
 800c29a:	bf00      	nop
 800c29c:	200017e1 	.word	0x200017e1

0800c2a0 <__sfp_lock_release>:
 800c2a0:	4801      	ldr	r0, [pc, #4]	@ (800c2a8 <__sfp_lock_release+0x8>)
 800c2a2:	f000 b909 	b.w	800c4b8 <__retarget_lock_release_recursive>
 800c2a6:	bf00      	nop
 800c2a8:	200017e1 	.word	0x200017e1

0800c2ac <__sinit>:
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	f7ff fff0 	bl	800c294 <__sfp_lock_acquire>
 800c2b4:	6a23      	ldr	r3, [r4, #32]
 800c2b6:	b11b      	cbz	r3, 800c2c0 <__sinit+0x14>
 800c2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2bc:	f7ff bff0 	b.w	800c2a0 <__sfp_lock_release>
 800c2c0:	4b04      	ldr	r3, [pc, #16]	@ (800c2d4 <__sinit+0x28>)
 800c2c2:	6223      	str	r3, [r4, #32]
 800c2c4:	4b04      	ldr	r3, [pc, #16]	@ (800c2d8 <__sinit+0x2c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1f5      	bne.n	800c2b8 <__sinit+0xc>
 800c2cc:	f7ff ffc4 	bl	800c258 <global_stdio_init.part.0>
 800c2d0:	e7f2      	b.n	800c2b8 <__sinit+0xc>
 800c2d2:	bf00      	nop
 800c2d4:	0800c219 	.word	0x0800c219
 800c2d8:	200017d8 	.word	0x200017d8

0800c2dc <_fwalk_sglue>:
 800c2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e0:	4607      	mov	r7, r0
 800c2e2:	4688      	mov	r8, r1
 800c2e4:	4614      	mov	r4, r2
 800c2e6:	2600      	movs	r6, #0
 800c2e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2ec:	f1b9 0901 	subs.w	r9, r9, #1
 800c2f0:	d505      	bpl.n	800c2fe <_fwalk_sglue+0x22>
 800c2f2:	6824      	ldr	r4, [r4, #0]
 800c2f4:	2c00      	cmp	r4, #0
 800c2f6:	d1f7      	bne.n	800c2e8 <_fwalk_sglue+0xc>
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fe:	89ab      	ldrh	r3, [r5, #12]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d907      	bls.n	800c314 <_fwalk_sglue+0x38>
 800c304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c308:	3301      	adds	r3, #1
 800c30a:	d003      	beq.n	800c314 <_fwalk_sglue+0x38>
 800c30c:	4629      	mov	r1, r5
 800c30e:	4638      	mov	r0, r7
 800c310:	47c0      	blx	r8
 800c312:	4306      	orrs	r6, r0
 800c314:	3568      	adds	r5, #104	@ 0x68
 800c316:	e7e9      	b.n	800c2ec <_fwalk_sglue+0x10>

0800c318 <__sread>:
 800c318:	b510      	push	{r4, lr}
 800c31a:	460c      	mov	r4, r1
 800c31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c320:	f000 f87a 	bl	800c418 <_read_r>
 800c324:	2800      	cmp	r0, #0
 800c326:	bfab      	itete	ge
 800c328:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c32a:	89a3      	ldrhlt	r3, [r4, #12]
 800c32c:	181b      	addge	r3, r3, r0
 800c32e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c332:	bfac      	ite	ge
 800c334:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c336:	81a3      	strhlt	r3, [r4, #12]
 800c338:	bd10      	pop	{r4, pc}

0800c33a <__swrite>:
 800c33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c33e:	461f      	mov	r7, r3
 800c340:	898b      	ldrh	r3, [r1, #12]
 800c342:	4605      	mov	r5, r0
 800c344:	05db      	lsls	r3, r3, #23
 800c346:	460c      	mov	r4, r1
 800c348:	4616      	mov	r6, r2
 800c34a:	d505      	bpl.n	800c358 <__swrite+0x1e>
 800c34c:	2302      	movs	r3, #2
 800c34e:	2200      	movs	r2, #0
 800c350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c354:	f000 f84e 	bl	800c3f4 <_lseek_r>
 800c358:	89a3      	ldrh	r3, [r4, #12]
 800c35a:	4632      	mov	r2, r6
 800c35c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	4628      	mov	r0, r5
 800c364:	463b      	mov	r3, r7
 800c366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c36e:	f000 b865 	b.w	800c43c <_write_r>

0800c372 <__sseek>:
 800c372:	b510      	push	{r4, lr}
 800c374:	460c      	mov	r4, r1
 800c376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c37a:	f000 f83b 	bl	800c3f4 <_lseek_r>
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	bf15      	itete	ne
 800c384:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c386:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c38a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c38e:	81a3      	strheq	r3, [r4, #12]
 800c390:	bf18      	it	ne
 800c392:	81a3      	strhne	r3, [r4, #12]
 800c394:	bd10      	pop	{r4, pc}

0800c396 <__sclose>:
 800c396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39a:	f000 b81b 	b.w	800c3d4 <_close_r>

0800c39e <memset>:
 800c39e:	4603      	mov	r3, r0
 800c3a0:	4402      	add	r2, r0
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d100      	bne.n	800c3a8 <memset+0xa>
 800c3a6:	4770      	bx	lr
 800c3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ac:	e7f9      	b.n	800c3a2 <memset+0x4>

0800c3ae <strncmp>:
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	b16a      	cbz	r2, 800c3ce <strncmp+0x20>
 800c3b2:	3901      	subs	r1, #1
 800c3b4:	1884      	adds	r4, r0, r2
 800c3b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d103      	bne.n	800c3ca <strncmp+0x1c>
 800c3c2:	42a0      	cmp	r0, r4
 800c3c4:	d001      	beq.n	800c3ca <strncmp+0x1c>
 800c3c6:	2a00      	cmp	r2, #0
 800c3c8:	d1f5      	bne.n	800c3b6 <strncmp+0x8>
 800c3ca:	1ad0      	subs	r0, r2, r3
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	e7fc      	b.n	800c3cc <strncmp+0x1e>
	...

0800c3d4 <_close_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	4d05      	ldr	r5, [pc, #20]	@ (800c3f0 <_close_r+0x1c>)
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4608      	mov	r0, r1
 800c3de:	602b      	str	r3, [r5, #0]
 800c3e0:	f7f5 fd0d 	bl	8001dfe <_close>
 800c3e4:	1c43      	adds	r3, r0, #1
 800c3e6:	d102      	bne.n	800c3ee <_close_r+0x1a>
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	b103      	cbz	r3, 800c3ee <_close_r+0x1a>
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	200017dc 	.word	0x200017dc

0800c3f4 <_lseek_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	4608      	mov	r0, r1
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4d05      	ldr	r5, [pc, #20]	@ (800c414 <_lseek_r+0x20>)
 800c400:	602a      	str	r2, [r5, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	f7f5 fd1f 	bl	8001e46 <_lseek>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d102      	bne.n	800c412 <_lseek_r+0x1e>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	b103      	cbz	r3, 800c412 <_lseek_r+0x1e>
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	200017dc 	.word	0x200017dc

0800c418 <_read_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	4611      	mov	r1, r2
 800c420:	2200      	movs	r2, #0
 800c422:	4d05      	ldr	r5, [pc, #20]	@ (800c438 <_read_r+0x20>)
 800c424:	602a      	str	r2, [r5, #0]
 800c426:	461a      	mov	r2, r3
 800c428:	f7f5 fcb0 	bl	8001d8c <_read>
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d102      	bne.n	800c436 <_read_r+0x1e>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b103      	cbz	r3, 800c436 <_read_r+0x1e>
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	200017dc 	.word	0x200017dc

0800c43c <_write_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	4611      	mov	r1, r2
 800c444:	2200      	movs	r2, #0
 800c446:	4d05      	ldr	r5, [pc, #20]	@ (800c45c <_write_r+0x20>)
 800c448:	602a      	str	r2, [r5, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	f7f5 fcbb 	bl	8001dc6 <_write>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_write_r+0x1e>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_write_r+0x1e>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	200017dc 	.word	0x200017dc

0800c460 <__errno>:
 800c460:	4b01      	ldr	r3, [pc, #4]	@ (800c468 <__errno+0x8>)
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	200002f8 	.word	0x200002f8

0800c46c <__libc_init_array>:
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	2600      	movs	r6, #0
 800c470:	4d0c      	ldr	r5, [pc, #48]	@ (800c4a4 <__libc_init_array+0x38>)
 800c472:	4c0d      	ldr	r4, [pc, #52]	@ (800c4a8 <__libc_init_array+0x3c>)
 800c474:	1b64      	subs	r4, r4, r5
 800c476:	10a4      	asrs	r4, r4, #2
 800c478:	42a6      	cmp	r6, r4
 800c47a:	d109      	bne.n	800c490 <__libc_init_array+0x24>
 800c47c:	f002 fe2e 	bl	800f0dc <_init>
 800c480:	2600      	movs	r6, #0
 800c482:	4d0a      	ldr	r5, [pc, #40]	@ (800c4ac <__libc_init_array+0x40>)
 800c484:	4c0a      	ldr	r4, [pc, #40]	@ (800c4b0 <__libc_init_array+0x44>)
 800c486:	1b64      	subs	r4, r4, r5
 800c488:	10a4      	asrs	r4, r4, #2
 800c48a:	42a6      	cmp	r6, r4
 800c48c:	d105      	bne.n	800c49a <__libc_init_array+0x2e>
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	f855 3b04 	ldr.w	r3, [r5], #4
 800c494:	4798      	blx	r3
 800c496:	3601      	adds	r6, #1
 800c498:	e7ee      	b.n	800c478 <__libc_init_array+0xc>
 800c49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c49e:	4798      	blx	r3
 800c4a0:	3601      	adds	r6, #1
 800c4a2:	e7f2      	b.n	800c48a <__libc_init_array+0x1e>
 800c4a4:	0800f5d8 	.word	0x0800f5d8
 800c4a8:	0800f5d8 	.word	0x0800f5d8
 800c4ac:	0800f5d8 	.word	0x0800f5d8
 800c4b0:	0800f5dc 	.word	0x0800f5dc

0800c4b4 <__retarget_lock_init_recursive>:
 800c4b4:	4770      	bx	lr

0800c4b6 <__retarget_lock_acquire_recursive>:
 800c4b6:	4770      	bx	lr

0800c4b8 <__retarget_lock_release_recursive>:
 800c4b8:	4770      	bx	lr

0800c4ba <memcpy>:
 800c4ba:	440a      	add	r2, r1
 800c4bc:	4291      	cmp	r1, r2
 800c4be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c4c2:	d100      	bne.n	800c4c6 <memcpy+0xc>
 800c4c4:	4770      	bx	lr
 800c4c6:	b510      	push	{r4, lr}
 800c4c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4cc:	4291      	cmp	r1, r2
 800c4ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4d2:	d1f9      	bne.n	800c4c8 <memcpy+0xe>
 800c4d4:	bd10      	pop	{r4, pc}
	...

0800c4d8 <nan>:
 800c4d8:	2000      	movs	r0, #0
 800c4da:	4901      	ldr	r1, [pc, #4]	@ (800c4e0 <nan+0x8>)
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	7ff80000 	.word	0x7ff80000

0800c4e4 <_free_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	2900      	cmp	r1, #0
 800c4ea:	d040      	beq.n	800c56e <_free_r+0x8a>
 800c4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f0:	1f0c      	subs	r4, r1, #4
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	bfb8      	it	lt
 800c4f6:	18e4      	addlt	r4, r4, r3
 800c4f8:	f000 fc2a 	bl	800cd50 <__malloc_lock>
 800c4fc:	4a1c      	ldr	r2, [pc, #112]	@ (800c570 <_free_r+0x8c>)
 800c4fe:	6813      	ldr	r3, [r2, #0]
 800c500:	b933      	cbnz	r3, 800c510 <_free_r+0x2c>
 800c502:	6063      	str	r3, [r4, #4]
 800c504:	6014      	str	r4, [r2, #0]
 800c506:	4628      	mov	r0, r5
 800c508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c50c:	f000 bc26 	b.w	800cd5c <__malloc_unlock>
 800c510:	42a3      	cmp	r3, r4
 800c512:	d908      	bls.n	800c526 <_free_r+0x42>
 800c514:	6820      	ldr	r0, [r4, #0]
 800c516:	1821      	adds	r1, r4, r0
 800c518:	428b      	cmp	r3, r1
 800c51a:	bf01      	itttt	eq
 800c51c:	6819      	ldreq	r1, [r3, #0]
 800c51e:	685b      	ldreq	r3, [r3, #4]
 800c520:	1809      	addeq	r1, r1, r0
 800c522:	6021      	streq	r1, [r4, #0]
 800c524:	e7ed      	b.n	800c502 <_free_r+0x1e>
 800c526:	461a      	mov	r2, r3
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	b10b      	cbz	r3, 800c530 <_free_r+0x4c>
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	d9fa      	bls.n	800c526 <_free_r+0x42>
 800c530:	6811      	ldr	r1, [r2, #0]
 800c532:	1850      	adds	r0, r2, r1
 800c534:	42a0      	cmp	r0, r4
 800c536:	d10b      	bne.n	800c550 <_free_r+0x6c>
 800c538:	6820      	ldr	r0, [r4, #0]
 800c53a:	4401      	add	r1, r0
 800c53c:	1850      	adds	r0, r2, r1
 800c53e:	4283      	cmp	r3, r0
 800c540:	6011      	str	r1, [r2, #0]
 800c542:	d1e0      	bne.n	800c506 <_free_r+0x22>
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	4408      	add	r0, r1
 800c54a:	6010      	str	r0, [r2, #0]
 800c54c:	6053      	str	r3, [r2, #4]
 800c54e:	e7da      	b.n	800c506 <_free_r+0x22>
 800c550:	d902      	bls.n	800c558 <_free_r+0x74>
 800c552:	230c      	movs	r3, #12
 800c554:	602b      	str	r3, [r5, #0]
 800c556:	e7d6      	b.n	800c506 <_free_r+0x22>
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	1821      	adds	r1, r4, r0
 800c55c:	428b      	cmp	r3, r1
 800c55e:	bf01      	itttt	eq
 800c560:	6819      	ldreq	r1, [r3, #0]
 800c562:	685b      	ldreq	r3, [r3, #4]
 800c564:	1809      	addeq	r1, r1, r0
 800c566:	6021      	streq	r1, [r4, #0]
 800c568:	6063      	str	r3, [r4, #4]
 800c56a:	6054      	str	r4, [r2, #4]
 800c56c:	e7cb      	b.n	800c506 <_free_r+0x22>
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	200017e8 	.word	0x200017e8

0800c574 <rshift>:
 800c574:	6903      	ldr	r3, [r0, #16]
 800c576:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c57a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c57e:	f100 0414 	add.w	r4, r0, #20
 800c582:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c586:	dd46      	ble.n	800c616 <rshift+0xa2>
 800c588:	f011 011f 	ands.w	r1, r1, #31
 800c58c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c590:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c594:	d10c      	bne.n	800c5b0 <rshift+0x3c>
 800c596:	4629      	mov	r1, r5
 800c598:	f100 0710 	add.w	r7, r0, #16
 800c59c:	42b1      	cmp	r1, r6
 800c59e:	d335      	bcc.n	800c60c <rshift+0x98>
 800c5a0:	1a9b      	subs	r3, r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	1eea      	subs	r2, r5, #3
 800c5a6:	4296      	cmp	r6, r2
 800c5a8:	bf38      	it	cc
 800c5aa:	2300      	movcc	r3, #0
 800c5ac:	4423      	add	r3, r4
 800c5ae:	e015      	b.n	800c5dc <rshift+0x68>
 800c5b0:	46a1      	mov	r9, r4
 800c5b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5b6:	f1c1 0820 	rsb	r8, r1, #32
 800c5ba:	40cf      	lsrs	r7, r1
 800c5bc:	f105 0e04 	add.w	lr, r5, #4
 800c5c0:	4576      	cmp	r6, lr
 800c5c2:	46f4      	mov	ip, lr
 800c5c4:	d816      	bhi.n	800c5f4 <rshift+0x80>
 800c5c6:	1a9a      	subs	r2, r3, r2
 800c5c8:	0092      	lsls	r2, r2, #2
 800c5ca:	3a04      	subs	r2, #4
 800c5cc:	3501      	adds	r5, #1
 800c5ce:	42ae      	cmp	r6, r5
 800c5d0:	bf38      	it	cc
 800c5d2:	2200      	movcc	r2, #0
 800c5d4:	18a3      	adds	r3, r4, r2
 800c5d6:	50a7      	str	r7, [r4, r2]
 800c5d8:	b107      	cbz	r7, 800c5dc <rshift+0x68>
 800c5da:	3304      	adds	r3, #4
 800c5dc:	42a3      	cmp	r3, r4
 800c5de:	eba3 0204 	sub.w	r2, r3, r4
 800c5e2:	bf08      	it	eq
 800c5e4:	2300      	moveq	r3, #0
 800c5e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5ea:	6102      	str	r2, [r0, #16]
 800c5ec:	bf08      	it	eq
 800c5ee:	6143      	streq	r3, [r0, #20]
 800c5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5f4:	f8dc c000 	ldr.w	ip, [ip]
 800c5f8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5fc:	ea4c 0707 	orr.w	r7, ip, r7
 800c600:	f849 7b04 	str.w	r7, [r9], #4
 800c604:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c608:	40cf      	lsrs	r7, r1
 800c60a:	e7d9      	b.n	800c5c0 <rshift+0x4c>
 800c60c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c610:	f847 cf04 	str.w	ip, [r7, #4]!
 800c614:	e7c2      	b.n	800c59c <rshift+0x28>
 800c616:	4623      	mov	r3, r4
 800c618:	e7e0      	b.n	800c5dc <rshift+0x68>

0800c61a <__hexdig_fun>:
 800c61a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c61e:	2b09      	cmp	r3, #9
 800c620:	d802      	bhi.n	800c628 <__hexdig_fun+0xe>
 800c622:	3820      	subs	r0, #32
 800c624:	b2c0      	uxtb	r0, r0
 800c626:	4770      	bx	lr
 800c628:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c62c:	2b05      	cmp	r3, #5
 800c62e:	d801      	bhi.n	800c634 <__hexdig_fun+0x1a>
 800c630:	3847      	subs	r0, #71	@ 0x47
 800c632:	e7f7      	b.n	800c624 <__hexdig_fun+0xa>
 800c634:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c638:	2b05      	cmp	r3, #5
 800c63a:	d801      	bhi.n	800c640 <__hexdig_fun+0x26>
 800c63c:	3827      	subs	r0, #39	@ 0x27
 800c63e:	e7f1      	b.n	800c624 <__hexdig_fun+0xa>
 800c640:	2000      	movs	r0, #0
 800c642:	4770      	bx	lr

0800c644 <__gethex>:
 800c644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	468a      	mov	sl, r1
 800c64a:	4690      	mov	r8, r2
 800c64c:	b085      	sub	sp, #20
 800c64e:	9302      	str	r3, [sp, #8]
 800c650:	680b      	ldr	r3, [r1, #0]
 800c652:	9001      	str	r0, [sp, #4]
 800c654:	1c9c      	adds	r4, r3, #2
 800c656:	46a1      	mov	r9, r4
 800c658:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c65c:	2830      	cmp	r0, #48	@ 0x30
 800c65e:	d0fa      	beq.n	800c656 <__gethex+0x12>
 800c660:	eba9 0303 	sub.w	r3, r9, r3
 800c664:	f1a3 0b02 	sub.w	fp, r3, #2
 800c668:	f7ff ffd7 	bl	800c61a <__hexdig_fun>
 800c66c:	4605      	mov	r5, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	d168      	bne.n	800c744 <__gethex+0x100>
 800c672:	2201      	movs	r2, #1
 800c674:	4648      	mov	r0, r9
 800c676:	499f      	ldr	r1, [pc, #636]	@ (800c8f4 <__gethex+0x2b0>)
 800c678:	f7ff fe99 	bl	800c3ae <strncmp>
 800c67c:	4607      	mov	r7, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	d167      	bne.n	800c752 <__gethex+0x10e>
 800c682:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c686:	4626      	mov	r6, r4
 800c688:	f7ff ffc7 	bl	800c61a <__hexdig_fun>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d062      	beq.n	800c756 <__gethex+0x112>
 800c690:	4623      	mov	r3, r4
 800c692:	7818      	ldrb	r0, [r3, #0]
 800c694:	4699      	mov	r9, r3
 800c696:	2830      	cmp	r0, #48	@ 0x30
 800c698:	f103 0301 	add.w	r3, r3, #1
 800c69c:	d0f9      	beq.n	800c692 <__gethex+0x4e>
 800c69e:	f7ff ffbc 	bl	800c61a <__hexdig_fun>
 800c6a2:	fab0 f580 	clz	r5, r0
 800c6a6:	f04f 0b01 	mov.w	fp, #1
 800c6aa:	096d      	lsrs	r5, r5, #5
 800c6ac:	464a      	mov	r2, r9
 800c6ae:	4616      	mov	r6, r2
 800c6b0:	7830      	ldrb	r0, [r6, #0]
 800c6b2:	3201      	adds	r2, #1
 800c6b4:	f7ff ffb1 	bl	800c61a <__hexdig_fun>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d1f8      	bne.n	800c6ae <__gethex+0x6a>
 800c6bc:	2201      	movs	r2, #1
 800c6be:	4630      	mov	r0, r6
 800c6c0:	498c      	ldr	r1, [pc, #560]	@ (800c8f4 <__gethex+0x2b0>)
 800c6c2:	f7ff fe74 	bl	800c3ae <strncmp>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d13f      	bne.n	800c74a <__gethex+0x106>
 800c6ca:	b944      	cbnz	r4, 800c6de <__gethex+0x9a>
 800c6cc:	1c74      	adds	r4, r6, #1
 800c6ce:	4622      	mov	r2, r4
 800c6d0:	4616      	mov	r6, r2
 800c6d2:	7830      	ldrb	r0, [r6, #0]
 800c6d4:	3201      	adds	r2, #1
 800c6d6:	f7ff ffa0 	bl	800c61a <__hexdig_fun>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d1f8      	bne.n	800c6d0 <__gethex+0x8c>
 800c6de:	1ba4      	subs	r4, r4, r6
 800c6e0:	00a7      	lsls	r7, r4, #2
 800c6e2:	7833      	ldrb	r3, [r6, #0]
 800c6e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c6e8:	2b50      	cmp	r3, #80	@ 0x50
 800c6ea:	d13e      	bne.n	800c76a <__gethex+0x126>
 800c6ec:	7873      	ldrb	r3, [r6, #1]
 800c6ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800c6f0:	d033      	beq.n	800c75a <__gethex+0x116>
 800c6f2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c6f4:	d034      	beq.n	800c760 <__gethex+0x11c>
 800c6f6:	2400      	movs	r4, #0
 800c6f8:	1c71      	adds	r1, r6, #1
 800c6fa:	7808      	ldrb	r0, [r1, #0]
 800c6fc:	f7ff ff8d 	bl	800c61a <__hexdig_fun>
 800c700:	1e43      	subs	r3, r0, #1
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b18      	cmp	r3, #24
 800c706:	d830      	bhi.n	800c76a <__gethex+0x126>
 800c708:	f1a0 0210 	sub.w	r2, r0, #16
 800c70c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c710:	f7ff ff83 	bl	800c61a <__hexdig_fun>
 800c714:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c718:	fa5f fc8c 	uxtb.w	ip, ip
 800c71c:	f1bc 0f18 	cmp.w	ip, #24
 800c720:	f04f 030a 	mov.w	r3, #10
 800c724:	d91e      	bls.n	800c764 <__gethex+0x120>
 800c726:	b104      	cbz	r4, 800c72a <__gethex+0xe6>
 800c728:	4252      	negs	r2, r2
 800c72a:	4417      	add	r7, r2
 800c72c:	f8ca 1000 	str.w	r1, [sl]
 800c730:	b1ed      	cbz	r5, 800c76e <__gethex+0x12a>
 800c732:	f1bb 0f00 	cmp.w	fp, #0
 800c736:	bf0c      	ite	eq
 800c738:	2506      	moveq	r5, #6
 800c73a:	2500      	movne	r5, #0
 800c73c:	4628      	mov	r0, r5
 800c73e:	b005      	add	sp, #20
 800c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c744:	2500      	movs	r5, #0
 800c746:	462c      	mov	r4, r5
 800c748:	e7b0      	b.n	800c6ac <__gethex+0x68>
 800c74a:	2c00      	cmp	r4, #0
 800c74c:	d1c7      	bne.n	800c6de <__gethex+0x9a>
 800c74e:	4627      	mov	r7, r4
 800c750:	e7c7      	b.n	800c6e2 <__gethex+0x9e>
 800c752:	464e      	mov	r6, r9
 800c754:	462f      	mov	r7, r5
 800c756:	2501      	movs	r5, #1
 800c758:	e7c3      	b.n	800c6e2 <__gethex+0x9e>
 800c75a:	2400      	movs	r4, #0
 800c75c:	1cb1      	adds	r1, r6, #2
 800c75e:	e7cc      	b.n	800c6fa <__gethex+0xb6>
 800c760:	2401      	movs	r4, #1
 800c762:	e7fb      	b.n	800c75c <__gethex+0x118>
 800c764:	fb03 0002 	mla	r0, r3, r2, r0
 800c768:	e7ce      	b.n	800c708 <__gethex+0xc4>
 800c76a:	4631      	mov	r1, r6
 800c76c:	e7de      	b.n	800c72c <__gethex+0xe8>
 800c76e:	4629      	mov	r1, r5
 800c770:	eba6 0309 	sub.w	r3, r6, r9
 800c774:	3b01      	subs	r3, #1
 800c776:	2b07      	cmp	r3, #7
 800c778:	dc0a      	bgt.n	800c790 <__gethex+0x14c>
 800c77a:	9801      	ldr	r0, [sp, #4]
 800c77c:	f000 faf4 	bl	800cd68 <_Balloc>
 800c780:	4604      	mov	r4, r0
 800c782:	b940      	cbnz	r0, 800c796 <__gethex+0x152>
 800c784:	4602      	mov	r2, r0
 800c786:	21e4      	movs	r1, #228	@ 0xe4
 800c788:	4b5b      	ldr	r3, [pc, #364]	@ (800c8f8 <__gethex+0x2b4>)
 800c78a:	485c      	ldr	r0, [pc, #368]	@ (800c8fc <__gethex+0x2b8>)
 800c78c:	f001 f9bc 	bl	800db08 <__assert_func>
 800c790:	3101      	adds	r1, #1
 800c792:	105b      	asrs	r3, r3, #1
 800c794:	e7ef      	b.n	800c776 <__gethex+0x132>
 800c796:	2300      	movs	r3, #0
 800c798:	f100 0a14 	add.w	sl, r0, #20
 800c79c:	4655      	mov	r5, sl
 800c79e:	469b      	mov	fp, r3
 800c7a0:	45b1      	cmp	r9, r6
 800c7a2:	d337      	bcc.n	800c814 <__gethex+0x1d0>
 800c7a4:	f845 bb04 	str.w	fp, [r5], #4
 800c7a8:	eba5 050a 	sub.w	r5, r5, sl
 800c7ac:	10ad      	asrs	r5, r5, #2
 800c7ae:	6125      	str	r5, [r4, #16]
 800c7b0:	4658      	mov	r0, fp
 800c7b2:	f000 fbcb 	bl	800cf4c <__hi0bits>
 800c7b6:	016d      	lsls	r5, r5, #5
 800c7b8:	f8d8 6000 	ldr.w	r6, [r8]
 800c7bc:	1a2d      	subs	r5, r5, r0
 800c7be:	42b5      	cmp	r5, r6
 800c7c0:	dd54      	ble.n	800c86c <__gethex+0x228>
 800c7c2:	1bad      	subs	r5, r5, r6
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f000 ff69 	bl	800d69e <__any_on>
 800c7cc:	4681      	mov	r9, r0
 800c7ce:	b178      	cbz	r0, 800c7f0 <__gethex+0x1ac>
 800c7d0:	f04f 0901 	mov.w	r9, #1
 800c7d4:	1e6b      	subs	r3, r5, #1
 800c7d6:	1159      	asrs	r1, r3, #5
 800c7d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c7dc:	f003 021f 	and.w	r2, r3, #31
 800c7e0:	fa09 f202 	lsl.w	r2, r9, r2
 800c7e4:	420a      	tst	r2, r1
 800c7e6:	d003      	beq.n	800c7f0 <__gethex+0x1ac>
 800c7e8:	454b      	cmp	r3, r9
 800c7ea:	dc36      	bgt.n	800c85a <__gethex+0x216>
 800c7ec:	f04f 0902 	mov.w	r9, #2
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f7ff febe 	bl	800c574 <rshift>
 800c7f8:	442f      	add	r7, r5
 800c7fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7fe:	42bb      	cmp	r3, r7
 800c800:	da42      	bge.n	800c888 <__gethex+0x244>
 800c802:	4621      	mov	r1, r4
 800c804:	9801      	ldr	r0, [sp, #4]
 800c806:	f000 faef 	bl	800cde8 <_Bfree>
 800c80a:	2300      	movs	r3, #0
 800c80c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c80e:	25a3      	movs	r5, #163	@ 0xa3
 800c810:	6013      	str	r3, [r2, #0]
 800c812:	e793      	b.n	800c73c <__gethex+0xf8>
 800c814:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c818:	2a2e      	cmp	r2, #46	@ 0x2e
 800c81a:	d012      	beq.n	800c842 <__gethex+0x1fe>
 800c81c:	2b20      	cmp	r3, #32
 800c81e:	d104      	bne.n	800c82a <__gethex+0x1e6>
 800c820:	f845 bb04 	str.w	fp, [r5], #4
 800c824:	f04f 0b00 	mov.w	fp, #0
 800c828:	465b      	mov	r3, fp
 800c82a:	7830      	ldrb	r0, [r6, #0]
 800c82c:	9303      	str	r3, [sp, #12]
 800c82e:	f7ff fef4 	bl	800c61a <__hexdig_fun>
 800c832:	9b03      	ldr	r3, [sp, #12]
 800c834:	f000 000f 	and.w	r0, r0, #15
 800c838:	4098      	lsls	r0, r3
 800c83a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c83e:	3304      	adds	r3, #4
 800c840:	e7ae      	b.n	800c7a0 <__gethex+0x15c>
 800c842:	45b1      	cmp	r9, r6
 800c844:	d8ea      	bhi.n	800c81c <__gethex+0x1d8>
 800c846:	2201      	movs	r2, #1
 800c848:	4630      	mov	r0, r6
 800c84a:	492a      	ldr	r1, [pc, #168]	@ (800c8f4 <__gethex+0x2b0>)
 800c84c:	9303      	str	r3, [sp, #12]
 800c84e:	f7ff fdae 	bl	800c3ae <strncmp>
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	2800      	cmp	r0, #0
 800c856:	d1e1      	bne.n	800c81c <__gethex+0x1d8>
 800c858:	e7a2      	b.n	800c7a0 <__gethex+0x15c>
 800c85a:	4620      	mov	r0, r4
 800c85c:	1ea9      	subs	r1, r5, #2
 800c85e:	f000 ff1e 	bl	800d69e <__any_on>
 800c862:	2800      	cmp	r0, #0
 800c864:	d0c2      	beq.n	800c7ec <__gethex+0x1a8>
 800c866:	f04f 0903 	mov.w	r9, #3
 800c86a:	e7c1      	b.n	800c7f0 <__gethex+0x1ac>
 800c86c:	da09      	bge.n	800c882 <__gethex+0x23e>
 800c86e:	1b75      	subs	r5, r6, r5
 800c870:	4621      	mov	r1, r4
 800c872:	462a      	mov	r2, r5
 800c874:	9801      	ldr	r0, [sp, #4]
 800c876:	f000 fcc7 	bl	800d208 <__lshift>
 800c87a:	4604      	mov	r4, r0
 800c87c:	1b7f      	subs	r7, r7, r5
 800c87e:	f100 0a14 	add.w	sl, r0, #20
 800c882:	f04f 0900 	mov.w	r9, #0
 800c886:	e7b8      	b.n	800c7fa <__gethex+0x1b6>
 800c888:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c88c:	42bd      	cmp	r5, r7
 800c88e:	dd6f      	ble.n	800c970 <__gethex+0x32c>
 800c890:	1bed      	subs	r5, r5, r7
 800c892:	42ae      	cmp	r6, r5
 800c894:	dc34      	bgt.n	800c900 <__gethex+0x2bc>
 800c896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d022      	beq.n	800c8e4 <__gethex+0x2a0>
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d024      	beq.n	800c8ec <__gethex+0x2a8>
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d115      	bne.n	800c8d2 <__gethex+0x28e>
 800c8a6:	42ae      	cmp	r6, r5
 800c8a8:	d113      	bne.n	800c8d2 <__gethex+0x28e>
 800c8aa:	2e01      	cmp	r6, #1
 800c8ac:	d10b      	bne.n	800c8c6 <__gethex+0x282>
 800c8ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8b2:	9a02      	ldr	r2, [sp, #8]
 800c8b4:	2562      	movs	r5, #98	@ 0x62
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	6123      	str	r3, [r4, #16]
 800c8bc:	f8ca 3000 	str.w	r3, [sl]
 800c8c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8c2:	601c      	str	r4, [r3, #0]
 800c8c4:	e73a      	b.n	800c73c <__gethex+0xf8>
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	1e71      	subs	r1, r6, #1
 800c8ca:	f000 fee8 	bl	800d69e <__any_on>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d1ed      	bne.n	800c8ae <__gethex+0x26a>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	9801      	ldr	r0, [sp, #4]
 800c8d6:	f000 fa87 	bl	800cde8 <_Bfree>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8de:	2550      	movs	r5, #80	@ 0x50
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	e72b      	b.n	800c73c <__gethex+0xf8>
 800c8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1f3      	bne.n	800c8d2 <__gethex+0x28e>
 800c8ea:	e7e0      	b.n	800c8ae <__gethex+0x26a>
 800c8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1dd      	bne.n	800c8ae <__gethex+0x26a>
 800c8f2:	e7ee      	b.n	800c8d2 <__gethex+0x28e>
 800c8f4:	0800f18e 	.word	0x0800f18e
 800c8f8:	0800f1c3 	.word	0x0800f1c3
 800c8fc:	0800f1d4 	.word	0x0800f1d4
 800c900:	1e6f      	subs	r7, r5, #1
 800c902:	f1b9 0f00 	cmp.w	r9, #0
 800c906:	d130      	bne.n	800c96a <__gethex+0x326>
 800c908:	b127      	cbz	r7, 800c914 <__gethex+0x2d0>
 800c90a:	4639      	mov	r1, r7
 800c90c:	4620      	mov	r0, r4
 800c90e:	f000 fec6 	bl	800d69e <__any_on>
 800c912:	4681      	mov	r9, r0
 800c914:	2301      	movs	r3, #1
 800c916:	4629      	mov	r1, r5
 800c918:	1b76      	subs	r6, r6, r5
 800c91a:	2502      	movs	r5, #2
 800c91c:	117a      	asrs	r2, r7, #5
 800c91e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c922:	f007 071f 	and.w	r7, r7, #31
 800c926:	40bb      	lsls	r3, r7
 800c928:	4213      	tst	r3, r2
 800c92a:	4620      	mov	r0, r4
 800c92c:	bf18      	it	ne
 800c92e:	f049 0902 	orrne.w	r9, r9, #2
 800c932:	f7ff fe1f 	bl	800c574 <rshift>
 800c936:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c93a:	f1b9 0f00 	cmp.w	r9, #0
 800c93e:	d047      	beq.n	800c9d0 <__gethex+0x38c>
 800c940:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d015      	beq.n	800c974 <__gethex+0x330>
 800c948:	2b03      	cmp	r3, #3
 800c94a:	d017      	beq.n	800c97c <__gethex+0x338>
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d109      	bne.n	800c964 <__gethex+0x320>
 800c950:	f019 0f02 	tst.w	r9, #2
 800c954:	d006      	beq.n	800c964 <__gethex+0x320>
 800c956:	f8da 3000 	ldr.w	r3, [sl]
 800c95a:	ea49 0903 	orr.w	r9, r9, r3
 800c95e:	f019 0f01 	tst.w	r9, #1
 800c962:	d10e      	bne.n	800c982 <__gethex+0x33e>
 800c964:	f045 0510 	orr.w	r5, r5, #16
 800c968:	e032      	b.n	800c9d0 <__gethex+0x38c>
 800c96a:	f04f 0901 	mov.w	r9, #1
 800c96e:	e7d1      	b.n	800c914 <__gethex+0x2d0>
 800c970:	2501      	movs	r5, #1
 800c972:	e7e2      	b.n	800c93a <__gethex+0x2f6>
 800c974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c976:	f1c3 0301 	rsb	r3, r3, #1
 800c97a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0f0      	beq.n	800c964 <__gethex+0x320>
 800c982:	f04f 0c00 	mov.w	ip, #0
 800c986:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c98a:	f104 0314 	add.w	r3, r4, #20
 800c98e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c992:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c996:	4618      	mov	r0, r3
 800c998:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c9a0:	d01b      	beq.n	800c9da <__gethex+0x396>
 800c9a2:	3201      	adds	r2, #1
 800c9a4:	6002      	str	r2, [r0, #0]
 800c9a6:	2d02      	cmp	r5, #2
 800c9a8:	f104 0314 	add.w	r3, r4, #20
 800c9ac:	d13c      	bne.n	800ca28 <__gethex+0x3e4>
 800c9ae:	f8d8 2000 	ldr.w	r2, [r8]
 800c9b2:	3a01      	subs	r2, #1
 800c9b4:	42b2      	cmp	r2, r6
 800c9b6:	d109      	bne.n	800c9cc <__gethex+0x388>
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	1171      	asrs	r1, r6, #5
 800c9bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9c0:	f006 061f 	and.w	r6, r6, #31
 800c9c4:	fa02 f606 	lsl.w	r6, r2, r6
 800c9c8:	421e      	tst	r6, r3
 800c9ca:	d13a      	bne.n	800ca42 <__gethex+0x3fe>
 800c9cc:	f045 0520 	orr.w	r5, r5, #32
 800c9d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9d2:	601c      	str	r4, [r3, #0]
 800c9d4:	9b02      	ldr	r3, [sp, #8]
 800c9d6:	601f      	str	r7, [r3, #0]
 800c9d8:	e6b0      	b.n	800c73c <__gethex+0xf8>
 800c9da:	4299      	cmp	r1, r3
 800c9dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9e0:	d8d9      	bhi.n	800c996 <__gethex+0x352>
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	459b      	cmp	fp, r3
 800c9e6:	db17      	blt.n	800ca18 <__gethex+0x3d4>
 800c9e8:	6861      	ldr	r1, [r4, #4]
 800c9ea:	9801      	ldr	r0, [sp, #4]
 800c9ec:	3101      	adds	r1, #1
 800c9ee:	f000 f9bb 	bl	800cd68 <_Balloc>
 800c9f2:	4681      	mov	r9, r0
 800c9f4:	b918      	cbnz	r0, 800c9fe <__gethex+0x3ba>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	2184      	movs	r1, #132	@ 0x84
 800c9fa:	4b19      	ldr	r3, [pc, #100]	@ (800ca60 <__gethex+0x41c>)
 800c9fc:	e6c5      	b.n	800c78a <__gethex+0x146>
 800c9fe:	6922      	ldr	r2, [r4, #16]
 800ca00:	f104 010c 	add.w	r1, r4, #12
 800ca04:	3202      	adds	r2, #2
 800ca06:	0092      	lsls	r2, r2, #2
 800ca08:	300c      	adds	r0, #12
 800ca0a:	f7ff fd56 	bl	800c4ba <memcpy>
 800ca0e:	4621      	mov	r1, r4
 800ca10:	9801      	ldr	r0, [sp, #4]
 800ca12:	f000 f9e9 	bl	800cde8 <_Bfree>
 800ca16:	464c      	mov	r4, r9
 800ca18:	6923      	ldr	r3, [r4, #16]
 800ca1a:	1c5a      	adds	r2, r3, #1
 800ca1c:	6122      	str	r2, [r4, #16]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca24:	615a      	str	r2, [r3, #20]
 800ca26:	e7be      	b.n	800c9a6 <__gethex+0x362>
 800ca28:	6922      	ldr	r2, [r4, #16]
 800ca2a:	455a      	cmp	r2, fp
 800ca2c:	dd0b      	ble.n	800ca46 <__gethex+0x402>
 800ca2e:	2101      	movs	r1, #1
 800ca30:	4620      	mov	r0, r4
 800ca32:	f7ff fd9f 	bl	800c574 <rshift>
 800ca36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca3a:	3701      	adds	r7, #1
 800ca3c:	42bb      	cmp	r3, r7
 800ca3e:	f6ff aee0 	blt.w	800c802 <__gethex+0x1be>
 800ca42:	2501      	movs	r5, #1
 800ca44:	e7c2      	b.n	800c9cc <__gethex+0x388>
 800ca46:	f016 061f 	ands.w	r6, r6, #31
 800ca4a:	d0fa      	beq.n	800ca42 <__gethex+0x3fe>
 800ca4c:	4453      	add	r3, sl
 800ca4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca52:	f000 fa7b 	bl	800cf4c <__hi0bits>
 800ca56:	f1c6 0620 	rsb	r6, r6, #32
 800ca5a:	42b0      	cmp	r0, r6
 800ca5c:	dbe7      	blt.n	800ca2e <__gethex+0x3ea>
 800ca5e:	e7f0      	b.n	800ca42 <__gethex+0x3fe>
 800ca60:	0800f1c3 	.word	0x0800f1c3

0800ca64 <L_shift>:
 800ca64:	f1c2 0208 	rsb	r2, r2, #8
 800ca68:	0092      	lsls	r2, r2, #2
 800ca6a:	b570      	push	{r4, r5, r6, lr}
 800ca6c:	f1c2 0620 	rsb	r6, r2, #32
 800ca70:	6843      	ldr	r3, [r0, #4]
 800ca72:	6804      	ldr	r4, [r0, #0]
 800ca74:	fa03 f506 	lsl.w	r5, r3, r6
 800ca78:	432c      	orrs	r4, r5
 800ca7a:	40d3      	lsrs	r3, r2
 800ca7c:	6004      	str	r4, [r0, #0]
 800ca7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca82:	4288      	cmp	r0, r1
 800ca84:	d3f4      	bcc.n	800ca70 <L_shift+0xc>
 800ca86:	bd70      	pop	{r4, r5, r6, pc}

0800ca88 <__match>:
 800ca88:	b530      	push	{r4, r5, lr}
 800ca8a:	6803      	ldr	r3, [r0, #0]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca92:	b914      	cbnz	r4, 800ca9a <__match+0x12>
 800ca94:	6003      	str	r3, [r0, #0]
 800ca96:	2001      	movs	r0, #1
 800ca98:	bd30      	pop	{r4, r5, pc}
 800ca9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800caa2:	2d19      	cmp	r5, #25
 800caa4:	bf98      	it	ls
 800caa6:	3220      	addls	r2, #32
 800caa8:	42a2      	cmp	r2, r4
 800caaa:	d0f0      	beq.n	800ca8e <__match+0x6>
 800caac:	2000      	movs	r0, #0
 800caae:	e7f3      	b.n	800ca98 <__match+0x10>

0800cab0 <__hexnan>:
 800cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	2500      	movs	r5, #0
 800cab6:	680b      	ldr	r3, [r1, #0]
 800cab8:	4682      	mov	sl, r0
 800caba:	115e      	asrs	r6, r3, #5
 800cabc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cac0:	f013 031f 	ands.w	r3, r3, #31
 800cac4:	bf18      	it	ne
 800cac6:	3604      	addne	r6, #4
 800cac8:	1f37      	subs	r7, r6, #4
 800caca:	4690      	mov	r8, r2
 800cacc:	46b9      	mov	r9, r7
 800cace:	463c      	mov	r4, r7
 800cad0:	46ab      	mov	fp, r5
 800cad2:	b087      	sub	sp, #28
 800cad4:	6801      	ldr	r1, [r0, #0]
 800cad6:	9301      	str	r3, [sp, #4]
 800cad8:	f846 5c04 	str.w	r5, [r6, #-4]
 800cadc:	9502      	str	r5, [sp, #8]
 800cade:	784a      	ldrb	r2, [r1, #1]
 800cae0:	1c4b      	adds	r3, r1, #1
 800cae2:	9303      	str	r3, [sp, #12]
 800cae4:	b342      	cbz	r2, 800cb38 <__hexnan+0x88>
 800cae6:	4610      	mov	r0, r2
 800cae8:	9105      	str	r1, [sp, #20]
 800caea:	9204      	str	r2, [sp, #16]
 800caec:	f7ff fd95 	bl	800c61a <__hexdig_fun>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d151      	bne.n	800cb98 <__hexnan+0xe8>
 800caf4:	9a04      	ldr	r2, [sp, #16]
 800caf6:	9905      	ldr	r1, [sp, #20]
 800caf8:	2a20      	cmp	r2, #32
 800cafa:	d818      	bhi.n	800cb2e <__hexnan+0x7e>
 800cafc:	9b02      	ldr	r3, [sp, #8]
 800cafe:	459b      	cmp	fp, r3
 800cb00:	dd13      	ble.n	800cb2a <__hexnan+0x7a>
 800cb02:	454c      	cmp	r4, r9
 800cb04:	d206      	bcs.n	800cb14 <__hexnan+0x64>
 800cb06:	2d07      	cmp	r5, #7
 800cb08:	dc04      	bgt.n	800cb14 <__hexnan+0x64>
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f7ff ffa8 	bl	800ca64 <L_shift>
 800cb14:	4544      	cmp	r4, r8
 800cb16:	d952      	bls.n	800cbbe <__hexnan+0x10e>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb22:	461d      	mov	r5, r3
 800cb24:	464c      	mov	r4, r9
 800cb26:	f8cd b008 	str.w	fp, [sp, #8]
 800cb2a:	9903      	ldr	r1, [sp, #12]
 800cb2c:	e7d7      	b.n	800cade <__hexnan+0x2e>
 800cb2e:	2a29      	cmp	r2, #41	@ 0x29
 800cb30:	d157      	bne.n	800cbe2 <__hexnan+0x132>
 800cb32:	3102      	adds	r1, #2
 800cb34:	f8ca 1000 	str.w	r1, [sl]
 800cb38:	f1bb 0f00 	cmp.w	fp, #0
 800cb3c:	d051      	beq.n	800cbe2 <__hexnan+0x132>
 800cb3e:	454c      	cmp	r4, r9
 800cb40:	d206      	bcs.n	800cb50 <__hexnan+0xa0>
 800cb42:	2d07      	cmp	r5, #7
 800cb44:	dc04      	bgt.n	800cb50 <__hexnan+0xa0>
 800cb46:	462a      	mov	r2, r5
 800cb48:	4649      	mov	r1, r9
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f7ff ff8a 	bl	800ca64 <L_shift>
 800cb50:	4544      	cmp	r4, r8
 800cb52:	d936      	bls.n	800cbc2 <__hexnan+0x112>
 800cb54:	4623      	mov	r3, r4
 800cb56:	f1a8 0204 	sub.w	r2, r8, #4
 800cb5a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb5e:	429f      	cmp	r7, r3
 800cb60:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb64:	d2f9      	bcs.n	800cb5a <__hexnan+0xaa>
 800cb66:	1b3b      	subs	r3, r7, r4
 800cb68:	f023 0303 	bic.w	r3, r3, #3
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	3401      	adds	r4, #1
 800cb70:	3e03      	subs	r6, #3
 800cb72:	42b4      	cmp	r4, r6
 800cb74:	bf88      	it	hi
 800cb76:	2304      	movhi	r3, #4
 800cb78:	2200      	movs	r2, #0
 800cb7a:	4443      	add	r3, r8
 800cb7c:	f843 2b04 	str.w	r2, [r3], #4
 800cb80:	429f      	cmp	r7, r3
 800cb82:	d2fb      	bcs.n	800cb7c <__hexnan+0xcc>
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	b91b      	cbnz	r3, 800cb90 <__hexnan+0xe0>
 800cb88:	4547      	cmp	r7, r8
 800cb8a:	d128      	bne.n	800cbde <__hexnan+0x12e>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	603b      	str	r3, [r7, #0]
 800cb90:	2005      	movs	r0, #5
 800cb92:	b007      	add	sp, #28
 800cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb98:	3501      	adds	r5, #1
 800cb9a:	2d08      	cmp	r5, #8
 800cb9c:	f10b 0b01 	add.w	fp, fp, #1
 800cba0:	dd06      	ble.n	800cbb0 <__hexnan+0x100>
 800cba2:	4544      	cmp	r4, r8
 800cba4:	d9c1      	bls.n	800cb2a <__hexnan+0x7a>
 800cba6:	2300      	movs	r3, #0
 800cba8:	2501      	movs	r5, #1
 800cbaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbae:	3c04      	subs	r4, #4
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	f000 000f 	and.w	r0, r0, #15
 800cbb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cbba:	6020      	str	r0, [r4, #0]
 800cbbc:	e7b5      	b.n	800cb2a <__hexnan+0x7a>
 800cbbe:	2508      	movs	r5, #8
 800cbc0:	e7b3      	b.n	800cb2a <__hexnan+0x7a>
 800cbc2:	9b01      	ldr	r3, [sp, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d0dd      	beq.n	800cb84 <__hexnan+0xd4>
 800cbc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cbcc:	f1c3 0320 	rsb	r3, r3, #32
 800cbd0:	40da      	lsrs	r2, r3
 800cbd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cbd6:	4013      	ands	r3, r2
 800cbd8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cbdc:	e7d2      	b.n	800cb84 <__hexnan+0xd4>
 800cbde:	3f04      	subs	r7, #4
 800cbe0:	e7d0      	b.n	800cb84 <__hexnan+0xd4>
 800cbe2:	2004      	movs	r0, #4
 800cbe4:	e7d5      	b.n	800cb92 <__hexnan+0xe2>
	...

0800cbe8 <sbrk_aligned>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	4e0f      	ldr	r6, [pc, #60]	@ (800cc28 <sbrk_aligned+0x40>)
 800cbec:	460c      	mov	r4, r1
 800cbee:	6831      	ldr	r1, [r6, #0]
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	b911      	cbnz	r1, 800cbfa <sbrk_aligned+0x12>
 800cbf4:	f000 ff70 	bl	800dad8 <_sbrk_r>
 800cbf8:	6030      	str	r0, [r6, #0]
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	f000 ff6b 	bl	800dad8 <_sbrk_r>
 800cc02:	1c43      	adds	r3, r0, #1
 800cc04:	d103      	bne.n	800cc0e <sbrk_aligned+0x26>
 800cc06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	bd70      	pop	{r4, r5, r6, pc}
 800cc0e:	1cc4      	adds	r4, r0, #3
 800cc10:	f024 0403 	bic.w	r4, r4, #3
 800cc14:	42a0      	cmp	r0, r4
 800cc16:	d0f8      	beq.n	800cc0a <sbrk_aligned+0x22>
 800cc18:	1a21      	subs	r1, r4, r0
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f000 ff5c 	bl	800dad8 <_sbrk_r>
 800cc20:	3001      	adds	r0, #1
 800cc22:	d1f2      	bne.n	800cc0a <sbrk_aligned+0x22>
 800cc24:	e7ef      	b.n	800cc06 <sbrk_aligned+0x1e>
 800cc26:	bf00      	nop
 800cc28:	200017e4 	.word	0x200017e4

0800cc2c <_malloc_r>:
 800cc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc30:	1ccd      	adds	r5, r1, #3
 800cc32:	f025 0503 	bic.w	r5, r5, #3
 800cc36:	3508      	adds	r5, #8
 800cc38:	2d0c      	cmp	r5, #12
 800cc3a:	bf38      	it	cc
 800cc3c:	250c      	movcc	r5, #12
 800cc3e:	2d00      	cmp	r5, #0
 800cc40:	4606      	mov	r6, r0
 800cc42:	db01      	blt.n	800cc48 <_malloc_r+0x1c>
 800cc44:	42a9      	cmp	r1, r5
 800cc46:	d904      	bls.n	800cc52 <_malloc_r+0x26>
 800cc48:	230c      	movs	r3, #12
 800cc4a:	6033      	str	r3, [r6, #0]
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd28 <_malloc_r+0xfc>
 800cc56:	f000 f87b 	bl	800cd50 <__malloc_lock>
 800cc5a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc5e:	461c      	mov	r4, r3
 800cc60:	bb44      	cbnz	r4, 800ccb4 <_malloc_r+0x88>
 800cc62:	4629      	mov	r1, r5
 800cc64:	4630      	mov	r0, r6
 800cc66:	f7ff ffbf 	bl	800cbe8 <sbrk_aligned>
 800cc6a:	1c43      	adds	r3, r0, #1
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	d158      	bne.n	800cd22 <_malloc_r+0xf6>
 800cc70:	f8d8 4000 	ldr.w	r4, [r8]
 800cc74:	4627      	mov	r7, r4
 800cc76:	2f00      	cmp	r7, #0
 800cc78:	d143      	bne.n	800cd02 <_malloc_r+0xd6>
 800cc7a:	2c00      	cmp	r4, #0
 800cc7c:	d04b      	beq.n	800cd16 <_malloc_r+0xea>
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	4639      	mov	r1, r7
 800cc82:	4630      	mov	r0, r6
 800cc84:	eb04 0903 	add.w	r9, r4, r3
 800cc88:	f000 ff26 	bl	800dad8 <_sbrk_r>
 800cc8c:	4581      	cmp	r9, r0
 800cc8e:	d142      	bne.n	800cd16 <_malloc_r+0xea>
 800cc90:	6821      	ldr	r1, [r4, #0]
 800cc92:	4630      	mov	r0, r6
 800cc94:	1a6d      	subs	r5, r5, r1
 800cc96:	4629      	mov	r1, r5
 800cc98:	f7ff ffa6 	bl	800cbe8 <sbrk_aligned>
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d03a      	beq.n	800cd16 <_malloc_r+0xea>
 800cca0:	6823      	ldr	r3, [r4, #0]
 800cca2:	442b      	add	r3, r5
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	bb62      	cbnz	r2, 800cd08 <_malloc_r+0xdc>
 800ccae:	f8c8 7000 	str.w	r7, [r8]
 800ccb2:	e00f      	b.n	800ccd4 <_malloc_r+0xa8>
 800ccb4:	6822      	ldr	r2, [r4, #0]
 800ccb6:	1b52      	subs	r2, r2, r5
 800ccb8:	d420      	bmi.n	800ccfc <_malloc_r+0xd0>
 800ccba:	2a0b      	cmp	r2, #11
 800ccbc:	d917      	bls.n	800ccee <_malloc_r+0xc2>
 800ccbe:	1961      	adds	r1, r4, r5
 800ccc0:	42a3      	cmp	r3, r4
 800ccc2:	6025      	str	r5, [r4, #0]
 800ccc4:	bf18      	it	ne
 800ccc6:	6059      	strne	r1, [r3, #4]
 800ccc8:	6863      	ldr	r3, [r4, #4]
 800ccca:	bf08      	it	eq
 800cccc:	f8c8 1000 	streq.w	r1, [r8]
 800ccd0:	5162      	str	r2, [r4, r5]
 800ccd2:	604b      	str	r3, [r1, #4]
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f000 f841 	bl	800cd5c <__malloc_unlock>
 800ccda:	f104 000b 	add.w	r0, r4, #11
 800ccde:	1d23      	adds	r3, r4, #4
 800cce0:	f020 0007 	bic.w	r0, r0, #7
 800cce4:	1ac2      	subs	r2, r0, r3
 800cce6:	bf1c      	itt	ne
 800cce8:	1a1b      	subne	r3, r3, r0
 800ccea:	50a3      	strne	r3, [r4, r2]
 800ccec:	e7af      	b.n	800cc4e <_malloc_r+0x22>
 800ccee:	6862      	ldr	r2, [r4, #4]
 800ccf0:	42a3      	cmp	r3, r4
 800ccf2:	bf0c      	ite	eq
 800ccf4:	f8c8 2000 	streq.w	r2, [r8]
 800ccf8:	605a      	strne	r2, [r3, #4]
 800ccfa:	e7eb      	b.n	800ccd4 <_malloc_r+0xa8>
 800ccfc:	4623      	mov	r3, r4
 800ccfe:	6864      	ldr	r4, [r4, #4]
 800cd00:	e7ae      	b.n	800cc60 <_malloc_r+0x34>
 800cd02:	463c      	mov	r4, r7
 800cd04:	687f      	ldr	r7, [r7, #4]
 800cd06:	e7b6      	b.n	800cc76 <_malloc_r+0x4a>
 800cd08:	461a      	mov	r2, r3
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	42a3      	cmp	r3, r4
 800cd0e:	d1fb      	bne.n	800cd08 <_malloc_r+0xdc>
 800cd10:	2300      	movs	r3, #0
 800cd12:	6053      	str	r3, [r2, #4]
 800cd14:	e7de      	b.n	800ccd4 <_malloc_r+0xa8>
 800cd16:	230c      	movs	r3, #12
 800cd18:	4630      	mov	r0, r6
 800cd1a:	6033      	str	r3, [r6, #0]
 800cd1c:	f000 f81e 	bl	800cd5c <__malloc_unlock>
 800cd20:	e794      	b.n	800cc4c <_malloc_r+0x20>
 800cd22:	6005      	str	r5, [r0, #0]
 800cd24:	e7d6      	b.n	800ccd4 <_malloc_r+0xa8>
 800cd26:	bf00      	nop
 800cd28:	200017e8 	.word	0x200017e8

0800cd2c <__ascii_mbtowc>:
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	b901      	cbnz	r1, 800cd32 <__ascii_mbtowc+0x6>
 800cd30:	a901      	add	r1, sp, #4
 800cd32:	b142      	cbz	r2, 800cd46 <__ascii_mbtowc+0x1a>
 800cd34:	b14b      	cbz	r3, 800cd4a <__ascii_mbtowc+0x1e>
 800cd36:	7813      	ldrb	r3, [r2, #0]
 800cd38:	600b      	str	r3, [r1, #0]
 800cd3a:	7812      	ldrb	r2, [r2, #0]
 800cd3c:	1e10      	subs	r0, r2, #0
 800cd3e:	bf18      	it	ne
 800cd40:	2001      	movne	r0, #1
 800cd42:	b002      	add	sp, #8
 800cd44:	4770      	bx	lr
 800cd46:	4610      	mov	r0, r2
 800cd48:	e7fb      	b.n	800cd42 <__ascii_mbtowc+0x16>
 800cd4a:	f06f 0001 	mvn.w	r0, #1
 800cd4e:	e7f8      	b.n	800cd42 <__ascii_mbtowc+0x16>

0800cd50 <__malloc_lock>:
 800cd50:	4801      	ldr	r0, [pc, #4]	@ (800cd58 <__malloc_lock+0x8>)
 800cd52:	f7ff bbb0 	b.w	800c4b6 <__retarget_lock_acquire_recursive>
 800cd56:	bf00      	nop
 800cd58:	200017e0 	.word	0x200017e0

0800cd5c <__malloc_unlock>:
 800cd5c:	4801      	ldr	r0, [pc, #4]	@ (800cd64 <__malloc_unlock+0x8>)
 800cd5e:	f7ff bbab 	b.w	800c4b8 <__retarget_lock_release_recursive>
 800cd62:	bf00      	nop
 800cd64:	200017e0 	.word	0x200017e0

0800cd68 <_Balloc>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	69c6      	ldr	r6, [r0, #28]
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	460d      	mov	r5, r1
 800cd70:	b976      	cbnz	r6, 800cd90 <_Balloc+0x28>
 800cd72:	2010      	movs	r0, #16
 800cd74:	f001 fd58 	bl	800e828 <malloc>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	61e0      	str	r0, [r4, #28]
 800cd7c:	b920      	cbnz	r0, 800cd88 <_Balloc+0x20>
 800cd7e:	216b      	movs	r1, #107	@ 0x6b
 800cd80:	4b17      	ldr	r3, [pc, #92]	@ (800cde0 <_Balloc+0x78>)
 800cd82:	4818      	ldr	r0, [pc, #96]	@ (800cde4 <_Balloc+0x7c>)
 800cd84:	f000 fec0 	bl	800db08 <__assert_func>
 800cd88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd8c:	6006      	str	r6, [r0, #0]
 800cd8e:	60c6      	str	r6, [r0, #12]
 800cd90:	69e6      	ldr	r6, [r4, #28]
 800cd92:	68f3      	ldr	r3, [r6, #12]
 800cd94:	b183      	cbz	r3, 800cdb8 <_Balloc+0x50>
 800cd96:	69e3      	ldr	r3, [r4, #28]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd9e:	b9b8      	cbnz	r0, 800cdd0 <_Balloc+0x68>
 800cda0:	2101      	movs	r1, #1
 800cda2:	fa01 f605 	lsl.w	r6, r1, r5
 800cda6:	1d72      	adds	r2, r6, #5
 800cda8:	4620      	mov	r0, r4
 800cdaa:	0092      	lsls	r2, r2, #2
 800cdac:	f000 feca 	bl	800db44 <_calloc_r>
 800cdb0:	b160      	cbz	r0, 800cdcc <_Balloc+0x64>
 800cdb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cdb6:	e00e      	b.n	800cdd6 <_Balloc+0x6e>
 800cdb8:	2221      	movs	r2, #33	@ 0x21
 800cdba:	2104      	movs	r1, #4
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f000 fec1 	bl	800db44 <_calloc_r>
 800cdc2:	69e3      	ldr	r3, [r4, #28]
 800cdc4:	60f0      	str	r0, [r6, #12]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1e4      	bne.n	800cd96 <_Balloc+0x2e>
 800cdcc:	2000      	movs	r0, #0
 800cdce:	bd70      	pop	{r4, r5, r6, pc}
 800cdd0:	6802      	ldr	r2, [r0, #0]
 800cdd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cddc:	e7f7      	b.n	800cdce <_Balloc+0x66>
 800cdde:	bf00      	nop
 800cde0:	0800f234 	.word	0x0800f234
 800cde4:	0800f24b 	.word	0x0800f24b

0800cde8 <_Bfree>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	69c6      	ldr	r6, [r0, #28]
 800cdec:	4605      	mov	r5, r0
 800cdee:	460c      	mov	r4, r1
 800cdf0:	b976      	cbnz	r6, 800ce10 <_Bfree+0x28>
 800cdf2:	2010      	movs	r0, #16
 800cdf4:	f001 fd18 	bl	800e828 <malloc>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	61e8      	str	r0, [r5, #28]
 800cdfc:	b920      	cbnz	r0, 800ce08 <_Bfree+0x20>
 800cdfe:	218f      	movs	r1, #143	@ 0x8f
 800ce00:	4b08      	ldr	r3, [pc, #32]	@ (800ce24 <_Bfree+0x3c>)
 800ce02:	4809      	ldr	r0, [pc, #36]	@ (800ce28 <_Bfree+0x40>)
 800ce04:	f000 fe80 	bl	800db08 <__assert_func>
 800ce08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce0c:	6006      	str	r6, [r0, #0]
 800ce0e:	60c6      	str	r6, [r0, #12]
 800ce10:	b13c      	cbz	r4, 800ce22 <_Bfree+0x3a>
 800ce12:	69eb      	ldr	r3, [r5, #28]
 800ce14:	6862      	ldr	r2, [r4, #4]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce1c:	6021      	str	r1, [r4, #0]
 800ce1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce22:	bd70      	pop	{r4, r5, r6, pc}
 800ce24:	0800f234 	.word	0x0800f234
 800ce28:	0800f24b 	.word	0x0800f24b

0800ce2c <__multadd>:
 800ce2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce30:	4607      	mov	r7, r0
 800ce32:	460c      	mov	r4, r1
 800ce34:	461e      	mov	r6, r3
 800ce36:	2000      	movs	r0, #0
 800ce38:	690d      	ldr	r5, [r1, #16]
 800ce3a:	f101 0c14 	add.w	ip, r1, #20
 800ce3e:	f8dc 3000 	ldr.w	r3, [ip]
 800ce42:	3001      	adds	r0, #1
 800ce44:	b299      	uxth	r1, r3
 800ce46:	fb02 6101 	mla	r1, r2, r1, r6
 800ce4a:	0c1e      	lsrs	r6, r3, #16
 800ce4c:	0c0b      	lsrs	r3, r1, #16
 800ce4e:	fb02 3306 	mla	r3, r2, r6, r3
 800ce52:	b289      	uxth	r1, r1
 800ce54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce58:	4285      	cmp	r5, r0
 800ce5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce5e:	f84c 1b04 	str.w	r1, [ip], #4
 800ce62:	dcec      	bgt.n	800ce3e <__multadd+0x12>
 800ce64:	b30e      	cbz	r6, 800ceaa <__multadd+0x7e>
 800ce66:	68a3      	ldr	r3, [r4, #8]
 800ce68:	42ab      	cmp	r3, r5
 800ce6a:	dc19      	bgt.n	800cea0 <__multadd+0x74>
 800ce6c:	6861      	ldr	r1, [r4, #4]
 800ce6e:	4638      	mov	r0, r7
 800ce70:	3101      	adds	r1, #1
 800ce72:	f7ff ff79 	bl	800cd68 <_Balloc>
 800ce76:	4680      	mov	r8, r0
 800ce78:	b928      	cbnz	r0, 800ce86 <__multadd+0x5a>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	21ba      	movs	r1, #186	@ 0xba
 800ce7e:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb0 <__multadd+0x84>)
 800ce80:	480c      	ldr	r0, [pc, #48]	@ (800ceb4 <__multadd+0x88>)
 800ce82:	f000 fe41 	bl	800db08 <__assert_func>
 800ce86:	6922      	ldr	r2, [r4, #16]
 800ce88:	f104 010c 	add.w	r1, r4, #12
 800ce8c:	3202      	adds	r2, #2
 800ce8e:	0092      	lsls	r2, r2, #2
 800ce90:	300c      	adds	r0, #12
 800ce92:	f7ff fb12 	bl	800c4ba <memcpy>
 800ce96:	4621      	mov	r1, r4
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f7ff ffa5 	bl	800cde8 <_Bfree>
 800ce9e:	4644      	mov	r4, r8
 800cea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cea4:	3501      	adds	r5, #1
 800cea6:	615e      	str	r6, [r3, #20]
 800cea8:	6125      	str	r5, [r4, #16]
 800ceaa:	4620      	mov	r0, r4
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	0800f1c3 	.word	0x0800f1c3
 800ceb4:	0800f24b 	.word	0x0800f24b

0800ceb8 <__s2b>:
 800ceb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cebc:	4615      	mov	r5, r2
 800cebe:	2209      	movs	r2, #9
 800cec0:	461f      	mov	r7, r3
 800cec2:	3308      	adds	r3, #8
 800cec4:	460c      	mov	r4, r1
 800cec6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceca:	4606      	mov	r6, r0
 800cecc:	2201      	movs	r2, #1
 800cece:	2100      	movs	r1, #0
 800ced0:	429a      	cmp	r2, r3
 800ced2:	db09      	blt.n	800cee8 <__s2b+0x30>
 800ced4:	4630      	mov	r0, r6
 800ced6:	f7ff ff47 	bl	800cd68 <_Balloc>
 800ceda:	b940      	cbnz	r0, 800ceee <__s2b+0x36>
 800cedc:	4602      	mov	r2, r0
 800cede:	21d3      	movs	r1, #211	@ 0xd3
 800cee0:	4b18      	ldr	r3, [pc, #96]	@ (800cf44 <__s2b+0x8c>)
 800cee2:	4819      	ldr	r0, [pc, #100]	@ (800cf48 <__s2b+0x90>)
 800cee4:	f000 fe10 	bl	800db08 <__assert_func>
 800cee8:	0052      	lsls	r2, r2, #1
 800ceea:	3101      	adds	r1, #1
 800ceec:	e7f0      	b.n	800ced0 <__s2b+0x18>
 800ceee:	9b08      	ldr	r3, [sp, #32]
 800cef0:	2d09      	cmp	r5, #9
 800cef2:	6143      	str	r3, [r0, #20]
 800cef4:	f04f 0301 	mov.w	r3, #1
 800cef8:	6103      	str	r3, [r0, #16]
 800cefa:	dd16      	ble.n	800cf2a <__s2b+0x72>
 800cefc:	f104 0909 	add.w	r9, r4, #9
 800cf00:	46c8      	mov	r8, r9
 800cf02:	442c      	add	r4, r5
 800cf04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf08:	4601      	mov	r1, r0
 800cf0a:	220a      	movs	r2, #10
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	3b30      	subs	r3, #48	@ 0x30
 800cf10:	f7ff ff8c 	bl	800ce2c <__multadd>
 800cf14:	45a0      	cmp	r8, r4
 800cf16:	d1f5      	bne.n	800cf04 <__s2b+0x4c>
 800cf18:	f1a5 0408 	sub.w	r4, r5, #8
 800cf1c:	444c      	add	r4, r9
 800cf1e:	1b2d      	subs	r5, r5, r4
 800cf20:	1963      	adds	r3, r4, r5
 800cf22:	42bb      	cmp	r3, r7
 800cf24:	db04      	blt.n	800cf30 <__s2b+0x78>
 800cf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf2a:	2509      	movs	r5, #9
 800cf2c:	340a      	adds	r4, #10
 800cf2e:	e7f6      	b.n	800cf1e <__s2b+0x66>
 800cf30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf34:	4601      	mov	r1, r0
 800cf36:	220a      	movs	r2, #10
 800cf38:	4630      	mov	r0, r6
 800cf3a:	3b30      	subs	r3, #48	@ 0x30
 800cf3c:	f7ff ff76 	bl	800ce2c <__multadd>
 800cf40:	e7ee      	b.n	800cf20 <__s2b+0x68>
 800cf42:	bf00      	nop
 800cf44:	0800f1c3 	.word	0x0800f1c3
 800cf48:	0800f24b 	.word	0x0800f24b

0800cf4c <__hi0bits>:
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf52:	bf3a      	itte	cc
 800cf54:	0403      	lslcc	r3, r0, #16
 800cf56:	2010      	movcc	r0, #16
 800cf58:	2000      	movcs	r0, #0
 800cf5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf5e:	bf3c      	itt	cc
 800cf60:	021b      	lslcc	r3, r3, #8
 800cf62:	3008      	addcc	r0, #8
 800cf64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf68:	bf3c      	itt	cc
 800cf6a:	011b      	lslcc	r3, r3, #4
 800cf6c:	3004      	addcc	r0, #4
 800cf6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf72:	bf3c      	itt	cc
 800cf74:	009b      	lslcc	r3, r3, #2
 800cf76:	3002      	addcc	r0, #2
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	db05      	blt.n	800cf88 <__hi0bits+0x3c>
 800cf7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf80:	f100 0001 	add.w	r0, r0, #1
 800cf84:	bf08      	it	eq
 800cf86:	2020      	moveq	r0, #32
 800cf88:	4770      	bx	lr

0800cf8a <__lo0bits>:
 800cf8a:	6803      	ldr	r3, [r0, #0]
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	f013 0007 	ands.w	r0, r3, #7
 800cf92:	d00b      	beq.n	800cfac <__lo0bits+0x22>
 800cf94:	07d9      	lsls	r1, r3, #31
 800cf96:	d421      	bmi.n	800cfdc <__lo0bits+0x52>
 800cf98:	0798      	lsls	r0, r3, #30
 800cf9a:	bf49      	itett	mi
 800cf9c:	085b      	lsrmi	r3, r3, #1
 800cf9e:	089b      	lsrpl	r3, r3, #2
 800cfa0:	2001      	movmi	r0, #1
 800cfa2:	6013      	strmi	r3, [r2, #0]
 800cfa4:	bf5c      	itt	pl
 800cfa6:	2002      	movpl	r0, #2
 800cfa8:	6013      	strpl	r3, [r2, #0]
 800cfaa:	4770      	bx	lr
 800cfac:	b299      	uxth	r1, r3
 800cfae:	b909      	cbnz	r1, 800cfb4 <__lo0bits+0x2a>
 800cfb0:	2010      	movs	r0, #16
 800cfb2:	0c1b      	lsrs	r3, r3, #16
 800cfb4:	b2d9      	uxtb	r1, r3
 800cfb6:	b909      	cbnz	r1, 800cfbc <__lo0bits+0x32>
 800cfb8:	3008      	adds	r0, #8
 800cfba:	0a1b      	lsrs	r3, r3, #8
 800cfbc:	0719      	lsls	r1, r3, #28
 800cfbe:	bf04      	itt	eq
 800cfc0:	091b      	lsreq	r3, r3, #4
 800cfc2:	3004      	addeq	r0, #4
 800cfc4:	0799      	lsls	r1, r3, #30
 800cfc6:	bf04      	itt	eq
 800cfc8:	089b      	lsreq	r3, r3, #2
 800cfca:	3002      	addeq	r0, #2
 800cfcc:	07d9      	lsls	r1, r3, #31
 800cfce:	d403      	bmi.n	800cfd8 <__lo0bits+0x4e>
 800cfd0:	085b      	lsrs	r3, r3, #1
 800cfd2:	f100 0001 	add.w	r0, r0, #1
 800cfd6:	d003      	beq.n	800cfe0 <__lo0bits+0x56>
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	4770      	bx	lr
 800cfdc:	2000      	movs	r0, #0
 800cfde:	4770      	bx	lr
 800cfe0:	2020      	movs	r0, #32
 800cfe2:	4770      	bx	lr

0800cfe4 <__i2b>:
 800cfe4:	b510      	push	{r4, lr}
 800cfe6:	460c      	mov	r4, r1
 800cfe8:	2101      	movs	r1, #1
 800cfea:	f7ff febd 	bl	800cd68 <_Balloc>
 800cfee:	4602      	mov	r2, r0
 800cff0:	b928      	cbnz	r0, 800cffe <__i2b+0x1a>
 800cff2:	f240 1145 	movw	r1, #325	@ 0x145
 800cff6:	4b04      	ldr	r3, [pc, #16]	@ (800d008 <__i2b+0x24>)
 800cff8:	4804      	ldr	r0, [pc, #16]	@ (800d00c <__i2b+0x28>)
 800cffa:	f000 fd85 	bl	800db08 <__assert_func>
 800cffe:	2301      	movs	r3, #1
 800d000:	6144      	str	r4, [r0, #20]
 800d002:	6103      	str	r3, [r0, #16]
 800d004:	bd10      	pop	{r4, pc}
 800d006:	bf00      	nop
 800d008:	0800f1c3 	.word	0x0800f1c3
 800d00c:	0800f24b 	.word	0x0800f24b

0800d010 <__multiply>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	4617      	mov	r7, r2
 800d016:	690a      	ldr	r2, [r1, #16]
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	4689      	mov	r9, r1
 800d01c:	429a      	cmp	r2, r3
 800d01e:	bfa2      	ittt	ge
 800d020:	463b      	movge	r3, r7
 800d022:	460f      	movge	r7, r1
 800d024:	4699      	movge	r9, r3
 800d026:	693d      	ldr	r5, [r7, #16]
 800d028:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	6879      	ldr	r1, [r7, #4]
 800d030:	eb05 060a 	add.w	r6, r5, sl
 800d034:	42b3      	cmp	r3, r6
 800d036:	b085      	sub	sp, #20
 800d038:	bfb8      	it	lt
 800d03a:	3101      	addlt	r1, #1
 800d03c:	f7ff fe94 	bl	800cd68 <_Balloc>
 800d040:	b930      	cbnz	r0, 800d050 <__multiply+0x40>
 800d042:	4602      	mov	r2, r0
 800d044:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d048:	4b40      	ldr	r3, [pc, #256]	@ (800d14c <__multiply+0x13c>)
 800d04a:	4841      	ldr	r0, [pc, #260]	@ (800d150 <__multiply+0x140>)
 800d04c:	f000 fd5c 	bl	800db08 <__assert_func>
 800d050:	f100 0414 	add.w	r4, r0, #20
 800d054:	4623      	mov	r3, r4
 800d056:	2200      	movs	r2, #0
 800d058:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d05c:	4573      	cmp	r3, lr
 800d05e:	d320      	bcc.n	800d0a2 <__multiply+0x92>
 800d060:	f107 0814 	add.w	r8, r7, #20
 800d064:	f109 0114 	add.w	r1, r9, #20
 800d068:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d06c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d070:	9302      	str	r3, [sp, #8]
 800d072:	1beb      	subs	r3, r5, r7
 800d074:	3b15      	subs	r3, #21
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	3304      	adds	r3, #4
 800d07c:	3715      	adds	r7, #21
 800d07e:	42bd      	cmp	r5, r7
 800d080:	bf38      	it	cc
 800d082:	2304      	movcc	r3, #4
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	9b02      	ldr	r3, [sp, #8]
 800d088:	9103      	str	r1, [sp, #12]
 800d08a:	428b      	cmp	r3, r1
 800d08c:	d80c      	bhi.n	800d0a8 <__multiply+0x98>
 800d08e:	2e00      	cmp	r6, #0
 800d090:	dd03      	ble.n	800d09a <__multiply+0x8a>
 800d092:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d096:	2b00      	cmp	r3, #0
 800d098:	d055      	beq.n	800d146 <__multiply+0x136>
 800d09a:	6106      	str	r6, [r0, #16]
 800d09c:	b005      	add	sp, #20
 800d09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a2:	f843 2b04 	str.w	r2, [r3], #4
 800d0a6:	e7d9      	b.n	800d05c <__multiply+0x4c>
 800d0a8:	f8b1 a000 	ldrh.w	sl, [r1]
 800d0ac:	f1ba 0f00 	cmp.w	sl, #0
 800d0b0:	d01f      	beq.n	800d0f2 <__multiply+0xe2>
 800d0b2:	46c4      	mov	ip, r8
 800d0b4:	46a1      	mov	r9, r4
 800d0b6:	2700      	movs	r7, #0
 800d0b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d0bc:	f8d9 3000 	ldr.w	r3, [r9]
 800d0c0:	fa1f fb82 	uxth.w	fp, r2
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	fb0a 330b 	mla	r3, sl, fp, r3
 800d0ca:	443b      	add	r3, r7
 800d0cc:	f8d9 7000 	ldr.w	r7, [r9]
 800d0d0:	0c12      	lsrs	r2, r2, #16
 800d0d2:	0c3f      	lsrs	r7, r7, #16
 800d0d4:	fb0a 7202 	mla	r2, sl, r2, r7
 800d0d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0e2:	4565      	cmp	r5, ip
 800d0e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d0e8:	f849 3b04 	str.w	r3, [r9], #4
 800d0ec:	d8e4      	bhi.n	800d0b8 <__multiply+0xa8>
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	50e7      	str	r7, [r4, r3]
 800d0f2:	9b03      	ldr	r3, [sp, #12]
 800d0f4:	3104      	adds	r1, #4
 800d0f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0fa:	f1b9 0f00 	cmp.w	r9, #0
 800d0fe:	d020      	beq.n	800d142 <__multiply+0x132>
 800d100:	4647      	mov	r7, r8
 800d102:	46a4      	mov	ip, r4
 800d104:	f04f 0a00 	mov.w	sl, #0
 800d108:	6823      	ldr	r3, [r4, #0]
 800d10a:	f8b7 b000 	ldrh.w	fp, [r7]
 800d10e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d112:	b29b      	uxth	r3, r3
 800d114:	fb09 220b 	mla	r2, r9, fp, r2
 800d118:	4452      	add	r2, sl
 800d11a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d11e:	f84c 3b04 	str.w	r3, [ip], #4
 800d122:	f857 3b04 	ldr.w	r3, [r7], #4
 800d126:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d12a:	f8bc 3000 	ldrh.w	r3, [ip]
 800d12e:	42bd      	cmp	r5, r7
 800d130:	fb09 330a 	mla	r3, r9, sl, r3
 800d134:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d13c:	d8e5      	bhi.n	800d10a <__multiply+0xfa>
 800d13e:	9a01      	ldr	r2, [sp, #4]
 800d140:	50a3      	str	r3, [r4, r2]
 800d142:	3404      	adds	r4, #4
 800d144:	e79f      	b.n	800d086 <__multiply+0x76>
 800d146:	3e01      	subs	r6, #1
 800d148:	e7a1      	b.n	800d08e <__multiply+0x7e>
 800d14a:	bf00      	nop
 800d14c:	0800f1c3 	.word	0x0800f1c3
 800d150:	0800f24b 	.word	0x0800f24b

0800d154 <__pow5mult>:
 800d154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d158:	4615      	mov	r5, r2
 800d15a:	f012 0203 	ands.w	r2, r2, #3
 800d15e:	4607      	mov	r7, r0
 800d160:	460e      	mov	r6, r1
 800d162:	d007      	beq.n	800d174 <__pow5mult+0x20>
 800d164:	4c25      	ldr	r4, [pc, #148]	@ (800d1fc <__pow5mult+0xa8>)
 800d166:	3a01      	subs	r2, #1
 800d168:	2300      	movs	r3, #0
 800d16a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d16e:	f7ff fe5d 	bl	800ce2c <__multadd>
 800d172:	4606      	mov	r6, r0
 800d174:	10ad      	asrs	r5, r5, #2
 800d176:	d03d      	beq.n	800d1f4 <__pow5mult+0xa0>
 800d178:	69fc      	ldr	r4, [r7, #28]
 800d17a:	b97c      	cbnz	r4, 800d19c <__pow5mult+0x48>
 800d17c:	2010      	movs	r0, #16
 800d17e:	f001 fb53 	bl	800e828 <malloc>
 800d182:	4602      	mov	r2, r0
 800d184:	61f8      	str	r0, [r7, #28]
 800d186:	b928      	cbnz	r0, 800d194 <__pow5mult+0x40>
 800d188:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d18c:	4b1c      	ldr	r3, [pc, #112]	@ (800d200 <__pow5mult+0xac>)
 800d18e:	481d      	ldr	r0, [pc, #116]	@ (800d204 <__pow5mult+0xb0>)
 800d190:	f000 fcba 	bl	800db08 <__assert_func>
 800d194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d198:	6004      	str	r4, [r0, #0]
 800d19a:	60c4      	str	r4, [r0, #12]
 800d19c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d1a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1a4:	b94c      	cbnz	r4, 800d1ba <__pow5mult+0x66>
 800d1a6:	f240 2171 	movw	r1, #625	@ 0x271
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	f7ff ff1a 	bl	800cfe4 <__i2b>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1b8:	6003      	str	r3, [r0, #0]
 800d1ba:	f04f 0900 	mov.w	r9, #0
 800d1be:	07eb      	lsls	r3, r5, #31
 800d1c0:	d50a      	bpl.n	800d1d8 <__pow5mult+0x84>
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	4622      	mov	r2, r4
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	f7ff ff22 	bl	800d010 <__multiply>
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	4638      	mov	r0, r7
 800d1d2:	f7ff fe09 	bl	800cde8 <_Bfree>
 800d1d6:	4646      	mov	r6, r8
 800d1d8:	106d      	asrs	r5, r5, #1
 800d1da:	d00b      	beq.n	800d1f4 <__pow5mult+0xa0>
 800d1dc:	6820      	ldr	r0, [r4, #0]
 800d1de:	b938      	cbnz	r0, 800d1f0 <__pow5mult+0x9c>
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	4638      	mov	r0, r7
 800d1e6:	f7ff ff13 	bl	800d010 <__multiply>
 800d1ea:	6020      	str	r0, [r4, #0]
 800d1ec:	f8c0 9000 	str.w	r9, [r0]
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	e7e4      	b.n	800d1be <__pow5mult+0x6a>
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1fa:	bf00      	nop
 800d1fc:	0800f4d4 	.word	0x0800f4d4
 800d200:	0800f234 	.word	0x0800f234
 800d204:	0800f24b 	.word	0x0800f24b

0800d208 <__lshift>:
 800d208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d20c:	460c      	mov	r4, r1
 800d20e:	4607      	mov	r7, r0
 800d210:	4691      	mov	r9, r2
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	6849      	ldr	r1, [r1, #4]
 800d216:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d21a:	68a3      	ldr	r3, [r4, #8]
 800d21c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d220:	f108 0601 	add.w	r6, r8, #1
 800d224:	42b3      	cmp	r3, r6
 800d226:	db0b      	blt.n	800d240 <__lshift+0x38>
 800d228:	4638      	mov	r0, r7
 800d22a:	f7ff fd9d 	bl	800cd68 <_Balloc>
 800d22e:	4605      	mov	r5, r0
 800d230:	b948      	cbnz	r0, 800d246 <__lshift+0x3e>
 800d232:	4602      	mov	r2, r0
 800d234:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d238:	4b27      	ldr	r3, [pc, #156]	@ (800d2d8 <__lshift+0xd0>)
 800d23a:	4828      	ldr	r0, [pc, #160]	@ (800d2dc <__lshift+0xd4>)
 800d23c:	f000 fc64 	bl	800db08 <__assert_func>
 800d240:	3101      	adds	r1, #1
 800d242:	005b      	lsls	r3, r3, #1
 800d244:	e7ee      	b.n	800d224 <__lshift+0x1c>
 800d246:	2300      	movs	r3, #0
 800d248:	f100 0114 	add.w	r1, r0, #20
 800d24c:	f100 0210 	add.w	r2, r0, #16
 800d250:	4618      	mov	r0, r3
 800d252:	4553      	cmp	r3, sl
 800d254:	db33      	blt.n	800d2be <__lshift+0xb6>
 800d256:	6920      	ldr	r0, [r4, #16]
 800d258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d25c:	f104 0314 	add.w	r3, r4, #20
 800d260:	f019 091f 	ands.w	r9, r9, #31
 800d264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d26c:	d02b      	beq.n	800d2c6 <__lshift+0xbe>
 800d26e:	468a      	mov	sl, r1
 800d270:	2200      	movs	r2, #0
 800d272:	f1c9 0e20 	rsb	lr, r9, #32
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	fa00 f009 	lsl.w	r0, r0, r9
 800d27c:	4310      	orrs	r0, r2
 800d27e:	f84a 0b04 	str.w	r0, [sl], #4
 800d282:	f853 2b04 	ldr.w	r2, [r3], #4
 800d286:	459c      	cmp	ip, r3
 800d288:	fa22 f20e 	lsr.w	r2, r2, lr
 800d28c:	d8f3      	bhi.n	800d276 <__lshift+0x6e>
 800d28e:	ebac 0304 	sub.w	r3, ip, r4
 800d292:	3b15      	subs	r3, #21
 800d294:	f023 0303 	bic.w	r3, r3, #3
 800d298:	3304      	adds	r3, #4
 800d29a:	f104 0015 	add.w	r0, r4, #21
 800d29e:	4560      	cmp	r0, ip
 800d2a0:	bf88      	it	hi
 800d2a2:	2304      	movhi	r3, #4
 800d2a4:	50ca      	str	r2, [r1, r3]
 800d2a6:	b10a      	cbz	r2, 800d2ac <__lshift+0xa4>
 800d2a8:	f108 0602 	add.w	r6, r8, #2
 800d2ac:	3e01      	subs	r6, #1
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	612e      	str	r6, [r5, #16]
 800d2b4:	f7ff fd98 	bl	800cde8 <_Bfree>
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	e7c5      	b.n	800d252 <__lshift+0x4a>
 800d2c6:	3904      	subs	r1, #4
 800d2c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2cc:	459c      	cmp	ip, r3
 800d2ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2d2:	d8f9      	bhi.n	800d2c8 <__lshift+0xc0>
 800d2d4:	e7ea      	b.n	800d2ac <__lshift+0xa4>
 800d2d6:	bf00      	nop
 800d2d8:	0800f1c3 	.word	0x0800f1c3
 800d2dc:	0800f24b 	.word	0x0800f24b

0800d2e0 <__mcmp>:
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	690a      	ldr	r2, [r1, #16]
 800d2e4:	6900      	ldr	r0, [r0, #16]
 800d2e6:	b530      	push	{r4, r5, lr}
 800d2e8:	1a80      	subs	r0, r0, r2
 800d2ea:	d10e      	bne.n	800d30a <__mcmp+0x2a>
 800d2ec:	3314      	adds	r3, #20
 800d2ee:	3114      	adds	r1, #20
 800d2f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d300:	4295      	cmp	r5, r2
 800d302:	d003      	beq.n	800d30c <__mcmp+0x2c>
 800d304:	d205      	bcs.n	800d312 <__mcmp+0x32>
 800d306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d30a:	bd30      	pop	{r4, r5, pc}
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	d3f3      	bcc.n	800d2f8 <__mcmp+0x18>
 800d310:	e7fb      	b.n	800d30a <__mcmp+0x2a>
 800d312:	2001      	movs	r0, #1
 800d314:	e7f9      	b.n	800d30a <__mcmp+0x2a>
	...

0800d318 <__mdiff>:
 800d318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31c:	4689      	mov	r9, r1
 800d31e:	4606      	mov	r6, r0
 800d320:	4611      	mov	r1, r2
 800d322:	4648      	mov	r0, r9
 800d324:	4614      	mov	r4, r2
 800d326:	f7ff ffdb 	bl	800d2e0 <__mcmp>
 800d32a:	1e05      	subs	r5, r0, #0
 800d32c:	d112      	bne.n	800d354 <__mdiff+0x3c>
 800d32e:	4629      	mov	r1, r5
 800d330:	4630      	mov	r0, r6
 800d332:	f7ff fd19 	bl	800cd68 <_Balloc>
 800d336:	4602      	mov	r2, r0
 800d338:	b928      	cbnz	r0, 800d346 <__mdiff+0x2e>
 800d33a:	f240 2137 	movw	r1, #567	@ 0x237
 800d33e:	4b3e      	ldr	r3, [pc, #248]	@ (800d438 <__mdiff+0x120>)
 800d340:	483e      	ldr	r0, [pc, #248]	@ (800d43c <__mdiff+0x124>)
 800d342:	f000 fbe1 	bl	800db08 <__assert_func>
 800d346:	2301      	movs	r3, #1
 800d348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d34c:	4610      	mov	r0, r2
 800d34e:	b003      	add	sp, #12
 800d350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d354:	bfbc      	itt	lt
 800d356:	464b      	movlt	r3, r9
 800d358:	46a1      	movlt	r9, r4
 800d35a:	4630      	mov	r0, r6
 800d35c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d360:	bfba      	itte	lt
 800d362:	461c      	movlt	r4, r3
 800d364:	2501      	movlt	r5, #1
 800d366:	2500      	movge	r5, #0
 800d368:	f7ff fcfe 	bl	800cd68 <_Balloc>
 800d36c:	4602      	mov	r2, r0
 800d36e:	b918      	cbnz	r0, 800d378 <__mdiff+0x60>
 800d370:	f240 2145 	movw	r1, #581	@ 0x245
 800d374:	4b30      	ldr	r3, [pc, #192]	@ (800d438 <__mdiff+0x120>)
 800d376:	e7e3      	b.n	800d340 <__mdiff+0x28>
 800d378:	f100 0b14 	add.w	fp, r0, #20
 800d37c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d380:	f109 0310 	add.w	r3, r9, #16
 800d384:	60c5      	str	r5, [r0, #12]
 800d386:	f04f 0c00 	mov.w	ip, #0
 800d38a:	f109 0514 	add.w	r5, r9, #20
 800d38e:	46d9      	mov	r9, fp
 800d390:	6926      	ldr	r6, [r4, #16]
 800d392:	f104 0e14 	add.w	lr, r4, #20
 800d396:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d39a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d39e:	9301      	str	r3, [sp, #4]
 800d3a0:	9b01      	ldr	r3, [sp, #4]
 800d3a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d3a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d3aa:	b281      	uxth	r1, r0
 800d3ac:	9301      	str	r3, [sp, #4]
 800d3ae:	fa1f f38a 	uxth.w	r3, sl
 800d3b2:	1a5b      	subs	r3, r3, r1
 800d3b4:	0c00      	lsrs	r0, r0, #16
 800d3b6:	4463      	add	r3, ip
 800d3b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d3bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d3c6:	4576      	cmp	r6, lr
 800d3c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3cc:	f849 3b04 	str.w	r3, [r9], #4
 800d3d0:	d8e6      	bhi.n	800d3a0 <__mdiff+0x88>
 800d3d2:	1b33      	subs	r3, r6, r4
 800d3d4:	3b15      	subs	r3, #21
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	3415      	adds	r4, #21
 800d3dc:	3304      	adds	r3, #4
 800d3de:	42a6      	cmp	r6, r4
 800d3e0:	bf38      	it	cc
 800d3e2:	2304      	movcc	r3, #4
 800d3e4:	441d      	add	r5, r3
 800d3e6:	445b      	add	r3, fp
 800d3e8:	461e      	mov	r6, r3
 800d3ea:	462c      	mov	r4, r5
 800d3ec:	4544      	cmp	r4, r8
 800d3ee:	d30e      	bcc.n	800d40e <__mdiff+0xf6>
 800d3f0:	f108 0103 	add.w	r1, r8, #3
 800d3f4:	1b49      	subs	r1, r1, r5
 800d3f6:	f021 0103 	bic.w	r1, r1, #3
 800d3fa:	3d03      	subs	r5, #3
 800d3fc:	45a8      	cmp	r8, r5
 800d3fe:	bf38      	it	cc
 800d400:	2100      	movcc	r1, #0
 800d402:	440b      	add	r3, r1
 800d404:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d408:	b199      	cbz	r1, 800d432 <__mdiff+0x11a>
 800d40a:	6117      	str	r7, [r2, #16]
 800d40c:	e79e      	b.n	800d34c <__mdiff+0x34>
 800d40e:	46e6      	mov	lr, ip
 800d410:	f854 1b04 	ldr.w	r1, [r4], #4
 800d414:	fa1f fc81 	uxth.w	ip, r1
 800d418:	44f4      	add	ip, lr
 800d41a:	0c08      	lsrs	r0, r1, #16
 800d41c:	4471      	add	r1, lr
 800d41e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d422:	b289      	uxth	r1, r1
 800d424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d428:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d42c:	f846 1b04 	str.w	r1, [r6], #4
 800d430:	e7dc      	b.n	800d3ec <__mdiff+0xd4>
 800d432:	3f01      	subs	r7, #1
 800d434:	e7e6      	b.n	800d404 <__mdiff+0xec>
 800d436:	bf00      	nop
 800d438:	0800f1c3 	.word	0x0800f1c3
 800d43c:	0800f24b 	.word	0x0800f24b

0800d440 <__ulp>:
 800d440:	4b0e      	ldr	r3, [pc, #56]	@ (800d47c <__ulp+0x3c>)
 800d442:	400b      	ands	r3, r1
 800d444:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	dc08      	bgt.n	800d45e <__ulp+0x1e>
 800d44c:	425b      	negs	r3, r3
 800d44e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d452:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d456:	da04      	bge.n	800d462 <__ulp+0x22>
 800d458:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d45c:	4113      	asrs	r3, r2
 800d45e:	2200      	movs	r2, #0
 800d460:	e008      	b.n	800d474 <__ulp+0x34>
 800d462:	f1a2 0314 	sub.w	r3, r2, #20
 800d466:	2b1e      	cmp	r3, #30
 800d468:	bfd6      	itet	le
 800d46a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d46e:	2201      	movgt	r2, #1
 800d470:	40da      	lsrle	r2, r3
 800d472:	2300      	movs	r3, #0
 800d474:	4619      	mov	r1, r3
 800d476:	4610      	mov	r0, r2
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	7ff00000 	.word	0x7ff00000

0800d480 <__b2d>:
 800d480:	6902      	ldr	r2, [r0, #16]
 800d482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d484:	f100 0614 	add.w	r6, r0, #20
 800d488:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d48c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d490:	4f1e      	ldr	r7, [pc, #120]	@ (800d50c <__b2d+0x8c>)
 800d492:	4620      	mov	r0, r4
 800d494:	f7ff fd5a 	bl	800cf4c <__hi0bits>
 800d498:	4603      	mov	r3, r0
 800d49a:	f1c0 0020 	rsb	r0, r0, #32
 800d49e:	2b0a      	cmp	r3, #10
 800d4a0:	f1a2 0504 	sub.w	r5, r2, #4
 800d4a4:	6008      	str	r0, [r1, #0]
 800d4a6:	dc12      	bgt.n	800d4ce <__b2d+0x4e>
 800d4a8:	42ae      	cmp	r6, r5
 800d4aa:	bf2c      	ite	cs
 800d4ac:	2200      	movcs	r2, #0
 800d4ae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d4b2:	f1c3 0c0b 	rsb	ip, r3, #11
 800d4b6:	3315      	adds	r3, #21
 800d4b8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d4bc:	fa04 f303 	lsl.w	r3, r4, r3
 800d4c0:	fa22 f20c 	lsr.w	r2, r2, ip
 800d4c4:	ea4e 0107 	orr.w	r1, lr, r7
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	4610      	mov	r0, r2
 800d4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ce:	42ae      	cmp	r6, r5
 800d4d0:	bf36      	itet	cc
 800d4d2:	f1a2 0508 	subcc.w	r5, r2, #8
 800d4d6:	2200      	movcs	r2, #0
 800d4d8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d4dc:	3b0b      	subs	r3, #11
 800d4de:	d012      	beq.n	800d506 <__b2d+0x86>
 800d4e0:	f1c3 0720 	rsb	r7, r3, #32
 800d4e4:	fa22 f107 	lsr.w	r1, r2, r7
 800d4e8:	409c      	lsls	r4, r3
 800d4ea:	430c      	orrs	r4, r1
 800d4ec:	42b5      	cmp	r5, r6
 800d4ee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d4f2:	bf94      	ite	ls
 800d4f4:	2400      	movls	r4, #0
 800d4f6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d4fa:	409a      	lsls	r2, r3
 800d4fc:	40fc      	lsrs	r4, r7
 800d4fe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d502:	4322      	orrs	r2, r4
 800d504:	e7e1      	b.n	800d4ca <__b2d+0x4a>
 800d506:	ea44 0107 	orr.w	r1, r4, r7
 800d50a:	e7de      	b.n	800d4ca <__b2d+0x4a>
 800d50c:	3ff00000 	.word	0x3ff00000

0800d510 <__d2b>:
 800d510:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d514:	2101      	movs	r1, #1
 800d516:	4690      	mov	r8, r2
 800d518:	4699      	mov	r9, r3
 800d51a:	9e08      	ldr	r6, [sp, #32]
 800d51c:	f7ff fc24 	bl	800cd68 <_Balloc>
 800d520:	4604      	mov	r4, r0
 800d522:	b930      	cbnz	r0, 800d532 <__d2b+0x22>
 800d524:	4602      	mov	r2, r0
 800d526:	f240 310f 	movw	r1, #783	@ 0x30f
 800d52a:	4b23      	ldr	r3, [pc, #140]	@ (800d5b8 <__d2b+0xa8>)
 800d52c:	4823      	ldr	r0, [pc, #140]	@ (800d5bc <__d2b+0xac>)
 800d52e:	f000 faeb 	bl	800db08 <__assert_func>
 800d532:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d536:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d53a:	b10d      	cbz	r5, 800d540 <__d2b+0x30>
 800d53c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	f1b8 0300 	subs.w	r3, r8, #0
 800d546:	d024      	beq.n	800d592 <__d2b+0x82>
 800d548:	4668      	mov	r0, sp
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	f7ff fd1d 	bl	800cf8a <__lo0bits>
 800d550:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d554:	b1d8      	cbz	r0, 800d58e <__d2b+0x7e>
 800d556:	f1c0 0320 	rsb	r3, r0, #32
 800d55a:	fa02 f303 	lsl.w	r3, r2, r3
 800d55e:	430b      	orrs	r3, r1
 800d560:	40c2      	lsrs	r2, r0
 800d562:	6163      	str	r3, [r4, #20]
 800d564:	9201      	str	r2, [sp, #4]
 800d566:	9b01      	ldr	r3, [sp, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	bf0c      	ite	eq
 800d56c:	2201      	moveq	r2, #1
 800d56e:	2202      	movne	r2, #2
 800d570:	61a3      	str	r3, [r4, #24]
 800d572:	6122      	str	r2, [r4, #16]
 800d574:	b1ad      	cbz	r5, 800d5a2 <__d2b+0x92>
 800d576:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d57a:	4405      	add	r5, r0
 800d57c:	6035      	str	r5, [r6, #0]
 800d57e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d584:	6018      	str	r0, [r3, #0]
 800d586:	4620      	mov	r0, r4
 800d588:	b002      	add	sp, #8
 800d58a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d58e:	6161      	str	r1, [r4, #20]
 800d590:	e7e9      	b.n	800d566 <__d2b+0x56>
 800d592:	a801      	add	r0, sp, #4
 800d594:	f7ff fcf9 	bl	800cf8a <__lo0bits>
 800d598:	9b01      	ldr	r3, [sp, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	6163      	str	r3, [r4, #20]
 800d59e:	3020      	adds	r0, #32
 800d5a0:	e7e7      	b.n	800d572 <__d2b+0x62>
 800d5a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5aa:	6030      	str	r0, [r6, #0]
 800d5ac:	6918      	ldr	r0, [r3, #16]
 800d5ae:	f7ff fccd 	bl	800cf4c <__hi0bits>
 800d5b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5b6:	e7e4      	b.n	800d582 <__d2b+0x72>
 800d5b8:	0800f1c3 	.word	0x0800f1c3
 800d5bc:	0800f24b 	.word	0x0800f24b

0800d5c0 <__ratio>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	e9cd 1000 	strd	r1, r0, [sp]
 800d5ca:	a902      	add	r1, sp, #8
 800d5cc:	f7ff ff58 	bl	800d480 <__b2d>
 800d5d0:	468b      	mov	fp, r1
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460f      	mov	r7, r1
 800d5d6:	9800      	ldr	r0, [sp, #0]
 800d5d8:	a903      	add	r1, sp, #12
 800d5da:	f7ff ff51 	bl	800d480 <__b2d>
 800d5de:	460d      	mov	r5, r1
 800d5e0:	9b01      	ldr	r3, [sp, #4]
 800d5e2:	4689      	mov	r9, r1
 800d5e4:	6919      	ldr	r1, [r3, #16]
 800d5e6:	9b00      	ldr	r3, [sp, #0]
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	1ac9      	subs	r1, r1, r3
 800d5f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d5f4:	1a9b      	subs	r3, r3, r2
 800d5f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	bfcd      	iteet	gt
 800d5fe:	463a      	movgt	r2, r7
 800d600:	462a      	movle	r2, r5
 800d602:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d606:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d60a:	bfd8      	it	le
 800d60c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d610:	464b      	mov	r3, r9
 800d612:	4622      	mov	r2, r4
 800d614:	4659      	mov	r1, fp
 800d616:	f7f3 f889 	bl	800072c <__aeabi_ddiv>
 800d61a:	b005      	add	sp, #20
 800d61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d620 <_mprec_log10>:
 800d620:	2817      	cmp	r0, #23
 800d622:	b5d0      	push	{r4, r6, r7, lr}
 800d624:	4604      	mov	r4, r0
 800d626:	dc05      	bgt.n	800d634 <_mprec_log10+0x14>
 800d628:	4b08      	ldr	r3, [pc, #32]	@ (800d64c <_mprec_log10+0x2c>)
 800d62a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800d62e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d632:	bdd0      	pop	{r4, r6, r7, pc}
 800d634:	2000      	movs	r0, #0
 800d636:	2600      	movs	r6, #0
 800d638:	4905      	ldr	r1, [pc, #20]	@ (800d650 <_mprec_log10+0x30>)
 800d63a:	4f06      	ldr	r7, [pc, #24]	@ (800d654 <_mprec_log10+0x34>)
 800d63c:	4632      	mov	r2, r6
 800d63e:	463b      	mov	r3, r7
 800d640:	f7f2 ff4a 	bl	80004d8 <__aeabi_dmul>
 800d644:	3c01      	subs	r4, #1
 800d646:	d1f9      	bne.n	800d63c <_mprec_log10+0x1c>
 800d648:	e7f3      	b.n	800d632 <_mprec_log10+0x12>
 800d64a:	bf00      	nop
 800d64c:	0800f508 	.word	0x0800f508
 800d650:	3ff00000 	.word	0x3ff00000
 800d654:	40240000 	.word	0x40240000

0800d658 <__copybits>:
 800d658:	3901      	subs	r1, #1
 800d65a:	b570      	push	{r4, r5, r6, lr}
 800d65c:	1149      	asrs	r1, r1, #5
 800d65e:	6914      	ldr	r4, [r2, #16]
 800d660:	3101      	adds	r1, #1
 800d662:	f102 0314 	add.w	r3, r2, #20
 800d666:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d66a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d66e:	1f05      	subs	r5, r0, #4
 800d670:	42a3      	cmp	r3, r4
 800d672:	d30c      	bcc.n	800d68e <__copybits+0x36>
 800d674:	1aa3      	subs	r3, r4, r2
 800d676:	3b11      	subs	r3, #17
 800d678:	f023 0303 	bic.w	r3, r3, #3
 800d67c:	3211      	adds	r2, #17
 800d67e:	42a2      	cmp	r2, r4
 800d680:	bf88      	it	hi
 800d682:	2300      	movhi	r3, #0
 800d684:	4418      	add	r0, r3
 800d686:	2300      	movs	r3, #0
 800d688:	4288      	cmp	r0, r1
 800d68a:	d305      	bcc.n	800d698 <__copybits+0x40>
 800d68c:	bd70      	pop	{r4, r5, r6, pc}
 800d68e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d692:	f845 6f04 	str.w	r6, [r5, #4]!
 800d696:	e7eb      	b.n	800d670 <__copybits+0x18>
 800d698:	f840 3b04 	str.w	r3, [r0], #4
 800d69c:	e7f4      	b.n	800d688 <__copybits+0x30>

0800d69e <__any_on>:
 800d69e:	f100 0214 	add.w	r2, r0, #20
 800d6a2:	6900      	ldr	r0, [r0, #16]
 800d6a4:	114b      	asrs	r3, r1, #5
 800d6a6:	4298      	cmp	r0, r3
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	db11      	blt.n	800d6d0 <__any_on+0x32>
 800d6ac:	dd0a      	ble.n	800d6c4 <__any_on+0x26>
 800d6ae:	f011 011f 	ands.w	r1, r1, #31
 800d6b2:	d007      	beq.n	800d6c4 <__any_on+0x26>
 800d6b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d6b8:	fa24 f001 	lsr.w	r0, r4, r1
 800d6bc:	fa00 f101 	lsl.w	r1, r0, r1
 800d6c0:	428c      	cmp	r4, r1
 800d6c2:	d10b      	bne.n	800d6dc <__any_on+0x3e>
 800d6c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d803      	bhi.n	800d6d4 <__any_on+0x36>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	bd10      	pop	{r4, pc}
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	e7f7      	b.n	800d6c4 <__any_on+0x26>
 800d6d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6d8:	2900      	cmp	r1, #0
 800d6da:	d0f5      	beq.n	800d6c8 <__any_on+0x2a>
 800d6dc:	2001      	movs	r0, #1
 800d6de:	e7f6      	b.n	800d6ce <__any_on+0x30>

0800d6e0 <__ascii_wctomb>:
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	4608      	mov	r0, r1
 800d6e4:	b141      	cbz	r1, 800d6f8 <__ascii_wctomb+0x18>
 800d6e6:	2aff      	cmp	r2, #255	@ 0xff
 800d6e8:	d904      	bls.n	800d6f4 <__ascii_wctomb+0x14>
 800d6ea:	228a      	movs	r2, #138	@ 0x8a
 800d6ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	4770      	bx	lr
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	700a      	strb	r2, [r1, #0]
 800d6f8:	4770      	bx	lr

0800d6fa <print_e>:
 800d6fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6fc:	b08b      	sub	sp, #44	@ 0x2c
 800d6fe:	460d      	mov	r5, r1
 800d700:	a908      	add	r1, sp, #32
 800d702:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d704:	9104      	str	r1, [sp, #16]
 800d706:	a907      	add	r1, sp, #28
 800d708:	9103      	str	r1, [sp, #12]
 800d70a:	a909      	add	r1, sp, #36	@ 0x24
 800d70c:	9102      	str	r1, [sp, #8]
 800d70e:	1c71      	adds	r1, r6, #1
 800d710:	9101      	str	r1, [sp, #4]
 800d712:	2102      	movs	r1, #2
 800d714:	9100      	str	r1, [sp, #0]
 800d716:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 800d71a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800d71c:	f000 fab0 	bl	800dc80 <_dtoa_r>
 800d720:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d726:	4601      	mov	r1, r0
 800d728:	429a      	cmp	r2, r3
 800d72a:	d104      	bne.n	800d736 <print_e+0x3c>
 800d72c:	4628      	mov	r0, r5
 800d72e:	f000 f9e3 	bl	800daf8 <strcpy>
 800d732:	b00b      	add	sp, #44	@ 0x2c
 800d734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d736:	462b      	mov	r3, r5
 800d738:	7800      	ldrb	r0, [r0, #0]
 800d73a:	2e00      	cmp	r6, #0
 800d73c:	f803 0b01 	strb.w	r0, [r3], #1
 800d740:	bfc8      	it	gt
 800d742:	2401      	movgt	r4, #1
 800d744:	202e      	movs	r0, #46	@ 0x2e
 800d746:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d74a:	b10d      	cbz	r5, 800d750 <print_e+0x56>
 800d74c:	2e00      	cmp	r6, #0
 800d74e:	dc29      	bgt.n	800d7a4 <print_e+0xaa>
 800d750:	2f67      	cmp	r7, #103	@ 0x67
 800d752:	d038      	beq.n	800d7c6 <print_e+0xcc>
 800d754:	2f47      	cmp	r7, #71	@ 0x47
 800d756:	d038      	beq.n	800d7ca <print_e+0xd0>
 800d758:	212e      	movs	r1, #46	@ 0x2e
 800d75a:	2030      	movs	r0, #48	@ 0x30
 800d75c:	2e00      	cmp	r6, #0
 800d75e:	dc2a      	bgt.n	800d7b6 <print_e+0xbc>
 800d760:	1e51      	subs	r1, r2, #1
 800d762:	2900      	cmp	r1, #0
 800d764:	bfa8      	it	ge
 800d766:	222b      	movge	r2, #43	@ 0x2b
 800d768:	9109      	str	r1, [sp, #36]	@ 0x24
 800d76a:	bfbd      	ittte	lt
 800d76c:	212d      	movlt	r1, #45	@ 0x2d
 800d76e:	f1c2 0201 	rsblt	r2, r2, #1
 800d772:	9209      	strlt	r2, [sp, #36]	@ 0x24
 800d774:	705a      	strbge	r2, [r3, #1]
 800d776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d778:	bfb8      	it	lt
 800d77a:	7059      	strblt	r1, [r3, #1]
 800d77c:	2a63      	cmp	r2, #99	@ 0x63
 800d77e:	701f      	strb	r7, [r3, #0]
 800d780:	dc25      	bgt.n	800d7ce <print_e+0xd4>
 800d782:	1c98      	adds	r0, r3, #2
 800d784:	220a      	movs	r2, #10
 800d786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d788:	fb93 f2f2 	sdiv	r2, r3, r2
 800d78c:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800d790:	7001      	strb	r1, [r0, #0]
 800d792:	f06f 0109 	mvn.w	r1, #9
 800d796:	fb01 3302 	mla	r3, r1, r2, r3
 800d79a:	3330      	adds	r3, #48	@ 0x30
 800d79c:	7043      	strb	r3, [r0, #1]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	7083      	strb	r3, [r0, #2]
 800d7a2:	e7c6      	b.n	800d732 <print_e+0x38>
 800d7a4:	b10c      	cbz	r4, 800d7aa <print_e+0xb0>
 800d7a6:	f803 0b01 	strb.w	r0, [r3], #1
 800d7aa:	780c      	ldrb	r4, [r1, #0]
 800d7ac:	3e01      	subs	r6, #1
 800d7ae:	f803 4b01 	strb.w	r4, [r3], #1
 800d7b2:	2400      	movs	r4, #0
 800d7b4:	e7c7      	b.n	800d746 <print_e+0x4c>
 800d7b6:	b10c      	cbz	r4, 800d7bc <print_e+0xc2>
 800d7b8:	f803 1b01 	strb.w	r1, [r3], #1
 800d7bc:	2400      	movs	r4, #0
 800d7be:	f803 0b01 	strb.w	r0, [r3], #1
 800d7c2:	3e01      	subs	r6, #1
 800d7c4:	e7ca      	b.n	800d75c <print_e+0x62>
 800d7c6:	2765      	movs	r7, #101	@ 0x65
 800d7c8:	e7ca      	b.n	800d760 <print_e+0x66>
 800d7ca:	2745      	movs	r7, #69	@ 0x45
 800d7cc:	e7c8      	b.n	800d760 <print_e+0x66>
 800d7ce:	2164      	movs	r1, #100	@ 0x64
 800d7d0:	fb92 f1f1 	sdiv	r1, r2, r1
 800d7d4:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 800d7d8:	1cd8      	adds	r0, r3, #3
 800d7da:	709c      	strb	r4, [r3, #2]
 800d7dc:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800d7e0:	fb03 2201 	mla	r2, r3, r1, r2
 800d7e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7e6:	e7cd      	b.n	800d784 <print_e+0x8a>

0800d7e8 <_gcvt>:
 800d7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7ec:	4614      	mov	r4, r2
 800d7ee:	461d      	mov	r5, r3
 800d7f0:	b08a      	sub	sp, #40	@ 0x28
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	@ 0x48
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4681      	mov	r9, r0
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	4620      	mov	r0, r4
 800d800:	f7f3 f8dc 	bl	80009bc <__aeabi_dcmplt>
 800d804:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d806:	4682      	mov	sl, r0
 800d808:	2200      	movs	r2, #0
 800d80a:	2300      	movs	r3, #0
 800d80c:	b1c0      	cbz	r0, 800d840 <_gcvt+0x58>
 800d80e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800d812:	461d      	mov	r5, r3
 800d814:	a35a      	add	r3, pc, #360	@ (adr r3, 800d980 <_gcvt+0x198>)
 800d816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81a:	4620      	mov	r0, r4
 800d81c:	4629      	mov	r1, r5
 800d81e:	f7f3 f8d7 	bl	80009d0 <__aeabi_dcmple>
 800d822:	b1d8      	cbz	r0, 800d85c <_gcvt+0x74>
 800d824:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800d828:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	9000      	str	r0, [sp, #0]
 800d830:	4622      	mov	r2, r4
 800d832:	462b      	mov	r3, r5
 800d834:	4631      	mov	r1, r6
 800d836:	4648      	mov	r0, r9
 800d838:	9702      	str	r7, [sp, #8]
 800d83a:	f7ff ff5e 	bl	800d6fa <print_e>
 800d83e:	e009      	b.n	800d854 <_gcvt+0x6c>
 800d840:	4620      	mov	r0, r4
 800d842:	4629      	mov	r1, r5
 800d844:	f7f3 f8b0 	bl	80009a8 <__aeabi_dcmpeq>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d0e3      	beq.n	800d814 <_gcvt+0x2c>
 800d84c:	2330      	movs	r3, #48	@ 0x30
 800d84e:	f886 a001 	strb.w	sl, [r6, #1]
 800d852:	7033      	strb	r3, [r6, #0]
 800d854:	4630      	mov	r0, r6
 800d856:	b00a      	add	sp, #40	@ 0x28
 800d858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d85c:	4640      	mov	r0, r8
 800d85e:	f7ff fedf 	bl	800d620 <_mprec_log10>
 800d862:	4622      	mov	r2, r4
 800d864:	462b      	mov	r3, r5
 800d866:	f7f3 f8b3 	bl	80009d0 <__aeabi_dcmple>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d1da      	bne.n	800d824 <_gcvt+0x3c>
 800d86e:	ab09      	add	r3, sp, #36	@ 0x24
 800d870:	9304      	str	r3, [sp, #16]
 800d872:	ab08      	add	r3, sp, #32
 800d874:	9303      	str	r3, [sp, #12]
 800d876:	ab07      	add	r3, sp, #28
 800d878:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800d87c:	2302      	movs	r3, #2
 800d87e:	4622      	mov	r2, r4
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	4648      	mov	r0, r9
 800d884:	462b      	mov	r3, r5
 800d886:	f000 f9fb 	bl	800dc80 <_dtoa_r>
 800d88a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d88e:	9a07      	ldr	r2, [sp, #28]
 800d890:	4601      	mov	r1, r0
 800d892:	429a      	cmp	r2, r3
 800d894:	d045      	beq.n	800d922 <_gcvt+0x13a>
 800d896:	4633      	mov	r3, r6
 800d898:	460c      	mov	r4, r1
 800d89a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d89e:	9a07      	ldr	r2, [sp, #28]
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d142      	bne.n	800d92a <_gcvt+0x142>
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800d8aa:	eb06 0008 	add.w	r0, r6, r8
 800d8ae:	1ac0      	subs	r0, r0, r3
 800d8b0:	2a00      	cmp	r2, #0
 800d8b2:	4615      	mov	r5, r2
 800d8b4:	dc45      	bgt.n	800d942 <_gcvt+0x15a>
 800d8b6:	b101      	cbz	r1, 800d8ba <_gcvt+0xd2>
 800d8b8:	9207      	str	r2, [sp, #28]
 800d8ba:	b90f      	cbnz	r7, 800d8c0 <_gcvt+0xd8>
 800d8bc:	7822      	ldrb	r2, [r4, #0]
 800d8be:	b36a      	cbz	r2, 800d91c <_gcvt+0x134>
 800d8c0:	42b3      	cmp	r3, r6
 800d8c2:	bf04      	itt	eq
 800d8c4:	2230      	moveq	r2, #48	@ 0x30
 800d8c6:	f803 2b01 	strbeq.w	r2, [r3], #1
 800d8ca:	222e      	movs	r2, #46	@ 0x2e
 800d8cc:	f04f 0e00 	mov.w	lr, #0
 800d8d0:	701a      	strb	r2, [r3, #0]
 800d8d2:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	9907      	ldr	r1, [sp, #28]
 800d8da:	1acd      	subs	r5, r1, r3
 800d8dc:	42d5      	cmn	r5, r2
 800d8de:	d438      	bmi.n	800d952 <_gcvt+0x16a>
 800d8e0:	2900      	cmp	r1, #0
 800d8e2:	bfcc      	ite	gt
 800d8e4:	f04f 0c00 	movgt.w	ip, #0
 800d8e8:	f04f 0c01 	movle.w	ip, #1
 800d8ec:	424a      	negs	r2, r1
 800d8ee:	f1bc 0f00 	cmp.w	ip, #0
 800d8f2:	bf14      	ite	ne
 800d8f4:	4615      	movne	r5, r2
 800d8f6:	2500      	moveq	r5, #0
 800d8f8:	3501      	adds	r5, #1
 800d8fa:	442b      	add	r3, r5
 800d8fc:	f1be 0f00 	cmp.w	lr, #0
 800d900:	d005      	beq.n	800d90e <_gcvt+0x126>
 800d902:	f1bc 0f00 	cmp.w	ip, #0
 800d906:	bf08      	it	eq
 800d908:	2200      	moveq	r2, #0
 800d90a:	440a      	add	r2, r1
 800d90c:	9207      	str	r2, [sp, #28]
 800d90e:	1e62      	subs	r2, r4, #1
 800d910:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d914:	b109      	cbz	r1, 800d91a <_gcvt+0x132>
 800d916:	2800      	cmp	r0, #0
 800d918:	dc20      	bgt.n	800d95c <_gcvt+0x174>
 800d91a:	bb67      	cbnz	r7, 800d976 <_gcvt+0x18e>
 800d91c:	2200      	movs	r2, #0
 800d91e:	701a      	strb	r2, [r3, #0]
 800d920:	e798      	b.n	800d854 <_gcvt+0x6c>
 800d922:	4630      	mov	r0, r6
 800d924:	f000 f8e8 	bl	800daf8 <strcpy>
 800d928:	e794      	b.n	800d854 <_gcvt+0x6c>
 800d92a:	2a00      	cmp	r2, #0
 800d92c:	ddba      	ble.n	800d8a4 <_gcvt+0xbc>
 800d92e:	3a01      	subs	r2, #1
 800d930:	f803 0b01 	strb.w	r0, [r3], #1
 800d934:	9207      	str	r2, [sp, #28]
 800d936:	e7af      	b.n	800d898 <_gcvt+0xb0>
 800d938:	2101      	movs	r1, #1
 800d93a:	f803 cb01 	strb.w	ip, [r3], #1
 800d93e:	3801      	subs	r0, #1
 800d940:	e7b6      	b.n	800d8b0 <_gcvt+0xc8>
 800d942:	2800      	cmp	r0, #0
 800d944:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 800d948:	dcf6      	bgt.n	800d938 <_gcvt+0x150>
 800d94a:	2900      	cmp	r1, #0
 800d94c:	d0b5      	beq.n	800d8ba <_gcvt+0xd2>
 800d94e:	9507      	str	r5, [sp, #28]
 800d950:	e7b3      	b.n	800d8ba <_gcvt+0xd2>
 800d952:	f04f 0e01 	mov.w	lr, #1
 800d956:	f802 cf01 	strb.w	ip, [r2, #1]!
 800d95a:	e7bf      	b.n	800d8dc <_gcvt+0xf4>
 800d95c:	f803 1b01 	strb.w	r1, [r3], #1
 800d960:	3801      	subs	r0, #1
 800d962:	e7d5      	b.n	800d910 <_gcvt+0x128>
 800d964:	f802 5b01 	strb.w	r5, [r2], #1
 800d968:	1aa1      	subs	r1, r4, r2
 800d96a:	2900      	cmp	r1, #0
 800d96c:	dcfa      	bgt.n	800d964 <_gcvt+0x17c>
 800d96e:	2800      	cmp	r0, #0
 800d970:	bfa8      	it	ge
 800d972:	181b      	addge	r3, r3, r0
 800d974:	e7d2      	b.n	800d91c <_gcvt+0x134>
 800d976:	461a      	mov	r2, r3
 800d978:	2530      	movs	r5, #48	@ 0x30
 800d97a:	181c      	adds	r4, r3, r0
 800d97c:	e7f4      	b.n	800d968 <_gcvt+0x180>
 800d97e:	bf00      	nop
 800d980:	eb1c432d 	.word	0xeb1c432d
 800d984:	3f1a36e2 	.word	0x3f1a36e2

0800d988 <__sflush_r>:
 800d988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	0716      	lsls	r6, r2, #28
 800d990:	4605      	mov	r5, r0
 800d992:	460c      	mov	r4, r1
 800d994:	d454      	bmi.n	800da40 <__sflush_r+0xb8>
 800d996:	684b      	ldr	r3, [r1, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	dc02      	bgt.n	800d9a2 <__sflush_r+0x1a>
 800d99c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	dd48      	ble.n	800da34 <__sflush_r+0xac>
 800d9a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9a4:	2e00      	cmp	r6, #0
 800d9a6:	d045      	beq.n	800da34 <__sflush_r+0xac>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9ae:	682f      	ldr	r7, [r5, #0]
 800d9b0:	6a21      	ldr	r1, [r4, #32]
 800d9b2:	602b      	str	r3, [r5, #0]
 800d9b4:	d030      	beq.n	800da18 <__sflush_r+0x90>
 800d9b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	0759      	lsls	r1, r3, #29
 800d9bc:	d505      	bpl.n	800d9ca <__sflush_r+0x42>
 800d9be:	6863      	ldr	r3, [r4, #4]
 800d9c0:	1ad2      	subs	r2, r2, r3
 800d9c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9c4:	b10b      	cbz	r3, 800d9ca <__sflush_r+0x42>
 800d9c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9c8:	1ad2      	subs	r2, r2, r3
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9d0:	6a21      	ldr	r1, [r4, #32]
 800d9d2:	47b0      	blx	r6
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	89a3      	ldrh	r3, [r4, #12]
 800d9d8:	d106      	bne.n	800d9e8 <__sflush_r+0x60>
 800d9da:	6829      	ldr	r1, [r5, #0]
 800d9dc:	291d      	cmp	r1, #29
 800d9de:	d82b      	bhi.n	800da38 <__sflush_r+0xb0>
 800d9e0:	4a28      	ldr	r2, [pc, #160]	@ (800da84 <__sflush_r+0xfc>)
 800d9e2:	40ca      	lsrs	r2, r1
 800d9e4:	07d6      	lsls	r6, r2, #31
 800d9e6:	d527      	bpl.n	800da38 <__sflush_r+0xb0>
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	6062      	str	r2, [r4, #4]
 800d9ec:	6922      	ldr	r2, [r4, #16]
 800d9ee:	04d9      	lsls	r1, r3, #19
 800d9f0:	6022      	str	r2, [r4, #0]
 800d9f2:	d504      	bpl.n	800d9fe <__sflush_r+0x76>
 800d9f4:	1c42      	adds	r2, r0, #1
 800d9f6:	d101      	bne.n	800d9fc <__sflush_r+0x74>
 800d9f8:	682b      	ldr	r3, [r5, #0]
 800d9fa:	b903      	cbnz	r3, 800d9fe <__sflush_r+0x76>
 800d9fc:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da00:	602f      	str	r7, [r5, #0]
 800da02:	b1b9      	cbz	r1, 800da34 <__sflush_r+0xac>
 800da04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da08:	4299      	cmp	r1, r3
 800da0a:	d002      	beq.n	800da12 <__sflush_r+0x8a>
 800da0c:	4628      	mov	r0, r5
 800da0e:	f7fe fd69 	bl	800c4e4 <_free_r>
 800da12:	2300      	movs	r3, #0
 800da14:	6363      	str	r3, [r4, #52]	@ 0x34
 800da16:	e00d      	b.n	800da34 <__sflush_r+0xac>
 800da18:	2301      	movs	r3, #1
 800da1a:	4628      	mov	r0, r5
 800da1c:	47b0      	blx	r6
 800da1e:	4602      	mov	r2, r0
 800da20:	1c50      	adds	r0, r2, #1
 800da22:	d1c9      	bne.n	800d9b8 <__sflush_r+0x30>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d0c6      	beq.n	800d9b8 <__sflush_r+0x30>
 800da2a:	2b1d      	cmp	r3, #29
 800da2c:	d001      	beq.n	800da32 <__sflush_r+0xaa>
 800da2e:	2b16      	cmp	r3, #22
 800da30:	d11d      	bne.n	800da6e <__sflush_r+0xe6>
 800da32:	602f      	str	r7, [r5, #0]
 800da34:	2000      	movs	r0, #0
 800da36:	e021      	b.n	800da7c <__sflush_r+0xf4>
 800da38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da3c:	b21b      	sxth	r3, r3
 800da3e:	e01a      	b.n	800da76 <__sflush_r+0xee>
 800da40:	690f      	ldr	r7, [r1, #16]
 800da42:	2f00      	cmp	r7, #0
 800da44:	d0f6      	beq.n	800da34 <__sflush_r+0xac>
 800da46:	0793      	lsls	r3, r2, #30
 800da48:	bf18      	it	ne
 800da4a:	2300      	movne	r3, #0
 800da4c:	680e      	ldr	r6, [r1, #0]
 800da4e:	bf08      	it	eq
 800da50:	694b      	ldreq	r3, [r1, #20]
 800da52:	1bf6      	subs	r6, r6, r7
 800da54:	600f      	str	r7, [r1, #0]
 800da56:	608b      	str	r3, [r1, #8]
 800da58:	2e00      	cmp	r6, #0
 800da5a:	ddeb      	ble.n	800da34 <__sflush_r+0xac>
 800da5c:	4633      	mov	r3, r6
 800da5e:	463a      	mov	r2, r7
 800da60:	4628      	mov	r0, r5
 800da62:	6a21      	ldr	r1, [r4, #32]
 800da64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800da68:	47e0      	blx	ip
 800da6a:	2800      	cmp	r0, #0
 800da6c:	dc07      	bgt.n	800da7e <__sflush_r+0xf6>
 800da6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da7e:	4407      	add	r7, r0
 800da80:	1a36      	subs	r6, r6, r0
 800da82:	e7e9      	b.n	800da58 <__sflush_r+0xd0>
 800da84:	20400001 	.word	0x20400001

0800da88 <_fflush_r>:
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	690b      	ldr	r3, [r1, #16]
 800da8c:	4605      	mov	r5, r0
 800da8e:	460c      	mov	r4, r1
 800da90:	b913      	cbnz	r3, 800da98 <_fflush_r+0x10>
 800da92:	2500      	movs	r5, #0
 800da94:	4628      	mov	r0, r5
 800da96:	bd38      	pop	{r3, r4, r5, pc}
 800da98:	b118      	cbz	r0, 800daa2 <_fflush_r+0x1a>
 800da9a:	6a03      	ldr	r3, [r0, #32]
 800da9c:	b90b      	cbnz	r3, 800daa2 <_fflush_r+0x1a>
 800da9e:	f7fe fc05 	bl	800c2ac <__sinit>
 800daa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d0f3      	beq.n	800da92 <_fflush_r+0xa>
 800daaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800daac:	07d0      	lsls	r0, r2, #31
 800daae:	d404      	bmi.n	800daba <_fflush_r+0x32>
 800dab0:	0599      	lsls	r1, r3, #22
 800dab2:	d402      	bmi.n	800daba <_fflush_r+0x32>
 800dab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dab6:	f7fe fcfe 	bl	800c4b6 <__retarget_lock_acquire_recursive>
 800daba:	4628      	mov	r0, r5
 800dabc:	4621      	mov	r1, r4
 800dabe:	f7ff ff63 	bl	800d988 <__sflush_r>
 800dac2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dac4:	4605      	mov	r5, r0
 800dac6:	07da      	lsls	r2, r3, #31
 800dac8:	d4e4      	bmi.n	800da94 <_fflush_r+0xc>
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	059b      	lsls	r3, r3, #22
 800dace:	d4e1      	bmi.n	800da94 <_fflush_r+0xc>
 800dad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dad2:	f7fe fcf1 	bl	800c4b8 <__retarget_lock_release_recursive>
 800dad6:	e7dd      	b.n	800da94 <_fflush_r+0xc>

0800dad8 <_sbrk_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	2300      	movs	r3, #0
 800dadc:	4d05      	ldr	r5, [pc, #20]	@ (800daf4 <_sbrk_r+0x1c>)
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	602b      	str	r3, [r5, #0]
 800dae4:	f7f4 f9bc 	bl	8001e60 <_sbrk>
 800dae8:	1c43      	adds	r3, r0, #1
 800daea:	d102      	bne.n	800daf2 <_sbrk_r+0x1a>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	b103      	cbz	r3, 800daf2 <_sbrk_r+0x1a>
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	bd38      	pop	{r3, r4, r5, pc}
 800daf4:	200017dc 	.word	0x200017dc

0800daf8 <strcpy>:
 800daf8:	4603      	mov	r3, r0
 800dafa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dafe:	f803 2b01 	strb.w	r2, [r3], #1
 800db02:	2a00      	cmp	r2, #0
 800db04:	d1f9      	bne.n	800dafa <strcpy+0x2>
 800db06:	4770      	bx	lr

0800db08 <__assert_func>:
 800db08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db0a:	4614      	mov	r4, r2
 800db0c:	461a      	mov	r2, r3
 800db0e:	4b09      	ldr	r3, [pc, #36]	@ (800db34 <__assert_func+0x2c>)
 800db10:	4605      	mov	r5, r0
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68d8      	ldr	r0, [r3, #12]
 800db16:	b14c      	cbz	r4, 800db2c <__assert_func+0x24>
 800db18:	4b07      	ldr	r3, [pc, #28]	@ (800db38 <__assert_func+0x30>)
 800db1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db1e:	9100      	str	r1, [sp, #0]
 800db20:	462b      	mov	r3, r5
 800db22:	4906      	ldr	r1, [pc, #24]	@ (800db3c <__assert_func+0x34>)
 800db24:	f000 fe88 	bl	800e838 <fiprintf>
 800db28:	f000 fe98 	bl	800e85c <abort>
 800db2c:	4b04      	ldr	r3, [pc, #16]	@ (800db40 <__assert_func+0x38>)
 800db2e:	461c      	mov	r4, r3
 800db30:	e7f3      	b.n	800db1a <__assert_func+0x12>
 800db32:	bf00      	nop
 800db34:	200002f8 	.word	0x200002f8
 800db38:	0800f2a4 	.word	0x0800f2a4
 800db3c:	0800f2b1 	.word	0x0800f2b1
 800db40:	0800f2df 	.word	0x0800f2df

0800db44 <_calloc_r>:
 800db44:	b570      	push	{r4, r5, r6, lr}
 800db46:	fba1 5402 	umull	r5, r4, r1, r2
 800db4a:	b934      	cbnz	r4, 800db5a <_calloc_r+0x16>
 800db4c:	4629      	mov	r1, r5
 800db4e:	f7ff f86d 	bl	800cc2c <_malloc_r>
 800db52:	4606      	mov	r6, r0
 800db54:	b928      	cbnz	r0, 800db62 <_calloc_r+0x1e>
 800db56:	4630      	mov	r0, r6
 800db58:	bd70      	pop	{r4, r5, r6, pc}
 800db5a:	220c      	movs	r2, #12
 800db5c:	2600      	movs	r6, #0
 800db5e:	6002      	str	r2, [r0, #0]
 800db60:	e7f9      	b.n	800db56 <_calloc_r+0x12>
 800db62:	462a      	mov	r2, r5
 800db64:	4621      	mov	r1, r4
 800db66:	f7fe fc1a 	bl	800c39e <memset>
 800db6a:	e7f4      	b.n	800db56 <_calloc_r+0x12>

0800db6c <quorem>:
 800db6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	6903      	ldr	r3, [r0, #16]
 800db72:	690c      	ldr	r4, [r1, #16]
 800db74:	4607      	mov	r7, r0
 800db76:	42a3      	cmp	r3, r4
 800db78:	db7e      	blt.n	800dc78 <quorem+0x10c>
 800db7a:	3c01      	subs	r4, #1
 800db7c:	00a3      	lsls	r3, r4, #2
 800db7e:	f100 0514 	add.w	r5, r0, #20
 800db82:	f101 0814 	add.w	r8, r1, #20
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db8c:	9301      	str	r3, [sp, #4]
 800db8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db96:	3301      	adds	r3, #1
 800db98:	429a      	cmp	r2, r3
 800db9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800db9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dba2:	d32e      	bcc.n	800dc02 <quorem+0x96>
 800dba4:	f04f 0a00 	mov.w	sl, #0
 800dba8:	46c4      	mov	ip, r8
 800dbaa:	46ae      	mov	lr, r5
 800dbac:	46d3      	mov	fp, sl
 800dbae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dbb2:	b298      	uxth	r0, r3
 800dbb4:	fb06 a000 	mla	r0, r6, r0, sl
 800dbb8:	0c1b      	lsrs	r3, r3, #16
 800dbba:	0c02      	lsrs	r2, r0, #16
 800dbbc:	fb06 2303 	mla	r3, r6, r3, r2
 800dbc0:	f8de 2000 	ldr.w	r2, [lr]
 800dbc4:	b280      	uxth	r0, r0
 800dbc6:	b292      	uxth	r2, r2
 800dbc8:	1a12      	subs	r2, r2, r0
 800dbca:	445a      	add	r2, fp
 800dbcc:	f8de 0000 	ldr.w	r0, [lr]
 800dbd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dbda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dbde:	b292      	uxth	r2, r2
 800dbe0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dbe4:	45e1      	cmp	r9, ip
 800dbe6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dbea:	f84e 2b04 	str.w	r2, [lr], #4
 800dbee:	d2de      	bcs.n	800dbae <quorem+0x42>
 800dbf0:	9b00      	ldr	r3, [sp, #0]
 800dbf2:	58eb      	ldr	r3, [r5, r3]
 800dbf4:	b92b      	cbnz	r3, 800dc02 <quorem+0x96>
 800dbf6:	9b01      	ldr	r3, [sp, #4]
 800dbf8:	3b04      	subs	r3, #4
 800dbfa:	429d      	cmp	r5, r3
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	d32f      	bcc.n	800dc60 <quorem+0xf4>
 800dc00:	613c      	str	r4, [r7, #16]
 800dc02:	4638      	mov	r0, r7
 800dc04:	f7ff fb6c 	bl	800d2e0 <__mcmp>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	db25      	blt.n	800dc58 <quorem+0xec>
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	2000      	movs	r0, #0
 800dc10:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc14:	f8d1 c000 	ldr.w	ip, [r1]
 800dc18:	fa1f fe82 	uxth.w	lr, r2
 800dc1c:	fa1f f38c 	uxth.w	r3, ip
 800dc20:	eba3 030e 	sub.w	r3, r3, lr
 800dc24:	4403      	add	r3, r0
 800dc26:	0c12      	lsrs	r2, r2, #16
 800dc28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dc2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc36:	45c1      	cmp	r9, r8
 800dc38:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc3c:	f841 3b04 	str.w	r3, [r1], #4
 800dc40:	d2e6      	bcs.n	800dc10 <quorem+0xa4>
 800dc42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc4a:	b922      	cbnz	r2, 800dc56 <quorem+0xea>
 800dc4c:	3b04      	subs	r3, #4
 800dc4e:	429d      	cmp	r5, r3
 800dc50:	461a      	mov	r2, r3
 800dc52:	d30b      	bcc.n	800dc6c <quorem+0x100>
 800dc54:	613c      	str	r4, [r7, #16]
 800dc56:	3601      	adds	r6, #1
 800dc58:	4630      	mov	r0, r6
 800dc5a:	b003      	add	sp, #12
 800dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc60:	6812      	ldr	r2, [r2, #0]
 800dc62:	3b04      	subs	r3, #4
 800dc64:	2a00      	cmp	r2, #0
 800dc66:	d1cb      	bne.n	800dc00 <quorem+0x94>
 800dc68:	3c01      	subs	r4, #1
 800dc6a:	e7c6      	b.n	800dbfa <quorem+0x8e>
 800dc6c:	6812      	ldr	r2, [r2, #0]
 800dc6e:	3b04      	subs	r3, #4
 800dc70:	2a00      	cmp	r2, #0
 800dc72:	d1ef      	bne.n	800dc54 <quorem+0xe8>
 800dc74:	3c01      	subs	r4, #1
 800dc76:	e7ea      	b.n	800dc4e <quorem+0xe2>
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e7ee      	b.n	800dc5a <quorem+0xee>
 800dc7c:	0000      	movs	r0, r0
	...

0800dc80 <_dtoa_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	4614      	mov	r4, r2
 800dc86:	461d      	mov	r5, r3
 800dc88:	69c7      	ldr	r7, [r0, #28]
 800dc8a:	b097      	sub	sp, #92	@ 0x5c
 800dc8c:	4681      	mov	r9, r0
 800dc8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dc92:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800dc94:	b97f      	cbnz	r7, 800dcb6 <_dtoa_r+0x36>
 800dc96:	2010      	movs	r0, #16
 800dc98:	f000 fdc6 	bl	800e828 <malloc>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	f8c9 001c 	str.w	r0, [r9, #28]
 800dca2:	b920      	cbnz	r0, 800dcae <_dtoa_r+0x2e>
 800dca4:	21ef      	movs	r1, #239	@ 0xef
 800dca6:	4bac      	ldr	r3, [pc, #688]	@ (800df58 <_dtoa_r+0x2d8>)
 800dca8:	48ac      	ldr	r0, [pc, #688]	@ (800df5c <_dtoa_r+0x2dc>)
 800dcaa:	f7ff ff2d 	bl	800db08 <__assert_func>
 800dcae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dcb2:	6007      	str	r7, [r0, #0]
 800dcb4:	60c7      	str	r7, [r0, #12]
 800dcb6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dcba:	6819      	ldr	r1, [r3, #0]
 800dcbc:	b159      	cbz	r1, 800dcd6 <_dtoa_r+0x56>
 800dcbe:	685a      	ldr	r2, [r3, #4]
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	4093      	lsls	r3, r2
 800dcc4:	604a      	str	r2, [r1, #4]
 800dcc6:	608b      	str	r3, [r1, #8]
 800dcc8:	4648      	mov	r0, r9
 800dcca:	f7ff f88d 	bl	800cde8 <_Bfree>
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dcd4:	601a      	str	r2, [r3, #0]
 800dcd6:	1e2b      	subs	r3, r5, #0
 800dcd8:	bfaf      	iteee	ge
 800dcda:	2300      	movge	r3, #0
 800dcdc:	2201      	movlt	r2, #1
 800dcde:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dce2:	9307      	strlt	r3, [sp, #28]
 800dce4:	bfa8      	it	ge
 800dce6:	6033      	strge	r3, [r6, #0]
 800dce8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800dcec:	4b9c      	ldr	r3, [pc, #624]	@ (800df60 <_dtoa_r+0x2e0>)
 800dcee:	bfb8      	it	lt
 800dcf0:	6032      	strlt	r2, [r6, #0]
 800dcf2:	ea33 0308 	bics.w	r3, r3, r8
 800dcf6:	d112      	bne.n	800dd1e <_dtoa_r+0x9e>
 800dcf8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dcfc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dd04:	4323      	orrs	r3, r4
 800dd06:	f000 855e 	beq.w	800e7c6 <_dtoa_r+0xb46>
 800dd0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dd0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800df64 <_dtoa_r+0x2e4>
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 8560 	beq.w	800e7d6 <_dtoa_r+0xb56>
 800dd16:	f10a 0303 	add.w	r3, sl, #3
 800dd1a:	f000 bd5a 	b.w	800e7d2 <_dtoa_r+0xb52>
 800dd1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dd26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f7f2 fe3b 	bl	80009a8 <__aeabi_dcmpeq>
 800dd32:	4607      	mov	r7, r0
 800dd34:	b158      	cbz	r0, 800dd4e <_dtoa_r+0xce>
 800dd36:	2301      	movs	r3, #1
 800dd38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800dd3a:	6013      	str	r3, [r2, #0]
 800dd3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dd3e:	b113      	cbz	r3, 800dd46 <_dtoa_r+0xc6>
 800dd40:	4b89      	ldr	r3, [pc, #548]	@ (800df68 <_dtoa_r+0x2e8>)
 800dd42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800df6c <_dtoa_r+0x2ec>
 800dd4a:	f000 bd44 	b.w	800e7d6 <_dtoa_r+0xb56>
 800dd4e:	ab14      	add	r3, sp, #80	@ 0x50
 800dd50:	9301      	str	r3, [sp, #4]
 800dd52:	ab15      	add	r3, sp, #84	@ 0x54
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	4648      	mov	r0, r9
 800dd58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dd5c:	f7ff fbd8 	bl	800d510 <__d2b>
 800dd60:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800dd64:	9003      	str	r0, [sp, #12]
 800dd66:	2e00      	cmp	r6, #0
 800dd68:	d078      	beq.n	800de5c <_dtoa_r+0x1dc>
 800dd6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd70:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd78:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd7c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dd80:	9712      	str	r7, [sp, #72]	@ 0x48
 800dd82:	4619      	mov	r1, r3
 800dd84:	2200      	movs	r2, #0
 800dd86:	4b7a      	ldr	r3, [pc, #488]	@ (800df70 <_dtoa_r+0x2f0>)
 800dd88:	f7f2 f9ee 	bl	8000168 <__aeabi_dsub>
 800dd8c:	a36c      	add	r3, pc, #432	@ (adr r3, 800df40 <_dtoa_r+0x2c0>)
 800dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd92:	f7f2 fba1 	bl	80004d8 <__aeabi_dmul>
 800dd96:	a36c      	add	r3, pc, #432	@ (adr r3, 800df48 <_dtoa_r+0x2c8>)
 800dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9c:	f7f2 f9e6 	bl	800016c <__adddf3>
 800dda0:	4604      	mov	r4, r0
 800dda2:	4630      	mov	r0, r6
 800dda4:	460d      	mov	r5, r1
 800dda6:	f7f2 fb2d 	bl	8000404 <__aeabi_i2d>
 800ddaa:	a369      	add	r3, pc, #420	@ (adr r3, 800df50 <_dtoa_r+0x2d0>)
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	f7f2 fb92 	bl	80004d8 <__aeabi_dmul>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	4620      	mov	r0, r4
 800ddba:	4629      	mov	r1, r5
 800ddbc:	f7f2 f9d6 	bl	800016c <__adddf3>
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	f7f2 fe22 	bl	8000a0c <__aeabi_d2iz>
 800ddc8:	2200      	movs	r2, #0
 800ddca:	4607      	mov	r7, r0
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4620      	mov	r0, r4
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	f7f2 fdf3 	bl	80009bc <__aeabi_dcmplt>
 800ddd6:	b140      	cbz	r0, 800ddea <_dtoa_r+0x16a>
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f7f2 fb13 	bl	8000404 <__aeabi_i2d>
 800ddde:	4622      	mov	r2, r4
 800dde0:	462b      	mov	r3, r5
 800dde2:	f7f2 fde1 	bl	80009a8 <__aeabi_dcmpeq>
 800dde6:	b900      	cbnz	r0, 800ddea <_dtoa_r+0x16a>
 800dde8:	3f01      	subs	r7, #1
 800ddea:	2f16      	cmp	r7, #22
 800ddec:	d854      	bhi.n	800de98 <_dtoa_r+0x218>
 800ddee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddf2:	4b60      	ldr	r3, [pc, #384]	@ (800df74 <_dtoa_r+0x2f4>)
 800ddf4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	f7f2 fdde 	bl	80009bc <__aeabi_dcmplt>
 800de00:	2800      	cmp	r0, #0
 800de02:	d04b      	beq.n	800de9c <_dtoa_r+0x21c>
 800de04:	2300      	movs	r3, #0
 800de06:	3f01      	subs	r7, #1
 800de08:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800de0c:	1b9b      	subs	r3, r3, r6
 800de0e:	1e5a      	subs	r2, r3, #1
 800de10:	bf49      	itett	mi
 800de12:	f1c3 0301 	rsbmi	r3, r3, #1
 800de16:	2300      	movpl	r3, #0
 800de18:	9304      	strmi	r3, [sp, #16]
 800de1a:	2300      	movmi	r3, #0
 800de1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800de1e:	bf54      	ite	pl
 800de20:	9304      	strpl	r3, [sp, #16]
 800de22:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800de24:	2f00      	cmp	r7, #0
 800de26:	db3b      	blt.n	800dea0 <_dtoa_r+0x220>
 800de28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de2a:	970e      	str	r7, [sp, #56]	@ 0x38
 800de2c:	443b      	add	r3, r7
 800de2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de30:	2300      	movs	r3, #0
 800de32:	930a      	str	r3, [sp, #40]	@ 0x28
 800de34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800de36:	2b09      	cmp	r3, #9
 800de38:	d865      	bhi.n	800df06 <_dtoa_r+0x286>
 800de3a:	2b05      	cmp	r3, #5
 800de3c:	bfc4      	itt	gt
 800de3e:	3b04      	subgt	r3, #4
 800de40:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800de42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800de44:	bfc8      	it	gt
 800de46:	2400      	movgt	r4, #0
 800de48:	f1a3 0302 	sub.w	r3, r3, #2
 800de4c:	bfd8      	it	le
 800de4e:	2401      	movle	r4, #1
 800de50:	2b03      	cmp	r3, #3
 800de52:	d864      	bhi.n	800df1e <_dtoa_r+0x29e>
 800de54:	e8df f003 	tbb	[pc, r3]
 800de58:	2c385553 	.word	0x2c385553
 800de5c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800de60:	441e      	add	r6, r3
 800de62:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800de66:	2b20      	cmp	r3, #32
 800de68:	bfc1      	itttt	gt
 800de6a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800de6e:	fa08 f803 	lslgt.w	r8, r8, r3
 800de72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800de76:	fa24 f303 	lsrgt.w	r3, r4, r3
 800de7a:	bfd6      	itet	le
 800de7c:	f1c3 0320 	rsble	r3, r3, #32
 800de80:	ea48 0003 	orrgt.w	r0, r8, r3
 800de84:	fa04 f003 	lslle.w	r0, r4, r3
 800de88:	f7f2 faac 	bl	80003e4 <__aeabi_ui2d>
 800de8c:	2201      	movs	r2, #1
 800de8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de92:	3e01      	subs	r6, #1
 800de94:	9212      	str	r2, [sp, #72]	@ 0x48
 800de96:	e774      	b.n	800dd82 <_dtoa_r+0x102>
 800de98:	2301      	movs	r3, #1
 800de9a:	e7b5      	b.n	800de08 <_dtoa_r+0x188>
 800de9c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800de9e:	e7b4      	b.n	800de0a <_dtoa_r+0x18a>
 800dea0:	9b04      	ldr	r3, [sp, #16]
 800dea2:	1bdb      	subs	r3, r3, r7
 800dea4:	9304      	str	r3, [sp, #16]
 800dea6:	427b      	negs	r3, r7
 800dea8:	930a      	str	r3, [sp, #40]	@ 0x28
 800deaa:	2300      	movs	r3, #0
 800deac:	930e      	str	r3, [sp, #56]	@ 0x38
 800deae:	e7c1      	b.n	800de34 <_dtoa_r+0x1b4>
 800deb0:	2301      	movs	r3, #1
 800deb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800deb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800deb6:	eb07 0b03 	add.w	fp, r7, r3
 800deba:	f10b 0301 	add.w	r3, fp, #1
 800debe:	2b01      	cmp	r3, #1
 800dec0:	9308      	str	r3, [sp, #32]
 800dec2:	bfb8      	it	lt
 800dec4:	2301      	movlt	r3, #1
 800dec6:	e006      	b.n	800ded6 <_dtoa_r+0x256>
 800dec8:	2301      	movs	r3, #1
 800deca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800decc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dece:	2b00      	cmp	r3, #0
 800ded0:	dd28      	ble.n	800df24 <_dtoa_r+0x2a4>
 800ded2:	469b      	mov	fp, r3
 800ded4:	9308      	str	r3, [sp, #32]
 800ded6:	2100      	movs	r1, #0
 800ded8:	2204      	movs	r2, #4
 800deda:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dede:	f102 0514 	add.w	r5, r2, #20
 800dee2:	429d      	cmp	r5, r3
 800dee4:	d926      	bls.n	800df34 <_dtoa_r+0x2b4>
 800dee6:	6041      	str	r1, [r0, #4]
 800dee8:	4648      	mov	r0, r9
 800deea:	f7fe ff3d 	bl	800cd68 <_Balloc>
 800deee:	4682      	mov	sl, r0
 800def0:	2800      	cmp	r0, #0
 800def2:	d143      	bne.n	800df7c <_dtoa_r+0x2fc>
 800def4:	4602      	mov	r2, r0
 800def6:	f240 11af 	movw	r1, #431	@ 0x1af
 800defa:	4b1f      	ldr	r3, [pc, #124]	@ (800df78 <_dtoa_r+0x2f8>)
 800defc:	e6d4      	b.n	800dca8 <_dtoa_r+0x28>
 800defe:	2300      	movs	r3, #0
 800df00:	e7e3      	b.n	800deca <_dtoa_r+0x24a>
 800df02:	2300      	movs	r3, #0
 800df04:	e7d5      	b.n	800deb2 <_dtoa_r+0x232>
 800df06:	2401      	movs	r4, #1
 800df08:	2300      	movs	r3, #0
 800df0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df0c:	9320      	str	r3, [sp, #128]	@ 0x80
 800df0e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800df12:	2200      	movs	r2, #0
 800df14:	2312      	movs	r3, #18
 800df16:	f8cd b020 	str.w	fp, [sp, #32]
 800df1a:	9221      	str	r2, [sp, #132]	@ 0x84
 800df1c:	e7db      	b.n	800ded6 <_dtoa_r+0x256>
 800df1e:	2301      	movs	r3, #1
 800df20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df22:	e7f4      	b.n	800df0e <_dtoa_r+0x28e>
 800df24:	f04f 0b01 	mov.w	fp, #1
 800df28:	465b      	mov	r3, fp
 800df2a:	f8cd b020 	str.w	fp, [sp, #32]
 800df2e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800df32:	e7d0      	b.n	800ded6 <_dtoa_r+0x256>
 800df34:	3101      	adds	r1, #1
 800df36:	0052      	lsls	r2, r2, #1
 800df38:	e7d1      	b.n	800dede <_dtoa_r+0x25e>
 800df3a:	bf00      	nop
 800df3c:	f3af 8000 	nop.w
 800df40:	636f4361 	.word	0x636f4361
 800df44:	3fd287a7 	.word	0x3fd287a7
 800df48:	8b60c8b3 	.word	0x8b60c8b3
 800df4c:	3fc68a28 	.word	0x3fc68a28
 800df50:	509f79fb 	.word	0x509f79fb
 800df54:	3fd34413 	.word	0x3fd34413
 800df58:	0800f234 	.word	0x0800f234
 800df5c:	0800f2ef 	.word	0x0800f2ef
 800df60:	7ff00000 	.word	0x7ff00000
 800df64:	0800f2e9 	.word	0x0800f2e9
 800df68:	0800f2ee 	.word	0x0800f2ee
 800df6c:	0800f2ed 	.word	0x0800f2ed
 800df70:	3ff80000 	.word	0x3ff80000
 800df74:	0800f508 	.word	0x0800f508
 800df78:	0800f1c3 	.word	0x0800f1c3
 800df7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df80:	6018      	str	r0, [r3, #0]
 800df82:	9b08      	ldr	r3, [sp, #32]
 800df84:	2b0e      	cmp	r3, #14
 800df86:	f200 80a1 	bhi.w	800e0cc <_dtoa_r+0x44c>
 800df8a:	2c00      	cmp	r4, #0
 800df8c:	f000 809e 	beq.w	800e0cc <_dtoa_r+0x44c>
 800df90:	2f00      	cmp	r7, #0
 800df92:	dd33      	ble.n	800dffc <_dtoa_r+0x37c>
 800df94:	4b9c      	ldr	r3, [pc, #624]	@ (800e208 <_dtoa_r+0x588>)
 800df96:	f007 020f 	and.w	r2, r7, #15
 800df9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df9e:	05f8      	lsls	r0, r7, #23
 800dfa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dfa4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800dfa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dfac:	d516      	bpl.n	800dfdc <_dtoa_r+0x35c>
 800dfae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfb2:	4b96      	ldr	r3, [pc, #600]	@ (800e20c <_dtoa_r+0x58c>)
 800dfb4:	2603      	movs	r6, #3
 800dfb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dfba:	f7f2 fbb7 	bl	800072c <__aeabi_ddiv>
 800dfbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dfc2:	f004 040f 	and.w	r4, r4, #15
 800dfc6:	4d91      	ldr	r5, [pc, #580]	@ (800e20c <_dtoa_r+0x58c>)
 800dfc8:	b954      	cbnz	r4, 800dfe0 <_dtoa_r+0x360>
 800dfca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dfce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfd2:	f7f2 fbab 	bl	800072c <__aeabi_ddiv>
 800dfd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dfda:	e028      	b.n	800e02e <_dtoa_r+0x3ae>
 800dfdc:	2602      	movs	r6, #2
 800dfde:	e7f2      	b.n	800dfc6 <_dtoa_r+0x346>
 800dfe0:	07e1      	lsls	r1, r4, #31
 800dfe2:	d508      	bpl.n	800dff6 <_dtoa_r+0x376>
 800dfe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dfe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dfec:	f7f2 fa74 	bl	80004d8 <__aeabi_dmul>
 800dff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dff4:	3601      	adds	r6, #1
 800dff6:	1064      	asrs	r4, r4, #1
 800dff8:	3508      	adds	r5, #8
 800dffa:	e7e5      	b.n	800dfc8 <_dtoa_r+0x348>
 800dffc:	f000 80af 	beq.w	800e15e <_dtoa_r+0x4de>
 800e000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e004:	427c      	negs	r4, r7
 800e006:	4b80      	ldr	r3, [pc, #512]	@ (800e208 <_dtoa_r+0x588>)
 800e008:	f004 020f 	and.w	r2, r4, #15
 800e00c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e014:	f7f2 fa60 	bl	80004d8 <__aeabi_dmul>
 800e018:	2602      	movs	r6, #2
 800e01a:	2300      	movs	r3, #0
 800e01c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e020:	4d7a      	ldr	r5, [pc, #488]	@ (800e20c <_dtoa_r+0x58c>)
 800e022:	1124      	asrs	r4, r4, #4
 800e024:	2c00      	cmp	r4, #0
 800e026:	f040 808f 	bne.w	800e148 <_dtoa_r+0x4c8>
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1d3      	bne.n	800dfd6 <_dtoa_r+0x356>
 800e02e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e034:	2b00      	cmp	r3, #0
 800e036:	f000 8094 	beq.w	800e162 <_dtoa_r+0x4e2>
 800e03a:	2200      	movs	r2, #0
 800e03c:	4620      	mov	r0, r4
 800e03e:	4629      	mov	r1, r5
 800e040:	4b73      	ldr	r3, [pc, #460]	@ (800e210 <_dtoa_r+0x590>)
 800e042:	f7f2 fcbb 	bl	80009bc <__aeabi_dcmplt>
 800e046:	2800      	cmp	r0, #0
 800e048:	f000 808b 	beq.w	800e162 <_dtoa_r+0x4e2>
 800e04c:	9b08      	ldr	r3, [sp, #32]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f000 8087 	beq.w	800e162 <_dtoa_r+0x4e2>
 800e054:	f1bb 0f00 	cmp.w	fp, #0
 800e058:	dd34      	ble.n	800e0c4 <_dtoa_r+0x444>
 800e05a:	4620      	mov	r0, r4
 800e05c:	2200      	movs	r2, #0
 800e05e:	4629      	mov	r1, r5
 800e060:	4b6c      	ldr	r3, [pc, #432]	@ (800e214 <_dtoa_r+0x594>)
 800e062:	f7f2 fa39 	bl	80004d8 <__aeabi_dmul>
 800e066:	465c      	mov	r4, fp
 800e068:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e06c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e070:	3601      	adds	r6, #1
 800e072:	4630      	mov	r0, r6
 800e074:	f7f2 f9c6 	bl	8000404 <__aeabi_i2d>
 800e078:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e07c:	f7f2 fa2c 	bl	80004d8 <__aeabi_dmul>
 800e080:	2200      	movs	r2, #0
 800e082:	4b65      	ldr	r3, [pc, #404]	@ (800e218 <_dtoa_r+0x598>)
 800e084:	f7f2 f872 	bl	800016c <__adddf3>
 800e088:	4605      	mov	r5, r0
 800e08a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e08e:	2c00      	cmp	r4, #0
 800e090:	d16a      	bne.n	800e168 <_dtoa_r+0x4e8>
 800e092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e096:	2200      	movs	r2, #0
 800e098:	4b60      	ldr	r3, [pc, #384]	@ (800e21c <_dtoa_r+0x59c>)
 800e09a:	f7f2 f865 	bl	8000168 <__aeabi_dsub>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e0a6:	462a      	mov	r2, r5
 800e0a8:	4633      	mov	r3, r6
 800e0aa:	f7f2 fca5 	bl	80009f8 <__aeabi_dcmpgt>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f040 8298 	bne.w	800e5e4 <_dtoa_r+0x964>
 800e0b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0b8:	462a      	mov	r2, r5
 800e0ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e0be:	f7f2 fc7d 	bl	80009bc <__aeabi_dcmplt>
 800e0c2:	bb38      	cbnz	r0, 800e114 <_dtoa_r+0x494>
 800e0c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e0c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e0cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f2c0 8157 	blt.w	800e382 <_dtoa_r+0x702>
 800e0d4:	2f0e      	cmp	r7, #14
 800e0d6:	f300 8154 	bgt.w	800e382 <_dtoa_r+0x702>
 800e0da:	4b4b      	ldr	r3, [pc, #300]	@ (800e208 <_dtoa_r+0x588>)
 800e0dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e0e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e0e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e0e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f280 80e5 	bge.w	800e2ba <_dtoa_r+0x63a>
 800e0f0:	9b08      	ldr	r3, [sp, #32]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f300 80e1 	bgt.w	800e2ba <_dtoa_r+0x63a>
 800e0f8:	d10c      	bne.n	800e114 <_dtoa_r+0x494>
 800e0fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0fe:	2200      	movs	r2, #0
 800e100:	4b46      	ldr	r3, [pc, #280]	@ (800e21c <_dtoa_r+0x59c>)
 800e102:	f7f2 f9e9 	bl	80004d8 <__aeabi_dmul>
 800e106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e10a:	f7f2 fc6b 	bl	80009e4 <__aeabi_dcmpge>
 800e10e:	2800      	cmp	r0, #0
 800e110:	f000 8266 	beq.w	800e5e0 <_dtoa_r+0x960>
 800e114:	2400      	movs	r4, #0
 800e116:	4625      	mov	r5, r4
 800e118:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e11a:	4656      	mov	r6, sl
 800e11c:	ea6f 0803 	mvn.w	r8, r3
 800e120:	2700      	movs	r7, #0
 800e122:	4621      	mov	r1, r4
 800e124:	4648      	mov	r0, r9
 800e126:	f7fe fe5f 	bl	800cde8 <_Bfree>
 800e12a:	2d00      	cmp	r5, #0
 800e12c:	f000 80bd 	beq.w	800e2aa <_dtoa_r+0x62a>
 800e130:	b12f      	cbz	r7, 800e13e <_dtoa_r+0x4be>
 800e132:	42af      	cmp	r7, r5
 800e134:	d003      	beq.n	800e13e <_dtoa_r+0x4be>
 800e136:	4639      	mov	r1, r7
 800e138:	4648      	mov	r0, r9
 800e13a:	f7fe fe55 	bl	800cde8 <_Bfree>
 800e13e:	4629      	mov	r1, r5
 800e140:	4648      	mov	r0, r9
 800e142:	f7fe fe51 	bl	800cde8 <_Bfree>
 800e146:	e0b0      	b.n	800e2aa <_dtoa_r+0x62a>
 800e148:	07e2      	lsls	r2, r4, #31
 800e14a:	d505      	bpl.n	800e158 <_dtoa_r+0x4d8>
 800e14c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e150:	f7f2 f9c2 	bl	80004d8 <__aeabi_dmul>
 800e154:	2301      	movs	r3, #1
 800e156:	3601      	adds	r6, #1
 800e158:	1064      	asrs	r4, r4, #1
 800e15a:	3508      	adds	r5, #8
 800e15c:	e762      	b.n	800e024 <_dtoa_r+0x3a4>
 800e15e:	2602      	movs	r6, #2
 800e160:	e765      	b.n	800e02e <_dtoa_r+0x3ae>
 800e162:	46b8      	mov	r8, r7
 800e164:	9c08      	ldr	r4, [sp, #32]
 800e166:	e784      	b.n	800e072 <_dtoa_r+0x3f2>
 800e168:	4b27      	ldr	r3, [pc, #156]	@ (800e208 <_dtoa_r+0x588>)
 800e16a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e16c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e174:	4454      	add	r4, sl
 800e176:	2900      	cmp	r1, #0
 800e178:	d054      	beq.n	800e224 <_dtoa_r+0x5a4>
 800e17a:	2000      	movs	r0, #0
 800e17c:	4928      	ldr	r1, [pc, #160]	@ (800e220 <_dtoa_r+0x5a0>)
 800e17e:	f7f2 fad5 	bl	800072c <__aeabi_ddiv>
 800e182:	4633      	mov	r3, r6
 800e184:	462a      	mov	r2, r5
 800e186:	f7f1 ffef 	bl	8000168 <__aeabi_dsub>
 800e18a:	4656      	mov	r6, sl
 800e18c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e194:	f7f2 fc3a 	bl	8000a0c <__aeabi_d2iz>
 800e198:	4605      	mov	r5, r0
 800e19a:	f7f2 f933 	bl	8000404 <__aeabi_i2d>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1a6:	f7f1 ffdf 	bl	8000168 <__aeabi_dsub>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	3530      	adds	r5, #48	@ 0x30
 800e1b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e1b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e1b8:	f806 5b01 	strb.w	r5, [r6], #1
 800e1bc:	f7f2 fbfe 	bl	80009bc <__aeabi_dcmplt>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d172      	bne.n	800e2aa <_dtoa_r+0x62a>
 800e1c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	4911      	ldr	r1, [pc, #68]	@ (800e210 <_dtoa_r+0x590>)
 800e1cc:	f7f1 ffcc 	bl	8000168 <__aeabi_dsub>
 800e1d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e1d4:	f7f2 fbf2 	bl	80009bc <__aeabi_dcmplt>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	f040 80b4 	bne.w	800e346 <_dtoa_r+0x6c6>
 800e1de:	42a6      	cmp	r6, r4
 800e1e0:	f43f af70 	beq.w	800e0c4 <_dtoa_r+0x444>
 800e1e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	4b0a      	ldr	r3, [pc, #40]	@ (800e214 <_dtoa_r+0x594>)
 800e1ec:	f7f2 f974 	bl	80004d8 <__aeabi_dmul>
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1fa:	4b06      	ldr	r3, [pc, #24]	@ (800e214 <_dtoa_r+0x594>)
 800e1fc:	f7f2 f96c 	bl	80004d8 <__aeabi_dmul>
 800e200:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e204:	e7c4      	b.n	800e190 <_dtoa_r+0x510>
 800e206:	bf00      	nop
 800e208:	0800f508 	.word	0x0800f508
 800e20c:	0800f4e0 	.word	0x0800f4e0
 800e210:	3ff00000 	.word	0x3ff00000
 800e214:	40240000 	.word	0x40240000
 800e218:	401c0000 	.word	0x401c0000
 800e21c:	40140000 	.word	0x40140000
 800e220:	3fe00000 	.word	0x3fe00000
 800e224:	4631      	mov	r1, r6
 800e226:	4628      	mov	r0, r5
 800e228:	f7f2 f956 	bl	80004d8 <__aeabi_dmul>
 800e22c:	4656      	mov	r6, sl
 800e22e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e232:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e238:	f7f2 fbe8 	bl	8000a0c <__aeabi_d2iz>
 800e23c:	4605      	mov	r5, r0
 800e23e:	f7f2 f8e1 	bl	8000404 <__aeabi_i2d>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e24a:	f7f1 ff8d 	bl	8000168 <__aeabi_dsub>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	3530      	adds	r5, #48	@ 0x30
 800e254:	f806 5b01 	strb.w	r5, [r6], #1
 800e258:	42a6      	cmp	r6, r4
 800e25a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e25e:	f04f 0200 	mov.w	r2, #0
 800e262:	d124      	bne.n	800e2ae <_dtoa_r+0x62e>
 800e264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e268:	4bae      	ldr	r3, [pc, #696]	@ (800e524 <_dtoa_r+0x8a4>)
 800e26a:	f7f1 ff7f 	bl	800016c <__adddf3>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e276:	f7f2 fbbf 	bl	80009f8 <__aeabi_dcmpgt>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d163      	bne.n	800e346 <_dtoa_r+0x6c6>
 800e27e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e282:	2000      	movs	r0, #0
 800e284:	49a7      	ldr	r1, [pc, #668]	@ (800e524 <_dtoa_r+0x8a4>)
 800e286:	f7f1 ff6f 	bl	8000168 <__aeabi_dsub>
 800e28a:	4602      	mov	r2, r0
 800e28c:	460b      	mov	r3, r1
 800e28e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e292:	f7f2 fb93 	bl	80009bc <__aeabi_dcmplt>
 800e296:	2800      	cmp	r0, #0
 800e298:	f43f af14 	beq.w	800e0c4 <_dtoa_r+0x444>
 800e29c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e29e:	1e73      	subs	r3, r6, #1
 800e2a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e2a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e2a6:	2b30      	cmp	r3, #48	@ 0x30
 800e2a8:	d0f8      	beq.n	800e29c <_dtoa_r+0x61c>
 800e2aa:	4647      	mov	r7, r8
 800e2ac:	e03b      	b.n	800e326 <_dtoa_r+0x6a6>
 800e2ae:	4b9e      	ldr	r3, [pc, #632]	@ (800e528 <_dtoa_r+0x8a8>)
 800e2b0:	f7f2 f912 	bl	80004d8 <__aeabi_dmul>
 800e2b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e2b8:	e7bc      	b.n	800e234 <_dtoa_r+0x5b4>
 800e2ba:	4656      	mov	r6, sl
 800e2bc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e2c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	f7f2 fa30 	bl	800072c <__aeabi_ddiv>
 800e2cc:	f7f2 fb9e 	bl	8000a0c <__aeabi_d2iz>
 800e2d0:	4680      	mov	r8, r0
 800e2d2:	f7f2 f897 	bl	8000404 <__aeabi_i2d>
 800e2d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2da:	f7f2 f8fd 	bl	80004d8 <__aeabi_dmul>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	f7f1 ff3f 	bl	8000168 <__aeabi_dsub>
 800e2ea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e2ee:	9d08      	ldr	r5, [sp, #32]
 800e2f0:	f806 4b01 	strb.w	r4, [r6], #1
 800e2f4:	eba6 040a 	sub.w	r4, r6, sl
 800e2f8:	42a5      	cmp	r5, r4
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	d133      	bne.n	800e368 <_dtoa_r+0x6e8>
 800e300:	f7f1 ff34 	bl	800016c <__adddf3>
 800e304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e308:	4604      	mov	r4, r0
 800e30a:	460d      	mov	r5, r1
 800e30c:	f7f2 fb74 	bl	80009f8 <__aeabi_dcmpgt>
 800e310:	b9c0      	cbnz	r0, 800e344 <_dtoa_r+0x6c4>
 800e312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e316:	4620      	mov	r0, r4
 800e318:	4629      	mov	r1, r5
 800e31a:	f7f2 fb45 	bl	80009a8 <__aeabi_dcmpeq>
 800e31e:	b110      	cbz	r0, 800e326 <_dtoa_r+0x6a6>
 800e320:	f018 0f01 	tst.w	r8, #1
 800e324:	d10e      	bne.n	800e344 <_dtoa_r+0x6c4>
 800e326:	4648      	mov	r0, r9
 800e328:	9903      	ldr	r1, [sp, #12]
 800e32a:	f7fe fd5d 	bl	800cde8 <_Bfree>
 800e32e:	2300      	movs	r3, #0
 800e330:	7033      	strb	r3, [r6, #0]
 800e332:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e334:	3701      	adds	r7, #1
 800e336:	601f      	str	r7, [r3, #0]
 800e338:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f000 824b 	beq.w	800e7d6 <_dtoa_r+0xb56>
 800e340:	601e      	str	r6, [r3, #0]
 800e342:	e248      	b.n	800e7d6 <_dtoa_r+0xb56>
 800e344:	46b8      	mov	r8, r7
 800e346:	4633      	mov	r3, r6
 800e348:	461e      	mov	r6, r3
 800e34a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e34e:	2a39      	cmp	r2, #57	@ 0x39
 800e350:	d106      	bne.n	800e360 <_dtoa_r+0x6e0>
 800e352:	459a      	cmp	sl, r3
 800e354:	d1f8      	bne.n	800e348 <_dtoa_r+0x6c8>
 800e356:	2230      	movs	r2, #48	@ 0x30
 800e358:	f108 0801 	add.w	r8, r8, #1
 800e35c:	f88a 2000 	strb.w	r2, [sl]
 800e360:	781a      	ldrb	r2, [r3, #0]
 800e362:	3201      	adds	r2, #1
 800e364:	701a      	strb	r2, [r3, #0]
 800e366:	e7a0      	b.n	800e2aa <_dtoa_r+0x62a>
 800e368:	2200      	movs	r2, #0
 800e36a:	4b6f      	ldr	r3, [pc, #444]	@ (800e528 <_dtoa_r+0x8a8>)
 800e36c:	f7f2 f8b4 	bl	80004d8 <__aeabi_dmul>
 800e370:	2200      	movs	r2, #0
 800e372:	2300      	movs	r3, #0
 800e374:	4604      	mov	r4, r0
 800e376:	460d      	mov	r5, r1
 800e378:	f7f2 fb16 	bl	80009a8 <__aeabi_dcmpeq>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d09f      	beq.n	800e2c0 <_dtoa_r+0x640>
 800e380:	e7d1      	b.n	800e326 <_dtoa_r+0x6a6>
 800e382:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e384:	2a00      	cmp	r2, #0
 800e386:	f000 80ea 	beq.w	800e55e <_dtoa_r+0x8de>
 800e38a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e38c:	2a01      	cmp	r2, #1
 800e38e:	f300 80cd 	bgt.w	800e52c <_dtoa_r+0x8ac>
 800e392:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e394:	2a00      	cmp	r2, #0
 800e396:	f000 80c1 	beq.w	800e51c <_dtoa_r+0x89c>
 800e39a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e39e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e3a0:	9e04      	ldr	r6, [sp, #16]
 800e3a2:	9a04      	ldr	r2, [sp, #16]
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	441a      	add	r2, r3
 800e3a8:	9204      	str	r2, [sp, #16]
 800e3aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ac:	4648      	mov	r0, r9
 800e3ae:	441a      	add	r2, r3
 800e3b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3b2:	f7fe fe17 	bl	800cfe4 <__i2b>
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	b166      	cbz	r6, 800e3d4 <_dtoa_r+0x754>
 800e3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	dd09      	ble.n	800e3d4 <_dtoa_r+0x754>
 800e3c0:	42b3      	cmp	r3, r6
 800e3c2:	bfa8      	it	ge
 800e3c4:	4633      	movge	r3, r6
 800e3c6:	9a04      	ldr	r2, [sp, #16]
 800e3c8:	1af6      	subs	r6, r6, r3
 800e3ca:	1ad2      	subs	r2, r2, r3
 800e3cc:	9204      	str	r2, [sp, #16]
 800e3ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3d6:	b30b      	cbz	r3, 800e41c <_dtoa_r+0x79c>
 800e3d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f000 80c6 	beq.w	800e56c <_dtoa_r+0x8ec>
 800e3e0:	2c00      	cmp	r4, #0
 800e3e2:	f000 80c0 	beq.w	800e566 <_dtoa_r+0x8e6>
 800e3e6:	4629      	mov	r1, r5
 800e3e8:	4622      	mov	r2, r4
 800e3ea:	4648      	mov	r0, r9
 800e3ec:	f7fe feb2 	bl	800d154 <__pow5mult>
 800e3f0:	9a03      	ldr	r2, [sp, #12]
 800e3f2:	4601      	mov	r1, r0
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	4648      	mov	r0, r9
 800e3f8:	f7fe fe0a 	bl	800d010 <__multiply>
 800e3fc:	9903      	ldr	r1, [sp, #12]
 800e3fe:	4680      	mov	r8, r0
 800e400:	4648      	mov	r0, r9
 800e402:	f7fe fcf1 	bl	800cde8 <_Bfree>
 800e406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e408:	1b1b      	subs	r3, r3, r4
 800e40a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e40c:	f000 80b1 	beq.w	800e572 <_dtoa_r+0x8f2>
 800e410:	4641      	mov	r1, r8
 800e412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e414:	4648      	mov	r0, r9
 800e416:	f7fe fe9d 	bl	800d154 <__pow5mult>
 800e41a:	9003      	str	r0, [sp, #12]
 800e41c:	2101      	movs	r1, #1
 800e41e:	4648      	mov	r0, r9
 800e420:	f7fe fde0 	bl	800cfe4 <__i2b>
 800e424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e426:	4604      	mov	r4, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 81d8 	beq.w	800e7de <_dtoa_r+0xb5e>
 800e42e:	461a      	mov	r2, r3
 800e430:	4601      	mov	r1, r0
 800e432:	4648      	mov	r0, r9
 800e434:	f7fe fe8e 	bl	800d154 <__pow5mult>
 800e438:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e43a:	4604      	mov	r4, r0
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	f300 809f 	bgt.w	800e580 <_dtoa_r+0x900>
 800e442:	9b06      	ldr	r3, [sp, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	f040 8097 	bne.w	800e578 <_dtoa_r+0x8f8>
 800e44a:	9b07      	ldr	r3, [sp, #28]
 800e44c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e450:	2b00      	cmp	r3, #0
 800e452:	f040 8093 	bne.w	800e57c <_dtoa_r+0x8fc>
 800e456:	9b07      	ldr	r3, [sp, #28]
 800e458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e45c:	0d1b      	lsrs	r3, r3, #20
 800e45e:	051b      	lsls	r3, r3, #20
 800e460:	b133      	cbz	r3, 800e470 <_dtoa_r+0x7f0>
 800e462:	9b04      	ldr	r3, [sp, #16]
 800e464:	3301      	adds	r3, #1
 800e466:	9304      	str	r3, [sp, #16]
 800e468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e46a:	3301      	adds	r3, #1
 800e46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e46e:	2301      	movs	r3, #1
 800e470:	930a      	str	r3, [sp, #40]	@ 0x28
 800e472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 81b8 	beq.w	800e7ea <_dtoa_r+0xb6a>
 800e47a:	6923      	ldr	r3, [r4, #16]
 800e47c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e480:	6918      	ldr	r0, [r3, #16]
 800e482:	f7fe fd63 	bl	800cf4c <__hi0bits>
 800e486:	f1c0 0020 	rsb	r0, r0, #32
 800e48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e48c:	4418      	add	r0, r3
 800e48e:	f010 001f 	ands.w	r0, r0, #31
 800e492:	f000 8082 	beq.w	800e59a <_dtoa_r+0x91a>
 800e496:	f1c0 0320 	rsb	r3, r0, #32
 800e49a:	2b04      	cmp	r3, #4
 800e49c:	dd73      	ble.n	800e586 <_dtoa_r+0x906>
 800e49e:	9b04      	ldr	r3, [sp, #16]
 800e4a0:	f1c0 001c 	rsb	r0, r0, #28
 800e4a4:	4403      	add	r3, r0
 800e4a6:	9304      	str	r3, [sp, #16]
 800e4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4aa:	4406      	add	r6, r0
 800e4ac:	4403      	add	r3, r0
 800e4ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4b0:	9b04      	ldr	r3, [sp, #16]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	dd05      	ble.n	800e4c2 <_dtoa_r+0x842>
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	4648      	mov	r0, r9
 800e4ba:	9903      	ldr	r1, [sp, #12]
 800e4bc:	f7fe fea4 	bl	800d208 <__lshift>
 800e4c0:	9003      	str	r0, [sp, #12]
 800e4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	dd05      	ble.n	800e4d4 <_dtoa_r+0x854>
 800e4c8:	4621      	mov	r1, r4
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	4648      	mov	r0, r9
 800e4ce:	f7fe fe9b 	bl	800d208 <__lshift>
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d061      	beq.n	800e59e <_dtoa_r+0x91e>
 800e4da:	4621      	mov	r1, r4
 800e4dc:	9803      	ldr	r0, [sp, #12]
 800e4de:	f7fe feff 	bl	800d2e0 <__mcmp>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	da5b      	bge.n	800e59e <_dtoa_r+0x91e>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	220a      	movs	r2, #10
 800e4ea:	4648      	mov	r0, r9
 800e4ec:	9903      	ldr	r1, [sp, #12]
 800e4ee:	f7fe fc9d 	bl	800ce2c <__multadd>
 800e4f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4f4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e4f8:	9003      	str	r0, [sp, #12]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f000 8177 	beq.w	800e7ee <_dtoa_r+0xb6e>
 800e500:	4629      	mov	r1, r5
 800e502:	2300      	movs	r3, #0
 800e504:	220a      	movs	r2, #10
 800e506:	4648      	mov	r0, r9
 800e508:	f7fe fc90 	bl	800ce2c <__multadd>
 800e50c:	f1bb 0f00 	cmp.w	fp, #0
 800e510:	4605      	mov	r5, r0
 800e512:	dc6f      	bgt.n	800e5f4 <_dtoa_r+0x974>
 800e514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e516:	2b02      	cmp	r3, #2
 800e518:	dc49      	bgt.n	800e5ae <_dtoa_r+0x92e>
 800e51a:	e06b      	b.n	800e5f4 <_dtoa_r+0x974>
 800e51c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e51e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e522:	e73c      	b.n	800e39e <_dtoa_r+0x71e>
 800e524:	3fe00000 	.word	0x3fe00000
 800e528:	40240000 	.word	0x40240000
 800e52c:	9b08      	ldr	r3, [sp, #32]
 800e52e:	1e5c      	subs	r4, r3, #1
 800e530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e532:	42a3      	cmp	r3, r4
 800e534:	db09      	blt.n	800e54a <_dtoa_r+0x8ca>
 800e536:	1b1c      	subs	r4, r3, r4
 800e538:	9b08      	ldr	r3, [sp, #32]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f6bf af30 	bge.w	800e3a0 <_dtoa_r+0x720>
 800e540:	9b04      	ldr	r3, [sp, #16]
 800e542:	9a08      	ldr	r2, [sp, #32]
 800e544:	1a9e      	subs	r6, r3, r2
 800e546:	2300      	movs	r3, #0
 800e548:	e72b      	b.n	800e3a2 <_dtoa_r+0x722>
 800e54a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e54c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e54e:	1ae3      	subs	r3, r4, r3
 800e550:	441a      	add	r2, r3
 800e552:	940a      	str	r4, [sp, #40]	@ 0x28
 800e554:	9e04      	ldr	r6, [sp, #16]
 800e556:	2400      	movs	r4, #0
 800e558:	9b08      	ldr	r3, [sp, #32]
 800e55a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e55c:	e721      	b.n	800e3a2 <_dtoa_r+0x722>
 800e55e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e560:	9e04      	ldr	r6, [sp, #16]
 800e562:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e564:	e728      	b.n	800e3b8 <_dtoa_r+0x738>
 800e566:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e56a:	e751      	b.n	800e410 <_dtoa_r+0x790>
 800e56c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e56e:	9903      	ldr	r1, [sp, #12]
 800e570:	e750      	b.n	800e414 <_dtoa_r+0x794>
 800e572:	f8cd 800c 	str.w	r8, [sp, #12]
 800e576:	e751      	b.n	800e41c <_dtoa_r+0x79c>
 800e578:	2300      	movs	r3, #0
 800e57a:	e779      	b.n	800e470 <_dtoa_r+0x7f0>
 800e57c:	9b06      	ldr	r3, [sp, #24]
 800e57e:	e777      	b.n	800e470 <_dtoa_r+0x7f0>
 800e580:	2300      	movs	r3, #0
 800e582:	930a      	str	r3, [sp, #40]	@ 0x28
 800e584:	e779      	b.n	800e47a <_dtoa_r+0x7fa>
 800e586:	d093      	beq.n	800e4b0 <_dtoa_r+0x830>
 800e588:	9a04      	ldr	r2, [sp, #16]
 800e58a:	331c      	adds	r3, #28
 800e58c:	441a      	add	r2, r3
 800e58e:	9204      	str	r2, [sp, #16]
 800e590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e592:	441e      	add	r6, r3
 800e594:	441a      	add	r2, r3
 800e596:	9209      	str	r2, [sp, #36]	@ 0x24
 800e598:	e78a      	b.n	800e4b0 <_dtoa_r+0x830>
 800e59a:	4603      	mov	r3, r0
 800e59c:	e7f4      	b.n	800e588 <_dtoa_r+0x908>
 800e59e:	9b08      	ldr	r3, [sp, #32]
 800e5a0:	46b8      	mov	r8, r7
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	dc20      	bgt.n	800e5e8 <_dtoa_r+0x968>
 800e5a6:	469b      	mov	fp, r3
 800e5a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	dd1e      	ble.n	800e5ec <_dtoa_r+0x96c>
 800e5ae:	f1bb 0f00 	cmp.w	fp, #0
 800e5b2:	f47f adb1 	bne.w	800e118 <_dtoa_r+0x498>
 800e5b6:	4621      	mov	r1, r4
 800e5b8:	465b      	mov	r3, fp
 800e5ba:	2205      	movs	r2, #5
 800e5bc:	4648      	mov	r0, r9
 800e5be:	f7fe fc35 	bl	800ce2c <__multadd>
 800e5c2:	4601      	mov	r1, r0
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	9803      	ldr	r0, [sp, #12]
 800e5c8:	f7fe fe8a 	bl	800d2e0 <__mcmp>
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	f77f ada3 	ble.w	800e118 <_dtoa_r+0x498>
 800e5d2:	4656      	mov	r6, sl
 800e5d4:	2331      	movs	r3, #49	@ 0x31
 800e5d6:	f108 0801 	add.w	r8, r8, #1
 800e5da:	f806 3b01 	strb.w	r3, [r6], #1
 800e5de:	e59f      	b.n	800e120 <_dtoa_r+0x4a0>
 800e5e0:	46b8      	mov	r8, r7
 800e5e2:	9c08      	ldr	r4, [sp, #32]
 800e5e4:	4625      	mov	r5, r4
 800e5e6:	e7f4      	b.n	800e5d2 <_dtoa_r+0x952>
 800e5e8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800e5ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f000 8101 	beq.w	800e7f6 <_dtoa_r+0xb76>
 800e5f4:	2e00      	cmp	r6, #0
 800e5f6:	dd05      	ble.n	800e604 <_dtoa_r+0x984>
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	4632      	mov	r2, r6
 800e5fc:	4648      	mov	r0, r9
 800e5fe:	f7fe fe03 	bl	800d208 <__lshift>
 800e602:	4605      	mov	r5, r0
 800e604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e606:	2b00      	cmp	r3, #0
 800e608:	d05c      	beq.n	800e6c4 <_dtoa_r+0xa44>
 800e60a:	4648      	mov	r0, r9
 800e60c:	6869      	ldr	r1, [r5, #4]
 800e60e:	f7fe fbab 	bl	800cd68 <_Balloc>
 800e612:	4606      	mov	r6, r0
 800e614:	b928      	cbnz	r0, 800e622 <_dtoa_r+0x9a2>
 800e616:	4602      	mov	r2, r0
 800e618:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e61c:	4b80      	ldr	r3, [pc, #512]	@ (800e820 <_dtoa_r+0xba0>)
 800e61e:	f7ff bb43 	b.w	800dca8 <_dtoa_r+0x28>
 800e622:	692a      	ldr	r2, [r5, #16]
 800e624:	f105 010c 	add.w	r1, r5, #12
 800e628:	3202      	adds	r2, #2
 800e62a:	0092      	lsls	r2, r2, #2
 800e62c:	300c      	adds	r0, #12
 800e62e:	f7fd ff44 	bl	800c4ba <memcpy>
 800e632:	2201      	movs	r2, #1
 800e634:	4631      	mov	r1, r6
 800e636:	4648      	mov	r0, r9
 800e638:	f7fe fde6 	bl	800d208 <__lshift>
 800e63c:	462f      	mov	r7, r5
 800e63e:	4605      	mov	r5, r0
 800e640:	f10a 0301 	add.w	r3, sl, #1
 800e644:	9304      	str	r3, [sp, #16]
 800e646:	eb0a 030b 	add.w	r3, sl, fp
 800e64a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e64c:	9b06      	ldr	r3, [sp, #24]
 800e64e:	f003 0301 	and.w	r3, r3, #1
 800e652:	9309      	str	r3, [sp, #36]	@ 0x24
 800e654:	9b04      	ldr	r3, [sp, #16]
 800e656:	4621      	mov	r1, r4
 800e658:	9803      	ldr	r0, [sp, #12]
 800e65a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e65e:	f7ff fa85 	bl	800db6c <quorem>
 800e662:	4603      	mov	r3, r0
 800e664:	4639      	mov	r1, r7
 800e666:	3330      	adds	r3, #48	@ 0x30
 800e668:	9006      	str	r0, [sp, #24]
 800e66a:	9803      	ldr	r0, [sp, #12]
 800e66c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e66e:	f7fe fe37 	bl	800d2e0 <__mcmp>
 800e672:	462a      	mov	r2, r5
 800e674:	9008      	str	r0, [sp, #32]
 800e676:	4621      	mov	r1, r4
 800e678:	4648      	mov	r0, r9
 800e67a:	f7fe fe4d 	bl	800d318 <__mdiff>
 800e67e:	68c2      	ldr	r2, [r0, #12]
 800e680:	4606      	mov	r6, r0
 800e682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e684:	bb02      	cbnz	r2, 800e6c8 <_dtoa_r+0xa48>
 800e686:	4601      	mov	r1, r0
 800e688:	9803      	ldr	r0, [sp, #12]
 800e68a:	f7fe fe29 	bl	800d2e0 <__mcmp>
 800e68e:	4602      	mov	r2, r0
 800e690:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e692:	4631      	mov	r1, r6
 800e694:	4648      	mov	r0, r9
 800e696:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800e69a:	f7fe fba5 	bl	800cde8 <_Bfree>
 800e69e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e6a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e6a2:	9e04      	ldr	r6, [sp, #16]
 800e6a4:	ea42 0103 	orr.w	r1, r2, r3
 800e6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6aa:	4319      	orrs	r1, r3
 800e6ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6ae:	d10d      	bne.n	800e6cc <_dtoa_r+0xa4c>
 800e6b0:	2b39      	cmp	r3, #57	@ 0x39
 800e6b2:	d027      	beq.n	800e704 <_dtoa_r+0xa84>
 800e6b4:	9a08      	ldr	r2, [sp, #32]
 800e6b6:	2a00      	cmp	r2, #0
 800e6b8:	dd01      	ble.n	800e6be <_dtoa_r+0xa3e>
 800e6ba:	9b06      	ldr	r3, [sp, #24]
 800e6bc:	3331      	adds	r3, #49	@ 0x31
 800e6be:	f88b 3000 	strb.w	r3, [fp]
 800e6c2:	e52e      	b.n	800e122 <_dtoa_r+0x4a2>
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	e7b9      	b.n	800e63c <_dtoa_r+0x9bc>
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	e7e2      	b.n	800e692 <_dtoa_r+0xa12>
 800e6cc:	9908      	ldr	r1, [sp, #32]
 800e6ce:	2900      	cmp	r1, #0
 800e6d0:	db04      	blt.n	800e6dc <_dtoa_r+0xa5c>
 800e6d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800e6d4:	4301      	orrs	r1, r0
 800e6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e6d8:	4301      	orrs	r1, r0
 800e6da:	d120      	bne.n	800e71e <_dtoa_r+0xa9e>
 800e6dc:	2a00      	cmp	r2, #0
 800e6de:	ddee      	ble.n	800e6be <_dtoa_r+0xa3e>
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	9903      	ldr	r1, [sp, #12]
 800e6e4:	4648      	mov	r0, r9
 800e6e6:	9304      	str	r3, [sp, #16]
 800e6e8:	f7fe fd8e 	bl	800d208 <__lshift>
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	9003      	str	r0, [sp, #12]
 800e6f0:	f7fe fdf6 	bl	800d2e0 <__mcmp>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	9b04      	ldr	r3, [sp, #16]
 800e6f8:	dc02      	bgt.n	800e700 <_dtoa_r+0xa80>
 800e6fa:	d1e0      	bne.n	800e6be <_dtoa_r+0xa3e>
 800e6fc:	07da      	lsls	r2, r3, #31
 800e6fe:	d5de      	bpl.n	800e6be <_dtoa_r+0xa3e>
 800e700:	2b39      	cmp	r3, #57	@ 0x39
 800e702:	d1da      	bne.n	800e6ba <_dtoa_r+0xa3a>
 800e704:	2339      	movs	r3, #57	@ 0x39
 800e706:	f88b 3000 	strb.w	r3, [fp]
 800e70a:	4633      	mov	r3, r6
 800e70c:	461e      	mov	r6, r3
 800e70e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e712:	3b01      	subs	r3, #1
 800e714:	2a39      	cmp	r2, #57	@ 0x39
 800e716:	d04e      	beq.n	800e7b6 <_dtoa_r+0xb36>
 800e718:	3201      	adds	r2, #1
 800e71a:	701a      	strb	r2, [r3, #0]
 800e71c:	e501      	b.n	800e122 <_dtoa_r+0x4a2>
 800e71e:	2a00      	cmp	r2, #0
 800e720:	dd03      	ble.n	800e72a <_dtoa_r+0xaaa>
 800e722:	2b39      	cmp	r3, #57	@ 0x39
 800e724:	d0ee      	beq.n	800e704 <_dtoa_r+0xa84>
 800e726:	3301      	adds	r3, #1
 800e728:	e7c9      	b.n	800e6be <_dtoa_r+0xa3e>
 800e72a:	9a04      	ldr	r2, [sp, #16]
 800e72c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e72e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e732:	428a      	cmp	r2, r1
 800e734:	d028      	beq.n	800e788 <_dtoa_r+0xb08>
 800e736:	2300      	movs	r3, #0
 800e738:	220a      	movs	r2, #10
 800e73a:	9903      	ldr	r1, [sp, #12]
 800e73c:	4648      	mov	r0, r9
 800e73e:	f7fe fb75 	bl	800ce2c <__multadd>
 800e742:	42af      	cmp	r7, r5
 800e744:	9003      	str	r0, [sp, #12]
 800e746:	f04f 0300 	mov.w	r3, #0
 800e74a:	f04f 020a 	mov.w	r2, #10
 800e74e:	4639      	mov	r1, r7
 800e750:	4648      	mov	r0, r9
 800e752:	d107      	bne.n	800e764 <_dtoa_r+0xae4>
 800e754:	f7fe fb6a 	bl	800ce2c <__multadd>
 800e758:	4607      	mov	r7, r0
 800e75a:	4605      	mov	r5, r0
 800e75c:	9b04      	ldr	r3, [sp, #16]
 800e75e:	3301      	adds	r3, #1
 800e760:	9304      	str	r3, [sp, #16]
 800e762:	e777      	b.n	800e654 <_dtoa_r+0x9d4>
 800e764:	f7fe fb62 	bl	800ce2c <__multadd>
 800e768:	4629      	mov	r1, r5
 800e76a:	4607      	mov	r7, r0
 800e76c:	2300      	movs	r3, #0
 800e76e:	220a      	movs	r2, #10
 800e770:	4648      	mov	r0, r9
 800e772:	f7fe fb5b 	bl	800ce2c <__multadd>
 800e776:	4605      	mov	r5, r0
 800e778:	e7f0      	b.n	800e75c <_dtoa_r+0xadc>
 800e77a:	f1bb 0f00 	cmp.w	fp, #0
 800e77e:	bfcc      	ite	gt
 800e780:	465e      	movgt	r6, fp
 800e782:	2601      	movle	r6, #1
 800e784:	2700      	movs	r7, #0
 800e786:	4456      	add	r6, sl
 800e788:	2201      	movs	r2, #1
 800e78a:	9903      	ldr	r1, [sp, #12]
 800e78c:	4648      	mov	r0, r9
 800e78e:	9304      	str	r3, [sp, #16]
 800e790:	f7fe fd3a 	bl	800d208 <__lshift>
 800e794:	4621      	mov	r1, r4
 800e796:	9003      	str	r0, [sp, #12]
 800e798:	f7fe fda2 	bl	800d2e0 <__mcmp>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	dcb4      	bgt.n	800e70a <_dtoa_r+0xa8a>
 800e7a0:	d102      	bne.n	800e7a8 <_dtoa_r+0xb28>
 800e7a2:	9b04      	ldr	r3, [sp, #16]
 800e7a4:	07db      	lsls	r3, r3, #31
 800e7a6:	d4b0      	bmi.n	800e70a <_dtoa_r+0xa8a>
 800e7a8:	4633      	mov	r3, r6
 800e7aa:	461e      	mov	r6, r3
 800e7ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7b0:	2a30      	cmp	r2, #48	@ 0x30
 800e7b2:	d0fa      	beq.n	800e7aa <_dtoa_r+0xb2a>
 800e7b4:	e4b5      	b.n	800e122 <_dtoa_r+0x4a2>
 800e7b6:	459a      	cmp	sl, r3
 800e7b8:	d1a8      	bne.n	800e70c <_dtoa_r+0xa8c>
 800e7ba:	2331      	movs	r3, #49	@ 0x31
 800e7bc:	f108 0801 	add.w	r8, r8, #1
 800e7c0:	f88a 3000 	strb.w	r3, [sl]
 800e7c4:	e4ad      	b.n	800e122 <_dtoa_r+0x4a2>
 800e7c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e7c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e824 <_dtoa_r+0xba4>
 800e7cc:	b11b      	cbz	r3, 800e7d6 <_dtoa_r+0xb56>
 800e7ce:	f10a 0308 	add.w	r3, sl, #8
 800e7d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e7d4:	6013      	str	r3, [r2, #0]
 800e7d6:	4650      	mov	r0, sl
 800e7d8:	b017      	add	sp, #92	@ 0x5c
 800e7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	f77f ae2e 	ble.w	800e442 <_dtoa_r+0x7c2>
 800e7e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7ea:	2001      	movs	r0, #1
 800e7ec:	e64d      	b.n	800e48a <_dtoa_r+0x80a>
 800e7ee:	f1bb 0f00 	cmp.w	fp, #0
 800e7f2:	f77f aed9 	ble.w	800e5a8 <_dtoa_r+0x928>
 800e7f6:	4656      	mov	r6, sl
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	9803      	ldr	r0, [sp, #12]
 800e7fc:	f7ff f9b6 	bl	800db6c <quorem>
 800e800:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e804:	f806 3b01 	strb.w	r3, [r6], #1
 800e808:	eba6 020a 	sub.w	r2, r6, sl
 800e80c:	4593      	cmp	fp, r2
 800e80e:	ddb4      	ble.n	800e77a <_dtoa_r+0xafa>
 800e810:	2300      	movs	r3, #0
 800e812:	220a      	movs	r2, #10
 800e814:	4648      	mov	r0, r9
 800e816:	9903      	ldr	r1, [sp, #12]
 800e818:	f7fe fb08 	bl	800ce2c <__multadd>
 800e81c:	9003      	str	r0, [sp, #12]
 800e81e:	e7eb      	b.n	800e7f8 <_dtoa_r+0xb78>
 800e820:	0800f1c3 	.word	0x0800f1c3
 800e824:	0800f2e0 	.word	0x0800f2e0

0800e828 <malloc>:
 800e828:	4b02      	ldr	r3, [pc, #8]	@ (800e834 <malloc+0xc>)
 800e82a:	4601      	mov	r1, r0
 800e82c:	6818      	ldr	r0, [r3, #0]
 800e82e:	f7fe b9fd 	b.w	800cc2c <_malloc_r>
 800e832:	bf00      	nop
 800e834:	200002f8 	.word	0x200002f8

0800e838 <fiprintf>:
 800e838:	b40e      	push	{r1, r2, r3}
 800e83a:	b503      	push	{r0, r1, lr}
 800e83c:	4601      	mov	r1, r0
 800e83e:	ab03      	add	r3, sp, #12
 800e840:	4805      	ldr	r0, [pc, #20]	@ (800e858 <fiprintf+0x20>)
 800e842:	f853 2b04 	ldr.w	r2, [r3], #4
 800e846:	6800      	ldr	r0, [r0, #0]
 800e848:	9301      	str	r3, [sp, #4]
 800e84a:	f000 f835 	bl	800e8b8 <_vfiprintf_r>
 800e84e:	b002      	add	sp, #8
 800e850:	f85d eb04 	ldr.w	lr, [sp], #4
 800e854:	b003      	add	sp, #12
 800e856:	4770      	bx	lr
 800e858:	200002f8 	.word	0x200002f8

0800e85c <abort>:
 800e85c:	2006      	movs	r0, #6
 800e85e:	b508      	push	{r3, lr}
 800e860:	f000 fb8e 	bl	800ef80 <raise>
 800e864:	2001      	movs	r0, #1
 800e866:	f7f3 fa86 	bl	8001d76 <_exit>

0800e86a <__sfputc_r>:
 800e86a:	6893      	ldr	r3, [r2, #8]
 800e86c:	b410      	push	{r4}
 800e86e:	3b01      	subs	r3, #1
 800e870:	2b00      	cmp	r3, #0
 800e872:	6093      	str	r3, [r2, #8]
 800e874:	da07      	bge.n	800e886 <__sfputc_r+0x1c>
 800e876:	6994      	ldr	r4, [r2, #24]
 800e878:	42a3      	cmp	r3, r4
 800e87a:	db01      	blt.n	800e880 <__sfputc_r+0x16>
 800e87c:	290a      	cmp	r1, #10
 800e87e:	d102      	bne.n	800e886 <__sfputc_r+0x1c>
 800e880:	bc10      	pop	{r4}
 800e882:	f000 bac1 	b.w	800ee08 <__swbuf_r>
 800e886:	6813      	ldr	r3, [r2, #0]
 800e888:	1c58      	adds	r0, r3, #1
 800e88a:	6010      	str	r0, [r2, #0]
 800e88c:	7019      	strb	r1, [r3, #0]
 800e88e:	4608      	mov	r0, r1
 800e890:	bc10      	pop	{r4}
 800e892:	4770      	bx	lr

0800e894 <__sfputs_r>:
 800e894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e896:	4606      	mov	r6, r0
 800e898:	460f      	mov	r7, r1
 800e89a:	4614      	mov	r4, r2
 800e89c:	18d5      	adds	r5, r2, r3
 800e89e:	42ac      	cmp	r4, r5
 800e8a0:	d101      	bne.n	800e8a6 <__sfputs_r+0x12>
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	e007      	b.n	800e8b6 <__sfputs_r+0x22>
 800e8a6:	463a      	mov	r2, r7
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ae:	f7ff ffdc 	bl	800e86a <__sfputc_r>
 800e8b2:	1c43      	adds	r3, r0, #1
 800e8b4:	d1f3      	bne.n	800e89e <__sfputs_r+0xa>
 800e8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8b8 <_vfiprintf_r>:
 800e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8bc:	460d      	mov	r5, r1
 800e8be:	4614      	mov	r4, r2
 800e8c0:	4698      	mov	r8, r3
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	b09d      	sub	sp, #116	@ 0x74
 800e8c6:	b118      	cbz	r0, 800e8d0 <_vfiprintf_r+0x18>
 800e8c8:	6a03      	ldr	r3, [r0, #32]
 800e8ca:	b90b      	cbnz	r3, 800e8d0 <_vfiprintf_r+0x18>
 800e8cc:	f7fd fcee 	bl	800c2ac <__sinit>
 800e8d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8d2:	07d9      	lsls	r1, r3, #31
 800e8d4:	d405      	bmi.n	800e8e2 <_vfiprintf_r+0x2a>
 800e8d6:	89ab      	ldrh	r3, [r5, #12]
 800e8d8:	059a      	lsls	r2, r3, #22
 800e8da:	d402      	bmi.n	800e8e2 <_vfiprintf_r+0x2a>
 800e8dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8de:	f7fd fdea 	bl	800c4b6 <__retarget_lock_acquire_recursive>
 800e8e2:	89ab      	ldrh	r3, [r5, #12]
 800e8e4:	071b      	lsls	r3, r3, #28
 800e8e6:	d501      	bpl.n	800e8ec <_vfiprintf_r+0x34>
 800e8e8:	692b      	ldr	r3, [r5, #16]
 800e8ea:	b99b      	cbnz	r3, 800e914 <_vfiprintf_r+0x5c>
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f000 fac8 	bl	800ee84 <__swsetup_r>
 800e8f4:	b170      	cbz	r0, 800e914 <_vfiprintf_r+0x5c>
 800e8f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8f8:	07dc      	lsls	r4, r3, #31
 800e8fa:	d504      	bpl.n	800e906 <_vfiprintf_r+0x4e>
 800e8fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e900:	b01d      	add	sp, #116	@ 0x74
 800e902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e906:	89ab      	ldrh	r3, [r5, #12]
 800e908:	0598      	lsls	r0, r3, #22
 800e90a:	d4f7      	bmi.n	800e8fc <_vfiprintf_r+0x44>
 800e90c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e90e:	f7fd fdd3 	bl	800c4b8 <__retarget_lock_release_recursive>
 800e912:	e7f3      	b.n	800e8fc <_vfiprintf_r+0x44>
 800e914:	2300      	movs	r3, #0
 800e916:	9309      	str	r3, [sp, #36]	@ 0x24
 800e918:	2320      	movs	r3, #32
 800e91a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e91e:	2330      	movs	r3, #48	@ 0x30
 800e920:	f04f 0901 	mov.w	r9, #1
 800e924:	f8cd 800c 	str.w	r8, [sp, #12]
 800e928:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ead4 <_vfiprintf_r+0x21c>
 800e92c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e930:	4623      	mov	r3, r4
 800e932:	469a      	mov	sl, r3
 800e934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e938:	b10a      	cbz	r2, 800e93e <_vfiprintf_r+0x86>
 800e93a:	2a25      	cmp	r2, #37	@ 0x25
 800e93c:	d1f9      	bne.n	800e932 <_vfiprintf_r+0x7a>
 800e93e:	ebba 0b04 	subs.w	fp, sl, r4
 800e942:	d00b      	beq.n	800e95c <_vfiprintf_r+0xa4>
 800e944:	465b      	mov	r3, fp
 800e946:	4622      	mov	r2, r4
 800e948:	4629      	mov	r1, r5
 800e94a:	4630      	mov	r0, r6
 800e94c:	f7ff ffa2 	bl	800e894 <__sfputs_r>
 800e950:	3001      	adds	r0, #1
 800e952:	f000 80a7 	beq.w	800eaa4 <_vfiprintf_r+0x1ec>
 800e956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e958:	445a      	add	r2, fp
 800e95a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e95c:	f89a 3000 	ldrb.w	r3, [sl]
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 809f 	beq.w	800eaa4 <_vfiprintf_r+0x1ec>
 800e966:	2300      	movs	r3, #0
 800e968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e970:	f10a 0a01 	add.w	sl, sl, #1
 800e974:	9304      	str	r3, [sp, #16]
 800e976:	9307      	str	r3, [sp, #28]
 800e978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e97c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e97e:	4654      	mov	r4, sl
 800e980:	2205      	movs	r2, #5
 800e982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e986:	4853      	ldr	r0, [pc, #332]	@ (800ead4 <_vfiprintf_r+0x21c>)
 800e988:	f000 fb16 	bl	800efb8 <memchr>
 800e98c:	9a04      	ldr	r2, [sp, #16]
 800e98e:	b9d8      	cbnz	r0, 800e9c8 <_vfiprintf_r+0x110>
 800e990:	06d1      	lsls	r1, r2, #27
 800e992:	bf44      	itt	mi
 800e994:	2320      	movmi	r3, #32
 800e996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e99a:	0713      	lsls	r3, r2, #28
 800e99c:	bf44      	itt	mi
 800e99e:	232b      	movmi	r3, #43	@ 0x2b
 800e9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9aa:	d015      	beq.n	800e9d8 <_vfiprintf_r+0x120>
 800e9ac:	4654      	mov	r4, sl
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	f04f 0c0a 	mov.w	ip, #10
 800e9b4:	9a07      	ldr	r2, [sp, #28]
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9bc:	3b30      	subs	r3, #48	@ 0x30
 800e9be:	2b09      	cmp	r3, #9
 800e9c0:	d94b      	bls.n	800ea5a <_vfiprintf_r+0x1a2>
 800e9c2:	b1b0      	cbz	r0, 800e9f2 <_vfiprintf_r+0x13a>
 800e9c4:	9207      	str	r2, [sp, #28]
 800e9c6:	e014      	b.n	800e9f2 <_vfiprintf_r+0x13a>
 800e9c8:	eba0 0308 	sub.w	r3, r0, r8
 800e9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	46a2      	mov	sl, r4
 800e9d4:	9304      	str	r3, [sp, #16]
 800e9d6:	e7d2      	b.n	800e97e <_vfiprintf_r+0xc6>
 800e9d8:	9b03      	ldr	r3, [sp, #12]
 800e9da:	1d19      	adds	r1, r3, #4
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	9103      	str	r1, [sp, #12]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bfbb      	ittet	lt
 800e9e4:	425b      	neglt	r3, r3
 800e9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9ea:	9307      	strge	r3, [sp, #28]
 800e9ec:	9307      	strlt	r3, [sp, #28]
 800e9ee:	bfb8      	it	lt
 800e9f0:	9204      	strlt	r2, [sp, #16]
 800e9f2:	7823      	ldrb	r3, [r4, #0]
 800e9f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9f6:	d10a      	bne.n	800ea0e <_vfiprintf_r+0x156>
 800e9f8:	7863      	ldrb	r3, [r4, #1]
 800e9fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9fc:	d132      	bne.n	800ea64 <_vfiprintf_r+0x1ac>
 800e9fe:	9b03      	ldr	r3, [sp, #12]
 800ea00:	3402      	adds	r4, #2
 800ea02:	1d1a      	adds	r2, r3, #4
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	9203      	str	r2, [sp, #12]
 800ea08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea0c:	9305      	str	r3, [sp, #20]
 800ea0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ead8 <_vfiprintf_r+0x220>
 800ea12:	2203      	movs	r2, #3
 800ea14:	4650      	mov	r0, sl
 800ea16:	7821      	ldrb	r1, [r4, #0]
 800ea18:	f000 face 	bl	800efb8 <memchr>
 800ea1c:	b138      	cbz	r0, 800ea2e <_vfiprintf_r+0x176>
 800ea1e:	2240      	movs	r2, #64	@ 0x40
 800ea20:	9b04      	ldr	r3, [sp, #16]
 800ea22:	eba0 000a 	sub.w	r0, r0, sl
 800ea26:	4082      	lsls	r2, r0
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	3401      	adds	r4, #1
 800ea2c:	9304      	str	r3, [sp, #16]
 800ea2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea32:	2206      	movs	r2, #6
 800ea34:	4829      	ldr	r0, [pc, #164]	@ (800eadc <_vfiprintf_r+0x224>)
 800ea36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea3a:	f000 fabd 	bl	800efb8 <memchr>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d03f      	beq.n	800eac2 <_vfiprintf_r+0x20a>
 800ea42:	4b27      	ldr	r3, [pc, #156]	@ (800eae0 <_vfiprintf_r+0x228>)
 800ea44:	bb1b      	cbnz	r3, 800ea8e <_vfiprintf_r+0x1d6>
 800ea46:	9b03      	ldr	r3, [sp, #12]
 800ea48:	3307      	adds	r3, #7
 800ea4a:	f023 0307 	bic.w	r3, r3, #7
 800ea4e:	3308      	adds	r3, #8
 800ea50:	9303      	str	r3, [sp, #12]
 800ea52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea54:	443b      	add	r3, r7
 800ea56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea58:	e76a      	b.n	800e930 <_vfiprintf_r+0x78>
 800ea5a:	460c      	mov	r4, r1
 800ea5c:	2001      	movs	r0, #1
 800ea5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea62:	e7a8      	b.n	800e9b6 <_vfiprintf_r+0xfe>
 800ea64:	2300      	movs	r3, #0
 800ea66:	f04f 0c0a 	mov.w	ip, #10
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	3401      	adds	r4, #1
 800ea6e:	9305      	str	r3, [sp, #20]
 800ea70:	4620      	mov	r0, r4
 800ea72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea76:	3a30      	subs	r2, #48	@ 0x30
 800ea78:	2a09      	cmp	r2, #9
 800ea7a:	d903      	bls.n	800ea84 <_vfiprintf_r+0x1cc>
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d0c6      	beq.n	800ea0e <_vfiprintf_r+0x156>
 800ea80:	9105      	str	r1, [sp, #20]
 800ea82:	e7c4      	b.n	800ea0e <_vfiprintf_r+0x156>
 800ea84:	4604      	mov	r4, r0
 800ea86:	2301      	movs	r3, #1
 800ea88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea8c:	e7f0      	b.n	800ea70 <_vfiprintf_r+0x1b8>
 800ea8e:	ab03      	add	r3, sp, #12
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	462a      	mov	r2, r5
 800ea94:	4630      	mov	r0, r6
 800ea96:	4b13      	ldr	r3, [pc, #76]	@ (800eae4 <_vfiprintf_r+0x22c>)
 800ea98:	a904      	add	r1, sp, #16
 800ea9a:	f3af 8000 	nop.w
 800ea9e:	4607      	mov	r7, r0
 800eaa0:	1c78      	adds	r0, r7, #1
 800eaa2:	d1d6      	bne.n	800ea52 <_vfiprintf_r+0x19a>
 800eaa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eaa6:	07d9      	lsls	r1, r3, #31
 800eaa8:	d405      	bmi.n	800eab6 <_vfiprintf_r+0x1fe>
 800eaaa:	89ab      	ldrh	r3, [r5, #12]
 800eaac:	059a      	lsls	r2, r3, #22
 800eaae:	d402      	bmi.n	800eab6 <_vfiprintf_r+0x1fe>
 800eab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eab2:	f7fd fd01 	bl	800c4b8 <__retarget_lock_release_recursive>
 800eab6:	89ab      	ldrh	r3, [r5, #12]
 800eab8:	065b      	lsls	r3, r3, #25
 800eaba:	f53f af1f 	bmi.w	800e8fc <_vfiprintf_r+0x44>
 800eabe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eac0:	e71e      	b.n	800e900 <_vfiprintf_r+0x48>
 800eac2:	ab03      	add	r3, sp, #12
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	462a      	mov	r2, r5
 800eac8:	4630      	mov	r0, r6
 800eaca:	4b06      	ldr	r3, [pc, #24]	@ (800eae4 <_vfiprintf_r+0x22c>)
 800eacc:	a904      	add	r1, sp, #16
 800eace:	f000 f87d 	bl	800ebcc <_printf_i>
 800ead2:	e7e4      	b.n	800ea9e <_vfiprintf_r+0x1e6>
 800ead4:	0800f347 	.word	0x0800f347
 800ead8:	0800f34d 	.word	0x0800f34d
 800eadc:	0800f351 	.word	0x0800f351
 800eae0:	00000000 	.word	0x00000000
 800eae4:	0800e895 	.word	0x0800e895

0800eae8 <_printf_common>:
 800eae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaec:	4616      	mov	r6, r2
 800eaee:	4698      	mov	r8, r3
 800eaf0:	688a      	ldr	r2, [r1, #8]
 800eaf2:	690b      	ldr	r3, [r1, #16]
 800eaf4:	4607      	mov	r7, r0
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	bfb8      	it	lt
 800eafa:	4613      	movlt	r3, r2
 800eafc:	6033      	str	r3, [r6, #0]
 800eafe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb02:	460c      	mov	r4, r1
 800eb04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb08:	b10a      	cbz	r2, 800eb0e <_printf_common+0x26>
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	6033      	str	r3, [r6, #0]
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	0699      	lsls	r1, r3, #26
 800eb12:	bf42      	ittt	mi
 800eb14:	6833      	ldrmi	r3, [r6, #0]
 800eb16:	3302      	addmi	r3, #2
 800eb18:	6033      	strmi	r3, [r6, #0]
 800eb1a:	6825      	ldr	r5, [r4, #0]
 800eb1c:	f015 0506 	ands.w	r5, r5, #6
 800eb20:	d106      	bne.n	800eb30 <_printf_common+0x48>
 800eb22:	f104 0a19 	add.w	sl, r4, #25
 800eb26:	68e3      	ldr	r3, [r4, #12]
 800eb28:	6832      	ldr	r2, [r6, #0]
 800eb2a:	1a9b      	subs	r3, r3, r2
 800eb2c:	42ab      	cmp	r3, r5
 800eb2e:	dc2b      	bgt.n	800eb88 <_printf_common+0xa0>
 800eb30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb34:	6822      	ldr	r2, [r4, #0]
 800eb36:	3b00      	subs	r3, #0
 800eb38:	bf18      	it	ne
 800eb3a:	2301      	movne	r3, #1
 800eb3c:	0692      	lsls	r2, r2, #26
 800eb3e:	d430      	bmi.n	800eba2 <_printf_common+0xba>
 800eb40:	4641      	mov	r1, r8
 800eb42:	4638      	mov	r0, r7
 800eb44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb48:	47c8      	blx	r9
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	d023      	beq.n	800eb96 <_printf_common+0xae>
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	6922      	ldr	r2, [r4, #16]
 800eb52:	f003 0306 	and.w	r3, r3, #6
 800eb56:	2b04      	cmp	r3, #4
 800eb58:	bf14      	ite	ne
 800eb5a:	2500      	movne	r5, #0
 800eb5c:	6833      	ldreq	r3, [r6, #0]
 800eb5e:	f04f 0600 	mov.w	r6, #0
 800eb62:	bf08      	it	eq
 800eb64:	68e5      	ldreq	r5, [r4, #12]
 800eb66:	f104 041a 	add.w	r4, r4, #26
 800eb6a:	bf08      	it	eq
 800eb6c:	1aed      	subeq	r5, r5, r3
 800eb6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800eb72:	bf08      	it	eq
 800eb74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	bfc4      	itt	gt
 800eb7c:	1a9b      	subgt	r3, r3, r2
 800eb7e:	18ed      	addgt	r5, r5, r3
 800eb80:	42b5      	cmp	r5, r6
 800eb82:	d11a      	bne.n	800ebba <_printf_common+0xd2>
 800eb84:	2000      	movs	r0, #0
 800eb86:	e008      	b.n	800eb9a <_printf_common+0xb2>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	4652      	mov	r2, sl
 800eb8c:	4641      	mov	r1, r8
 800eb8e:	4638      	mov	r0, r7
 800eb90:	47c8      	blx	r9
 800eb92:	3001      	adds	r0, #1
 800eb94:	d103      	bne.n	800eb9e <_printf_common+0xb6>
 800eb96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9e:	3501      	adds	r5, #1
 800eba0:	e7c1      	b.n	800eb26 <_printf_common+0x3e>
 800eba2:	2030      	movs	r0, #48	@ 0x30
 800eba4:	18e1      	adds	r1, r4, r3
 800eba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebb0:	4422      	add	r2, r4
 800ebb2:	3302      	adds	r3, #2
 800ebb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebb8:	e7c2      	b.n	800eb40 <_printf_common+0x58>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	4622      	mov	r2, r4
 800ebbe:	4641      	mov	r1, r8
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	47c8      	blx	r9
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	d0e6      	beq.n	800eb96 <_printf_common+0xae>
 800ebc8:	3601      	adds	r6, #1
 800ebca:	e7d9      	b.n	800eb80 <_printf_common+0x98>

0800ebcc <_printf_i>:
 800ebcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd0:	7e0f      	ldrb	r7, [r1, #24]
 800ebd2:	4691      	mov	r9, r2
 800ebd4:	2f78      	cmp	r7, #120	@ 0x78
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	460c      	mov	r4, r1
 800ebda:	469a      	mov	sl, r3
 800ebdc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebe2:	d807      	bhi.n	800ebf4 <_printf_i+0x28>
 800ebe4:	2f62      	cmp	r7, #98	@ 0x62
 800ebe6:	d80a      	bhi.n	800ebfe <_printf_i+0x32>
 800ebe8:	2f00      	cmp	r7, #0
 800ebea:	f000 80d1 	beq.w	800ed90 <_printf_i+0x1c4>
 800ebee:	2f58      	cmp	r7, #88	@ 0x58
 800ebf0:	f000 80b8 	beq.w	800ed64 <_printf_i+0x198>
 800ebf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ebfc:	e03a      	b.n	800ec74 <_printf_i+0xa8>
 800ebfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec02:	2b15      	cmp	r3, #21
 800ec04:	d8f6      	bhi.n	800ebf4 <_printf_i+0x28>
 800ec06:	a101      	add	r1, pc, #4	@ (adr r1, 800ec0c <_printf_i+0x40>)
 800ec08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec0c:	0800ec65 	.word	0x0800ec65
 800ec10:	0800ec79 	.word	0x0800ec79
 800ec14:	0800ebf5 	.word	0x0800ebf5
 800ec18:	0800ebf5 	.word	0x0800ebf5
 800ec1c:	0800ebf5 	.word	0x0800ebf5
 800ec20:	0800ebf5 	.word	0x0800ebf5
 800ec24:	0800ec79 	.word	0x0800ec79
 800ec28:	0800ebf5 	.word	0x0800ebf5
 800ec2c:	0800ebf5 	.word	0x0800ebf5
 800ec30:	0800ebf5 	.word	0x0800ebf5
 800ec34:	0800ebf5 	.word	0x0800ebf5
 800ec38:	0800ed77 	.word	0x0800ed77
 800ec3c:	0800eca3 	.word	0x0800eca3
 800ec40:	0800ed31 	.word	0x0800ed31
 800ec44:	0800ebf5 	.word	0x0800ebf5
 800ec48:	0800ebf5 	.word	0x0800ebf5
 800ec4c:	0800ed99 	.word	0x0800ed99
 800ec50:	0800ebf5 	.word	0x0800ebf5
 800ec54:	0800eca3 	.word	0x0800eca3
 800ec58:	0800ebf5 	.word	0x0800ebf5
 800ec5c:	0800ebf5 	.word	0x0800ebf5
 800ec60:	0800ed39 	.word	0x0800ed39
 800ec64:	6833      	ldr	r3, [r6, #0]
 800ec66:	1d1a      	adds	r2, r3, #4
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	6032      	str	r2, [r6, #0]
 800ec6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec74:	2301      	movs	r3, #1
 800ec76:	e09c      	b.n	800edb2 <_printf_i+0x1e6>
 800ec78:	6833      	ldr	r3, [r6, #0]
 800ec7a:	6820      	ldr	r0, [r4, #0]
 800ec7c:	1d19      	adds	r1, r3, #4
 800ec7e:	6031      	str	r1, [r6, #0]
 800ec80:	0606      	lsls	r6, r0, #24
 800ec82:	d501      	bpl.n	800ec88 <_printf_i+0xbc>
 800ec84:	681d      	ldr	r5, [r3, #0]
 800ec86:	e003      	b.n	800ec90 <_printf_i+0xc4>
 800ec88:	0645      	lsls	r5, r0, #25
 800ec8a:	d5fb      	bpl.n	800ec84 <_printf_i+0xb8>
 800ec8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec90:	2d00      	cmp	r5, #0
 800ec92:	da03      	bge.n	800ec9c <_printf_i+0xd0>
 800ec94:	232d      	movs	r3, #45	@ 0x2d
 800ec96:	426d      	negs	r5, r5
 800ec98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec9c:	230a      	movs	r3, #10
 800ec9e:	4858      	ldr	r0, [pc, #352]	@ (800ee00 <_printf_i+0x234>)
 800eca0:	e011      	b.n	800ecc6 <_printf_i+0xfa>
 800eca2:	6821      	ldr	r1, [r4, #0]
 800eca4:	6833      	ldr	r3, [r6, #0]
 800eca6:	0608      	lsls	r0, r1, #24
 800eca8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecac:	d402      	bmi.n	800ecb4 <_printf_i+0xe8>
 800ecae:	0649      	lsls	r1, r1, #25
 800ecb0:	bf48      	it	mi
 800ecb2:	b2ad      	uxthmi	r5, r5
 800ecb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecb6:	6033      	str	r3, [r6, #0]
 800ecb8:	bf14      	ite	ne
 800ecba:	230a      	movne	r3, #10
 800ecbc:	2308      	moveq	r3, #8
 800ecbe:	4850      	ldr	r0, [pc, #320]	@ (800ee00 <_printf_i+0x234>)
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ecc6:	6866      	ldr	r6, [r4, #4]
 800ecc8:	2e00      	cmp	r6, #0
 800ecca:	60a6      	str	r6, [r4, #8]
 800eccc:	db05      	blt.n	800ecda <_printf_i+0x10e>
 800ecce:	6821      	ldr	r1, [r4, #0]
 800ecd0:	432e      	orrs	r6, r5
 800ecd2:	f021 0104 	bic.w	r1, r1, #4
 800ecd6:	6021      	str	r1, [r4, #0]
 800ecd8:	d04b      	beq.n	800ed72 <_printf_i+0x1a6>
 800ecda:	4616      	mov	r6, r2
 800ecdc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ece0:	fb03 5711 	mls	r7, r3, r1, r5
 800ece4:	5dc7      	ldrb	r7, [r0, r7]
 800ece6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecea:	462f      	mov	r7, r5
 800ecec:	42bb      	cmp	r3, r7
 800ecee:	460d      	mov	r5, r1
 800ecf0:	d9f4      	bls.n	800ecdc <_printf_i+0x110>
 800ecf2:	2b08      	cmp	r3, #8
 800ecf4:	d10b      	bne.n	800ed0e <_printf_i+0x142>
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	07df      	lsls	r7, r3, #31
 800ecfa:	d508      	bpl.n	800ed0e <_printf_i+0x142>
 800ecfc:	6923      	ldr	r3, [r4, #16]
 800ecfe:	6861      	ldr	r1, [r4, #4]
 800ed00:	4299      	cmp	r1, r3
 800ed02:	bfde      	ittt	le
 800ed04:	2330      	movle	r3, #48	@ 0x30
 800ed06:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed0a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ed0e:	1b92      	subs	r2, r2, r6
 800ed10:	6122      	str	r2, [r4, #16]
 800ed12:	464b      	mov	r3, r9
 800ed14:	4621      	mov	r1, r4
 800ed16:	4640      	mov	r0, r8
 800ed18:	f8cd a000 	str.w	sl, [sp]
 800ed1c:	aa03      	add	r2, sp, #12
 800ed1e:	f7ff fee3 	bl	800eae8 <_printf_common>
 800ed22:	3001      	adds	r0, #1
 800ed24:	d14a      	bne.n	800edbc <_printf_i+0x1f0>
 800ed26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed2a:	b004      	add	sp, #16
 800ed2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	f043 0320 	orr.w	r3, r3, #32
 800ed36:	6023      	str	r3, [r4, #0]
 800ed38:	2778      	movs	r7, #120	@ 0x78
 800ed3a:	4832      	ldr	r0, [pc, #200]	@ (800ee04 <_printf_i+0x238>)
 800ed3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed40:	6823      	ldr	r3, [r4, #0]
 800ed42:	6831      	ldr	r1, [r6, #0]
 800ed44:	061f      	lsls	r7, r3, #24
 800ed46:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed4a:	d402      	bmi.n	800ed52 <_printf_i+0x186>
 800ed4c:	065f      	lsls	r7, r3, #25
 800ed4e:	bf48      	it	mi
 800ed50:	b2ad      	uxthmi	r5, r5
 800ed52:	6031      	str	r1, [r6, #0]
 800ed54:	07d9      	lsls	r1, r3, #31
 800ed56:	bf44      	itt	mi
 800ed58:	f043 0320 	orrmi.w	r3, r3, #32
 800ed5c:	6023      	strmi	r3, [r4, #0]
 800ed5e:	b11d      	cbz	r5, 800ed68 <_printf_i+0x19c>
 800ed60:	2310      	movs	r3, #16
 800ed62:	e7ad      	b.n	800ecc0 <_printf_i+0xf4>
 800ed64:	4826      	ldr	r0, [pc, #152]	@ (800ee00 <_printf_i+0x234>)
 800ed66:	e7e9      	b.n	800ed3c <_printf_i+0x170>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	f023 0320 	bic.w	r3, r3, #32
 800ed6e:	6023      	str	r3, [r4, #0]
 800ed70:	e7f6      	b.n	800ed60 <_printf_i+0x194>
 800ed72:	4616      	mov	r6, r2
 800ed74:	e7bd      	b.n	800ecf2 <_printf_i+0x126>
 800ed76:	6833      	ldr	r3, [r6, #0]
 800ed78:	6825      	ldr	r5, [r4, #0]
 800ed7a:	1d18      	adds	r0, r3, #4
 800ed7c:	6961      	ldr	r1, [r4, #20]
 800ed7e:	6030      	str	r0, [r6, #0]
 800ed80:	062e      	lsls	r6, r5, #24
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	d501      	bpl.n	800ed8a <_printf_i+0x1be>
 800ed86:	6019      	str	r1, [r3, #0]
 800ed88:	e002      	b.n	800ed90 <_printf_i+0x1c4>
 800ed8a:	0668      	lsls	r0, r5, #25
 800ed8c:	d5fb      	bpl.n	800ed86 <_printf_i+0x1ba>
 800ed8e:	8019      	strh	r1, [r3, #0]
 800ed90:	2300      	movs	r3, #0
 800ed92:	4616      	mov	r6, r2
 800ed94:	6123      	str	r3, [r4, #16]
 800ed96:	e7bc      	b.n	800ed12 <_printf_i+0x146>
 800ed98:	6833      	ldr	r3, [r6, #0]
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	1d1a      	adds	r2, r3, #4
 800ed9e:	6032      	str	r2, [r6, #0]
 800eda0:	681e      	ldr	r6, [r3, #0]
 800eda2:	6862      	ldr	r2, [r4, #4]
 800eda4:	4630      	mov	r0, r6
 800eda6:	f000 f907 	bl	800efb8 <memchr>
 800edaa:	b108      	cbz	r0, 800edb0 <_printf_i+0x1e4>
 800edac:	1b80      	subs	r0, r0, r6
 800edae:	6060      	str	r0, [r4, #4]
 800edb0:	6863      	ldr	r3, [r4, #4]
 800edb2:	6123      	str	r3, [r4, #16]
 800edb4:	2300      	movs	r3, #0
 800edb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edba:	e7aa      	b.n	800ed12 <_printf_i+0x146>
 800edbc:	4632      	mov	r2, r6
 800edbe:	4649      	mov	r1, r9
 800edc0:	4640      	mov	r0, r8
 800edc2:	6923      	ldr	r3, [r4, #16]
 800edc4:	47d0      	blx	sl
 800edc6:	3001      	adds	r0, #1
 800edc8:	d0ad      	beq.n	800ed26 <_printf_i+0x15a>
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	079b      	lsls	r3, r3, #30
 800edce:	d413      	bmi.n	800edf8 <_printf_i+0x22c>
 800edd0:	68e0      	ldr	r0, [r4, #12]
 800edd2:	9b03      	ldr	r3, [sp, #12]
 800edd4:	4298      	cmp	r0, r3
 800edd6:	bfb8      	it	lt
 800edd8:	4618      	movlt	r0, r3
 800edda:	e7a6      	b.n	800ed2a <_printf_i+0x15e>
 800eddc:	2301      	movs	r3, #1
 800edde:	4632      	mov	r2, r6
 800ede0:	4649      	mov	r1, r9
 800ede2:	4640      	mov	r0, r8
 800ede4:	47d0      	blx	sl
 800ede6:	3001      	adds	r0, #1
 800ede8:	d09d      	beq.n	800ed26 <_printf_i+0x15a>
 800edea:	3501      	adds	r5, #1
 800edec:	68e3      	ldr	r3, [r4, #12]
 800edee:	9903      	ldr	r1, [sp, #12]
 800edf0:	1a5b      	subs	r3, r3, r1
 800edf2:	42ab      	cmp	r3, r5
 800edf4:	dcf2      	bgt.n	800eddc <_printf_i+0x210>
 800edf6:	e7eb      	b.n	800edd0 <_printf_i+0x204>
 800edf8:	2500      	movs	r5, #0
 800edfa:	f104 0619 	add.w	r6, r4, #25
 800edfe:	e7f5      	b.n	800edec <_printf_i+0x220>
 800ee00:	0800f358 	.word	0x0800f358
 800ee04:	0800f369 	.word	0x0800f369

0800ee08 <__swbuf_r>:
 800ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0a:	460e      	mov	r6, r1
 800ee0c:	4614      	mov	r4, r2
 800ee0e:	4605      	mov	r5, r0
 800ee10:	b118      	cbz	r0, 800ee1a <__swbuf_r+0x12>
 800ee12:	6a03      	ldr	r3, [r0, #32]
 800ee14:	b90b      	cbnz	r3, 800ee1a <__swbuf_r+0x12>
 800ee16:	f7fd fa49 	bl	800c2ac <__sinit>
 800ee1a:	69a3      	ldr	r3, [r4, #24]
 800ee1c:	60a3      	str	r3, [r4, #8]
 800ee1e:	89a3      	ldrh	r3, [r4, #12]
 800ee20:	071a      	lsls	r2, r3, #28
 800ee22:	d501      	bpl.n	800ee28 <__swbuf_r+0x20>
 800ee24:	6923      	ldr	r3, [r4, #16]
 800ee26:	b943      	cbnz	r3, 800ee3a <__swbuf_r+0x32>
 800ee28:	4621      	mov	r1, r4
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	f000 f82a 	bl	800ee84 <__swsetup_r>
 800ee30:	b118      	cbz	r0, 800ee3a <__swbuf_r+0x32>
 800ee32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ee36:	4638      	mov	r0, r7
 800ee38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	6922      	ldr	r2, [r4, #16]
 800ee3e:	b2f6      	uxtb	r6, r6
 800ee40:	1a98      	subs	r0, r3, r2
 800ee42:	6963      	ldr	r3, [r4, #20]
 800ee44:	4637      	mov	r7, r6
 800ee46:	4283      	cmp	r3, r0
 800ee48:	dc05      	bgt.n	800ee56 <__swbuf_r+0x4e>
 800ee4a:	4621      	mov	r1, r4
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f7fe fe1b 	bl	800da88 <_fflush_r>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d1ed      	bne.n	800ee32 <__swbuf_r+0x2a>
 800ee56:	68a3      	ldr	r3, [r4, #8]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	60a3      	str	r3, [r4, #8]
 800ee5c:	6823      	ldr	r3, [r4, #0]
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	6022      	str	r2, [r4, #0]
 800ee62:	701e      	strb	r6, [r3, #0]
 800ee64:	6962      	ldr	r2, [r4, #20]
 800ee66:	1c43      	adds	r3, r0, #1
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d004      	beq.n	800ee76 <__swbuf_r+0x6e>
 800ee6c:	89a3      	ldrh	r3, [r4, #12]
 800ee6e:	07db      	lsls	r3, r3, #31
 800ee70:	d5e1      	bpl.n	800ee36 <__swbuf_r+0x2e>
 800ee72:	2e0a      	cmp	r6, #10
 800ee74:	d1df      	bne.n	800ee36 <__swbuf_r+0x2e>
 800ee76:	4621      	mov	r1, r4
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f7fe fe05 	bl	800da88 <_fflush_r>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d0d9      	beq.n	800ee36 <__swbuf_r+0x2e>
 800ee82:	e7d6      	b.n	800ee32 <__swbuf_r+0x2a>

0800ee84 <__swsetup_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4b29      	ldr	r3, [pc, #164]	@ (800ef2c <__swsetup_r+0xa8>)
 800ee88:	4605      	mov	r5, r0
 800ee8a:	6818      	ldr	r0, [r3, #0]
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	b118      	cbz	r0, 800ee98 <__swsetup_r+0x14>
 800ee90:	6a03      	ldr	r3, [r0, #32]
 800ee92:	b90b      	cbnz	r3, 800ee98 <__swsetup_r+0x14>
 800ee94:	f7fd fa0a 	bl	800c2ac <__sinit>
 800ee98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee9c:	0719      	lsls	r1, r3, #28
 800ee9e:	d422      	bmi.n	800eee6 <__swsetup_r+0x62>
 800eea0:	06da      	lsls	r2, r3, #27
 800eea2:	d407      	bmi.n	800eeb4 <__swsetup_r+0x30>
 800eea4:	2209      	movs	r2, #9
 800eea6:	602a      	str	r2, [r5, #0]
 800eea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eeb0:	81a3      	strh	r3, [r4, #12]
 800eeb2:	e033      	b.n	800ef1c <__swsetup_r+0x98>
 800eeb4:	0758      	lsls	r0, r3, #29
 800eeb6:	d512      	bpl.n	800eede <__swsetup_r+0x5a>
 800eeb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eeba:	b141      	cbz	r1, 800eece <__swsetup_r+0x4a>
 800eebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eec0:	4299      	cmp	r1, r3
 800eec2:	d002      	beq.n	800eeca <__swsetup_r+0x46>
 800eec4:	4628      	mov	r0, r5
 800eec6:	f7fd fb0d 	bl	800c4e4 <_free_r>
 800eeca:	2300      	movs	r3, #0
 800eecc:	6363      	str	r3, [r4, #52]	@ 0x34
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eed4:	81a3      	strh	r3, [r4, #12]
 800eed6:	2300      	movs	r3, #0
 800eed8:	6063      	str	r3, [r4, #4]
 800eeda:	6923      	ldr	r3, [r4, #16]
 800eedc:	6023      	str	r3, [r4, #0]
 800eede:	89a3      	ldrh	r3, [r4, #12]
 800eee0:	f043 0308 	orr.w	r3, r3, #8
 800eee4:	81a3      	strh	r3, [r4, #12]
 800eee6:	6923      	ldr	r3, [r4, #16]
 800eee8:	b94b      	cbnz	r3, 800eefe <__swsetup_r+0x7a>
 800eeea:	89a3      	ldrh	r3, [r4, #12]
 800eeec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eef4:	d003      	beq.n	800eefe <__swsetup_r+0x7a>
 800eef6:	4621      	mov	r1, r4
 800eef8:	4628      	mov	r0, r5
 800eefa:	f000 f890 	bl	800f01e <__smakebuf_r>
 800eefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef02:	f013 0201 	ands.w	r2, r3, #1
 800ef06:	d00a      	beq.n	800ef1e <__swsetup_r+0x9a>
 800ef08:	2200      	movs	r2, #0
 800ef0a:	60a2      	str	r2, [r4, #8]
 800ef0c:	6962      	ldr	r2, [r4, #20]
 800ef0e:	4252      	negs	r2, r2
 800ef10:	61a2      	str	r2, [r4, #24]
 800ef12:	6922      	ldr	r2, [r4, #16]
 800ef14:	b942      	cbnz	r2, 800ef28 <__swsetup_r+0xa4>
 800ef16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef1a:	d1c5      	bne.n	800eea8 <__swsetup_r+0x24>
 800ef1c:	bd38      	pop	{r3, r4, r5, pc}
 800ef1e:	0799      	lsls	r1, r3, #30
 800ef20:	bf58      	it	pl
 800ef22:	6962      	ldrpl	r2, [r4, #20]
 800ef24:	60a2      	str	r2, [r4, #8]
 800ef26:	e7f4      	b.n	800ef12 <__swsetup_r+0x8e>
 800ef28:	2000      	movs	r0, #0
 800ef2a:	e7f7      	b.n	800ef1c <__swsetup_r+0x98>
 800ef2c:	200002f8 	.word	0x200002f8

0800ef30 <_raise_r>:
 800ef30:	291f      	cmp	r1, #31
 800ef32:	b538      	push	{r3, r4, r5, lr}
 800ef34:	4605      	mov	r5, r0
 800ef36:	460c      	mov	r4, r1
 800ef38:	d904      	bls.n	800ef44 <_raise_r+0x14>
 800ef3a:	2316      	movs	r3, #22
 800ef3c:	6003      	str	r3, [r0, #0]
 800ef3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef42:	bd38      	pop	{r3, r4, r5, pc}
 800ef44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef46:	b112      	cbz	r2, 800ef4e <_raise_r+0x1e>
 800ef48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef4c:	b94b      	cbnz	r3, 800ef62 <_raise_r+0x32>
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f000 f830 	bl	800efb4 <_getpid_r>
 800ef54:	4622      	mov	r2, r4
 800ef56:	4601      	mov	r1, r0
 800ef58:	4628      	mov	r0, r5
 800ef5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef5e:	f000 b817 	b.w	800ef90 <_kill_r>
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d00a      	beq.n	800ef7c <_raise_r+0x4c>
 800ef66:	1c59      	adds	r1, r3, #1
 800ef68:	d103      	bne.n	800ef72 <_raise_r+0x42>
 800ef6a:	2316      	movs	r3, #22
 800ef6c:	6003      	str	r3, [r0, #0]
 800ef6e:	2001      	movs	r0, #1
 800ef70:	e7e7      	b.n	800ef42 <_raise_r+0x12>
 800ef72:	2100      	movs	r1, #0
 800ef74:	4620      	mov	r0, r4
 800ef76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ef7a:	4798      	blx	r3
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	e7e0      	b.n	800ef42 <_raise_r+0x12>

0800ef80 <raise>:
 800ef80:	4b02      	ldr	r3, [pc, #8]	@ (800ef8c <raise+0xc>)
 800ef82:	4601      	mov	r1, r0
 800ef84:	6818      	ldr	r0, [r3, #0]
 800ef86:	f7ff bfd3 	b.w	800ef30 <_raise_r>
 800ef8a:	bf00      	nop
 800ef8c:	200002f8 	.word	0x200002f8

0800ef90 <_kill_r>:
 800ef90:	b538      	push	{r3, r4, r5, lr}
 800ef92:	2300      	movs	r3, #0
 800ef94:	4d06      	ldr	r5, [pc, #24]	@ (800efb0 <_kill_r+0x20>)
 800ef96:	4604      	mov	r4, r0
 800ef98:	4608      	mov	r0, r1
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	602b      	str	r3, [r5, #0]
 800ef9e:	f7f2 feda 	bl	8001d56 <_kill>
 800efa2:	1c43      	adds	r3, r0, #1
 800efa4:	d102      	bne.n	800efac <_kill_r+0x1c>
 800efa6:	682b      	ldr	r3, [r5, #0]
 800efa8:	b103      	cbz	r3, 800efac <_kill_r+0x1c>
 800efaa:	6023      	str	r3, [r4, #0]
 800efac:	bd38      	pop	{r3, r4, r5, pc}
 800efae:	bf00      	nop
 800efb0:	200017dc 	.word	0x200017dc

0800efb4 <_getpid_r>:
 800efb4:	f7f2 bec8 	b.w	8001d48 <_getpid>

0800efb8 <memchr>:
 800efb8:	4603      	mov	r3, r0
 800efba:	b510      	push	{r4, lr}
 800efbc:	b2c9      	uxtb	r1, r1
 800efbe:	4402      	add	r2, r0
 800efc0:	4293      	cmp	r3, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	d101      	bne.n	800efca <memchr+0x12>
 800efc6:	2000      	movs	r0, #0
 800efc8:	e003      	b.n	800efd2 <memchr+0x1a>
 800efca:	7804      	ldrb	r4, [r0, #0]
 800efcc:	3301      	adds	r3, #1
 800efce:	428c      	cmp	r4, r1
 800efd0:	d1f6      	bne.n	800efc0 <memchr+0x8>
 800efd2:	bd10      	pop	{r4, pc}

0800efd4 <__swhatbuf_r>:
 800efd4:	b570      	push	{r4, r5, r6, lr}
 800efd6:	460c      	mov	r4, r1
 800efd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efdc:	4615      	mov	r5, r2
 800efde:	2900      	cmp	r1, #0
 800efe0:	461e      	mov	r6, r3
 800efe2:	b096      	sub	sp, #88	@ 0x58
 800efe4:	da0c      	bge.n	800f000 <__swhatbuf_r+0x2c>
 800efe6:	89a3      	ldrh	r3, [r4, #12]
 800efe8:	2100      	movs	r1, #0
 800efea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800efee:	bf14      	ite	ne
 800eff0:	2340      	movne	r3, #64	@ 0x40
 800eff2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eff6:	2000      	movs	r0, #0
 800eff8:	6031      	str	r1, [r6, #0]
 800effa:	602b      	str	r3, [r5, #0]
 800effc:	b016      	add	sp, #88	@ 0x58
 800effe:	bd70      	pop	{r4, r5, r6, pc}
 800f000:	466a      	mov	r2, sp
 800f002:	f000 f849 	bl	800f098 <_fstat_r>
 800f006:	2800      	cmp	r0, #0
 800f008:	dbed      	blt.n	800efe6 <__swhatbuf_r+0x12>
 800f00a:	9901      	ldr	r1, [sp, #4]
 800f00c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f010:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f014:	4259      	negs	r1, r3
 800f016:	4159      	adcs	r1, r3
 800f018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f01c:	e7eb      	b.n	800eff6 <__swhatbuf_r+0x22>

0800f01e <__smakebuf_r>:
 800f01e:	898b      	ldrh	r3, [r1, #12]
 800f020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f022:	079d      	lsls	r5, r3, #30
 800f024:	4606      	mov	r6, r0
 800f026:	460c      	mov	r4, r1
 800f028:	d507      	bpl.n	800f03a <__smakebuf_r+0x1c>
 800f02a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f02e:	6023      	str	r3, [r4, #0]
 800f030:	6123      	str	r3, [r4, #16]
 800f032:	2301      	movs	r3, #1
 800f034:	6163      	str	r3, [r4, #20]
 800f036:	b003      	add	sp, #12
 800f038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f03a:	466a      	mov	r2, sp
 800f03c:	ab01      	add	r3, sp, #4
 800f03e:	f7ff ffc9 	bl	800efd4 <__swhatbuf_r>
 800f042:	9f00      	ldr	r7, [sp, #0]
 800f044:	4605      	mov	r5, r0
 800f046:	4639      	mov	r1, r7
 800f048:	4630      	mov	r0, r6
 800f04a:	f7fd fdef 	bl	800cc2c <_malloc_r>
 800f04e:	b948      	cbnz	r0, 800f064 <__smakebuf_r+0x46>
 800f050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f054:	059a      	lsls	r2, r3, #22
 800f056:	d4ee      	bmi.n	800f036 <__smakebuf_r+0x18>
 800f058:	f023 0303 	bic.w	r3, r3, #3
 800f05c:	f043 0302 	orr.w	r3, r3, #2
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	e7e2      	b.n	800f02a <__smakebuf_r+0xc>
 800f064:	89a3      	ldrh	r3, [r4, #12]
 800f066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f06e:	81a3      	strh	r3, [r4, #12]
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	6020      	str	r0, [r4, #0]
 800f074:	b15b      	cbz	r3, 800f08e <__smakebuf_r+0x70>
 800f076:	4630      	mov	r0, r6
 800f078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f07c:	f000 f81e 	bl	800f0bc <_isatty_r>
 800f080:	b128      	cbz	r0, 800f08e <__smakebuf_r+0x70>
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	f023 0303 	bic.w	r3, r3, #3
 800f088:	f043 0301 	orr.w	r3, r3, #1
 800f08c:	81a3      	strh	r3, [r4, #12]
 800f08e:	89a3      	ldrh	r3, [r4, #12]
 800f090:	431d      	orrs	r5, r3
 800f092:	81a5      	strh	r5, [r4, #12]
 800f094:	e7cf      	b.n	800f036 <__smakebuf_r+0x18>
	...

0800f098 <_fstat_r>:
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	2300      	movs	r3, #0
 800f09c:	4d06      	ldr	r5, [pc, #24]	@ (800f0b8 <_fstat_r+0x20>)
 800f09e:	4604      	mov	r4, r0
 800f0a0:	4608      	mov	r0, r1
 800f0a2:	4611      	mov	r1, r2
 800f0a4:	602b      	str	r3, [r5, #0]
 800f0a6:	f7f2 feb5 	bl	8001e14 <_fstat>
 800f0aa:	1c43      	adds	r3, r0, #1
 800f0ac:	d102      	bne.n	800f0b4 <_fstat_r+0x1c>
 800f0ae:	682b      	ldr	r3, [r5, #0]
 800f0b0:	b103      	cbz	r3, 800f0b4 <_fstat_r+0x1c>
 800f0b2:	6023      	str	r3, [r4, #0]
 800f0b4:	bd38      	pop	{r3, r4, r5, pc}
 800f0b6:	bf00      	nop
 800f0b8:	200017dc 	.word	0x200017dc

0800f0bc <_isatty_r>:
 800f0bc:	b538      	push	{r3, r4, r5, lr}
 800f0be:	2300      	movs	r3, #0
 800f0c0:	4d05      	ldr	r5, [pc, #20]	@ (800f0d8 <_isatty_r+0x1c>)
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	4608      	mov	r0, r1
 800f0c6:	602b      	str	r3, [r5, #0]
 800f0c8:	f7f2 feb3 	bl	8001e32 <_isatty>
 800f0cc:	1c43      	adds	r3, r0, #1
 800f0ce:	d102      	bne.n	800f0d6 <_isatty_r+0x1a>
 800f0d0:	682b      	ldr	r3, [r5, #0]
 800f0d2:	b103      	cbz	r3, 800f0d6 <_isatty_r+0x1a>
 800f0d4:	6023      	str	r3, [r4, #0]
 800f0d6:	bd38      	pop	{r3, r4, r5, pc}
 800f0d8:	200017dc 	.word	0x200017dc

0800f0dc <_init>:
 800f0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0de:	bf00      	nop
 800f0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0e2:	bc08      	pop	{r3}
 800f0e4:	469e      	mov	lr, r3
 800f0e6:	4770      	bx	lr

0800f0e8 <_fini>:
 800f0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ea:	bf00      	nop
 800f0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ee:	bc08      	pop	{r3}
 800f0f0:	469e      	mov	lr, r3
 800f0f2:	4770      	bx	lr
