
Tesis_LGBS_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f040  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800f150  0800f150  00010150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f600  0800f600  00011344  2**0
                  CONTENTS
  4 .ARM          00000008  0800f600  0800f600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f608  0800f608  00011344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f608  0800f608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f60c  0800f60c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800f610  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a4  20000344  0800f954  00011344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018e8  0800f954  000118e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018154  00000000  00000000  0001136d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042fe  00000000  00000000  000294c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0002d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001103  00000000  00000000  0002ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdfb  00000000  00000000  0002ff2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a34b  00000000  00000000  0004cd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000985d2  00000000  00000000  00067071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff643  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007160  00000000  00000000  000ff688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001067e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f138 	.word	0x0800f138

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800f138 	.word	0x0800f138

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_d2lz>:
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	2200      	movs	r2, #0
 8001134:	2300      	movs	r3, #0
 8001136:	4604      	mov	r4, r0
 8001138:	460d      	mov	r5, r1
 800113a:	f7ff fc3f 	bl	80009bc <__aeabi_dcmplt>
 800113e:	b928      	cbnz	r0, 800114c <__aeabi_d2lz+0x1c>
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001148:	f000 b80a 	b.w	8001160 <__aeabi_d2ulz>
 800114c:	4620      	mov	r0, r4
 800114e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001152:	f000 f805 	bl	8001160 <__aeabi_d2ulz>
 8001156:	4240      	negs	r0, r0
 8001158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800115c:	bd38      	pop	{r3, r4, r5, pc}
 800115e:	bf00      	nop

08001160 <__aeabi_d2ulz>:
 8001160:	b5d0      	push	{r4, r6, r7, lr}
 8001162:	2200      	movs	r2, #0
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <__aeabi_d2ulz+0x34>)
 8001166:	4606      	mov	r6, r0
 8001168:	460f      	mov	r7, r1
 800116a:	f7ff f9b5 	bl	80004d8 <__aeabi_dmul>
 800116e:	f7ff fc75 	bl	8000a5c <__aeabi_d2uiz>
 8001172:	4604      	mov	r4, r0
 8001174:	f7ff f936 	bl	80003e4 <__aeabi_ui2d>
 8001178:	2200      	movs	r2, #0
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <__aeabi_d2ulz+0x38>)
 800117c:	f7ff f9ac 	bl	80004d8 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4630      	mov	r0, r6
 8001186:	4639      	mov	r1, r7
 8001188:	f7fe ffee 	bl	8000168 <__aeabi_dsub>
 800118c:	f7ff fc66 	bl	8000a5c <__aeabi_d2uiz>
 8001190:	4621      	mov	r1, r4
 8001192:	bdd0      	pop	{r4, r6, r7, pc}
 8001194:	3df00000 	.word	0x3df00000
 8001198:	41f00000 	.word	0x41f00000

0800119c <curr_control_init>:
static int16_t i_offset = 0;
static bool calibrated = false;


void curr_control_init(ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2101      	movs	r1, #1
 80011aa:	4817      	ldr	r0, [pc, #92]	@ (8001208 <curr_control_init+0x6c>)
 80011ac:	f002 fcdc 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2102      	movs	r1, #2
 80011b4:	4814      	ldr	r0, [pc, #80]	@ (8001208 <curr_control_init+0x6c>)
 80011b6:	f002 fcd7 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_B, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2104      	movs	r1, #4
 80011be:	4812      	ldr	r0, [pc, #72]	@ (8001208 <curr_control_init+0x6c>)
 80011c0:	f002 fcd2 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_B, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2108      	movs	r1, #8
 80011c8:	480f      	ldr	r0, [pc, #60]	@ (8001208 <curr_control_init+0x6c>)
 80011ca:	f002 fccd 	bl	8003b68 <HAL_GPIO_WritePin>

	if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f001 fba0 	bl	8002914 <HAL_ADCEx_Calibration_Start>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <curr_control_init+0x42>
	{
		Error_Handler();
 80011da:	f000 fbbf 	bl	800195c <Error_Handler>
	}

	if (HAL_ADC_Start_IT(hadc) != HAL_OK)
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f001 f87a 	bl	80022d8 <HAL_ADC_Start_IT>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <curr_control_init+0x52>
	{
		Error_Handler();
 80011ea:	f000 fbb7 	bl	800195c <Error_Handler>
	}

	if (HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f005 fcdb 	bl	8006bac <HAL_TIMEx_PWMN_Start>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <curr_control_init+0x64>
	{
		Error_Handler();
 80011fc:	f000 fbae 	bl	800195c <Error_Handler>
	}


}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010800 	.word	0x40010800

0800120c <get_I_meas>:

float get_I_meas()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	return (float)(adc_value-i_offset)/(float)SENS_SENSITIVITY;
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <get_I_meas+0x2c>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	461a      	mov	r2, r3
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <get_I_meas+0x30>)
 800121a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd45 	bl	8000cb0 <__aeabi_i2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4905      	ldr	r1, [pc, #20]	@ (8001240 <get_I_meas+0x34>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fe48 	bl	8000ec0 <__aeabi_fdiv>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000360 	.word	0x20000360
 800123c:	2000036a 	.word	0x2000036a
 8001240:	43f80000 	.word	0x43f80000

08001244 <get_I>:

float get_I()
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return i_ref_float;
 8001248:	4b02      	ldr	r3, [pc, #8]	@ (8001254 <get_I+0x10>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20000364 	.word	0x20000364

08001258 <set_I>:

void set_I(float i)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	if (i > MAX_CURR || i < 0.0)
 8001260:	4917      	ldr	r1, [pc, #92]	@ (80012c0 <set_I+0x68>)
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff34 	bl	80010d0 <__aeabi_fcmpgt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d124      	bne.n	80012b8 <set_I+0x60>
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff0e 	bl	8001094 <__aeabi_fcmplt>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d11c      	bne.n	80012b8 <set_I+0x60>
	{
		return;
	}
	i_ref_float = i;
 800127e:	4a11      	ldr	r2, [pc, #68]	@ (80012c4 <set_I+0x6c>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6013      	str	r3, [r2, #0]
	i_ref_int = i * SENS_SENSITIVITY + i_offset;
 8001284:	4910      	ldr	r1, [pc, #64]	@ (80012c8 <set_I+0x70>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fd66 	bl	8000d58 <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	461c      	mov	r4, r3
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <set_I+0x74>)
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fd0a 	bl	8000cb0 <__aeabi_i2f>
 800129c:	4603      	mov	r3, r0
 800129e:	4619      	mov	r1, r3
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff fc51 	bl	8000b48 <__addsf3>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff1b 	bl	80010e4 <__aeabi_f2iz>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <set_I+0x78>)
 80012b4:	801a      	strh	r2, [r3, #0]
 80012b6:	e000      	b.n	80012ba <set_I+0x62>
		return;
 80012b8:	bf00      	nop
}
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd90      	pop	{r4, r7, pc}
 80012c0:	40a00000 	.word	0x40a00000
 80012c4:	20000364 	.word	0x20000364
 80012c8:	43f80000 	.word	0x43f80000
 80012cc:	2000036a 	.word	0x2000036a
 80012d0:	20000368 	.word	0x20000368

080012d4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f001 f8b1 	bl	8002444 <HAL_ADC_GetValue>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_ADC_ConvCpltCallback+0x78>)
 80012e8:	801a      	strh	r2, [r3, #0]
	if (!calibrated)
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_ADC_ConvCpltCallback+0x7c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_ADC_ConvCpltCallback+0x36>
	{
		i_offset = adc_value;
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_ADC_ConvCpltCallback+0x78>)
 80012fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x80>)
 8001300:	801a      	strh	r2, [r3, #0]
		calibrated = true;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
		}
	}
}
 8001308:	e01c      	b.n	8001344 <HAL_ADC_ConvCpltCallback+0x70>
		if (adc_value > i_ref_int)
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_ADC_ConvCpltCallback+0x78>)
 800130c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_ADC_ConvCpltCallback+0x84>)
 8001312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001316:	429a      	cmp	r2, r3
 8001318:	dd0a      	ble.n	8001330 <HAL_ADC_ConvCpltCallback+0x5c>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	480f      	ldr	r0, [pc, #60]	@ (800135c <HAL_ADC_ConvCpltCallback+0x88>)
 8001320:	f002 fc22 	bl	8003b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2102      	movs	r1, #2
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <HAL_ADC_ConvCpltCallback+0x88>)
 800132a:	f002 fc1d 	bl	8003b68 <HAL_GPIO_WritePin>
}
 800132e:	e009      	b.n	8001344 <HAL_ADC_ConvCpltCallback+0x70>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2102      	movs	r1, #2
 8001334:	4809      	ldr	r0, [pc, #36]	@ (800135c <HAL_ADC_ConvCpltCallback+0x88>)
 8001336:	f002 fc17 	bl	8003b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2101      	movs	r1, #1
 800133e:	4807      	ldr	r0, [pc, #28]	@ (800135c <HAL_ADC_ConvCpltCallback+0x88>)
 8001340:	f002 fc12 	bl	8003b68 <HAL_GPIO_WritePin>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000360 	.word	0x20000360
 8001350:	2000036c 	.word	0x2000036c
 8001354:	2000036a 	.word	0x2000036a
 8001358:	20000368 	.word	0x20000368
 800135c:	40010800 	.word	0x40010800

08001360 <command_I>:

#include "stdio.h"
#include "string.h"


void command_I(uint8_t *buff, uint16_t size){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
	static float i;
	if (buff[1] == '?')
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b3f      	cmp	r3, #63	@ 0x3f
 8001374:	d112      	bne.n	800139c <command_I+0x3c>
	{
		gcvt(get_I(), 3, buff);
 8001376:	f7ff ff65 	bl	8001244 <get_I>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f853 	bl	8000428 <__aeabi_f2d>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	f00a ff1f 	bl	800c1c8 <gcvt>
		buff[4] = '\n';
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3304      	adds	r3, #4
 800138e:	220a      	movs	r2, #10
 8001390:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 8001392:	2105      	movs	r1, #5
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f009 fcf5 	bl	800ad84 <CDC_Transmit_FS>
 800139a:	e02f      	b.n	80013fc <command_I+0x9c>
	}
	else if (buff[1] == '=')
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3301      	adds	r3, #1
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b3d      	cmp	r3, #61	@ 0x3d
 80013a4:	d113      	bne.n	80013ce <command_I+0x6e>
	{
		i = atof(&buff[2]);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3302      	adds	r3, #2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00a f902 	bl	800b5b4 <atof>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb70 	bl	8000a9c <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a16      	ldr	r2, [pc, #88]	@ (8001418 <command_I+0xb8>)
 80013c0:	6013      	str	r3, [r2, #0]
		set_I(i);
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <command_I+0xb8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff46 	bl	8001258 <set_I>
 80013cc:	e016      	b.n	80013fc <command_I+0x9c>
	}
	else if (buff[1] == 'm')
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3301      	adds	r3, #1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b6d      	cmp	r3, #109	@ 0x6d
 80013d6:	d111      	bne.n	80013fc <command_I+0x9c>
	{
		gcvt(get_I_meas(), 3, buff);
 80013d8:	f7ff ff18 	bl	800120c <get_I_meas>
 80013dc:	4603      	mov	r3, r0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f822 	bl	8000428 <__aeabi_f2d>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	f00a feee 	bl	800c1c8 <gcvt>
		buff[4] = '\n';
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3304      	adds	r3, #4
 80013f0:	220a      	movs	r2, #10
 80013f2:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 80013f4:	2105      	movs	r1, #5
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f009 fcc4 	bl	800ad84 <CDC_Transmit_FS>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 80013fc:	bf00      	nop
 80013fe:	2101      	movs	r1, #1
 8001400:	200a      	movs	r0, #10
 8001402:	f009 fcbf 	bl	800ad84 <CDC_Transmit_FS>
 8001406:	4603      	mov	r3, r0
 8001408:	2b01      	cmp	r3, #1
 800140a:	d0f8      	beq.n	80013fe <command_I+0x9e>
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000370 	.word	0x20000370

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f000 fe20 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f846 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 fa42 	bl	80018b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800142c:	f000 fa1a 	bl	8001864 <MX_DMA_Init>
  MX_CAN_Init();
 8001430:	f000 f8dc 	bl	80015ec <MX_CAN_Init>
  MX_SPI1_Init();
 8001434:	f000 f93e 	bl	80016b4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001438:	f000 f89a 	bl	8001570 <MX_ADC1_Init>
  MX_TIM3_Init();
 800143c:	f000 f99e 	bl	800177c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001440:	f009 fbd4 	bl	800abec <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8001444:	f000 f968 	bl	8001718 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  curr_control_init(&hadc1, &htim3);
 8001448:	4915      	ldr	r1, [pc, #84]	@ (80014a0 <main+0x84>)
 800144a:	4816      	ldr	r0, [pc, #88]	@ (80014a4 <main+0x88>)
 800144c:	f7ff fea6 	bl	800119c <curr_control_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (CDC_data_recieved())
 8001450:	f009 fcbe 	bl	800add0 <CDC_data_recieved>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0fa      	beq.n	8001450 <main+0x34>
	  {
		  rx_usb_amount = CDC_Receive_data(msg, 64);
 800145a:	2140      	movs	r1, #64	@ 0x40
 800145c:	4812      	ldr	r0, [pc, #72]	@ (80014a8 <main+0x8c>)
 800145e:	f009 fcc1 	bl	800ade4 <CDC_Receive_data>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <main+0x90>)
 8001468:	801a      	strh	r2, [r3, #0]
		  switch ((int)msg[0])
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <main+0x8c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b49      	cmp	r3, #73	@ 0x49
 8001470:	d106      	bne.n	8001480 <main+0x64>
		  {
		  	  case 'I':
		  		  command_I(msg, rx_usb_amount);
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <main+0x90>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <main+0x8c>)
 800147a:	f7ff ff71 	bl	8001360 <command_I>
		  		  break;
 800147e:	e00d      	b.n	800149c <main+0x80>
		  	  default:
		  		  CDC_Transmit_FS("\nNo reconocido\n", 15);
 8001480:	210f      	movs	r1, #15
 8001482:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <main+0x94>)
 8001484:	f009 fc7e 	bl	800ad84 <CDC_Transmit_FS>
		  		  while (CDC_Transmit_FS(msg, rx_usb_amount) == USBD_BUSY);
 8001488:	bf00      	nop
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <main+0x90>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <main+0x8c>)
 8001492:	f009 fc77 	bl	800ad84 <CDC_Transmit_FS>
 8001496:	4603      	mov	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d0f6      	beq.n	800148a <main+0x6e>
	  if (CDC_data_recieved())
 800149c:	e7d8      	b.n	8001450 <main+0x34>
 800149e:	bf00      	nop
 80014a0:	20000504 	.word	0x20000504
 80014a4:	20000374 	.word	0x20000374
 80014a8:	2000054c 	.word	0x2000054c
 80014ac:	2000058c 	.word	0x2000058c
 80014b0:	0800f150 	.word	0x0800f150

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	@ 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014be:	2228      	movs	r2, #40	@ 0x28
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00a ffa9 	bl	800c41a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f2:	2301      	movs	r3, #1
 80014f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001500:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800150a:	4618      	mov	r0, r3
 800150c:	f004 f8a4 	bl	8005658 <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001516:	f000 fa21 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fb10 	bl	8005b5c <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001542:	f000 fa0b 	bl	800195c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001546:	2312      	movs	r3, #18
 8001548:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800154a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800154e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f004 fc7a 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001562:	f000 f9fb 	bl	800195c <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <MX_ADC1_Init+0x74>)
 8001582:	4a19      	ldr	r2, [pc, #100]	@ (80015e8 <MX_ADC1_Init+0x78>)
 8001584:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <MX_ADC1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <MX_ADC1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_ADC1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_ADC1_Init+0x74>)
 800159a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800159e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_ADC1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_ADC1_Init+0x74>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ac:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <MX_ADC1_Init+0x74>)
 80015ae:	f000 fdbb 	bl	8002128 <HAL_ADC_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f000 f9d0 	bl	800195c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015bc:	2306      	movs	r3, #6
 80015be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_ADC1_Init+0x74>)
 80015ce:	f001 f80d 	bl	80025ec <HAL_ADC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80015d8:	f000 f9c0 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000374 	.word	0x20000374
 80015e8:	40012400 	.word	0x40012400

080015ec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */
	TxHeader.DLC = 2;  // data length
 80015f0:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <MX_CAN_Init+0xb8>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80015f6:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <MX_CAN_Init+0xb8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <MX_CAN_Init+0xb8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x6A5;
 8001602:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <MX_CAN_Init+0xb8>)
 8001604:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 8001608:	601a      	str	r2, [r3, #0]
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <MX_CAN_Init+0xbc>)
 800160c:	2201      	movs	r2, #1
 800160e:	621a      	str	r2, [r3, #32]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001610:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <MX_CAN_Init+0xbc>)
 8001612:	2201      	movs	r2, #1
 8001614:	611a      	str	r2, [r3, #16]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <MX_CAN_Init+0xbc>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
	CANFilter.FilterIdHigh = 0x6A5<<5;
 800161c:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <MX_CAN_Init+0xbc>)
 800161e:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 8001622:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0;
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <MX_CAN_Init+0xbc>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_CAN_Init+0xbc>)
 800162c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001630:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0;
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <MX_CAN_Init+0xbc>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_CAN_Init+0xbc>)
 800163a:	2201      	movs	r2, #1
 800163c:	61da      	str	r2, [r3, #28]
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <MX_CAN_Init+0xc0>)
 8001640:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <MX_CAN_Init+0xc4>)
 8001642:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <MX_CAN_Init+0xc0>)
 8001646:	2210      	movs	r2, #16
 8001648:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800164a:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <MX_CAN_Init+0xc0>)
 800164c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001650:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_CAN_Init+0xc0>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_CAN_Init+0xc0>)
 800165a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800165e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <MX_CAN_Init+0xc0>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_CAN_Init+0xc0>)
 8001668:	2200      	movs	r2, #0
 800166a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_CAN_Init+0xc0>)
 800166e:	2200      	movs	r2, #0
 8001670:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <MX_CAN_Init+0xc0>)
 8001674:	2200      	movs	r2, #0
 8001676:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <MX_CAN_Init+0xc0>)
 800167a:	2200      	movs	r2, #0
 800167c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <MX_CAN_Init+0xc0>)
 8001680:	2200      	movs	r2, #0
 8001682:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <MX_CAN_Init+0xc0>)
 8001686:	2200      	movs	r2, #0
 8001688:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <MX_CAN_Init+0xc0>)
 800168c:	f001 f9f9 	bl	8002a82 <HAL_CAN_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_CAN_Init+0xae>
  {
    Error_Handler();
 8001696:	f000 f961 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
//  HAL_CAN_Start(&hcan);
//  HAL_CAN_ConfigFilter(&hcan, &CANFilter);
//  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
  HAL_CAN_DeInit(&hcan);
 800169a:	4804      	ldr	r0, [pc, #16]	@ (80016ac <MX_CAN_Init+0xc0>)
 800169c:	f001 faec 	bl	8002c78 <HAL_CAN_DeInit>
  /* USER CODE END CAN_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000590 	.word	0x20000590
 80016a8:	200005a8 	.word	0x200005a8
 80016ac:	200003a4 	.word	0x200003a4
 80016b0:	40006400 	.word	0x40006400

080016b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016ba:	4a16      	ldr	r2, [pc, #88]	@ (8001714 <MX_SPI1_Init+0x60>)
 80016bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016da:	2201      	movs	r2, #1
 80016dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016f8:	220a      	movs	r2, #10
 80016fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	@ (8001710 <MX_SPI1_Init+0x5c>)
 80016fe:	f004 fd13 	bl	8006128 <HAL_SPI_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001708:	f000 f928 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200003cc 	.word	0x200003cc
 8001714:	40013000 	.word	0x40013000

08001718 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <MX_SPI2_Init+0x5c>)
 800171e:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <MX_SPI2_Init+0x60>)
 8001720:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_SPI2_Init+0x5c>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_SPI2_Init+0x5c>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_SPI2_Init+0x5c>)
 8001730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001734:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_SPI2_Init+0x5c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <MX_SPI2_Init+0x5c>)
 800173e:	2201      	movs	r2, #1
 8001740:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_SPI2_Init+0x5c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <MX_SPI2_Init+0x5c>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_SPI2_Init+0x5c>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <MX_SPI2_Init+0x5c>)
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_SPI2_Init+0x5c>)
 800175c:	220a      	movs	r2, #10
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <MX_SPI2_Init+0x5c>)
 8001762:	f004 fce1 	bl	8006128 <HAL_SPI_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 800176c:	f000 f8f6 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000424 	.word	0x20000424
 8001778:	40003800 	.word	0x40003800

0800177c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	@ 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ac:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <MX_TIM3_Init+0xe0>)
 80017ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001860 <MX_TIM3_Init+0xe4>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <MX_TIM3_Init+0xe0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <MX_TIM3_Init+0xe0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360;
 80017be:	4b27      	ldr	r3, [pc, #156]	@ (800185c <MX_TIM3_Init+0xe0>)
 80017c0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80017c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <MX_TIM3_Init+0xe0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b23      	ldr	r3, [pc, #140]	@ (800185c <MX_TIM3_Init+0xe0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d2:	4822      	ldr	r0, [pc, #136]	@ (800185c <MX_TIM3_Init+0xe0>)
 80017d4:	f004 fd2c 	bl	8006230 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017de:	f000 f8bd 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ec:	4619      	mov	r1, r3
 80017ee:	481b      	ldr	r0, [pc, #108]	@ (800185c <MX_TIM3_Init+0xe0>)
 80017f0:	f004 fe88 	bl	8006504 <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017fa:	f000 f8af 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017fe:	4817      	ldr	r0, [pc, #92]	@ (800185c <MX_TIM3_Init+0xe0>)
 8001800:	f004 fd65 	bl	80062ce <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800180a:	f000 f8a7 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800180e:	2320      	movs	r3, #32
 8001810:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	4619      	mov	r1, r3
 800181c:	480f      	ldr	r0, [pc, #60]	@ (800185c <MX_TIM3_Init+0xe0>)
 800181e:	f005 fa63 	bl	8006ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001828:	f000 f898 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	@ 0x60
 800182e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 180;
 8001830:	23b4      	movs	r3, #180	@ 0xb4
 8001832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	4806      	ldr	r0, [pc, #24]	@ (800185c <MX_TIM3_Init+0xe0>)
 8001844:	f004 fd9c 	bl	8006380 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800184e:	f000 f885 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	3738      	adds	r7, #56	@ 0x38
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000504 	.word	0x20000504
 8001860:	40000400 	.word	0x40000400

08001864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <MX_DMA_Init+0x48>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	4a0f      	ldr	r2, [pc, #60]	@ (80018ac <MX_DMA_Init+0x48>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6153      	str	r3, [r2, #20]
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <MX_DMA_Init+0x48>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	200d      	movs	r0, #13
 8001888:	f001 fd89 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800188c:	200d      	movs	r0, #13
 800188e:	f001 fda2 	bl	80033d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	200f      	movs	r0, #15
 8001898:	f001 fd81 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800189c:	200f      	movs	r0, #15
 800189e:	f001 fd9a 	bl	80033d6 <HAL_NVIC_EnableIRQ>

}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c4:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <MX_GPIO_Init+0xa4>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a22      	ldr	r2, [pc, #136]	@ (8001954 <MX_GPIO_Init+0xa4>)
 80018ca:	f043 0320 	orr.w	r3, r3, #32
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <MX_GPIO_Init+0xa4>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <MX_GPIO_Init+0xa4>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001954 <MX_GPIO_Init+0xa4>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_GPIO_Init+0xa4>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <MX_GPIO_Init+0xa4>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a16      	ldr	r2, [pc, #88]	@ (8001954 <MX_GPIO_Init+0xa4>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_GPIO_Init+0xa4>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	210f      	movs	r1, #15
 8001910:	4811      	ldr	r0, [pc, #68]	@ (8001958 <MX_GPIO_Init+0xa8>)
 8001912:	f002 f929 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001916:	230f      	movs	r3, #15
 8001918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	480a      	ldr	r0, [pc, #40]	@ (8001958 <MX_GPIO_Init+0xa8>)
 800192e:	f001 fedb 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001932:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	4804      	ldr	r0, [pc, #16]	@ (8001958 <MX_GPIO_Init+0xa8>)
 8001948:	f001 fece 	bl	80036e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	40010800 	.word	0x40010800

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <Error_Handler+0x8>

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_MspInit+0x5c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <HAL_MspInit+0x5c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_MspInit+0x60>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_MspInit+0x60>)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000

080019cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_ADC_MspInit+0x7c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d129      	bne.n	8001a40 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a16      	ldr	r2, [pc, #88]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a10      	ldr	r2, [pc, #64]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a1c:	2340      	movs	r3, #64	@ 0x40
 8001a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a20:	2303      	movs	r3, #3
 8001a22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4809      	ldr	r0, [pc, #36]	@ (8001a50 <HAL_ADC_MspInit+0x84>)
 8001a2c:	f001 fe5c 	bl	80036e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2012      	movs	r0, #18
 8001a36:	f001 fcb2 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a3a:	2012      	movs	r0, #18
 8001a3c:	f001 fccb 	bl	80033d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40012400 	.word	0x40012400
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010800 	.word	0x40010800

08001a54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b24 <HAL_CAN_MspInit+0xd0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d153      	bne.n	8001b1c <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a74:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <HAL_CAN_MspInit+0xd4>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	4a2b      	ldr	r2, [pc, #172]	@ (8001b28 <HAL_CAN_MspInit+0xd4>)
 8001a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	61d3      	str	r3, [r2, #28]
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <HAL_CAN_MspInit+0xd4>)
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <HAL_CAN_MspInit+0xd4>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a25      	ldr	r2, [pc, #148]	@ (8001b28 <HAL_CAN_MspInit+0xd4>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <HAL_CAN_MspInit+0xd4>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481c      	ldr	r0, [pc, #112]	@ (8001b2c <HAL_CAN_MspInit+0xd8>)
 8001aba:	f001 fe15 	bl	80036e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4816      	ldr	r0, [pc, #88]	@ (8001b2c <HAL_CAN_MspInit+0xd8>)
 8001ad4:	f001 fe08 	bl	80036e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001ad8:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <HAL_CAN_MspInit+0xdc>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b30 <HAL_CAN_MspInit+0xdc>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	2014      	movs	r0, #20
 8001b02:	f001 fc4c 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001b06:	2014      	movs	r0, #20
 8001b08:	f001 fc65 	bl	80033d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2015      	movs	r0, #21
 8001b12:	f001 fc44 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b16:	2015      	movs	r0, #21
 8001b18:	f001 fc5d 	bl	80033d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	@ 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40006400 	.word	0x40006400
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40010000 	.word	0x40010000

08001b34 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <HAL_CAN_MspDeInit+0x38>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10d      	bne.n	8001b62 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_CAN_MspDeInit+0x3c>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <HAL_CAN_MspDeInit+0x3c>)
 8001b4c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001b50:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001b52:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001b56:	4807      	ldr	r0, [pc, #28]	@ (8001b74 <HAL_CAN_MspDeInit+0x40>)
 8001b58:	f001 ff4a 	bl	80039f0 <HAL_GPIO_DeInit>
    * Be aware, disabling shared interrupt may affect other IPs
    */
    /* HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn); */
  /* USER CODE END CAN1:USB_LP_CAN1_RX0_IRQn disable */

    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8001b5c:	2015      	movs	r0, #21
 8001b5e:	f001 fc48 	bl	80033f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40006400 	.word	0x40006400
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010c00 	.word	0x40010c00

08001b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a73      	ldr	r2, [pc, #460]	@ (8001d60 <HAL_SPI_MspInit+0x1e8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d17f      	bne.n	8001c98 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b98:	4b72      	ldr	r3, [pc, #456]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a71      	ldr	r2, [pc, #452]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001b9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b69      	ldr	r3, [pc, #420]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	4b66      	ldr	r3, [pc, #408]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a65      	ldr	r2, [pc, #404]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b63      	ldr	r3, [pc, #396]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	485c      	ldr	r0, [pc, #368]	@ (8001d68 <HAL_SPI_MspInit+0x1f0>)
 8001bf6:	f001 fd77 	bl	80036e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4857      	ldr	r0, [pc, #348]	@ (8001d6c <HAL_SPI_MspInit+0x1f4>)
 8001c0e:	f001 fd6b 	bl	80036e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c12:	2330      	movs	r3, #48	@ 0x30
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	4851      	ldr	r0, [pc, #324]	@ (8001d6c <HAL_SPI_MspInit+0x1f4>)
 8001c26:	f001 fd5f 	bl	80036e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001c2a:	4b51      	ldr	r3, [pc, #324]	@ (8001d70 <HAL_SPI_MspInit+0x1f8>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c32:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c40:	4a4b      	ldr	r2, [pc, #300]	@ (8001d70 <HAL_SPI_MspInit+0x1f8>)
 8001c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c44:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001c46:	4b4b      	ldr	r3, [pc, #300]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c48:	4a4b      	ldr	r2, [pc, #300]	@ (8001d78 <HAL_SPI_MspInit+0x200>)
 8001c4a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c4c:	4b49      	ldr	r3, [pc, #292]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c4e:	2210      	movs	r2, #16
 8001c50:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c52:	4b48      	ldr	r3, [pc, #288]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c58:	4b46      	ldr	r3, [pc, #280]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c5a:	2280      	movs	r2, #128	@ 0x80
 8001c5c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c5e:	4b45      	ldr	r3, [pc, #276]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c64:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c66:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c6c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001c6e:	4b41      	ldr	r3, [pc, #260]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c70:	2220      	movs	r2, #32
 8001c72:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c74:	4b3f      	ldr	r3, [pc, #252]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c7a:	483e      	ldr	r0, [pc, #248]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c7c:	f001 fbd4 	bl	8003428 <HAL_DMA_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001c86:	f7ff fe69 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a39      	ldr	r2, [pc, #228]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c8e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c90:	4a38      	ldr	r2, [pc, #224]	@ (8001d74 <HAL_SPI_MspInit+0x1fc>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c96:	e05e      	b.n	8001d56 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a37      	ldr	r2, [pc, #220]	@ (8001d7c <HAL_SPI_MspInit+0x204>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d159      	bne.n	8001d56 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ca2:	4b30      	ldr	r3, [pc, #192]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a2f      	ldr	r2, [pc, #188]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b2d      	ldr	r3, [pc, #180]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b2a      	ldr	r3, [pc, #168]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	4a29      	ldr	r2, [pc, #164]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	6193      	str	r3, [r2, #24]
 8001cc6:	4b27      	ldr	r3, [pc, #156]	@ (8001d64 <HAL_SPI_MspInit+0x1ec>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cd2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4821      	ldr	r0, [pc, #132]	@ (8001d6c <HAL_SPI_MspInit+0x1f4>)
 8001ce8:	f001 fcfe 	bl	80036e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	481a      	ldr	r0, [pc, #104]	@ (8001d6c <HAL_SPI_MspInit+0x1f4>)
 8001d02:	f001 fcf1 	bl	80036e8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d08:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <HAL_SPI_MspInit+0x20c>)
 8001d0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d0e:	2210      	movs	r2, #16
 8001d10:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d12:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d1a:	2280      	movs	r2, #128	@ 0x80
 8001d1c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d24:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d2c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d30:	2220      	movs	r2, #32
 8001d32:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001d3a:	4811      	ldr	r0, [pc, #68]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d3c:	f001 fb74 	bl	8003428 <HAL_DMA_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_SPI_MspInit+0x1d2>
      Error_Handler();
 8001d46:	f7ff fe09 	bl	800195c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d4e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d50:	4a0b      	ldr	r2, [pc, #44]	@ (8001d80 <HAL_SPI_MspInit+0x208>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001d56:	bf00      	nop
 8001d58:	3730      	adds	r7, #48	@ 0x30
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40013000 	.word	0x40013000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010800 	.word	0x40010800
 8001d6c:	40010c00 	.word	0x40010c00
 8001d70:	40010000 	.word	0x40010000
 8001d74:	2000047c 	.word	0x2000047c
 8001d78:	40020030 	.word	0x40020030
 8001d7c:	40003800 	.word	0x40003800
 8001d80:	200004c0 	.word	0x200004c0
 8001d84:	40020058 	.word	0x40020058

08001d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_TIM_Base_MspInit+0x34>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d10b      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x38>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x38>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x38>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40000400 	.word	0x40000400
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <NMI_Handler+0x4>

08001dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <MemManage_Handler+0x4>

08001ddc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 f96c 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA1_Channel3_IRQHandler+0x10>)
 8001e22:	f001 fb5b 	bl	80034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000047c 	.word	0x2000047c

08001e30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <DMA1_Channel5_IRQHandler+0x10>)
 8001e36:	f001 fb51 	bl	80034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200004c0 	.word	0x200004c0

08001e44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <ADC1_2_IRQHandler+0x10>)
 8001e4a:	f000 fb07 	bl	800245c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000374 	.word	0x20000374

08001e58 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e5c:	4803      	ldr	r0, [pc, #12]	@ (8001e6c <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8001e5e:	f000 ff77 	bl	8002d50 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e62:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8001e64:	f001 ffb4 	bl	8003dd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200003a4 	.word	0x200003a4
 8001e70:	200012a4 	.word	0x200012a4

08001e74 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <CAN1_RX1_IRQHandler+0x10>)
 8001e7a:	f000 ff69 	bl	8002d50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200003a4 	.word	0x200003a4

08001e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <_kill>:

int _kill(int pid, int sig)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea0:	f00a fb1c 	bl	800c4dc <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2216      	movs	r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_exit>:

void _exit (int status)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffe7 	bl	8001e96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <_exit+0x12>

08001ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e00a      	b.n	8001ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ede:	f3af 8000 	nop.w
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	b2ca      	uxtb	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbf0      	blt.n	8001ede <_read+0x12>
  }

  return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e009      	b.n	8001f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	60ba      	str	r2, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbf1      	blt.n	8001f18 <_write+0x12>
  }
  return len;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_close>:

int _close(int file)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f64:	605a      	str	r2, [r3, #4]
  return 0;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <_isatty>:

int _isatty(int file)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f00a fa84 	bl	800c4dc <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20005000 	.word	0x20005000
 8002000:	00000400 	.word	0x00000400
 8002004:	200005d0 	.word	0x200005d0
 8002008:	200018e8 	.word	0x200018e8

0800200c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002018:	f7ff fff8 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800201c:	480b      	ldr	r0, [pc, #44]	@ (800204c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800201e:	490c      	ldr	r1, [pc, #48]	@ (8002050 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002020:	4a0c      	ldr	r2, [pc, #48]	@ (8002054 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002034:	4c09      	ldr	r4, [pc, #36]	@ (800205c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002042:	f00a fa51 	bl	800c4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002046:	f7ff f9e9 	bl	800141c <main>
  bx lr
 800204a:	4770      	bx	lr
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8002054:	0800f610 	.word	0x0800f610
  ldr r2, =_sbss
 8002058:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 800205c:	200018e8 	.word	0x200018e8

08002060 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <CAN1_SCE_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_Init+0x28>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	@ (800208c <HAL_Init+0x28>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f001 f987 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	200f      	movs	r0, #15
 800207c:	f000 f808 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7ff fc72 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 f9ad 	bl	800340e <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020cc:	f001 f967 	bl	800339e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	@ (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_IncTick+0x1c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <HAL_IncTick+0x20>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a03      	ldr	r2, [pc, #12]	@ (8002110 <HAL_IncTick+0x20>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000008 	.word	0x20000008
 8002110:	200005d4 	.word	0x200005d4

08002114 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;
 8002118:	4b02      	ldr	r3, [pc, #8]	@ (8002124 <HAL_GetTick+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	200005d4 	.word	0x200005d4

08002128 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0be      	b.n	80022c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fc30 	bl	80019cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fb8f 	bl	8002890 <ADC_ConversionStop_Disable>
 8002172:	4603      	mov	r3, r0
 8002174:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 8099 	bne.w	80022b6 <HAL_ADC_Init+0x18e>
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 8095 	bne.w	80022b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002194:	f023 0302 	bic.w	r3, r3, #2
 8002198:	f043 0202 	orr.w	r2, r3, #2
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7b1b      	ldrb	r3, [r3, #12]
 80021ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c0:	d003      	beq.n	80021ca <HAL_ADC_Init+0xa2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_ADC_Init+0xa8>
 80021ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ce:	e000      	b.n	80021d2 <HAL_ADC_Init+0xaa>
 80021d0:	2300      	movs	r3, #0
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7d1b      	ldrb	r3, [r3, #20]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d119      	bne.n	8002214 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7b1b      	ldrb	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	035a      	lsls	r2, r3, #13
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	e00b      	b.n	8002214 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	4b28      	ldr	r3, [pc, #160]	@ (80022d0 <HAL_ADC_Init+0x1a8>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	430b      	orrs	r3, r1
 800223a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002244:	d003      	beq.n	800224e <HAL_ADC_Init+0x126>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d104      	bne.n	8002258 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	3b01      	subs	r3, #1
 8002254:	051b      	lsls	r3, r3, #20
 8002256:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	430a      	orrs	r2, r1
 800226a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_ADC_Init+0x1ac>)
 8002274:	4013      	ands	r3, r2
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	429a      	cmp	r2, r3
 800227a:	d10b      	bne.n	8002294 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002292:	e018      	b.n	80022c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f023 0312 	bic.w	r3, r3, #18
 800229c:	f043 0210 	orr.w	r2, r3, #16
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022b4:	e007      	b.n	80022c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	ffe1f7fd 	.word	0xffe1f7fd
 80022d4:	ff1f0efe 	.word	0xff1f0efe

080022d8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_Start_IT+0x1a>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e0a0      	b.n	8002434 <HAL_ADC_Start_IT+0x15c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa6e 	bl	80027dc <ADC_Enable>
 8002300:	4603      	mov	r3, r0
 8002302:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 808f 	bne.w	800242a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a45      	ldr	r2, [pc, #276]	@ (800243c <HAL_ADC_Start_IT+0x164>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d105      	bne.n	8002336 <HAL_ADC_Start_IT+0x5e>
 800232a:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <HAL_ADC_Start_IT+0x168>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d115      	bne.n	8002362 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234c:	2b00      	cmp	r3, #0
 800234e:	d026      	beq.n	800239e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002358:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002360:	e01d      	b.n	800239e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a33      	ldr	r2, [pc, #204]	@ (8002440 <HAL_ADC_Start_IT+0x168>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d004      	beq.n	8002382 <HAL_ADC_Start_IT+0xaa>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2f      	ldr	r2, [pc, #188]	@ (800243c <HAL_ADC_Start_IT+0x164>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10d      	bne.n	800239e <HAL_ADC_Start_IT+0xc6>
 8002382:	4b2f      	ldr	r3, [pc, #188]	@ (8002440 <HAL_ADC_Start_IT+0x168>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002396:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	f023 0206 	bic.w	r2, r3, #6
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023b6:	e002      	b.n	80023be <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0202 	mvn.w	r2, #2
 80023ce:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023ee:	d113      	bne.n	8002418 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_ADC_Start_IT+0x164>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_ADC_Start_IT+0x168>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d108      	bne.n	8002418 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	e00c      	b.n	8002432 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e003      	b.n	8002432 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40012800 	.word	0x40012800
 8002440:	40012400 	.word	0x40012400

08002444 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03e      	beq.n	80024fc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d039      	beq.n	80024fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024aa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024ae:	d11d      	bne.n	80024ec <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d119      	bne.n	80024ec <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0220 	bic.w	r2, r2, #32
 80024c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7fe fef1 	bl	80012d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f06f 0212 	mvn.w	r2, #18
 80024fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002502:	2b00      	cmp	r3, #0
 8002504:	d04d      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d048      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002532:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002536:	d012      	beq.n	800255e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002542:	2b00      	cmp	r3, #0
 8002544:	d125      	bne.n	8002592 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002550:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002554:	d11d      	bne.n	8002592 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800256c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fa6c 	bl	8002a70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 020c 	mvn.w	r2, #12
 80025a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d012      	beq.n	80025d2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f809 	bl	80025da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0201 	mvn.w	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x20>
 8002608:	2302      	movs	r3, #2
 800260a:	e0dc      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x1da>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b06      	cmp	r3, #6
 800261a:	d81c      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b05      	subs	r3, #5
 800262e:	221f      	movs	r2, #31
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	4019      	ands	r1, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b05      	subs	r3, #5
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	635a      	str	r2, [r3, #52]	@ 0x34
 8002654:	e03c      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d81c      	bhi.n	8002698 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b23      	subs	r3, #35	@ 0x23
 8002670:	221f      	movs	r2, #31
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	4019      	ands	r1, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b23      	subs	r3, #35	@ 0x23
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
 8002696:	e01b      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b41      	subs	r3, #65	@ 0x41
 80026aa:	221f      	movs	r2, #31
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	4019      	ands	r1, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3b41      	subs	r3, #65	@ 0x41
 80026c4:	fa00 f203 	lsl.w	r2, r0, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	d91c      	bls.n	8002712 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	2207      	movs	r2, #7
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4019      	ands	r1, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6898      	ldr	r0, [r3, #8]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	3b1e      	subs	r3, #30
 8002704:	fa00 f203 	lsl.w	r2, r0, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	e019      	b.n	8002746 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6919      	ldr	r1, [r3, #16]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	2207      	movs	r2, #7
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	4019      	ands	r1, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6898      	ldr	r0, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	fa00 f203 	lsl.w	r2, r0, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b10      	cmp	r3, #16
 800274c:	d003      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002752:	2b11      	cmp	r3, #17
 8002754:	d132      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1d      	ldr	r2, [pc, #116]	@ (80027d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d125      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d126      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800277c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b10      	cmp	r3, #16
 8002784:	d11a      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a13      	ldr	r2, [pc, #76]	@ (80027d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	0c9a      	lsrs	r2, r3, #18
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800279c:	e002      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f9      	bne.n	800279e <HAL_ADC_ConfigChannel+0x1b2>
 80027aa:	e007      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012400 	.word	0x40012400
 80027d4:	20000000 	.word	0x20000000
 80027d8:	431bde83 	.word	0x431bde83

080027dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d040      	beq.n	800287c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800280a:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <ADC_Enable+0xac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1f      	ldr	r2, [pc, #124]	@ (800288c <ADC_Enable+0xb0>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0c9b      	lsrs	r3, r3, #18
 8002816:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002818:	e002      	b.n	8002820 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002826:	f7ff fc75 	bl	8002114 <HAL_GetTick>
 800282a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800282c:	e01f      	b.n	800286e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800282e:	f7ff fc71 	bl	8002114 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d918      	bls.n	800286e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d011      	beq.n	800286e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e007      	b.n	800287e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d1d8      	bne.n	800282e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000000 	.word	0x20000000
 800288c:	431bde83 	.word	0x431bde83

08002890 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d12e      	bne.n	8002908 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ba:	f7ff fc2b 	bl	8002114 <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028c0:	e01b      	b.n	80028fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028c2:	f7ff fc27 	bl	8002114 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d914      	bls.n	80028fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10d      	bne.n	80028fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e007      	b.n	800290a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d0dc      	beq.n	80028c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADCEx_Calibration_Start+0x1e>
 800292e:	2302      	movs	r3, #2
 8002930:	e097      	b.n	8002a62 <HAL_ADCEx_Calibration_Start+0x14e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffa8 	bl	8002890 <ADC_ConversionStop_Disable>
 8002940:	4603      	mov	r3, r0
 8002942:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff49 	bl	80027dc <ADC_Enable>
 800294a:	4603      	mov	r3, r0
 800294c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 8081 	bne.w	8002a58 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800295e:	f023 0302 	bic.w	r3, r3, #2
 8002962:	f043 0202 	orr.w	r2, r3, #2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800296a:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_ADCEx_Calibration_Start+0x158>)
 800296c:	681c      	ldr	r4, [r3, #0]
 800296e:	2002      	movs	r0, #2
 8002970:	f003 fb24 	bl	8005fbc <HAL_RCCEx_GetPeriphCLKFreq>
 8002974:	4603      	mov	r3, r0
 8002976:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800297a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800297c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800297e:	e002      	b.n	8002986 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3b01      	subs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f9      	bne.n	8002980 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0208 	orr.w	r2, r2, #8
 800299a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800299c:	f7ff fbba 	bl	8002114 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80029a2:	e01b      	b.n	80029dc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80029a4:	f7ff fbb6 	bl	8002114 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b0a      	cmp	r3, #10
 80029b0:	d914      	bls.n	80029dc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	f023 0312 	bic.w	r3, r3, #18
 80029c8:	f043 0210 	orr.w	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e042      	b.n	8002a62 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1dc      	bne.n	80029a4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0204 	orr.w	r2, r2, #4
 80029f8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80029fa:	f7ff fb8b 	bl	8002114 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a00:	e01b      	b.n	8002a3a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a02:	f7ff fb87 	bl	8002114 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b0a      	cmp	r3, #10
 8002a0e:	d914      	bls.n	8002a3a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	f023 0312 	bic.w	r3, r3, #18
 8002a26:	f043 0210 	orr.w	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e013      	b.n	8002a62 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1dc      	bne.n	8002a02 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4c:	f023 0303 	bic.w	r3, r3, #3
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd90      	pop	{r4, r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000

08002a70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0ed      	b.n	8002c70 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe ffd7 	bl	8001a54 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab6:	f7ff fb2d 	bl	8002114 <HAL_GetTick>
 8002aba:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002abc:	e012      	b.n	8002ae4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002abe:	f7ff fb29 	bl	8002114 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b0a      	cmp	r3, #10
 8002aca:	d90b      	bls.n	8002ae4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2205      	movs	r2, #5
 8002adc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0c5      	b.n	8002c70 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0e5      	beq.n	8002abe <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0202 	bic.w	r2, r2, #2
 8002b00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b02:	f7ff fb07 	bl	8002114 <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b08:	e012      	b.n	8002b30 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b0a:	f7ff fb03 	bl	8002114 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b0a      	cmp	r3, #10
 8002b16:	d90b      	bls.n	8002b30 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2205      	movs	r2, #5
 8002b28:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e09f      	b.n	8002c70 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e5      	bne.n	8002b0a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7e1b      	ldrb	r3, [r3, #24]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e007      	b.n	8002b68 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7e5b      	ldrb	r3, [r3, #25]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d108      	bne.n	8002b82 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e007      	b.n	8002b92 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7e9b      	ldrb	r3, [r3, #26]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d108      	bne.n	8002bac <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0220 	orr.w	r2, r2, #32
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e007      	b.n	8002bbc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0220 	bic.w	r2, r2, #32
 8002bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7edb      	ldrb	r3, [r3, #27]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d108      	bne.n	8002bd6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0210 	bic.w	r2, r2, #16
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e007      	b.n	8002be6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0210 	orr.w	r2, r2, #16
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7f1b      	ldrb	r3, [r3, #28]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d108      	bne.n	8002c00 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0208 	orr.w	r2, r2, #8
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e007      	b.n	8002c10 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0208 	bic.w	r2, r2, #8
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7f5b      	ldrb	r3, [r3, #29]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d108      	bne.n	8002c2a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0204 	orr.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e007      	b.n	8002c3a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0204 	bic.w	r2, r2, #4
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	ea42 0103 	orr.w	r1, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	1e5a      	subs	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e015      	b.n	8002cb6 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f817 	bl	8002cbe <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fe ff4f 	bl	8001b34 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d133      	bne.n	8002d3a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce2:	f7ff fa17 	bl	8002114 <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ce8:	e012      	b.n	8002d10 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cea:	f7ff fa13 	bl	8002114 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b0a      	cmp	r3, #10
 8002cf6:	d90b      	bls.n	8002d10 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2205      	movs	r2, #5
 8002d08:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e01b      	b.n	8002d48 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0e5      	beq.n	8002cea <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0202 	bic.w	r2, r2, #2
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e006      	b.n	8002d48 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	@ 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d07c      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2201      	movs	r2, #1
 8002da6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f983 	bl	80030be <HAL_CAN_TxMailbox0CompleteCallback>
 8002db8:	e016      	b.n	8002de8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dcc:	e00c      	b.n	8002de8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de0:	e002      	b.n	8002de8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f986 	bl	80030f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d024      	beq.n	8002e3c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f962 	bl	80030d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e0c:	e016      	b.n	8002e3c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e20:	e00c      	b.n	8002e3c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e34:	e002      	b.n	8002e3c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f965 	bl	8003106 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d024      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f941 	bl	80030e2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e60:	e016      	b.n	8002e90 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d004      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e74:	e00c      	b.n	8002e90 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e88:	e002      	b.n	8002e90 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f944 	bl	8003118 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f933 	bl	800313c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f91b 	bl	800312a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2210      	movs	r2, #16
 8002f16:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2208      	movs	r2, #8
 8002f32:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f913 	bl	8003160 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8fb 	bl	800314e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f8fc 	bl	8003172 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2208      	movs	r2, #8
 8002f94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8f4 	bl	8003184 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d07b      	beq.n	800309e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d072      	beq.n	8003096 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	f043 0302 	orr.w	r3, r3, #2
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800300a:	2b00      	cmp	r3, #0
 800300c:	d043      	beq.n	8003096 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	d03e      	beq.n	8003096 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800301e:	2b60      	cmp	r3, #96	@ 0x60
 8003020:	d02b      	beq.n	800307a <HAL_CAN_IRQHandler+0x32a>
 8003022:	2b60      	cmp	r3, #96	@ 0x60
 8003024:	d82e      	bhi.n	8003084 <HAL_CAN_IRQHandler+0x334>
 8003026:	2b50      	cmp	r3, #80	@ 0x50
 8003028:	d022      	beq.n	8003070 <HAL_CAN_IRQHandler+0x320>
 800302a:	2b50      	cmp	r3, #80	@ 0x50
 800302c:	d82a      	bhi.n	8003084 <HAL_CAN_IRQHandler+0x334>
 800302e:	2b40      	cmp	r3, #64	@ 0x40
 8003030:	d019      	beq.n	8003066 <HAL_CAN_IRQHandler+0x316>
 8003032:	2b40      	cmp	r3, #64	@ 0x40
 8003034:	d826      	bhi.n	8003084 <HAL_CAN_IRQHandler+0x334>
 8003036:	2b30      	cmp	r3, #48	@ 0x30
 8003038:	d010      	beq.n	800305c <HAL_CAN_IRQHandler+0x30c>
 800303a:	2b30      	cmp	r3, #48	@ 0x30
 800303c:	d822      	bhi.n	8003084 <HAL_CAN_IRQHandler+0x334>
 800303e:	2b10      	cmp	r3, #16
 8003040:	d002      	beq.n	8003048 <HAL_CAN_IRQHandler+0x2f8>
 8003042:	2b20      	cmp	r3, #32
 8003044:	d005      	beq.n	8003052 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003046:	e01d      	b.n	8003084 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	f043 0308 	orr.w	r3, r3, #8
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003050:	e019      	b.n	8003086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	f043 0310 	orr.w	r3, r3, #16
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800305a:	e014      	b.n	8003086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	f043 0320 	orr.w	r3, r3, #32
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003064:	e00f      	b.n	8003086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800306e:	e00a      	b.n	8003086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003078:	e005      	b.n	8003086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003082:	e000      	b.n	8003086 <HAL_CAN_IRQHandler+0x336>
            break;
 8003084:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003094:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2204      	movs	r2, #4
 800309c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f870 	bl	8003196 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030b6:	bf00      	nop
 80030b8:	3728      	adds	r7, #40	@ 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b8:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c4:	4013      	ands	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b04      	ldr	r3, [pc, #16]	@ (8003208 <__NVIC_GetPriorityGrouping+0x18>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0307 	and.w	r3, r3, #7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db0b      	blt.n	8003236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4906      	ldr	r1, [pc, #24]	@ (8003240 <__NVIC_EnableIRQ+0x34>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db12      	blt.n	800327c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	490a      	ldr	r1, [pc, #40]	@ (8003288 <__NVIC_DisableIRQ+0x44>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	3320      	adds	r3, #32
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003270:	f3bf 8f4f 	dsb	sy
}
 8003274:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003276:	f3bf 8f6f 	isb	sy
}
 800327a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	db0a      	blt.n	80032b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	490c      	ldr	r1, [pc, #48]	@ (80032d8 <__NVIC_SetPriority+0x4c>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b4:	e00a      	b.n	80032cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4908      	ldr	r1, [pc, #32]	@ (80032dc <__NVIC_SetPriority+0x50>)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3b04      	subs	r3, #4
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	440b      	add	r3, r1
 80032ca:	761a      	strb	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e100 	.word	0xe000e100
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	@ 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1c3 0307 	rsb	r3, r3, #7
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	bf28      	it	cs
 80032fe:	2304      	movcs	r3, #4
 8003300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3304      	adds	r3, #4
 8003306:	2b06      	cmp	r3, #6
 8003308:	d902      	bls.n	8003310 <NVIC_EncodePriority+0x30>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3b03      	subs	r3, #3
 800330e:	e000      	b.n	8003312 <NVIC_EncodePriority+0x32>
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003328:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43d9      	mvns	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	4313      	orrs	r3, r2
         );
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	@ 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003354:	d301      	bcc.n	800335a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003356:	2301      	movs	r3, #1
 8003358:	e00f      	b.n	800337a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335a:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <SysTick_Config+0x40>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003362:	210f      	movs	r1, #15
 8003364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003368:	f7ff ff90 	bl	800328c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800336c:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <SysTick_Config+0x40>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003372:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <SysTick_Config+0x40>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	e000e010 	.word	0xe000e010

08003388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff09 	bl	80031a8 <__NVIC_SetPriorityGrouping>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b0:	f7ff ff1e 	bl	80031f0 <__NVIC_GetPriorityGrouping>
 80033b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff90 	bl	80032e0 <NVIC_EncodePriority>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff5f 	bl	800328c <__NVIC_SetPriority>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff11 	bl	800320c <__NVIC_EnableIRQ>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff1f 	bl	8003244 <__NVIC_DisableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff94 	bl	8003344 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e043      	b.n	80034c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b22      	ldr	r3, [pc, #136]	@ (80034d0 <HAL_DMA_Init+0xa8>)
 8003446:	4413      	add	r3, r2
 8003448:	4a22      	ldr	r2, [pc, #136]	@ (80034d4 <HAL_DMA_Init+0xac>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	009a      	lsls	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1f      	ldr	r2, [pc, #124]	@ (80034d8 <HAL_DMA_Init+0xb0>)
 800345a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003472:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	bffdfff8 	.word	0xbffdfff8
 80034d4:	cccccccd 	.word	0xcccccccd
 80034d8:	40020000 	.word	0x40020000

080034dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d04f      	beq.n	80035a4 <HAL_DMA_IRQHandler+0xc8>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a66      	ldr	r2, [pc, #408]	@ (80036cc <HAL_DMA_IRQHandler+0x1f0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d029      	beq.n	800358a <HAL_DMA_IRQHandler+0xae>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a65      	ldr	r2, [pc, #404]	@ (80036d0 <HAL_DMA_IRQHandler+0x1f4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <HAL_DMA_IRQHandler+0xaa>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a63      	ldr	r2, [pc, #396]	@ (80036d4 <HAL_DMA_IRQHandler+0x1f8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01a      	beq.n	8003580 <HAL_DMA_IRQHandler+0xa4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a62      	ldr	r2, [pc, #392]	@ (80036d8 <HAL_DMA_IRQHandler+0x1fc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d012      	beq.n	800357a <HAL_DMA_IRQHandler+0x9e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a60      	ldr	r2, [pc, #384]	@ (80036dc <HAL_DMA_IRQHandler+0x200>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00a      	beq.n	8003574 <HAL_DMA_IRQHandler+0x98>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5f      	ldr	r2, [pc, #380]	@ (80036e0 <HAL_DMA_IRQHandler+0x204>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d102      	bne.n	800356e <HAL_DMA_IRQHandler+0x92>
 8003568:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800356c:	e00e      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 800356e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003572:	e00b      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 8003574:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003578:	e008      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 800357a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800357e:	e005      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 8003580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003584:	e002      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 8003586:	2340      	movs	r3, #64	@ 0x40
 8003588:	e000      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 800358a:	2304      	movs	r3, #4
 800358c:	4a55      	ldr	r2, [pc, #340]	@ (80036e4 <HAL_DMA_IRQHandler+0x208>)
 800358e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8094 	beq.w	80036c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035a2:	e08e      	b.n	80036c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	2202      	movs	r2, #2
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d056      	beq.n	8003662 <HAL_DMA_IRQHandler+0x186>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d051      	beq.n	8003662 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 020a 	bic.w	r2, r2, #10
 80035da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a38      	ldr	r2, [pc, #224]	@ (80036cc <HAL_DMA_IRQHandler+0x1f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d029      	beq.n	8003642 <HAL_DMA_IRQHandler+0x166>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a37      	ldr	r2, [pc, #220]	@ (80036d0 <HAL_DMA_IRQHandler+0x1f4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_IRQHandler+0x162>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a35      	ldr	r2, [pc, #212]	@ (80036d4 <HAL_DMA_IRQHandler+0x1f8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01a      	beq.n	8003638 <HAL_DMA_IRQHandler+0x15c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <HAL_DMA_IRQHandler+0x1fc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d012      	beq.n	8003632 <HAL_DMA_IRQHandler+0x156>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_DMA_IRQHandler+0x200>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00a      	beq.n	800362c <HAL_DMA_IRQHandler+0x150>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a31      	ldr	r2, [pc, #196]	@ (80036e0 <HAL_DMA_IRQHandler+0x204>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d102      	bne.n	8003626 <HAL_DMA_IRQHandler+0x14a>
 8003620:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003624:	e00e      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 8003626:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800362a:	e00b      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 800362c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003630:	e008      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 8003632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003636:	e005      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 8003638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800363c:	e002      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 800363e:	2320      	movs	r3, #32
 8003640:	e000      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 8003642:	2302      	movs	r3, #2
 8003644:	4a27      	ldr	r2, [pc, #156]	@ (80036e4 <HAL_DMA_IRQHandler+0x208>)
 8003646:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d034      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003660:	e02f      	b.n	80036c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	2208      	movs	r2, #8
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d028      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x1e8>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020e 	bic.w	r2, r2, #14
 800368a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
    }
  }
  return;
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
}
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40020008 	.word	0x40020008
 80036d0:	4002001c 	.word	0x4002001c
 80036d4:	40020030 	.word	0x40020030
 80036d8:	40020044 	.word	0x40020044
 80036dc:	40020058 	.word	0x40020058
 80036e0:	4002006c 	.word	0x4002006c
 80036e4:	40020000 	.word	0x40020000

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b08b      	sub	sp, #44	@ 0x2c
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fa:	e169      	b.n	80039d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036fc:	2201      	movs	r2, #1
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 8158 	bne.w	80039ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4a9a      	ldr	r2, [pc, #616]	@ (8003988 <HAL_GPIO_Init+0x2a0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d05e      	beq.n	80037e2 <HAL_GPIO_Init+0xfa>
 8003724:	4a98      	ldr	r2, [pc, #608]	@ (8003988 <HAL_GPIO_Init+0x2a0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d875      	bhi.n	8003816 <HAL_GPIO_Init+0x12e>
 800372a:	4a98      	ldr	r2, [pc, #608]	@ (800398c <HAL_GPIO_Init+0x2a4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d058      	beq.n	80037e2 <HAL_GPIO_Init+0xfa>
 8003730:	4a96      	ldr	r2, [pc, #600]	@ (800398c <HAL_GPIO_Init+0x2a4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d86f      	bhi.n	8003816 <HAL_GPIO_Init+0x12e>
 8003736:	4a96      	ldr	r2, [pc, #600]	@ (8003990 <HAL_GPIO_Init+0x2a8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d052      	beq.n	80037e2 <HAL_GPIO_Init+0xfa>
 800373c:	4a94      	ldr	r2, [pc, #592]	@ (8003990 <HAL_GPIO_Init+0x2a8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d869      	bhi.n	8003816 <HAL_GPIO_Init+0x12e>
 8003742:	4a94      	ldr	r2, [pc, #592]	@ (8003994 <HAL_GPIO_Init+0x2ac>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d04c      	beq.n	80037e2 <HAL_GPIO_Init+0xfa>
 8003748:	4a92      	ldr	r2, [pc, #584]	@ (8003994 <HAL_GPIO_Init+0x2ac>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d863      	bhi.n	8003816 <HAL_GPIO_Init+0x12e>
 800374e:	4a92      	ldr	r2, [pc, #584]	@ (8003998 <HAL_GPIO_Init+0x2b0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d046      	beq.n	80037e2 <HAL_GPIO_Init+0xfa>
 8003754:	4a90      	ldr	r2, [pc, #576]	@ (8003998 <HAL_GPIO_Init+0x2b0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d85d      	bhi.n	8003816 <HAL_GPIO_Init+0x12e>
 800375a:	2b12      	cmp	r3, #18
 800375c:	d82a      	bhi.n	80037b4 <HAL_GPIO_Init+0xcc>
 800375e:	2b12      	cmp	r3, #18
 8003760:	d859      	bhi.n	8003816 <HAL_GPIO_Init+0x12e>
 8003762:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <HAL_GPIO_Init+0x80>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	080037e3 	.word	0x080037e3
 800376c:	080037bd 	.word	0x080037bd
 8003770:	080037cf 	.word	0x080037cf
 8003774:	08003811 	.word	0x08003811
 8003778:	08003817 	.word	0x08003817
 800377c:	08003817 	.word	0x08003817
 8003780:	08003817 	.word	0x08003817
 8003784:	08003817 	.word	0x08003817
 8003788:	08003817 	.word	0x08003817
 800378c:	08003817 	.word	0x08003817
 8003790:	08003817 	.word	0x08003817
 8003794:	08003817 	.word	0x08003817
 8003798:	08003817 	.word	0x08003817
 800379c:	08003817 	.word	0x08003817
 80037a0:	08003817 	.word	0x08003817
 80037a4:	08003817 	.word	0x08003817
 80037a8:	08003817 	.word	0x08003817
 80037ac:	080037c5 	.word	0x080037c5
 80037b0:	080037d9 	.word	0x080037d9
 80037b4:	4a79      	ldr	r2, [pc, #484]	@ (800399c <HAL_GPIO_Init+0x2b4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037ba:	e02c      	b.n	8003816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	623b      	str	r3, [r7, #32]
          break;
 80037c2:	e029      	b.n	8003818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	3304      	adds	r3, #4
 80037ca:	623b      	str	r3, [r7, #32]
          break;
 80037cc:	e024      	b.n	8003818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	3308      	adds	r3, #8
 80037d4:	623b      	str	r3, [r7, #32]
          break;
 80037d6:	e01f      	b.n	8003818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	330c      	adds	r3, #12
 80037de:	623b      	str	r3, [r7, #32]
          break;
 80037e0:	e01a      	b.n	8003818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037ea:	2304      	movs	r3, #4
 80037ec:	623b      	str	r3, [r7, #32]
          break;
 80037ee:	e013      	b.n	8003818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037f8:	2308      	movs	r3, #8
 80037fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	611a      	str	r2, [r3, #16]
          break;
 8003802:	e009      	b.n	8003818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003804:	2308      	movs	r3, #8
 8003806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	615a      	str	r2, [r3, #20]
          break;
 800380e:	e003      	b.n	8003818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
          break;
 8003814:	e000      	b.n	8003818 <HAL_GPIO_Init+0x130>
          break;
 8003816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2bff      	cmp	r3, #255	@ 0xff
 800381c:	d801      	bhi.n	8003822 <HAL_GPIO_Init+0x13a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	e001      	b.n	8003826 <HAL_GPIO_Init+0x13e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2bff      	cmp	r3, #255	@ 0xff
 800382c:	d802      	bhi.n	8003834 <HAL_GPIO_Init+0x14c>
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	e002      	b.n	800383a <HAL_GPIO_Init+0x152>
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	3b08      	subs	r3, #8
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	210f      	movs	r1, #15
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	401a      	ands	r2, r3
 800384c:	6a39      	ldr	r1, [r7, #32]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	431a      	orrs	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80b1 	beq.w	80039ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003868:	4b4d      	ldr	r3, [pc, #308]	@ (80039a0 <HAL_GPIO_Init+0x2b8>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4a4c      	ldr	r2, [pc, #304]	@ (80039a0 <HAL_GPIO_Init+0x2b8>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6193      	str	r3, [r2, #24]
 8003874:	4b4a      	ldr	r3, [pc, #296]	@ (80039a0 <HAL_GPIO_Init+0x2b8>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003880:	4a48      	ldr	r2, [pc, #288]	@ (80039a4 <HAL_GPIO_Init+0x2bc>)
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	089b      	lsrs	r3, r3, #2
 8003886:	3302      	adds	r3, #2
 8003888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	220f      	movs	r2, #15
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a40      	ldr	r2, [pc, #256]	@ (80039a8 <HAL_GPIO_Init+0x2c0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_GPIO_Init+0x1ec>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3f      	ldr	r2, [pc, #252]	@ (80039ac <HAL_GPIO_Init+0x2c4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00d      	beq.n	80038d0 <HAL_GPIO_Init+0x1e8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a3e      	ldr	r2, [pc, #248]	@ (80039b0 <HAL_GPIO_Init+0x2c8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d007      	beq.n	80038cc <HAL_GPIO_Init+0x1e4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a3d      	ldr	r2, [pc, #244]	@ (80039b4 <HAL_GPIO_Init+0x2cc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d101      	bne.n	80038c8 <HAL_GPIO_Init+0x1e0>
 80038c4:	2303      	movs	r3, #3
 80038c6:	e006      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038c8:	2304      	movs	r3, #4
 80038ca:	e004      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038d4:	2300      	movs	r3, #0
 80038d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d8:	f002 0203 	and.w	r2, r2, #3
 80038dc:	0092      	lsls	r2, r2, #2
 80038de:	4093      	lsls	r3, r2
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038e6:	492f      	ldr	r1, [pc, #188]	@ (80039a4 <HAL_GPIO_Init+0x2bc>)
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	3302      	adds	r3, #2
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003900:	4b2d      	ldr	r3, [pc, #180]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	492c      	ldr	r1, [pc, #176]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]
 800390c:	e006      	b.n	800391c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800390e:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	43db      	mvns	r3, r3
 8003916:	4928      	ldr	r1, [pc, #160]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003918:	4013      	ands	r3, r2
 800391a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d006      	beq.n	8003936 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003928:	4b23      	ldr	r3, [pc, #140]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	4922      	ldr	r1, [pc, #136]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	60cb      	str	r3, [r1, #12]
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003936:	4b20      	ldr	r3, [pc, #128]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	43db      	mvns	r3, r3
 800393e:	491e      	ldr	r1, [pc, #120]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003940:	4013      	ands	r3, r2
 8003942:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	4918      	ldr	r1, [pc, #96]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
 800395c:	e006      	b.n	800396c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	43db      	mvns	r3, r3
 8003966:	4914      	ldr	r1, [pc, #80]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003968:	4013      	ands	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d021      	beq.n	80039bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003978:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	490e      	ldr	r1, [pc, #56]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	e021      	b.n	80039ca <HAL_GPIO_Init+0x2e2>
 8003986:	bf00      	nop
 8003988:	10320000 	.word	0x10320000
 800398c:	10310000 	.word	0x10310000
 8003990:	10220000 	.word	0x10220000
 8003994:	10210000 	.word	0x10210000
 8003998:	10120000 	.word	0x10120000
 800399c:	10110000 	.word	0x10110000
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40010800 	.word	0x40010800
 80039ac:	40010c00 	.word	0x40010c00
 80039b0:	40011000 	.word	0x40011000
 80039b4:	40011400 	.word	0x40011400
 80039b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039bc:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <HAL_GPIO_Init+0x304>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	4909      	ldr	r1, [pc, #36]	@ (80039ec <HAL_GPIO_Init+0x304>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	3301      	adds	r3, #1
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f47f ae8e 	bne.w	80036fc <HAL_GPIO_Init+0x14>
  }
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	372c      	adds	r7, #44	@ 0x2c
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	40010400 	.word	0x40010400

080039f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	@ 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80039fe:	e09a      	b.n	8003b36 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a00:	2201      	movs	r2, #1
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 808d 	beq.w	8003b30 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003a16:	4a4e      	ldr	r2, [pc, #312]	@ (8003b50 <HAL_GPIO_DeInit+0x160>)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a46      	ldr	r2, [pc, #280]	@ (8003b54 <HAL_GPIO_DeInit+0x164>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <HAL_GPIO_DeInit+0x78>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a45      	ldr	r2, [pc, #276]	@ (8003b58 <HAL_GPIO_DeInit+0x168>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00d      	beq.n	8003a64 <HAL_GPIO_DeInit+0x74>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a44      	ldr	r2, [pc, #272]	@ (8003b5c <HAL_GPIO_DeInit+0x16c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <HAL_GPIO_DeInit+0x70>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a43      	ldr	r2, [pc, #268]	@ (8003b60 <HAL_GPIO_DeInit+0x170>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_GPIO_DeInit+0x6c>
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <HAL_GPIO_DeInit+0x7a>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	e004      	b.n	8003a6a <HAL_GPIO_DeInit+0x7a>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e002      	b.n	8003a6a <HAL_GPIO_DeInit+0x7a>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_GPIO_DeInit+0x7a>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	f002 0203 	and.w	r2, r2, #3
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	4093      	lsls	r3, r2
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d132      	bne.n	8003ae0 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b64 <HAL_GPIO_DeInit+0x174>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	4938      	ldr	r1, [pc, #224]	@ (8003b64 <HAL_GPIO_DeInit+0x174>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003a88:	4b36      	ldr	r3, [pc, #216]	@ (8003b64 <HAL_GPIO_DeInit+0x174>)
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	4934      	ldr	r1, [pc, #208]	@ (8003b64 <HAL_GPIO_DeInit+0x174>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003a96:	4b33      	ldr	r3, [pc, #204]	@ (8003b64 <HAL_GPIO_DeInit+0x174>)
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	4931      	ldr	r1, [pc, #196]	@ (8003b64 <HAL_GPIO_DeInit+0x174>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8003b64 <HAL_GPIO_DeInit+0x174>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	492d      	ldr	r1, [pc, #180]	@ (8003b64 <HAL_GPIO_DeInit+0x174>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	220f      	movs	r2, #15
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003ac2:	4a23      	ldr	r2, [pc, #140]	@ (8003b50 <HAL_GPIO_DeInit+0x160>)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	3302      	adds	r3, #2
 8003aca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	43da      	mvns	r2, r3
 8003ad2:	481f      	ldr	r0, [pc, #124]	@ (8003b50 <HAL_GPIO_DeInit+0x160>)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	400a      	ands	r2, r1
 8003ada:	3302      	adds	r3, #2
 8003adc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2bff      	cmp	r3, #255	@ 0xff
 8003ae4:	d801      	bhi.n	8003aea <HAL_GPIO_DeInit+0xfa>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	e001      	b.n	8003aee <HAL_GPIO_DeInit+0xfe>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3304      	adds	r3, #4
 8003aee:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2bff      	cmp	r3, #255	@ 0xff
 8003af4:	d802      	bhi.n	8003afc <HAL_GPIO_DeInit+0x10c>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	e002      	b.n	8003b02 <HAL_GPIO_DeInit+0x112>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3b08      	subs	r3, #8
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	210f      	movs	r1, #15
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	401a      	ands	r2, r3
 8003b14:	2104      	movs	r1, #4
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	3301      	adds	r3, #1
 8003b34:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f47f af5e 	bne.w	8003a00 <HAL_GPIO_DeInit+0x10>
  }
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3724      	adds	r7, #36	@ 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	40010000 	.word	0x40010000
 8003b54:	40010800 	.word	0x40010800
 8003b58:	40010c00 	.word	0x40010c00
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	40011400 	.word	0x40011400
 8003b64:	40010400 	.word	0x40010400

08003b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b78:	787b      	ldrb	r3, [r7, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b84:	e003      	b.n	8003b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	041a      	lsls	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0e8      	b.n	8003d7c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f007 fa4e 	bl	800b060 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 f92b 	bl	8006e32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be6:	f003 f901 	bl	8006dec <USB_CoreInit>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0bf      	b.n	8003d7c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 f92f 	bl	8006e66 <USB_SetCurrentMode>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0b0      	b.n	8003d7c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e03e      	b.n	8003c9e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3311      	adds	r3, #17
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	3310      	adds	r3, #16
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	3313      	adds	r3, #19
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	440b      	add	r3, r1
 8003c6a:	3320      	adds	r3, #32
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c70:	7bfa      	ldrb	r2, [r7, #15]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3324      	adds	r3, #36	@ 0x24
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	791b      	ldrb	r3, [r3, #4]
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d3bb      	bcc.n	8003c20 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	e044      	b.n	8003d38 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d06:	7bfa      	ldrb	r2, [r7, #15]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	440b      	add	r3, r1
 8003d14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	440b      	add	r3, r1
 8003d2a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	3301      	adds	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	791b      	ldrb	r3, [r3, #4]
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d3b5      	bcc.n	8003cae <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4c:	f003 f897 	bl	8006e7e <USB_DevInit>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e00c      	b.n	8003d7c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f005 fb16 	bl	80093a6 <USB_DevDisconnect>

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_PCD_Start+0x16>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e016      	b.n	8003dc8 <HAL_PCD_Start+0x44>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f003 f82d 	bl	8006e06 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003dac:	2101      	movs	r1, #1
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f007 fbc9 	bl	800b546 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f005 faea 	bl	8009392 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 faec 	bl	80093ba <USB_ReadInterrupts>
 8003de2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fb1a 	bl	8004428 <PCD_EP_ISR_Handler>

    return;
 8003df4:	e119      	b.n	800402a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d013      	beq.n	8003e28 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e12:	b292      	uxth	r2, r2
 8003e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f007 f99c 	bl	800b156 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f905 	bl	8004030 <HAL_PCD_SetAddress>

    return;
 8003e26:	e100      	b.n	800402a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e44:	b292      	uxth	r2, r2
 8003e46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e4a:	e0ee      	b.n	800402a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e6e:	e0dc      	b.n	800402a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d027      	beq.n	8003eca <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0204 	bic.w	r2, r2, #4
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0208 	bic.w	r2, r2, #8
 8003ea4:	b292      	uxth	r2, r2
 8003ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f007 f98c 	bl	800b1c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ec2:	b292      	uxth	r2, r2
 8003ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ec8:	e0af      	b.n	800402a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8083 	beq.w	8003fdc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e010      	b.n	8003efe <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	441a      	add	r2, r3
 8003ee8:	7ffb      	ldrb	r3, [r7, #31]
 8003eea:	8812      	ldrh	r2, [r2, #0]
 8003eec:	b292      	uxth	r2, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	3320      	adds	r3, #32
 8003ef2:	443b      	add	r3, r7
 8003ef4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003ef8:	7ffb      	ldrb	r3, [r7, #31]
 8003efa:	3301      	adds	r3, #1
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	7ffb      	ldrb	r3, [r7, #31]
 8003f00:	2b07      	cmp	r3, #7
 8003f02:	d9eb      	bls.n	8003edc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	b292      	uxth	r2, r2
 8003f18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003f34:	bf00      	nop
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f6      	beq.n	8003f36 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e00f      	b.n	8003f86 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	7ffa      	ldrb	r2, [r7, #31]
 8003f70:	0092      	lsls	r2, r2, #2
 8003f72:	440a      	add	r2, r1
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	3320      	adds	r3, #32
 8003f78:	443b      	add	r3, r7
 8003f7a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003f7e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003f80:	7ffb      	ldrb	r3, [r7, #31]
 8003f82:	3301      	adds	r3, #1
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	7ffb      	ldrb	r3, [r7, #31]
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d9ec      	bls.n	8003f66 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0208 	orr.w	r2, r2, #8
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0204 	orr.w	r2, r2, #4
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f007 f8dd 	bl	800b194 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003fda:	e026      	b.n	800402a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00f      	beq.n	8004006 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ff8:	b292      	uxth	r2, r2
 8003ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f007 f89b 	bl	800b13a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004004:	e011      	b.n	800402a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00c      	beq.n	800402a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004022:	b292      	uxth	r2, r2
 8004024:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004028:	bf00      	nop
  }
}
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_PCD_SetAddress+0x1a>
 8004046:	2302      	movs	r3, #2
 8004048:	e012      	b.n	8004070 <HAL_PCD_SetAddress+0x40>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f005 f983 	bl	800936c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	70fb      	strb	r3, [r7, #3]
 800408a:	460b      	mov	r3, r1
 800408c:	803b      	strh	r3, [r7, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800409a:	2b00      	cmp	r3, #0
 800409c:	da0e      	bge.n	80040bc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	f003 0207 	and.w	r2, r3, #7
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	3310      	adds	r3, #16
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	705a      	strb	r2, [r3, #1]
 80040ba:	e00e      	b.n	80040da <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	f003 0207 	and.w	r2, r3, #7
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040e6:	883a      	ldrh	r2, [r7, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	78ba      	ldrb	r2, [r7, #2]
 80040f0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040f2:	78bb      	ldrb	r3, [r7, #2]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d102      	bne.n	80040fe <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_PCD_EP_Open+0x94>
 8004108:	2302      	movs	r3, #2
 800410a:	e00e      	b.n	800412a <HAL_PCD_EP_Open+0xb2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68f9      	ldr	r1, [r7, #12]
 800411a:	4618      	mov	r0, r3
 800411c:	f002 fecc 	bl	8006eb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004128:	7afb      	ldrb	r3, [r7, #11]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800413e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	da0e      	bge.n	8004164 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 0207 	and.w	r2, r3, #7
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	3310      	adds	r3, #16
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	705a      	strb	r2, [r3, #1]
 8004162:	e00e      	b.n	8004182 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	f003 0207 	and.w	r2, r3, #7
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_PCD_EP_Close+0x6a>
 8004198:	2302      	movs	r3, #2
 800419a:	e00e      	b.n	80041ba <HAL_PCD_EP_Close+0x88>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f003 fa44 	bl	8007638 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	460b      	mov	r3, r1
 80041d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d2:	7afb      	ldrb	r3, [r7, #11]
 80041d4:	f003 0207 	and.w	r2, r3, #7
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2200      	movs	r2, #0
 80041fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2200      	movs	r2, #0
 8004200:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004202:	7afb      	ldrb	r3, [r7, #11]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	b2da      	uxtb	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6979      	ldr	r1, [r7, #20]
 8004214:	4618      	mov	r0, r3
 8004216:	f003 fbfb 	bl	8007a10 <USB_EPStartXfer>

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	f003 0207 	and.w	r2, r3, #7
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	460b      	mov	r3, r1
 8004260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 0207 	and.w	r2, r3, #7
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	3310      	adds	r3, #16
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2201      	movs	r2, #1
 800429c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 fbad 	bl	8007a10 <USB_EPStartXfer>

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	7912      	ldrb	r2, [r2, #4]
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e04c      	b.n	8004378 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da0e      	bge.n	8004304 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	f003 0207 	and.w	r2, r3, #7
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	3310      	adds	r3, #16
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	705a      	strb	r2, [r3, #1]
 8004302:	e00c      	b.n	800431e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	b2da      	uxtb	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_PCD_EP_SetStall+0x7e>
 800433a:	2302      	movs	r3, #2
 800433c:	e01c      	b.n	8004378 <HAL_PCD_EP_SetStall+0xb8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	4618      	mov	r0, r3
 800434e:	f004 ff10 	bl	8009172 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	2b00      	cmp	r3, #0
 800435a:	d108      	bne.n	800436e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f005 f835 	bl	80093d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	7912      	ldrb	r2, [r2, #4]
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e040      	b.n	8004420 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800439e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da0e      	bge.n	80043c4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	f003 0207 	and.w	r2, r3, #7
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	3310      	adds	r3, #16
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	705a      	strb	r2, [r3, #1]
 80043c2:	e00e      	b.n	80043e2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	f003 0207 	and.w	r2, r3, #7
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_PCD_EP_ClrStall+0x82>
 80043fe:	2302      	movs	r3, #2
 8004400:	e00e      	b.n	8004420 <HAL_PCD_EP_ClrStall+0xa0>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	4618      	mov	r0, r3
 8004412:	f004 fefe 	bl	8009212 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b096      	sub	sp, #88	@ 0x58
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004430:	e3bb      	b.n	8004baa <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800443a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800443e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800444c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8175 	bne.w	8004740 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004456:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d14e      	bne.n	8004500 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	81fb      	strh	r3, [r7, #14]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	89fb      	ldrh	r3, [r7, #14]
 800447a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004482:	b29b      	uxth	r3, r3
 8004484:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3310      	adds	r3, #16
 800448a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004494:	b29b      	uxth	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	3302      	adds	r3, #2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80044b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	441a      	add	r2, r3
 80044c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80044c6:	2100      	movs	r1, #0
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f006 fe1c 	bl	800b106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	7b5b      	ldrb	r3, [r3, #13]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8368 	beq.w	8004baa <PCD_EP_ISR_Handler+0x782>
 80044da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 8363 	bne.w	8004baa <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7b5b      	ldrb	r3, [r3, #13]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	735a      	strb	r2, [r3, #13]
 80044fe:	e354      	b.n	8004baa <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004506:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004512:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800451a:	2b00      	cmp	r3, #0
 800451c:	d034      	beq.n	8004588 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004526:	b29b      	uxth	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	3306      	adds	r3, #6
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004548:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004556:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800455a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800455c:	b29b      	uxth	r3, r3
 800455e:	f004 ff8b 	bl	8009478 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29a      	uxth	r2, r3
 800456a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800456e:	4013      	ands	r3, r2
 8004570:	823b      	strh	r3, [r7, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	8a3a      	ldrh	r2, [r7, #16]
 8004578:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800457c:	b292      	uxth	r2, r2
 800457e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f006 fd93 	bl	800b0ac <HAL_PCD_SetupStageCallback>
 8004586:	e310      	b.n	8004baa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004588:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800458c:	2b00      	cmp	r3, #0
 800458e:	f280 830c 	bge.w	8004baa <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29a      	uxth	r2, r3
 800459a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800459e:	4013      	ands	r3, r2
 80045a0:	83fb      	strh	r3, [r7, #30]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	8bfa      	ldrh	r2, [r7, #30]
 80045a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045ac:	b292      	uxth	r2, r2
 80045ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	3306      	adds	r3, #6
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d019      	beq.n	8004618 <PCD_EP_ISR_Handler+0x1f0>
 80045e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f2:	6959      	ldr	r1, [r3, #20]
 80045f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80045f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f004 ff3b 	bl	8009478 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	441a      	add	r2, r3
 800460c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800460e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004610:	2100      	movs	r1, #0
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f006 fd5c 	bl	800b0d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004622:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 82bd 	bne.w	8004baa <PCD_EP_ISR_Handler+0x782>
 8004630:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004634:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004638:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800463c:	f000 82b5 	beq.w	8004baa <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800464e:	b29b      	uxth	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	4413      	add	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466a:	b29a      	uxth	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b3e      	cmp	r3, #62	@ 0x3e
 8004676:	d91d      	bls.n	80046b4 <PCD_EP_ISR_Handler+0x28c>
 8004678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <PCD_EP_ISR_Handler+0x26a>
 800468c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800468e:	3b01      	subs	r3, #1
 8004690:	647b      	str	r3, [r7, #68]	@ 0x44
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29a      	uxth	r2, r3
 8004698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800469a:	b29b      	uxth	r3, r3
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	e026      	b.n	8004702 <PCD_EP_ISR_Handler+0x2da>
 80046b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <PCD_EP_ISR_Handler+0x2aa>
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	e017      	b.n	8004702 <PCD_EP_ISR_Handler+0x2da>
 80046d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <PCD_EP_ISR_Handler+0x2c4>
 80046e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e8:	3301      	adds	r3, #1
 80046ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	029b      	lsls	r3, r3, #10
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	4313      	orrs	r3, r2
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800470e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004712:	827b      	strh	r3, [r7, #18]
 8004714:	8a7b      	ldrh	r3, [r7, #18]
 8004716:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800471a:	827b      	strh	r3, [r7, #18]
 800471c:	8a7b      	ldrh	r3, [r7, #18]
 800471e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004722:	827b      	strh	r3, [r7, #18]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	8a7b      	ldrh	r3, [r7, #18]
 800472a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800472e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800473a:	b29b      	uxth	r3, r3
 800473c:	8013      	strh	r3, [r2, #0]
 800473e:	e234      	b.n	8004baa <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004754:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004758:	2b00      	cmp	r3, #0
 800475a:	f280 80fc 	bge.w	8004956 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29a      	uxth	r2, r3
 8004770:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004774:	4013      	ands	r3, r2
 8004776:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800478c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004790:	b292      	uxth	r2, r2
 8004792:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004794:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4413      	add	r3, r2
 80047a8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80047aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ac:	7b1b      	ldrb	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d125      	bne.n	80047fe <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4413      	add	r3, r2
 80047c6:	3306      	adds	r3, #6
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047da:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80047de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8092 	beq.w	800490c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ee:	6959      	ldr	r1, [r3, #20]
 80047f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f2:	88da      	ldrh	r2, [r3, #6]
 80047f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047f8:	f004 fe3e 	bl	8009478 <USB_ReadPMA>
 80047fc:	e086      	b.n	800490c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80047fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004800:	78db      	ldrb	r3, [r3, #3]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d10a      	bne.n	800481c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004806:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800480a:	461a      	mov	r2, r3
 800480c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f9d9 	bl	8004bc6 <HAL_PCD_EP_DB_Receive>
 8004814:	4603      	mov	r3, r0
 8004816:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800481a:	e077      	b.n	800490c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004836:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800484c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004858:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800485c:	b29b      	uxth	r3, r3
 800485e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d024      	beq.n	80048c4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	3302      	adds	r3, #2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048a2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80048a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02e      	beq.n	800490c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	6959      	ldr	r1, [r3, #20]
 80048b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b8:	891a      	ldrh	r2, [r3, #8]
 80048ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80048be:	f004 fddb 	bl	8009478 <USB_ReadPMA>
 80048c2:	e023      	b.n	800490c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	3306      	adds	r3, #6
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80048f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048fe:	6959      	ldr	r1, [r3, #20]
 8004900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004902:	895a      	ldrh	r2, [r3, #10]
 8004904:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004908:	f004 fdb6 	bl	8009478 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800490c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004914:	441a      	add	r2, r3
 8004916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004918:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800491a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004922:	441a      	add	r2, r3
 8004924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004926:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <PCD_EP_ISR_Handler+0x514>
 8004930:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	429a      	cmp	r2, r3
 800493a:	d206      	bcs.n	800494a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800493c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f006 fbc4 	bl	800b0d0 <HAL_PCD_DataOutStageCallback>
 8004948:	e005      	b.n	8004956 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004950:	4618      	mov	r0, r3
 8004952:	f003 f85d 	bl	8007a10 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004956:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800495a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8123 	beq.w	8004baa <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004964:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	3310      	adds	r3, #16
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800498e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004992:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80049a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80049b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b6:	78db      	ldrb	r3, [r3, #3]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 80a2 	bne.w	8004b02 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80049be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c0:	2200      	movs	r2, #0
 80049c2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80049c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c6:	7b1b      	ldrb	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8093 	beq.w	8004af4 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d046      	beq.n	8004a68 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d126      	bne.n	8004a30 <PCD_EP_ISR_Handler+0x608>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	4413      	add	r3, r2
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	011a      	lsls	r2, r3, #4
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	4413      	add	r3, r2
 8004a04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	e061      	b.n	8004af4 <PCD_EP_ISR_Handler+0x6cc>
 8004a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d15d      	bne.n	8004af4 <PCD_EP_ISR_Handler+0x6cc>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4c:	4413      	add	r3, r2
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	011a      	lsls	r2, r3, #4
 8004a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a58:	4413      	add	r3, r2
 8004a5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	2200      	movs	r2, #0
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	e045      	b.n	8004af4 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a70:	785b      	ldrb	r3, [r3, #1]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d126      	bne.n	8004ac4 <PCD_EP_ISR_Handler+0x69c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	4413      	add	r3, r2
 8004a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	011a      	lsls	r2, r3, #4
 8004a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a96:	4413      	add	r3, r2
 8004a98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	e017      	b.n	8004af4 <PCD_EP_ISR_Handler+0x6cc>
 8004ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d113      	bne.n	8004af4 <PCD_EP_ISR_Handler+0x6cc>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ada:	4413      	add	r3, r2
 8004adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	011a      	lsls	r2, r3, #4
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	2200      	movs	r2, #0
 8004af2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f006 fb03 	bl	800b106 <HAL_PCD_DataInStageCallback>
 8004b00:	e053      	b.n	8004baa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004b02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d146      	bne.n	8004b9c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	3302      	adds	r3, #2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b36:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d907      	bls.n	8004b56 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b4e:	1ad2      	subs	r2, r2, r3
 8004b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b52:	619a      	str	r2, [r3, #24]
 8004b54:	e002      	b.n	8004b5c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b58:	2200      	movs	r2, #0
 8004b5a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f006 facb 	bl	800b106 <HAL_PCD_DataInStageCallback>
 8004b70:	e01b      	b.n	8004baa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b7a:	441a      	add	r2, r3
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b88:	441a      	add	r2, r3
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b94:	4618      	mov	r0, r3
 8004b96:	f002 ff3b 	bl	8007a10 <USB_EPStartXfer>
 8004b9a:	e006      	b.n	8004baa <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004b9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f91b 	bl	8004de0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	b21b      	sxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f6ff ac3b 	blt.w	8004432 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3758      	adds	r7, #88	@ 0x58
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b088      	sub	sp, #32
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d07e      	beq.n	8004cdc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c06:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	8b7b      	ldrh	r3, [r7, #26]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d306      	bcc.n	8004c20 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	8b7b      	ldrh	r3, [r7, #26]
 8004c18:	1ad2      	subs	r2, r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	619a      	str	r2, [r3, #24]
 8004c1e:	e002      	b.n	8004c26 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d123      	bne.n	8004c76 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c48:	833b      	strh	r3, [r7, #24]
 8004c4a:	8b3b      	ldrh	r3, [r7, #24]
 8004c4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c50:	833b      	strh	r3, [r7, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	8b3b      	ldrh	r3, [r7, #24]
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01f      	beq.n	8004cc0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9a:	82fb      	strh	r3, [r7, #22]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	8afb      	ldrh	r3, [r7, #22]
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004cc0:	8b7b      	ldrh	r3, [r7, #26]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8087 	beq.w	8004dd6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6959      	ldr	r1, [r3, #20]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	891a      	ldrh	r2, [r3, #8]
 8004cd4:	8b7b      	ldrh	r3, [r7, #26]
 8004cd6:	f004 fbcf 	bl	8009478 <USB_ReadPMA>
 8004cda:	e07c      	b.n	8004dd6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	3306      	adds	r3, #6
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	8b7b      	ldrh	r3, [r7, #26]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d306      	bcc.n	8004d1e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	8b7b      	ldrh	r3, [r7, #26]
 8004d16:	1ad2      	subs	r2, r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	619a      	str	r2, [r3, #24]
 8004d1c:	e002      	b.n	8004d24 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d123      	bne.n	8004d74 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d46:	83fb      	strh	r3, [r7, #30]
 8004d48:	8bfb      	ldrh	r3, [r7, #30]
 8004d4a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d4e:	83fb      	strh	r3, [r7, #30]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	8bfb      	ldrh	r3, [r7, #30]
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11f      	bne.n	8004dbe <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d98:	83bb      	strh	r3, [r7, #28]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	8bbb      	ldrh	r3, [r7, #28]
 8004daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004db6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004dbe:	8b7b      	ldrh	r3, [r7, #26]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6959      	ldr	r1, [r3, #20]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	895a      	ldrh	r2, [r3, #10]
 8004dd0:	8b7b      	ldrh	r3, [r7, #26]
 8004dd2:	f004 fb51 	bl	8009478 <USB_ReadPMA>
    }
  }

  return count;
 8004dd6:	8b7b      	ldrh	r3, [r7, #26]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b0a4      	sub	sp, #144	@ 0x90
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 81dd 	beq.w	80051b4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3302      	adds	r3, #2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e22:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d907      	bls.n	8004e42 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e3a:	1ad2      	subs	r2, r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	619a      	str	r2, [r3, #24]
 8004e40:	e002      	b.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 80b9 	bne.w	8004fc4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d126      	bne.n	8004ea8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6e:	4413      	add	r3, r2
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	011a      	lsls	r2, r3, #4
 8004e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	e01a      	b.n	8004ede <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d116      	bne.n	8004ede <HAL_PCD_EP_DB_Transmit+0xfe>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec4:	4413      	add	r3, r2
 8004ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	011a      	lsls	r2, r3, #4
 8004ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	2200      	movs	r2, #0
 8004edc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d126      	bne.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x15a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	011a      	lsls	r2, r3, #4
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e017      	b.n	8004f6a <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d113      	bne.n	8004f6a <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	4413      	add	r3, r2
 8004f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	011a      	lsls	r2, r3, #4
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f62:	623b      	str	r3, [r7, #32]
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	2200      	movs	r2, #0
 8004f68:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f006 f8c8 	bl	800b106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 82fc 	beq.w	800557a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9c:	82fb      	strh	r3, [r7, #22]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8afb      	ldrh	r3, [r7, #22]
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]
 8004fc2:	e2da      	b.n	800557a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d021      	beq.n	8005012 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005006:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800500a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005018:	2b01      	cmp	r3, #1
 800501a:	f040 82ae 	bne.w	800557a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005026:	441a      	add	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005034:	441a      	add	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	429a      	cmp	r2, r3
 8005044:	d30b      	bcc.n	800505e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	621a      	str	r2, [r3, #32]
 800505c:	e017      	b.n	800508e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005066:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800506a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005076:	e00a      	b.n	800508e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2200      	movs	r2, #0
 800508c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d165      	bne.n	8005162 <HAL_PCD_EP_DB_Transmit+0x382>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050aa:	4413      	add	r3, r2
 80050ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	011a      	lsls	r2, r3, #4
 80050b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b6:	4413      	add	r3, r2
 80050b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80050d4:	d91d      	bls.n	8005112 <HAL_PCD_EP_DB_Transmit+0x332>
 80050d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <HAL_PCD_EP_DB_Transmit+0x310>
 80050ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ec:	3b01      	subs	r3, #1
 80050ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4313      	orrs	r3, r2
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e044      	b.n	800519c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <HAL_PCD_EP_DB_Transmit+0x350>
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005128:	b29a      	uxth	r2, r3
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	e035      	b.n	800519c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005130:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_PCD_EP_DB_Transmit+0x36a>
 8005144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005146:	3301      	adds	r3, #1
 8005148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29a      	uxth	r2, r3
 8005150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005152:	b29b      	uxth	r3, r3
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b29b      	uxth	r3, r3
 8005158:	4313      	orrs	r3, r2
 800515a:	b29a      	uxth	r2, r3
 800515c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	e01c      	b.n	800519c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d118      	bne.n	800519c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005178:	b29b      	uxth	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517e:	4413      	add	r3, r2
 8005180:	647b      	str	r3, [r7, #68]	@ 0x44
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	011a      	lsls	r2, r3, #4
 8005188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800518a:	4413      	add	r3, r2
 800518c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005190:	643b      	str	r3, [r7, #64]	@ 0x40
 8005192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005196:	b29a      	uxth	r2, r3
 8005198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800519a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6959      	ldr	r1, [r3, #20]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	891a      	ldrh	r2, [r3, #8]
 80051a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f004 f91e 	bl	80093ee <USB_WritePMA>
 80051b2:	e1e2      	b.n	800557a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	3306      	adds	r3, #6
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051dc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	699a      	ldr	r2, [r3, #24]
 80051e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d307      	bcc.n	80051fc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051f4:	1ad2      	subs	r2, r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	619a      	str	r2, [r3, #24]
 80051fa:	e002      	b.n	8005202 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 80c0 	bne.w	800538c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d126      	bne.n	8005262 <HAL_PCD_EP_DB_Transmit+0x482>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005222:	b29b      	uxth	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005228:	4413      	add	r3, r2
 800522a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	011a      	lsls	r2, r3, #4
 8005232:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005234:	4413      	add	r3, r2
 8005236:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800523a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800523c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005246:	b29a      	uxth	r2, r3
 8005248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525a:	b29a      	uxth	r2, r3
 800525c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	e01a      	b.n	8005298 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d116      	bne.n	8005298 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800527e:	4413      	add	r3, r2
 8005280:	667b      	str	r3, [r7, #100]	@ 0x64
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	011a      	lsls	r2, r3, #4
 8005288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800528a:	4413      	add	r3, r2
 800528c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005290:	663b      	str	r3, [r7, #96]	@ 0x60
 8005292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005294:	2200      	movs	r2, #0
 8005296:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	677b      	str	r3, [r7, #116]	@ 0x74
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	785b      	ldrb	r3, [r3, #1]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d12b      	bne.n	80052fe <HAL_PCD_EP_DB_Transmit+0x51e>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ba:	4413      	add	r3, r2
 80052bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	011a      	lsls	r2, r3, #4
 80052c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052c6:	4413      	add	r3, r2
 80052c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052dc:	b29a      	uxth	r2, r3
 80052de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	e017      	b.n	800532e <HAL_PCD_EP_DB_Transmit+0x54e>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d113      	bne.n	800532e <HAL_PCD_EP_DB_Transmit+0x54e>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005314:	4413      	add	r3, r2
 8005316:	677b      	str	r3, [r7, #116]	@ 0x74
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	011a      	lsls	r2, r3, #4
 800531e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005320:	4413      	add	r3, r2
 8005322:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005326:	673b      	str	r3, [r7, #112]	@ 0x70
 8005328:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800532a:	2200      	movs	r2, #0
 800532c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	4619      	mov	r1, r3
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f005 fee6 	bl	800b106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005340:	2b00      	cmp	r3, #0
 8005342:	f040 811a 	bne.w	800557a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005360:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800537a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800537e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005386:	b29b      	uxth	r3, r3
 8005388:	8013      	strh	r3, [r2, #0]
 800538a:	e0f6      	b.n	800557a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d121      	bne.n	80053da <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	f040 80ca 	bne.w	800557a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	695a      	ldr	r2, [r3, #20]
 80053ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053ee:	441a      	add	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053fc:	441a      	add	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	429a      	cmp	r2, r3
 800540c:	d30b      	bcc.n	8005426 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	621a      	str	r2, [r3, #32]
 8005424:	e017      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d108      	bne.n	8005440 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800542e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800543e:	e00a      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2200      	movs	r2, #0
 800544c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	657b      	str	r3, [r7, #84]	@ 0x54
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d165      	bne.n	8005530 <HAL_PCD_EP_DB_Transmit+0x750>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005472:	b29b      	uxth	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005478:	4413      	add	r3, r2
 800547a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	011a      	lsls	r2, r3, #4
 8005482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005484:	4413      	add	r3, r2
 8005486:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800548a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800548c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005496:	b29a      	uxth	r2, r3
 8005498:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80054a2:	d91d      	bls.n	80054e0 <HAL_PCD_EP_DB_Transmit+0x700>
 80054a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <HAL_PCD_EP_DB_Transmit+0x6de>
 80054b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ba:	3b01      	subs	r3, #1
 80054bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	029b      	lsls	r3, r3, #10
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	4313      	orrs	r3, r2
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d8:	b29a      	uxth	r2, r3
 80054da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	e041      	b.n	8005564 <HAL_PCD_EP_DB_Transmit+0x784>
 80054e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <HAL_PCD_EP_DB_Transmit+0x71e>
 80054e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e032      	b.n	8005564 <HAL_PCD_EP_DB_Transmit+0x784>
 80054fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_PCD_EP_DB_Transmit+0x738>
 8005512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005514:	3301      	adds	r3, #1
 8005516:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29a      	uxth	r2, r3
 800551e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005520:	b29b      	uxth	r3, r3
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	b29b      	uxth	r3, r3
 8005526:	4313      	orrs	r3, r2
 8005528:	b29a      	uxth	r2, r3
 800552a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	e019      	b.n	8005564 <HAL_PCD_EP_DB_Transmit+0x784>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d115      	bne.n	8005564 <HAL_PCD_EP_DB_Transmit+0x784>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005546:	4413      	add	r3, r2
 8005548:	657b      	str	r3, [r7, #84]	@ 0x54
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	011a      	lsls	r2, r3, #4
 8005550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005552:	4413      	add	r3, r2
 8005554:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005558:	653b      	str	r3, [r7, #80]	@ 0x50
 800555a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800555e:	b29a      	uxth	r2, r3
 8005560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005562:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6959      	ldr	r1, [r3, #20]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	895a      	ldrh	r2, [r3, #10]
 8005570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005574:	b29b      	uxth	r3, r3
 8005576:	f003 ff3a 	bl	80093ee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005594:	82bb      	strh	r3, [r7, #20]
 8005596:	8abb      	ldrh	r3, [r7, #20]
 8005598:	f083 0310 	eor.w	r3, r3, #16
 800559c:	82bb      	strh	r3, [r7, #20]
 800559e:	8abb      	ldrh	r3, [r7, #20]
 80055a0:	f083 0320 	eor.w	r3, r3, #32
 80055a4:	82bb      	strh	r3, [r7, #20]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	8abb      	ldrh	r3, [r7, #20]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3790      	adds	r7, #144	@ 0x90
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	817b      	strh	r3, [r7, #10]
 80055e2:	4613      	mov	r3, r2
 80055e4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80055e6:	897b      	ldrh	r3, [r7, #10]
 80055e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	897b      	ldrh	r3, [r7, #10]
 80055f4:	f003 0207 	and.w	r2, r3, #7
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	3310      	adds	r3, #16
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e009      	b.n	800561e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800560a:	897a      	ldrh	r2, [r7, #10]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800561e:	893b      	ldrh	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2200      	movs	r2, #0
 8005628:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	b29a      	uxth	r2, r3
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	80da      	strh	r2, [r3, #6]
 8005632:	e00b      	b.n	800564c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2201      	movs	r2, #1
 8005638:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	b29a      	uxth	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	b29a      	uxth	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e272      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8087 	beq.w	8005786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005678:	4b92      	ldr	r3, [pc, #584]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 030c 	and.w	r3, r3, #12
 8005680:	2b04      	cmp	r3, #4
 8005682:	d00c      	beq.n	800569e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005684:	4b8f      	ldr	r3, [pc, #572]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 030c 	and.w	r3, r3, #12
 800568c:	2b08      	cmp	r3, #8
 800568e:	d112      	bne.n	80056b6 <HAL_RCC_OscConfig+0x5e>
 8005690:	4b8c      	ldr	r3, [pc, #560]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800569c:	d10b      	bne.n	80056b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569e:	4b89      	ldr	r3, [pc, #548]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d06c      	beq.n	8005784 <HAL_RCC_OscConfig+0x12c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d168      	bne.n	8005784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e24c      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056be:	d106      	bne.n	80056ce <HAL_RCC_OscConfig+0x76>
 80056c0:	4b80      	ldr	r3, [pc, #512]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a7f      	ldr	r2, [pc, #508]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80056c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	e02e      	b.n	800572c <HAL_RCC_OscConfig+0xd4>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCC_OscConfig+0x98>
 80056d6:	4b7b      	ldr	r3, [pc, #492]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7a      	ldr	r2, [pc, #488]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	4b78      	ldr	r3, [pc, #480]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a77      	ldr	r2, [pc, #476]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80056e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e01d      	b.n	800572c <HAL_RCC_OscConfig+0xd4>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056f8:	d10c      	bne.n	8005714 <HAL_RCC_OscConfig+0xbc>
 80056fa:	4b72      	ldr	r3, [pc, #456]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a71      	ldr	r2, [pc, #452]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4b6f      	ldr	r3, [pc, #444]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a6e      	ldr	r2, [pc, #440]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 800570c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e00b      	b.n	800572c <HAL_RCC_OscConfig+0xd4>
 8005714:	4b6b      	ldr	r3, [pc, #428]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6a      	ldr	r2, [pc, #424]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 800571a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4b68      	ldr	r3, [pc, #416]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a67      	ldr	r2, [pc, #412]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800572a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d013      	beq.n	800575c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005734:	f7fc fcee 	bl	8002114 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800573c:	f7fc fcea 	bl	8002114 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b64      	cmp	r3, #100	@ 0x64
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e200      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574e:	4b5d      	ldr	r3, [pc, #372]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0xe4>
 800575a:	e014      	b.n	8005786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fc fcda 	bl	8002114 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005764:	f7fc fcd6 	bl	8002114 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b64      	cmp	r3, #100	@ 0x64
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e1ec      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005776:	4b53      	ldr	r3, [pc, #332]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x10c>
 8005782:	e000      	b.n	8005786 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d063      	beq.n	800585a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005792:	4b4c      	ldr	r3, [pc, #304]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800579e:	4b49      	ldr	r3, [pc, #292]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d11c      	bne.n	80057e4 <HAL_RCC_OscConfig+0x18c>
 80057aa:	4b46      	ldr	r3, [pc, #280]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d116      	bne.n	80057e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057b6:	4b43      	ldr	r3, [pc, #268]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_RCC_OscConfig+0x176>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d001      	beq.n	80057ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e1c0      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ce:	4b3d      	ldr	r3, [pc, #244]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4939      	ldr	r1, [pc, #228]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057e2:	e03a      	b.n	800585a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d020      	beq.n	800582e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ec:	4b36      	ldr	r3, [pc, #216]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f2:	f7fc fc8f 	bl	8002114 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fa:	f7fc fc8b 	bl	8002114 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e1a1      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580c:	4b2d      	ldr	r3, [pc, #180]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005818:	4b2a      	ldr	r3, [pc, #168]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4927      	ldr	r1, [pc, #156]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005828:	4313      	orrs	r3, r2
 800582a:	600b      	str	r3, [r1, #0]
 800582c:	e015      	b.n	800585a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800582e:	4b26      	ldr	r3, [pc, #152]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005834:	f7fc fc6e 	bl	8002114 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583c:	f7fc fc6a 	bl	8002114 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e180      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584e:	4b1d      	ldr	r3, [pc, #116]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d03a      	beq.n	80058dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d019      	beq.n	80058a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800586e:	4b17      	ldr	r3, [pc, #92]	@ (80058cc <HAL_RCC_OscConfig+0x274>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005874:	f7fc fc4e 	bl	8002114 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800587c:	f7fc fc4a 	bl	8002114 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e160      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800588e:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <HAL_RCC_OscConfig+0x26c>)
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800589a:	2001      	movs	r0, #1
 800589c:	f000 faba 	bl	8005e14 <RCC_Delay>
 80058a0:	e01c      	b.n	80058dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a2:	4b0a      	ldr	r3, [pc, #40]	@ (80058cc <HAL_RCC_OscConfig+0x274>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a8:	f7fc fc34 	bl	8002114 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ae:	e00f      	b.n	80058d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b0:	f7fc fc30 	bl	8002114 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d908      	bls.n	80058d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e146      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
 80058c2:	bf00      	nop
 80058c4:	40021000 	.word	0x40021000
 80058c8:	42420000 	.word	0x42420000
 80058cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d0:	4b92      	ldr	r3, [pc, #584]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e9      	bne.n	80058b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80a6 	beq.w	8005a36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ee:	4b8b      	ldr	r3, [pc, #556]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10d      	bne.n	8005916 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fa:	4b88      	ldr	r3, [pc, #544]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	4a87      	ldr	r2, [pc, #540]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005904:	61d3      	str	r3, [r2, #28]
 8005906:	4b85      	ldr	r3, [pc, #532]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005912:	2301      	movs	r3, #1
 8005914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005916:	4b82      	ldr	r3, [pc, #520]	@ (8005b20 <HAL_RCC_OscConfig+0x4c8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d118      	bne.n	8005954 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005922:	4b7f      	ldr	r3, [pc, #508]	@ (8005b20 <HAL_RCC_OscConfig+0x4c8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a7e      	ldr	r2, [pc, #504]	@ (8005b20 <HAL_RCC_OscConfig+0x4c8>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800592c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800592e:	f7fc fbf1 	bl	8002114 <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005936:	f7fc fbed 	bl	8002114 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b64      	cmp	r3, #100	@ 0x64
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e103      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005948:	4b75      	ldr	r3, [pc, #468]	@ (8005b20 <HAL_RCC_OscConfig+0x4c8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d106      	bne.n	800596a <HAL_RCC_OscConfig+0x312>
 800595c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	4a6e      	ldr	r2, [pc, #440]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	6213      	str	r3, [r2, #32]
 8005968:	e02d      	b.n	80059c6 <HAL_RCC_OscConfig+0x36e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x334>
 8005972:	4b6a      	ldr	r3, [pc, #424]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	4a69      	ldr	r2, [pc, #420]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	6213      	str	r3, [r2, #32]
 800597e:	4b67      	ldr	r3, [pc, #412]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	4a66      	ldr	r2, [pc, #408]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005984:	f023 0304 	bic.w	r3, r3, #4
 8005988:	6213      	str	r3, [r2, #32]
 800598a:	e01c      	b.n	80059c6 <HAL_RCC_OscConfig+0x36e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	2b05      	cmp	r3, #5
 8005992:	d10c      	bne.n	80059ae <HAL_RCC_OscConfig+0x356>
 8005994:	4b61      	ldr	r3, [pc, #388]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	4a60      	ldr	r2, [pc, #384]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 800599a:	f043 0304 	orr.w	r3, r3, #4
 800599e:	6213      	str	r3, [r2, #32]
 80059a0:	4b5e      	ldr	r3, [pc, #376]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	4a5d      	ldr	r2, [pc, #372]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	6213      	str	r3, [r2, #32]
 80059ac:	e00b      	b.n	80059c6 <HAL_RCC_OscConfig+0x36e>
 80059ae:	4b5b      	ldr	r3, [pc, #364]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	4a5a      	ldr	r2, [pc, #360]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	6213      	str	r3, [r2, #32]
 80059ba:	4b58      	ldr	r3, [pc, #352]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	4a57      	ldr	r2, [pc, #348]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80059c0:	f023 0304 	bic.w	r3, r3, #4
 80059c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d015      	beq.n	80059fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ce:	f7fc fba1 	bl	8002114 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fc fb9d 	bl	8002114 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e0b1      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ec:	4b4b      	ldr	r3, [pc, #300]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ee      	beq.n	80059d6 <HAL_RCC_OscConfig+0x37e>
 80059f8:	e014      	b.n	8005a24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059fa:	f7fc fb8b 	bl	8002114 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a00:	e00a      	b.n	8005a18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a02:	f7fc fb87 	bl	8002114 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e09b      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a18:	4b40      	ldr	r3, [pc, #256]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1ee      	bne.n	8005a02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d105      	bne.n	8005a36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4a3b      	ldr	r2, [pc, #236]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8087 	beq.w	8005b4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a40:	4b36      	ldr	r3, [pc, #216]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 030c 	and.w	r3, r3, #12
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d061      	beq.n	8005b10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d146      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a54:	4b33      	ldr	r3, [pc, #204]	@ (8005b24 <HAL_RCC_OscConfig+0x4cc>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5a:	f7fc fb5b 	bl	8002114 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a62:	f7fc fb57 	bl	8002114 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e06d      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a74:	4b29      	ldr	r3, [pc, #164]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f0      	bne.n	8005a62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a88:	d108      	bne.n	8005a9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a8a:	4b24      	ldr	r3, [pc, #144]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	4921      	ldr	r1, [pc, #132]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a19      	ldr	r1, [r3, #32]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	430b      	orrs	r3, r1
 8005aae:	491b      	ldr	r1, [pc, #108]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b24 <HAL_RCC_OscConfig+0x4cc>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fc fb2b 	bl	8002114 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fc fb27 	bl	8002114 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e03d      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ad4:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x46a>
 8005ae0:	e035      	b.n	8005b4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae2:	4b10      	ldr	r3, [pc, #64]	@ (8005b24 <HAL_RCC_OscConfig+0x4cc>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae8:	f7fc fb14 	bl	8002114 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af0:	f7fc fb10 	bl	8002114 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e026      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b02:	4b06      	ldr	r3, [pc, #24]	@ (8005b1c <HAL_RCC_OscConfig+0x4c4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x498>
 8005b0e:	e01e      	b.n	8005b4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d107      	bne.n	8005b28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e019      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40007000 	.word	0x40007000
 8005b24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b28:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <HAL_RCC_OscConfig+0x500>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d106      	bne.n	8005b4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d001      	beq.n	8005b4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40021000 	.word	0x40021000

08005b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0d0      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b70:	4b6a      	ldr	r3, [pc, #424]	@ (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d910      	bls.n	8005ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b67      	ldr	r3, [pc, #412]	@ (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 0207 	bic.w	r2, r3, #7
 8005b86:	4965      	ldr	r1, [pc, #404]	@ (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b63      	ldr	r3, [pc, #396]	@ (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0b8      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb8:	4b59      	ldr	r3, [pc, #356]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a58      	ldr	r2, [pc, #352]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bd0:	4b53      	ldr	r3, [pc, #332]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4a52      	ldr	r2, [pc, #328]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bdc:	4b50      	ldr	r3, [pc, #320]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	494d      	ldr	r1, [pc, #308]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d040      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	4b47      	ldr	r3, [pc, #284]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d115      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e07f      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b41      	ldr	r3, [pc, #260]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e073      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06b      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b39      	ldr	r3, [pc, #228]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4936      	ldr	r1, [pc, #216]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c4c:	f7fc fa62 	bl	8002114 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7fc fa5e 	bl	8002114 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e053      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b27      	ldr	r3, [pc, #156]	@ (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d210      	bcs.n	8005cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b24      	ldr	r3, [pc, #144]	@ (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 0207 	bic.w	r2, r3, #7
 8005c92:	4922      	ldr	r1, [pc, #136]	@ (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e032      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb8:	4b19      	ldr	r3, [pc, #100]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4916      	ldr	r1, [pc, #88]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cd6:	4b12      	ldr	r3, [pc, #72]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	490e      	ldr	r1, [pc, #56]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cea:	f000 f821 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	490a      	ldr	r1, [pc, #40]	@ (8005d24 <HAL_RCC_ClockConfig+0x1c8>)
 8005cfc:	5ccb      	ldrb	r3, [r1, r3]
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	4a09      	ldr	r2, [pc, #36]	@ (8005d28 <HAL_RCC_ClockConfig+0x1cc>)
 8005d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d06:	4b09      	ldr	r3, [pc, #36]	@ (8005d2c <HAL_RCC_ClockConfig+0x1d0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fc f9c0 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40022000 	.word	0x40022000
 8005d20:	40021000 	.word	0x40021000
 8005d24:	0800f1a8 	.word	0x0800f1a8
 8005d28:	20000000 	.word	0x20000000
 8005d2c:	20000004 	.word	0x20000004

08005d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	2300      	movs	r3, #0
 8005d44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d002      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0x30>
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d003      	beq.n	8005d66 <HAL_RCC_GetSysClockFreq+0x36>
 8005d5e:	e027      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d62:	613b      	str	r3, [r7, #16]
      break;
 8005d64:	e027      	b.n	8005db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	0c9b      	lsrs	r3, r3, #18
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	4a17      	ldr	r2, [pc, #92]	@ (8005dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d70:	5cd3      	ldrb	r3, [r2, r3]
 8005d72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d010      	beq.n	8005da0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d7e:	4b11      	ldr	r3, [pc, #68]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	0c5b      	lsrs	r3, r3, #17
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	4a11      	ldr	r2, [pc, #68]	@ (8005dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d8a:	5cd3      	ldrb	r3, [r2, r3]
 8005d8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a0d      	ldr	r2, [pc, #52]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d92:	fb03 f202 	mul.w	r2, r3, r2
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e004      	b.n	8005daa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	613b      	str	r3, [r7, #16]
      break;
 8005dae:	e002      	b.n	8005db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005db0:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005db2:	613b      	str	r3, [r7, #16]
      break;
 8005db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db6:	693b      	ldr	r3, [r7, #16]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bc80      	pop	{r7}
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	007a1200 	.word	0x007a1200
 8005dcc:	0800f1c0 	.word	0x0800f1c0
 8005dd0:	0800f1d0 	.word	0x0800f1d0
 8005dd4:	003d0900 	.word	0x003d0900

08005dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ddc:	4b02      	ldr	r3, [pc, #8]	@ (8005de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dde:	681b      	ldr	r3, [r3, #0]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	20000000 	.word	0x20000000

08005dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005df0:	f7ff fff2 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	0adb      	lsrs	r3, r3, #11
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	4903      	ldr	r1, [pc, #12]	@ (8005e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	0800f1b8 	.word	0x0800f1b8

08005e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <RCC_Delay+0x34>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a0a      	ldr	r2, [pc, #40]	@ (8005e4c <RCC_Delay+0x38>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	0a5b      	lsrs	r3, r3, #9
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e30:	bf00      	nop
  }
  while (Delay --);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1e5a      	subs	r2, r3, #1
 8005e36:	60fa      	str	r2, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f9      	bne.n	8005e30 <RCC_Delay+0x1c>
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr
 8005e48:	20000000 	.word	0x20000000
 8005e4c:	10624dd3 	.word	0x10624dd3

08005e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d07d      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e70:	4b4f      	ldr	r3, [pc, #316]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	4a4b      	ldr	r2, [pc, #300]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	61d3      	str	r3, [r2, #28]
 8005e88:	4b49      	ldr	r3, [pc, #292]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e98:	4b46      	ldr	r3, [pc, #280]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d118      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ea4:	4b43      	ldr	r3, [pc, #268]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a42      	ldr	r2, [pc, #264]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eb0:	f7fc f930 	bl	8002114 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb6:	e008      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb8:	f7fc f92c 	bl	8002114 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	@ 0x64
 8005ec4:	d901      	bls.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e06d      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eca:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0f0      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ed6:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ede:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02e      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d027      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005efc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005efe:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f04:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f0a:	4a29      	ldr	r2, [pc, #164]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d014      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1a:	f7fc f8fb 	bl	8002114 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f20:	e00a      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f22:	f7fc f8f7 	bl	8002114 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e036      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f38:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0ee      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f44:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4917      	ldr	r1, [pc, #92]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f5c:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	4a13      	ldr	r2, [pc, #76]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f74:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	490b      	ldr	r1, [pc, #44]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d008      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f92:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4904      	ldr	r1, [pc, #16]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	40007000 	.word	0x40007000
 8005fb8:	42420440 	.word	0x42420440

08005fbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	f200 808a 	bhi.w	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d045      	beq.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d075      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005ff2:	e082      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005ff4:	4b46      	ldr	r3, [pc, #280]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005ffa:	4b45      	ldr	r3, [pc, #276]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d07b      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	0c9b      	lsrs	r3, r3, #18
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	4a41      	ldr	r2, [pc, #260]	@ (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006010:	5cd3      	ldrb	r3, [r2, r3]
 8006012:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d015      	beq.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800601e:	4b3c      	ldr	r3, [pc, #240]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	0c5b      	lsrs	r3, r3, #17
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	4a3b      	ldr	r2, [pc, #236]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006038:	4a38      	ldr	r2, [pc, #224]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	e004      	b.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4a34      	ldr	r2, [pc, #208]	@ (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800604e:	fb02 f303 	mul.w	r3, r2, r3
 8006052:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006054:	4b2e      	ldr	r3, [pc, #184]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800605c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006060:	d102      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	61bb      	str	r3, [r7, #24]
      break;
 8006066:	e04a      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4a2d      	ldr	r2, [pc, #180]	@ (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	61bb      	str	r3, [r7, #24]
      break;
 8006076:	e042      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006078:	4b25      	ldr	r3, [pc, #148]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006088:	d108      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	e01f      	b.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a6:	d109      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80060a8:	4b19      	ldr	r3, [pc, #100]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80060b4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80060b8:	61bb      	str	r3, [r7, #24]
 80060ba:	e00f      	b.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060c6:	d11c      	bne.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80060c8:	4b11      	ldr	r3, [pc, #68]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d016      	beq.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80060d4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80060d8:	61bb      	str	r3, [r7, #24]
      break;
 80060da:	e012      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80060dc:	e011      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80060de:	f7ff fe85 	bl	8005dec <HAL_RCC_GetPCLK2Freq>
 80060e2:	4602      	mov	r2, r0
 80060e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0b9b      	lsrs	r3, r3, #14
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	3301      	adds	r3, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f6:	61bb      	str	r3, [r7, #24]
      break;
 80060f8:	e004      	b.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80060fa:	bf00      	nop
 80060fc:	e002      	b.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80060fe:	bf00      	nop
 8006100:	e000      	b.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006102:	bf00      	nop
    }
  }
  return (frequency);
 8006104:	69bb      	ldr	r3, [r7, #24]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40021000 	.word	0x40021000
 8006114:	0800f1d4 	.word	0x0800f1d4
 8006118:	0800f1e4 	.word	0x0800f1e4
 800611c:	007a1200 	.word	0x007a1200
 8006120:	003d0900 	.word	0x003d0900
 8006124:	aaaaaaab 	.word	0xaaaaaaab

08006128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e076      	b.n	8006228 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d108      	bne.n	8006154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800614a:	d009      	beq.n	8006160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	61da      	str	r2, [r3, #28]
 8006152:	e005      	b.n	8006160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fb fcfc 	bl	8001b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e4:	ea42 0103 	orr.w	r1, r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	0c1a      	lsrs	r2, r3, #16
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f002 0204 	and.w	r2, r2, #4
 8006206:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69da      	ldr	r2, [r3, #28]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006216:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e041      	b.n	80062c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fb fd96 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f000 fa10 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e041      	b.n	8006364 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f839 	bl	800636c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f000 f9c1 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
	...

08006380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800639a:	2302      	movs	r3, #2
 800639c:	e0ae      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b0c      	cmp	r3, #12
 80063aa:	f200 809f 	bhi.w	80064ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063ae:	a201      	add	r2, pc, #4	@ (adr r2, 80063b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063e9 	.word	0x080063e9
 80063b8:	080064ed 	.word	0x080064ed
 80063bc:	080064ed 	.word	0x080064ed
 80063c0:	080064ed 	.word	0x080064ed
 80063c4:	08006429 	.word	0x08006429
 80063c8:	080064ed 	.word	0x080064ed
 80063cc:	080064ed 	.word	0x080064ed
 80063d0:	080064ed 	.word	0x080064ed
 80063d4:	0800646b 	.word	0x0800646b
 80063d8:	080064ed 	.word	0x080064ed
 80063dc:	080064ed 	.word	0x080064ed
 80063e0:	080064ed 	.word	0x080064ed
 80063e4:	080064ab 	.word	0x080064ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f9be 	bl	8006770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0208 	orr.w	r2, r2, #8
 8006402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0204 	bic.w	r2, r2, #4
 8006412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6999      	ldr	r1, [r3, #24]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	619a      	str	r2, [r3, #24]
      break;
 8006426:	e064      	b.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fa04 	bl	800683c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6999      	ldr	r1, [r3, #24]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	021a      	lsls	r2, r3, #8
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	619a      	str	r2, [r3, #24]
      break;
 8006468:	e043      	b.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fa4d 	bl	8006910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0208 	orr.w	r2, r2, #8
 8006484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0204 	bic.w	r2, r2, #4
 8006494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69d9      	ldr	r1, [r3, #28]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	61da      	str	r2, [r3, #28]
      break;
 80064a8:	e023      	b.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fa97 	bl	80069e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69d9      	ldr	r1, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	021a      	lsls	r2, r3, #8
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	61da      	str	r2, [r3, #28]
      break;
 80064ea:	e002      	b.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
      break;
 80064f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIM_ConfigClockSource+0x1c>
 800651c:	2302      	movs	r3, #2
 800651e:	e0b4      	b.n	800668a <HAL_TIM_ConfigClockSource+0x186>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800653e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006558:	d03e      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0xd4>
 800655a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800655e:	f200 8087 	bhi.w	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006566:	f000 8086 	beq.w	8006676 <HAL_TIM_ConfigClockSource+0x172>
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656e:	d87f      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b70      	cmp	r3, #112	@ 0x70
 8006572:	d01a      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0xa6>
 8006574:	2b70      	cmp	r3, #112	@ 0x70
 8006576:	d87b      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006578:	2b60      	cmp	r3, #96	@ 0x60
 800657a:	d050      	beq.n	800661e <HAL_TIM_ConfigClockSource+0x11a>
 800657c:	2b60      	cmp	r3, #96	@ 0x60
 800657e:	d877      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b50      	cmp	r3, #80	@ 0x50
 8006582:	d03c      	beq.n	80065fe <HAL_TIM_ConfigClockSource+0xfa>
 8006584:	2b50      	cmp	r3, #80	@ 0x50
 8006586:	d873      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b40      	cmp	r3, #64	@ 0x40
 800658a:	d058      	beq.n	800663e <HAL_TIM_ConfigClockSource+0x13a>
 800658c:	2b40      	cmp	r3, #64	@ 0x40
 800658e:	d86f      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b30      	cmp	r3, #48	@ 0x30
 8006592:	d064      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x15a>
 8006594:	2b30      	cmp	r3, #48	@ 0x30
 8006596:	d86b      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b20      	cmp	r3, #32
 800659a:	d060      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x15a>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d867      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d05c      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x15a>
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d05a      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x15a>
 80065a8:	e062      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ba:	f000 fad8 	bl	8006b6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	609a      	str	r2, [r3, #8]
      break;
 80065d6:	e04f      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065e8:	f000 fac1 	bl	8006b6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065fa:	609a      	str	r2, [r3, #8]
      break;
 80065fc:	e03c      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800660a:	461a      	mov	r2, r3
 800660c:	f000 fa38 	bl	8006a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2150      	movs	r1, #80	@ 0x50
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fa8f 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 800661c:	e02c      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800662a:	461a      	mov	r2, r3
 800662c:	f000 fa56 	bl	8006adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2160      	movs	r1, #96	@ 0x60
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fa7f 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 800663c:	e01c      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800664a:	461a      	mov	r2, r3
 800664c:	f000 fa18 	bl	8006a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2140      	movs	r1, #64	@ 0x40
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fa6f 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 800665c:	e00c      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f000 fa66 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 800666e:	e003      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
      break;
 8006674:	e000      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006764 <TIM_Base_SetConfig+0xd0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <TIM_Base_SetConfig+0x30>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b2:	d007      	beq.n	80066c4 <TIM_Base_SetConfig+0x30>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006768 <TIM_Base_SetConfig+0xd4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_Base_SetConfig+0x30>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a2b      	ldr	r2, [pc, #172]	@ (800676c <TIM_Base_SetConfig+0xd8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d108      	bne.n	80066d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a22      	ldr	r2, [pc, #136]	@ (8006764 <TIM_Base_SetConfig+0xd0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00b      	beq.n	80066f6 <TIM_Base_SetConfig+0x62>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e4:	d007      	beq.n	80066f6 <TIM_Base_SetConfig+0x62>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006768 <TIM_Base_SetConfig+0xd4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <TIM_Base_SetConfig+0x62>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a1e      	ldr	r2, [pc, #120]	@ (800676c <TIM_Base_SetConfig+0xd8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d108      	bne.n	8006708 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a0d      	ldr	r2, [pc, #52]	@ (8006764 <TIM_Base_SetConfig+0xd0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d103      	bne.n	800673c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f023 0201 	bic.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	611a      	str	r2, [r3, #16]
  }
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800

08006770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	f023 0201 	bic.w	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f023 0302 	bic.w	r3, r3, #2
 80067b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006838 <TIM_OC1_SetConfig+0xc8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d10c      	bne.n	80067e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f023 0308 	bic.w	r3, r3, #8
 80067d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 0304 	bic.w	r3, r3, #4
 80067e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a13      	ldr	r2, [pc, #76]	@ (8006838 <TIM_OC1_SetConfig+0xc8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d111      	bne.n	8006812 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	621a      	str	r2, [r3, #32]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40012c00 	.word	0x40012c00

0800683c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f023 0210 	bic.w	r2, r3, #16
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800686a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f023 0320 	bic.w	r3, r3, #32
 8006886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <TIM_OC2_SetConfig+0xd0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d10d      	bne.n	80068b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a14      	ldr	r2, [pc, #80]	@ (800690c <TIM_OC2_SetConfig+0xd0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d113      	bne.n	80068e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr
 800690c:	40012c00 	.word	0x40012c00

08006910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a1d      	ldr	r2, [pc, #116]	@ (80069e0 <TIM_OC3_SetConfig+0xd0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d10d      	bne.n	800698a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a14      	ldr	r2, [pc, #80]	@ (80069e0 <TIM_OC3_SetConfig+0xd0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d113      	bne.n	80069ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	621a      	str	r2, [r3, #32]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40012c00 	.word	0x40012c00

080069e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8006a7c <TIM_OC4_SetConfig+0x98>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d109      	bne.n	8006a58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	019b      	lsls	r3, r3, #6
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr
 8006a7c:	40012c00 	.word	0x40012c00

08006a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f023 030a 	bic.w	r3, r3, #10
 8006abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0210 	bic.w	r2, r3, #16
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	031b      	lsls	r3, r3, #12
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f043 0307 	orr.w	r3, r3, #7
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	609a      	str	r2, [r3, #8]
}
 8006b64:	bf00      	nop
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr

08006b6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	021a      	lsls	r2, r3, #8
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	431a      	orrs	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	609a      	str	r2, [r3, #8]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr

08006bac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <HAL_TIMEx_PWMN_Start+0x24>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	e022      	b.n	8006c16 <HAL_TIMEx_PWMN_Start+0x6a>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d109      	bne.n	8006bea <HAL_TIMEx_PWMN_Start+0x3e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	bf14      	ite	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	2300      	moveq	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	e015      	b.n	8006c16 <HAL_TIMEx_PWMN_Start+0x6a>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d109      	bne.n	8006c04 <HAL_TIMEx_PWMN_Start+0x58>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	bf14      	ite	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	2300      	moveq	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	e008      	b.n	8006c16 <HAL_TIMEx_PWMN_Start+0x6a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	bf14      	ite	ne
 8006c10:	2301      	movne	r3, #1
 8006c12:	2300      	moveq	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e059      	b.n	8006cd2 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <HAL_TIMEx_PWMN_Start+0x82>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c2c:	e013      	b.n	8006c56 <HAL_TIMEx_PWMN_Start+0xaa>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d104      	bne.n	8006c3e <HAL_TIMEx_PWMN_Start+0x92>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c3c:	e00b      	b.n	8006c56 <HAL_TIMEx_PWMN_Start+0xaa>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d104      	bne.n	8006c4e <HAL_TIMEx_PWMN_Start+0xa2>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c4c:	e003      	b.n	8006c56 <HAL_TIMEx_PWMN_Start+0xaa>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 f8a0 	bl	8006da4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <HAL_TIMEx_PWMN_Start+0x130>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00e      	beq.n	8006c9c <HAL_TIMEx_PWMN_Start+0xf0>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c86:	d009      	beq.n	8006c9c <HAL_TIMEx_PWMN_Start+0xf0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ce0 <HAL_TIMEx_PWMN_Start+0x134>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_TIMEx_PWMN_Start+0xf0>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a13      	ldr	r2, [pc, #76]	@ (8006ce4 <HAL_TIMEx_PWMN_Start+0x138>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d111      	bne.n	8006cc0 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b06      	cmp	r3, #6
 8006cac:	d010      	beq.n	8006cd0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0201 	orr.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cbe:	e007      	b.n	8006cd0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40012c00 	.word	0x40012c00
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800

08006ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d101      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e046      	b.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a16      	ldr	r2, [pc, #88]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00e      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d4c:	d009      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a12      	ldr	r2, [pc, #72]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a10      	ldr	r2, [pc, #64]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10c      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr
 8006d98:	40012c00 	.word	0x40012c00
 8006d9c:	40000400 	.word	0x40000400
 8006da0:	40000800 	.word	0x40000800

08006da4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	2204      	movs	r2, #4
 8006db8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1a      	ldr	r2, [r3, #32]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	401a      	ands	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a1a      	ldr	r2, [r3, #32]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	4638      	mov	r0, r7
 8006df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e16:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006e1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr

08006e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e3a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006e3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	4013      	ands	r3, r2
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bc80      	pop	{r7}
 8006e64:	4770      	bx	lr

08006e66 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr

08006e7e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	4638      	mov	r0, r7
 8006e88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr

08006eb8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b09d      	sub	sp, #116	@ 0x74
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ede:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	78db      	ldrb	r3, [r3, #3]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d81f      	bhi.n	8006f2a <USB_ActivateEndpoint+0x72>
 8006eea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <USB_ActivateEndpoint+0x38>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f01 	.word	0x08006f01
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f33 	.word	0x08006f33
 8006efc:	08006f0f 	.word	0x08006f0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006f00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006f04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006f0c:	e012      	b.n	8006f34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006f0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006f12:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006f16:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006f1a:	e00b      	b.n	8006f34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006f1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006f20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006f28:	e004      	b.n	8006f34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006f30:	e000      	b.n	8006f34 <USB_ActivateEndpoint+0x7c>
      break;
 8006f32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	441a      	add	r2, r3
 8006f82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	7b1b      	ldrb	r3, [r3, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f040 8178 	bne.w	8007294 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8084 	beq.w	80070b6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	011a      	lsls	r2, r3, #4
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	88db      	ldrh	r3, [r3, #6]
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	827b      	strh	r3, [r7, #18]
 8006ff0:	8a7b      	ldrh	r3, [r7, #18]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01b      	beq.n	8007032 <USB_ActivateEndpoint+0x17a>
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800700c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007010:	823b      	strh	r3, [r7, #16]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	441a      	add	r2, r3
 800701c:	8a3b      	ldrh	r3, [r7, #16]
 800701e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800702a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800702e:	b29b      	uxth	r3, r3
 8007030:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	78db      	ldrb	r3, [r3, #3]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d020      	beq.n	800707c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800704c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007050:	81bb      	strh	r3, [r7, #12]
 8007052:	89bb      	ldrh	r3, [r7, #12]
 8007054:	f083 0320 	eor.w	r3, r3, #32
 8007058:	81bb      	strh	r3, [r7, #12]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	89bb      	ldrh	r3, [r7, #12]
 8007066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800706a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800706e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]
 800707a:	e2d5      	b.n	8007628 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800708e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007092:	81fb      	strh	r3, [r7, #14]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	89fb      	ldrh	r3, [r7, #14]
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]
 80070b4:	e2b8      	b.n	8007628 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c6:	4413      	add	r3, r2
 80070c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	011a      	lsls	r2, r3, #4
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80070d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	88db      	ldrh	r3, [r3, #6]
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fa:	4413      	add	r3, r2
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	011a      	lsls	r2, r3, #4
 8007104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007106:	4413      	add	r3, r2
 8007108:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007118:	b29a      	uxth	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b3e      	cmp	r3, #62	@ 0x3e
 8007124:	d91d      	bls.n	8007162 <USB_ActivateEndpoint+0x2aa>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <USB_ActivateEndpoint+0x288>
 800713a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800713c:	3b01      	subs	r3, #1
 800713e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29a      	uxth	r2, r3
 8007146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007148:	b29b      	uxth	r3, r3
 800714a:	029b      	lsls	r3, r3, #10
 800714c:	b29b      	uxth	r3, r3
 800714e:	4313      	orrs	r3, r2
 8007150:	b29b      	uxth	r3, r3
 8007152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715a:	b29a      	uxth	r2, r3
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	801a      	strh	r2, [r3, #0]
 8007160:	e026      	b.n	80071b0 <USB_ActivateEndpoint+0x2f8>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10a      	bne.n	8007180 <USB_ActivateEndpoint+0x2c8>
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007178:	b29a      	uxth	r2, r3
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e017      	b.n	80071b0 <USB_ActivateEndpoint+0x2f8>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <USB_ActivateEndpoint+0x2e2>
 8007194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007196:	3301      	adds	r3, #1
 8007198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29a      	uxth	r2, r3
 80071a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	029b      	lsls	r3, r3, #10
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	4313      	orrs	r3, r2
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80071be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <USB_ActivateEndpoint+0x348>
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071de:	843b      	strh	r3, [r7, #32]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	441a      	add	r2, r3
 80071ea:	8c3b      	ldrh	r3, [r7, #32]
 80071ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d124      	bne.n	8007252 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800721a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800721e:	83bb      	strh	r3, [r7, #28]
 8007220:	8bbb      	ldrh	r3, [r7, #28]
 8007222:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007226:	83bb      	strh	r3, [r7, #28]
 8007228:	8bbb      	ldrh	r3, [r7, #28]
 800722a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800722e:	83bb      	strh	r3, [r7, #28]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	8bbb      	ldrh	r3, [r7, #28]
 800723c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800724c:	b29b      	uxth	r3, r3
 800724e:	8013      	strh	r3, [r2, #0]
 8007250:	e1ea      	b.n	8007628 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007268:	83fb      	strh	r3, [r7, #30]
 800726a:	8bfb      	ldrh	r3, [r7, #30]
 800726c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007270:	83fb      	strh	r3, [r7, #30]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	441a      	add	r2, r3
 800727c:	8bfb      	ldrh	r3, [r7, #30]
 800727e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800728a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728e:	b29b      	uxth	r3, r3
 8007290:	8013      	strh	r3, [r2, #0]
 8007292:	e1c9      	b.n	8007628 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	78db      	ldrb	r3, [r3, #3]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d11e      	bne.n	80072da <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072b2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	441a      	add	r2, r3
 80072c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80072c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072cc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80072d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8013      	strh	r3, [r2, #0]
 80072d8:	e01d      	b.n	8007316 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80072ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800730a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800730e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007312:	b29b      	uxth	r3, r3
 8007314:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007320:	b29b      	uxth	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007326:	4413      	add	r3, r2
 8007328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	011a      	lsls	r2, r3, #4
 8007330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007332:	4413      	add	r3, r2
 8007334:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	891b      	ldrh	r3, [r3, #8]
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	657b      	str	r3, [r7, #84]	@ 0x54
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800735a:	4413      	add	r3, r2
 800735c:	657b      	str	r3, [r7, #84]	@ 0x54
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	011a      	lsls	r2, r3, #4
 8007364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007366:	4413      	add	r3, r2
 8007368:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800736c:	653b      	str	r3, [r7, #80]	@ 0x50
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	895b      	ldrh	r3, [r3, #10]
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	b29b      	uxth	r3, r3
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800737c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 8093 	bne.w	80074ae <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800739c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d01b      	beq.n	80073dc <USB_ActivateEndpoint+0x524>
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	441a      	add	r2, r3
 80073c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80073c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073d8:	b29b      	uxth	r3, r3
 80073da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80073ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80073ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <USB_ActivateEndpoint+0x574>
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800740a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	441a      	add	r2, r3
 8007416:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800741c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007424:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007428:	b29b      	uxth	r3, r3
 800742a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800743e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007442:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007444:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007446:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800744a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800744c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800744e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007452:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	441a      	add	r2, r3
 800745e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007460:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007464:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007468:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800746c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007470:	b29b      	uxth	r3, r3
 8007472:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800748a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	441a      	add	r2, r3
 8007496:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800749c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	8013      	strh	r3, [r2, #0]
 80074ac:	e0bc      	b.n	8007628 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80074be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80074c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01d      	beq.n	8007506 <USB_ActivateEndpoint+0x64e>
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	441a      	add	r2, r3
 80074ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80074f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007502:	b29b      	uxth	r3, r3
 8007504:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007516:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800751a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01d      	beq.n	800755e <USB_ActivateEndpoint+0x6a6>
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007538:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	441a      	add	r2, r3
 8007546:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800754a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800754e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007556:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800755a:	b29b      	uxth	r3, r3
 800755c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	78db      	ldrb	r3, [r3, #3]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d024      	beq.n	80075b0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800757c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007580:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007584:	f083 0320 	eor.w	r3, r3, #32
 8007588:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	441a      	add	r2, r3
 8007596:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800759a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800759e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8013      	strh	r3, [r2, #0]
 80075ae:	e01d      	b.n	80075ec <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	441a      	add	r2, r3
 80075d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80075d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007602:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800761c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007624:	b29b      	uxth	r3, r3
 8007626:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007628:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800762c:	4618      	mov	r0, r3
 800762e:	3774      	adds	r7, #116	@ 0x74
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop

08007638 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007638:	b480      	push	{r7}
 800763a:	b08d      	sub	sp, #52	@ 0x34
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	7b1b      	ldrb	r3, [r3, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f040 808e 	bne.w	8007768 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d044      	beq.n	80076de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	81bb      	strh	r3, [r7, #12]
 8007662:	89bb      	ldrh	r3, [r7, #12]
 8007664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01b      	beq.n	80076a4 <USB_DeactivateEndpoint+0x6c>
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	817b      	strh	r3, [r7, #10]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	441a      	add	r2, r3
 800768e:	897b      	ldrh	r3, [r7, #10]
 8007690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800769c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ba:	813b      	strh	r3, [r7, #8]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	441a      	add	r2, r3
 80076c6:	893b      	ldrh	r3, [r7, #8]
 80076c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d8:	b29b      	uxth	r3, r3
 80076da:	8013      	strh	r3, [r2, #0]
 80076dc:	e192      	b.n	8007a04 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	827b      	strh	r3, [r7, #18]
 80076ec:	8a7b      	ldrh	r3, [r7, #18]
 80076ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01b      	beq.n	800772e <USB_DeactivateEndpoint+0xf6>
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770c:	823b      	strh	r3, [r7, #16]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	441a      	add	r2, r3
 8007718:	8a3b      	ldrh	r3, [r7, #16]
 800771a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800771e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800772a:	b29b      	uxth	r3, r3
 800772c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007744:	81fb      	strh	r3, [r7, #14]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	441a      	add	r2, r3
 8007750:	89fb      	ldrh	r3, [r7, #14]
 8007752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800775e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007762:	b29b      	uxth	r3, r3
 8007764:	8013      	strh	r3, [r2, #0]
 8007766:	e14d      	b.n	8007a04 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 80a5 	bne.w	80078bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	843b      	strh	r3, [r7, #32]
 8007780:	8c3b      	ldrh	r3, [r7, #32]
 8007782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d01b      	beq.n	80077c2 <USB_DeactivateEndpoint+0x18a>
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800779c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a0:	83fb      	strh	r3, [r7, #30]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	441a      	add	r2, r3
 80077ac:	8bfb      	ldrh	r3, [r7, #30]
 80077ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077be:	b29b      	uxth	r3, r3
 80077c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	83bb      	strh	r3, [r7, #28]
 80077d0:	8bbb      	ldrh	r3, [r7, #28]
 80077d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01b      	beq.n	8007812 <USB_DeactivateEndpoint+0x1da>
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f0:	837b      	strh	r3, [r7, #26]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	441a      	add	r2, r3
 80077fc:	8b7b      	ldrh	r3, [r7, #26]
 80077fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800780a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800780e:	b29b      	uxth	r3, r3
 8007810:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007828:	833b      	strh	r3, [r7, #24]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	441a      	add	r2, r3
 8007834:	8b3b      	ldrh	r3, [r7, #24]
 8007836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800783a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800783e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007842:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007846:	b29b      	uxth	r3, r3
 8007848:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800785c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007860:	82fb      	strh	r3, [r7, #22]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	441a      	add	r2, r3
 800786c:	8afb      	ldrh	r3, [r7, #22]
 800786e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800787a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787e:	b29b      	uxth	r3, r3
 8007880:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007898:	82bb      	strh	r3, [r7, #20]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	441a      	add	r2, r3
 80078a4:	8abb      	ldrh	r3, [r7, #20]
 80078a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	8013      	strh	r3, [r2, #0]
 80078ba:	e0a3      	b.n	8007a04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80078ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80078cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01b      	beq.n	800790c <USB_DeactivateEndpoint+0x2d4>
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	441a      	add	r2, r3
 80078f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80078f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007900:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007908:	b29b      	uxth	r3, r3
 800790a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800791a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800791c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	d01b      	beq.n	800795c <USB_DeactivateEndpoint+0x324>
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800793a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	441a      	add	r2, r3
 8007946:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800794c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007954:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007958:	b29b      	uxth	r3, r3
 800795a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800796e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007972:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800798c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007990:	b29b      	uxth	r3, r3
 8007992:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	441a      	add	r2, r3
 80079b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	441a      	add	r2, r3
 80079ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80079f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3734      	adds	r7, #52	@ 0x34
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b0c2      	sub	sp, #264	@ 0x108
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a1e:	6018      	str	r0, [r3, #0]
 8007a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a28:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	f040 86b7 	bne.w	80087aa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d908      	bls.n	8007a6a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007a68:	e007      	b.n	8007a7a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	7b1b      	ldrb	r3, [r3, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d13a      	bne.n	8007b00 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6959      	ldr	r1, [r3, #20]
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	88da      	ldrh	r2, [r3, #6]
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007aac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ab0:	6800      	ldr	r0, [r0, #0]
 8007ab2:	f001 fc9c 	bl	80093ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	011a      	lsls	r2, r3, #4
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	4413      	add	r3, r2
 8007aec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	801a      	strh	r2, [r3, #0]
 8007afc:	f000 be1f 	b.w	800873e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	78db      	ldrb	r3, [r3, #3]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	f040 8462 	bne.w	80083d6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6a1a      	ldr	r2, [r3, #32]
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	f240 83df 	bls.w	80082ee <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b56:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	441a      	add	r2, r3
 8007b74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b80:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6a1a      	ldr	r2, [r3, #32]
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9c:	1ad2      	subs	r2, r2, r3
 8007b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 81c7 	beq.w	8007f60 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d177      	bne.n	8007cde <USB_EPStartXfer+0x2ce>
 8007bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0e:	4413      	add	r3, r2
 8007c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	011a      	lsls	r2, r3, #4
 8007c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c22:	4413      	add	r3, r2
 8007c24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c40:	d921      	bls.n	8007c86 <USB_EPStartXfer+0x276>
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <USB_EPStartXfer+0x252>
 8007c58:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	029b      	lsls	r3, r3, #10
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	4313      	orrs	r3, r2
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	e050      	b.n	8007d28 <USB_EPStartXfer+0x318>
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <USB_EPStartXfer+0x294>
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	e041      	b.n	8007d28 <USB_EPStartXfer+0x318>
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca8:	085b      	lsrs	r3, r3, #1
 8007caa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d004      	beq.n	8007cc4 <USB_EPStartXfer+0x2b4>
 8007cba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	029b      	lsls	r3, r3, #10
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	801a      	strh	r2, [r3, #0]
 8007cdc:	e024      	b.n	8007d28 <USB_EPStartXfer+0x318>
 8007cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	785b      	ldrb	r3, [r3, #1]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d11c      	bne.n	8007d28 <USB_EPStartXfer+0x318>
 8007cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	4413      	add	r3, r2
 8007d04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	011a      	lsls	r2, r3, #4
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	4413      	add	r3, r2
 8007d18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	895b      	ldrh	r3, [r3, #10]
 8007d34:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6959      	ldr	r1, [r3, #20]
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d4e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d52:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d56:	6800      	ldr	r0, [r0, #0]
 8007d58:	f001 fb49 	bl	80093ee <USB_WritePMA>
            ep->xfer_buff += len;
 8007d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6c:	441a      	add	r2, r3
 8007d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6a1a      	ldr	r2, [r3, #32]
 8007d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d90f      	bls.n	8007db6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a1a      	ldr	r2, [r3, #32]
 8007da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	621a      	str	r2, [r3, #32]
 8007db4:	e00e      	b.n	8007dd4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d177      	bne.n	8007ed4 <USB_EPStartXfer+0x4c4>
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	4413      	add	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	011a      	lsls	r2, r3, #4
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	801a      	strh	r2, [r3, #0]
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e36:	d921      	bls.n	8007e7c <USB_EPStartXfer+0x46c>
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e46:	f003 031f 	and.w	r3, r3, #31
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <USB_EPStartXfer+0x448>
 8007e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e52:	3b01      	subs	r3, #1
 8007e54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	029b      	lsls	r3, r3, #10
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	e056      	b.n	8007f2a <USB_EPStartXfer+0x51a>
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <USB_EPStartXfer+0x48a>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	801a      	strh	r2, [r3, #0]
 8007e98:	e047      	b.n	8007f2a <USB_EPStartXfer+0x51a>
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9e:	085b      	lsrs	r3, r3, #1
 8007ea0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <USB_EPStartXfer+0x4aa>
 8007eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	029b      	lsls	r3, r3, #10
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	801a      	strh	r2, [r3, #0]
 8007ed2:	e02a      	b.n	8007f2a <USB_EPStartXfer+0x51a>
 8007ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d122      	bne.n	8007f2a <USB_EPStartXfer+0x51a>
 8007ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	623b      	str	r3, [r7, #32]
 8007ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	4413      	add	r3, r2
 8007f06:	623b      	str	r3, [r7, #32]
 8007f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	011a      	lsls	r2, r3, #4
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	891b      	ldrh	r3, [r3, #8]
 8007f36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6959      	ldr	r1, [r3, #20]
 8007f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f58:	6800      	ldr	r0, [r0, #0]
 8007f5a:	f001 fa48 	bl	80093ee <USB_WritePMA>
 8007f5e:	e3ee      	b.n	800873e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d177      	bne.n	8008060 <USB_EPStartXfer+0x650>
 8007f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f90:	4413      	add	r3, r2
 8007f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	011a      	lsls	r2, r3, #4
 8007fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fba:	801a      	strh	r2, [r3, #0]
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fc2:	d921      	bls.n	8008008 <USB_EPStartXfer+0x5f8>
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d104      	bne.n	8007fe4 <USB_EPStartXfer+0x5d4>
 8007fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	029b      	lsls	r3, r3, #10
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008000:	b29a      	uxth	r2, r3
 8008002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e056      	b.n	80080b6 <USB_EPStartXfer+0x6a6>
 8008008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <USB_EPStartXfer+0x616>
 8008010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801e:	b29a      	uxth	r2, r3
 8008020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008022:	801a      	strh	r2, [r3, #0]
 8008024:	e047      	b.n	80080b6 <USB_EPStartXfer+0x6a6>
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <USB_EPStartXfer+0x636>
 800803c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008040:	3301      	adds	r3, #1
 8008042:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29a      	uxth	r2, r3
 800804c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008050:	b29b      	uxth	r3, r3
 8008052:	029b      	lsls	r3, r3, #10
 8008054:	b29b      	uxth	r3, r3
 8008056:	4313      	orrs	r3, r2
 8008058:	b29a      	uxth	r2, r3
 800805a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	e02a      	b.n	80080b6 <USB_EPStartXfer+0x6a6>
 8008060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d122      	bne.n	80080b6 <USB_EPStartXfer+0x6a6>
 8008070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	653b      	str	r3, [r7, #80]	@ 0x50
 800807c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008080:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800808a:	b29b      	uxth	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008090:	4413      	add	r3, r2
 8008092:	653b      	str	r3, [r7, #80]	@ 0x50
 8008094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	011a      	lsls	r2, r3, #4
 80080a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080a4:	4413      	add	r3, r2
 80080a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	891b      	ldrh	r3, [r3, #8]
 80080c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6959      	ldr	r1, [r3, #20]
 80080d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80080e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80080e4:	6800      	ldr	r0, [r0, #0]
 80080e6:	f001 f982 	bl	80093ee <USB_WritePMA>
            ep->xfer_buff += len;
 80080ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695a      	ldr	r2, [r3, #20]
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fa:	441a      	add	r2, r3
 80080fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6a1a      	ldr	r2, [r3, #32]
 8008114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	429a      	cmp	r2, r3
 8008122:	d90f      	bls.n	8008144 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008134:	1ad2      	subs	r2, r2, r3
 8008136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	621a      	str	r2, [r3, #32]
 8008142:	e00e      	b.n	8008162 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2200      	movs	r2, #0
 8008160:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	643b      	str	r3, [r7, #64]	@ 0x40
 800816e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d177      	bne.n	800826e <USB_EPStartXfer+0x85e>
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	63bb      	str	r3, [r7, #56]	@ 0x38
 800818a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008198:	b29b      	uxth	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819e:	4413      	add	r3, r2
 80081a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	011a      	lsls	r2, r3, #4
 80081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b2:	4413      	add	r3, r2
 80081b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c8:	801a      	strh	r2, [r3, #0]
 80081ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80081d0:	d921      	bls.n	8008216 <USB_EPStartXfer+0x806>
 80081d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e0:	f003 031f 	and.w	r3, r3, #31
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d104      	bne.n	80081f2 <USB_EPStartXfer+0x7e2>
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ec:	3b01      	subs	r3, #1
 80081ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	029b      	lsls	r3, r3, #10
 8008200:	b29b      	uxth	r3, r3
 8008202:	4313      	orrs	r3, r2
 8008204:	b29b      	uxth	r3, r3
 8008206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820e:	b29a      	uxth	r2, r3
 8008210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	e050      	b.n	80082b8 <USB_EPStartXfer+0x8a8>
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10a      	bne.n	8008234 <USB_EPStartXfer+0x824>
 800821e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822c:	b29a      	uxth	r2, r3
 800822e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	e041      	b.n	80082b8 <USB_EPStartXfer+0x8a8>
 8008234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008238:	085b      	lsrs	r3, r3, #1
 800823a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <USB_EPStartXfer+0x844>
 800824a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824e:	3301      	adds	r3, #1
 8008250:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	b29a      	uxth	r2, r3
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800825e:	b29b      	uxth	r3, r3
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	b29b      	uxth	r3, r3
 8008264:	4313      	orrs	r3, r2
 8008266:	b29a      	uxth	r2, r3
 8008268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826a:	801a      	strh	r2, [r3, #0]
 800826c:	e024      	b.n	80082b8 <USB_EPStartXfer+0x8a8>
 800826e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d11c      	bne.n	80082b8 <USB_EPStartXfer+0x8a8>
 800827e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800828c:	b29b      	uxth	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008292:	4413      	add	r3, r2
 8008294:	643b      	str	r3, [r7, #64]	@ 0x40
 8008296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	011a      	lsls	r2, r3, #4
 80082a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082a6:	4413      	add	r3, r2
 80082a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	895b      	ldrh	r3, [r3, #10]
 80082c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6959      	ldr	r1, [r3, #20]
 80082d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80082de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80082e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80082e6:	6800      	ldr	r0, [r0, #0]
 80082e8:	f001 f881 	bl	80093ee <USB_WritePMA>
 80082ec:	e227      	b.n	800873e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80082ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80082fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008324:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	441a      	add	r2, r3
 8008342:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800834a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800834e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008356:	b29b      	uxth	r3, r3
 8008358:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800835a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008374:	b29b      	uxth	r3, r3
 8008376:	461a      	mov	r2, r3
 8008378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800837a:	4413      	add	r3, r2
 800837c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800837e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	011a      	lsls	r2, r3, #4
 800838c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800838e:	4413      	add	r3, r2
 8008390:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008394:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839a:	b29a      	uxth	r2, r3
 800839c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800839e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80083a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	891b      	ldrh	r3, [r3, #8]
 80083ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6959      	ldr	r1, [r3, #20]
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80083c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80083ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80083ce:	6800      	ldr	r0, [r0, #0]
 80083d0:	f001 f80d 	bl	80093ee <USB_WritePMA>
 80083d4:	e1b3      	b.n	800873e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80083d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6a1a      	ldr	r2, [r3, #32]
 80083e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e6:	1ad2      	subs	r2, r2, r3
 80083e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29b      	uxth	r3, r3
 8008412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80c6 	beq.w	80085a8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800841c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	673b      	str	r3, [r7, #112]	@ 0x70
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d177      	bne.n	8008528 <USB_EPStartXfer+0xb18>
 8008438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008448:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008452:	b29b      	uxth	r3, r3
 8008454:	461a      	mov	r2, r3
 8008456:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008458:	4413      	add	r3, r2
 800845a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	011a      	lsls	r2, r3, #4
 800846a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800846c:	4413      	add	r3, r2
 800846e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008472:	667b      	str	r3, [r7, #100]	@ 0x64
 8008474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800847e:	b29a      	uxth	r2, r3
 8008480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008482:	801a      	strh	r2, [r3, #0]
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008488:	2b3e      	cmp	r3, #62	@ 0x3e
 800848a:	d921      	bls.n	80084d0 <USB_EPStartXfer+0xac0>
 800848c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008490:	095b      	lsrs	r3, r3, #5
 8008492:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849a:	f003 031f 	and.w	r3, r3, #31
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <USB_EPStartXfer+0xa9c>
 80084a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80084a6:	3b01      	subs	r3, #1
 80084a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80084ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	029b      	lsls	r3, r3, #10
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	4313      	orrs	r3, r2
 80084be:	b29b      	uxth	r3, r3
 80084c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	e050      	b.n	8008572 <USB_EPStartXfer+0xb62>
 80084d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <USB_EPStartXfer+0xade>
 80084d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	e041      	b.n	8008572 <USB_EPStartXfer+0xb62>
 80084ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f2:	085b      	lsrs	r3, r3, #1
 80084f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80084f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <USB_EPStartXfer+0xafe>
 8008504:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008508:	3301      	adds	r3, #1
 800850a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800850e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29a      	uxth	r2, r3
 8008514:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008518:	b29b      	uxth	r3, r3
 800851a:	029b      	lsls	r3, r3, #10
 800851c:	b29b      	uxth	r3, r3
 800851e:	4313      	orrs	r3, r2
 8008520:	b29a      	uxth	r2, r3
 8008522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008524:	801a      	strh	r2, [r3, #0]
 8008526:	e024      	b.n	8008572 <USB_EPStartXfer+0xb62>
 8008528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d11c      	bne.n	8008572 <USB_EPStartXfer+0xb62>
 8008538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008546:	b29b      	uxth	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800854c:	4413      	add	r3, r2
 800854e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	011a      	lsls	r2, r3, #4
 800855e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008560:	4413      	add	r3, r2
 8008562:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008566:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856c:	b29a      	uxth	r2, r3
 800856e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008570:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	895b      	ldrh	r3, [r3, #10]
 800857e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6959      	ldr	r1, [r3, #20]
 800858e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008592:	b29b      	uxth	r3, r3
 8008594:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008598:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800859c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80085a0:	6800      	ldr	r0, [r0, #0]
 80085a2:	f000 ff24 	bl	80093ee <USB_WritePMA>
 80085a6:	e0ca      	b.n	800873e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d177      	bne.n	80086a8 <USB_EPStartXfer+0xc98>
 80085b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80085d8:	4413      	add	r3, r2
 80085da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	011a      	lsls	r2, r3, #4
 80085ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80085ec:	4413      	add	r3, r2
 80085ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008608:	2b3e      	cmp	r3, #62	@ 0x3e
 800860a:	d921      	bls.n	8008650 <USB_EPStartXfer+0xc40>
 800860c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008610:	095b      	lsrs	r3, r3, #5
 8008612:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861a:	f003 031f 	and.w	r3, r3, #31
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <USB_EPStartXfer+0xc1c>
 8008622:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008626:	3b01      	subs	r3, #1
 8008628:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800862c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b29a      	uxth	r2, r3
 8008632:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008636:	b29b      	uxth	r3, r3
 8008638:	029b      	lsls	r3, r3, #10
 800863a:	b29b      	uxth	r3, r3
 800863c:	4313      	orrs	r3, r2
 800863e:	b29b      	uxth	r3, r3
 8008640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008648:	b29a      	uxth	r2, r3
 800864a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800864c:	801a      	strh	r2, [r3, #0]
 800864e:	e05c      	b.n	800870a <USB_EPStartXfer+0xcfa>
 8008650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <USB_EPStartXfer+0xc5e>
 8008658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008666:	b29a      	uxth	r2, r3
 8008668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800866a:	801a      	strh	r2, [r3, #0]
 800866c:	e04d      	b.n	800870a <USB_EPStartXfer+0xcfa>
 800866e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008672:	085b      	lsrs	r3, r3, #1
 8008674:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <USB_EPStartXfer+0xc7e>
 8008684:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008688:	3301      	adds	r3, #1
 800868a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800868e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29a      	uxth	r2, r3
 8008694:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008698:	b29b      	uxth	r3, r3
 800869a:	029b      	lsls	r3, r3, #10
 800869c:	b29b      	uxth	r3, r3
 800869e:	4313      	orrs	r3, r2
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	e030      	b.n	800870a <USB_EPStartXfer+0xcfa>
 80086a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d128      	bne.n	800870a <USB_EPStartXfer+0xcfa>
 80086b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086dc:	4413      	add	r3, r2
 80086de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	011a      	lsls	r2, r3, #4
 80086f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086f4:	4413      	add	r3, r2
 80086f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008702:	b29a      	uxth	r2, r3
 8008704:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008708:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800870a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	891b      	ldrh	r3, [r3, #8]
 8008716:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800871a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6959      	ldr	r1, [r3, #20]
 8008726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800872a:	b29b      	uxth	r3, r3
 800872c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008730:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008734:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008738:	6800      	ldr	r0, [r0, #0]
 800873a:	f000 fe58 	bl	80093ee <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800873e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008764:	817b      	strh	r3, [r7, #10]
 8008766:	897b      	ldrh	r3, [r7, #10]
 8008768:	f083 0310 	eor.w	r3, r3, #16
 800876c:	817b      	strh	r3, [r7, #10]
 800876e:	897b      	ldrh	r3, [r7, #10]
 8008770:	f083 0320 	eor.w	r3, r3, #32
 8008774:	817b      	strh	r3, [r7, #10]
 8008776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	441a      	add	r2, r3
 8008790:	897b      	ldrh	r3, [r7, #10]
 8008792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800879a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800879e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	8013      	strh	r3, [r2, #0]
 80087a6:	f000 bcde 	b.w	8009166 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80087aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	7b1b      	ldrb	r3, [r3, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f040 80bb 	bne.w	8008932 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80087bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d917      	bls.n	8008808 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80087d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80087e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	699a      	ldr	r2, [r3, #24]
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	619a      	str	r2, [r3, #24]
 8008806:	e00e      	b.n	8008826 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2200      	movs	r2, #0
 8008824:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008842:	b29b      	uxth	r3, r3
 8008844:	461a      	mov	r2, r3
 8008846:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800884a:	4413      	add	r3, r2
 800884c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	011a      	lsls	r2, r3, #4
 800885e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008862:	4413      	add	r3, r2
 8008864:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008868:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800886c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008878:	b29a      	uxth	r2, r3
 800887a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008884:	2b3e      	cmp	r3, #62	@ 0x3e
 8008886:	d924      	bls.n	80088d2 <USB_EPStartXfer+0xec2>
 8008888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800888c:	095b      	lsrs	r3, r3, #5
 800888e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008896:	f003 031f 	and.w	r3, r3, #31
 800889a:	2b00      	cmp	r3, #0
 800889c:	d104      	bne.n	80088a8 <USB_EPStartXfer+0xe98>
 800889e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80088a2:	3b01      	subs	r3, #1
 80088a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	029b      	lsls	r3, r3, #10
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	4313      	orrs	r3, r2
 80088bc:	b29b      	uxth	r3, r3
 80088be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088cc:	801a      	strh	r2, [r3, #0]
 80088ce:	f000 bc10 	b.w	80090f2 <USB_EPStartXfer+0x16e2>
 80088d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10c      	bne.n	80088f4 <USB_EPStartXfer+0xee4>
 80088da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088f0:	801a      	strh	r2, [r3, #0]
 80088f2:	e3fe      	b.n	80090f2 <USB_EPStartXfer+0x16e2>
 80088f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f8:	085b      	lsrs	r3, r3, #1
 80088fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d004      	beq.n	8008914 <USB_EPStartXfer+0xf04>
 800890a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800890e:	3301      	adds	r3, #1
 8008910:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29a      	uxth	r2, r3
 800891c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008920:	b29b      	uxth	r3, r3
 8008922:	029b      	lsls	r3, r3, #10
 8008924:	b29b      	uxth	r3, r3
 8008926:	4313      	orrs	r3, r2
 8008928:	b29a      	uxth	r2, r3
 800892a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	e3df      	b.n	80090f2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	78db      	ldrb	r3, [r3, #3]
 800893e:	2b02      	cmp	r3, #2
 8008940:	f040 8218 	bne.w	8008d74 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	785b      	ldrb	r3, [r3, #1]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f040 809d 	bne.w	8008a90 <USB_EPStartXfer+0x1080>
 8008956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008972:	b29b      	uxth	r3, r3
 8008974:	461a      	mov	r2, r3
 8008976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800897a:	4413      	add	r3, r2
 800897c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	011a      	lsls	r2, r3, #4
 800898e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008992:	4413      	add	r3, r2
 8008994:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800899c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089ae:	801a      	strh	r2, [r3, #0]
 80089b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80089be:	d92b      	bls.n	8008a18 <USB_EPStartXfer+0x1008>
 80089c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <USB_EPStartXfer+0xfe0>
 80089e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ea:	3b01      	subs	r3, #1
 80089ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	029b      	lsls	r3, r3, #10
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	4313      	orrs	r3, r2
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	e070      	b.n	8008afa <USB_EPStartXfer+0x10ea>
 8008a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10c      	bne.n	8008a42 <USB_EPStartXfer+0x1032>
 8008a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a3e:	801a      	strh	r2, [r3, #0]
 8008a40:	e05b      	b.n	8008afa <USB_EPStartXfer+0x10ea>
 8008a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <USB_EPStartXfer+0x1062>
 8008a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	029b      	lsls	r3, r3, #10
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	4313      	orrs	r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	e034      	b.n	8008afa <USB_EPStartXfer+0x10ea>
 8008a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	785b      	ldrb	r3, [r3, #1]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d12c      	bne.n	8008afa <USB_EPStartXfer+0x10ea>
 8008aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	011a      	lsls	r2, r3, #4
 8008ad8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008adc:	4413      	add	r3, r2
 8008ade:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008af8:	801a      	strh	r2, [r3, #0]
 8008afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	785b      	ldrb	r3, [r3, #1]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f040 809d 	bne.w	8008c54 <USB_EPStartXfer+0x1244>
 8008b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b3e:	4413      	add	r3, r2
 8008b40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	011a      	lsls	r2, r3, #4
 8008b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b56:	4413      	add	r3, r2
 8008b58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b82:	d92b      	bls.n	8008bdc <USB_EPStartXfer+0x11cc>
 8008b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	095b      	lsrs	r3, r3, #5
 8008b92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <USB_EPStartXfer+0x11a4>
 8008baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	029b      	lsls	r3, r3, #10
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	e069      	b.n	8008cb0 <USB_EPStartXfer+0x12a0>
 8008bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10c      	bne.n	8008c06 <USB_EPStartXfer+0x11f6>
 8008bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	e054      	b.n	8008cb0 <USB_EPStartXfer+0x12a0>
 8008c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	085b      	lsrs	r3, r3, #1
 8008c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d004      	beq.n	8008c36 <USB_EPStartXfer+0x1226>
 8008c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c30:	3301      	adds	r3, #1
 8008c32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	029b      	lsls	r3, r3, #10
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c50:	801a      	strh	r2, [r3, #0]
 8008c52:	e02d      	b.n	8008cb0 <USB_EPStartXfer+0x12a0>
 8008c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d125      	bne.n	8008cb0 <USB_EPStartXfer+0x12a0>
 8008c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	461a      	mov	r2, r3
 8008c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	011a      	lsls	r2, r3, #4
 8008c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c92:	4413      	add	r3, r2
 8008c94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 8218 	beq.w	80090f2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ce2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d005      	beq.n	8008cfa <USB_EPStartXfer+0x12ea>
 8008cee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10d      	bne.n	8008d16 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008cfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f040 81f5 	bne.w	80090f2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f040 81ee 	bne.w	80090f2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d3c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	441a      	add	r2, r3
 8008d5a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	8013      	strh	r3, [r2, #0]
 8008d72:	e1be      	b.n	80090f2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	78db      	ldrb	r3, [r3, #3]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	f040 81b4 	bne.w	80090ee <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d917      	bls.n	8008dd2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc2:	1ad2      	subs	r2, r2, r3
 8008dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	619a      	str	r2, [r3, #24]
 8008dd0:	e00e      	b.n	8008df0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2200      	movs	r2, #0
 8008dee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	785b      	ldrb	r3, [r3, #1]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f040 8085 	bne.w	8008f0c <USB_EPStartXfer+0x14fc>
 8008e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	461a      	mov	r2, r3
 8008e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e26:	4413      	add	r3, r2
 8008e28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	011a      	lsls	r2, r3, #4
 8008e3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e3e:	4413      	add	r3, r2
 8008e40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e5a:	801a      	strh	r2, [r3, #0]
 8008e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e62:	d923      	bls.n	8008eac <USB_EPStartXfer+0x149c>
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <USB_EPStartXfer+0x1474>
 8008e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	029b      	lsls	r3, r3, #10
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	4313      	orrs	r3, r2
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ea8:	801a      	strh	r2, [r3, #0]
 8008eaa:	e060      	b.n	8008f6e <USB_EPStartXfer+0x155e>
 8008eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10c      	bne.n	8008ece <USB_EPStartXfer+0x14be>
 8008eb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008eca:	801a      	strh	r2, [r3, #0]
 8008ecc:	e04f      	b.n	8008f6e <USB_EPStartXfer+0x155e>
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed2:	085b      	lsrs	r3, r3, #1
 8008ed4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d004      	beq.n	8008eee <USB_EPStartXfer+0x14de>
 8008ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	029b      	lsls	r3, r3, #10
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	4313      	orrs	r3, r2
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f08:	801a      	strh	r2, [r3, #0]
 8008f0a:	e030      	b.n	8008f6e <USB_EPStartXfer+0x155e>
 8008f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	785b      	ldrb	r3, [r3, #1]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d128      	bne.n	8008f6e <USB_EPStartXfer+0x155e>
 8008f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f40:	4413      	add	r3, r2
 8008f42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	011a      	lsls	r2, r3, #4
 8008f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f58:	4413      	add	r3, r2
 8008f5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008f6c:	801a      	strh	r2, [r3, #0]
 8008f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	785b      	ldrb	r3, [r3, #1]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f040 8085 	bne.w	8009098 <USB_EPStartXfer+0x1688>
 8008f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	011a      	lsls	r2, r3, #4
 8008fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008fca:	4413      	add	r3, r2
 8008fcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fe6:	801a      	strh	r2, [r3, #0]
 8008fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fec:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fee:	d923      	bls.n	8009038 <USB_EPStartXfer+0x1628>
 8008ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffe:	f003 031f 	and.w	r3, r3, #31
 8009002:	2b00      	cmp	r3, #0
 8009004:	d104      	bne.n	8009010 <USB_EPStartXfer+0x1600>
 8009006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800900a:	3b01      	subs	r3, #1
 800900c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009010:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29a      	uxth	r2, r3
 8009018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800901c:	b29b      	uxth	r3, r3
 800901e:	029b      	lsls	r3, r3, #10
 8009020:	b29b      	uxth	r3, r3
 8009022:	4313      	orrs	r3, r2
 8009024:	b29b      	uxth	r3, r3
 8009026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800902e:	b29a      	uxth	r2, r3
 8009030:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	e05c      	b.n	80090f2 <USB_EPStartXfer+0x16e2>
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10c      	bne.n	800905a <USB_EPStartXfer+0x164a>
 8009040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009050:	b29a      	uxth	r2, r3
 8009052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009056:	801a      	strh	r2, [r3, #0]
 8009058:	e04b      	b.n	80090f2 <USB_EPStartXfer+0x16e2>
 800905a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905e:	085b      	lsrs	r3, r3, #1
 8009060:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d004      	beq.n	800907a <USB_EPStartXfer+0x166a>
 8009070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009074:	3301      	adds	r3, #1
 8009076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800907a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	b29a      	uxth	r2, r3
 8009082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009086:	b29b      	uxth	r3, r3
 8009088:	029b      	lsls	r3, r3, #10
 800908a:	b29b      	uxth	r3, r3
 800908c:	4313      	orrs	r3, r2
 800908e:	b29a      	uxth	r2, r3
 8009090:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009094:	801a      	strh	r2, [r3, #0]
 8009096:	e02c      	b.n	80090f2 <USB_EPStartXfer+0x16e2>
 8009098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800909c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	785b      	ldrb	r3, [r3, #1]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d124      	bne.n	80090f2 <USB_EPStartXfer+0x16e2>
 80090a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	461a      	mov	r2, r3
 80090ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80090be:	4413      	add	r3, r2
 80090c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	011a      	lsls	r2, r3, #4
 80090d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80090d6:	4413      	add	r3, r2
 80090d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80090dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	e001      	b.n	80090f2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e03a      	b.n	8009168 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	b29b      	uxth	r3, r3
 8009110:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009118:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800911c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009120:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009124:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009128:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800912c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009130:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	441a      	add	r2, r3
 800914e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800915a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800915e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009162:	b29b      	uxth	r3, r3
 8009164:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d020      	beq.n	80091c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800919a:	81bb      	strh	r3, [r7, #12]
 800919c:	89bb      	ldrh	r3, [r7, #12]
 800919e:	f083 0310 	eor.w	r3, r3, #16
 80091a2:	81bb      	strh	r3, [r7, #12]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	441a      	add	r2, r3
 80091ae:	89bb      	ldrh	r3, [r7, #12]
 80091b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	8013      	strh	r3, [r2, #0]
 80091c4:	e01f      	b.n	8009206 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091dc:	81fb      	strh	r3, [r7, #14]
 80091de:	89fb      	ldrh	r3, [r7, #14]
 80091e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80091e4:	81fb      	strh	r3, [r7, #14]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	441a      	add	r2, r3
 80091f0:	89fb      	ldrh	r3, [r7, #14]
 80091f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009202:	b29b      	uxth	r3, r3
 8009204:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	bc80      	pop	{r7}
 8009210:	4770      	bx	lr

08009212 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009212:	b480      	push	{r7}
 8009214:	b087      	sub	sp, #28
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	7b1b      	ldrb	r3, [r3, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f040 809d 	bne.w	8009360 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	785b      	ldrb	r3, [r3, #1]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d04c      	beq.n	80092c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	823b      	strh	r3, [r7, #16]
 800923c:	8a3b      	ldrh	r3, [r7, #16]
 800923e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01b      	beq.n	800927e <USB_EPClearStall+0x6c>
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	b29b      	uxth	r3, r3
 8009254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800925c:	81fb      	strh	r3, [r7, #14]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	441a      	add	r2, r3
 8009268:	89fb      	ldrh	r3, [r7, #14]
 800926a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800926e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009276:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800927a:	b29b      	uxth	r3, r3
 800927c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	78db      	ldrb	r3, [r3, #3]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d06c      	beq.n	8009360 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800929c:	81bb      	strh	r3, [r7, #12]
 800929e:	89bb      	ldrh	r3, [r7, #12]
 80092a0:	f083 0320 	eor.w	r3, r3, #32
 80092a4:	81bb      	strh	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	441a      	add	r2, r3
 80092b0:	89bb      	ldrh	r3, [r7, #12]
 80092b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	8013      	strh	r3, [r2, #0]
 80092c6:	e04b      	b.n	8009360 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	82fb      	strh	r3, [r7, #22]
 80092d6:	8afb      	ldrh	r3, [r7, #22]
 80092d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01b      	beq.n	8009318 <USB_EPClearStall+0x106>
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f6:	82bb      	strh	r3, [r7, #20]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	441a      	add	r2, r3
 8009302:	8abb      	ldrh	r3, [r7, #20]
 8009304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800930c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009314:	b29b      	uxth	r3, r3
 8009316:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29b      	uxth	r3, r3
 8009326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800932a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800932e:	827b      	strh	r3, [r7, #18]
 8009330:	8a7b      	ldrh	r3, [r7, #18]
 8009332:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009336:	827b      	strh	r3, [r7, #18]
 8009338:	8a7b      	ldrh	r3, [r7, #18]
 800933a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800933e:	827b      	strh	r3, [r7, #18]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	441a      	add	r2, r3
 800934a:	8a7b      	ldrh	r3, [r7, #18]
 800934c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800935c:	b29b      	uxth	r3, r3
 800935e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	371c      	adds	r7, #28
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr

0800936c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d103      	bne.n	8009386 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2280      	movs	r2, #128	@ 0x80
 8009382:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr

08009392 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	4770      	bx	lr

080093a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bc80      	pop	{r7}
 80093b8:	4770      	bx	lr

080093ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b085      	sub	sp, #20
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80093cc:	68fb      	ldr	r3, [r7, #12]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bc80      	pop	{r7}
 80093d6:	4770      	bx	lr

080093d8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bc80      	pop	{r7}
 80093ec:	4770      	bx	lr

080093ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b08b      	sub	sp, #44	@ 0x2c
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	4611      	mov	r1, r2
 80093fa:	461a      	mov	r2, r3
 80093fc:	460b      	mov	r3, r1
 80093fe:	80fb      	strh	r3, [r7, #6]
 8009400:	4613      	mov	r3, r2
 8009402:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009404:	88bb      	ldrh	r3, [r7, #4]
 8009406:	3301      	adds	r3, #1
 8009408:	085b      	lsrs	r3, r3, #1
 800940a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009414:	88fb      	ldrh	r3, [r7, #6]
 8009416:	005a      	lsls	r2, r3, #1
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009420:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	627b      	str	r3, [r7, #36]	@ 0x24
 8009426:	e01e      	b.n	8009466 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	3301      	adds	r3, #1
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	b21a      	sxth	r2, r3
 8009438:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800943c:	4313      	orrs	r3, r2
 800943e:	b21b      	sxth	r3, r3
 8009440:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	8a7a      	ldrh	r2, [r7, #18]
 8009446:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	3302      	adds	r3, #2
 800944c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	3302      	adds	r3, #2
 8009452:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	3301      	adds	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	3301      	adds	r3, #1
 800945e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	3b01      	subs	r3, #1
 8009464:	627b      	str	r3, [r7, #36]	@ 0x24
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1dd      	bne.n	8009428 <USB_WritePMA+0x3a>
  }
}
 800946c:	bf00      	nop
 800946e:	bf00      	nop
 8009470:	372c      	adds	r7, #44	@ 0x2c
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr

08009478 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009478:	b480      	push	{r7}
 800947a:	b08b      	sub	sp, #44	@ 0x2c
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4611      	mov	r1, r2
 8009484:	461a      	mov	r2, r3
 8009486:	460b      	mov	r3, r1
 8009488:	80fb      	strh	r3, [r7, #6]
 800948a:	4613      	mov	r3, r2
 800948c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800948e:	88bb      	ldrh	r3, [r7, #4]
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	b29b      	uxth	r3, r3
 8009494:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	005a      	lsls	r2, r3, #1
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80094b0:	e01b      	b.n	80094ea <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	3302      	adds	r3, #2
 80094be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	3301      	adds	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	0a1b      	lsrs	r3, r3, #8
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	3301      	adds	r3, #1
 80094dc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	3302      	adds	r3, #2
 80094e2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80094e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e6:	3b01      	subs	r3, #1
 80094e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e0      	bne.n	80094b2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80094f0:	88bb      	ldrh	r3, [r7, #4]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d007      	beq.n	800950c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	b2da      	uxtb	r2, r3
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	701a      	strb	r2, [r3, #0]
  }
}
 800950c:	bf00      	nop
 800950e:	372c      	adds	r7, #44	@ 0x2c
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr

08009516 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	7c1b      	ldrb	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d115      	bne.n	800955a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800952e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009532:	2202      	movs	r2, #2
 8009534:	2181      	movs	r1, #129	@ 0x81
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 fec9 	bl	800b2ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009542:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009546:	2202      	movs	r2, #2
 8009548:	2101      	movs	r1, #1
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 febf 	bl	800b2ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009558:	e012      	b.n	8009580 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800955a:	2340      	movs	r3, #64	@ 0x40
 800955c:	2202      	movs	r2, #2
 800955e:	2181      	movs	r1, #129	@ 0x81
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 feb4 	bl	800b2ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800956c:	2340      	movs	r3, #64	@ 0x40
 800956e:	2202      	movs	r2, #2
 8009570:	2101      	movs	r1, #1
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 feab 	bl	800b2ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009580:	2308      	movs	r3, #8
 8009582:	2203      	movs	r2, #3
 8009584:	2182      	movs	r1, #130	@ 0x82
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fea1 	bl	800b2ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009592:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009596:	f001 ffc1 	bl	800b51c <USBD_static_malloc>
 800959a:	4602      	mov	r2, r0
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d102      	bne.n	80095b2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80095ac:	2301      	movs	r3, #1
 80095ae:	73fb      	strb	r3, [r7, #15]
 80095b0:	e026      	b.n	8009600 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095b8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	7c1b      	ldrb	r3, [r3, #16]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095e6:	2101      	movs	r1, #1
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 ff60 	bl	800b4ae <USBD_LL_PrepareReceive>
 80095ee:	e007      	b.n	8009600 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095f6:	2340      	movs	r3, #64	@ 0x40
 80095f8:	2101      	movs	r1, #1
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 ff57 	bl	800b4ae <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800961a:	2181      	movs	r1, #129	@ 0x81
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 fe7c 	bl	800b31a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009628:	2101      	movs	r1, #1
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f001 fe75 	bl	800b31a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009638:	2182      	movs	r1, #130	@ 0x82
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 fe6d 	bl	800b31a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00e      	beq.n	800966e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009660:	4618      	mov	r0, r3
 8009662:	f001 ff67 	bl	800b534 <USBD_static_free>
    pdev->pClassData = NULL;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009688:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d039      	beq.n	8009716 <USBD_CDC_Setup+0x9e>
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	d17f      	bne.n	80097a6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	88db      	ldrh	r3, [r3, #6]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d029      	beq.n	8009702 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b25b      	sxtb	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	da11      	bge.n	80096dc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80096c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	88d2      	ldrh	r2, [r2, #6]
 80096ca:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80096cc:	6939      	ldr	r1, [r7, #16]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	88db      	ldrh	r3, [r3, #6]
 80096d2:	461a      	mov	r2, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 fa05 	bl	800aae4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80096da:	e06b      	b.n	80097b4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	785a      	ldrb	r2, [r3, #1]
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	88db      	ldrh	r3, [r3, #6]
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80096f2:	6939      	ldr	r1, [r7, #16]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	88db      	ldrh	r3, [r3, #6]
 80096f8:	461a      	mov	r2, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fa20 	bl	800ab40 <USBD_CtlPrepareRx>
      break;
 8009700:	e058      	b.n	80097b4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	7850      	ldrb	r0, [r2, #1]
 800970e:	2200      	movs	r2, #0
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	4798      	blx	r3
      break;
 8009714:	e04e      	b.n	80097b4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	2b0b      	cmp	r3, #11
 800971c:	d02e      	beq.n	800977c <USBD_CDC_Setup+0x104>
 800971e:	2b0b      	cmp	r3, #11
 8009720:	dc38      	bgt.n	8009794 <USBD_CDC_Setup+0x11c>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <USBD_CDC_Setup+0xb4>
 8009726:	2b0a      	cmp	r3, #10
 8009728:	d014      	beq.n	8009754 <USBD_CDC_Setup+0xdc>
 800972a:	e033      	b.n	8009794 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009732:	2b03      	cmp	r3, #3
 8009734:	d107      	bne.n	8009746 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	2202      	movs	r2, #2
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 f9d0 	bl	800aae4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009744:	e02e      	b.n	80097a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 f961 	bl	800aa10 <USBD_CtlError>
            ret = USBD_FAIL;
 800974e:	2302      	movs	r3, #2
 8009750:	75fb      	strb	r3, [r7, #23]
          break;
 8009752:	e027      	b.n	80097a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975a:	2b03      	cmp	r3, #3
 800975c:	d107      	bne.n	800976e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800975e:	f107 030f 	add.w	r3, r7, #15
 8009762:	2201      	movs	r2, #1
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 f9bc 	bl	800aae4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800976c:	e01a      	b.n	80097a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 f94d 	bl	800aa10 <USBD_CtlError>
            ret = USBD_FAIL;
 8009776:	2302      	movs	r3, #2
 8009778:	75fb      	strb	r3, [r7, #23]
          break;
 800977a:	e013      	b.n	80097a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009782:	2b03      	cmp	r3, #3
 8009784:	d00d      	beq.n	80097a2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 f941 	bl	800aa10 <USBD_CtlError>
            ret = USBD_FAIL;
 800978e:	2302      	movs	r3, #2
 8009790:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009792:	e006      	b.n	80097a2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 f93a 	bl	800aa10 <USBD_CtlError>
          ret = USBD_FAIL;
 800979c:	2302      	movs	r3, #2
 800979e:	75fb      	strb	r3, [r7, #23]
          break;
 80097a0:	e000      	b.n	80097a4 <USBD_CDC_Setup+0x12c>
          break;
 80097a2:	bf00      	nop
      }
      break;
 80097a4:	e006      	b.n	80097b4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 f931 	bl	800aa10 <USBD_CtlError>
      ret = USBD_FAIL;
 80097ae:	2302      	movs	r3, #2
 80097b0:	75fb      	strb	r3, [r7, #23]
      break;
 80097b2:	bf00      	nop
  }

  return ret;
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097d0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097d8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d03a      	beq.n	800985a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80097e4:	78fa      	ldrb	r2, [r7, #3]
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	331c      	adds	r3, #28
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d029      	beq.n	800984e <USBD_CDC_DataIn+0x90>
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	440b      	add	r3, r1
 8009808:	331c      	adds	r3, #28
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	78f9      	ldrb	r1, [r7, #3]
 800980e:	68b8      	ldr	r0, [r7, #8]
 8009810:	460b      	mov	r3, r1
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	440b      	add	r3, r1
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	4403      	add	r3, r0
 800981a:	3320      	adds	r3, #32
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009822:	fb01 f303 	mul.w	r3, r1, r3
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d110      	bne.n	800984e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800982c:	78fa      	ldrb	r2, [r7, #3]
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	331c      	adds	r3, #28
 800983c:	2200      	movs	r2, #0
 800983e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009840:	78f9      	ldrb	r1, [r7, #3]
 8009842:	2300      	movs	r3, #0
 8009844:	2200      	movs	r2, #0
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 fe0e 	bl	800b468 <USBD_LL_Transmit>
 800984c:	e003      	b.n	8009856 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	e000      	b.n	800985c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800985a:	2302      	movs	r3, #2
  }
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009876:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 fe39 	bl	800b4f4 <USBD_LL_GetRxDataSize>
 8009882:	4602      	mov	r2, r0
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00d      	beq.n	80098b0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80098a8:	4611      	mov	r1, r2
 80098aa:	4798      	blx	r3

    return USBD_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	e000      	b.n	80098b2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80098b0:	2302      	movs	r3, #2
  }
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098c8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d014      	beq.n	80098fe <USBD_CDC_EP0_RxReady+0x44>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80098da:	2bff      	cmp	r3, #255	@ 0xff
 80098dc:	d00f      	beq.n	80098fe <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80098ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80098f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	22ff      	movs	r2, #255	@ 0xff
 80098fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2243      	movs	r2, #67	@ 0x43
 8009914:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009916:	4b03      	ldr	r3, [pc, #12]	@ (8009924 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009918:	4618      	mov	r0, r3
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	bc80      	pop	{r7}
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000094 	.word	0x20000094

08009928 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2243      	movs	r2, #67	@ 0x43
 8009934:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009936:	4b03      	ldr	r3, [pc, #12]	@ (8009944 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	20000050 	.word	0x20000050

08009948 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2243      	movs	r2, #67	@ 0x43
 8009954:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009956:	4b03      	ldr	r3, [pc, #12]	@ (8009964 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	200000d8 	.word	0x200000d8

08009968 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	220a      	movs	r2, #10
 8009974:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009976:	4b03      	ldr	r3, [pc, #12]	@ (8009984 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	2000000c 	.word	0x2000000c

08009988 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009992:	2302      	movs	r3, #2
 8009994:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bc80      	pop	{r7}
 80099b2:	4770      	bx	lr

080099b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	4613      	mov	r3, r2
 80099c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80099d2:	88fa      	ldrh	r2, [r7, #6]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bc80      	pop	{r7}
 80099e4:	4770      	bx	lr

080099e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bc80      	pop	{r7}
 8009a0a:	4770      	bx	lr

08009a0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d01c      	beq.n	8009a60 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d115      	bne.n	8009a5c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	2181      	movs	r1, #129	@ 0x81
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 fd08 	bl	800b468 <USBD_LL_Transmit>

      return USBD_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e002      	b.n	8009a62 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e000      	b.n	8009a62 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009a60:	2302      	movs	r3, #2
  }
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d017      	beq.n	8009ab4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	7c1b      	ldrb	r3, [r3, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d109      	bne.n	8009aa0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a96:	2101      	movs	r1, #1
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 fd08 	bl	800b4ae <USBD_LL_PrepareReceive>
 8009a9e:	e007      	b.n	8009ab0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009aa6:	2340      	movs	r3, #64	@ 0x40
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 fcff 	bl	800b4ae <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e000      	b.n	8009ab6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009ab4:	2302      	movs	r3, #2
  }
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e01a      	b.n	8009b0c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	79fa      	ldrb	r2, [r7, #7]
 8009b02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f001 fb6d 	bl	800b1e4 <USBD_LL_Init>

  return USBD_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d006      	beq.n	8009b36 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
 8009b34:	e001      	b.n	8009b3a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009b36:	2302      	movs	r3, #2
 8009b38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr

08009b46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 fba2 	bl	800b298 <USBD_LL_Start>

  return USBD_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b083      	sub	sp, #12
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bc80      	pop	{r7}
 8009b70:	4770      	bx	lr

08009b72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009b7e:	2302      	movs	r3, #2
 8009b80:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00c      	beq.n	8009ba6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	4611      	mov	r1, r2
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	78fa      	ldrb	r2, [r7, #3]
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	4798      	blx	r3

  return USBD_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fed8 	bl	800a99e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009c0a:	f003 031f 	and.w	r3, r3, #31
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d016      	beq.n	8009c40 <USBD_LL_SetupStage+0x6a>
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d81c      	bhi.n	8009c50 <USBD_LL_SetupStage+0x7a>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <USBD_LL_SetupStage+0x4a>
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d008      	beq.n	8009c30 <USBD_LL_SetupStage+0x5a>
 8009c1e:	e017      	b.n	8009c50 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f9cb 	bl	8009fc4 <USBD_StdDevReq>
      break;
 8009c2e:	e01a      	b.n	8009c66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fa2d 	bl	800a098 <USBD_StdItfReq>
      break;
 8009c3e:	e012      	b.n	8009c66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fa6d 	bl	800a128 <USBD_StdEPReq>
      break;
 8009c4e:	e00a      	b.n	8009c66 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009c56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 fb7a 	bl	800b358 <USBD_LL_StallEP>
      break;
 8009c64:	bf00      	nop
  }

  return USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c7e:	7afb      	ldrb	r3, [r7, #11]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d14b      	bne.n	8009d1c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009c8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d134      	bne.n	8009d00 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d919      	bls.n	8009cd6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	68da      	ldr	r2, [r3, #12]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	1ad2      	subs	r2, r2, r3
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d203      	bcs.n	8009cc4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	e002      	b.n	8009cca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	461a      	mov	r2, r3
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 ff54 	bl	800ab7c <USBD_CtlContinueRx>
 8009cd4:	e038      	b.n	8009d48 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d105      	bne.n	8009cf8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 ff51 	bl	800aba0 <USBD_CtlSendStatus>
 8009cfe:	e023      	b.n	8009d48 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d11e      	bne.n	8009d48 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009d12:	2100      	movs	r1, #0
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f001 fb1f 	bl	800b358 <USBD_LL_StallEP>
 8009d1a:	e015      	b.n	8009d48 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00d      	beq.n	8009d44 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d108      	bne.n	8009d44 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	7afa      	ldrb	r2, [r7, #11]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3
 8009d42:	e001      	b.n	8009d48 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d44:	2302      	movs	r3, #2
 8009d46:	e000      	b.n	8009d4a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b086      	sub	sp, #24
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	607a      	str	r2, [r7, #4]
 8009d5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d17f      	bne.n	8009e66 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3314      	adds	r3, #20
 8009d6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d15c      	bne.n	8009e30 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d915      	bls.n	8009dae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	1ad2      	subs	r2, r2, r3
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	461a      	mov	r2, r3
 8009d98:	6879      	ldr	r1, [r7, #4]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 febe 	bl	800ab1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009da0:	2300      	movs	r3, #0
 8009da2:	2200      	movs	r2, #0
 8009da4:	2100      	movs	r1, #0
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f001 fb81 	bl	800b4ae <USBD_LL_PrepareReceive>
 8009dac:	e04e      	b.n	8009e4c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	6912      	ldr	r2, [r2, #16]
 8009db6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dba:	fb01 f202 	mul.w	r2, r1, r2
 8009dbe:	1a9b      	subs	r3, r3, r2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d11c      	bne.n	8009dfe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d316      	bcc.n	8009dfe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d20f      	bcs.n	8009dfe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009dde:	2200      	movs	r2, #0
 8009de0:	2100      	movs	r1, #0
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 fe9a 	bl	800ab1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009df0:	2300      	movs	r3, #0
 8009df2:	2200      	movs	r2, #0
 8009df4:	2100      	movs	r1, #0
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f001 fb59 	bl	800b4ae <USBD_LL_PrepareReceive>
 8009dfc:	e026      	b.n	8009e4c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d105      	bne.n	8009e20 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009e20:	2180      	movs	r1, #128	@ 0x80
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f001 fa98 	bl	800b358 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 fecc 	bl	800abc6 <USBD_CtlReceiveStatus>
 8009e2e:	e00d      	b.n	8009e4c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d004      	beq.n	8009e44 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d103      	bne.n	8009e4c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009e44:	2180      	movs	r1, #128	@ 0x80
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f001 fa86 	bl	800b358 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d11d      	bne.n	8009e92 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f7ff fe81 	bl	8009b5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009e64:	e015      	b.n	8009e92 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00d      	beq.n	8009e8e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e78:	2b03      	cmp	r3, #3
 8009e7a:	d108      	bne.n	8009e8e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	7afa      	ldrb	r2, [r7, #11]
 8009e86:	4611      	mov	r1, r2
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	4798      	blx	r3
 8009e8c:	e001      	b.n	8009e92 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	e000      	b.n	8009e94 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ea4:	2340      	movs	r3, #64	@ 0x40
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 fa0f 	bl	800b2ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2240      	movs	r2, #64	@ 0x40
 8009ebc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ec0:	2340      	movs	r3, #64	@ 0x40
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2180      	movs	r1, #128	@ 0x80
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f001 fa01 	bl	800b2ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2240      	movs	r2, #64	@ 0x40
 8009ed6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d009      	beq.n	8009f14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	6852      	ldr	r2, [r2, #4]
 8009f0c:	b2d2      	uxtb	r2, r2
 8009f0e:	4611      	mov	r1, r2
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	4798      	blx	r3
  }

  return USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b083      	sub	sp, #12
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	460b      	mov	r3, r1
 8009f28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	78fa      	ldrb	r2, [r7, #3]
 8009f2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bc80      	pop	{r7}
 8009f3a:	4770      	bx	lr

08009f3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2204      	movs	r2, #4
 8009f54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bc80      	pop	{r7}
 8009f62:	4770      	bx	lr

08009f64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d105      	bne.n	8009f82 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bc80      	pop	{r7}
 8009f8c:	4770      	bx	lr

08009f8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d10b      	bne.n	8009fb8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fb2:	69db      	ldr	r3, [r3, #28]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fda:	2b40      	cmp	r3, #64	@ 0x40
 8009fdc:	d005      	beq.n	8009fea <USBD_StdDevReq+0x26>
 8009fde:	2b40      	cmp	r3, #64	@ 0x40
 8009fe0:	d84f      	bhi.n	800a082 <USBD_StdDevReq+0xbe>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d009      	beq.n	8009ffa <USBD_StdDevReq+0x36>
 8009fe6:	2b20      	cmp	r3, #32
 8009fe8:	d14b      	bne.n	800a082 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	4798      	blx	r3
      break;
 8009ff8:	e048      	b.n	800a08c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d839      	bhi.n	800a076 <USBD_StdDevReq+0xb2>
 800a002:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <USBD_StdDevReq+0x44>)
 800a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a06d 	.word	0x0800a06d
 800a010:	0800a077 	.word	0x0800a077
 800a014:	0800a063 	.word	0x0800a063
 800a018:	0800a077 	.word	0x0800a077
 800a01c:	0800a03b 	.word	0x0800a03b
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a077 	.word	0x0800a077
 800a028:	0800a04f 	.word	0x0800a04f
 800a02c:	0800a045 	.word	0x0800a045
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f9dc 	bl	800a3f0 <USBD_GetDescriptor>
          break;
 800a038:	e022      	b.n	800a080 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fb3f 	bl	800a6c0 <USBD_SetAddress>
          break;
 800a042:	e01d      	b.n	800a080 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fb7e 	bl	800a748 <USBD_SetConfig>
          break;
 800a04c:	e018      	b.n	800a080 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fc07 	bl	800a864 <USBD_GetConfig>
          break;
 800a056:	e013      	b.n	800a080 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fc37 	bl	800a8ce <USBD_GetStatus>
          break;
 800a060:	e00e      	b.n	800a080 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fc65 	bl	800a934 <USBD_SetFeature>
          break;
 800a06a:	e009      	b.n	800a080 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fc74 	bl	800a95c <USBD_ClrFeature>
          break;
 800a074:	e004      	b.n	800a080 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fcc9 	bl	800aa10 <USBD_CtlError>
          break;
 800a07e:	bf00      	nop
      }
      break;
 800a080:	e004      	b.n	800a08c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fcc3 	bl	800aa10 <USBD_CtlError>
      break;
 800a08a:	bf00      	nop
  }

  return ret;
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop

0800a098 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0ae:	2b40      	cmp	r3, #64	@ 0x40
 800a0b0:	d005      	beq.n	800a0be <USBD_StdItfReq+0x26>
 800a0b2:	2b40      	cmp	r3, #64	@ 0x40
 800a0b4:	d82e      	bhi.n	800a114 <USBD_StdItfReq+0x7c>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <USBD_StdItfReq+0x26>
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	d12a      	bne.n	800a114 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d81d      	bhi.n	800a106 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	889b      	ldrh	r3, [r3, #4]
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d813      	bhi.n	800a0fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	4798      	blx	r3
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	88db      	ldrh	r3, [r3, #6]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d110      	bne.n	800a110 <USBD_StdItfReq+0x78>
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10d      	bne.n	800a110 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fd53 	bl	800aba0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a0fa:	e009      	b.n	800a110 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fc86 	bl	800aa10 <USBD_CtlError>
          break;
 800a104:	e004      	b.n	800a110 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fc81 	bl	800aa10 <USBD_CtlError>
          break;
 800a10e:	e000      	b.n	800a112 <USBD_StdItfReq+0x7a>
          break;
 800a110:	bf00      	nop
      }
      break;
 800a112:	e004      	b.n	800a11e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fc7a 	bl	800aa10 <USBD_CtlError>
      break;
 800a11c:	bf00      	nop
  }

  return USBD_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	889b      	ldrh	r3, [r3, #4]
 800a13a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a144:	2b40      	cmp	r3, #64	@ 0x40
 800a146:	d007      	beq.n	800a158 <USBD_StdEPReq+0x30>
 800a148:	2b40      	cmp	r3, #64	@ 0x40
 800a14a:	f200 8146 	bhi.w	800a3da <USBD_StdEPReq+0x2b2>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <USBD_StdEPReq+0x40>
 800a152:	2b20      	cmp	r3, #32
 800a154:	f040 8141 	bne.w	800a3da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	4798      	blx	r3
      break;
 800a166:	e13d      	b.n	800a3e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a170:	2b20      	cmp	r3, #32
 800a172:	d10a      	bne.n	800a18a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	e12d      	b.n	800a3e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	785b      	ldrb	r3, [r3, #1]
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d007      	beq.n	800a1a2 <USBD_StdEPReq+0x7a>
 800a192:	2b03      	cmp	r3, #3
 800a194:	f300 811b 	bgt.w	800a3ce <USBD_StdEPReq+0x2a6>
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d072      	beq.n	800a282 <USBD_StdEPReq+0x15a>
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d03a      	beq.n	800a216 <USBD_StdEPReq+0xee>
 800a1a0:	e115      	b.n	800a3ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d002      	beq.n	800a1b2 <USBD_StdEPReq+0x8a>
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d015      	beq.n	800a1dc <USBD_StdEPReq+0xb4>
 800a1b0:	e02b      	b.n	800a20a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00c      	beq.n	800a1d2 <USBD_StdEPReq+0xaa>
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	2b80      	cmp	r3, #128	@ 0x80
 800a1bc:	d009      	beq.n	800a1d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f001 f8c8 	bl	800b358 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a1c8:	2180      	movs	r1, #128	@ 0x80
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 f8c4 	bl	800b358 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1d0:	e020      	b.n	800a214 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fc1b 	bl	800aa10 <USBD_CtlError>
              break;
 800a1da:	e01b      	b.n	800a214 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	885b      	ldrh	r3, [r3, #2]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10e      	bne.n	800a202 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <USBD_StdEPReq+0xda>
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	2b80      	cmp	r3, #128	@ 0x80
 800a1ee:	d008      	beq.n	800a202 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	88db      	ldrh	r3, [r3, #6]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a1f8:	7bbb      	ldrb	r3, [r7, #14]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 f8ab 	bl	800b358 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fccc 	bl	800aba0 <USBD_CtlSendStatus>

              break;
 800a208:	e004      	b.n	800a214 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fbff 	bl	800aa10 <USBD_CtlError>
              break;
 800a212:	bf00      	nop
          }
          break;
 800a214:	e0e0      	b.n	800a3d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d002      	beq.n	800a226 <USBD_StdEPReq+0xfe>
 800a220:	2b03      	cmp	r3, #3
 800a222:	d015      	beq.n	800a250 <USBD_StdEPReq+0x128>
 800a224:	e026      	b.n	800a274 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00c      	beq.n	800a246 <USBD_StdEPReq+0x11e>
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	2b80      	cmp	r3, #128	@ 0x80
 800a230:	d009      	beq.n	800a246 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f001 f88e 	bl	800b358 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a23c:	2180      	movs	r1, #128	@ 0x80
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f001 f88a 	bl	800b358 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a244:	e01c      	b.n	800a280 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fbe1 	bl	800aa10 <USBD_CtlError>
              break;
 800a24e:	e017      	b.n	800a280 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	885b      	ldrh	r3, [r3, #2]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d112      	bne.n	800a27e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a258:	7bbb      	ldrb	r3, [r7, #14]
 800a25a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d004      	beq.n	800a26c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a262:	7bbb      	ldrb	r3, [r7, #14]
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 f895 	bl	800b396 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fc97 	bl	800aba0 <USBD_CtlSendStatus>
              }
              break;
 800a272:	e004      	b.n	800a27e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fbca 	bl	800aa10 <USBD_CtlError>
              break;
 800a27c:	e000      	b.n	800a280 <USBD_StdEPReq+0x158>
              break;
 800a27e:	bf00      	nop
          }
          break;
 800a280:	e0aa      	b.n	800a3d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d002      	beq.n	800a292 <USBD_StdEPReq+0x16a>
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d032      	beq.n	800a2f6 <USBD_StdEPReq+0x1ce>
 800a290:	e097      	b.n	800a3c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <USBD_StdEPReq+0x180>
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	2b80      	cmp	r3, #128	@ 0x80
 800a29c:	d004      	beq.n	800a2a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fbb5 	bl	800aa10 <USBD_CtlError>
                break;
 800a2a6:	e091      	b.n	800a3cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	da0b      	bge.n	800a2c8 <USBD_StdEPReq+0x1a0>
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	3310      	adds	r3, #16
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	e00b      	b.n	800a2e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2c8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	4413      	add	r3, r2
 800a2de:	3304      	adds	r3, #4
 800a2e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fbf8 	bl	800aae4 <USBD_CtlSendData>
              break;
 800a2f4:	e06a      	b.n	800a3cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	da11      	bge.n	800a322 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
 800a300:	f003 020f 	and.w	r2, r3, #15
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	440b      	add	r3, r1
 800a310:	3318      	adds	r3, #24
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d117      	bne.n	800a348 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fb78 	bl	800aa10 <USBD_CtlError>
                  break;
 800a320:	e054      	b.n	800a3cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	f003 020f 	and.w	r2, r3, #15
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	440b      	add	r3, r1
 800a334:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fb65 	bl	800aa10 <USBD_CtlError>
                  break;
 800a346:	e041      	b.n	800a3cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	da0b      	bge.n	800a368 <USBD_StdEPReq+0x240>
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	3310      	adds	r3, #16
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	4413      	add	r3, r2
 800a364:	3304      	adds	r3, #4
 800a366:	e00b      	b.n	800a380 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a368:	7bbb      	ldrb	r3, [r7, #14]
 800a36a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a36e:	4613      	mov	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	4413      	add	r3, r2
 800a37e:	3304      	adds	r3, #4
 800a380:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a382:	7bbb      	ldrb	r3, [r7, #14]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <USBD_StdEPReq+0x266>
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	2b80      	cmp	r3, #128	@ 0x80
 800a38c:	d103      	bne.n	800a396 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	e00e      	b.n	800a3b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f001 f81a 	bl	800b3d4 <USBD_LL_IsStallEP>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]
 800a3ac:	e002      	b.n	800a3b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fb92 	bl	800aae4 <USBD_CtlSendData>
              break;
 800a3c0:	e004      	b.n	800a3cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fb23 	bl	800aa10 <USBD_CtlError>
              break;
 800a3ca:	bf00      	nop
          }
          break;
 800a3cc:	e004      	b.n	800a3d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fb1d 	bl	800aa10 <USBD_CtlError>
          break;
 800a3d6:	bf00      	nop
      }
      break;
 800a3d8:	e004      	b.n	800a3e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fb17 	bl	800aa10 <USBD_CtlError>
      break;
 800a3e2:	bf00      	nop
  }

  return ret;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	885b      	ldrh	r3, [r3, #2]
 800a40a:	0a1b      	lsrs	r3, r3, #8
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3b01      	subs	r3, #1
 800a410:	2b06      	cmp	r3, #6
 800a412:	f200 8128 	bhi.w	800a666 <USBD_GetDescriptor+0x276>
 800a416:	a201      	add	r2, pc, #4	@ (adr r2, 800a41c <USBD_GetDescriptor+0x2c>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a439 	.word	0x0800a439
 800a420:	0800a451 	.word	0x0800a451
 800a424:	0800a491 	.word	0x0800a491
 800a428:	0800a667 	.word	0x0800a667
 800a42c:	0800a667 	.word	0x0800a667
 800a430:	0800a607 	.word	0x0800a607
 800a434:	0800a633 	.word	0x0800a633
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	7c12      	ldrb	r2, [r2, #16]
 800a444:	f107 0108 	add.w	r1, r7, #8
 800a448:	4610      	mov	r0, r2
 800a44a:	4798      	blx	r3
 800a44c:	60f8      	str	r0, [r7, #12]
      break;
 800a44e:	e112      	b.n	800a676 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7c1b      	ldrb	r3, [r3, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10d      	bne.n	800a474 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a460:	f107 0208 	add.w	r2, r7, #8
 800a464:	4610      	mov	r0, r2
 800a466:	4798      	blx	r3
 800a468:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3301      	adds	r3, #1
 800a46e:	2202      	movs	r2, #2
 800a470:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a472:	e100      	b.n	800a676 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47c:	f107 0208 	add.w	r2, r7, #8
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3301      	adds	r3, #1
 800a48a:	2202      	movs	r2, #2
 800a48c:	701a      	strb	r2, [r3, #0]
      break;
 800a48e:	e0f2      	b.n	800a676 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	885b      	ldrh	r3, [r3, #2]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b05      	cmp	r3, #5
 800a498:	f200 80ac 	bhi.w	800a5f4 <USBD_GetDescriptor+0x204>
 800a49c:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a4 <USBD_GetDescriptor+0xb4>)
 800a49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a2:	bf00      	nop
 800a4a4:	0800a4bd 	.word	0x0800a4bd
 800a4a8:	0800a4f1 	.word	0x0800a4f1
 800a4ac:	0800a525 	.word	0x0800a525
 800a4b0:	0800a559 	.word	0x0800a559
 800a4b4:	0800a58d 	.word	0x0800a58d
 800a4b8:	0800a5c1 	.word	0x0800a5c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00b      	beq.n	800a4e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	7c12      	ldrb	r2, [r2, #16]
 800a4d4:	f107 0108 	add.w	r1, r7, #8
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4798      	blx	r3
 800a4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4de:	e091      	b.n	800a604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fa94 	bl	800aa10 <USBD_CtlError>
            err++;
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ee:	e089      	b.n	800a604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00b      	beq.n	800a514 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	7c12      	ldrb	r2, [r2, #16]
 800a508:	f107 0108 	add.w	r1, r7, #8
 800a50c:	4610      	mov	r0, r2
 800a50e:	4798      	blx	r3
 800a510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a512:	e077      	b.n	800a604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fa7a 	bl	800aa10 <USBD_CtlError>
            err++;
 800a51c:	7afb      	ldrb	r3, [r7, #11]
 800a51e:	3301      	adds	r3, #1
 800a520:	72fb      	strb	r3, [r7, #11]
          break;
 800a522:	e06f      	b.n	800a604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	7c12      	ldrb	r2, [r2, #16]
 800a53c:	f107 0108 	add.w	r1, r7, #8
 800a540:	4610      	mov	r0, r2
 800a542:	4798      	blx	r3
 800a544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a546:	e05d      	b.n	800a604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fa60 	bl	800aa10 <USBD_CtlError>
            err++;
 800a550:	7afb      	ldrb	r3, [r7, #11]
 800a552:	3301      	adds	r3, #1
 800a554:	72fb      	strb	r3, [r7, #11]
          break;
 800a556:	e055      	b.n	800a604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00b      	beq.n	800a57c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	7c12      	ldrb	r2, [r2, #16]
 800a570:	f107 0108 	add.w	r1, r7, #8
 800a574:	4610      	mov	r0, r2
 800a576:	4798      	blx	r3
 800a578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a57a:	e043      	b.n	800a604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fa46 	bl	800aa10 <USBD_CtlError>
            err++;
 800a584:	7afb      	ldrb	r3, [r7, #11]
 800a586:	3301      	adds	r3, #1
 800a588:	72fb      	strb	r3, [r7, #11]
          break;
 800a58a:	e03b      	b.n	800a604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00b      	beq.n	800a5b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	7c12      	ldrb	r2, [r2, #16]
 800a5a4:	f107 0108 	add.w	r1, r7, #8
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	4798      	blx	r3
 800a5ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ae:	e029      	b.n	800a604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fa2c 	bl	800aa10 <USBD_CtlError>
            err++;
 800a5b8:	7afb      	ldrb	r3, [r7, #11]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a5be:	e021      	b.n	800a604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00b      	beq.n	800a5e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	7c12      	ldrb	r2, [r2, #16]
 800a5d8:	f107 0108 	add.w	r1, r7, #8
 800a5dc:	4610      	mov	r0, r2
 800a5de:	4798      	blx	r3
 800a5e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5e2:	e00f      	b.n	800a604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5e4:	6839      	ldr	r1, [r7, #0]
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fa12 	bl	800aa10 <USBD_CtlError>
            err++;
 800a5ec:	7afb      	ldrb	r3, [r7, #11]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5f2:	e007      	b.n	800a604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fa0a 	bl	800aa10 <USBD_CtlError>
          err++;
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	3301      	adds	r3, #1
 800a600:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a602:	e038      	b.n	800a676 <USBD_GetDescriptor+0x286>
 800a604:	e037      	b.n	800a676 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	7c1b      	ldrb	r3, [r3, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a616:	f107 0208 	add.w	r2, r7, #8
 800a61a:	4610      	mov	r0, r2
 800a61c:	4798      	blx	r3
 800a61e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a620:	e029      	b.n	800a676 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f9f3 	bl	800aa10 <USBD_CtlError>
        err++;
 800a62a:	7afb      	ldrb	r3, [r7, #11]
 800a62c:	3301      	adds	r3, #1
 800a62e:	72fb      	strb	r3, [r7, #11]
      break;
 800a630:	e021      	b.n	800a676 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	7c1b      	ldrb	r3, [r3, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10d      	bne.n	800a656 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a642:	f107 0208 	add.w	r2, r7, #8
 800a646:	4610      	mov	r0, r2
 800a648:	4798      	blx	r3
 800a64a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3301      	adds	r3, #1
 800a650:	2207      	movs	r2, #7
 800a652:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a654:	e00f      	b.n	800a676 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f9d9 	bl	800aa10 <USBD_CtlError>
        err++;
 800a65e:	7afb      	ldrb	r3, [r7, #11]
 800a660:	3301      	adds	r3, #1
 800a662:	72fb      	strb	r3, [r7, #11]
      break;
 800a664:	e007      	b.n	800a676 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f9d1 	bl	800aa10 <USBD_CtlError>
      err++;
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	3301      	adds	r3, #1
 800a672:	72fb      	strb	r3, [r7, #11]
      break;
 800a674:	bf00      	nop
  }

  if (err != 0U)
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d11c      	bne.n	800a6b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a67c:	893b      	ldrh	r3, [r7, #8]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d011      	beq.n	800a6a6 <USBD_GetDescriptor+0x2b6>
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	88db      	ldrh	r3, [r3, #6]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00d      	beq.n	800a6a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	88da      	ldrh	r2, [r3, #6]
 800a68e:	893b      	ldrh	r3, [r7, #8]
 800a690:	4293      	cmp	r3, r2
 800a692:	bf28      	it	cs
 800a694:	4613      	movcs	r3, r2
 800a696:	b29b      	uxth	r3, r3
 800a698:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a69a:	893b      	ldrh	r3, [r7, #8]
 800a69c:	461a      	mov	r2, r3
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fa1f 	bl	800aae4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	88db      	ldrh	r3, [r3, #6]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d104      	bne.n	800a6b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fa76 	bl	800aba0 <USBD_CtlSendStatus>
 800a6b4:	e000      	b.n	800a6b8 <USBD_GetDescriptor+0x2c8>
    return;
 800a6b6:	bf00      	nop
    }
  }
}
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop

0800a6c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	889b      	ldrh	r3, [r3, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d130      	bne.n	800a734 <USBD_SetAddress+0x74>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	88db      	ldrh	r3, [r3, #6]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d12c      	bne.n	800a734 <USBD_SetAddress+0x74>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	885b      	ldrh	r3, [r3, #2]
 800a6de:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6e0:	d828      	bhi.n	800a734 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6f4:	2b03      	cmp	r3, #3
 800a6f6:	d104      	bne.n	800a702 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f988 	bl	800aa10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a700:	e01d      	b.n	800a73e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	7bfa      	ldrb	r2, [r7, #15]
 800a706:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fe8b 	bl	800b42a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fa43 	bl	800aba0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d004      	beq.n	800a72a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a728:	e009      	b.n	800a73e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a732:	e004      	b.n	800a73e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f96a 	bl	800aa10 <USBD_CtlError>
  }
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	885b      	ldrh	r3, [r3, #2]
 800a756:	b2da      	uxtb	r2, r3
 800a758:	4b41      	ldr	r3, [pc, #260]	@ (800a860 <USBD_SetConfig+0x118>)
 800a75a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a75c:	4b40      	ldr	r3, [pc, #256]	@ (800a860 <USBD_SetConfig+0x118>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d904      	bls.n	800a76e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f952 	bl	800aa10 <USBD_CtlError>
 800a76c:	e075      	b.n	800a85a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a774:	2b02      	cmp	r3, #2
 800a776:	d002      	beq.n	800a77e <USBD_SetConfig+0x36>
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d023      	beq.n	800a7c4 <USBD_SetConfig+0x7c>
 800a77c:	e062      	b.n	800a844 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a77e:	4b38      	ldr	r3, [pc, #224]	@ (800a860 <USBD_SetConfig+0x118>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d01a      	beq.n	800a7bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a786:	4b36      	ldr	r3, [pc, #216]	@ (800a860 <USBD_SetConfig+0x118>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2203      	movs	r2, #3
 800a794:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a798:	4b31      	ldr	r3, [pc, #196]	@ (800a860 <USBD_SetConfig+0x118>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff f9e7 	bl	8009b72 <USBD_SetClassConfig>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d104      	bne.n	800a7b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f92f 	bl	800aa10 <USBD_CtlError>
            return;
 800a7b2:	e052      	b.n	800a85a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f9f3 	bl	800aba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a7ba:	e04e      	b.n	800a85a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f9ef 	bl	800aba0 <USBD_CtlSendStatus>
        break;
 800a7c2:	e04a      	b.n	800a85a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a7c4:	4b26      	ldr	r3, [pc, #152]	@ (800a860 <USBD_SetConfig+0x118>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d112      	bne.n	800a7f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a7d4:	4b22      	ldr	r3, [pc, #136]	@ (800a860 <USBD_SetConfig+0x118>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a7de:	4b20      	ldr	r3, [pc, #128]	@ (800a860 <USBD_SetConfig+0x118>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff f9e3 	bl	8009bb0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f9d8 	bl	800aba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a7f0:	e033      	b.n	800a85a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a860 <USBD_SetConfig+0x118>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d01d      	beq.n	800a83c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff f9d1 	bl	8009bb0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a80e:	4b14      	ldr	r3, [pc, #80]	@ (800a860 <USBD_SetConfig+0x118>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a818:	4b11      	ldr	r3, [pc, #68]	@ (800a860 <USBD_SetConfig+0x118>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff f9a7 	bl	8009b72 <USBD_SetClassConfig>
 800a824:	4603      	mov	r3, r0
 800a826:	2b02      	cmp	r3, #2
 800a828:	d104      	bne.n	800a834 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f8ef 	bl	800aa10 <USBD_CtlError>
            return;
 800a832:	e012      	b.n	800a85a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f9b3 	bl	800aba0 <USBD_CtlSendStatus>
        break;
 800a83a:	e00e      	b.n	800a85a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f9af 	bl	800aba0 <USBD_CtlSendStatus>
        break;
 800a842:	e00a      	b.n	800a85a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f8e2 	bl	800aa10 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a84c:	4b04      	ldr	r3, [pc, #16]	@ (800a860 <USBD_SetConfig+0x118>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff f9ac 	bl	8009bb0 <USBD_ClrClassConfig>
        break;
 800a858:	bf00      	nop
    }
  }
}
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	200005d8 	.word	0x200005d8

0800a864 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	88db      	ldrh	r3, [r3, #6]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d004      	beq.n	800a880 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f8c9 	bl	800aa10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a87e:	e022      	b.n	800a8c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a886:	2b02      	cmp	r3, #2
 800a888:	dc02      	bgt.n	800a890 <USBD_GetConfig+0x2c>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dc03      	bgt.n	800a896 <USBD_GetConfig+0x32>
 800a88e:	e015      	b.n	800a8bc <USBD_GetConfig+0x58>
 800a890:	2b03      	cmp	r3, #3
 800a892:	d00b      	beq.n	800a8ac <USBD_GetConfig+0x48>
 800a894:	e012      	b.n	800a8bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f91d 	bl	800aae4 <USBD_CtlSendData>
        break;
 800a8aa:	e00c      	b.n	800a8c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f915 	bl	800aae4 <USBD_CtlSendData>
        break;
 800a8ba:	e004      	b.n	800a8c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f8a6 	bl	800aa10 <USBD_CtlError>
        break;
 800a8c4:	bf00      	nop
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d81e      	bhi.n	800a922 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	88db      	ldrh	r3, [r3, #6]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d004      	beq.n	800a8f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f88e 	bl	800aa10 <USBD_CtlError>
        break;
 800a8f4:	e01a      	b.n	800a92c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f043 0202 	orr.w	r2, r3, #2
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	330c      	adds	r3, #12
 800a916:	2202      	movs	r2, #2
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f8e2 	bl	800aae4 <USBD_CtlSendData>
      break;
 800a920:	e004      	b.n	800a92c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f873 	bl	800aa10 <USBD_CtlError>
      break;
 800a92a:	bf00      	nop
  }
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	885b      	ldrh	r3, [r3, #2]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d106      	bne.n	800a954 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f926 	bl	800aba0 <USBD_CtlSendStatus>
  }
}
 800a954:	bf00      	nop
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a96c:	3b01      	subs	r3, #1
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d80b      	bhi.n	800a98a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	885b      	ldrh	r3, [r3, #2]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d10c      	bne.n	800a994 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f90c 	bl	800aba0 <USBD_CtlSendStatus>
      }
      break;
 800a988:	e004      	b.n	800a994 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f83f 	bl	800aa10 <USBD_CtlError>
      break;
 800a992:	e000      	b.n	800a996 <USBD_ClrFeature+0x3a>
      break;
 800a994:	bf00      	nop
  }
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	785a      	ldrb	r2, [r3, #1]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	3302      	adds	r3, #2
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	3303      	adds	r3, #3
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	021b      	lsls	r3, r3, #8
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	4413      	add	r3, r2
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	3305      	adds	r3, #5
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	021b      	lsls	r3, r3, #8
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	4413      	add	r3, r2
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	3306      	adds	r3, #6
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	3307      	adds	r3, #7
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	021b      	lsls	r3, r3, #8
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4413      	add	r3, r2
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	80da      	strh	r2, [r3, #6]

}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bc80      	pop	{r7}
 800aa0e:	4770      	bx	lr

0800aa10 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aa1a:	2180      	movs	r1, #128	@ 0x80
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fc9b 	bl	800b358 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aa22:	2100      	movs	r1, #0
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fc97 	bl	800b358 <USBD_LL_StallEP>
}
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b086      	sub	sp, #24
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d032      	beq.n	800aaae <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 f834 	bl	800aab6 <USBD_GetLen>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	3301      	adds	r3, #1
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	75fa      	strb	r2, [r7, #23]
 800aa62:	461a      	mov	r2, r3
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	4413      	add	r3, r2
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	7812      	ldrb	r2, [r2, #0]
 800aa6c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	75fa      	strb	r2, [r7, #23]
 800aa74:	461a      	mov	r2, r3
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	4413      	add	r3, r2
 800aa7a:	2203      	movs	r2, #3
 800aa7c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aa7e:	e012      	b.n	800aaa6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	60fa      	str	r2, [r7, #12]
 800aa86:	7dfa      	ldrb	r2, [r7, #23]
 800aa88:	1c51      	adds	r1, r2, #1
 800aa8a:	75f9      	strb	r1, [r7, #23]
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	440a      	add	r2, r1
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	75fa      	strb	r2, [r7, #23]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e8      	bne.n	800aa80 <USBD_GetString+0x4e>
    }
  }
}
 800aaae:	bf00      	nop
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800aac2:	e005      	b.n	800aad0 <USBD_GetLen+0x1a>
  {
    len++;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	3301      	adds	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3301      	adds	r3, #1
 800aace:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1f5      	bne.n	800aac4 <USBD_GetLen+0xe>
  }

  return len;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	bc80      	pop	{r7}
 800aae2:	4770      	bx	lr

0800aae4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aafa:	88fa      	ldrh	r2, [r7, #6]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ab00:	88fa      	ldrh	r2, [r7, #6]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab06:	88fb      	ldrh	r3, [r7, #6]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 fcab 	bl	800b468 <USBD_LL_Transmit>

  return USBD_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	4613      	mov	r3, r2
 800ab28:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab2a:	88fb      	ldrh	r3, [r7, #6]
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	2100      	movs	r1, #0
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 fc99 	bl	800b468 <USBD_LL_Transmit>

  return USBD_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2203      	movs	r2, #3
 800ab52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ab56:	88fa      	ldrh	r2, [r7, #6]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ab5e:	88fa      	ldrh	r2, [r7, #6]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab66:	88fb      	ldrh	r3, [r7, #6]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 fc9e 	bl	800b4ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4613      	mov	r3, r2
 800ab88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab8a:	88fb      	ldrh	r3, [r7, #6]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	2100      	movs	r1, #0
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 fc8c 	bl	800b4ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2204      	movs	r2, #4
 800abac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800abb0:	2300      	movs	r3, #0
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fc56 	bl	800b468 <USBD_LL_Transmit>

  return USBD_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2205      	movs	r2, #5
 800abd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abd6:	2300      	movs	r3, #0
 800abd8:	2200      	movs	r2, #0
 800abda:	2100      	movs	r1, #0
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fc66 	bl	800b4ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800abf0:	2200      	movs	r2, #0
 800abf2:	4912      	ldr	r1, [pc, #72]	@ (800ac3c <MX_USB_DEVICE_Init+0x50>)
 800abf4:	4812      	ldr	r0, [pc, #72]	@ (800ac40 <MX_USB_DEVICE_Init+0x54>)
 800abf6:	f7fe ff62 	bl	8009abe <USBD_Init>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac00:	f7f6 feac 	bl	800195c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac04:	490f      	ldr	r1, [pc, #60]	@ (800ac44 <MX_USB_DEVICE_Init+0x58>)
 800ac06:	480e      	ldr	r0, [pc, #56]	@ (800ac40 <MX_USB_DEVICE_Init+0x54>)
 800ac08:	f7fe ff84 	bl	8009b14 <USBD_RegisterClass>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac12:	f7f6 fea3 	bl	800195c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac16:	490c      	ldr	r1, [pc, #48]	@ (800ac48 <MX_USB_DEVICE_Init+0x5c>)
 800ac18:	4809      	ldr	r0, [pc, #36]	@ (800ac40 <MX_USB_DEVICE_Init+0x54>)
 800ac1a:	f7fe feb5 	bl	8009988 <USBD_CDC_RegisterInterface>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ac24:	f7f6 fe9a 	bl	800195c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac28:	4805      	ldr	r0, [pc, #20]	@ (800ac40 <MX_USB_DEVICE_Init+0x54>)
 800ac2a:	f7fe ff8c 	bl	8009b46 <USBD_Start>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ac34:	f7f6 fe92 	bl	800195c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac38:	bf00      	nop
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	2000012c 	.word	0x2000012c
 800ac40:	200005dc 	.word	0x200005dc
 800ac44:	20000018 	.word	0x20000018
 800ac48:	2000011c 	.word	0x2000011c

0800ac4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ac50:	2200      	movs	r2, #0
 800ac52:	4905      	ldr	r1, [pc, #20]	@ (800ac68 <CDC_Init_FS+0x1c>)
 800ac54:	4805      	ldr	r0, [pc, #20]	@ (800ac6c <CDC_Init_FS+0x20>)
 800ac56:	f7fe fead 	bl	80099b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ac5a:	4905      	ldr	r1, [pc, #20]	@ (800ac70 <CDC_Init_FS+0x24>)
 800ac5c:	4803      	ldr	r0, [pc, #12]	@ (800ac6c <CDC_Init_FS+0x20>)
 800ac5e:	f7fe fec2 	bl	80099e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ac62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	20000ca0 	.word	0x20000ca0
 800ac6c:	200005dc 	.word	0x200005dc
 800ac70:	200008a0 	.word	0x200008a0

0800ac74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ac78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr
	...

0800ac84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	6039      	str	r1, [r7, #0]
 800ac8e:	71fb      	strb	r3, [r7, #7]
 800ac90:	4613      	mov	r3, r2
 800ac92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ac94:	79fb      	ldrb	r3, [r7, #7]
 800ac96:	2b23      	cmp	r3, #35	@ 0x23
 800ac98:	d84a      	bhi.n	800ad30 <CDC_Control_FS+0xac>
 800ac9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aca0 <CDC_Control_FS+0x1c>)
 800ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca0:	0800ad31 	.word	0x0800ad31
 800aca4:	0800ad31 	.word	0x0800ad31
 800aca8:	0800ad31 	.word	0x0800ad31
 800acac:	0800ad31 	.word	0x0800ad31
 800acb0:	0800ad31 	.word	0x0800ad31
 800acb4:	0800ad31 	.word	0x0800ad31
 800acb8:	0800ad31 	.word	0x0800ad31
 800acbc:	0800ad31 	.word	0x0800ad31
 800acc0:	0800ad31 	.word	0x0800ad31
 800acc4:	0800ad31 	.word	0x0800ad31
 800acc8:	0800ad31 	.word	0x0800ad31
 800accc:	0800ad31 	.word	0x0800ad31
 800acd0:	0800ad31 	.word	0x0800ad31
 800acd4:	0800ad31 	.word	0x0800ad31
 800acd8:	0800ad31 	.word	0x0800ad31
 800acdc:	0800ad31 	.word	0x0800ad31
 800ace0:	0800ad31 	.word	0x0800ad31
 800ace4:	0800ad31 	.word	0x0800ad31
 800ace8:	0800ad31 	.word	0x0800ad31
 800acec:	0800ad31 	.word	0x0800ad31
 800acf0:	0800ad31 	.word	0x0800ad31
 800acf4:	0800ad31 	.word	0x0800ad31
 800acf8:	0800ad31 	.word	0x0800ad31
 800acfc:	0800ad31 	.word	0x0800ad31
 800ad00:	0800ad31 	.word	0x0800ad31
 800ad04:	0800ad31 	.word	0x0800ad31
 800ad08:	0800ad31 	.word	0x0800ad31
 800ad0c:	0800ad31 	.word	0x0800ad31
 800ad10:	0800ad31 	.word	0x0800ad31
 800ad14:	0800ad31 	.word	0x0800ad31
 800ad18:	0800ad31 	.word	0x0800ad31
 800ad1c:	0800ad31 	.word	0x0800ad31
 800ad20:	0800ad31 	.word	0x0800ad31
 800ad24:	0800ad31 	.word	0x0800ad31
 800ad28:	0800ad31 	.word	0x0800ad31
 800ad2c:	0800ad31 	.word	0x0800ad31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad30:	bf00      	nop
  }

  return (USBD_OK);
 800ad32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bc80      	pop	{r7}
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop

0800ad40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	480a      	ldr	r0, [pc, #40]	@ (800ad78 <CDC_Receive_FS+0x38>)
 800ad4e:	f7fe fe4a 	bl	80099e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ad52:	4809      	ldr	r0, [pc, #36]	@ (800ad78 <CDC_Receive_FS+0x38>)
 800ad54:	f7fe fe89 	bl	8009a6a <USBD_CDC_ReceivePacket>
  data_recieved += strlen(UserRxBufferFS);
 800ad58:	4808      	ldr	r0, [pc, #32]	@ (800ad7c <CDC_Receive_FS+0x3c>)
 800ad5a:	f7f5 f9f9 	bl	8000150 <strlen>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <CDC_Receive_FS+0x40>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	4413      	add	r3, r2
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	4b05      	ldr	r3, [pc, #20]	@ (800ad80 <CDC_Receive_FS+0x40>)
 800ad6c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800ad6e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	200005dc 	.word	0x200005dc
 800ad7c:	200008a0 	.word	0x200008a0
 800ad80:	200010a0 	.word	0x200010a0

0800ad84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ad94:	4b0d      	ldr	r3, [pc, #52]	@ (800adcc <CDC_Transmit_FS+0x48>)
 800ad96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e00b      	b.n	800adc2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800adaa:	887b      	ldrh	r3, [r7, #2]
 800adac:	461a      	mov	r2, r3
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	4806      	ldr	r0, [pc, #24]	@ (800adcc <CDC_Transmit_FS+0x48>)
 800adb2:	f7fe fdff 	bl	80099b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800adb6:	4805      	ldr	r0, [pc, #20]	@ (800adcc <CDC_Transmit_FS+0x48>)
 800adb8:	f7fe fe28 	bl	8009a0c <USBD_CDC_TransmitPacket>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	200005dc 	.word	0x200005dc

0800add0 <CDC_data_recieved>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_data_recieved()
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
	return data_recieved;
 800add4:	4b02      	ldr	r3, [pc, #8]	@ (800ade0 <CDC_data_recieved+0x10>)
 800add6:	781b      	ldrb	r3, [r3, #0]
}
 800add8:	4618      	mov	r0, r3
 800adda:	46bd      	mov	sp, r7
 800addc:	bc80      	pop	{r7}
 800adde:	4770      	bx	lr
 800ade0:	200010a0 	.word	0x200010a0

0800ade4 <CDC_Receive_data>:

uint8_t CDC_Receive_data(uint8_t* buf, size_t size)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	if (data_recieved + 1 <= size) size = data_recieved + 1;
 800adee:	4b13      	ldr	r3, [pc, #76]	@ (800ae3c <CDC_Receive_data+0x58>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	461a      	mov	r2, r3
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d303      	bcc.n	800ae04 <CDC_Receive_data+0x20>
 800adfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ae3c <CDC_Receive_data+0x58>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	3301      	adds	r3, #1
 800ae02:	603b      	str	r3, [r7, #0]
	memset(buf, '\0', size);
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	2100      	movs	r1, #0
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 fb06 	bl	800c41a <memset>
	memcpy(buf, UserRxBufferFS, size);
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	490b      	ldr	r1, [pc, #44]	@ (800ae40 <CDC_Receive_data+0x5c>)
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 fb8f 	bl	800c536 <memcpy>
	memset(UserRxBufferFS, '\0', data_recieved);
 800ae18:	4b08      	ldr	r3, [pc, #32]	@ (800ae3c <CDC_Receive_data+0x58>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	2100      	movs	r1, #0
 800ae20:	4807      	ldr	r0, [pc, #28]	@ (800ae40 <CDC_Receive_data+0x5c>)
 800ae22:	f001 fafa 	bl	800c41a <memset>
	data_recieved = 0;
 800ae26:	4b05      	ldr	r3, [pc, #20]	@ (800ae3c <CDC_Receive_data+0x58>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	701a      	strb	r2, [r3, #0]
	return size - 1;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	3b01      	subs	r3, #1
 800ae32:	b2db      	uxtb	r3, r3
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	200010a0 	.word	0x200010a0
 800ae40:	200008a0 	.word	0x200008a0

0800ae44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	6039      	str	r1, [r7, #0]
 800ae4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2212      	movs	r2, #18
 800ae54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ae56:	4b03      	ldr	r3, [pc, #12]	@ (800ae64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bc80      	pop	{r7}
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20000148 	.word	0x20000148

0800ae68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	6039      	str	r1, [r7, #0]
 800ae72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	2204      	movs	r2, #4
 800ae78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae7a:	4b03      	ldr	r3, [pc, #12]	@ (800ae88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bc80      	pop	{r7}
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	2000015c 	.word	0x2000015c

0800ae8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	6039      	str	r1, [r7, #0]
 800ae96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae98:	79fb      	ldrb	r3, [r7, #7]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d105      	bne.n	800aeaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	4907      	ldr	r1, [pc, #28]	@ (800aec0 <USBD_FS_ProductStrDescriptor+0x34>)
 800aea2:	4808      	ldr	r0, [pc, #32]	@ (800aec4 <USBD_FS_ProductStrDescriptor+0x38>)
 800aea4:	f7ff fdc5 	bl	800aa32 <USBD_GetString>
 800aea8:	e004      	b.n	800aeb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4904      	ldr	r1, [pc, #16]	@ (800aec0 <USBD_FS_ProductStrDescriptor+0x34>)
 800aeae:	4805      	ldr	r0, [pc, #20]	@ (800aec4 <USBD_FS_ProductStrDescriptor+0x38>)
 800aeb0:	f7ff fdbf 	bl	800aa32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aeb4:	4b02      	ldr	r3, [pc, #8]	@ (800aec0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200010a4 	.word	0x200010a4
 800aec4:	0800f160 	.word	0x0800f160

0800aec8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	4603      	mov	r3, r0
 800aed0:	6039      	str	r1, [r7, #0]
 800aed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	4904      	ldr	r1, [pc, #16]	@ (800aee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aed8:	4804      	ldr	r0, [pc, #16]	@ (800aeec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aeda:	f7ff fdaa 	bl	800aa32 <USBD_GetString>
  return USBD_StrDesc;
 800aede:	4b02      	ldr	r3, [pc, #8]	@ (800aee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	200010a4 	.word	0x200010a4
 800aeec:	0800f178 	.word	0x0800f178

0800aef0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	6039      	str	r1, [r7, #0]
 800aefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	221a      	movs	r2, #26
 800af00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af02:	f000 f843 	bl	800af8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af06:	4b02      	ldr	r3, [pc, #8]	@ (800af10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	20000160 	.word	0x20000160

0800af14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d105      	bne.n	800af32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	4907      	ldr	r1, [pc, #28]	@ (800af48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af2a:	4808      	ldr	r0, [pc, #32]	@ (800af4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800af2c:	f7ff fd81 	bl	800aa32 <USBD_GetString>
 800af30:	e004      	b.n	800af3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	4904      	ldr	r1, [pc, #16]	@ (800af48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af36:	4805      	ldr	r0, [pc, #20]	@ (800af4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800af38:	f7ff fd7b 	bl	800aa32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af3c:	4b02      	ldr	r3, [pc, #8]	@ (800af48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	200010a4 	.word	0x200010a4
 800af4c:	0800f18c 	.word	0x0800f18c

0800af50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	6039      	str	r1, [r7, #0]
 800af5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af5c:	79fb      	ldrb	r3, [r7, #7]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d105      	bne.n	800af6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	4907      	ldr	r1, [pc, #28]	@ (800af84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af66:	4808      	ldr	r0, [pc, #32]	@ (800af88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af68:	f7ff fd63 	bl	800aa32 <USBD_GetString>
 800af6c:	e004      	b.n	800af78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	4904      	ldr	r1, [pc, #16]	@ (800af84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af72:	4805      	ldr	r0, [pc, #20]	@ (800af88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af74:	f7ff fd5d 	bl	800aa32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af78:	4b02      	ldr	r3, [pc, #8]	@ (800af84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	200010a4 	.word	0x200010a4
 800af88:	0800f198 	.word	0x0800f198

0800af8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af92:	4b0f      	ldr	r3, [pc, #60]	@ (800afd0 <Get_SerialNum+0x44>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af98:	4b0e      	ldr	r3, [pc, #56]	@ (800afd4 <Get_SerialNum+0x48>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af9e:	4b0e      	ldr	r3, [pc, #56]	@ (800afd8 <Get_SerialNum+0x4c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4413      	add	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800afb2:	2208      	movs	r2, #8
 800afb4:	4909      	ldr	r1, [pc, #36]	@ (800afdc <Get_SerialNum+0x50>)
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f000 f814 	bl	800afe4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800afbc:	2204      	movs	r2, #4
 800afbe:	4908      	ldr	r1, [pc, #32]	@ (800afe0 <Get_SerialNum+0x54>)
 800afc0:	68b8      	ldr	r0, [r7, #8]
 800afc2:	f000 f80f 	bl	800afe4 <IntToUnicode>
  }
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	1ffff7e8 	.word	0x1ffff7e8
 800afd4:	1ffff7ec 	.word	0x1ffff7ec
 800afd8:	1ffff7f0 	.word	0x1ffff7f0
 800afdc:	20000162 	.word	0x20000162
 800afe0:	20000172 	.word	0x20000172

0800afe4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	4613      	mov	r3, r2
 800aff0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aff6:	2300      	movs	r3, #0
 800aff8:	75fb      	strb	r3, [r7, #23]
 800affa:	e027      	b.n	800b04c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	0f1b      	lsrs	r3, r3, #28
 800b000:	2b09      	cmp	r3, #9
 800b002:	d80b      	bhi.n	800b01c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	0f1b      	lsrs	r3, r3, #28
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	4619      	mov	r1, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	440b      	add	r3, r1
 800b014:	3230      	adds	r2, #48	@ 0x30
 800b016:	b2d2      	uxtb	r2, r2
 800b018:	701a      	strb	r2, [r3, #0]
 800b01a:	e00a      	b.n	800b032 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	0f1b      	lsrs	r3, r3, #28
 800b020:	b2da      	uxtb	r2, r3
 800b022:	7dfb      	ldrb	r3, [r7, #23]
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	4619      	mov	r1, r3
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	440b      	add	r3, r1
 800b02c:	3237      	adds	r2, #55	@ 0x37
 800b02e:	b2d2      	uxtb	r2, r2
 800b030:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	011b      	lsls	r3, r3, #4
 800b036:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b038:	7dfb      	ldrb	r3, [r7, #23]
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	3301      	adds	r3, #1
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	4413      	add	r3, r2
 800b042:	2200      	movs	r2, #0
 800b044:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b046:	7dfb      	ldrb	r3, [r7, #23]
 800b048:	3301      	adds	r3, #1
 800b04a:	75fb      	strb	r3, [r7, #23]
 800b04c:	7dfa      	ldrb	r2, [r7, #23]
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	429a      	cmp	r2, r3
 800b052:	d3d3      	bcc.n	800affc <IntToUnicode+0x18>
  }
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	371c      	adds	r7, #28
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bc80      	pop	{r7}
 800b05e:	4770      	bx	lr

0800b060 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a0d      	ldr	r2, [pc, #52]	@ (800b0a4 <HAL_PCD_MspInit+0x44>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d113      	bne.n	800b09a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b072:	4b0d      	ldr	r3, [pc, #52]	@ (800b0a8 <HAL_PCD_MspInit+0x48>)
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	4a0c      	ldr	r2, [pc, #48]	@ (800b0a8 <HAL_PCD_MspInit+0x48>)
 800b078:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b07c:	61d3      	str	r3, [r2, #28]
 800b07e:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a8 <HAL_PCD_MspInit+0x48>)
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b08a:	2200      	movs	r2, #0
 800b08c:	2100      	movs	r1, #0
 800b08e:	2014      	movs	r0, #20
 800b090:	f7f8 f985 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b094:	2014      	movs	r0, #20
 800b096:	f7f8 f99e 	bl	80033d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b09a:	bf00      	nop
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	40005c00 	.word	0x40005c00
 800b0a8:	40021000 	.word	0x40021000

0800b0ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	f7fe fd87 	bl	8009bd6 <USBD_LL_SetupStage>
}
 800b0c8:	bf00      	nop
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b0e2:	78fa      	ldrb	r2, [r7, #3]
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	440b      	add	r3, r1
 800b0f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	78fb      	ldrb	r3, [r7, #3]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	f7fe fdb9 	bl	8009c70 <USBD_LL_DataOutStage>
}
 800b0fe:	bf00      	nop
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b118:	78fa      	ldrb	r2, [r7, #3]
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	440b      	add	r3, r1
 800b126:	3324      	adds	r3, #36	@ 0x24
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	78fb      	ldrb	r3, [r7, #3]
 800b12c:	4619      	mov	r1, r3
 800b12e:	f7fe fe10 	bl	8009d52 <USBD_LL_DataInStage>
}
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b082      	sub	sp, #8
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe ff20 	bl	8009f8e <USBD_LL_SOF>
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b15e:	2301      	movs	r3, #1
 800b160:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	799b      	ldrb	r3, [r3, #6]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d001      	beq.n	800b16e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b16a:	f7f6 fbf7 	bl	800195c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b174:	7bfa      	ldrb	r2, [r7, #15]
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe fed0 	bl	8009f1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b184:	4618      	mov	r0, r3
 800b186:	f7fe fe89 	bl	8009e9c <USBD_LL_Reset>
}
 800b18a:	bf00      	nop
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe feca 	bl	8009f3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	7a9b      	ldrb	r3, [r3, #10]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1b0:	4b04      	ldr	r3, [pc, #16]	@ (800b1c4 <HAL_PCD_SuspendCallback+0x30>)
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	4a03      	ldr	r2, [pc, #12]	@ (800b1c4 <HAL_PCD_SuspendCallback+0x30>)
 800b1b6:	f043 0306 	orr.w	r3, r3, #6
 800b1ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	e000ed00 	.word	0xe000ed00

0800b1c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe fec4 	bl	8009f64 <USBD_LL_Resume>
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b1ec:	4a28      	ldr	r2, [pc, #160]	@ (800b290 <USBD_LL_Init+0xac>)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a26      	ldr	r2, [pc, #152]	@ (800b290 <USBD_LL_Init+0xac>)
 800b1f8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b1fc:	4b24      	ldr	r3, [pc, #144]	@ (800b290 <USBD_LL_Init+0xac>)
 800b1fe:	4a25      	ldr	r2, [pc, #148]	@ (800b294 <USBD_LL_Init+0xb0>)
 800b200:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b202:	4b23      	ldr	r3, [pc, #140]	@ (800b290 <USBD_LL_Init+0xac>)
 800b204:	2208      	movs	r2, #8
 800b206:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b208:	4b21      	ldr	r3, [pc, #132]	@ (800b290 <USBD_LL_Init+0xac>)
 800b20a:	2202      	movs	r2, #2
 800b20c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b20e:	4b20      	ldr	r3, [pc, #128]	@ (800b290 <USBD_LL_Init+0xac>)
 800b210:	2200      	movs	r2, #0
 800b212:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b214:	4b1e      	ldr	r3, [pc, #120]	@ (800b290 <USBD_LL_Init+0xac>)
 800b216:	2200      	movs	r2, #0
 800b218:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b21a:	4b1d      	ldr	r3, [pc, #116]	@ (800b290 <USBD_LL_Init+0xac>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b220:	481b      	ldr	r0, [pc, #108]	@ (800b290 <USBD_LL_Init+0xac>)
 800b222:	f7f8 fcb9 	bl	8003b98 <HAL_PCD_Init>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b22c:	f7f6 fb96 	bl	800195c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b236:	2318      	movs	r3, #24
 800b238:	2200      	movs	r2, #0
 800b23a:	2100      	movs	r1, #0
 800b23c:	f7fa f9ca 	bl	80055d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b246:	2358      	movs	r3, #88	@ 0x58
 800b248:	2200      	movs	r2, #0
 800b24a:	2180      	movs	r1, #128	@ 0x80
 800b24c:	f7fa f9c2 	bl	80055d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b256:	23c0      	movs	r3, #192	@ 0xc0
 800b258:	2200      	movs	r2, #0
 800b25a:	2181      	movs	r1, #129	@ 0x81
 800b25c:	f7fa f9ba 	bl	80055d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b266:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b26a:	2200      	movs	r2, #0
 800b26c:	2101      	movs	r1, #1
 800b26e:	f7fa f9b1 	bl	80055d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b27c:	2200      	movs	r2, #0
 800b27e:	2182      	movs	r1, #130	@ 0x82
 800b280:	f7fa f9a8 	bl	80055d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	200012a4 	.word	0x200012a4
 800b294:	40005c00 	.word	0x40005c00

0800b298 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7f8 fd68 	bl	8003d84 <HAL_PCD_Start>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 f94e 	bl	800b55c <USBD_Get_USB_Status>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	4608      	mov	r0, r1
 800b2d8:	4611      	mov	r1, r2
 800b2da:	461a      	mov	r2, r3
 800b2dc:	4603      	mov	r3, r0
 800b2de:	70fb      	strb	r3, [r7, #3]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70bb      	strb	r3, [r7, #2]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b2f6:	78bb      	ldrb	r3, [r7, #2]
 800b2f8:	883a      	ldrh	r2, [r7, #0]
 800b2fa:	78f9      	ldrb	r1, [r7, #3]
 800b2fc:	f7f8 febc 	bl	8004078 <HAL_PCD_EP_Open>
 800b300:	4603      	mov	r3, r0
 800b302:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b304:	7bfb      	ldrb	r3, [r7, #15]
 800b306:	4618      	mov	r0, r3
 800b308:	f000 f928 	bl	800b55c <USBD_Get_USB_Status>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b310:	7bbb      	ldrb	r3, [r7, #14]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	460b      	mov	r3, r1
 800b324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b334:	78fa      	ldrb	r2, [r7, #3]
 800b336:	4611      	mov	r1, r2
 800b338:	4618      	mov	r0, r3
 800b33a:	f7f8 fefa 	bl	8004132 <HAL_PCD_EP_Close>
 800b33e:	4603      	mov	r3, r0
 800b340:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b342:	7bfb      	ldrb	r3, [r7, #15]
 800b344:	4618      	mov	r0, r3
 800b346:	f000 f909 	bl	800b55c <USBD_Get_USB_Status>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b372:	78fa      	ldrb	r2, [r7, #3]
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f7f8 ffa2 	bl	80042c0 <HAL_PCD_EP_SetStall>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	4618      	mov	r0, r3
 800b384:	f000 f8ea 	bl	800b55c <USBD_Get_USB_Status>
 800b388:	4603      	mov	r3, r0
 800b38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	460b      	mov	r3, r1
 800b3a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3b0:	78fa      	ldrb	r2, [r7, #3]
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7f8 ffe3 	bl	8004380 <HAL_PCD_EP_ClrStall>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 f8cb 	bl	800b55c <USBD_Get_USB_Status>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b3e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	da0b      	bge.n	800b408 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b3f0:	78fb      	ldrb	r3, [r7, #3]
 800b3f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3f6:	68f9      	ldr	r1, [r7, #12]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	440b      	add	r3, r1
 800b402:	3312      	adds	r3, #18
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	e00b      	b.n	800b420 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b40e:	68f9      	ldr	r1, [r7, #12]
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	440b      	add	r3, r1
 800b41a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b41e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b420:	4618      	mov	r0, r3
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	bc80      	pop	{r7}
 800b428:	4770      	bx	lr

0800b42a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b444:	78fa      	ldrb	r2, [r7, #3]
 800b446:	4611      	mov	r1, r2
 800b448:	4618      	mov	r0, r3
 800b44a:	f7f8 fdf1 	bl	8004030 <HAL_PCD_SetAddress>
 800b44e:	4603      	mov	r3, r0
 800b450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b452:	7bfb      	ldrb	r3, [r7, #15]
 800b454:	4618      	mov	r0, r3
 800b456:	f000 f881 	bl	800b55c <USBD_Get_USB_Status>
 800b45a:	4603      	mov	r3, r0
 800b45c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	607a      	str	r2, [r7, #4]
 800b472:	461a      	mov	r2, r3
 800b474:	460b      	mov	r3, r1
 800b476:	72fb      	strb	r3, [r7, #11]
 800b478:	4613      	mov	r3, r2
 800b47a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b48a:	893b      	ldrh	r3, [r7, #8]
 800b48c:	7af9      	ldrb	r1, [r7, #11]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	f7f8 fedf 	bl	8004252 <HAL_PCD_EP_Transmit>
 800b494:	4603      	mov	r3, r0
 800b496:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b498:	7dfb      	ldrb	r3, [r7, #23]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f85e 	bl	800b55c <USBD_Get_USB_Status>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b086      	sub	sp, #24
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	72fb      	strb	r3, [r7, #11]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b4d0:	893b      	ldrh	r3, [r7, #8]
 800b4d2:	7af9      	ldrb	r1, [r7, #11]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	f7f8 fe74 	bl	80041c2 <HAL_PCD_EP_Receive>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 f83b 	bl	800b55c <USBD_Get_USB_Status>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b506:	78fa      	ldrb	r2, [r7, #3]
 800b508:	4611      	mov	r1, r2
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7f8 fe8a 	bl	8004224 <HAL_PCD_EP_GetRxCount>
 800b510:	4603      	mov	r3, r0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
	...

0800b51c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b524:	4b02      	ldr	r3, [pc, #8]	@ (800b530 <USBD_static_malloc+0x14>)
}
 800b526:	4618      	mov	r0, r3
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bc80      	pop	{r7}
 800b52e:	4770      	bx	lr
 800b530:	2000157c 	.word	0x2000157c

0800b534 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]

}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr

0800b546 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b546:	b480      	push	{r7}
 800b548:	b083      	sub	sp, #12
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b552:	bf00      	nop
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	bc80      	pop	{r7}
 800b55a:	4770      	bx	lr

0800b55c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	4603      	mov	r3, r0
 800b564:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b56a:	79fb      	ldrb	r3, [r7, #7]
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d817      	bhi.n	800b5a0 <USBD_Get_USB_Status+0x44>
 800b570:	a201      	add	r2, pc, #4	@ (adr r2, 800b578 <USBD_Get_USB_Status+0x1c>)
 800b572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b576:	bf00      	nop
 800b578:	0800b589 	.word	0x0800b589
 800b57c:	0800b58f 	.word	0x0800b58f
 800b580:	0800b595 	.word	0x0800b595
 800b584:	0800b59b 	.word	0x0800b59b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	73fb      	strb	r3, [r7, #15]
    break;
 800b58c:	e00b      	b.n	800b5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b58e:	2302      	movs	r3, #2
 800b590:	73fb      	strb	r3, [r7, #15]
    break;
 800b592:	e008      	b.n	800b5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b594:	2301      	movs	r3, #1
 800b596:	73fb      	strb	r3, [r7, #15]
    break;
 800b598:	e005      	b.n	800b5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b59a:	2302      	movs	r3, #2
 800b59c:	73fb      	strb	r3, [r7, #15]
    break;
 800b59e:	e002      	b.n	800b5a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5a4:	bf00      	nop
  }
  return usb_status;
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3714      	adds	r7, #20
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bc80      	pop	{r7}
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop

0800b5b4 <atof>:
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	f000 bdfb 	b.w	800c1b0 <strtod>

0800b5ba <sulp>:
 800b5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5be:	460f      	mov	r7, r1
 800b5c0:	4690      	mov	r8, r2
 800b5c2:	f001 ff81 	bl	800d4c8 <__ulp>
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	f1b8 0f00 	cmp.w	r8, #0
 800b5ce:	d011      	beq.n	800b5f4 <sulp+0x3a>
 800b5d0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b5d4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dd0b      	ble.n	800b5f4 <sulp+0x3a>
 800b5dc:	2400      	movs	r4, #0
 800b5de:	051b      	lsls	r3, r3, #20
 800b5e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b5e4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	462b      	mov	r3, r5
 800b5ec:	f7f4 ff74 	bl	80004d8 <__aeabi_dmul>
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	0000      	movs	r0, r0
	...

0800b600 <_strtod_l>:
 800b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	b09f      	sub	sp, #124	@ 0x7c
 800b606:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b608:	2200      	movs	r2, #0
 800b60a:	460c      	mov	r4, r1
 800b60c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b60e:	f04f 0a00 	mov.w	sl, #0
 800b612:	f04f 0b00 	mov.w	fp, #0
 800b616:	460a      	mov	r2, r1
 800b618:	9005      	str	r0, [sp, #20]
 800b61a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b61c:	7811      	ldrb	r1, [r2, #0]
 800b61e:	292b      	cmp	r1, #43	@ 0x2b
 800b620:	d048      	beq.n	800b6b4 <_strtod_l+0xb4>
 800b622:	d836      	bhi.n	800b692 <_strtod_l+0x92>
 800b624:	290d      	cmp	r1, #13
 800b626:	d830      	bhi.n	800b68a <_strtod_l+0x8a>
 800b628:	2908      	cmp	r1, #8
 800b62a:	d830      	bhi.n	800b68e <_strtod_l+0x8e>
 800b62c:	2900      	cmp	r1, #0
 800b62e:	d039      	beq.n	800b6a4 <_strtod_l+0xa4>
 800b630:	2200      	movs	r2, #0
 800b632:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b634:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b636:	782a      	ldrb	r2, [r5, #0]
 800b638:	2a30      	cmp	r2, #48	@ 0x30
 800b63a:	f040 80b1 	bne.w	800b7a0 <_strtod_l+0x1a0>
 800b63e:	786a      	ldrb	r2, [r5, #1]
 800b640:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b644:	2a58      	cmp	r2, #88	@ 0x58
 800b646:	d16c      	bne.n	800b722 <_strtod_l+0x122>
 800b648:	9302      	str	r3, [sp, #8]
 800b64a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b64c:	4a8e      	ldr	r2, [pc, #568]	@ (800b888 <_strtod_l+0x288>)
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	ab1a      	add	r3, sp, #104	@ 0x68
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	9805      	ldr	r0, [sp, #20]
 800b656:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b658:	a919      	add	r1, sp, #100	@ 0x64
 800b65a:	f001 f831 	bl	800c6c0 <__gethex>
 800b65e:	f010 060f 	ands.w	r6, r0, #15
 800b662:	4604      	mov	r4, r0
 800b664:	d005      	beq.n	800b672 <_strtod_l+0x72>
 800b666:	2e06      	cmp	r6, #6
 800b668:	d126      	bne.n	800b6b8 <_strtod_l+0xb8>
 800b66a:	2300      	movs	r3, #0
 800b66c:	3501      	adds	r5, #1
 800b66e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b670:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b672:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b674:	2b00      	cmp	r3, #0
 800b676:	f040 8584 	bne.w	800c182 <_strtod_l+0xb82>
 800b67a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b67c:	b1bb      	cbz	r3, 800b6ae <_strtod_l+0xae>
 800b67e:	4650      	mov	r0, sl
 800b680:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b684:	b01f      	add	sp, #124	@ 0x7c
 800b686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68a:	2920      	cmp	r1, #32
 800b68c:	d1d0      	bne.n	800b630 <_strtod_l+0x30>
 800b68e:	3201      	adds	r2, #1
 800b690:	e7c3      	b.n	800b61a <_strtod_l+0x1a>
 800b692:	292d      	cmp	r1, #45	@ 0x2d
 800b694:	d1cc      	bne.n	800b630 <_strtod_l+0x30>
 800b696:	2101      	movs	r1, #1
 800b698:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b69a:	1c51      	adds	r1, r2, #1
 800b69c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b69e:	7852      	ldrb	r2, [r2, #1]
 800b6a0:	2a00      	cmp	r2, #0
 800b6a2:	d1c7      	bne.n	800b634 <_strtod_l+0x34>
 800b6a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6a6:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f040 8568 	bne.w	800c17e <_strtod_l+0xb7e>
 800b6ae:	4650      	mov	r0, sl
 800b6b0:	4659      	mov	r1, fp
 800b6b2:	e7e7      	b.n	800b684 <_strtod_l+0x84>
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	e7ef      	b.n	800b698 <_strtod_l+0x98>
 800b6b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b6ba:	b13a      	cbz	r2, 800b6cc <_strtod_l+0xcc>
 800b6bc:	2135      	movs	r1, #53	@ 0x35
 800b6be:	a81c      	add	r0, sp, #112	@ 0x70
 800b6c0:	f002 f80e 	bl	800d6e0 <__copybits>
 800b6c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6c6:	9805      	ldr	r0, [sp, #20]
 800b6c8:	f001 fbcc 	bl	800ce64 <_Bfree>
 800b6cc:	3e01      	subs	r6, #1
 800b6ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b6d0:	2e04      	cmp	r6, #4
 800b6d2:	d806      	bhi.n	800b6e2 <_strtod_l+0xe2>
 800b6d4:	e8df f006 	tbb	[pc, r6]
 800b6d8:	201d0314 	.word	0x201d0314
 800b6dc:	14          	.byte	0x14
 800b6dd:	00          	.byte	0x00
 800b6de:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b6e2:	05e1      	lsls	r1, r4, #23
 800b6e4:	bf48      	it	mi
 800b6e6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b6ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6ee:	0d1b      	lsrs	r3, r3, #20
 800b6f0:	051b      	lsls	r3, r3, #20
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1bd      	bne.n	800b672 <_strtod_l+0x72>
 800b6f6:	f000 fef1 	bl	800c4dc <__errno>
 800b6fa:	2322      	movs	r3, #34	@ 0x22
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	e7b8      	b.n	800b672 <_strtod_l+0x72>
 800b700:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b704:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b708:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b70c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b710:	e7e7      	b.n	800b6e2 <_strtod_l+0xe2>
 800b712:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b88c <_strtod_l+0x28c>
 800b716:	e7e4      	b.n	800b6e2 <_strtod_l+0xe2>
 800b718:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b71c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b720:	e7df      	b.n	800b6e2 <_strtod_l+0xe2>
 800b722:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	9219      	str	r2, [sp, #100]	@ 0x64
 800b728:	785b      	ldrb	r3, [r3, #1]
 800b72a:	2b30      	cmp	r3, #48	@ 0x30
 800b72c:	d0f9      	beq.n	800b722 <_strtod_l+0x122>
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d09f      	beq.n	800b672 <_strtod_l+0x72>
 800b732:	2301      	movs	r3, #1
 800b734:	9309      	str	r3, [sp, #36]	@ 0x24
 800b736:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b738:	220a      	movs	r2, #10
 800b73a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b73c:	2300      	movs	r3, #0
 800b73e:	461f      	mov	r7, r3
 800b740:	9308      	str	r3, [sp, #32]
 800b742:	930a      	str	r3, [sp, #40]	@ 0x28
 800b744:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b746:	7805      	ldrb	r5, [r0, #0]
 800b748:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b74c:	b2d9      	uxtb	r1, r3
 800b74e:	2909      	cmp	r1, #9
 800b750:	d928      	bls.n	800b7a4 <_strtod_l+0x1a4>
 800b752:	2201      	movs	r2, #1
 800b754:	494e      	ldr	r1, [pc, #312]	@ (800b890 <_strtod_l+0x290>)
 800b756:	f000 fe68 	bl	800c42a <strncmp>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d032      	beq.n	800b7c4 <_strtod_l+0x1c4>
 800b75e:	2000      	movs	r0, #0
 800b760:	462a      	mov	r2, r5
 800b762:	4681      	mov	r9, r0
 800b764:	463d      	mov	r5, r7
 800b766:	4603      	mov	r3, r0
 800b768:	2a65      	cmp	r2, #101	@ 0x65
 800b76a:	d001      	beq.n	800b770 <_strtod_l+0x170>
 800b76c:	2a45      	cmp	r2, #69	@ 0x45
 800b76e:	d114      	bne.n	800b79a <_strtod_l+0x19a>
 800b770:	b91d      	cbnz	r5, 800b77a <_strtod_l+0x17a>
 800b772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b774:	4302      	orrs	r2, r0
 800b776:	d095      	beq.n	800b6a4 <_strtod_l+0xa4>
 800b778:	2500      	movs	r5, #0
 800b77a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b77c:	1c62      	adds	r2, r4, #1
 800b77e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b780:	7862      	ldrb	r2, [r4, #1]
 800b782:	2a2b      	cmp	r2, #43	@ 0x2b
 800b784:	d077      	beq.n	800b876 <_strtod_l+0x276>
 800b786:	2a2d      	cmp	r2, #45	@ 0x2d
 800b788:	d07b      	beq.n	800b882 <_strtod_l+0x282>
 800b78a:	f04f 0c00 	mov.w	ip, #0
 800b78e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b792:	2909      	cmp	r1, #9
 800b794:	f240 8082 	bls.w	800b89c <_strtod_l+0x29c>
 800b798:	9419      	str	r4, [sp, #100]	@ 0x64
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	e0a2      	b.n	800b8e6 <_strtod_l+0x2e6>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	e7c7      	b.n	800b734 <_strtod_l+0x134>
 800b7a4:	2f08      	cmp	r7, #8
 800b7a6:	bfd5      	itete	le
 800b7a8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b7aa:	9908      	ldrgt	r1, [sp, #32]
 800b7ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7b0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b7b4:	f100 0001 	add.w	r0, r0, #1
 800b7b8:	bfd4      	ite	le
 800b7ba:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b7bc:	9308      	strgt	r3, [sp, #32]
 800b7be:	3701      	adds	r7, #1
 800b7c0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7c2:	e7bf      	b.n	800b744 <_strtod_l+0x144>
 800b7c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7ca:	785a      	ldrb	r2, [r3, #1]
 800b7cc:	b37f      	cbz	r7, 800b82e <_strtod_l+0x22e>
 800b7ce:	4681      	mov	r9, r0
 800b7d0:	463d      	mov	r5, r7
 800b7d2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b7d6:	2b09      	cmp	r3, #9
 800b7d8:	d912      	bls.n	800b800 <_strtod_l+0x200>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e7c4      	b.n	800b768 <_strtod_l+0x168>
 800b7de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7e6:	785a      	ldrb	r2, [r3, #1]
 800b7e8:	2a30      	cmp	r2, #48	@ 0x30
 800b7ea:	d0f8      	beq.n	800b7de <_strtod_l+0x1de>
 800b7ec:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	f200 84cb 	bhi.w	800c18c <_strtod_l+0xb8c>
 800b7f6:	4681      	mov	r9, r0
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b800:	3a30      	subs	r2, #48	@ 0x30
 800b802:	f100 0301 	add.w	r3, r0, #1
 800b806:	d02a      	beq.n	800b85e <_strtod_l+0x25e>
 800b808:	4499      	add	r9, r3
 800b80a:	210a      	movs	r1, #10
 800b80c:	462b      	mov	r3, r5
 800b80e:	eb00 0c05 	add.w	ip, r0, r5
 800b812:	4563      	cmp	r3, ip
 800b814:	d10d      	bne.n	800b832 <_strtod_l+0x232>
 800b816:	1c69      	adds	r1, r5, #1
 800b818:	4401      	add	r1, r0
 800b81a:	4428      	add	r0, r5
 800b81c:	2808      	cmp	r0, #8
 800b81e:	dc16      	bgt.n	800b84e <_strtod_l+0x24e>
 800b820:	230a      	movs	r3, #10
 800b822:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b824:	fb03 2300 	mla	r3, r3, r0, r2
 800b828:	930a      	str	r3, [sp, #40]	@ 0x28
 800b82a:	2300      	movs	r3, #0
 800b82c:	e018      	b.n	800b860 <_strtod_l+0x260>
 800b82e:	4638      	mov	r0, r7
 800b830:	e7da      	b.n	800b7e8 <_strtod_l+0x1e8>
 800b832:	2b08      	cmp	r3, #8
 800b834:	f103 0301 	add.w	r3, r3, #1
 800b838:	dc03      	bgt.n	800b842 <_strtod_l+0x242>
 800b83a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b83c:	434e      	muls	r6, r1
 800b83e:	960a      	str	r6, [sp, #40]	@ 0x28
 800b840:	e7e7      	b.n	800b812 <_strtod_l+0x212>
 800b842:	2b10      	cmp	r3, #16
 800b844:	bfde      	ittt	le
 800b846:	9e08      	ldrle	r6, [sp, #32]
 800b848:	434e      	mulle	r6, r1
 800b84a:	9608      	strle	r6, [sp, #32]
 800b84c:	e7e1      	b.n	800b812 <_strtod_l+0x212>
 800b84e:	280f      	cmp	r0, #15
 800b850:	dceb      	bgt.n	800b82a <_strtod_l+0x22a>
 800b852:	230a      	movs	r3, #10
 800b854:	9808      	ldr	r0, [sp, #32]
 800b856:	fb03 2300 	mla	r3, r3, r0, r2
 800b85a:	9308      	str	r3, [sp, #32]
 800b85c:	e7e5      	b.n	800b82a <_strtod_l+0x22a>
 800b85e:	4629      	mov	r1, r5
 800b860:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b862:	460d      	mov	r5, r1
 800b864:	1c50      	adds	r0, r2, #1
 800b866:	9019      	str	r0, [sp, #100]	@ 0x64
 800b868:	7852      	ldrb	r2, [r2, #1]
 800b86a:	4618      	mov	r0, r3
 800b86c:	e7b1      	b.n	800b7d2 <_strtod_l+0x1d2>
 800b86e:	f04f 0900 	mov.w	r9, #0
 800b872:	2301      	movs	r3, #1
 800b874:	e77d      	b.n	800b772 <_strtod_l+0x172>
 800b876:	f04f 0c00 	mov.w	ip, #0
 800b87a:	1ca2      	adds	r2, r4, #2
 800b87c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b87e:	78a2      	ldrb	r2, [r4, #2]
 800b880:	e785      	b.n	800b78e <_strtod_l+0x18e>
 800b882:	f04f 0c01 	mov.w	ip, #1
 800b886:	e7f8      	b.n	800b87a <_strtod_l+0x27a>
 800b888:	0800f204 	.word	0x0800f204
 800b88c:	7ff00000 	.word	0x7ff00000
 800b890:	0800f1e6 	.word	0x0800f1e6
 800b894:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b896:	1c51      	adds	r1, r2, #1
 800b898:	9119      	str	r1, [sp, #100]	@ 0x64
 800b89a:	7852      	ldrb	r2, [r2, #1]
 800b89c:	2a30      	cmp	r2, #48	@ 0x30
 800b89e:	d0f9      	beq.n	800b894 <_strtod_l+0x294>
 800b8a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b8a4:	2908      	cmp	r1, #8
 800b8a6:	f63f af78 	bhi.w	800b79a <_strtod_l+0x19a>
 800b8aa:	f04f 080a 	mov.w	r8, #10
 800b8ae:	3a30      	subs	r2, #48	@ 0x30
 800b8b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b8b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8b8:	1c56      	adds	r6, r2, #1
 800b8ba:	9619      	str	r6, [sp, #100]	@ 0x64
 800b8bc:	7852      	ldrb	r2, [r2, #1]
 800b8be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b8c2:	f1be 0f09 	cmp.w	lr, #9
 800b8c6:	d939      	bls.n	800b93c <_strtod_l+0x33c>
 800b8c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b8ce:	1a76      	subs	r6, r6, r1
 800b8d0:	2e08      	cmp	r6, #8
 800b8d2:	dc03      	bgt.n	800b8dc <_strtod_l+0x2dc>
 800b8d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8d6:	4588      	cmp	r8, r1
 800b8d8:	bfa8      	it	ge
 800b8da:	4688      	movge	r8, r1
 800b8dc:	f1bc 0f00 	cmp.w	ip, #0
 800b8e0:	d001      	beq.n	800b8e6 <_strtod_l+0x2e6>
 800b8e2:	f1c8 0800 	rsb	r8, r8, #0
 800b8e6:	2d00      	cmp	r5, #0
 800b8e8:	d14e      	bne.n	800b988 <_strtod_l+0x388>
 800b8ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8ec:	4308      	orrs	r0, r1
 800b8ee:	f47f aec0 	bne.w	800b672 <_strtod_l+0x72>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f47f aed6 	bne.w	800b6a4 <_strtod_l+0xa4>
 800b8f8:	2a69      	cmp	r2, #105	@ 0x69
 800b8fa:	d028      	beq.n	800b94e <_strtod_l+0x34e>
 800b8fc:	dc25      	bgt.n	800b94a <_strtod_l+0x34a>
 800b8fe:	2a49      	cmp	r2, #73	@ 0x49
 800b900:	d025      	beq.n	800b94e <_strtod_l+0x34e>
 800b902:	2a4e      	cmp	r2, #78	@ 0x4e
 800b904:	f47f aece 	bne.w	800b6a4 <_strtod_l+0xa4>
 800b908:	499a      	ldr	r1, [pc, #616]	@ (800bb74 <_strtod_l+0x574>)
 800b90a:	a819      	add	r0, sp, #100	@ 0x64
 800b90c:	f001 f8fa 	bl	800cb04 <__match>
 800b910:	2800      	cmp	r0, #0
 800b912:	f43f aec7 	beq.w	800b6a4 <_strtod_l+0xa4>
 800b916:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b28      	cmp	r3, #40	@ 0x28
 800b91c:	d12e      	bne.n	800b97c <_strtod_l+0x37c>
 800b91e:	4996      	ldr	r1, [pc, #600]	@ (800bb78 <_strtod_l+0x578>)
 800b920:	aa1c      	add	r2, sp, #112	@ 0x70
 800b922:	a819      	add	r0, sp, #100	@ 0x64
 800b924:	f001 f902 	bl	800cb2c <__hexnan>
 800b928:	2805      	cmp	r0, #5
 800b92a:	d127      	bne.n	800b97c <_strtod_l+0x37c>
 800b92c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b92e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b932:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b936:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b93a:	e69a      	b.n	800b672 <_strtod_l+0x72>
 800b93c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b93e:	fb08 2101 	mla	r1, r8, r1, r2
 800b942:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b946:	920e      	str	r2, [sp, #56]	@ 0x38
 800b948:	e7b5      	b.n	800b8b6 <_strtod_l+0x2b6>
 800b94a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b94c:	e7da      	b.n	800b904 <_strtod_l+0x304>
 800b94e:	498b      	ldr	r1, [pc, #556]	@ (800bb7c <_strtod_l+0x57c>)
 800b950:	a819      	add	r0, sp, #100	@ 0x64
 800b952:	f001 f8d7 	bl	800cb04 <__match>
 800b956:	2800      	cmp	r0, #0
 800b958:	f43f aea4 	beq.w	800b6a4 <_strtod_l+0xa4>
 800b95c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b95e:	4988      	ldr	r1, [pc, #544]	@ (800bb80 <_strtod_l+0x580>)
 800b960:	3b01      	subs	r3, #1
 800b962:	a819      	add	r0, sp, #100	@ 0x64
 800b964:	9319      	str	r3, [sp, #100]	@ 0x64
 800b966:	f001 f8cd 	bl	800cb04 <__match>
 800b96a:	b910      	cbnz	r0, 800b972 <_strtod_l+0x372>
 800b96c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b96e:	3301      	adds	r3, #1
 800b970:	9319      	str	r3, [sp, #100]	@ 0x64
 800b972:	f04f 0a00 	mov.w	sl, #0
 800b976:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800bb84 <_strtod_l+0x584>
 800b97a:	e67a      	b.n	800b672 <_strtod_l+0x72>
 800b97c:	4882      	ldr	r0, [pc, #520]	@ (800bb88 <_strtod_l+0x588>)
 800b97e:	f000 fde9 	bl	800c554 <nan>
 800b982:	4682      	mov	sl, r0
 800b984:	468b      	mov	fp, r1
 800b986:	e674      	b.n	800b672 <_strtod_l+0x72>
 800b988:	eba8 0309 	sub.w	r3, r8, r9
 800b98c:	2f00      	cmp	r7, #0
 800b98e:	bf08      	it	eq
 800b990:	462f      	moveq	r7, r5
 800b992:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b994:	2d10      	cmp	r5, #16
 800b996:	462c      	mov	r4, r5
 800b998:	9309      	str	r3, [sp, #36]	@ 0x24
 800b99a:	bfa8      	it	ge
 800b99c:	2410      	movge	r4, #16
 800b99e:	f7f4 fd21 	bl	80003e4 <__aeabi_ui2d>
 800b9a2:	2d09      	cmp	r5, #9
 800b9a4:	4682      	mov	sl, r0
 800b9a6:	468b      	mov	fp, r1
 800b9a8:	dc11      	bgt.n	800b9ce <_strtod_l+0x3ce>
 800b9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f43f ae60 	beq.w	800b672 <_strtod_l+0x72>
 800b9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b4:	dd76      	ble.n	800baa4 <_strtod_l+0x4a4>
 800b9b6:	2b16      	cmp	r3, #22
 800b9b8:	dc5d      	bgt.n	800ba76 <_strtod_l+0x476>
 800b9ba:	4974      	ldr	r1, [pc, #464]	@ (800bb8c <_strtod_l+0x58c>)
 800b9bc:	4652      	mov	r2, sl
 800b9be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9c2:	465b      	mov	r3, fp
 800b9c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9c8:	f7f4 fd86 	bl	80004d8 <__aeabi_dmul>
 800b9cc:	e7d9      	b.n	800b982 <_strtod_l+0x382>
 800b9ce:	4b6f      	ldr	r3, [pc, #444]	@ (800bb8c <_strtod_l+0x58c>)
 800b9d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b9d8:	f7f4 fd7e 	bl	80004d8 <__aeabi_dmul>
 800b9dc:	4682      	mov	sl, r0
 800b9de:	9808      	ldr	r0, [sp, #32]
 800b9e0:	468b      	mov	fp, r1
 800b9e2:	f7f4 fcff 	bl	80003e4 <__aeabi_ui2d>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4650      	mov	r0, sl
 800b9ec:	4659      	mov	r1, fp
 800b9ee:	f7f4 fbbd 	bl	800016c <__adddf3>
 800b9f2:	2d0f      	cmp	r5, #15
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	468b      	mov	fp, r1
 800b9f8:	ddd7      	ble.n	800b9aa <_strtod_l+0x3aa>
 800b9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fc:	1b2c      	subs	r4, r5, r4
 800b9fe:	441c      	add	r4, r3
 800ba00:	2c00      	cmp	r4, #0
 800ba02:	f340 8096 	ble.w	800bb32 <_strtod_l+0x532>
 800ba06:	f014 030f 	ands.w	r3, r4, #15
 800ba0a:	d00a      	beq.n	800ba22 <_strtod_l+0x422>
 800ba0c:	495f      	ldr	r1, [pc, #380]	@ (800bb8c <_strtod_l+0x58c>)
 800ba0e:	4652      	mov	r2, sl
 800ba10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba18:	465b      	mov	r3, fp
 800ba1a:	f7f4 fd5d 	bl	80004d8 <__aeabi_dmul>
 800ba1e:	4682      	mov	sl, r0
 800ba20:	468b      	mov	fp, r1
 800ba22:	f034 040f 	bics.w	r4, r4, #15
 800ba26:	d073      	beq.n	800bb10 <_strtod_l+0x510>
 800ba28:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ba2c:	dd48      	ble.n	800bac0 <_strtod_l+0x4c0>
 800ba2e:	2400      	movs	r4, #0
 800ba30:	46a0      	mov	r8, r4
 800ba32:	46a1      	mov	r9, r4
 800ba34:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba36:	2322      	movs	r3, #34	@ 0x22
 800ba38:	f04f 0a00 	mov.w	sl, #0
 800ba3c:	9a05      	ldr	r2, [sp, #20]
 800ba3e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800bb84 <_strtod_l+0x584>
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f43f ae13 	beq.w	800b672 <_strtod_l+0x72>
 800ba4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba4e:	9805      	ldr	r0, [sp, #20]
 800ba50:	f001 fa08 	bl	800ce64 <_Bfree>
 800ba54:	4649      	mov	r1, r9
 800ba56:	9805      	ldr	r0, [sp, #20]
 800ba58:	f001 fa04 	bl	800ce64 <_Bfree>
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	9805      	ldr	r0, [sp, #20]
 800ba60:	f001 fa00 	bl	800ce64 <_Bfree>
 800ba64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba66:	9805      	ldr	r0, [sp, #20]
 800ba68:	f001 f9fc 	bl	800ce64 <_Bfree>
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	9805      	ldr	r0, [sp, #20]
 800ba70:	f001 f9f8 	bl	800ce64 <_Bfree>
 800ba74:	e5fd      	b.n	800b672 <_strtod_l+0x72>
 800ba76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba78:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	dbbc      	blt.n	800b9fa <_strtod_l+0x3fa>
 800ba80:	4c42      	ldr	r4, [pc, #264]	@ (800bb8c <_strtod_l+0x58c>)
 800ba82:	f1c5 050f 	rsb	r5, r5, #15
 800ba86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba8a:	4652      	mov	r2, sl
 800ba8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba90:	465b      	mov	r3, fp
 800ba92:	f7f4 fd21 	bl	80004d8 <__aeabi_dmul>
 800ba96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba98:	1b5d      	subs	r5, r3, r5
 800ba9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800baa2:	e791      	b.n	800b9c8 <_strtod_l+0x3c8>
 800baa4:	3316      	adds	r3, #22
 800baa6:	dba8      	blt.n	800b9fa <_strtod_l+0x3fa>
 800baa8:	4b38      	ldr	r3, [pc, #224]	@ (800bb8c <_strtod_l+0x58c>)
 800baaa:	eba9 0808 	sub.w	r8, r9, r8
 800baae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bab2:	4650      	mov	r0, sl
 800bab4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bab8:	4659      	mov	r1, fp
 800baba:	f7f4 fe37 	bl	800072c <__aeabi_ddiv>
 800babe:	e760      	b.n	800b982 <_strtod_l+0x382>
 800bac0:	4b33      	ldr	r3, [pc, #204]	@ (800bb90 <_strtod_l+0x590>)
 800bac2:	4650      	mov	r0, sl
 800bac4:	9308      	str	r3, [sp, #32]
 800bac6:	2300      	movs	r3, #0
 800bac8:	4659      	mov	r1, fp
 800baca:	461e      	mov	r6, r3
 800bacc:	1124      	asrs	r4, r4, #4
 800bace:	2c01      	cmp	r4, #1
 800bad0:	dc21      	bgt.n	800bb16 <_strtod_l+0x516>
 800bad2:	b10b      	cbz	r3, 800bad8 <_strtod_l+0x4d8>
 800bad4:	4682      	mov	sl, r0
 800bad6:	468b      	mov	fp, r1
 800bad8:	492d      	ldr	r1, [pc, #180]	@ (800bb90 <_strtod_l+0x590>)
 800bada:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bade:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bae2:	4652      	mov	r2, sl
 800bae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae8:	465b      	mov	r3, fp
 800baea:	f7f4 fcf5 	bl	80004d8 <__aeabi_dmul>
 800baee:	4b25      	ldr	r3, [pc, #148]	@ (800bb84 <_strtod_l+0x584>)
 800baf0:	460a      	mov	r2, r1
 800baf2:	400b      	ands	r3, r1
 800baf4:	4927      	ldr	r1, [pc, #156]	@ (800bb94 <_strtod_l+0x594>)
 800baf6:	4682      	mov	sl, r0
 800baf8:	428b      	cmp	r3, r1
 800bafa:	d898      	bhi.n	800ba2e <_strtod_l+0x42e>
 800bafc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bb00:	428b      	cmp	r3, r1
 800bb02:	bf86      	itte	hi
 800bb04:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800bb08:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800bb98 <_strtod_l+0x598>
 800bb0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bb10:	2300      	movs	r3, #0
 800bb12:	9308      	str	r3, [sp, #32]
 800bb14:	e07a      	b.n	800bc0c <_strtod_l+0x60c>
 800bb16:	07e2      	lsls	r2, r4, #31
 800bb18:	d505      	bpl.n	800bb26 <_strtod_l+0x526>
 800bb1a:	9b08      	ldr	r3, [sp, #32]
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f7f4 fcda 	bl	80004d8 <__aeabi_dmul>
 800bb24:	2301      	movs	r3, #1
 800bb26:	9a08      	ldr	r2, [sp, #32]
 800bb28:	3601      	adds	r6, #1
 800bb2a:	3208      	adds	r2, #8
 800bb2c:	1064      	asrs	r4, r4, #1
 800bb2e:	9208      	str	r2, [sp, #32]
 800bb30:	e7cd      	b.n	800bace <_strtod_l+0x4ce>
 800bb32:	d0ed      	beq.n	800bb10 <_strtod_l+0x510>
 800bb34:	4264      	negs	r4, r4
 800bb36:	f014 020f 	ands.w	r2, r4, #15
 800bb3a:	d00a      	beq.n	800bb52 <_strtod_l+0x552>
 800bb3c:	4b13      	ldr	r3, [pc, #76]	@ (800bb8c <_strtod_l+0x58c>)
 800bb3e:	4650      	mov	r0, sl
 800bb40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb44:	4659      	mov	r1, fp
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fdef 	bl	800072c <__aeabi_ddiv>
 800bb4e:	4682      	mov	sl, r0
 800bb50:	468b      	mov	fp, r1
 800bb52:	1124      	asrs	r4, r4, #4
 800bb54:	d0dc      	beq.n	800bb10 <_strtod_l+0x510>
 800bb56:	2c1f      	cmp	r4, #31
 800bb58:	dd20      	ble.n	800bb9c <_strtod_l+0x59c>
 800bb5a:	2400      	movs	r4, #0
 800bb5c:	46a0      	mov	r8, r4
 800bb5e:	46a1      	mov	r9, r4
 800bb60:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb62:	2322      	movs	r3, #34	@ 0x22
 800bb64:	9a05      	ldr	r2, [sp, #20]
 800bb66:	f04f 0a00 	mov.w	sl, #0
 800bb6a:	f04f 0b00 	mov.w	fp, #0
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	e768      	b.n	800ba44 <_strtod_l+0x444>
 800bb72:	bf00      	nop
 800bb74:	0800f1eb 	.word	0x0800f1eb
 800bb78:	0800f1f0 	.word	0x0800f1f0
 800bb7c:	0800f1e8 	.word	0x0800f1e8
 800bb80:	0800f568 	.word	0x0800f568
 800bb84:	7ff00000 	.word	0x7ff00000
 800bb88:	0800f564 	.word	0x0800f564
 800bb8c:	0800f360 	.word	0x0800f360
 800bb90:	0800f338 	.word	0x0800f338
 800bb94:	7ca00000 	.word	0x7ca00000
 800bb98:	7fefffff 	.word	0x7fefffff
 800bb9c:	f014 0310 	ands.w	r3, r4, #16
 800bba0:	bf18      	it	ne
 800bba2:	236a      	movne	r3, #106	@ 0x6a
 800bba4:	4650      	mov	r0, sl
 800bba6:	9308      	str	r3, [sp, #32]
 800bba8:	4659      	mov	r1, fp
 800bbaa:	2300      	movs	r3, #0
 800bbac:	4ea9      	ldr	r6, [pc, #676]	@ (800be54 <_strtod_l+0x854>)
 800bbae:	07e2      	lsls	r2, r4, #31
 800bbb0:	d504      	bpl.n	800bbbc <_strtod_l+0x5bc>
 800bbb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbb6:	f7f4 fc8f 	bl	80004d8 <__aeabi_dmul>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	1064      	asrs	r4, r4, #1
 800bbbe:	f106 0608 	add.w	r6, r6, #8
 800bbc2:	d1f4      	bne.n	800bbae <_strtod_l+0x5ae>
 800bbc4:	b10b      	cbz	r3, 800bbca <_strtod_l+0x5ca>
 800bbc6:	4682      	mov	sl, r0
 800bbc8:	468b      	mov	fp, r1
 800bbca:	9b08      	ldr	r3, [sp, #32]
 800bbcc:	b1b3      	cbz	r3, 800bbfc <_strtod_l+0x5fc>
 800bbce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bbd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	4659      	mov	r1, fp
 800bbda:	dd0f      	ble.n	800bbfc <_strtod_l+0x5fc>
 800bbdc:	2b1f      	cmp	r3, #31
 800bbde:	dd57      	ble.n	800bc90 <_strtod_l+0x690>
 800bbe0:	2b34      	cmp	r3, #52	@ 0x34
 800bbe2:	bfd8      	it	le
 800bbe4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800bbe8:	f04f 0a00 	mov.w	sl, #0
 800bbec:	bfcf      	iteee	gt
 800bbee:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bbf2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bbf6:	4093      	lslle	r3, r2
 800bbf8:	ea03 0b01 	andle.w	fp, r3, r1
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4650      	mov	r0, sl
 800bc02:	4659      	mov	r1, fp
 800bc04:	f7f4 fed0 	bl	80009a8 <__aeabi_dcmpeq>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d1a6      	bne.n	800bb5a <_strtod_l+0x55a>
 800bc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0e:	463a      	mov	r2, r7
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bc14:	462b      	mov	r3, r5
 800bc16:	9805      	ldr	r0, [sp, #20]
 800bc18:	f001 f98c 	bl	800cf34 <__s2b>
 800bc1c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	f43f af05 	beq.w	800ba2e <_strtod_l+0x42e>
 800bc24:	2400      	movs	r4, #0
 800bc26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc28:	eba9 0308 	sub.w	r3, r9, r8
 800bc2c:	2a00      	cmp	r2, #0
 800bc2e:	bfa8      	it	ge
 800bc30:	2300      	movge	r3, #0
 800bc32:	46a0      	mov	r8, r4
 800bc34:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc3a:	9316      	str	r3, [sp, #88]	@ 0x58
 800bc3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc3e:	9805      	ldr	r0, [sp, #20]
 800bc40:	6859      	ldr	r1, [r3, #4]
 800bc42:	f001 f8cf 	bl	800cde4 <_Balloc>
 800bc46:	4681      	mov	r9, r0
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	f43f aef4 	beq.w	800ba36 <_strtod_l+0x436>
 800bc4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc50:	300c      	adds	r0, #12
 800bc52:	691a      	ldr	r2, [r3, #16]
 800bc54:	f103 010c 	add.w	r1, r3, #12
 800bc58:	3202      	adds	r2, #2
 800bc5a:	0092      	lsls	r2, r2, #2
 800bc5c:	f000 fc6b 	bl	800c536 <memcpy>
 800bc60:	ab1c      	add	r3, sp, #112	@ 0x70
 800bc62:	9301      	str	r3, [sp, #4]
 800bc64:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	4652      	mov	r2, sl
 800bc6a:	465b      	mov	r3, fp
 800bc6c:	9805      	ldr	r0, [sp, #20]
 800bc6e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bc72:	f001 fc91 	bl	800d598 <__d2b>
 800bc76:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	f43f aedc 	beq.w	800ba36 <_strtod_l+0x436>
 800bc7e:	2101      	movs	r1, #1
 800bc80:	9805      	ldr	r0, [sp, #20]
 800bc82:	f001 f9ed 	bl	800d060 <__i2b>
 800bc86:	4680      	mov	r8, r0
 800bc88:	b948      	cbnz	r0, 800bc9e <_strtod_l+0x69e>
 800bc8a:	f04f 0800 	mov.w	r8, #0
 800bc8e:	e6d2      	b.n	800ba36 <_strtod_l+0x436>
 800bc90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc94:	fa02 f303 	lsl.w	r3, r2, r3
 800bc98:	ea03 0a0a 	and.w	sl, r3, sl
 800bc9c:	e7ae      	b.n	800bbfc <_strtod_l+0x5fc>
 800bc9e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bca0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bca2:	2d00      	cmp	r5, #0
 800bca4:	bfab      	itete	ge
 800bca6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bca8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bcaa:	18ef      	addge	r7, r5, r3
 800bcac:	1b5e      	sublt	r6, r3, r5
 800bcae:	9b08      	ldr	r3, [sp, #32]
 800bcb0:	bfa8      	it	ge
 800bcb2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bcb4:	eba5 0503 	sub.w	r5, r5, r3
 800bcb8:	4415      	add	r5, r2
 800bcba:	4b67      	ldr	r3, [pc, #412]	@ (800be58 <_strtod_l+0x858>)
 800bcbc:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800bcc0:	bfb8      	it	lt
 800bcc2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bcc4:	429d      	cmp	r5, r3
 800bcc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bcca:	da50      	bge.n	800bd6e <_strtod_l+0x76e>
 800bccc:	1b5b      	subs	r3, r3, r5
 800bcce:	2b1f      	cmp	r3, #31
 800bcd0:	f04f 0101 	mov.w	r1, #1
 800bcd4:	eba2 0203 	sub.w	r2, r2, r3
 800bcd8:	dc3d      	bgt.n	800bd56 <_strtod_l+0x756>
 800bcda:	fa01 f303 	lsl.w	r3, r1, r3
 800bcde:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bce0:	2300      	movs	r3, #0
 800bce2:	9310      	str	r3, [sp, #64]	@ 0x40
 800bce4:	18bd      	adds	r5, r7, r2
 800bce6:	9b08      	ldr	r3, [sp, #32]
 800bce8:	42af      	cmp	r7, r5
 800bcea:	4416      	add	r6, r2
 800bcec:	441e      	add	r6, r3
 800bcee:	463b      	mov	r3, r7
 800bcf0:	bfa8      	it	ge
 800bcf2:	462b      	movge	r3, r5
 800bcf4:	42b3      	cmp	r3, r6
 800bcf6:	bfa8      	it	ge
 800bcf8:	4633      	movge	r3, r6
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	bfc2      	ittt	gt
 800bcfe:	1aed      	subgt	r5, r5, r3
 800bd00:	1af6      	subgt	r6, r6, r3
 800bd02:	1aff      	subgt	r7, r7, r3
 800bd04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dd16      	ble.n	800bd38 <_strtod_l+0x738>
 800bd0a:	4641      	mov	r1, r8
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	9805      	ldr	r0, [sp, #20]
 800bd10:	f001 fa64 	bl	800d1dc <__pow5mult>
 800bd14:	4680      	mov	r8, r0
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d0b7      	beq.n	800bc8a <_strtod_l+0x68a>
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd1e:	9805      	ldr	r0, [sp, #20]
 800bd20:	f001 f9b4 	bl	800d08c <__multiply>
 800bd24:	900e      	str	r0, [sp, #56]	@ 0x38
 800bd26:	2800      	cmp	r0, #0
 800bd28:	f43f ae85 	beq.w	800ba36 <_strtod_l+0x436>
 800bd2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd2e:	9805      	ldr	r0, [sp, #20]
 800bd30:	f001 f898 	bl	800ce64 <_Bfree>
 800bd34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd36:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	dc1d      	bgt.n	800bd78 <_strtod_l+0x778>
 800bd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	dd23      	ble.n	800bd8a <_strtod_l+0x78a>
 800bd42:	4649      	mov	r1, r9
 800bd44:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bd46:	9805      	ldr	r0, [sp, #20]
 800bd48:	f001 fa48 	bl	800d1dc <__pow5mult>
 800bd4c:	4681      	mov	r9, r0
 800bd4e:	b9e0      	cbnz	r0, 800bd8a <_strtod_l+0x78a>
 800bd50:	f04f 0900 	mov.w	r9, #0
 800bd54:	e66f      	b.n	800ba36 <_strtod_l+0x436>
 800bd56:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bd5a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bd5e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bd62:	35e2      	adds	r5, #226	@ 0xe2
 800bd64:	fa01 f305 	lsl.w	r3, r1, r5
 800bd68:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd6a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bd6c:	e7ba      	b.n	800bce4 <_strtod_l+0x6e4>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd72:	2301      	movs	r3, #1
 800bd74:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd76:	e7b5      	b.n	800bce4 <_strtod_l+0x6e4>
 800bd78:	462a      	mov	r2, r5
 800bd7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd7c:	9805      	ldr	r0, [sp, #20]
 800bd7e:	f001 fa87 	bl	800d290 <__lshift>
 800bd82:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd84:	2800      	cmp	r0, #0
 800bd86:	d1d9      	bne.n	800bd3c <_strtod_l+0x73c>
 800bd88:	e655      	b.n	800ba36 <_strtod_l+0x436>
 800bd8a:	2e00      	cmp	r6, #0
 800bd8c:	dd07      	ble.n	800bd9e <_strtod_l+0x79e>
 800bd8e:	4649      	mov	r1, r9
 800bd90:	4632      	mov	r2, r6
 800bd92:	9805      	ldr	r0, [sp, #20]
 800bd94:	f001 fa7c 	bl	800d290 <__lshift>
 800bd98:	4681      	mov	r9, r0
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d0d8      	beq.n	800bd50 <_strtod_l+0x750>
 800bd9e:	2f00      	cmp	r7, #0
 800bda0:	dd08      	ble.n	800bdb4 <_strtod_l+0x7b4>
 800bda2:	4641      	mov	r1, r8
 800bda4:	463a      	mov	r2, r7
 800bda6:	9805      	ldr	r0, [sp, #20]
 800bda8:	f001 fa72 	bl	800d290 <__lshift>
 800bdac:	4680      	mov	r8, r0
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f43f ae41 	beq.w	800ba36 <_strtod_l+0x436>
 800bdb4:	464a      	mov	r2, r9
 800bdb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdb8:	9805      	ldr	r0, [sp, #20]
 800bdba:	f001 faf1 	bl	800d3a0 <__mdiff>
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	f43f ae38 	beq.w	800ba36 <_strtod_l+0x436>
 800bdc6:	68c3      	ldr	r3, [r0, #12]
 800bdc8:	4641      	mov	r1, r8
 800bdca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdcc:	2300      	movs	r3, #0
 800bdce:	60c3      	str	r3, [r0, #12]
 800bdd0:	f001 faca 	bl	800d368 <__mcmp>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	da45      	bge.n	800be64 <_strtod_l+0x864>
 800bdd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdda:	ea53 030a 	orrs.w	r3, r3, sl
 800bdde:	d16b      	bne.n	800beb8 <_strtod_l+0x8b8>
 800bde0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d167      	bne.n	800beb8 <_strtod_l+0x8b8>
 800bde8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdec:	0d1b      	lsrs	r3, r3, #20
 800bdee:	051b      	lsls	r3, r3, #20
 800bdf0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bdf4:	d960      	bls.n	800beb8 <_strtod_l+0x8b8>
 800bdf6:	6963      	ldr	r3, [r4, #20]
 800bdf8:	b913      	cbnz	r3, 800be00 <_strtod_l+0x800>
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	dd5b      	ble.n	800beb8 <_strtod_l+0x8b8>
 800be00:	4621      	mov	r1, r4
 800be02:	2201      	movs	r2, #1
 800be04:	9805      	ldr	r0, [sp, #20]
 800be06:	f001 fa43 	bl	800d290 <__lshift>
 800be0a:	4641      	mov	r1, r8
 800be0c:	4604      	mov	r4, r0
 800be0e:	f001 faab 	bl	800d368 <__mcmp>
 800be12:	2800      	cmp	r0, #0
 800be14:	dd50      	ble.n	800beb8 <_strtod_l+0x8b8>
 800be16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be1a:	9a08      	ldr	r2, [sp, #32]
 800be1c:	0d1b      	lsrs	r3, r3, #20
 800be1e:	051b      	lsls	r3, r3, #20
 800be20:	2a00      	cmp	r2, #0
 800be22:	d06a      	beq.n	800befa <_strtod_l+0x8fa>
 800be24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be28:	d867      	bhi.n	800befa <_strtod_l+0x8fa>
 800be2a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800be2e:	f67f ae98 	bls.w	800bb62 <_strtod_l+0x562>
 800be32:	4650      	mov	r0, sl
 800be34:	4659      	mov	r1, fp
 800be36:	4b09      	ldr	r3, [pc, #36]	@ (800be5c <_strtod_l+0x85c>)
 800be38:	2200      	movs	r2, #0
 800be3a:	f7f4 fb4d 	bl	80004d8 <__aeabi_dmul>
 800be3e:	4b08      	ldr	r3, [pc, #32]	@ (800be60 <_strtod_l+0x860>)
 800be40:	4682      	mov	sl, r0
 800be42:	400b      	ands	r3, r1
 800be44:	468b      	mov	fp, r1
 800be46:	2b00      	cmp	r3, #0
 800be48:	f47f ae00 	bne.w	800ba4c <_strtod_l+0x44c>
 800be4c:	2322      	movs	r3, #34	@ 0x22
 800be4e:	9a05      	ldr	r2, [sp, #20]
 800be50:	6013      	str	r3, [r2, #0]
 800be52:	e5fb      	b.n	800ba4c <_strtod_l+0x44c>
 800be54:	0800f218 	.word	0x0800f218
 800be58:	fffffc02 	.word	0xfffffc02
 800be5c:	39500000 	.word	0x39500000
 800be60:	7ff00000 	.word	0x7ff00000
 800be64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be68:	d165      	bne.n	800bf36 <_strtod_l+0x936>
 800be6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be70:	b35a      	cbz	r2, 800beca <_strtod_l+0x8ca>
 800be72:	4a99      	ldr	r2, [pc, #612]	@ (800c0d8 <_strtod_l+0xad8>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d12b      	bne.n	800bed0 <_strtod_l+0x8d0>
 800be78:	9b08      	ldr	r3, [sp, #32]
 800be7a:	4651      	mov	r1, sl
 800be7c:	b303      	cbz	r3, 800bec0 <_strtod_l+0x8c0>
 800be7e:	465a      	mov	r2, fp
 800be80:	4b96      	ldr	r3, [pc, #600]	@ (800c0dc <_strtod_l+0xadc>)
 800be82:	4013      	ands	r3, r2
 800be84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be8c:	d81b      	bhi.n	800bec6 <_strtod_l+0x8c6>
 800be8e:	0d1b      	lsrs	r3, r3, #20
 800be90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be94:	fa02 f303 	lsl.w	r3, r2, r3
 800be98:	4299      	cmp	r1, r3
 800be9a:	d119      	bne.n	800bed0 <_strtod_l+0x8d0>
 800be9c:	4b90      	ldr	r3, [pc, #576]	@ (800c0e0 <_strtod_l+0xae0>)
 800be9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d102      	bne.n	800beaa <_strtod_l+0x8aa>
 800bea4:	3101      	adds	r1, #1
 800bea6:	f43f adc6 	beq.w	800ba36 <_strtod_l+0x436>
 800beaa:	f04f 0a00 	mov.w	sl, #0
 800beae:	4b8b      	ldr	r3, [pc, #556]	@ (800c0dc <_strtod_l+0xadc>)
 800beb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beb2:	401a      	ands	r2, r3
 800beb4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800beb8:	9b08      	ldr	r3, [sp, #32]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1b9      	bne.n	800be32 <_strtod_l+0x832>
 800bebe:	e5c5      	b.n	800ba4c <_strtod_l+0x44c>
 800bec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bec4:	e7e8      	b.n	800be98 <_strtod_l+0x898>
 800bec6:	4613      	mov	r3, r2
 800bec8:	e7e6      	b.n	800be98 <_strtod_l+0x898>
 800beca:	ea53 030a 	orrs.w	r3, r3, sl
 800bece:	d0a2      	beq.n	800be16 <_strtod_l+0x816>
 800bed0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bed2:	b1db      	cbz	r3, 800bf0c <_strtod_l+0x90c>
 800bed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bed6:	4213      	tst	r3, r2
 800bed8:	d0ee      	beq.n	800beb8 <_strtod_l+0x8b8>
 800beda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bedc:	4650      	mov	r0, sl
 800bede:	4659      	mov	r1, fp
 800bee0:	9a08      	ldr	r2, [sp, #32]
 800bee2:	b1bb      	cbz	r3, 800bf14 <_strtod_l+0x914>
 800bee4:	f7ff fb69 	bl	800b5ba <sulp>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bef0:	f7f4 f93c 	bl	800016c <__adddf3>
 800bef4:	4682      	mov	sl, r0
 800bef6:	468b      	mov	fp, r1
 800bef8:	e7de      	b.n	800beb8 <_strtod_l+0x8b8>
 800befa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800befe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf02:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bf06:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf0a:	e7d5      	b.n	800beb8 <_strtod_l+0x8b8>
 800bf0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf0e:	ea13 0f0a 	tst.w	r3, sl
 800bf12:	e7e1      	b.n	800bed8 <_strtod_l+0x8d8>
 800bf14:	f7ff fb51 	bl	800b5ba <sulp>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf20:	f7f4 f922 	bl	8000168 <__aeabi_dsub>
 800bf24:	2200      	movs	r2, #0
 800bf26:	2300      	movs	r3, #0
 800bf28:	4682      	mov	sl, r0
 800bf2a:	468b      	mov	fp, r1
 800bf2c:	f7f4 fd3c 	bl	80009a8 <__aeabi_dcmpeq>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d0c1      	beq.n	800beb8 <_strtod_l+0x8b8>
 800bf34:	e615      	b.n	800bb62 <_strtod_l+0x562>
 800bf36:	4641      	mov	r1, r8
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f001 fb85 	bl	800d648 <__ratio>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf44:	4606      	mov	r6, r0
 800bf46:	460f      	mov	r7, r1
 800bf48:	f7f4 fd42 	bl	80009d0 <__aeabi_dcmple>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d06d      	beq.n	800c02c <_strtod_l+0xa2c>
 800bf50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d178      	bne.n	800c048 <_strtod_l+0xa48>
 800bf56:	f1ba 0f00 	cmp.w	sl, #0
 800bf5a:	d156      	bne.n	800c00a <_strtod_l+0xa0a>
 800bf5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d158      	bne.n	800c018 <_strtod_l+0xa18>
 800bf66:	2200      	movs	r2, #0
 800bf68:	4630      	mov	r0, r6
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	4b5d      	ldr	r3, [pc, #372]	@ (800c0e4 <_strtod_l+0xae4>)
 800bf6e:	f7f4 fd25 	bl	80009bc <__aeabi_dcmplt>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d157      	bne.n	800c026 <_strtod_l+0xa26>
 800bf76:	4630      	mov	r0, r6
 800bf78:	4639      	mov	r1, r7
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	4b5a      	ldr	r3, [pc, #360]	@ (800c0e8 <_strtod_l+0xae8>)
 800bf7e:	f7f4 faab 	bl	80004d8 <__aeabi_dmul>
 800bf82:	4606      	mov	r6, r0
 800bf84:	460f      	mov	r7, r1
 800bf86:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bf8a:	9606      	str	r6, [sp, #24]
 800bf8c:	9307      	str	r3, [sp, #28]
 800bf8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf92:	4d52      	ldr	r5, [pc, #328]	@ (800c0dc <_strtod_l+0xadc>)
 800bf94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf9a:	401d      	ands	r5, r3
 800bf9c:	4b53      	ldr	r3, [pc, #332]	@ (800c0ec <_strtod_l+0xaec>)
 800bf9e:	429d      	cmp	r5, r3
 800bfa0:	f040 80aa 	bne.w	800c0f8 <_strtod_l+0xaf8>
 800bfa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa6:	4650      	mov	r0, sl
 800bfa8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bfac:	4659      	mov	r1, fp
 800bfae:	f001 fa8b 	bl	800d4c8 <__ulp>
 800bfb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfb6:	f7f4 fa8f 	bl	80004d8 <__aeabi_dmul>
 800bfba:	4652      	mov	r2, sl
 800bfbc:	465b      	mov	r3, fp
 800bfbe:	f7f4 f8d5 	bl	800016c <__adddf3>
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4945      	ldr	r1, [pc, #276]	@ (800c0dc <_strtod_l+0xadc>)
 800bfc6:	4a4a      	ldr	r2, [pc, #296]	@ (800c0f0 <_strtod_l+0xaf0>)
 800bfc8:	4019      	ands	r1, r3
 800bfca:	4291      	cmp	r1, r2
 800bfcc:	4682      	mov	sl, r0
 800bfce:	d942      	bls.n	800c056 <_strtod_l+0xa56>
 800bfd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bfd2:	4b43      	ldr	r3, [pc, #268]	@ (800c0e0 <_strtod_l+0xae0>)
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d103      	bne.n	800bfe0 <_strtod_l+0x9e0>
 800bfd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfda:	3301      	adds	r3, #1
 800bfdc:	f43f ad2b 	beq.w	800ba36 <_strtod_l+0x436>
 800bfe0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bfe4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800c0e0 <_strtod_l+0xae0>
 800bfe8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfea:	9805      	ldr	r0, [sp, #20]
 800bfec:	f000 ff3a 	bl	800ce64 <_Bfree>
 800bff0:	4649      	mov	r1, r9
 800bff2:	9805      	ldr	r0, [sp, #20]
 800bff4:	f000 ff36 	bl	800ce64 <_Bfree>
 800bff8:	4641      	mov	r1, r8
 800bffa:	9805      	ldr	r0, [sp, #20]
 800bffc:	f000 ff32 	bl	800ce64 <_Bfree>
 800c000:	4621      	mov	r1, r4
 800c002:	9805      	ldr	r0, [sp, #20]
 800c004:	f000 ff2e 	bl	800ce64 <_Bfree>
 800c008:	e618      	b.n	800bc3c <_strtod_l+0x63c>
 800c00a:	f1ba 0f01 	cmp.w	sl, #1
 800c00e:	d103      	bne.n	800c018 <_strtod_l+0xa18>
 800c010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c012:	2b00      	cmp	r3, #0
 800c014:	f43f ada5 	beq.w	800bb62 <_strtod_l+0x562>
 800c018:	2200      	movs	r2, #0
 800c01a:	4b36      	ldr	r3, [pc, #216]	@ (800c0f4 <_strtod_l+0xaf4>)
 800c01c:	2600      	movs	r6, #0
 800c01e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c022:	4f30      	ldr	r7, [pc, #192]	@ (800c0e4 <_strtod_l+0xae4>)
 800c024:	e7b3      	b.n	800bf8e <_strtod_l+0x98e>
 800c026:	2600      	movs	r6, #0
 800c028:	4f2f      	ldr	r7, [pc, #188]	@ (800c0e8 <_strtod_l+0xae8>)
 800c02a:	e7ac      	b.n	800bf86 <_strtod_l+0x986>
 800c02c:	4630      	mov	r0, r6
 800c02e:	4639      	mov	r1, r7
 800c030:	4b2d      	ldr	r3, [pc, #180]	@ (800c0e8 <_strtod_l+0xae8>)
 800c032:	2200      	movs	r2, #0
 800c034:	f7f4 fa50 	bl	80004d8 <__aeabi_dmul>
 800c038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c03a:	4606      	mov	r6, r0
 800c03c:	460f      	mov	r7, r1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d0a1      	beq.n	800bf86 <_strtod_l+0x986>
 800c042:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c046:	e7a2      	b.n	800bf8e <_strtod_l+0x98e>
 800c048:	2200      	movs	r2, #0
 800c04a:	4b26      	ldr	r3, [pc, #152]	@ (800c0e4 <_strtod_l+0xae4>)
 800c04c:	4616      	mov	r6, r2
 800c04e:	461f      	mov	r7, r3
 800c050:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c054:	e79b      	b.n	800bf8e <_strtod_l+0x98e>
 800c056:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1c1      	bne.n	800bfe8 <_strtod_l+0x9e8>
 800c064:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c068:	0d1b      	lsrs	r3, r3, #20
 800c06a:	051b      	lsls	r3, r3, #20
 800c06c:	429d      	cmp	r5, r3
 800c06e:	d1bb      	bne.n	800bfe8 <_strtod_l+0x9e8>
 800c070:	4630      	mov	r0, r6
 800c072:	4639      	mov	r1, r7
 800c074:	f7f5 f85c 	bl	8001130 <__aeabi_d2lz>
 800c078:	f7f4 fa00 	bl	800047c <__aeabi_l2d>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	4630      	mov	r0, r6
 800c082:	4639      	mov	r1, r7
 800c084:	f7f4 f870 	bl	8000168 <__aeabi_dsub>
 800c088:	460b      	mov	r3, r1
 800c08a:	4602      	mov	r2, r0
 800c08c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c090:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c096:	ea46 060a 	orr.w	r6, r6, sl
 800c09a:	431e      	orrs	r6, r3
 800c09c:	d069      	beq.n	800c172 <_strtod_l+0xb72>
 800c09e:	a30a      	add	r3, pc, #40	@ (adr r3, 800c0c8 <_strtod_l+0xac8>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 fc8a 	bl	80009bc <__aeabi_dcmplt>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	f47f accf 	bne.w	800ba4c <_strtod_l+0x44c>
 800c0ae:	a308      	add	r3, pc, #32	@ (adr r3, 800c0d0 <_strtod_l+0xad0>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0b8:	f7f4 fc9e 	bl	80009f8 <__aeabi_dcmpgt>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d093      	beq.n	800bfe8 <_strtod_l+0x9e8>
 800c0c0:	e4c4      	b.n	800ba4c <_strtod_l+0x44c>
 800c0c2:	bf00      	nop
 800c0c4:	f3af 8000 	nop.w
 800c0c8:	94a03595 	.word	0x94a03595
 800c0cc:	3fdfffff 	.word	0x3fdfffff
 800c0d0:	35afe535 	.word	0x35afe535
 800c0d4:	3fe00000 	.word	0x3fe00000
 800c0d8:	000fffff 	.word	0x000fffff
 800c0dc:	7ff00000 	.word	0x7ff00000
 800c0e0:	7fefffff 	.word	0x7fefffff
 800c0e4:	3ff00000 	.word	0x3ff00000
 800c0e8:	3fe00000 	.word	0x3fe00000
 800c0ec:	7fe00000 	.word	0x7fe00000
 800c0f0:	7c9fffff 	.word	0x7c9fffff
 800c0f4:	bff00000 	.word	0xbff00000
 800c0f8:	9b08      	ldr	r3, [sp, #32]
 800c0fa:	b323      	cbz	r3, 800c146 <_strtod_l+0xb46>
 800c0fc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c100:	d821      	bhi.n	800c146 <_strtod_l+0xb46>
 800c102:	a327      	add	r3, pc, #156	@ (adr r3, 800c1a0 <_strtod_l+0xba0>)
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 fc60 	bl	80009d0 <__aeabi_dcmple>
 800c110:	b1a0      	cbz	r0, 800c13c <_strtod_l+0xb3c>
 800c112:	4639      	mov	r1, r7
 800c114:	4630      	mov	r0, r6
 800c116:	f7f4 fca1 	bl	8000a5c <__aeabi_d2uiz>
 800c11a:	2801      	cmp	r0, #1
 800c11c:	bf38      	it	cc
 800c11e:	2001      	movcc	r0, #1
 800c120:	f7f4 f960 	bl	80003e4 <__aeabi_ui2d>
 800c124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c126:	4606      	mov	r6, r0
 800c128:	460f      	mov	r7, r1
 800c12a:	b9fb      	cbnz	r3, 800c16c <_strtod_l+0xb6c>
 800c12c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c130:	9014      	str	r0, [sp, #80]	@ 0x50
 800c132:	9315      	str	r3, [sp, #84]	@ 0x54
 800c134:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c138:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c13c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c13e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c142:	1b5b      	subs	r3, r3, r5
 800c144:	9311      	str	r3, [sp, #68]	@ 0x44
 800c146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c14a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c14e:	f001 f9bb 	bl	800d4c8 <__ulp>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	4650      	mov	r0, sl
 800c158:	4659      	mov	r1, fp
 800c15a:	f7f4 f9bd 	bl	80004d8 <__aeabi_dmul>
 800c15e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c162:	f7f4 f803 	bl	800016c <__adddf3>
 800c166:	4682      	mov	sl, r0
 800c168:	468b      	mov	fp, r1
 800c16a:	e776      	b.n	800c05a <_strtod_l+0xa5a>
 800c16c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c170:	e7e0      	b.n	800c134 <_strtod_l+0xb34>
 800c172:	a30d      	add	r3, pc, #52	@ (adr r3, 800c1a8 <_strtod_l+0xba8>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	f7f4 fc20 	bl	80009bc <__aeabi_dcmplt>
 800c17c:	e79e      	b.n	800c0bc <_strtod_l+0xabc>
 800c17e:	2300      	movs	r3, #0
 800c180:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c182:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c184:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c186:	6013      	str	r3, [r2, #0]
 800c188:	f7ff ba77 	b.w	800b67a <_strtod_l+0x7a>
 800c18c:	2a65      	cmp	r2, #101	@ 0x65
 800c18e:	f43f ab6e 	beq.w	800b86e <_strtod_l+0x26e>
 800c192:	2a45      	cmp	r2, #69	@ 0x45
 800c194:	f43f ab6b 	beq.w	800b86e <_strtod_l+0x26e>
 800c198:	2301      	movs	r3, #1
 800c19a:	f7ff bba6 	b.w	800b8ea <_strtod_l+0x2ea>
 800c19e:	bf00      	nop
 800c1a0:	ffc00000 	.word	0xffc00000
 800c1a4:	41dfffff 	.word	0x41dfffff
 800c1a8:	94a03595 	.word	0x94a03595
 800c1ac:	3fcfffff 	.word	0x3fcfffff

0800c1b0 <strtod>:
 800c1b0:	460a      	mov	r2, r1
 800c1b2:	4601      	mov	r1, r0
 800c1b4:	4802      	ldr	r0, [pc, #8]	@ (800c1c0 <strtod+0x10>)
 800c1b6:	4b03      	ldr	r3, [pc, #12]	@ (800c1c4 <strtod+0x14>)
 800c1b8:	6800      	ldr	r0, [r0, #0]
 800c1ba:	f7ff ba21 	b.w	800b600 <_strtod_l>
 800c1be:	bf00      	nop
 800c1c0:	200002f4 	.word	0x200002f4
 800c1c4:	20000188 	.word	0x20000188

0800c1c8 <gcvt>:
 800c1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ca:	461c      	mov	r4, r3
 800c1cc:	4615      	mov	r5, r2
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	460f      	mov	r7, r1
 800c1d8:	f7f4 fbf0 	bl	80009bc <__aeabi_dcmplt>
 800c1dc:	4623      	mov	r3, r4
 800c1de:	b118      	cbz	r0, 800c1e8 <gcvt+0x20>
 800c1e0:	222d      	movs	r2, #45	@ 0x2d
 800c1e2:	3d01      	subs	r5, #1
 800c1e4:	f803 2b01 	strb.w	r2, [r3], #1
 800c1e8:	2267      	movs	r2, #103	@ 0x67
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	e9cd 5300 	strd	r5, r3, [sp]
 800c1f0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c1f4:	4905      	ldr	r1, [pc, #20]	@ (800c20c <gcvt+0x44>)
 800c1f6:	4632      	mov	r2, r6
 800c1f8:	463b      	mov	r3, r7
 800c1fa:	6808      	ldr	r0, [r1, #0]
 800c1fc:	f001 fb38 	bl	800d870 <_gcvt>
 800c200:	2800      	cmp	r0, #0
 800c202:	bf18      	it	ne
 800c204:	4620      	movne	r0, r4
 800c206:	b005      	add	sp, #20
 800c208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c20a:	bf00      	nop
 800c20c:	200002f4 	.word	0x200002f4

0800c210 <std>:
 800c210:	2300      	movs	r3, #0
 800c212:	b510      	push	{r4, lr}
 800c214:	4604      	mov	r4, r0
 800c216:	e9c0 3300 	strd	r3, r3, [r0]
 800c21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c21e:	6083      	str	r3, [r0, #8]
 800c220:	8181      	strh	r1, [r0, #12]
 800c222:	6643      	str	r3, [r0, #100]	@ 0x64
 800c224:	81c2      	strh	r2, [r0, #14]
 800c226:	6183      	str	r3, [r0, #24]
 800c228:	4619      	mov	r1, r3
 800c22a:	2208      	movs	r2, #8
 800c22c:	305c      	adds	r0, #92	@ 0x5c
 800c22e:	f000 f8f4 	bl	800c41a <memset>
 800c232:	4b0d      	ldr	r3, [pc, #52]	@ (800c268 <std+0x58>)
 800c234:	6224      	str	r4, [r4, #32]
 800c236:	6263      	str	r3, [r4, #36]	@ 0x24
 800c238:	4b0c      	ldr	r3, [pc, #48]	@ (800c26c <std+0x5c>)
 800c23a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c23c:	4b0c      	ldr	r3, [pc, #48]	@ (800c270 <std+0x60>)
 800c23e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c240:	4b0c      	ldr	r3, [pc, #48]	@ (800c274 <std+0x64>)
 800c242:	6323      	str	r3, [r4, #48]	@ 0x30
 800c244:	4b0c      	ldr	r3, [pc, #48]	@ (800c278 <std+0x68>)
 800c246:	429c      	cmp	r4, r3
 800c248:	d006      	beq.n	800c258 <std+0x48>
 800c24a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c24e:	4294      	cmp	r4, r2
 800c250:	d002      	beq.n	800c258 <std+0x48>
 800c252:	33d0      	adds	r3, #208	@ 0xd0
 800c254:	429c      	cmp	r4, r3
 800c256:	d105      	bne.n	800c264 <std+0x54>
 800c258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c260:	f000 b966 	b.w	800c530 <__retarget_lock_init_recursive>
 800c264:	bd10      	pop	{r4, pc}
 800c266:	bf00      	nop
 800c268:	0800c395 	.word	0x0800c395
 800c26c:	0800c3b7 	.word	0x0800c3b7
 800c270:	0800c3ef 	.word	0x0800c3ef
 800c274:	0800c413 	.word	0x0800c413
 800c278:	2000179c 	.word	0x2000179c

0800c27c <stdio_exit_handler>:
 800c27c:	4a02      	ldr	r2, [pc, #8]	@ (800c288 <stdio_exit_handler+0xc>)
 800c27e:	4903      	ldr	r1, [pc, #12]	@ (800c28c <stdio_exit_handler+0x10>)
 800c280:	4803      	ldr	r0, [pc, #12]	@ (800c290 <stdio_exit_handler+0x14>)
 800c282:	f000 b869 	b.w	800c358 <_fwalk_sglue>
 800c286:	bf00      	nop
 800c288:	2000017c 	.word	0x2000017c
 800c28c:	0800daf9 	.word	0x0800daf9
 800c290:	200002f8 	.word	0x200002f8

0800c294 <cleanup_stdio>:
 800c294:	6841      	ldr	r1, [r0, #4]
 800c296:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c8 <cleanup_stdio+0x34>)
 800c298:	b510      	push	{r4, lr}
 800c29a:	4299      	cmp	r1, r3
 800c29c:	4604      	mov	r4, r0
 800c29e:	d001      	beq.n	800c2a4 <cleanup_stdio+0x10>
 800c2a0:	f001 fc2a 	bl	800daf8 <_fflush_r>
 800c2a4:	68a1      	ldr	r1, [r4, #8]
 800c2a6:	4b09      	ldr	r3, [pc, #36]	@ (800c2cc <cleanup_stdio+0x38>)
 800c2a8:	4299      	cmp	r1, r3
 800c2aa:	d002      	beq.n	800c2b2 <cleanup_stdio+0x1e>
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f001 fc23 	bl	800daf8 <_fflush_r>
 800c2b2:	68e1      	ldr	r1, [r4, #12]
 800c2b4:	4b06      	ldr	r3, [pc, #24]	@ (800c2d0 <cleanup_stdio+0x3c>)
 800c2b6:	4299      	cmp	r1, r3
 800c2b8:	d004      	beq.n	800c2c4 <cleanup_stdio+0x30>
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2c0:	f001 bc1a 	b.w	800daf8 <_fflush_r>
 800c2c4:	bd10      	pop	{r4, pc}
 800c2c6:	bf00      	nop
 800c2c8:	2000179c 	.word	0x2000179c
 800c2cc:	20001804 	.word	0x20001804
 800c2d0:	2000186c 	.word	0x2000186c

0800c2d4 <global_stdio_init.part.0>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c304 <global_stdio_init.part.0+0x30>)
 800c2d8:	4c0b      	ldr	r4, [pc, #44]	@ (800c308 <global_stdio_init.part.0+0x34>)
 800c2da:	4a0c      	ldr	r2, [pc, #48]	@ (800c30c <global_stdio_init.part.0+0x38>)
 800c2dc:	4620      	mov	r0, r4
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	2104      	movs	r1, #4
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f7ff ff94 	bl	800c210 <std>
 800c2e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	2109      	movs	r1, #9
 800c2f0:	f7ff ff8e 	bl	800c210 <std>
 800c2f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fe:	2112      	movs	r1, #18
 800c300:	f7ff bf86 	b.w	800c210 <std>
 800c304:	200018d4 	.word	0x200018d4
 800c308:	2000179c 	.word	0x2000179c
 800c30c:	0800c27d 	.word	0x0800c27d

0800c310 <__sfp_lock_acquire>:
 800c310:	4801      	ldr	r0, [pc, #4]	@ (800c318 <__sfp_lock_acquire+0x8>)
 800c312:	f000 b90e 	b.w	800c532 <__retarget_lock_acquire_recursive>
 800c316:	bf00      	nop
 800c318:	200018dd 	.word	0x200018dd

0800c31c <__sfp_lock_release>:
 800c31c:	4801      	ldr	r0, [pc, #4]	@ (800c324 <__sfp_lock_release+0x8>)
 800c31e:	f000 b909 	b.w	800c534 <__retarget_lock_release_recursive>
 800c322:	bf00      	nop
 800c324:	200018dd 	.word	0x200018dd

0800c328 <__sinit>:
 800c328:	b510      	push	{r4, lr}
 800c32a:	4604      	mov	r4, r0
 800c32c:	f7ff fff0 	bl	800c310 <__sfp_lock_acquire>
 800c330:	6a23      	ldr	r3, [r4, #32]
 800c332:	b11b      	cbz	r3, 800c33c <__sinit+0x14>
 800c334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c338:	f7ff bff0 	b.w	800c31c <__sfp_lock_release>
 800c33c:	4b04      	ldr	r3, [pc, #16]	@ (800c350 <__sinit+0x28>)
 800c33e:	6223      	str	r3, [r4, #32]
 800c340:	4b04      	ldr	r3, [pc, #16]	@ (800c354 <__sinit+0x2c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1f5      	bne.n	800c334 <__sinit+0xc>
 800c348:	f7ff ffc4 	bl	800c2d4 <global_stdio_init.part.0>
 800c34c:	e7f2      	b.n	800c334 <__sinit+0xc>
 800c34e:	bf00      	nop
 800c350:	0800c295 	.word	0x0800c295
 800c354:	200018d4 	.word	0x200018d4

0800c358 <_fwalk_sglue>:
 800c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35c:	4607      	mov	r7, r0
 800c35e:	4688      	mov	r8, r1
 800c360:	4614      	mov	r4, r2
 800c362:	2600      	movs	r6, #0
 800c364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c368:	f1b9 0901 	subs.w	r9, r9, #1
 800c36c:	d505      	bpl.n	800c37a <_fwalk_sglue+0x22>
 800c36e:	6824      	ldr	r4, [r4, #0]
 800c370:	2c00      	cmp	r4, #0
 800c372:	d1f7      	bne.n	800c364 <_fwalk_sglue+0xc>
 800c374:	4630      	mov	r0, r6
 800c376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37a:	89ab      	ldrh	r3, [r5, #12]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d907      	bls.n	800c390 <_fwalk_sglue+0x38>
 800c380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c384:	3301      	adds	r3, #1
 800c386:	d003      	beq.n	800c390 <_fwalk_sglue+0x38>
 800c388:	4629      	mov	r1, r5
 800c38a:	4638      	mov	r0, r7
 800c38c:	47c0      	blx	r8
 800c38e:	4306      	orrs	r6, r0
 800c390:	3568      	adds	r5, #104	@ 0x68
 800c392:	e7e9      	b.n	800c368 <_fwalk_sglue+0x10>

0800c394 <__sread>:
 800c394:	b510      	push	{r4, lr}
 800c396:	460c      	mov	r4, r1
 800c398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39c:	f000 f87a 	bl	800c494 <_read_r>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	bfab      	itete	ge
 800c3a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c3a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c3a8:	181b      	addge	r3, r3, r0
 800c3aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c3ae:	bfac      	ite	ge
 800c3b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c3b2:	81a3      	strhlt	r3, [r4, #12]
 800c3b4:	bd10      	pop	{r4, pc}

0800c3b6 <__swrite>:
 800c3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ba:	461f      	mov	r7, r3
 800c3bc:	898b      	ldrh	r3, [r1, #12]
 800c3be:	4605      	mov	r5, r0
 800c3c0:	05db      	lsls	r3, r3, #23
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	4616      	mov	r6, r2
 800c3c6:	d505      	bpl.n	800c3d4 <__swrite+0x1e>
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d0:	f000 f84e 	bl	800c470 <_lseek_r>
 800c3d4:	89a3      	ldrh	r3, [r4, #12]
 800c3d6:	4632      	mov	r2, r6
 800c3d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	4628      	mov	r0, r5
 800c3e0:	463b      	mov	r3, r7
 800c3e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ea:	f000 b865 	b.w	800c4b8 <_write_r>

0800c3ee <__sseek>:
 800c3ee:	b510      	push	{r4, lr}
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f6:	f000 f83b 	bl	800c470 <_lseek_r>
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	bf15      	itete	ne
 800c400:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c40a:	81a3      	strheq	r3, [r4, #12]
 800c40c:	bf18      	it	ne
 800c40e:	81a3      	strhne	r3, [r4, #12]
 800c410:	bd10      	pop	{r4, pc}

0800c412 <__sclose>:
 800c412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c416:	f000 b81b 	b.w	800c450 <_close_r>

0800c41a <memset>:
 800c41a:	4603      	mov	r3, r0
 800c41c:	4402      	add	r2, r0
 800c41e:	4293      	cmp	r3, r2
 800c420:	d100      	bne.n	800c424 <memset+0xa>
 800c422:	4770      	bx	lr
 800c424:	f803 1b01 	strb.w	r1, [r3], #1
 800c428:	e7f9      	b.n	800c41e <memset+0x4>

0800c42a <strncmp>:
 800c42a:	b510      	push	{r4, lr}
 800c42c:	b16a      	cbz	r2, 800c44a <strncmp+0x20>
 800c42e:	3901      	subs	r1, #1
 800c430:	1884      	adds	r4, r0, r2
 800c432:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c436:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d103      	bne.n	800c446 <strncmp+0x1c>
 800c43e:	42a0      	cmp	r0, r4
 800c440:	d001      	beq.n	800c446 <strncmp+0x1c>
 800c442:	2a00      	cmp	r2, #0
 800c444:	d1f5      	bne.n	800c432 <strncmp+0x8>
 800c446:	1ad0      	subs	r0, r2, r3
 800c448:	bd10      	pop	{r4, pc}
 800c44a:	4610      	mov	r0, r2
 800c44c:	e7fc      	b.n	800c448 <strncmp+0x1e>
	...

0800c450 <_close_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	2300      	movs	r3, #0
 800c454:	4d05      	ldr	r5, [pc, #20]	@ (800c46c <_close_r+0x1c>)
 800c456:	4604      	mov	r4, r0
 800c458:	4608      	mov	r0, r1
 800c45a:	602b      	str	r3, [r5, #0]
 800c45c:	f7f5 fd6f 	bl	8001f3e <_close>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_close_r+0x1a>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_close_r+0x1a>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	200018d8 	.word	0x200018d8

0800c470 <_lseek_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4604      	mov	r4, r0
 800c474:	4608      	mov	r0, r1
 800c476:	4611      	mov	r1, r2
 800c478:	2200      	movs	r2, #0
 800c47a:	4d05      	ldr	r5, [pc, #20]	@ (800c490 <_lseek_r+0x20>)
 800c47c:	602a      	str	r2, [r5, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	f7f5 fd81 	bl	8001f86 <_lseek>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	d102      	bne.n	800c48e <_lseek_r+0x1e>
 800c488:	682b      	ldr	r3, [r5, #0]
 800c48a:	b103      	cbz	r3, 800c48e <_lseek_r+0x1e>
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	bd38      	pop	{r3, r4, r5, pc}
 800c490:	200018d8 	.word	0x200018d8

0800c494 <_read_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4604      	mov	r4, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	4611      	mov	r1, r2
 800c49c:	2200      	movs	r2, #0
 800c49e:	4d05      	ldr	r5, [pc, #20]	@ (800c4b4 <_read_r+0x20>)
 800c4a0:	602a      	str	r2, [r5, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	f7f5 fd12 	bl	8001ecc <_read>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_read_r+0x1e>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_read_r+0x1e>
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	200018d8 	.word	0x200018d8

0800c4b8 <_write_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	4611      	mov	r1, r2
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4d05      	ldr	r5, [pc, #20]	@ (800c4d8 <_write_r+0x20>)
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f5 fd1d 	bl	8001f06 <_write>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_write_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_write_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	200018d8 	.word	0x200018d8

0800c4dc <__errno>:
 800c4dc:	4b01      	ldr	r3, [pc, #4]	@ (800c4e4 <__errno+0x8>)
 800c4de:	6818      	ldr	r0, [r3, #0]
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	200002f4 	.word	0x200002f4

0800c4e8 <__libc_init_array>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	2600      	movs	r6, #0
 800c4ec:	4d0c      	ldr	r5, [pc, #48]	@ (800c520 <__libc_init_array+0x38>)
 800c4ee:	4c0d      	ldr	r4, [pc, #52]	@ (800c524 <__libc_init_array+0x3c>)
 800c4f0:	1b64      	subs	r4, r4, r5
 800c4f2:	10a4      	asrs	r4, r4, #2
 800c4f4:	42a6      	cmp	r6, r4
 800c4f6:	d109      	bne.n	800c50c <__libc_init_array+0x24>
 800c4f8:	f002 fe1e 	bl	800f138 <_init>
 800c4fc:	2600      	movs	r6, #0
 800c4fe:	4d0a      	ldr	r5, [pc, #40]	@ (800c528 <__libc_init_array+0x40>)
 800c500:	4c0a      	ldr	r4, [pc, #40]	@ (800c52c <__libc_init_array+0x44>)
 800c502:	1b64      	subs	r4, r4, r5
 800c504:	10a4      	asrs	r4, r4, #2
 800c506:	42a6      	cmp	r6, r4
 800c508:	d105      	bne.n	800c516 <__libc_init_array+0x2e>
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c510:	4798      	blx	r3
 800c512:	3601      	adds	r6, #1
 800c514:	e7ee      	b.n	800c4f4 <__libc_init_array+0xc>
 800c516:	f855 3b04 	ldr.w	r3, [r5], #4
 800c51a:	4798      	blx	r3
 800c51c:	3601      	adds	r6, #1
 800c51e:	e7f2      	b.n	800c506 <__libc_init_array+0x1e>
 800c520:	0800f608 	.word	0x0800f608
 800c524:	0800f608 	.word	0x0800f608
 800c528:	0800f608 	.word	0x0800f608
 800c52c:	0800f60c 	.word	0x0800f60c

0800c530 <__retarget_lock_init_recursive>:
 800c530:	4770      	bx	lr

0800c532 <__retarget_lock_acquire_recursive>:
 800c532:	4770      	bx	lr

0800c534 <__retarget_lock_release_recursive>:
 800c534:	4770      	bx	lr

0800c536 <memcpy>:
 800c536:	440a      	add	r2, r1
 800c538:	4291      	cmp	r1, r2
 800c53a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c53e:	d100      	bne.n	800c542 <memcpy+0xc>
 800c540:	4770      	bx	lr
 800c542:	b510      	push	{r4, lr}
 800c544:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c548:	4291      	cmp	r1, r2
 800c54a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c54e:	d1f9      	bne.n	800c544 <memcpy+0xe>
 800c550:	bd10      	pop	{r4, pc}
	...

0800c554 <nan>:
 800c554:	2000      	movs	r0, #0
 800c556:	4901      	ldr	r1, [pc, #4]	@ (800c55c <nan+0x8>)
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	7ff80000 	.word	0x7ff80000

0800c560 <_free_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4605      	mov	r5, r0
 800c564:	2900      	cmp	r1, #0
 800c566:	d040      	beq.n	800c5ea <_free_r+0x8a>
 800c568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c56c:	1f0c      	subs	r4, r1, #4
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bfb8      	it	lt
 800c572:	18e4      	addlt	r4, r4, r3
 800c574:	f000 fc2a 	bl	800cdcc <__malloc_lock>
 800c578:	4a1c      	ldr	r2, [pc, #112]	@ (800c5ec <_free_r+0x8c>)
 800c57a:	6813      	ldr	r3, [r2, #0]
 800c57c:	b933      	cbnz	r3, 800c58c <_free_r+0x2c>
 800c57e:	6063      	str	r3, [r4, #4]
 800c580:	6014      	str	r4, [r2, #0]
 800c582:	4628      	mov	r0, r5
 800c584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c588:	f000 bc26 	b.w	800cdd8 <__malloc_unlock>
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d908      	bls.n	800c5a2 <_free_r+0x42>
 800c590:	6820      	ldr	r0, [r4, #0]
 800c592:	1821      	adds	r1, r4, r0
 800c594:	428b      	cmp	r3, r1
 800c596:	bf01      	itttt	eq
 800c598:	6819      	ldreq	r1, [r3, #0]
 800c59a:	685b      	ldreq	r3, [r3, #4]
 800c59c:	1809      	addeq	r1, r1, r0
 800c59e:	6021      	streq	r1, [r4, #0]
 800c5a0:	e7ed      	b.n	800c57e <_free_r+0x1e>
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	b10b      	cbz	r3, 800c5ac <_free_r+0x4c>
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d9fa      	bls.n	800c5a2 <_free_r+0x42>
 800c5ac:	6811      	ldr	r1, [r2, #0]
 800c5ae:	1850      	adds	r0, r2, r1
 800c5b0:	42a0      	cmp	r0, r4
 800c5b2:	d10b      	bne.n	800c5cc <_free_r+0x6c>
 800c5b4:	6820      	ldr	r0, [r4, #0]
 800c5b6:	4401      	add	r1, r0
 800c5b8:	1850      	adds	r0, r2, r1
 800c5ba:	4283      	cmp	r3, r0
 800c5bc:	6011      	str	r1, [r2, #0]
 800c5be:	d1e0      	bne.n	800c582 <_free_r+0x22>
 800c5c0:	6818      	ldr	r0, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4408      	add	r0, r1
 800c5c6:	6010      	str	r0, [r2, #0]
 800c5c8:	6053      	str	r3, [r2, #4]
 800c5ca:	e7da      	b.n	800c582 <_free_r+0x22>
 800c5cc:	d902      	bls.n	800c5d4 <_free_r+0x74>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	602b      	str	r3, [r5, #0]
 800c5d2:	e7d6      	b.n	800c582 <_free_r+0x22>
 800c5d4:	6820      	ldr	r0, [r4, #0]
 800c5d6:	1821      	adds	r1, r4, r0
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf01      	itttt	eq
 800c5dc:	6819      	ldreq	r1, [r3, #0]
 800c5de:	685b      	ldreq	r3, [r3, #4]
 800c5e0:	1809      	addeq	r1, r1, r0
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	6063      	str	r3, [r4, #4]
 800c5e6:	6054      	str	r4, [r2, #4]
 800c5e8:	e7cb      	b.n	800c582 <_free_r+0x22>
 800c5ea:	bd38      	pop	{r3, r4, r5, pc}
 800c5ec:	200018e4 	.word	0x200018e4

0800c5f0 <rshift>:
 800c5f0:	6903      	ldr	r3, [r0, #16]
 800c5f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c5fa:	f100 0414 	add.w	r4, r0, #20
 800c5fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c602:	dd46      	ble.n	800c692 <rshift+0xa2>
 800c604:	f011 011f 	ands.w	r1, r1, #31
 800c608:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c60c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c610:	d10c      	bne.n	800c62c <rshift+0x3c>
 800c612:	4629      	mov	r1, r5
 800c614:	f100 0710 	add.w	r7, r0, #16
 800c618:	42b1      	cmp	r1, r6
 800c61a:	d335      	bcc.n	800c688 <rshift+0x98>
 800c61c:	1a9b      	subs	r3, r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	1eea      	subs	r2, r5, #3
 800c622:	4296      	cmp	r6, r2
 800c624:	bf38      	it	cc
 800c626:	2300      	movcc	r3, #0
 800c628:	4423      	add	r3, r4
 800c62a:	e015      	b.n	800c658 <rshift+0x68>
 800c62c:	46a1      	mov	r9, r4
 800c62e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c632:	f1c1 0820 	rsb	r8, r1, #32
 800c636:	40cf      	lsrs	r7, r1
 800c638:	f105 0e04 	add.w	lr, r5, #4
 800c63c:	4576      	cmp	r6, lr
 800c63e:	46f4      	mov	ip, lr
 800c640:	d816      	bhi.n	800c670 <rshift+0x80>
 800c642:	1a9a      	subs	r2, r3, r2
 800c644:	0092      	lsls	r2, r2, #2
 800c646:	3a04      	subs	r2, #4
 800c648:	3501      	adds	r5, #1
 800c64a:	42ae      	cmp	r6, r5
 800c64c:	bf38      	it	cc
 800c64e:	2200      	movcc	r2, #0
 800c650:	18a3      	adds	r3, r4, r2
 800c652:	50a7      	str	r7, [r4, r2]
 800c654:	b107      	cbz	r7, 800c658 <rshift+0x68>
 800c656:	3304      	adds	r3, #4
 800c658:	42a3      	cmp	r3, r4
 800c65a:	eba3 0204 	sub.w	r2, r3, r4
 800c65e:	bf08      	it	eq
 800c660:	2300      	moveq	r3, #0
 800c662:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c666:	6102      	str	r2, [r0, #16]
 800c668:	bf08      	it	eq
 800c66a:	6143      	streq	r3, [r0, #20]
 800c66c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c670:	f8dc c000 	ldr.w	ip, [ip]
 800c674:	fa0c fc08 	lsl.w	ip, ip, r8
 800c678:	ea4c 0707 	orr.w	r7, ip, r7
 800c67c:	f849 7b04 	str.w	r7, [r9], #4
 800c680:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c684:	40cf      	lsrs	r7, r1
 800c686:	e7d9      	b.n	800c63c <rshift+0x4c>
 800c688:	f851 cb04 	ldr.w	ip, [r1], #4
 800c68c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c690:	e7c2      	b.n	800c618 <rshift+0x28>
 800c692:	4623      	mov	r3, r4
 800c694:	e7e0      	b.n	800c658 <rshift+0x68>

0800c696 <__hexdig_fun>:
 800c696:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c69a:	2b09      	cmp	r3, #9
 800c69c:	d802      	bhi.n	800c6a4 <__hexdig_fun+0xe>
 800c69e:	3820      	subs	r0, #32
 800c6a0:	b2c0      	uxtb	r0, r0
 800c6a2:	4770      	bx	lr
 800c6a4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c6a8:	2b05      	cmp	r3, #5
 800c6aa:	d801      	bhi.n	800c6b0 <__hexdig_fun+0x1a>
 800c6ac:	3847      	subs	r0, #71	@ 0x47
 800c6ae:	e7f7      	b.n	800c6a0 <__hexdig_fun+0xa>
 800c6b0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c6b4:	2b05      	cmp	r3, #5
 800c6b6:	d801      	bhi.n	800c6bc <__hexdig_fun+0x26>
 800c6b8:	3827      	subs	r0, #39	@ 0x27
 800c6ba:	e7f1      	b.n	800c6a0 <__hexdig_fun+0xa>
 800c6bc:	2000      	movs	r0, #0
 800c6be:	4770      	bx	lr

0800c6c0 <__gethex>:
 800c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	468a      	mov	sl, r1
 800c6c6:	4690      	mov	r8, r2
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	9302      	str	r3, [sp, #8]
 800c6cc:	680b      	ldr	r3, [r1, #0]
 800c6ce:	9001      	str	r0, [sp, #4]
 800c6d0:	1c9c      	adds	r4, r3, #2
 800c6d2:	46a1      	mov	r9, r4
 800c6d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c6d8:	2830      	cmp	r0, #48	@ 0x30
 800c6da:	d0fa      	beq.n	800c6d2 <__gethex+0x12>
 800c6dc:	eba9 0303 	sub.w	r3, r9, r3
 800c6e0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c6e4:	f7ff ffd7 	bl	800c696 <__hexdig_fun>
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d168      	bne.n	800c7c0 <__gethex+0x100>
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	4648      	mov	r0, r9
 800c6f2:	499f      	ldr	r1, [pc, #636]	@ (800c970 <__gethex+0x2b0>)
 800c6f4:	f7ff fe99 	bl	800c42a <strncmp>
 800c6f8:	4607      	mov	r7, r0
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d167      	bne.n	800c7ce <__gethex+0x10e>
 800c6fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c702:	4626      	mov	r6, r4
 800c704:	f7ff ffc7 	bl	800c696 <__hexdig_fun>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d062      	beq.n	800c7d2 <__gethex+0x112>
 800c70c:	4623      	mov	r3, r4
 800c70e:	7818      	ldrb	r0, [r3, #0]
 800c710:	4699      	mov	r9, r3
 800c712:	2830      	cmp	r0, #48	@ 0x30
 800c714:	f103 0301 	add.w	r3, r3, #1
 800c718:	d0f9      	beq.n	800c70e <__gethex+0x4e>
 800c71a:	f7ff ffbc 	bl	800c696 <__hexdig_fun>
 800c71e:	fab0 f580 	clz	r5, r0
 800c722:	f04f 0b01 	mov.w	fp, #1
 800c726:	096d      	lsrs	r5, r5, #5
 800c728:	464a      	mov	r2, r9
 800c72a:	4616      	mov	r6, r2
 800c72c:	7830      	ldrb	r0, [r6, #0]
 800c72e:	3201      	adds	r2, #1
 800c730:	f7ff ffb1 	bl	800c696 <__hexdig_fun>
 800c734:	2800      	cmp	r0, #0
 800c736:	d1f8      	bne.n	800c72a <__gethex+0x6a>
 800c738:	2201      	movs	r2, #1
 800c73a:	4630      	mov	r0, r6
 800c73c:	498c      	ldr	r1, [pc, #560]	@ (800c970 <__gethex+0x2b0>)
 800c73e:	f7ff fe74 	bl	800c42a <strncmp>
 800c742:	2800      	cmp	r0, #0
 800c744:	d13f      	bne.n	800c7c6 <__gethex+0x106>
 800c746:	b944      	cbnz	r4, 800c75a <__gethex+0x9a>
 800c748:	1c74      	adds	r4, r6, #1
 800c74a:	4622      	mov	r2, r4
 800c74c:	4616      	mov	r6, r2
 800c74e:	7830      	ldrb	r0, [r6, #0]
 800c750:	3201      	adds	r2, #1
 800c752:	f7ff ffa0 	bl	800c696 <__hexdig_fun>
 800c756:	2800      	cmp	r0, #0
 800c758:	d1f8      	bne.n	800c74c <__gethex+0x8c>
 800c75a:	1ba4      	subs	r4, r4, r6
 800c75c:	00a7      	lsls	r7, r4, #2
 800c75e:	7833      	ldrb	r3, [r6, #0]
 800c760:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c764:	2b50      	cmp	r3, #80	@ 0x50
 800c766:	d13e      	bne.n	800c7e6 <__gethex+0x126>
 800c768:	7873      	ldrb	r3, [r6, #1]
 800c76a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c76c:	d033      	beq.n	800c7d6 <__gethex+0x116>
 800c76e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c770:	d034      	beq.n	800c7dc <__gethex+0x11c>
 800c772:	2400      	movs	r4, #0
 800c774:	1c71      	adds	r1, r6, #1
 800c776:	7808      	ldrb	r0, [r1, #0]
 800c778:	f7ff ff8d 	bl	800c696 <__hexdig_fun>
 800c77c:	1e43      	subs	r3, r0, #1
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b18      	cmp	r3, #24
 800c782:	d830      	bhi.n	800c7e6 <__gethex+0x126>
 800c784:	f1a0 0210 	sub.w	r2, r0, #16
 800c788:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c78c:	f7ff ff83 	bl	800c696 <__hexdig_fun>
 800c790:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c794:	fa5f fc8c 	uxtb.w	ip, ip
 800c798:	f1bc 0f18 	cmp.w	ip, #24
 800c79c:	f04f 030a 	mov.w	r3, #10
 800c7a0:	d91e      	bls.n	800c7e0 <__gethex+0x120>
 800c7a2:	b104      	cbz	r4, 800c7a6 <__gethex+0xe6>
 800c7a4:	4252      	negs	r2, r2
 800c7a6:	4417      	add	r7, r2
 800c7a8:	f8ca 1000 	str.w	r1, [sl]
 800c7ac:	b1ed      	cbz	r5, 800c7ea <__gethex+0x12a>
 800c7ae:	f1bb 0f00 	cmp.w	fp, #0
 800c7b2:	bf0c      	ite	eq
 800c7b4:	2506      	moveq	r5, #6
 800c7b6:	2500      	movne	r5, #0
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	b005      	add	sp, #20
 800c7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c0:	2500      	movs	r5, #0
 800c7c2:	462c      	mov	r4, r5
 800c7c4:	e7b0      	b.n	800c728 <__gethex+0x68>
 800c7c6:	2c00      	cmp	r4, #0
 800c7c8:	d1c7      	bne.n	800c75a <__gethex+0x9a>
 800c7ca:	4627      	mov	r7, r4
 800c7cc:	e7c7      	b.n	800c75e <__gethex+0x9e>
 800c7ce:	464e      	mov	r6, r9
 800c7d0:	462f      	mov	r7, r5
 800c7d2:	2501      	movs	r5, #1
 800c7d4:	e7c3      	b.n	800c75e <__gethex+0x9e>
 800c7d6:	2400      	movs	r4, #0
 800c7d8:	1cb1      	adds	r1, r6, #2
 800c7da:	e7cc      	b.n	800c776 <__gethex+0xb6>
 800c7dc:	2401      	movs	r4, #1
 800c7de:	e7fb      	b.n	800c7d8 <__gethex+0x118>
 800c7e0:	fb03 0002 	mla	r0, r3, r2, r0
 800c7e4:	e7ce      	b.n	800c784 <__gethex+0xc4>
 800c7e6:	4631      	mov	r1, r6
 800c7e8:	e7de      	b.n	800c7a8 <__gethex+0xe8>
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	eba6 0309 	sub.w	r3, r6, r9
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	2b07      	cmp	r3, #7
 800c7f4:	dc0a      	bgt.n	800c80c <__gethex+0x14c>
 800c7f6:	9801      	ldr	r0, [sp, #4]
 800c7f8:	f000 faf4 	bl	800cde4 <_Balloc>
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	b940      	cbnz	r0, 800c812 <__gethex+0x152>
 800c800:	4602      	mov	r2, r0
 800c802:	21e4      	movs	r1, #228	@ 0xe4
 800c804:	4b5b      	ldr	r3, [pc, #364]	@ (800c974 <__gethex+0x2b4>)
 800c806:	485c      	ldr	r0, [pc, #368]	@ (800c978 <__gethex+0x2b8>)
 800c808:	f001 f9b6 	bl	800db78 <__assert_func>
 800c80c:	3101      	adds	r1, #1
 800c80e:	105b      	asrs	r3, r3, #1
 800c810:	e7ef      	b.n	800c7f2 <__gethex+0x132>
 800c812:	2300      	movs	r3, #0
 800c814:	f100 0a14 	add.w	sl, r0, #20
 800c818:	4655      	mov	r5, sl
 800c81a:	469b      	mov	fp, r3
 800c81c:	45b1      	cmp	r9, r6
 800c81e:	d337      	bcc.n	800c890 <__gethex+0x1d0>
 800c820:	f845 bb04 	str.w	fp, [r5], #4
 800c824:	eba5 050a 	sub.w	r5, r5, sl
 800c828:	10ad      	asrs	r5, r5, #2
 800c82a:	6125      	str	r5, [r4, #16]
 800c82c:	4658      	mov	r0, fp
 800c82e:	f000 fbcb 	bl	800cfc8 <__hi0bits>
 800c832:	016d      	lsls	r5, r5, #5
 800c834:	f8d8 6000 	ldr.w	r6, [r8]
 800c838:	1a2d      	subs	r5, r5, r0
 800c83a:	42b5      	cmp	r5, r6
 800c83c:	dd54      	ble.n	800c8e8 <__gethex+0x228>
 800c83e:	1bad      	subs	r5, r5, r6
 800c840:	4629      	mov	r1, r5
 800c842:	4620      	mov	r0, r4
 800c844:	f000 ff6f 	bl	800d726 <__any_on>
 800c848:	4681      	mov	r9, r0
 800c84a:	b178      	cbz	r0, 800c86c <__gethex+0x1ac>
 800c84c:	f04f 0901 	mov.w	r9, #1
 800c850:	1e6b      	subs	r3, r5, #1
 800c852:	1159      	asrs	r1, r3, #5
 800c854:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c858:	f003 021f 	and.w	r2, r3, #31
 800c85c:	fa09 f202 	lsl.w	r2, r9, r2
 800c860:	420a      	tst	r2, r1
 800c862:	d003      	beq.n	800c86c <__gethex+0x1ac>
 800c864:	454b      	cmp	r3, r9
 800c866:	dc36      	bgt.n	800c8d6 <__gethex+0x216>
 800c868:	f04f 0902 	mov.w	r9, #2
 800c86c:	4629      	mov	r1, r5
 800c86e:	4620      	mov	r0, r4
 800c870:	f7ff febe 	bl	800c5f0 <rshift>
 800c874:	442f      	add	r7, r5
 800c876:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c87a:	42bb      	cmp	r3, r7
 800c87c:	da42      	bge.n	800c904 <__gethex+0x244>
 800c87e:	4621      	mov	r1, r4
 800c880:	9801      	ldr	r0, [sp, #4]
 800c882:	f000 faef 	bl	800ce64 <_Bfree>
 800c886:	2300      	movs	r3, #0
 800c888:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c88a:	25a3      	movs	r5, #163	@ 0xa3
 800c88c:	6013      	str	r3, [r2, #0]
 800c88e:	e793      	b.n	800c7b8 <__gethex+0xf8>
 800c890:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c894:	2a2e      	cmp	r2, #46	@ 0x2e
 800c896:	d012      	beq.n	800c8be <__gethex+0x1fe>
 800c898:	2b20      	cmp	r3, #32
 800c89a:	d104      	bne.n	800c8a6 <__gethex+0x1e6>
 800c89c:	f845 bb04 	str.w	fp, [r5], #4
 800c8a0:	f04f 0b00 	mov.w	fp, #0
 800c8a4:	465b      	mov	r3, fp
 800c8a6:	7830      	ldrb	r0, [r6, #0]
 800c8a8:	9303      	str	r3, [sp, #12]
 800c8aa:	f7ff fef4 	bl	800c696 <__hexdig_fun>
 800c8ae:	9b03      	ldr	r3, [sp, #12]
 800c8b0:	f000 000f 	and.w	r0, r0, #15
 800c8b4:	4098      	lsls	r0, r3
 800c8b6:	ea4b 0b00 	orr.w	fp, fp, r0
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	e7ae      	b.n	800c81c <__gethex+0x15c>
 800c8be:	45b1      	cmp	r9, r6
 800c8c0:	d8ea      	bhi.n	800c898 <__gethex+0x1d8>
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	492a      	ldr	r1, [pc, #168]	@ (800c970 <__gethex+0x2b0>)
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	f7ff fdae 	bl	800c42a <strncmp>
 800c8ce:	9b03      	ldr	r3, [sp, #12]
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d1e1      	bne.n	800c898 <__gethex+0x1d8>
 800c8d4:	e7a2      	b.n	800c81c <__gethex+0x15c>
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	1ea9      	subs	r1, r5, #2
 800c8da:	f000 ff24 	bl	800d726 <__any_on>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d0c2      	beq.n	800c868 <__gethex+0x1a8>
 800c8e2:	f04f 0903 	mov.w	r9, #3
 800c8e6:	e7c1      	b.n	800c86c <__gethex+0x1ac>
 800c8e8:	da09      	bge.n	800c8fe <__gethex+0x23e>
 800c8ea:	1b75      	subs	r5, r6, r5
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	462a      	mov	r2, r5
 800c8f0:	9801      	ldr	r0, [sp, #4]
 800c8f2:	f000 fccd 	bl	800d290 <__lshift>
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	1b7f      	subs	r7, r7, r5
 800c8fa:	f100 0a14 	add.w	sl, r0, #20
 800c8fe:	f04f 0900 	mov.w	r9, #0
 800c902:	e7b8      	b.n	800c876 <__gethex+0x1b6>
 800c904:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c908:	42bd      	cmp	r5, r7
 800c90a:	dd6f      	ble.n	800c9ec <__gethex+0x32c>
 800c90c:	1bed      	subs	r5, r5, r7
 800c90e:	42ae      	cmp	r6, r5
 800c910:	dc34      	bgt.n	800c97c <__gethex+0x2bc>
 800c912:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c916:	2b02      	cmp	r3, #2
 800c918:	d022      	beq.n	800c960 <__gethex+0x2a0>
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d024      	beq.n	800c968 <__gethex+0x2a8>
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d115      	bne.n	800c94e <__gethex+0x28e>
 800c922:	42ae      	cmp	r6, r5
 800c924:	d113      	bne.n	800c94e <__gethex+0x28e>
 800c926:	2e01      	cmp	r6, #1
 800c928:	d10b      	bne.n	800c942 <__gethex+0x282>
 800c92a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c92e:	9a02      	ldr	r2, [sp, #8]
 800c930:	2562      	movs	r5, #98	@ 0x62
 800c932:	6013      	str	r3, [r2, #0]
 800c934:	2301      	movs	r3, #1
 800c936:	6123      	str	r3, [r4, #16]
 800c938:	f8ca 3000 	str.w	r3, [sl]
 800c93c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c93e:	601c      	str	r4, [r3, #0]
 800c940:	e73a      	b.n	800c7b8 <__gethex+0xf8>
 800c942:	4620      	mov	r0, r4
 800c944:	1e71      	subs	r1, r6, #1
 800c946:	f000 feee 	bl	800d726 <__any_on>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d1ed      	bne.n	800c92a <__gethex+0x26a>
 800c94e:	4621      	mov	r1, r4
 800c950:	9801      	ldr	r0, [sp, #4]
 800c952:	f000 fa87 	bl	800ce64 <_Bfree>
 800c956:	2300      	movs	r3, #0
 800c958:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c95a:	2550      	movs	r5, #80	@ 0x50
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	e72b      	b.n	800c7b8 <__gethex+0xf8>
 800c960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1f3      	bne.n	800c94e <__gethex+0x28e>
 800c966:	e7e0      	b.n	800c92a <__gethex+0x26a>
 800c968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1dd      	bne.n	800c92a <__gethex+0x26a>
 800c96e:	e7ee      	b.n	800c94e <__gethex+0x28e>
 800c970:	0800f1e6 	.word	0x0800f1e6
 800c974:	0800f248 	.word	0x0800f248
 800c978:	0800f259 	.word	0x0800f259
 800c97c:	1e6f      	subs	r7, r5, #1
 800c97e:	f1b9 0f00 	cmp.w	r9, #0
 800c982:	d130      	bne.n	800c9e6 <__gethex+0x326>
 800c984:	b127      	cbz	r7, 800c990 <__gethex+0x2d0>
 800c986:	4639      	mov	r1, r7
 800c988:	4620      	mov	r0, r4
 800c98a:	f000 fecc 	bl	800d726 <__any_on>
 800c98e:	4681      	mov	r9, r0
 800c990:	2301      	movs	r3, #1
 800c992:	4629      	mov	r1, r5
 800c994:	1b76      	subs	r6, r6, r5
 800c996:	2502      	movs	r5, #2
 800c998:	117a      	asrs	r2, r7, #5
 800c99a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c99e:	f007 071f 	and.w	r7, r7, #31
 800c9a2:	40bb      	lsls	r3, r7
 800c9a4:	4213      	tst	r3, r2
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	bf18      	it	ne
 800c9aa:	f049 0902 	orrne.w	r9, r9, #2
 800c9ae:	f7ff fe1f 	bl	800c5f0 <rshift>
 800c9b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c9b6:	f1b9 0f00 	cmp.w	r9, #0
 800c9ba:	d047      	beq.n	800ca4c <__gethex+0x38c>
 800c9bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d015      	beq.n	800c9f0 <__gethex+0x330>
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d017      	beq.n	800c9f8 <__gethex+0x338>
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d109      	bne.n	800c9e0 <__gethex+0x320>
 800c9cc:	f019 0f02 	tst.w	r9, #2
 800c9d0:	d006      	beq.n	800c9e0 <__gethex+0x320>
 800c9d2:	f8da 3000 	ldr.w	r3, [sl]
 800c9d6:	ea49 0903 	orr.w	r9, r9, r3
 800c9da:	f019 0f01 	tst.w	r9, #1
 800c9de:	d10e      	bne.n	800c9fe <__gethex+0x33e>
 800c9e0:	f045 0510 	orr.w	r5, r5, #16
 800c9e4:	e032      	b.n	800ca4c <__gethex+0x38c>
 800c9e6:	f04f 0901 	mov.w	r9, #1
 800c9ea:	e7d1      	b.n	800c990 <__gethex+0x2d0>
 800c9ec:	2501      	movs	r5, #1
 800c9ee:	e7e2      	b.n	800c9b6 <__gethex+0x2f6>
 800c9f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f2:	f1c3 0301 	rsb	r3, r3, #1
 800c9f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d0f0      	beq.n	800c9e0 <__gethex+0x320>
 800c9fe:	f04f 0c00 	mov.w	ip, #0
 800ca02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca06:	f104 0314 	add.w	r3, r4, #20
 800ca0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca18:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800ca1c:	d01b      	beq.n	800ca56 <__gethex+0x396>
 800ca1e:	3201      	adds	r2, #1
 800ca20:	6002      	str	r2, [r0, #0]
 800ca22:	2d02      	cmp	r5, #2
 800ca24:	f104 0314 	add.w	r3, r4, #20
 800ca28:	d13c      	bne.n	800caa4 <__gethex+0x3e4>
 800ca2a:	f8d8 2000 	ldr.w	r2, [r8]
 800ca2e:	3a01      	subs	r2, #1
 800ca30:	42b2      	cmp	r2, r6
 800ca32:	d109      	bne.n	800ca48 <__gethex+0x388>
 800ca34:	2201      	movs	r2, #1
 800ca36:	1171      	asrs	r1, r6, #5
 800ca38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca3c:	f006 061f 	and.w	r6, r6, #31
 800ca40:	fa02 f606 	lsl.w	r6, r2, r6
 800ca44:	421e      	tst	r6, r3
 800ca46:	d13a      	bne.n	800cabe <__gethex+0x3fe>
 800ca48:	f045 0520 	orr.w	r5, r5, #32
 800ca4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca4e:	601c      	str	r4, [r3, #0]
 800ca50:	9b02      	ldr	r3, [sp, #8]
 800ca52:	601f      	str	r7, [r3, #0]
 800ca54:	e6b0      	b.n	800c7b8 <__gethex+0xf8>
 800ca56:	4299      	cmp	r1, r3
 800ca58:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca5c:	d8d9      	bhi.n	800ca12 <__gethex+0x352>
 800ca5e:	68a3      	ldr	r3, [r4, #8]
 800ca60:	459b      	cmp	fp, r3
 800ca62:	db17      	blt.n	800ca94 <__gethex+0x3d4>
 800ca64:	6861      	ldr	r1, [r4, #4]
 800ca66:	9801      	ldr	r0, [sp, #4]
 800ca68:	3101      	adds	r1, #1
 800ca6a:	f000 f9bb 	bl	800cde4 <_Balloc>
 800ca6e:	4681      	mov	r9, r0
 800ca70:	b918      	cbnz	r0, 800ca7a <__gethex+0x3ba>
 800ca72:	4602      	mov	r2, r0
 800ca74:	2184      	movs	r1, #132	@ 0x84
 800ca76:	4b19      	ldr	r3, [pc, #100]	@ (800cadc <__gethex+0x41c>)
 800ca78:	e6c5      	b.n	800c806 <__gethex+0x146>
 800ca7a:	6922      	ldr	r2, [r4, #16]
 800ca7c:	f104 010c 	add.w	r1, r4, #12
 800ca80:	3202      	adds	r2, #2
 800ca82:	0092      	lsls	r2, r2, #2
 800ca84:	300c      	adds	r0, #12
 800ca86:	f7ff fd56 	bl	800c536 <memcpy>
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	9801      	ldr	r0, [sp, #4]
 800ca8e:	f000 f9e9 	bl	800ce64 <_Bfree>
 800ca92:	464c      	mov	r4, r9
 800ca94:	6923      	ldr	r3, [r4, #16]
 800ca96:	1c5a      	adds	r2, r3, #1
 800ca98:	6122      	str	r2, [r4, #16]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800caa0:	615a      	str	r2, [r3, #20]
 800caa2:	e7be      	b.n	800ca22 <__gethex+0x362>
 800caa4:	6922      	ldr	r2, [r4, #16]
 800caa6:	455a      	cmp	r2, fp
 800caa8:	dd0b      	ble.n	800cac2 <__gethex+0x402>
 800caaa:	2101      	movs	r1, #1
 800caac:	4620      	mov	r0, r4
 800caae:	f7ff fd9f 	bl	800c5f0 <rshift>
 800cab2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cab6:	3701      	adds	r7, #1
 800cab8:	42bb      	cmp	r3, r7
 800caba:	f6ff aee0 	blt.w	800c87e <__gethex+0x1be>
 800cabe:	2501      	movs	r5, #1
 800cac0:	e7c2      	b.n	800ca48 <__gethex+0x388>
 800cac2:	f016 061f 	ands.w	r6, r6, #31
 800cac6:	d0fa      	beq.n	800cabe <__gethex+0x3fe>
 800cac8:	4453      	add	r3, sl
 800caca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cace:	f000 fa7b 	bl	800cfc8 <__hi0bits>
 800cad2:	f1c6 0620 	rsb	r6, r6, #32
 800cad6:	42b0      	cmp	r0, r6
 800cad8:	dbe7      	blt.n	800caaa <__gethex+0x3ea>
 800cada:	e7f0      	b.n	800cabe <__gethex+0x3fe>
 800cadc:	0800f248 	.word	0x0800f248

0800cae0 <L_shift>:
 800cae0:	f1c2 0208 	rsb	r2, r2, #8
 800cae4:	0092      	lsls	r2, r2, #2
 800cae6:	b570      	push	{r4, r5, r6, lr}
 800cae8:	f1c2 0620 	rsb	r6, r2, #32
 800caec:	6843      	ldr	r3, [r0, #4]
 800caee:	6804      	ldr	r4, [r0, #0]
 800caf0:	fa03 f506 	lsl.w	r5, r3, r6
 800caf4:	432c      	orrs	r4, r5
 800caf6:	40d3      	lsrs	r3, r2
 800caf8:	6004      	str	r4, [r0, #0]
 800cafa:	f840 3f04 	str.w	r3, [r0, #4]!
 800cafe:	4288      	cmp	r0, r1
 800cb00:	d3f4      	bcc.n	800caec <L_shift+0xc>
 800cb02:	bd70      	pop	{r4, r5, r6, pc}

0800cb04 <__match>:
 800cb04:	b530      	push	{r4, r5, lr}
 800cb06:	6803      	ldr	r3, [r0, #0]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb0e:	b914      	cbnz	r4, 800cb16 <__match+0x12>
 800cb10:	6003      	str	r3, [r0, #0]
 800cb12:	2001      	movs	r0, #1
 800cb14:	bd30      	pop	{r4, r5, pc}
 800cb16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb1a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb1e:	2d19      	cmp	r5, #25
 800cb20:	bf98      	it	ls
 800cb22:	3220      	addls	r2, #32
 800cb24:	42a2      	cmp	r2, r4
 800cb26:	d0f0      	beq.n	800cb0a <__match+0x6>
 800cb28:	2000      	movs	r0, #0
 800cb2a:	e7f3      	b.n	800cb14 <__match+0x10>

0800cb2c <__hexnan>:
 800cb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	2500      	movs	r5, #0
 800cb32:	680b      	ldr	r3, [r1, #0]
 800cb34:	4682      	mov	sl, r0
 800cb36:	115e      	asrs	r6, r3, #5
 800cb38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb3c:	f013 031f 	ands.w	r3, r3, #31
 800cb40:	bf18      	it	ne
 800cb42:	3604      	addne	r6, #4
 800cb44:	1f37      	subs	r7, r6, #4
 800cb46:	4690      	mov	r8, r2
 800cb48:	46b9      	mov	r9, r7
 800cb4a:	463c      	mov	r4, r7
 800cb4c:	46ab      	mov	fp, r5
 800cb4e:	b087      	sub	sp, #28
 800cb50:	6801      	ldr	r1, [r0, #0]
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb58:	9502      	str	r5, [sp, #8]
 800cb5a:	784a      	ldrb	r2, [r1, #1]
 800cb5c:	1c4b      	adds	r3, r1, #1
 800cb5e:	9303      	str	r3, [sp, #12]
 800cb60:	b342      	cbz	r2, 800cbb4 <__hexnan+0x88>
 800cb62:	4610      	mov	r0, r2
 800cb64:	9105      	str	r1, [sp, #20]
 800cb66:	9204      	str	r2, [sp, #16]
 800cb68:	f7ff fd95 	bl	800c696 <__hexdig_fun>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d151      	bne.n	800cc14 <__hexnan+0xe8>
 800cb70:	9a04      	ldr	r2, [sp, #16]
 800cb72:	9905      	ldr	r1, [sp, #20]
 800cb74:	2a20      	cmp	r2, #32
 800cb76:	d818      	bhi.n	800cbaa <__hexnan+0x7e>
 800cb78:	9b02      	ldr	r3, [sp, #8]
 800cb7a:	459b      	cmp	fp, r3
 800cb7c:	dd13      	ble.n	800cba6 <__hexnan+0x7a>
 800cb7e:	454c      	cmp	r4, r9
 800cb80:	d206      	bcs.n	800cb90 <__hexnan+0x64>
 800cb82:	2d07      	cmp	r5, #7
 800cb84:	dc04      	bgt.n	800cb90 <__hexnan+0x64>
 800cb86:	462a      	mov	r2, r5
 800cb88:	4649      	mov	r1, r9
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7ff ffa8 	bl	800cae0 <L_shift>
 800cb90:	4544      	cmp	r4, r8
 800cb92:	d952      	bls.n	800cc3a <__hexnan+0x10e>
 800cb94:	2300      	movs	r3, #0
 800cb96:	f1a4 0904 	sub.w	r9, r4, #4
 800cb9a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb9e:	461d      	mov	r5, r3
 800cba0:	464c      	mov	r4, r9
 800cba2:	f8cd b008 	str.w	fp, [sp, #8]
 800cba6:	9903      	ldr	r1, [sp, #12]
 800cba8:	e7d7      	b.n	800cb5a <__hexnan+0x2e>
 800cbaa:	2a29      	cmp	r2, #41	@ 0x29
 800cbac:	d157      	bne.n	800cc5e <__hexnan+0x132>
 800cbae:	3102      	adds	r1, #2
 800cbb0:	f8ca 1000 	str.w	r1, [sl]
 800cbb4:	f1bb 0f00 	cmp.w	fp, #0
 800cbb8:	d051      	beq.n	800cc5e <__hexnan+0x132>
 800cbba:	454c      	cmp	r4, r9
 800cbbc:	d206      	bcs.n	800cbcc <__hexnan+0xa0>
 800cbbe:	2d07      	cmp	r5, #7
 800cbc0:	dc04      	bgt.n	800cbcc <__hexnan+0xa0>
 800cbc2:	462a      	mov	r2, r5
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7ff ff8a 	bl	800cae0 <L_shift>
 800cbcc:	4544      	cmp	r4, r8
 800cbce:	d936      	bls.n	800cc3e <__hexnan+0x112>
 800cbd0:	4623      	mov	r3, r4
 800cbd2:	f1a8 0204 	sub.w	r2, r8, #4
 800cbd6:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbda:	429f      	cmp	r7, r3
 800cbdc:	f842 1f04 	str.w	r1, [r2, #4]!
 800cbe0:	d2f9      	bcs.n	800cbd6 <__hexnan+0xaa>
 800cbe2:	1b3b      	subs	r3, r7, r4
 800cbe4:	f023 0303 	bic.w	r3, r3, #3
 800cbe8:	3304      	adds	r3, #4
 800cbea:	3401      	adds	r4, #1
 800cbec:	3e03      	subs	r6, #3
 800cbee:	42b4      	cmp	r4, r6
 800cbf0:	bf88      	it	hi
 800cbf2:	2304      	movhi	r3, #4
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	4443      	add	r3, r8
 800cbf8:	f843 2b04 	str.w	r2, [r3], #4
 800cbfc:	429f      	cmp	r7, r3
 800cbfe:	d2fb      	bcs.n	800cbf8 <__hexnan+0xcc>
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	b91b      	cbnz	r3, 800cc0c <__hexnan+0xe0>
 800cc04:	4547      	cmp	r7, r8
 800cc06:	d128      	bne.n	800cc5a <__hexnan+0x12e>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	2005      	movs	r0, #5
 800cc0e:	b007      	add	sp, #28
 800cc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc14:	3501      	adds	r5, #1
 800cc16:	2d08      	cmp	r5, #8
 800cc18:	f10b 0b01 	add.w	fp, fp, #1
 800cc1c:	dd06      	ble.n	800cc2c <__hexnan+0x100>
 800cc1e:	4544      	cmp	r4, r8
 800cc20:	d9c1      	bls.n	800cba6 <__hexnan+0x7a>
 800cc22:	2300      	movs	r3, #0
 800cc24:	2501      	movs	r5, #1
 800cc26:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc2a:	3c04      	subs	r4, #4
 800cc2c:	6822      	ldr	r2, [r4, #0]
 800cc2e:	f000 000f 	and.w	r0, r0, #15
 800cc32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc36:	6020      	str	r0, [r4, #0]
 800cc38:	e7b5      	b.n	800cba6 <__hexnan+0x7a>
 800cc3a:	2508      	movs	r5, #8
 800cc3c:	e7b3      	b.n	800cba6 <__hexnan+0x7a>
 800cc3e:	9b01      	ldr	r3, [sp, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0dd      	beq.n	800cc00 <__hexnan+0xd4>
 800cc44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc48:	f1c3 0320 	rsb	r3, r3, #32
 800cc4c:	40da      	lsrs	r2, r3
 800cc4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc52:	4013      	ands	r3, r2
 800cc54:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc58:	e7d2      	b.n	800cc00 <__hexnan+0xd4>
 800cc5a:	3f04      	subs	r7, #4
 800cc5c:	e7d0      	b.n	800cc00 <__hexnan+0xd4>
 800cc5e:	2004      	movs	r0, #4
 800cc60:	e7d5      	b.n	800cc0e <__hexnan+0xe2>
	...

0800cc64 <sbrk_aligned>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	4e0f      	ldr	r6, [pc, #60]	@ (800cca4 <sbrk_aligned+0x40>)
 800cc68:	460c      	mov	r4, r1
 800cc6a:	6831      	ldr	r1, [r6, #0]
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	b911      	cbnz	r1, 800cc76 <sbrk_aligned+0x12>
 800cc70:	f000 ff6a 	bl	800db48 <_sbrk_r>
 800cc74:	6030      	str	r0, [r6, #0]
 800cc76:	4621      	mov	r1, r4
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f000 ff65 	bl	800db48 <_sbrk_r>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	d103      	bne.n	800cc8a <sbrk_aligned+0x26>
 800cc82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cc86:	4620      	mov	r0, r4
 800cc88:	bd70      	pop	{r4, r5, r6, pc}
 800cc8a:	1cc4      	adds	r4, r0, #3
 800cc8c:	f024 0403 	bic.w	r4, r4, #3
 800cc90:	42a0      	cmp	r0, r4
 800cc92:	d0f8      	beq.n	800cc86 <sbrk_aligned+0x22>
 800cc94:	1a21      	subs	r1, r4, r0
 800cc96:	4628      	mov	r0, r5
 800cc98:	f000 ff56 	bl	800db48 <_sbrk_r>
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d1f2      	bne.n	800cc86 <sbrk_aligned+0x22>
 800cca0:	e7ef      	b.n	800cc82 <sbrk_aligned+0x1e>
 800cca2:	bf00      	nop
 800cca4:	200018e0 	.word	0x200018e0

0800cca8 <_malloc_r>:
 800cca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccac:	1ccd      	adds	r5, r1, #3
 800ccae:	f025 0503 	bic.w	r5, r5, #3
 800ccb2:	3508      	adds	r5, #8
 800ccb4:	2d0c      	cmp	r5, #12
 800ccb6:	bf38      	it	cc
 800ccb8:	250c      	movcc	r5, #12
 800ccba:	2d00      	cmp	r5, #0
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	db01      	blt.n	800ccc4 <_malloc_r+0x1c>
 800ccc0:	42a9      	cmp	r1, r5
 800ccc2:	d904      	bls.n	800ccce <_malloc_r+0x26>
 800ccc4:	230c      	movs	r3, #12
 800ccc6:	6033      	str	r3, [r6, #0]
 800ccc8:	2000      	movs	r0, #0
 800ccca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cda4 <_malloc_r+0xfc>
 800ccd2:	f000 f87b 	bl	800cdcc <__malloc_lock>
 800ccd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccda:	461c      	mov	r4, r3
 800ccdc:	bb44      	cbnz	r4, 800cd30 <_malloc_r+0x88>
 800ccde:	4629      	mov	r1, r5
 800cce0:	4630      	mov	r0, r6
 800cce2:	f7ff ffbf 	bl	800cc64 <sbrk_aligned>
 800cce6:	1c43      	adds	r3, r0, #1
 800cce8:	4604      	mov	r4, r0
 800ccea:	d158      	bne.n	800cd9e <_malloc_r+0xf6>
 800ccec:	f8d8 4000 	ldr.w	r4, [r8]
 800ccf0:	4627      	mov	r7, r4
 800ccf2:	2f00      	cmp	r7, #0
 800ccf4:	d143      	bne.n	800cd7e <_malloc_r+0xd6>
 800ccf6:	2c00      	cmp	r4, #0
 800ccf8:	d04b      	beq.n	800cd92 <_malloc_r+0xea>
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	4630      	mov	r0, r6
 800cd00:	eb04 0903 	add.w	r9, r4, r3
 800cd04:	f000 ff20 	bl	800db48 <_sbrk_r>
 800cd08:	4581      	cmp	r9, r0
 800cd0a:	d142      	bne.n	800cd92 <_malloc_r+0xea>
 800cd0c:	6821      	ldr	r1, [r4, #0]
 800cd0e:	4630      	mov	r0, r6
 800cd10:	1a6d      	subs	r5, r5, r1
 800cd12:	4629      	mov	r1, r5
 800cd14:	f7ff ffa6 	bl	800cc64 <sbrk_aligned>
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d03a      	beq.n	800cd92 <_malloc_r+0xea>
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	442b      	add	r3, r5
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	f8d8 3000 	ldr.w	r3, [r8]
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	bb62      	cbnz	r2, 800cd84 <_malloc_r+0xdc>
 800cd2a:	f8c8 7000 	str.w	r7, [r8]
 800cd2e:	e00f      	b.n	800cd50 <_malloc_r+0xa8>
 800cd30:	6822      	ldr	r2, [r4, #0]
 800cd32:	1b52      	subs	r2, r2, r5
 800cd34:	d420      	bmi.n	800cd78 <_malloc_r+0xd0>
 800cd36:	2a0b      	cmp	r2, #11
 800cd38:	d917      	bls.n	800cd6a <_malloc_r+0xc2>
 800cd3a:	1961      	adds	r1, r4, r5
 800cd3c:	42a3      	cmp	r3, r4
 800cd3e:	6025      	str	r5, [r4, #0]
 800cd40:	bf18      	it	ne
 800cd42:	6059      	strne	r1, [r3, #4]
 800cd44:	6863      	ldr	r3, [r4, #4]
 800cd46:	bf08      	it	eq
 800cd48:	f8c8 1000 	streq.w	r1, [r8]
 800cd4c:	5162      	str	r2, [r4, r5]
 800cd4e:	604b      	str	r3, [r1, #4]
 800cd50:	4630      	mov	r0, r6
 800cd52:	f000 f841 	bl	800cdd8 <__malloc_unlock>
 800cd56:	f104 000b 	add.w	r0, r4, #11
 800cd5a:	1d23      	adds	r3, r4, #4
 800cd5c:	f020 0007 	bic.w	r0, r0, #7
 800cd60:	1ac2      	subs	r2, r0, r3
 800cd62:	bf1c      	itt	ne
 800cd64:	1a1b      	subne	r3, r3, r0
 800cd66:	50a3      	strne	r3, [r4, r2]
 800cd68:	e7af      	b.n	800ccca <_malloc_r+0x22>
 800cd6a:	6862      	ldr	r2, [r4, #4]
 800cd6c:	42a3      	cmp	r3, r4
 800cd6e:	bf0c      	ite	eq
 800cd70:	f8c8 2000 	streq.w	r2, [r8]
 800cd74:	605a      	strne	r2, [r3, #4]
 800cd76:	e7eb      	b.n	800cd50 <_malloc_r+0xa8>
 800cd78:	4623      	mov	r3, r4
 800cd7a:	6864      	ldr	r4, [r4, #4]
 800cd7c:	e7ae      	b.n	800ccdc <_malloc_r+0x34>
 800cd7e:	463c      	mov	r4, r7
 800cd80:	687f      	ldr	r7, [r7, #4]
 800cd82:	e7b6      	b.n	800ccf2 <_malloc_r+0x4a>
 800cd84:	461a      	mov	r2, r3
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	42a3      	cmp	r3, r4
 800cd8a:	d1fb      	bne.n	800cd84 <_malloc_r+0xdc>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	6053      	str	r3, [r2, #4]
 800cd90:	e7de      	b.n	800cd50 <_malloc_r+0xa8>
 800cd92:	230c      	movs	r3, #12
 800cd94:	4630      	mov	r0, r6
 800cd96:	6033      	str	r3, [r6, #0]
 800cd98:	f000 f81e 	bl	800cdd8 <__malloc_unlock>
 800cd9c:	e794      	b.n	800ccc8 <_malloc_r+0x20>
 800cd9e:	6005      	str	r5, [r0, #0]
 800cda0:	e7d6      	b.n	800cd50 <_malloc_r+0xa8>
 800cda2:	bf00      	nop
 800cda4:	200018e4 	.word	0x200018e4

0800cda8 <__ascii_mbtowc>:
 800cda8:	b082      	sub	sp, #8
 800cdaa:	b901      	cbnz	r1, 800cdae <__ascii_mbtowc+0x6>
 800cdac:	a901      	add	r1, sp, #4
 800cdae:	b142      	cbz	r2, 800cdc2 <__ascii_mbtowc+0x1a>
 800cdb0:	b14b      	cbz	r3, 800cdc6 <__ascii_mbtowc+0x1e>
 800cdb2:	7813      	ldrb	r3, [r2, #0]
 800cdb4:	600b      	str	r3, [r1, #0]
 800cdb6:	7812      	ldrb	r2, [r2, #0]
 800cdb8:	1e10      	subs	r0, r2, #0
 800cdba:	bf18      	it	ne
 800cdbc:	2001      	movne	r0, #1
 800cdbe:	b002      	add	sp, #8
 800cdc0:	4770      	bx	lr
 800cdc2:	4610      	mov	r0, r2
 800cdc4:	e7fb      	b.n	800cdbe <__ascii_mbtowc+0x16>
 800cdc6:	f06f 0001 	mvn.w	r0, #1
 800cdca:	e7f8      	b.n	800cdbe <__ascii_mbtowc+0x16>

0800cdcc <__malloc_lock>:
 800cdcc:	4801      	ldr	r0, [pc, #4]	@ (800cdd4 <__malloc_lock+0x8>)
 800cdce:	f7ff bbb0 	b.w	800c532 <__retarget_lock_acquire_recursive>
 800cdd2:	bf00      	nop
 800cdd4:	200018dc 	.word	0x200018dc

0800cdd8 <__malloc_unlock>:
 800cdd8:	4801      	ldr	r0, [pc, #4]	@ (800cde0 <__malloc_unlock+0x8>)
 800cdda:	f7ff bbab 	b.w	800c534 <__retarget_lock_release_recursive>
 800cdde:	bf00      	nop
 800cde0:	200018dc 	.word	0x200018dc

0800cde4 <_Balloc>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	69c6      	ldr	r6, [r0, #28]
 800cde8:	4604      	mov	r4, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	b976      	cbnz	r6, 800ce0c <_Balloc+0x28>
 800cdee:	2010      	movs	r0, #16
 800cdf0:	f001 fd46 	bl	800e880 <malloc>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	61e0      	str	r0, [r4, #28]
 800cdf8:	b920      	cbnz	r0, 800ce04 <_Balloc+0x20>
 800cdfa:	216b      	movs	r1, #107	@ 0x6b
 800cdfc:	4b17      	ldr	r3, [pc, #92]	@ (800ce5c <_Balloc+0x78>)
 800cdfe:	4818      	ldr	r0, [pc, #96]	@ (800ce60 <_Balloc+0x7c>)
 800ce00:	f000 feba 	bl	800db78 <__assert_func>
 800ce04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce08:	6006      	str	r6, [r0, #0]
 800ce0a:	60c6      	str	r6, [r0, #12]
 800ce0c:	69e6      	ldr	r6, [r4, #28]
 800ce0e:	68f3      	ldr	r3, [r6, #12]
 800ce10:	b183      	cbz	r3, 800ce34 <_Balloc+0x50>
 800ce12:	69e3      	ldr	r3, [r4, #28]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce1a:	b9b8      	cbnz	r0, 800ce4c <_Balloc+0x68>
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ce22:	1d72      	adds	r2, r6, #5
 800ce24:	4620      	mov	r0, r4
 800ce26:	0092      	lsls	r2, r2, #2
 800ce28:	f000 fec4 	bl	800dbb4 <_calloc_r>
 800ce2c:	b160      	cbz	r0, 800ce48 <_Balloc+0x64>
 800ce2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce32:	e00e      	b.n	800ce52 <_Balloc+0x6e>
 800ce34:	2221      	movs	r2, #33	@ 0x21
 800ce36:	2104      	movs	r1, #4
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 febb 	bl	800dbb4 <_calloc_r>
 800ce3e:	69e3      	ldr	r3, [r4, #28]
 800ce40:	60f0      	str	r0, [r6, #12]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1e4      	bne.n	800ce12 <_Balloc+0x2e>
 800ce48:	2000      	movs	r0, #0
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	6802      	ldr	r2, [r0, #0]
 800ce4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce52:	2300      	movs	r3, #0
 800ce54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce58:	e7f7      	b.n	800ce4a <_Balloc+0x66>
 800ce5a:	bf00      	nop
 800ce5c:	0800f2b9 	.word	0x0800f2b9
 800ce60:	0800f2d0 	.word	0x0800f2d0

0800ce64 <_Bfree>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	69c6      	ldr	r6, [r0, #28]
 800ce68:	4605      	mov	r5, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	b976      	cbnz	r6, 800ce8c <_Bfree+0x28>
 800ce6e:	2010      	movs	r0, #16
 800ce70:	f001 fd06 	bl	800e880 <malloc>
 800ce74:	4602      	mov	r2, r0
 800ce76:	61e8      	str	r0, [r5, #28]
 800ce78:	b920      	cbnz	r0, 800ce84 <_Bfree+0x20>
 800ce7a:	218f      	movs	r1, #143	@ 0x8f
 800ce7c:	4b08      	ldr	r3, [pc, #32]	@ (800cea0 <_Bfree+0x3c>)
 800ce7e:	4809      	ldr	r0, [pc, #36]	@ (800cea4 <_Bfree+0x40>)
 800ce80:	f000 fe7a 	bl	800db78 <__assert_func>
 800ce84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce88:	6006      	str	r6, [r0, #0]
 800ce8a:	60c6      	str	r6, [r0, #12]
 800ce8c:	b13c      	cbz	r4, 800ce9e <_Bfree+0x3a>
 800ce8e:	69eb      	ldr	r3, [r5, #28]
 800ce90:	6862      	ldr	r2, [r4, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce98:	6021      	str	r1, [r4, #0]
 800ce9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	0800f2b9 	.word	0x0800f2b9
 800cea4:	0800f2d0 	.word	0x0800f2d0

0800cea8 <__multadd>:
 800cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceac:	4607      	mov	r7, r0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	461e      	mov	r6, r3
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	690d      	ldr	r5, [r1, #16]
 800ceb6:	f101 0c14 	add.w	ip, r1, #20
 800ceba:	f8dc 3000 	ldr.w	r3, [ip]
 800cebe:	3001      	adds	r0, #1
 800cec0:	b299      	uxth	r1, r3
 800cec2:	fb02 6101 	mla	r1, r2, r1, r6
 800cec6:	0c1e      	lsrs	r6, r3, #16
 800cec8:	0c0b      	lsrs	r3, r1, #16
 800ceca:	fb02 3306 	mla	r3, r2, r6, r3
 800cece:	b289      	uxth	r1, r1
 800ced0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ced4:	4285      	cmp	r5, r0
 800ced6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ceda:	f84c 1b04 	str.w	r1, [ip], #4
 800cede:	dcec      	bgt.n	800ceba <__multadd+0x12>
 800cee0:	b30e      	cbz	r6, 800cf26 <__multadd+0x7e>
 800cee2:	68a3      	ldr	r3, [r4, #8]
 800cee4:	42ab      	cmp	r3, r5
 800cee6:	dc19      	bgt.n	800cf1c <__multadd+0x74>
 800cee8:	6861      	ldr	r1, [r4, #4]
 800ceea:	4638      	mov	r0, r7
 800ceec:	3101      	adds	r1, #1
 800ceee:	f7ff ff79 	bl	800cde4 <_Balloc>
 800cef2:	4680      	mov	r8, r0
 800cef4:	b928      	cbnz	r0, 800cf02 <__multadd+0x5a>
 800cef6:	4602      	mov	r2, r0
 800cef8:	21ba      	movs	r1, #186	@ 0xba
 800cefa:	4b0c      	ldr	r3, [pc, #48]	@ (800cf2c <__multadd+0x84>)
 800cefc:	480c      	ldr	r0, [pc, #48]	@ (800cf30 <__multadd+0x88>)
 800cefe:	f000 fe3b 	bl	800db78 <__assert_func>
 800cf02:	6922      	ldr	r2, [r4, #16]
 800cf04:	f104 010c 	add.w	r1, r4, #12
 800cf08:	3202      	adds	r2, #2
 800cf0a:	0092      	lsls	r2, r2, #2
 800cf0c:	300c      	adds	r0, #12
 800cf0e:	f7ff fb12 	bl	800c536 <memcpy>
 800cf12:	4621      	mov	r1, r4
 800cf14:	4638      	mov	r0, r7
 800cf16:	f7ff ffa5 	bl	800ce64 <_Bfree>
 800cf1a:	4644      	mov	r4, r8
 800cf1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf20:	3501      	adds	r5, #1
 800cf22:	615e      	str	r6, [r3, #20]
 800cf24:	6125      	str	r5, [r4, #16]
 800cf26:	4620      	mov	r0, r4
 800cf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2c:	0800f248 	.word	0x0800f248
 800cf30:	0800f2d0 	.word	0x0800f2d0

0800cf34 <__s2b>:
 800cf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf38:	4615      	mov	r5, r2
 800cf3a:	2209      	movs	r2, #9
 800cf3c:	461f      	mov	r7, r3
 800cf3e:	3308      	adds	r3, #8
 800cf40:	460c      	mov	r4, r1
 800cf42:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf46:	4606      	mov	r6, r0
 800cf48:	2201      	movs	r2, #1
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	db09      	blt.n	800cf64 <__s2b+0x30>
 800cf50:	4630      	mov	r0, r6
 800cf52:	f7ff ff47 	bl	800cde4 <_Balloc>
 800cf56:	b940      	cbnz	r0, 800cf6a <__s2b+0x36>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	21d3      	movs	r1, #211	@ 0xd3
 800cf5c:	4b18      	ldr	r3, [pc, #96]	@ (800cfc0 <__s2b+0x8c>)
 800cf5e:	4819      	ldr	r0, [pc, #100]	@ (800cfc4 <__s2b+0x90>)
 800cf60:	f000 fe0a 	bl	800db78 <__assert_func>
 800cf64:	0052      	lsls	r2, r2, #1
 800cf66:	3101      	adds	r1, #1
 800cf68:	e7f0      	b.n	800cf4c <__s2b+0x18>
 800cf6a:	9b08      	ldr	r3, [sp, #32]
 800cf6c:	2d09      	cmp	r5, #9
 800cf6e:	6143      	str	r3, [r0, #20]
 800cf70:	f04f 0301 	mov.w	r3, #1
 800cf74:	6103      	str	r3, [r0, #16]
 800cf76:	dd16      	ble.n	800cfa6 <__s2b+0x72>
 800cf78:	f104 0909 	add.w	r9, r4, #9
 800cf7c:	46c8      	mov	r8, r9
 800cf7e:	442c      	add	r4, r5
 800cf80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf84:	4601      	mov	r1, r0
 800cf86:	220a      	movs	r2, #10
 800cf88:	4630      	mov	r0, r6
 800cf8a:	3b30      	subs	r3, #48	@ 0x30
 800cf8c:	f7ff ff8c 	bl	800cea8 <__multadd>
 800cf90:	45a0      	cmp	r8, r4
 800cf92:	d1f5      	bne.n	800cf80 <__s2b+0x4c>
 800cf94:	f1a5 0408 	sub.w	r4, r5, #8
 800cf98:	444c      	add	r4, r9
 800cf9a:	1b2d      	subs	r5, r5, r4
 800cf9c:	1963      	adds	r3, r4, r5
 800cf9e:	42bb      	cmp	r3, r7
 800cfa0:	db04      	blt.n	800cfac <__s2b+0x78>
 800cfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfa6:	2509      	movs	r5, #9
 800cfa8:	340a      	adds	r4, #10
 800cfaa:	e7f6      	b.n	800cf9a <__s2b+0x66>
 800cfac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfb0:	4601      	mov	r1, r0
 800cfb2:	220a      	movs	r2, #10
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	3b30      	subs	r3, #48	@ 0x30
 800cfb8:	f7ff ff76 	bl	800cea8 <__multadd>
 800cfbc:	e7ee      	b.n	800cf9c <__s2b+0x68>
 800cfbe:	bf00      	nop
 800cfc0:	0800f248 	.word	0x0800f248
 800cfc4:	0800f2d0 	.word	0x0800f2d0

0800cfc8 <__hi0bits>:
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cfce:	bf3a      	itte	cc
 800cfd0:	0403      	lslcc	r3, r0, #16
 800cfd2:	2010      	movcc	r0, #16
 800cfd4:	2000      	movcs	r0, #0
 800cfd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cfda:	bf3c      	itt	cc
 800cfdc:	021b      	lslcc	r3, r3, #8
 800cfde:	3008      	addcc	r0, #8
 800cfe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfe4:	bf3c      	itt	cc
 800cfe6:	011b      	lslcc	r3, r3, #4
 800cfe8:	3004      	addcc	r0, #4
 800cfea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfee:	bf3c      	itt	cc
 800cff0:	009b      	lslcc	r3, r3, #2
 800cff2:	3002      	addcc	r0, #2
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	db05      	blt.n	800d004 <__hi0bits+0x3c>
 800cff8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cffc:	f100 0001 	add.w	r0, r0, #1
 800d000:	bf08      	it	eq
 800d002:	2020      	moveq	r0, #32
 800d004:	4770      	bx	lr

0800d006 <__lo0bits>:
 800d006:	6803      	ldr	r3, [r0, #0]
 800d008:	4602      	mov	r2, r0
 800d00a:	f013 0007 	ands.w	r0, r3, #7
 800d00e:	d00b      	beq.n	800d028 <__lo0bits+0x22>
 800d010:	07d9      	lsls	r1, r3, #31
 800d012:	d421      	bmi.n	800d058 <__lo0bits+0x52>
 800d014:	0798      	lsls	r0, r3, #30
 800d016:	bf49      	itett	mi
 800d018:	085b      	lsrmi	r3, r3, #1
 800d01a:	089b      	lsrpl	r3, r3, #2
 800d01c:	2001      	movmi	r0, #1
 800d01e:	6013      	strmi	r3, [r2, #0]
 800d020:	bf5c      	itt	pl
 800d022:	2002      	movpl	r0, #2
 800d024:	6013      	strpl	r3, [r2, #0]
 800d026:	4770      	bx	lr
 800d028:	b299      	uxth	r1, r3
 800d02a:	b909      	cbnz	r1, 800d030 <__lo0bits+0x2a>
 800d02c:	2010      	movs	r0, #16
 800d02e:	0c1b      	lsrs	r3, r3, #16
 800d030:	b2d9      	uxtb	r1, r3
 800d032:	b909      	cbnz	r1, 800d038 <__lo0bits+0x32>
 800d034:	3008      	adds	r0, #8
 800d036:	0a1b      	lsrs	r3, r3, #8
 800d038:	0719      	lsls	r1, r3, #28
 800d03a:	bf04      	itt	eq
 800d03c:	091b      	lsreq	r3, r3, #4
 800d03e:	3004      	addeq	r0, #4
 800d040:	0799      	lsls	r1, r3, #30
 800d042:	bf04      	itt	eq
 800d044:	089b      	lsreq	r3, r3, #2
 800d046:	3002      	addeq	r0, #2
 800d048:	07d9      	lsls	r1, r3, #31
 800d04a:	d403      	bmi.n	800d054 <__lo0bits+0x4e>
 800d04c:	085b      	lsrs	r3, r3, #1
 800d04e:	f100 0001 	add.w	r0, r0, #1
 800d052:	d003      	beq.n	800d05c <__lo0bits+0x56>
 800d054:	6013      	str	r3, [r2, #0]
 800d056:	4770      	bx	lr
 800d058:	2000      	movs	r0, #0
 800d05a:	4770      	bx	lr
 800d05c:	2020      	movs	r0, #32
 800d05e:	4770      	bx	lr

0800d060 <__i2b>:
 800d060:	b510      	push	{r4, lr}
 800d062:	460c      	mov	r4, r1
 800d064:	2101      	movs	r1, #1
 800d066:	f7ff febd 	bl	800cde4 <_Balloc>
 800d06a:	4602      	mov	r2, r0
 800d06c:	b928      	cbnz	r0, 800d07a <__i2b+0x1a>
 800d06e:	f240 1145 	movw	r1, #325	@ 0x145
 800d072:	4b04      	ldr	r3, [pc, #16]	@ (800d084 <__i2b+0x24>)
 800d074:	4804      	ldr	r0, [pc, #16]	@ (800d088 <__i2b+0x28>)
 800d076:	f000 fd7f 	bl	800db78 <__assert_func>
 800d07a:	2301      	movs	r3, #1
 800d07c:	6144      	str	r4, [r0, #20]
 800d07e:	6103      	str	r3, [r0, #16]
 800d080:	bd10      	pop	{r4, pc}
 800d082:	bf00      	nop
 800d084:	0800f248 	.word	0x0800f248
 800d088:	0800f2d0 	.word	0x0800f2d0

0800d08c <__multiply>:
 800d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	4614      	mov	r4, r2
 800d092:	690a      	ldr	r2, [r1, #16]
 800d094:	6923      	ldr	r3, [r4, #16]
 800d096:	460f      	mov	r7, r1
 800d098:	429a      	cmp	r2, r3
 800d09a:	bfa2      	ittt	ge
 800d09c:	4623      	movge	r3, r4
 800d09e:	460c      	movge	r4, r1
 800d0a0:	461f      	movge	r7, r3
 800d0a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d0a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d0aa:	68a3      	ldr	r3, [r4, #8]
 800d0ac:	6861      	ldr	r1, [r4, #4]
 800d0ae:	eb0a 0609 	add.w	r6, sl, r9
 800d0b2:	42b3      	cmp	r3, r6
 800d0b4:	b085      	sub	sp, #20
 800d0b6:	bfb8      	it	lt
 800d0b8:	3101      	addlt	r1, #1
 800d0ba:	f7ff fe93 	bl	800cde4 <_Balloc>
 800d0be:	b930      	cbnz	r0, 800d0ce <__multiply+0x42>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d0c6:	4b43      	ldr	r3, [pc, #268]	@ (800d1d4 <__multiply+0x148>)
 800d0c8:	4843      	ldr	r0, [pc, #268]	@ (800d1d8 <__multiply+0x14c>)
 800d0ca:	f000 fd55 	bl	800db78 <__assert_func>
 800d0ce:	f100 0514 	add.w	r5, r0, #20
 800d0d2:	462b      	mov	r3, r5
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0da:	4543      	cmp	r3, r8
 800d0dc:	d321      	bcc.n	800d122 <__multiply+0x96>
 800d0de:	f107 0114 	add.w	r1, r7, #20
 800d0e2:	f104 0214 	add.w	r2, r4, #20
 800d0e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d0ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	1b13      	subs	r3, r2, r4
 800d0f2:	3b15      	subs	r3, #21
 800d0f4:	f023 0303 	bic.w	r3, r3, #3
 800d0f8:	3304      	adds	r3, #4
 800d0fa:	f104 0715 	add.w	r7, r4, #21
 800d0fe:	42ba      	cmp	r2, r7
 800d100:	bf38      	it	cc
 800d102:	2304      	movcc	r3, #4
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	9103      	str	r1, [sp, #12]
 800d10a:	428b      	cmp	r3, r1
 800d10c:	d80c      	bhi.n	800d128 <__multiply+0x9c>
 800d10e:	2e00      	cmp	r6, #0
 800d110:	dd03      	ble.n	800d11a <__multiply+0x8e>
 800d112:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d116:	2b00      	cmp	r3, #0
 800d118:	d05a      	beq.n	800d1d0 <__multiply+0x144>
 800d11a:	6106      	str	r6, [r0, #16]
 800d11c:	b005      	add	sp, #20
 800d11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d122:	f843 2b04 	str.w	r2, [r3], #4
 800d126:	e7d8      	b.n	800d0da <__multiply+0x4e>
 800d128:	f8b1 a000 	ldrh.w	sl, [r1]
 800d12c:	f1ba 0f00 	cmp.w	sl, #0
 800d130:	d023      	beq.n	800d17a <__multiply+0xee>
 800d132:	46a9      	mov	r9, r5
 800d134:	f04f 0c00 	mov.w	ip, #0
 800d138:	f104 0e14 	add.w	lr, r4, #20
 800d13c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d140:	f8d9 3000 	ldr.w	r3, [r9]
 800d144:	fa1f fb87 	uxth.w	fp, r7
 800d148:	b29b      	uxth	r3, r3
 800d14a:	fb0a 330b 	mla	r3, sl, fp, r3
 800d14e:	4463      	add	r3, ip
 800d150:	f8d9 c000 	ldr.w	ip, [r9]
 800d154:	0c3f      	lsrs	r7, r7, #16
 800d156:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d15a:	fb0a c707 	mla	r7, sl, r7, ip
 800d15e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d162:	b29b      	uxth	r3, r3
 800d164:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d168:	4572      	cmp	r2, lr
 800d16a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d16e:	f849 3b04 	str.w	r3, [r9], #4
 800d172:	d8e3      	bhi.n	800d13c <__multiply+0xb0>
 800d174:	9b01      	ldr	r3, [sp, #4]
 800d176:	f845 c003 	str.w	ip, [r5, r3]
 800d17a:	9b03      	ldr	r3, [sp, #12]
 800d17c:	3104      	adds	r1, #4
 800d17e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d182:	f1b9 0f00 	cmp.w	r9, #0
 800d186:	d021      	beq.n	800d1cc <__multiply+0x140>
 800d188:	46ae      	mov	lr, r5
 800d18a:	f04f 0a00 	mov.w	sl, #0
 800d18e:	682b      	ldr	r3, [r5, #0]
 800d190:	f104 0c14 	add.w	ip, r4, #20
 800d194:	f8bc b000 	ldrh.w	fp, [ip]
 800d198:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	fb09 770b 	mla	r7, r9, fp, r7
 800d1a2:	4457      	add	r7, sl
 800d1a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1a8:	f84e 3b04 	str.w	r3, [lr], #4
 800d1ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1b4:	f8be 3000 	ldrh.w	r3, [lr]
 800d1b8:	4562      	cmp	r2, ip
 800d1ba:	fb09 330a 	mla	r3, r9, sl, r3
 800d1be:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d1c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1c6:	d8e5      	bhi.n	800d194 <__multiply+0x108>
 800d1c8:	9f01      	ldr	r7, [sp, #4]
 800d1ca:	51eb      	str	r3, [r5, r7]
 800d1cc:	3504      	adds	r5, #4
 800d1ce:	e79a      	b.n	800d106 <__multiply+0x7a>
 800d1d0:	3e01      	subs	r6, #1
 800d1d2:	e79c      	b.n	800d10e <__multiply+0x82>
 800d1d4:	0800f248 	.word	0x0800f248
 800d1d8:	0800f2d0 	.word	0x0800f2d0

0800d1dc <__pow5mult>:
 800d1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1e0:	4615      	mov	r5, r2
 800d1e2:	f012 0203 	ands.w	r2, r2, #3
 800d1e6:	4607      	mov	r7, r0
 800d1e8:	460e      	mov	r6, r1
 800d1ea:	d007      	beq.n	800d1fc <__pow5mult+0x20>
 800d1ec:	4c25      	ldr	r4, [pc, #148]	@ (800d284 <__pow5mult+0xa8>)
 800d1ee:	3a01      	subs	r2, #1
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1f6:	f7ff fe57 	bl	800cea8 <__multadd>
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	10ad      	asrs	r5, r5, #2
 800d1fe:	d03d      	beq.n	800d27c <__pow5mult+0xa0>
 800d200:	69fc      	ldr	r4, [r7, #28]
 800d202:	b97c      	cbnz	r4, 800d224 <__pow5mult+0x48>
 800d204:	2010      	movs	r0, #16
 800d206:	f001 fb3b 	bl	800e880 <malloc>
 800d20a:	4602      	mov	r2, r0
 800d20c:	61f8      	str	r0, [r7, #28]
 800d20e:	b928      	cbnz	r0, 800d21c <__pow5mult+0x40>
 800d210:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d214:	4b1c      	ldr	r3, [pc, #112]	@ (800d288 <__pow5mult+0xac>)
 800d216:	481d      	ldr	r0, [pc, #116]	@ (800d28c <__pow5mult+0xb0>)
 800d218:	f000 fcae 	bl	800db78 <__assert_func>
 800d21c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d220:	6004      	str	r4, [r0, #0]
 800d222:	60c4      	str	r4, [r0, #12]
 800d224:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d22c:	b94c      	cbnz	r4, 800d242 <__pow5mult+0x66>
 800d22e:	f240 2171 	movw	r1, #625	@ 0x271
 800d232:	4638      	mov	r0, r7
 800d234:	f7ff ff14 	bl	800d060 <__i2b>
 800d238:	2300      	movs	r3, #0
 800d23a:	4604      	mov	r4, r0
 800d23c:	f8c8 0008 	str.w	r0, [r8, #8]
 800d240:	6003      	str	r3, [r0, #0]
 800d242:	f04f 0900 	mov.w	r9, #0
 800d246:	07eb      	lsls	r3, r5, #31
 800d248:	d50a      	bpl.n	800d260 <__pow5mult+0x84>
 800d24a:	4631      	mov	r1, r6
 800d24c:	4622      	mov	r2, r4
 800d24e:	4638      	mov	r0, r7
 800d250:	f7ff ff1c 	bl	800d08c <__multiply>
 800d254:	4680      	mov	r8, r0
 800d256:	4631      	mov	r1, r6
 800d258:	4638      	mov	r0, r7
 800d25a:	f7ff fe03 	bl	800ce64 <_Bfree>
 800d25e:	4646      	mov	r6, r8
 800d260:	106d      	asrs	r5, r5, #1
 800d262:	d00b      	beq.n	800d27c <__pow5mult+0xa0>
 800d264:	6820      	ldr	r0, [r4, #0]
 800d266:	b938      	cbnz	r0, 800d278 <__pow5mult+0x9c>
 800d268:	4622      	mov	r2, r4
 800d26a:	4621      	mov	r1, r4
 800d26c:	4638      	mov	r0, r7
 800d26e:	f7ff ff0d 	bl	800d08c <__multiply>
 800d272:	6020      	str	r0, [r4, #0]
 800d274:	f8c0 9000 	str.w	r9, [r0]
 800d278:	4604      	mov	r4, r0
 800d27a:	e7e4      	b.n	800d246 <__pow5mult+0x6a>
 800d27c:	4630      	mov	r0, r6
 800d27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d282:	bf00      	nop
 800d284:	0800f32c 	.word	0x0800f32c
 800d288:	0800f2b9 	.word	0x0800f2b9
 800d28c:	0800f2d0 	.word	0x0800f2d0

0800d290 <__lshift>:
 800d290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d294:	460c      	mov	r4, r1
 800d296:	4607      	mov	r7, r0
 800d298:	4691      	mov	r9, r2
 800d29a:	6923      	ldr	r3, [r4, #16]
 800d29c:	6849      	ldr	r1, [r1, #4]
 800d29e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2a2:	68a3      	ldr	r3, [r4, #8]
 800d2a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2a8:	f108 0601 	add.w	r6, r8, #1
 800d2ac:	42b3      	cmp	r3, r6
 800d2ae:	db0b      	blt.n	800d2c8 <__lshift+0x38>
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	f7ff fd97 	bl	800cde4 <_Balloc>
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	b948      	cbnz	r0, 800d2ce <__lshift+0x3e>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d2c0:	4b27      	ldr	r3, [pc, #156]	@ (800d360 <__lshift+0xd0>)
 800d2c2:	4828      	ldr	r0, [pc, #160]	@ (800d364 <__lshift+0xd4>)
 800d2c4:	f000 fc58 	bl	800db78 <__assert_func>
 800d2c8:	3101      	adds	r1, #1
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	e7ee      	b.n	800d2ac <__lshift+0x1c>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f100 0114 	add.w	r1, r0, #20
 800d2d4:	f100 0210 	add.w	r2, r0, #16
 800d2d8:	4618      	mov	r0, r3
 800d2da:	4553      	cmp	r3, sl
 800d2dc:	db33      	blt.n	800d346 <__lshift+0xb6>
 800d2de:	6920      	ldr	r0, [r4, #16]
 800d2e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2e4:	f104 0314 	add.w	r3, r4, #20
 800d2e8:	f019 091f 	ands.w	r9, r9, #31
 800d2ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2f4:	d02b      	beq.n	800d34e <__lshift+0xbe>
 800d2f6:	468a      	mov	sl, r1
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f1c9 0e20 	rsb	lr, r9, #32
 800d2fe:	6818      	ldr	r0, [r3, #0]
 800d300:	fa00 f009 	lsl.w	r0, r0, r9
 800d304:	4310      	orrs	r0, r2
 800d306:	f84a 0b04 	str.w	r0, [sl], #4
 800d30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d30e:	459c      	cmp	ip, r3
 800d310:	fa22 f20e 	lsr.w	r2, r2, lr
 800d314:	d8f3      	bhi.n	800d2fe <__lshift+0x6e>
 800d316:	ebac 0304 	sub.w	r3, ip, r4
 800d31a:	3b15      	subs	r3, #21
 800d31c:	f023 0303 	bic.w	r3, r3, #3
 800d320:	3304      	adds	r3, #4
 800d322:	f104 0015 	add.w	r0, r4, #21
 800d326:	4584      	cmp	ip, r0
 800d328:	bf38      	it	cc
 800d32a:	2304      	movcc	r3, #4
 800d32c:	50ca      	str	r2, [r1, r3]
 800d32e:	b10a      	cbz	r2, 800d334 <__lshift+0xa4>
 800d330:	f108 0602 	add.w	r6, r8, #2
 800d334:	3e01      	subs	r6, #1
 800d336:	4638      	mov	r0, r7
 800d338:	4621      	mov	r1, r4
 800d33a:	612e      	str	r6, [r5, #16]
 800d33c:	f7ff fd92 	bl	800ce64 <_Bfree>
 800d340:	4628      	mov	r0, r5
 800d342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d346:	f842 0f04 	str.w	r0, [r2, #4]!
 800d34a:	3301      	adds	r3, #1
 800d34c:	e7c5      	b.n	800d2da <__lshift+0x4a>
 800d34e:	3904      	subs	r1, #4
 800d350:	f853 2b04 	ldr.w	r2, [r3], #4
 800d354:	459c      	cmp	ip, r3
 800d356:	f841 2f04 	str.w	r2, [r1, #4]!
 800d35a:	d8f9      	bhi.n	800d350 <__lshift+0xc0>
 800d35c:	e7ea      	b.n	800d334 <__lshift+0xa4>
 800d35e:	bf00      	nop
 800d360:	0800f248 	.word	0x0800f248
 800d364:	0800f2d0 	.word	0x0800f2d0

0800d368 <__mcmp>:
 800d368:	4603      	mov	r3, r0
 800d36a:	690a      	ldr	r2, [r1, #16]
 800d36c:	6900      	ldr	r0, [r0, #16]
 800d36e:	b530      	push	{r4, r5, lr}
 800d370:	1a80      	subs	r0, r0, r2
 800d372:	d10e      	bne.n	800d392 <__mcmp+0x2a>
 800d374:	3314      	adds	r3, #20
 800d376:	3114      	adds	r1, #20
 800d378:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d37c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d380:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d388:	4295      	cmp	r5, r2
 800d38a:	d003      	beq.n	800d394 <__mcmp+0x2c>
 800d38c:	d205      	bcs.n	800d39a <__mcmp+0x32>
 800d38e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d392:	bd30      	pop	{r4, r5, pc}
 800d394:	42a3      	cmp	r3, r4
 800d396:	d3f3      	bcc.n	800d380 <__mcmp+0x18>
 800d398:	e7fb      	b.n	800d392 <__mcmp+0x2a>
 800d39a:	2001      	movs	r0, #1
 800d39c:	e7f9      	b.n	800d392 <__mcmp+0x2a>
	...

0800d3a0 <__mdiff>:
 800d3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	4689      	mov	r9, r1
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	4648      	mov	r0, r9
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	f7ff ffdb 	bl	800d368 <__mcmp>
 800d3b2:	1e05      	subs	r5, r0, #0
 800d3b4:	d112      	bne.n	800d3dc <__mdiff+0x3c>
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	f7ff fd13 	bl	800cde4 <_Balloc>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	b928      	cbnz	r0, 800d3ce <__mdiff+0x2e>
 800d3c2:	f240 2137 	movw	r1, #567	@ 0x237
 800d3c6:	4b3e      	ldr	r3, [pc, #248]	@ (800d4c0 <__mdiff+0x120>)
 800d3c8:	483e      	ldr	r0, [pc, #248]	@ (800d4c4 <__mdiff+0x124>)
 800d3ca:	f000 fbd5 	bl	800db78 <__assert_func>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	b003      	add	sp, #12
 800d3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3dc:	bfbc      	itt	lt
 800d3de:	464b      	movlt	r3, r9
 800d3e0:	46a1      	movlt	r9, r4
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d3e8:	bfba      	itte	lt
 800d3ea:	461c      	movlt	r4, r3
 800d3ec:	2501      	movlt	r5, #1
 800d3ee:	2500      	movge	r5, #0
 800d3f0:	f7ff fcf8 	bl	800cde4 <_Balloc>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	b918      	cbnz	r0, 800d400 <__mdiff+0x60>
 800d3f8:	f240 2145 	movw	r1, #581	@ 0x245
 800d3fc:	4b30      	ldr	r3, [pc, #192]	@ (800d4c0 <__mdiff+0x120>)
 800d3fe:	e7e3      	b.n	800d3c8 <__mdiff+0x28>
 800d400:	f100 0b14 	add.w	fp, r0, #20
 800d404:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d408:	f109 0310 	add.w	r3, r9, #16
 800d40c:	60c5      	str	r5, [r0, #12]
 800d40e:	f04f 0c00 	mov.w	ip, #0
 800d412:	f109 0514 	add.w	r5, r9, #20
 800d416:	46d9      	mov	r9, fp
 800d418:	6926      	ldr	r6, [r4, #16]
 800d41a:	f104 0e14 	add.w	lr, r4, #20
 800d41e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d422:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d426:	9301      	str	r3, [sp, #4]
 800d428:	9b01      	ldr	r3, [sp, #4]
 800d42a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d42e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d432:	b281      	uxth	r1, r0
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	fa1f f38a 	uxth.w	r3, sl
 800d43a:	1a5b      	subs	r3, r3, r1
 800d43c:	0c00      	lsrs	r0, r0, #16
 800d43e:	4463      	add	r3, ip
 800d440:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d444:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d448:	b29b      	uxth	r3, r3
 800d44a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d44e:	4576      	cmp	r6, lr
 800d450:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d454:	f849 3b04 	str.w	r3, [r9], #4
 800d458:	d8e6      	bhi.n	800d428 <__mdiff+0x88>
 800d45a:	1b33      	subs	r3, r6, r4
 800d45c:	3b15      	subs	r3, #21
 800d45e:	f023 0303 	bic.w	r3, r3, #3
 800d462:	3415      	adds	r4, #21
 800d464:	3304      	adds	r3, #4
 800d466:	42a6      	cmp	r6, r4
 800d468:	bf38      	it	cc
 800d46a:	2304      	movcc	r3, #4
 800d46c:	441d      	add	r5, r3
 800d46e:	445b      	add	r3, fp
 800d470:	461e      	mov	r6, r3
 800d472:	462c      	mov	r4, r5
 800d474:	4544      	cmp	r4, r8
 800d476:	d30e      	bcc.n	800d496 <__mdiff+0xf6>
 800d478:	f108 0103 	add.w	r1, r8, #3
 800d47c:	1b49      	subs	r1, r1, r5
 800d47e:	f021 0103 	bic.w	r1, r1, #3
 800d482:	3d03      	subs	r5, #3
 800d484:	45a8      	cmp	r8, r5
 800d486:	bf38      	it	cc
 800d488:	2100      	movcc	r1, #0
 800d48a:	440b      	add	r3, r1
 800d48c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d490:	b199      	cbz	r1, 800d4ba <__mdiff+0x11a>
 800d492:	6117      	str	r7, [r2, #16]
 800d494:	e79e      	b.n	800d3d4 <__mdiff+0x34>
 800d496:	46e6      	mov	lr, ip
 800d498:	f854 1b04 	ldr.w	r1, [r4], #4
 800d49c:	fa1f fc81 	uxth.w	ip, r1
 800d4a0:	44f4      	add	ip, lr
 800d4a2:	0c08      	lsrs	r0, r1, #16
 800d4a4:	4471      	add	r1, lr
 800d4a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d4aa:	b289      	uxth	r1, r1
 800d4ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d4b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4b4:	f846 1b04 	str.w	r1, [r6], #4
 800d4b8:	e7dc      	b.n	800d474 <__mdiff+0xd4>
 800d4ba:	3f01      	subs	r7, #1
 800d4bc:	e7e6      	b.n	800d48c <__mdiff+0xec>
 800d4be:	bf00      	nop
 800d4c0:	0800f248 	.word	0x0800f248
 800d4c4:	0800f2d0 	.word	0x0800f2d0

0800d4c8 <__ulp>:
 800d4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d504 <__ulp+0x3c>)
 800d4ca:	400b      	ands	r3, r1
 800d4cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	dc08      	bgt.n	800d4e6 <__ulp+0x1e>
 800d4d4:	425b      	negs	r3, r3
 800d4d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d4da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d4de:	da04      	bge.n	800d4ea <__ulp+0x22>
 800d4e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d4e4:	4113      	asrs	r3, r2
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	e008      	b.n	800d4fc <__ulp+0x34>
 800d4ea:	f1a2 0314 	sub.w	r3, r2, #20
 800d4ee:	2b1e      	cmp	r3, #30
 800d4f0:	bfd6      	itet	le
 800d4f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d4f6:	2201      	movgt	r2, #1
 800d4f8:	40da      	lsrle	r2, r3
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	7ff00000 	.word	0x7ff00000

0800d508 <__b2d>:
 800d508:	6902      	ldr	r2, [r0, #16]
 800d50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50c:	f100 0614 	add.w	r6, r0, #20
 800d510:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d514:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d518:	4f1e      	ldr	r7, [pc, #120]	@ (800d594 <__b2d+0x8c>)
 800d51a:	4620      	mov	r0, r4
 800d51c:	f7ff fd54 	bl	800cfc8 <__hi0bits>
 800d520:	4603      	mov	r3, r0
 800d522:	f1c0 0020 	rsb	r0, r0, #32
 800d526:	2b0a      	cmp	r3, #10
 800d528:	f1a2 0504 	sub.w	r5, r2, #4
 800d52c:	6008      	str	r0, [r1, #0]
 800d52e:	dc12      	bgt.n	800d556 <__b2d+0x4e>
 800d530:	42ae      	cmp	r6, r5
 800d532:	bf2c      	ite	cs
 800d534:	2200      	movcs	r2, #0
 800d536:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d53a:	f1c3 0c0b 	rsb	ip, r3, #11
 800d53e:	3315      	adds	r3, #21
 800d540:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d544:	fa04 f303 	lsl.w	r3, r4, r3
 800d548:	fa22 f20c 	lsr.w	r2, r2, ip
 800d54c:	ea4e 0107 	orr.w	r1, lr, r7
 800d550:	431a      	orrs	r2, r3
 800d552:	4610      	mov	r0, r2
 800d554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d556:	42ae      	cmp	r6, r5
 800d558:	bf36      	itet	cc
 800d55a:	f1a2 0508 	subcc.w	r5, r2, #8
 800d55e:	2200      	movcs	r2, #0
 800d560:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d564:	3b0b      	subs	r3, #11
 800d566:	d012      	beq.n	800d58e <__b2d+0x86>
 800d568:	f1c3 0720 	rsb	r7, r3, #32
 800d56c:	fa22 f107 	lsr.w	r1, r2, r7
 800d570:	409c      	lsls	r4, r3
 800d572:	430c      	orrs	r4, r1
 800d574:	42b5      	cmp	r5, r6
 800d576:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d57a:	bf94      	ite	ls
 800d57c:	2400      	movls	r4, #0
 800d57e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d582:	409a      	lsls	r2, r3
 800d584:	40fc      	lsrs	r4, r7
 800d586:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d58a:	4322      	orrs	r2, r4
 800d58c:	e7e1      	b.n	800d552 <__b2d+0x4a>
 800d58e:	ea44 0107 	orr.w	r1, r4, r7
 800d592:	e7de      	b.n	800d552 <__b2d+0x4a>
 800d594:	3ff00000 	.word	0x3ff00000

0800d598 <__d2b>:
 800d598:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d59c:	2101      	movs	r1, #1
 800d59e:	4690      	mov	r8, r2
 800d5a0:	4699      	mov	r9, r3
 800d5a2:	9e08      	ldr	r6, [sp, #32]
 800d5a4:	f7ff fc1e 	bl	800cde4 <_Balloc>
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	b930      	cbnz	r0, 800d5ba <__d2b+0x22>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	f240 310f 	movw	r1, #783	@ 0x30f
 800d5b2:	4b23      	ldr	r3, [pc, #140]	@ (800d640 <__d2b+0xa8>)
 800d5b4:	4823      	ldr	r0, [pc, #140]	@ (800d644 <__d2b+0xac>)
 800d5b6:	f000 fadf 	bl	800db78 <__assert_func>
 800d5ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d5be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5c2:	b10d      	cbz	r5, 800d5c8 <__d2b+0x30>
 800d5c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d5c8:	9301      	str	r3, [sp, #4]
 800d5ca:	f1b8 0300 	subs.w	r3, r8, #0
 800d5ce:	d024      	beq.n	800d61a <__d2b+0x82>
 800d5d0:	4668      	mov	r0, sp
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	f7ff fd17 	bl	800d006 <__lo0bits>
 800d5d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5dc:	b1d8      	cbz	r0, 800d616 <__d2b+0x7e>
 800d5de:	f1c0 0320 	rsb	r3, r0, #32
 800d5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e6:	430b      	orrs	r3, r1
 800d5e8:	40c2      	lsrs	r2, r0
 800d5ea:	6163      	str	r3, [r4, #20]
 800d5ec:	9201      	str	r2, [sp, #4]
 800d5ee:	9b01      	ldr	r3, [sp, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	bf0c      	ite	eq
 800d5f4:	2201      	moveq	r2, #1
 800d5f6:	2202      	movne	r2, #2
 800d5f8:	61a3      	str	r3, [r4, #24]
 800d5fa:	6122      	str	r2, [r4, #16]
 800d5fc:	b1ad      	cbz	r5, 800d62a <__d2b+0x92>
 800d5fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d602:	4405      	add	r5, r0
 800d604:	6035      	str	r5, [r6, #0]
 800d606:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d60c:	6018      	str	r0, [r3, #0]
 800d60e:	4620      	mov	r0, r4
 800d610:	b002      	add	sp, #8
 800d612:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d616:	6161      	str	r1, [r4, #20]
 800d618:	e7e9      	b.n	800d5ee <__d2b+0x56>
 800d61a:	a801      	add	r0, sp, #4
 800d61c:	f7ff fcf3 	bl	800d006 <__lo0bits>
 800d620:	9b01      	ldr	r3, [sp, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	6163      	str	r3, [r4, #20]
 800d626:	3020      	adds	r0, #32
 800d628:	e7e7      	b.n	800d5fa <__d2b+0x62>
 800d62a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d62e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d632:	6030      	str	r0, [r6, #0]
 800d634:	6918      	ldr	r0, [r3, #16]
 800d636:	f7ff fcc7 	bl	800cfc8 <__hi0bits>
 800d63a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d63e:	e7e4      	b.n	800d60a <__d2b+0x72>
 800d640:	0800f248 	.word	0x0800f248
 800d644:	0800f2d0 	.word	0x0800f2d0

0800d648 <__ratio>:
 800d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64c:	b085      	sub	sp, #20
 800d64e:	e9cd 1000 	strd	r1, r0, [sp]
 800d652:	a902      	add	r1, sp, #8
 800d654:	f7ff ff58 	bl	800d508 <__b2d>
 800d658:	468b      	mov	fp, r1
 800d65a:	4606      	mov	r6, r0
 800d65c:	460f      	mov	r7, r1
 800d65e:	9800      	ldr	r0, [sp, #0]
 800d660:	a903      	add	r1, sp, #12
 800d662:	f7ff ff51 	bl	800d508 <__b2d>
 800d666:	460d      	mov	r5, r1
 800d668:	9b01      	ldr	r3, [sp, #4]
 800d66a:	4689      	mov	r9, r1
 800d66c:	6919      	ldr	r1, [r3, #16]
 800d66e:	9b00      	ldr	r3, [sp, #0]
 800d670:	4604      	mov	r4, r0
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	4630      	mov	r0, r6
 800d676:	1ac9      	subs	r1, r1, r3
 800d678:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d67c:	1a9b      	subs	r3, r3, r2
 800d67e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d682:	2b00      	cmp	r3, #0
 800d684:	bfcd      	iteet	gt
 800d686:	463a      	movgt	r2, r7
 800d688:	462a      	movle	r2, r5
 800d68a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d68e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d692:	bfd8      	it	le
 800d694:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d698:	464b      	mov	r3, r9
 800d69a:	4622      	mov	r2, r4
 800d69c:	4659      	mov	r1, fp
 800d69e:	f7f3 f845 	bl	800072c <__aeabi_ddiv>
 800d6a2:	b005      	add	sp, #20
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6a8 <_mprec_log10>:
 800d6a8:	2817      	cmp	r0, #23
 800d6aa:	b5d0      	push	{r4, r6, r7, lr}
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	dc05      	bgt.n	800d6bc <_mprec_log10+0x14>
 800d6b0:	4b08      	ldr	r3, [pc, #32]	@ (800d6d4 <_mprec_log10+0x2c>)
 800d6b2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800d6b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6ba:	bdd0      	pop	{r4, r6, r7, pc}
 800d6bc:	2000      	movs	r0, #0
 800d6be:	2600      	movs	r6, #0
 800d6c0:	4905      	ldr	r1, [pc, #20]	@ (800d6d8 <_mprec_log10+0x30>)
 800d6c2:	4f06      	ldr	r7, [pc, #24]	@ (800d6dc <_mprec_log10+0x34>)
 800d6c4:	4632      	mov	r2, r6
 800d6c6:	463b      	mov	r3, r7
 800d6c8:	f7f2 ff06 	bl	80004d8 <__aeabi_dmul>
 800d6cc:	3c01      	subs	r4, #1
 800d6ce:	d1f9      	bne.n	800d6c4 <_mprec_log10+0x1c>
 800d6d0:	e7f3      	b.n	800d6ba <_mprec_log10+0x12>
 800d6d2:	bf00      	nop
 800d6d4:	0800f360 	.word	0x0800f360
 800d6d8:	3ff00000 	.word	0x3ff00000
 800d6dc:	40240000 	.word	0x40240000

0800d6e0 <__copybits>:
 800d6e0:	3901      	subs	r1, #1
 800d6e2:	b570      	push	{r4, r5, r6, lr}
 800d6e4:	1149      	asrs	r1, r1, #5
 800d6e6:	6914      	ldr	r4, [r2, #16]
 800d6e8:	3101      	adds	r1, #1
 800d6ea:	f102 0314 	add.w	r3, r2, #20
 800d6ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6f6:	1f05      	subs	r5, r0, #4
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	d30c      	bcc.n	800d716 <__copybits+0x36>
 800d6fc:	1aa3      	subs	r3, r4, r2
 800d6fe:	3b11      	subs	r3, #17
 800d700:	f023 0303 	bic.w	r3, r3, #3
 800d704:	3211      	adds	r2, #17
 800d706:	42a2      	cmp	r2, r4
 800d708:	bf88      	it	hi
 800d70a:	2300      	movhi	r3, #0
 800d70c:	4418      	add	r0, r3
 800d70e:	2300      	movs	r3, #0
 800d710:	4288      	cmp	r0, r1
 800d712:	d305      	bcc.n	800d720 <__copybits+0x40>
 800d714:	bd70      	pop	{r4, r5, r6, pc}
 800d716:	f853 6b04 	ldr.w	r6, [r3], #4
 800d71a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d71e:	e7eb      	b.n	800d6f8 <__copybits+0x18>
 800d720:	f840 3b04 	str.w	r3, [r0], #4
 800d724:	e7f4      	b.n	800d710 <__copybits+0x30>

0800d726 <__any_on>:
 800d726:	f100 0214 	add.w	r2, r0, #20
 800d72a:	6900      	ldr	r0, [r0, #16]
 800d72c:	114b      	asrs	r3, r1, #5
 800d72e:	4298      	cmp	r0, r3
 800d730:	b510      	push	{r4, lr}
 800d732:	db11      	blt.n	800d758 <__any_on+0x32>
 800d734:	dd0a      	ble.n	800d74c <__any_on+0x26>
 800d736:	f011 011f 	ands.w	r1, r1, #31
 800d73a:	d007      	beq.n	800d74c <__any_on+0x26>
 800d73c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d740:	fa24 f001 	lsr.w	r0, r4, r1
 800d744:	fa00 f101 	lsl.w	r1, r0, r1
 800d748:	428c      	cmp	r4, r1
 800d74a:	d10b      	bne.n	800d764 <__any_on+0x3e>
 800d74c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d750:	4293      	cmp	r3, r2
 800d752:	d803      	bhi.n	800d75c <__any_on+0x36>
 800d754:	2000      	movs	r0, #0
 800d756:	bd10      	pop	{r4, pc}
 800d758:	4603      	mov	r3, r0
 800d75a:	e7f7      	b.n	800d74c <__any_on+0x26>
 800d75c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d760:	2900      	cmp	r1, #0
 800d762:	d0f5      	beq.n	800d750 <__any_on+0x2a>
 800d764:	2001      	movs	r0, #1
 800d766:	e7f6      	b.n	800d756 <__any_on+0x30>

0800d768 <__ascii_wctomb>:
 800d768:	4603      	mov	r3, r0
 800d76a:	4608      	mov	r0, r1
 800d76c:	b141      	cbz	r1, 800d780 <__ascii_wctomb+0x18>
 800d76e:	2aff      	cmp	r2, #255	@ 0xff
 800d770:	d904      	bls.n	800d77c <__ascii_wctomb+0x14>
 800d772:	228a      	movs	r2, #138	@ 0x8a
 800d774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	4770      	bx	lr
 800d77c:	2001      	movs	r0, #1
 800d77e:	700a      	strb	r2, [r1, #0]
 800d780:	4770      	bx	lr

0800d782 <print_e>:
 800d782:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d784:	b08b      	sub	sp, #44	@ 0x2c
 800d786:	460d      	mov	r5, r1
 800d788:	a908      	add	r1, sp, #32
 800d78a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d78c:	9104      	str	r1, [sp, #16]
 800d78e:	a907      	add	r1, sp, #28
 800d790:	9103      	str	r1, [sp, #12]
 800d792:	a909      	add	r1, sp, #36	@ 0x24
 800d794:	9102      	str	r1, [sp, #8]
 800d796:	1c71      	adds	r1, r6, #1
 800d798:	9101      	str	r1, [sp, #4]
 800d79a:	2102      	movs	r1, #2
 800d79c:	9100      	str	r1, [sp, #0]
 800d79e:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 800d7a2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800d7a4:	f000 faa4 	bl	800dcf0 <_dtoa_r>
 800d7a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d7ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7ae:	4601      	mov	r1, r0
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d104      	bne.n	800d7be <print_e+0x3c>
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	f000 f9d7 	bl	800db68 <strcpy>
 800d7ba:	b00b      	add	sp, #44	@ 0x2c
 800d7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7be:	462b      	mov	r3, r5
 800d7c0:	7800      	ldrb	r0, [r0, #0]
 800d7c2:	2e00      	cmp	r6, #0
 800d7c4:	f803 0b01 	strb.w	r0, [r3], #1
 800d7c8:	bfc8      	it	gt
 800d7ca:	2401      	movgt	r4, #1
 800d7cc:	202e      	movs	r0, #46	@ 0x2e
 800d7ce:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d7d2:	b10d      	cbz	r5, 800d7d8 <print_e+0x56>
 800d7d4:	2e00      	cmp	r6, #0
 800d7d6:	dc29      	bgt.n	800d82c <print_e+0xaa>
 800d7d8:	2f67      	cmp	r7, #103	@ 0x67
 800d7da:	d038      	beq.n	800d84e <print_e+0xcc>
 800d7dc:	2f47      	cmp	r7, #71	@ 0x47
 800d7de:	d038      	beq.n	800d852 <print_e+0xd0>
 800d7e0:	212e      	movs	r1, #46	@ 0x2e
 800d7e2:	2030      	movs	r0, #48	@ 0x30
 800d7e4:	2e00      	cmp	r6, #0
 800d7e6:	dc2a      	bgt.n	800d83e <print_e+0xbc>
 800d7e8:	1e51      	subs	r1, r2, #1
 800d7ea:	2900      	cmp	r1, #0
 800d7ec:	bfa8      	it	ge
 800d7ee:	222b      	movge	r2, #43	@ 0x2b
 800d7f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800d7f2:	bfbd      	ittte	lt
 800d7f4:	212d      	movlt	r1, #45	@ 0x2d
 800d7f6:	f1c2 0201 	rsblt	r2, r2, #1
 800d7fa:	9209      	strlt	r2, [sp, #36]	@ 0x24
 800d7fc:	705a      	strbge	r2, [r3, #1]
 800d7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d800:	bfb8      	it	lt
 800d802:	7059      	strblt	r1, [r3, #1]
 800d804:	2a63      	cmp	r2, #99	@ 0x63
 800d806:	701f      	strb	r7, [r3, #0]
 800d808:	dc25      	bgt.n	800d856 <print_e+0xd4>
 800d80a:	1c98      	adds	r0, r3, #2
 800d80c:	220a      	movs	r2, #10
 800d80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d810:	fb93 f2f2 	sdiv	r2, r3, r2
 800d814:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800d818:	7001      	strb	r1, [r0, #0]
 800d81a:	f06f 0109 	mvn.w	r1, #9
 800d81e:	fb01 3302 	mla	r3, r1, r2, r3
 800d822:	3330      	adds	r3, #48	@ 0x30
 800d824:	7043      	strb	r3, [r0, #1]
 800d826:	2300      	movs	r3, #0
 800d828:	7083      	strb	r3, [r0, #2]
 800d82a:	e7c6      	b.n	800d7ba <print_e+0x38>
 800d82c:	b10c      	cbz	r4, 800d832 <print_e+0xb0>
 800d82e:	f803 0b01 	strb.w	r0, [r3], #1
 800d832:	780c      	ldrb	r4, [r1, #0]
 800d834:	3e01      	subs	r6, #1
 800d836:	f803 4b01 	strb.w	r4, [r3], #1
 800d83a:	2400      	movs	r4, #0
 800d83c:	e7c7      	b.n	800d7ce <print_e+0x4c>
 800d83e:	b10c      	cbz	r4, 800d844 <print_e+0xc2>
 800d840:	f803 1b01 	strb.w	r1, [r3], #1
 800d844:	2400      	movs	r4, #0
 800d846:	f803 0b01 	strb.w	r0, [r3], #1
 800d84a:	3e01      	subs	r6, #1
 800d84c:	e7ca      	b.n	800d7e4 <print_e+0x62>
 800d84e:	2765      	movs	r7, #101	@ 0x65
 800d850:	e7ca      	b.n	800d7e8 <print_e+0x66>
 800d852:	2745      	movs	r7, #69	@ 0x45
 800d854:	e7c8      	b.n	800d7e8 <print_e+0x66>
 800d856:	2164      	movs	r1, #100	@ 0x64
 800d858:	fb92 f1f1 	sdiv	r1, r2, r1
 800d85c:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 800d860:	1cd8      	adds	r0, r3, #3
 800d862:	709c      	strb	r4, [r3, #2]
 800d864:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800d868:	fb03 2201 	mla	r2, r3, r1, r2
 800d86c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d86e:	e7cd      	b.n	800d80c <print_e+0x8a>

0800d870 <_gcvt>:
 800d870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d874:	4690      	mov	r8, r2
 800d876:	4699      	mov	r9, r3
 800d878:	b08b      	sub	sp, #44	@ 0x2c
 800d87a:	4607      	mov	r7, r0
 800d87c:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	@ 0x48
 800d880:	2200      	movs	r2, #0
 800d882:	2300      	movs	r3, #0
 800d884:	4640      	mov	r0, r8
 800d886:	4649      	mov	r1, r9
 800d888:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d88a:	f7f3 f897 	bl	80009bc <__aeabi_dcmplt>
 800d88e:	b110      	cbz	r0, 800d896 <_gcvt+0x26>
 800d890:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d894:	4699      	mov	r9, r3
 800d896:	2200      	movs	r2, #0
 800d898:	2300      	movs	r3, #0
 800d89a:	4640      	mov	r0, r8
 800d89c:	4649      	mov	r1, r9
 800d89e:	f7f3 f883 	bl	80009a8 <__aeabi_dcmpeq>
 800d8a2:	b138      	cbz	r0, 800d8b4 <_gcvt+0x44>
 800d8a4:	2330      	movs	r3, #48	@ 0x30
 800d8a6:	702b      	strb	r3, [r5, #0]
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	706b      	strb	r3, [r5, #1]
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	b00b      	add	sp, #44	@ 0x2c
 800d8b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8b4:	4640      	mov	r0, r8
 800d8b6:	a34e      	add	r3, pc, #312	@ (adr r3, 800d9f0 <_gcvt+0x180>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	4649      	mov	r1, r9
 800d8be:	f7f3 f887 	bl	80009d0 <__aeabi_dcmple>
 800d8c2:	b160      	cbz	r0, 800d8de <_gcvt+0x6e>
 800d8c4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800d8c8:	3c01      	subs	r4, #1
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	4642      	mov	r2, r8
 800d8ce:	464b      	mov	r3, r9
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	9602      	str	r6, [sp, #8]
 800d8d6:	9400      	str	r4, [sp, #0]
 800d8d8:	f7ff ff53 	bl	800d782 <print_e>
 800d8dc:	e7e6      	b.n	800d8ac <_gcvt+0x3c>
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f7ff fee2 	bl	800d6a8 <_mprec_log10>
 800d8e4:	4642      	mov	r2, r8
 800d8e6:	464b      	mov	r3, r9
 800d8e8:	f7f3 f872 	bl	80009d0 <__aeabi_dcmple>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d1e9      	bne.n	800d8c4 <_gcvt+0x54>
 800d8f0:	ab09      	add	r3, sp, #36	@ 0x24
 800d8f2:	9304      	str	r3, [sp, #16]
 800d8f4:	ab08      	add	r3, sp, #32
 800d8f6:	9303      	str	r3, [sp, #12]
 800d8f8:	ab07      	add	r3, sp, #28
 800d8fa:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800d8fe:	2302      	movs	r3, #2
 800d900:	4642      	mov	r2, r8
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	4638      	mov	r0, r7
 800d906:	464b      	mov	r3, r9
 800d908:	f000 f9f2 	bl	800dcf0 <_dtoa_r>
 800d90c:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d910:	9a07      	ldr	r2, [sp, #28]
 800d912:	4601      	mov	r1, r0
 800d914:	429a      	cmp	r2, r3
 800d916:	d00d      	beq.n	800d934 <_gcvt+0xc4>
 800d918:	462b      	mov	r3, r5
 800d91a:	460f      	mov	r7, r1
 800d91c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d920:	9a07      	ldr	r2, [sp, #28]
 800d922:	b108      	cbz	r0, 800d928 <_gcvt+0xb8>
 800d924:	2a00      	cmp	r2, #0
 800d926:	dc09      	bgt.n	800d93c <_gcvt+0xcc>
 800d928:	1928      	adds	r0, r5, r4
 800d92a:	2100      	movs	r1, #0
 800d92c:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800d930:	1ac0      	subs	r0, r0, r3
 800d932:	e00c      	b.n	800d94e <_gcvt+0xde>
 800d934:	4628      	mov	r0, r5
 800d936:	f000 f917 	bl	800db68 <strcpy>
 800d93a:	e7b7      	b.n	800d8ac <_gcvt+0x3c>
 800d93c:	3a01      	subs	r2, #1
 800d93e:	f803 0b01 	strb.w	r0, [r3], #1
 800d942:	9207      	str	r2, [sp, #28]
 800d944:	e7e9      	b.n	800d91a <_gcvt+0xaa>
 800d946:	2101      	movs	r1, #1
 800d948:	f803 cb01 	strb.w	ip, [r3], #1
 800d94c:	3801      	subs	r0, #1
 800d94e:	2a00      	cmp	r2, #0
 800d950:	4614      	mov	r4, r2
 800d952:	dc2e      	bgt.n	800d9b2 <_gcvt+0x142>
 800d954:	b101      	cbz	r1, 800d958 <_gcvt+0xe8>
 800d956:	9207      	str	r2, [sp, #28]
 800d958:	b90e      	cbnz	r6, 800d95e <_gcvt+0xee>
 800d95a:	783a      	ldrb	r2, [r7, #0]
 800d95c:	b332      	cbz	r2, 800d9ac <_gcvt+0x13c>
 800d95e:	42ab      	cmp	r3, r5
 800d960:	bf04      	itt	eq
 800d962:	2230      	moveq	r2, #48	@ 0x30
 800d964:	f803 2b01 	strbeq.w	r2, [r3], #1
 800d968:	222e      	movs	r2, #46	@ 0x2e
 800d96a:	4619      	mov	r1, r3
 800d96c:	f04f 0c00 	mov.w	ip, #0
 800d970:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 800d974:	701a      	strb	r2, [r3, #0]
 800d976:	9a07      	ldr	r2, [sp, #28]
 800d978:	1ad4      	subs	r4, r2, r3
 800d97a:	42cc      	cmn	r4, r1
 800d97c:	d421      	bmi.n	800d9c2 <_gcvt+0x152>
 800d97e:	2a00      	cmp	r2, #0
 800d980:	f1c2 0100 	rsb	r1, r2, #0
 800d984:	bfd4      	ite	le
 800d986:	460c      	movle	r4, r1
 800d988:	2400      	movgt	r4, #0
 800d98a:	3401      	adds	r4, #1
 800d98c:	4423      	add	r3, r4
 800d98e:	f1bc 0f00 	cmp.w	ip, #0
 800d992:	d004      	beq.n	800d99e <_gcvt+0x12e>
 800d994:	2a00      	cmp	r2, #0
 800d996:	bfc8      	it	gt
 800d998:	2100      	movgt	r1, #0
 800d99a:	440a      	add	r2, r1
 800d99c:	9207      	str	r2, [sp, #28]
 800d99e:	1e7a      	subs	r2, r7, #1
 800d9a0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d9a4:	b109      	cbz	r1, 800d9aa <_gcvt+0x13a>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	dc10      	bgt.n	800d9cc <_gcvt+0x15c>
 800d9aa:	b9e6      	cbnz	r6, 800d9e6 <_gcvt+0x176>
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	701a      	strb	r2, [r3, #0]
 800d9b0:	e77c      	b.n	800d8ac <_gcvt+0x3c>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 800d9b8:	dcc5      	bgt.n	800d946 <_gcvt+0xd6>
 800d9ba:	2900      	cmp	r1, #0
 800d9bc:	d0cc      	beq.n	800d958 <_gcvt+0xe8>
 800d9be:	9407      	str	r4, [sp, #28]
 800d9c0:	e7ca      	b.n	800d958 <_gcvt+0xe8>
 800d9c2:	f04f 0c01 	mov.w	ip, #1
 800d9c6:	f801 ef01 	strb.w	lr, [r1, #1]!
 800d9ca:	e7d6      	b.n	800d97a <_gcvt+0x10a>
 800d9cc:	f803 1b01 	strb.w	r1, [r3], #1
 800d9d0:	3801      	subs	r0, #1
 800d9d2:	e7e5      	b.n	800d9a0 <_gcvt+0x130>
 800d9d4:	f802 6b01 	strb.w	r6, [r2], #1
 800d9d8:	1aa1      	subs	r1, r4, r2
 800d9da:	2900      	cmp	r1, #0
 800d9dc:	dcfa      	bgt.n	800d9d4 <_gcvt+0x164>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	bfa8      	it	ge
 800d9e2:	181b      	addge	r3, r3, r0
 800d9e4:	e7e2      	b.n	800d9ac <_gcvt+0x13c>
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	2630      	movs	r6, #48	@ 0x30
 800d9ea:	181c      	adds	r4, r3, r0
 800d9ec:	e7f4      	b.n	800d9d8 <_gcvt+0x168>
 800d9ee:	bf00      	nop
 800d9f0:	eb1c432d 	.word	0xeb1c432d
 800d9f4:	3f1a36e2 	.word	0x3f1a36e2

0800d9f8 <__sflush_r>:
 800d9f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	0716      	lsls	r6, r2, #28
 800da00:	4605      	mov	r5, r0
 800da02:	460c      	mov	r4, r1
 800da04:	d454      	bmi.n	800dab0 <__sflush_r+0xb8>
 800da06:	684b      	ldr	r3, [r1, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	dc02      	bgt.n	800da12 <__sflush_r+0x1a>
 800da0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da0e:	2b00      	cmp	r3, #0
 800da10:	dd48      	ble.n	800daa4 <__sflush_r+0xac>
 800da12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da14:	2e00      	cmp	r6, #0
 800da16:	d045      	beq.n	800daa4 <__sflush_r+0xac>
 800da18:	2300      	movs	r3, #0
 800da1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da1e:	682f      	ldr	r7, [r5, #0]
 800da20:	6a21      	ldr	r1, [r4, #32]
 800da22:	602b      	str	r3, [r5, #0]
 800da24:	d030      	beq.n	800da88 <__sflush_r+0x90>
 800da26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	0759      	lsls	r1, r3, #29
 800da2c:	d505      	bpl.n	800da3a <__sflush_r+0x42>
 800da2e:	6863      	ldr	r3, [r4, #4]
 800da30:	1ad2      	subs	r2, r2, r3
 800da32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da34:	b10b      	cbz	r3, 800da3a <__sflush_r+0x42>
 800da36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da38:	1ad2      	subs	r2, r2, r3
 800da3a:	2300      	movs	r3, #0
 800da3c:	4628      	mov	r0, r5
 800da3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da40:	6a21      	ldr	r1, [r4, #32]
 800da42:	47b0      	blx	r6
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	89a3      	ldrh	r3, [r4, #12]
 800da48:	d106      	bne.n	800da58 <__sflush_r+0x60>
 800da4a:	6829      	ldr	r1, [r5, #0]
 800da4c:	291d      	cmp	r1, #29
 800da4e:	d82b      	bhi.n	800daa8 <__sflush_r+0xb0>
 800da50:	4a28      	ldr	r2, [pc, #160]	@ (800daf4 <__sflush_r+0xfc>)
 800da52:	410a      	asrs	r2, r1
 800da54:	07d6      	lsls	r6, r2, #31
 800da56:	d427      	bmi.n	800daa8 <__sflush_r+0xb0>
 800da58:	2200      	movs	r2, #0
 800da5a:	6062      	str	r2, [r4, #4]
 800da5c:	6922      	ldr	r2, [r4, #16]
 800da5e:	04d9      	lsls	r1, r3, #19
 800da60:	6022      	str	r2, [r4, #0]
 800da62:	d504      	bpl.n	800da6e <__sflush_r+0x76>
 800da64:	1c42      	adds	r2, r0, #1
 800da66:	d101      	bne.n	800da6c <__sflush_r+0x74>
 800da68:	682b      	ldr	r3, [r5, #0]
 800da6a:	b903      	cbnz	r3, 800da6e <__sflush_r+0x76>
 800da6c:	6560      	str	r0, [r4, #84]	@ 0x54
 800da6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da70:	602f      	str	r7, [r5, #0]
 800da72:	b1b9      	cbz	r1, 800daa4 <__sflush_r+0xac>
 800da74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da78:	4299      	cmp	r1, r3
 800da7a:	d002      	beq.n	800da82 <__sflush_r+0x8a>
 800da7c:	4628      	mov	r0, r5
 800da7e:	f7fe fd6f 	bl	800c560 <_free_r>
 800da82:	2300      	movs	r3, #0
 800da84:	6363      	str	r3, [r4, #52]	@ 0x34
 800da86:	e00d      	b.n	800daa4 <__sflush_r+0xac>
 800da88:	2301      	movs	r3, #1
 800da8a:	4628      	mov	r0, r5
 800da8c:	47b0      	blx	r6
 800da8e:	4602      	mov	r2, r0
 800da90:	1c50      	adds	r0, r2, #1
 800da92:	d1c9      	bne.n	800da28 <__sflush_r+0x30>
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d0c6      	beq.n	800da28 <__sflush_r+0x30>
 800da9a:	2b1d      	cmp	r3, #29
 800da9c:	d001      	beq.n	800daa2 <__sflush_r+0xaa>
 800da9e:	2b16      	cmp	r3, #22
 800daa0:	d11d      	bne.n	800dade <__sflush_r+0xe6>
 800daa2:	602f      	str	r7, [r5, #0]
 800daa4:	2000      	movs	r0, #0
 800daa6:	e021      	b.n	800daec <__sflush_r+0xf4>
 800daa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daac:	b21b      	sxth	r3, r3
 800daae:	e01a      	b.n	800dae6 <__sflush_r+0xee>
 800dab0:	690f      	ldr	r7, [r1, #16]
 800dab2:	2f00      	cmp	r7, #0
 800dab4:	d0f6      	beq.n	800daa4 <__sflush_r+0xac>
 800dab6:	0793      	lsls	r3, r2, #30
 800dab8:	bf18      	it	ne
 800daba:	2300      	movne	r3, #0
 800dabc:	680e      	ldr	r6, [r1, #0]
 800dabe:	bf08      	it	eq
 800dac0:	694b      	ldreq	r3, [r1, #20]
 800dac2:	1bf6      	subs	r6, r6, r7
 800dac4:	600f      	str	r7, [r1, #0]
 800dac6:	608b      	str	r3, [r1, #8]
 800dac8:	2e00      	cmp	r6, #0
 800daca:	ddeb      	ble.n	800daa4 <__sflush_r+0xac>
 800dacc:	4633      	mov	r3, r6
 800dace:	463a      	mov	r2, r7
 800dad0:	4628      	mov	r0, r5
 800dad2:	6a21      	ldr	r1, [r4, #32]
 800dad4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dad8:	47e0      	blx	ip
 800dada:	2800      	cmp	r0, #0
 800dadc:	dc07      	bgt.n	800daee <__sflush_r+0xf6>
 800dade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dae6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daee:	4407      	add	r7, r0
 800daf0:	1a36      	subs	r6, r6, r0
 800daf2:	e7e9      	b.n	800dac8 <__sflush_r+0xd0>
 800daf4:	dfbffffe 	.word	0xdfbffffe

0800daf8 <_fflush_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	690b      	ldr	r3, [r1, #16]
 800dafc:	4605      	mov	r5, r0
 800dafe:	460c      	mov	r4, r1
 800db00:	b913      	cbnz	r3, 800db08 <_fflush_r+0x10>
 800db02:	2500      	movs	r5, #0
 800db04:	4628      	mov	r0, r5
 800db06:	bd38      	pop	{r3, r4, r5, pc}
 800db08:	b118      	cbz	r0, 800db12 <_fflush_r+0x1a>
 800db0a:	6a03      	ldr	r3, [r0, #32]
 800db0c:	b90b      	cbnz	r3, 800db12 <_fflush_r+0x1a>
 800db0e:	f7fe fc0b 	bl	800c328 <__sinit>
 800db12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d0f3      	beq.n	800db02 <_fflush_r+0xa>
 800db1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db1c:	07d0      	lsls	r0, r2, #31
 800db1e:	d404      	bmi.n	800db2a <_fflush_r+0x32>
 800db20:	0599      	lsls	r1, r3, #22
 800db22:	d402      	bmi.n	800db2a <_fflush_r+0x32>
 800db24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db26:	f7fe fd04 	bl	800c532 <__retarget_lock_acquire_recursive>
 800db2a:	4628      	mov	r0, r5
 800db2c:	4621      	mov	r1, r4
 800db2e:	f7ff ff63 	bl	800d9f8 <__sflush_r>
 800db32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db34:	4605      	mov	r5, r0
 800db36:	07da      	lsls	r2, r3, #31
 800db38:	d4e4      	bmi.n	800db04 <_fflush_r+0xc>
 800db3a:	89a3      	ldrh	r3, [r4, #12]
 800db3c:	059b      	lsls	r3, r3, #22
 800db3e:	d4e1      	bmi.n	800db04 <_fflush_r+0xc>
 800db40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db42:	f7fe fcf7 	bl	800c534 <__retarget_lock_release_recursive>
 800db46:	e7dd      	b.n	800db04 <_fflush_r+0xc>

0800db48 <_sbrk_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	2300      	movs	r3, #0
 800db4c:	4d05      	ldr	r5, [pc, #20]	@ (800db64 <_sbrk_r+0x1c>)
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	602b      	str	r3, [r5, #0]
 800db54:	f7f4 fa24 	bl	8001fa0 <_sbrk>
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	d102      	bne.n	800db62 <_sbrk_r+0x1a>
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	b103      	cbz	r3, 800db62 <_sbrk_r+0x1a>
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	200018d8 	.word	0x200018d8

0800db68 <strcpy>:
 800db68:	4603      	mov	r3, r0
 800db6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db6e:	f803 2b01 	strb.w	r2, [r3], #1
 800db72:	2a00      	cmp	r2, #0
 800db74:	d1f9      	bne.n	800db6a <strcpy+0x2>
 800db76:	4770      	bx	lr

0800db78 <__assert_func>:
 800db78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db7a:	4614      	mov	r4, r2
 800db7c:	461a      	mov	r2, r3
 800db7e:	4b09      	ldr	r3, [pc, #36]	@ (800dba4 <__assert_func+0x2c>)
 800db80:	4605      	mov	r5, r0
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68d8      	ldr	r0, [r3, #12]
 800db86:	b954      	cbnz	r4, 800db9e <__assert_func+0x26>
 800db88:	4b07      	ldr	r3, [pc, #28]	@ (800dba8 <__assert_func+0x30>)
 800db8a:	461c      	mov	r4, r3
 800db8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db90:	9100      	str	r1, [sp, #0]
 800db92:	462b      	mov	r3, r5
 800db94:	4905      	ldr	r1, [pc, #20]	@ (800dbac <__assert_func+0x34>)
 800db96:	f000 fe7b 	bl	800e890 <fiprintf>
 800db9a:	f000 fe8b 	bl	800e8b4 <abort>
 800db9e:	4b04      	ldr	r3, [pc, #16]	@ (800dbb0 <__assert_func+0x38>)
 800dba0:	e7f4      	b.n	800db8c <__assert_func+0x14>
 800dba2:	bf00      	nop
 800dba4:	200002f4 	.word	0x200002f4
 800dba8:	0800f564 	.word	0x0800f564
 800dbac:	0800f536 	.word	0x0800f536
 800dbb0:	0800f529 	.word	0x0800f529

0800dbb4 <_calloc_r>:
 800dbb4:	b570      	push	{r4, r5, r6, lr}
 800dbb6:	fba1 5402 	umull	r5, r4, r1, r2
 800dbba:	b93c      	cbnz	r4, 800dbcc <_calloc_r+0x18>
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	f7ff f873 	bl	800cca8 <_malloc_r>
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	b928      	cbnz	r0, 800dbd2 <_calloc_r+0x1e>
 800dbc6:	2600      	movs	r6, #0
 800dbc8:	4630      	mov	r0, r6
 800dbca:	bd70      	pop	{r4, r5, r6, pc}
 800dbcc:	220c      	movs	r2, #12
 800dbce:	6002      	str	r2, [r0, #0]
 800dbd0:	e7f9      	b.n	800dbc6 <_calloc_r+0x12>
 800dbd2:	462a      	mov	r2, r5
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	f7fe fc20 	bl	800c41a <memset>
 800dbda:	e7f5      	b.n	800dbc8 <_calloc_r+0x14>

0800dbdc <quorem>:
 800dbdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe0:	6903      	ldr	r3, [r0, #16]
 800dbe2:	690c      	ldr	r4, [r1, #16]
 800dbe4:	4607      	mov	r7, r0
 800dbe6:	42a3      	cmp	r3, r4
 800dbe8:	db7e      	blt.n	800dce8 <quorem+0x10c>
 800dbea:	3c01      	subs	r4, #1
 800dbec:	00a3      	lsls	r3, r4, #2
 800dbee:	f100 0514 	add.w	r5, r0, #20
 800dbf2:	f101 0814 	add.w	r8, r1, #20
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbfc:	9301      	str	r3, [sp, #4]
 800dbfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc06:	3301      	adds	r3, #1
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc12:	d32e      	bcc.n	800dc72 <quorem+0x96>
 800dc14:	f04f 0a00 	mov.w	sl, #0
 800dc18:	46c4      	mov	ip, r8
 800dc1a:	46ae      	mov	lr, r5
 800dc1c:	46d3      	mov	fp, sl
 800dc1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc22:	b298      	uxth	r0, r3
 800dc24:	fb06 a000 	mla	r0, r6, r0, sl
 800dc28:	0c1b      	lsrs	r3, r3, #16
 800dc2a:	0c02      	lsrs	r2, r0, #16
 800dc2c:	fb06 2303 	mla	r3, r6, r3, r2
 800dc30:	f8de 2000 	ldr.w	r2, [lr]
 800dc34:	b280      	uxth	r0, r0
 800dc36:	b292      	uxth	r2, r2
 800dc38:	1a12      	subs	r2, r2, r0
 800dc3a:	445a      	add	r2, fp
 800dc3c:	f8de 0000 	ldr.w	r0, [lr]
 800dc40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dc4e:	b292      	uxth	r2, r2
 800dc50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dc54:	45e1      	cmp	r9, ip
 800dc56:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dc5a:	f84e 2b04 	str.w	r2, [lr], #4
 800dc5e:	d2de      	bcs.n	800dc1e <quorem+0x42>
 800dc60:	9b00      	ldr	r3, [sp, #0]
 800dc62:	58eb      	ldr	r3, [r5, r3]
 800dc64:	b92b      	cbnz	r3, 800dc72 <quorem+0x96>
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	3b04      	subs	r3, #4
 800dc6a:	429d      	cmp	r5, r3
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	d32f      	bcc.n	800dcd0 <quorem+0xf4>
 800dc70:	613c      	str	r4, [r7, #16]
 800dc72:	4638      	mov	r0, r7
 800dc74:	f7ff fb78 	bl	800d368 <__mcmp>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	db25      	blt.n	800dcc8 <quorem+0xec>
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	2000      	movs	r0, #0
 800dc80:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc84:	f8d1 c000 	ldr.w	ip, [r1]
 800dc88:	fa1f fe82 	uxth.w	lr, r2
 800dc8c:	fa1f f38c 	uxth.w	r3, ip
 800dc90:	eba3 030e 	sub.w	r3, r3, lr
 800dc94:	4403      	add	r3, r0
 800dc96:	0c12      	lsrs	r2, r2, #16
 800dc98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dc9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dca6:	45c1      	cmp	r9, r8
 800dca8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dcac:	f841 3b04 	str.w	r3, [r1], #4
 800dcb0:	d2e6      	bcs.n	800dc80 <quorem+0xa4>
 800dcb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcba:	b922      	cbnz	r2, 800dcc6 <quorem+0xea>
 800dcbc:	3b04      	subs	r3, #4
 800dcbe:	429d      	cmp	r5, r3
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	d30b      	bcc.n	800dcdc <quorem+0x100>
 800dcc4:	613c      	str	r4, [r7, #16]
 800dcc6:	3601      	adds	r6, #1
 800dcc8:	4630      	mov	r0, r6
 800dcca:	b003      	add	sp, #12
 800dccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd0:	6812      	ldr	r2, [r2, #0]
 800dcd2:	3b04      	subs	r3, #4
 800dcd4:	2a00      	cmp	r2, #0
 800dcd6:	d1cb      	bne.n	800dc70 <quorem+0x94>
 800dcd8:	3c01      	subs	r4, #1
 800dcda:	e7c6      	b.n	800dc6a <quorem+0x8e>
 800dcdc:	6812      	ldr	r2, [r2, #0]
 800dcde:	3b04      	subs	r3, #4
 800dce0:	2a00      	cmp	r2, #0
 800dce2:	d1ef      	bne.n	800dcc4 <quorem+0xe8>
 800dce4:	3c01      	subs	r4, #1
 800dce6:	e7ea      	b.n	800dcbe <quorem+0xe2>
 800dce8:	2000      	movs	r0, #0
 800dcea:	e7ee      	b.n	800dcca <quorem+0xee>
 800dcec:	0000      	movs	r0, r0
	...

0800dcf0 <_dtoa_r>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	4614      	mov	r4, r2
 800dcf6:	461d      	mov	r5, r3
 800dcf8:	69c7      	ldr	r7, [r0, #28]
 800dcfa:	b097      	sub	sp, #92	@ 0x5c
 800dcfc:	4683      	mov	fp, r0
 800dcfe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800dd02:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800dd04:	b97f      	cbnz	r7, 800dd26 <_dtoa_r+0x36>
 800dd06:	2010      	movs	r0, #16
 800dd08:	f000 fdba 	bl	800e880 <malloc>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd12:	b920      	cbnz	r0, 800dd1e <_dtoa_r+0x2e>
 800dd14:	21ef      	movs	r1, #239	@ 0xef
 800dd16:	4ba8      	ldr	r3, [pc, #672]	@ (800dfb8 <_dtoa_r+0x2c8>)
 800dd18:	48a8      	ldr	r0, [pc, #672]	@ (800dfbc <_dtoa_r+0x2cc>)
 800dd1a:	f7ff ff2d 	bl	800db78 <__assert_func>
 800dd1e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd22:	6007      	str	r7, [r0, #0]
 800dd24:	60c7      	str	r7, [r0, #12]
 800dd26:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd2a:	6819      	ldr	r1, [r3, #0]
 800dd2c:	b159      	cbz	r1, 800dd46 <_dtoa_r+0x56>
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	2301      	movs	r3, #1
 800dd32:	4093      	lsls	r3, r2
 800dd34:	604a      	str	r2, [r1, #4]
 800dd36:	608b      	str	r3, [r1, #8]
 800dd38:	4658      	mov	r0, fp
 800dd3a:	f7ff f893 	bl	800ce64 <_Bfree>
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd44:	601a      	str	r2, [r3, #0]
 800dd46:	1e2b      	subs	r3, r5, #0
 800dd48:	bfaf      	iteee	ge
 800dd4a:	2300      	movge	r3, #0
 800dd4c:	2201      	movlt	r2, #1
 800dd4e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dd52:	9303      	strlt	r3, [sp, #12]
 800dd54:	bfa8      	it	ge
 800dd56:	6033      	strge	r3, [r6, #0]
 800dd58:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dd5c:	4b98      	ldr	r3, [pc, #608]	@ (800dfc0 <_dtoa_r+0x2d0>)
 800dd5e:	bfb8      	it	lt
 800dd60:	6032      	strlt	r2, [r6, #0]
 800dd62:	ea33 0308 	bics.w	r3, r3, r8
 800dd66:	d112      	bne.n	800dd8e <_dtoa_r+0x9e>
 800dd68:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dd6c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dd74:	4323      	orrs	r3, r4
 800dd76:	f000 8550 	beq.w	800e81a <_dtoa_r+0xb2a>
 800dd7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dd7c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800dfc4 <_dtoa_r+0x2d4>
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 8552 	beq.w	800e82a <_dtoa_r+0xb3a>
 800dd86:	f10a 0303 	add.w	r3, sl, #3
 800dd8a:	f000 bd4c 	b.w	800e826 <_dtoa_r+0xb36>
 800dd8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd92:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dd96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f7f2 fe03 	bl	80009a8 <__aeabi_dcmpeq>
 800dda2:	4607      	mov	r7, r0
 800dda4:	b158      	cbz	r0, 800ddbe <_dtoa_r+0xce>
 800dda6:	2301      	movs	r3, #1
 800dda8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ddaa:	6013      	str	r3, [r2, #0]
 800ddac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ddae:	b113      	cbz	r3, 800ddb6 <_dtoa_r+0xc6>
 800ddb0:	4b85      	ldr	r3, [pc, #532]	@ (800dfc8 <_dtoa_r+0x2d8>)
 800ddb2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ddb4:	6013      	str	r3, [r2, #0]
 800ddb6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800dfcc <_dtoa_r+0x2dc>
 800ddba:	f000 bd36 	b.w	800e82a <_dtoa_r+0xb3a>
 800ddbe:	ab14      	add	r3, sp, #80	@ 0x50
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	ab15      	add	r3, sp, #84	@ 0x54
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	4658      	mov	r0, fp
 800ddc8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ddcc:	f7ff fbe4 	bl	800d598 <__d2b>
 800ddd0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ddd4:	4681      	mov	r9, r0
 800ddd6:	2e00      	cmp	r6, #0
 800ddd8:	d077      	beq.n	800deca <_dtoa_r+0x1da>
 800ddda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dde0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dde4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dde8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ddec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ddf0:	9712      	str	r7, [sp, #72]	@ 0x48
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	4b76      	ldr	r3, [pc, #472]	@ (800dfd0 <_dtoa_r+0x2e0>)
 800ddf8:	f7f2 f9b6 	bl	8000168 <__aeabi_dsub>
 800ddfc:	a368      	add	r3, pc, #416	@ (adr r3, 800dfa0 <_dtoa_r+0x2b0>)
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	f7f2 fb69 	bl	80004d8 <__aeabi_dmul>
 800de06:	a368      	add	r3, pc, #416	@ (adr r3, 800dfa8 <_dtoa_r+0x2b8>)
 800de08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0c:	f7f2 f9ae 	bl	800016c <__adddf3>
 800de10:	4604      	mov	r4, r0
 800de12:	4630      	mov	r0, r6
 800de14:	460d      	mov	r5, r1
 800de16:	f7f2 faf5 	bl	8000404 <__aeabi_i2d>
 800de1a:	a365      	add	r3, pc, #404	@ (adr r3, 800dfb0 <_dtoa_r+0x2c0>)
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	f7f2 fb5a 	bl	80004d8 <__aeabi_dmul>
 800de24:	4602      	mov	r2, r0
 800de26:	460b      	mov	r3, r1
 800de28:	4620      	mov	r0, r4
 800de2a:	4629      	mov	r1, r5
 800de2c:	f7f2 f99e 	bl	800016c <__adddf3>
 800de30:	4604      	mov	r4, r0
 800de32:	460d      	mov	r5, r1
 800de34:	f7f2 fdea 	bl	8000a0c <__aeabi_d2iz>
 800de38:	2200      	movs	r2, #0
 800de3a:	4607      	mov	r7, r0
 800de3c:	2300      	movs	r3, #0
 800de3e:	4620      	mov	r0, r4
 800de40:	4629      	mov	r1, r5
 800de42:	f7f2 fdbb 	bl	80009bc <__aeabi_dcmplt>
 800de46:	b140      	cbz	r0, 800de5a <_dtoa_r+0x16a>
 800de48:	4638      	mov	r0, r7
 800de4a:	f7f2 fadb 	bl	8000404 <__aeabi_i2d>
 800de4e:	4622      	mov	r2, r4
 800de50:	462b      	mov	r3, r5
 800de52:	f7f2 fda9 	bl	80009a8 <__aeabi_dcmpeq>
 800de56:	b900      	cbnz	r0, 800de5a <_dtoa_r+0x16a>
 800de58:	3f01      	subs	r7, #1
 800de5a:	2f16      	cmp	r7, #22
 800de5c:	d853      	bhi.n	800df06 <_dtoa_r+0x216>
 800de5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de62:	4b5c      	ldr	r3, [pc, #368]	@ (800dfd4 <_dtoa_r+0x2e4>)
 800de64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6c:	f7f2 fda6 	bl	80009bc <__aeabi_dcmplt>
 800de70:	2800      	cmp	r0, #0
 800de72:	d04a      	beq.n	800df0a <_dtoa_r+0x21a>
 800de74:	2300      	movs	r3, #0
 800de76:	3f01      	subs	r7, #1
 800de78:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800de7c:	1b9b      	subs	r3, r3, r6
 800de7e:	1e5a      	subs	r2, r3, #1
 800de80:	bf46      	itte	mi
 800de82:	f1c3 0801 	rsbmi	r8, r3, #1
 800de86:	2300      	movmi	r3, #0
 800de88:	f04f 0800 	movpl.w	r8, #0
 800de8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800de8e:	bf48      	it	mi
 800de90:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800de92:	2f00      	cmp	r7, #0
 800de94:	db3b      	blt.n	800df0e <_dtoa_r+0x21e>
 800de96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de98:	970e      	str	r7, [sp, #56]	@ 0x38
 800de9a:	443b      	add	r3, r7
 800de9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de9e:	2300      	movs	r3, #0
 800dea0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dea2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dea4:	2b09      	cmp	r3, #9
 800dea6:	d866      	bhi.n	800df76 <_dtoa_r+0x286>
 800dea8:	2b05      	cmp	r3, #5
 800deaa:	bfc4      	itt	gt
 800deac:	3b04      	subgt	r3, #4
 800deae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800deb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800deb2:	bfc8      	it	gt
 800deb4:	2400      	movgt	r4, #0
 800deb6:	f1a3 0302 	sub.w	r3, r3, #2
 800deba:	bfd8      	it	le
 800debc:	2401      	movle	r4, #1
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d864      	bhi.n	800df8c <_dtoa_r+0x29c>
 800dec2:	e8df f003 	tbb	[pc, r3]
 800dec6:	382b      	.short	0x382b
 800dec8:	5636      	.short	0x5636
 800deca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800dece:	441e      	add	r6, r3
 800ded0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ded4:	2b20      	cmp	r3, #32
 800ded6:	bfc1      	itttt	gt
 800ded8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dedc:	fa08 f803 	lslgt.w	r8, r8, r3
 800dee0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dee4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dee8:	bfd6      	itet	le
 800deea:	f1c3 0320 	rsble	r3, r3, #32
 800deee:	ea48 0003 	orrgt.w	r0, r8, r3
 800def2:	fa04 f003 	lslle.w	r0, r4, r3
 800def6:	f7f2 fa75 	bl	80003e4 <__aeabi_ui2d>
 800defa:	2201      	movs	r2, #1
 800defc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df00:	3e01      	subs	r6, #1
 800df02:	9212      	str	r2, [sp, #72]	@ 0x48
 800df04:	e775      	b.n	800ddf2 <_dtoa_r+0x102>
 800df06:	2301      	movs	r3, #1
 800df08:	e7b6      	b.n	800de78 <_dtoa_r+0x188>
 800df0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800df0c:	e7b5      	b.n	800de7a <_dtoa_r+0x18a>
 800df0e:	427b      	negs	r3, r7
 800df10:	930a      	str	r3, [sp, #40]	@ 0x28
 800df12:	2300      	movs	r3, #0
 800df14:	eba8 0807 	sub.w	r8, r8, r7
 800df18:	930e      	str	r3, [sp, #56]	@ 0x38
 800df1a:	e7c2      	b.n	800dea2 <_dtoa_r+0x1b2>
 800df1c:	2300      	movs	r3, #0
 800df1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df22:	2b00      	cmp	r3, #0
 800df24:	dc35      	bgt.n	800df92 <_dtoa_r+0x2a2>
 800df26:	2301      	movs	r3, #1
 800df28:	461a      	mov	r2, r3
 800df2a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800df2e:	9221      	str	r2, [sp, #132]	@ 0x84
 800df30:	e00b      	b.n	800df4a <_dtoa_r+0x25a>
 800df32:	2301      	movs	r3, #1
 800df34:	e7f3      	b.n	800df1e <_dtoa_r+0x22e>
 800df36:	2300      	movs	r3, #0
 800df38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df3c:	18fb      	adds	r3, r7, r3
 800df3e:	9308      	str	r3, [sp, #32]
 800df40:	3301      	adds	r3, #1
 800df42:	2b01      	cmp	r3, #1
 800df44:	9307      	str	r3, [sp, #28]
 800df46:	bfb8      	it	lt
 800df48:	2301      	movlt	r3, #1
 800df4a:	2100      	movs	r1, #0
 800df4c:	2204      	movs	r2, #4
 800df4e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800df52:	f102 0514 	add.w	r5, r2, #20
 800df56:	429d      	cmp	r5, r3
 800df58:	d91f      	bls.n	800df9a <_dtoa_r+0x2aa>
 800df5a:	6041      	str	r1, [r0, #4]
 800df5c:	4658      	mov	r0, fp
 800df5e:	f7fe ff41 	bl	800cde4 <_Balloc>
 800df62:	4682      	mov	sl, r0
 800df64:	2800      	cmp	r0, #0
 800df66:	d139      	bne.n	800dfdc <_dtoa_r+0x2ec>
 800df68:	4602      	mov	r2, r0
 800df6a:	f240 11af 	movw	r1, #431	@ 0x1af
 800df6e:	4b1a      	ldr	r3, [pc, #104]	@ (800dfd8 <_dtoa_r+0x2e8>)
 800df70:	e6d2      	b.n	800dd18 <_dtoa_r+0x28>
 800df72:	2301      	movs	r3, #1
 800df74:	e7e0      	b.n	800df38 <_dtoa_r+0x248>
 800df76:	2401      	movs	r4, #1
 800df78:	2300      	movs	r3, #0
 800df7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df7c:	9320      	str	r3, [sp, #128]	@ 0x80
 800df7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df82:	2200      	movs	r2, #0
 800df84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800df88:	2312      	movs	r3, #18
 800df8a:	e7d0      	b.n	800df2e <_dtoa_r+0x23e>
 800df8c:	2301      	movs	r3, #1
 800df8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df90:	e7f5      	b.n	800df7e <_dtoa_r+0x28e>
 800df92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800df98:	e7d7      	b.n	800df4a <_dtoa_r+0x25a>
 800df9a:	3101      	adds	r1, #1
 800df9c:	0052      	lsls	r2, r2, #1
 800df9e:	e7d8      	b.n	800df52 <_dtoa_r+0x262>
 800dfa0:	636f4361 	.word	0x636f4361
 800dfa4:	3fd287a7 	.word	0x3fd287a7
 800dfa8:	8b60c8b3 	.word	0x8b60c8b3
 800dfac:	3fc68a28 	.word	0x3fc68a28
 800dfb0:	509f79fb 	.word	0x509f79fb
 800dfb4:	3fd34413 	.word	0x3fd34413
 800dfb8:	0800f2b9 	.word	0x0800f2b9
 800dfbc:	0800f574 	.word	0x0800f574
 800dfc0:	7ff00000 	.word	0x7ff00000
 800dfc4:	0800f56e 	.word	0x0800f56e
 800dfc8:	0800f573 	.word	0x0800f573
 800dfcc:	0800f572 	.word	0x0800f572
 800dfd0:	3ff80000 	.word	0x3ff80000
 800dfd4:	0800f360 	.word	0x0800f360
 800dfd8:	0800f248 	.word	0x0800f248
 800dfdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dfe0:	6018      	str	r0, [r3, #0]
 800dfe2:	9b07      	ldr	r3, [sp, #28]
 800dfe4:	2b0e      	cmp	r3, #14
 800dfe6:	f200 80a4 	bhi.w	800e132 <_dtoa_r+0x442>
 800dfea:	2c00      	cmp	r4, #0
 800dfec:	f000 80a1 	beq.w	800e132 <_dtoa_r+0x442>
 800dff0:	2f00      	cmp	r7, #0
 800dff2:	dd33      	ble.n	800e05c <_dtoa_r+0x36c>
 800dff4:	4b86      	ldr	r3, [pc, #536]	@ (800e210 <_dtoa_r+0x520>)
 800dff6:	f007 020f 	and.w	r2, r7, #15
 800dffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dffe:	05f8      	lsls	r0, r7, #23
 800e000:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e004:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e00c:	d516      	bpl.n	800e03c <_dtoa_r+0x34c>
 800e00e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e012:	4b80      	ldr	r3, [pc, #512]	@ (800e214 <_dtoa_r+0x524>)
 800e014:	2603      	movs	r6, #3
 800e016:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e01a:	f7f2 fb87 	bl	800072c <__aeabi_ddiv>
 800e01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e022:	f004 040f 	and.w	r4, r4, #15
 800e026:	4d7b      	ldr	r5, [pc, #492]	@ (800e214 <_dtoa_r+0x524>)
 800e028:	b954      	cbnz	r4, 800e040 <_dtoa_r+0x350>
 800e02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e032:	f7f2 fb7b 	bl	800072c <__aeabi_ddiv>
 800e036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e03a:	e028      	b.n	800e08e <_dtoa_r+0x39e>
 800e03c:	2602      	movs	r6, #2
 800e03e:	e7f2      	b.n	800e026 <_dtoa_r+0x336>
 800e040:	07e1      	lsls	r1, r4, #31
 800e042:	d508      	bpl.n	800e056 <_dtoa_r+0x366>
 800e044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e04c:	f7f2 fa44 	bl	80004d8 <__aeabi_dmul>
 800e050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e054:	3601      	adds	r6, #1
 800e056:	1064      	asrs	r4, r4, #1
 800e058:	3508      	adds	r5, #8
 800e05a:	e7e5      	b.n	800e028 <_dtoa_r+0x338>
 800e05c:	f000 80d2 	beq.w	800e204 <_dtoa_r+0x514>
 800e060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e064:	427c      	negs	r4, r7
 800e066:	4b6a      	ldr	r3, [pc, #424]	@ (800e210 <_dtoa_r+0x520>)
 800e068:	f004 020f 	and.w	r2, r4, #15
 800e06c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	f7f2 fa30 	bl	80004d8 <__aeabi_dmul>
 800e078:	2602      	movs	r6, #2
 800e07a:	2300      	movs	r3, #0
 800e07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e080:	4d64      	ldr	r5, [pc, #400]	@ (800e214 <_dtoa_r+0x524>)
 800e082:	1124      	asrs	r4, r4, #4
 800e084:	2c00      	cmp	r4, #0
 800e086:	f040 80b2 	bne.w	800e1ee <_dtoa_r+0x4fe>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1d3      	bne.n	800e036 <_dtoa_r+0x346>
 800e08e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e092:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 80b7 	beq.w	800e208 <_dtoa_r+0x518>
 800e09a:	2200      	movs	r2, #0
 800e09c:	4620      	mov	r0, r4
 800e09e:	4629      	mov	r1, r5
 800e0a0:	4b5d      	ldr	r3, [pc, #372]	@ (800e218 <_dtoa_r+0x528>)
 800e0a2:	f7f2 fc8b 	bl	80009bc <__aeabi_dcmplt>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f000 80ae 	beq.w	800e208 <_dtoa_r+0x518>
 800e0ac:	9b07      	ldr	r3, [sp, #28]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 80aa 	beq.w	800e208 <_dtoa_r+0x518>
 800e0b4:	9b08      	ldr	r3, [sp, #32]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	dd37      	ble.n	800e12a <_dtoa_r+0x43a>
 800e0ba:	1e7b      	subs	r3, r7, #1
 800e0bc:	4620      	mov	r0, r4
 800e0be:	9304      	str	r3, [sp, #16]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	4b55      	ldr	r3, [pc, #340]	@ (800e21c <_dtoa_r+0x52c>)
 800e0c6:	f7f2 fa07 	bl	80004d8 <__aeabi_dmul>
 800e0ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0ce:	9c08      	ldr	r4, [sp, #32]
 800e0d0:	3601      	adds	r6, #1
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f7f2 f996 	bl	8000404 <__aeabi_i2d>
 800e0d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0dc:	f7f2 f9fc 	bl	80004d8 <__aeabi_dmul>
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	4b4f      	ldr	r3, [pc, #316]	@ (800e220 <_dtoa_r+0x530>)
 800e0e4:	f7f2 f842 	bl	800016c <__adddf3>
 800e0e8:	4605      	mov	r5, r0
 800e0ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e0ee:	2c00      	cmp	r4, #0
 800e0f0:	f040 809a 	bne.w	800e228 <_dtoa_r+0x538>
 800e0f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	4b4a      	ldr	r3, [pc, #296]	@ (800e224 <_dtoa_r+0x534>)
 800e0fc:	f7f2 f834 	bl	8000168 <__aeabi_dsub>
 800e100:	4602      	mov	r2, r0
 800e102:	460b      	mov	r3, r1
 800e104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e108:	462a      	mov	r2, r5
 800e10a:	4633      	mov	r3, r6
 800e10c:	f7f2 fc74 	bl	80009f8 <__aeabi_dcmpgt>
 800e110:	2800      	cmp	r0, #0
 800e112:	f040 828e 	bne.w	800e632 <_dtoa_r+0x942>
 800e116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e11a:	462a      	mov	r2, r5
 800e11c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e120:	f7f2 fc4c 	bl	80009bc <__aeabi_dcmplt>
 800e124:	2800      	cmp	r0, #0
 800e126:	f040 8127 	bne.w	800e378 <_dtoa_r+0x688>
 800e12a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e12e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e132:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e134:	2b00      	cmp	r3, #0
 800e136:	f2c0 8163 	blt.w	800e400 <_dtoa_r+0x710>
 800e13a:	2f0e      	cmp	r7, #14
 800e13c:	f300 8160 	bgt.w	800e400 <_dtoa_r+0x710>
 800e140:	4b33      	ldr	r3, [pc, #204]	@ (800e210 <_dtoa_r+0x520>)
 800e142:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e146:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e14a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e14e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e150:	2b00      	cmp	r3, #0
 800e152:	da03      	bge.n	800e15c <_dtoa_r+0x46c>
 800e154:	9b07      	ldr	r3, [sp, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f340 8100 	ble.w	800e35c <_dtoa_r+0x66c>
 800e15c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e160:	4656      	mov	r6, sl
 800e162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e166:	4620      	mov	r0, r4
 800e168:	4629      	mov	r1, r5
 800e16a:	f7f2 fadf 	bl	800072c <__aeabi_ddiv>
 800e16e:	f7f2 fc4d 	bl	8000a0c <__aeabi_d2iz>
 800e172:	4680      	mov	r8, r0
 800e174:	f7f2 f946 	bl	8000404 <__aeabi_i2d>
 800e178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e17c:	f7f2 f9ac 	bl	80004d8 <__aeabi_dmul>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4620      	mov	r0, r4
 800e186:	4629      	mov	r1, r5
 800e188:	f7f1 ffee 	bl	8000168 <__aeabi_dsub>
 800e18c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e190:	9d07      	ldr	r5, [sp, #28]
 800e192:	f806 4b01 	strb.w	r4, [r6], #1
 800e196:	eba6 040a 	sub.w	r4, r6, sl
 800e19a:	42a5      	cmp	r5, r4
 800e19c:	4602      	mov	r2, r0
 800e19e:	460b      	mov	r3, r1
 800e1a0:	f040 8116 	bne.w	800e3d0 <_dtoa_r+0x6e0>
 800e1a4:	f7f1 ffe2 	bl	800016c <__adddf3>
 800e1a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	f7f2 fc22 	bl	80009f8 <__aeabi_dcmpgt>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	f040 80f8 	bne.w	800e3aa <_dtoa_r+0x6ba>
 800e1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 fbf1 	bl	80009a8 <__aeabi_dcmpeq>
 800e1c6:	b118      	cbz	r0, 800e1d0 <_dtoa_r+0x4e0>
 800e1c8:	f018 0f01 	tst.w	r8, #1
 800e1cc:	f040 80ed 	bne.w	800e3aa <_dtoa_r+0x6ba>
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	4658      	mov	r0, fp
 800e1d4:	f7fe fe46 	bl	800ce64 <_Bfree>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	7033      	strb	r3, [r6, #0]
 800e1dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e1de:	3701      	adds	r7, #1
 800e1e0:	601f      	str	r7, [r3, #0]
 800e1e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 8320 	beq.w	800e82a <_dtoa_r+0xb3a>
 800e1ea:	601e      	str	r6, [r3, #0]
 800e1ec:	e31d      	b.n	800e82a <_dtoa_r+0xb3a>
 800e1ee:	07e2      	lsls	r2, r4, #31
 800e1f0:	d505      	bpl.n	800e1fe <_dtoa_r+0x50e>
 800e1f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1f6:	f7f2 f96f 	bl	80004d8 <__aeabi_dmul>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	3601      	adds	r6, #1
 800e1fe:	1064      	asrs	r4, r4, #1
 800e200:	3508      	adds	r5, #8
 800e202:	e73f      	b.n	800e084 <_dtoa_r+0x394>
 800e204:	2602      	movs	r6, #2
 800e206:	e742      	b.n	800e08e <_dtoa_r+0x39e>
 800e208:	9c07      	ldr	r4, [sp, #28]
 800e20a:	9704      	str	r7, [sp, #16]
 800e20c:	e761      	b.n	800e0d2 <_dtoa_r+0x3e2>
 800e20e:	bf00      	nop
 800e210:	0800f360 	.word	0x0800f360
 800e214:	0800f338 	.word	0x0800f338
 800e218:	3ff00000 	.word	0x3ff00000
 800e21c:	40240000 	.word	0x40240000
 800e220:	401c0000 	.word	0x401c0000
 800e224:	40140000 	.word	0x40140000
 800e228:	4b70      	ldr	r3, [pc, #448]	@ (800e3ec <_dtoa_r+0x6fc>)
 800e22a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e22c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e230:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e234:	4454      	add	r4, sl
 800e236:	2900      	cmp	r1, #0
 800e238:	d045      	beq.n	800e2c6 <_dtoa_r+0x5d6>
 800e23a:	2000      	movs	r0, #0
 800e23c:	496c      	ldr	r1, [pc, #432]	@ (800e3f0 <_dtoa_r+0x700>)
 800e23e:	f7f2 fa75 	bl	800072c <__aeabi_ddiv>
 800e242:	4633      	mov	r3, r6
 800e244:	462a      	mov	r2, r5
 800e246:	f7f1 ff8f 	bl	8000168 <__aeabi_dsub>
 800e24a:	4656      	mov	r6, sl
 800e24c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e254:	f7f2 fbda 	bl	8000a0c <__aeabi_d2iz>
 800e258:	4605      	mov	r5, r0
 800e25a:	f7f2 f8d3 	bl	8000404 <__aeabi_i2d>
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e266:	f7f1 ff7f 	bl	8000168 <__aeabi_dsub>
 800e26a:	4602      	mov	r2, r0
 800e26c:	460b      	mov	r3, r1
 800e26e:	3530      	adds	r5, #48	@ 0x30
 800e270:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e274:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e278:	f806 5b01 	strb.w	r5, [r6], #1
 800e27c:	f7f2 fb9e 	bl	80009bc <__aeabi_dcmplt>
 800e280:	2800      	cmp	r0, #0
 800e282:	d163      	bne.n	800e34c <_dtoa_r+0x65c>
 800e284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e288:	2000      	movs	r0, #0
 800e28a:	495a      	ldr	r1, [pc, #360]	@ (800e3f4 <_dtoa_r+0x704>)
 800e28c:	f7f1 ff6c 	bl	8000168 <__aeabi_dsub>
 800e290:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e294:	f7f2 fb92 	bl	80009bc <__aeabi_dcmplt>
 800e298:	2800      	cmp	r0, #0
 800e29a:	f040 8087 	bne.w	800e3ac <_dtoa_r+0x6bc>
 800e29e:	42a6      	cmp	r6, r4
 800e2a0:	f43f af43 	beq.w	800e12a <_dtoa_r+0x43a>
 800e2a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	4b53      	ldr	r3, [pc, #332]	@ (800e3f8 <_dtoa_r+0x708>)
 800e2ac:	f7f2 f914 	bl	80004d8 <__aeabi_dmul>
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ba:	4b4f      	ldr	r3, [pc, #316]	@ (800e3f8 <_dtoa_r+0x708>)
 800e2bc:	f7f2 f90c 	bl	80004d8 <__aeabi_dmul>
 800e2c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2c4:	e7c4      	b.n	800e250 <_dtoa_r+0x560>
 800e2c6:	4631      	mov	r1, r6
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f7f2 f905 	bl	80004d8 <__aeabi_dmul>
 800e2ce:	4656      	mov	r6, sl
 800e2d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2d4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2da:	f7f2 fb97 	bl	8000a0c <__aeabi_d2iz>
 800e2de:	4605      	mov	r5, r0
 800e2e0:	f7f2 f890 	bl	8000404 <__aeabi_i2d>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ec:	f7f1 ff3c 	bl	8000168 <__aeabi_dsub>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	3530      	adds	r5, #48	@ 0x30
 800e2f6:	f806 5b01 	strb.w	r5, [r6], #1
 800e2fa:	42a6      	cmp	r6, r4
 800e2fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e300:	f04f 0200 	mov.w	r2, #0
 800e304:	d124      	bne.n	800e350 <_dtoa_r+0x660>
 800e306:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e30a:	4b39      	ldr	r3, [pc, #228]	@ (800e3f0 <_dtoa_r+0x700>)
 800e30c:	f7f1 ff2e 	bl	800016c <__adddf3>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e318:	f7f2 fb6e 	bl	80009f8 <__aeabi_dcmpgt>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	d145      	bne.n	800e3ac <_dtoa_r+0x6bc>
 800e320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e324:	2000      	movs	r0, #0
 800e326:	4932      	ldr	r1, [pc, #200]	@ (800e3f0 <_dtoa_r+0x700>)
 800e328:	f7f1 ff1e 	bl	8000168 <__aeabi_dsub>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e334:	f7f2 fb42 	bl	80009bc <__aeabi_dcmplt>
 800e338:	2800      	cmp	r0, #0
 800e33a:	f43f aef6 	beq.w	800e12a <_dtoa_r+0x43a>
 800e33e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e340:	1e73      	subs	r3, r6, #1
 800e342:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e344:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e348:	2b30      	cmp	r3, #48	@ 0x30
 800e34a:	d0f8      	beq.n	800e33e <_dtoa_r+0x64e>
 800e34c:	9f04      	ldr	r7, [sp, #16]
 800e34e:	e73f      	b.n	800e1d0 <_dtoa_r+0x4e0>
 800e350:	4b29      	ldr	r3, [pc, #164]	@ (800e3f8 <_dtoa_r+0x708>)
 800e352:	f7f2 f8c1 	bl	80004d8 <__aeabi_dmul>
 800e356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e35a:	e7bc      	b.n	800e2d6 <_dtoa_r+0x5e6>
 800e35c:	d10c      	bne.n	800e378 <_dtoa_r+0x688>
 800e35e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e362:	2200      	movs	r2, #0
 800e364:	4b25      	ldr	r3, [pc, #148]	@ (800e3fc <_dtoa_r+0x70c>)
 800e366:	f7f2 f8b7 	bl	80004d8 <__aeabi_dmul>
 800e36a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e36e:	f7f2 fb39 	bl	80009e4 <__aeabi_dcmpge>
 800e372:	2800      	cmp	r0, #0
 800e374:	f000 815b 	beq.w	800e62e <_dtoa_r+0x93e>
 800e378:	2400      	movs	r4, #0
 800e37a:	4625      	mov	r5, r4
 800e37c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e37e:	4656      	mov	r6, sl
 800e380:	43db      	mvns	r3, r3
 800e382:	9304      	str	r3, [sp, #16]
 800e384:	2700      	movs	r7, #0
 800e386:	4621      	mov	r1, r4
 800e388:	4658      	mov	r0, fp
 800e38a:	f7fe fd6b 	bl	800ce64 <_Bfree>
 800e38e:	2d00      	cmp	r5, #0
 800e390:	d0dc      	beq.n	800e34c <_dtoa_r+0x65c>
 800e392:	b12f      	cbz	r7, 800e3a0 <_dtoa_r+0x6b0>
 800e394:	42af      	cmp	r7, r5
 800e396:	d003      	beq.n	800e3a0 <_dtoa_r+0x6b0>
 800e398:	4639      	mov	r1, r7
 800e39a:	4658      	mov	r0, fp
 800e39c:	f7fe fd62 	bl	800ce64 <_Bfree>
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4658      	mov	r0, fp
 800e3a4:	f7fe fd5e 	bl	800ce64 <_Bfree>
 800e3a8:	e7d0      	b.n	800e34c <_dtoa_r+0x65c>
 800e3aa:	9704      	str	r7, [sp, #16]
 800e3ac:	4633      	mov	r3, r6
 800e3ae:	461e      	mov	r6, r3
 800e3b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3b4:	2a39      	cmp	r2, #57	@ 0x39
 800e3b6:	d107      	bne.n	800e3c8 <_dtoa_r+0x6d8>
 800e3b8:	459a      	cmp	sl, r3
 800e3ba:	d1f8      	bne.n	800e3ae <_dtoa_r+0x6be>
 800e3bc:	9a04      	ldr	r2, [sp, #16]
 800e3be:	3201      	adds	r2, #1
 800e3c0:	9204      	str	r2, [sp, #16]
 800e3c2:	2230      	movs	r2, #48	@ 0x30
 800e3c4:	f88a 2000 	strb.w	r2, [sl]
 800e3c8:	781a      	ldrb	r2, [r3, #0]
 800e3ca:	3201      	adds	r2, #1
 800e3cc:	701a      	strb	r2, [r3, #0]
 800e3ce:	e7bd      	b.n	800e34c <_dtoa_r+0x65c>
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	4b09      	ldr	r3, [pc, #36]	@ (800e3f8 <_dtoa_r+0x708>)
 800e3d4:	f7f2 f880 	bl	80004d8 <__aeabi_dmul>
 800e3d8:	2200      	movs	r2, #0
 800e3da:	2300      	movs	r3, #0
 800e3dc:	4604      	mov	r4, r0
 800e3de:	460d      	mov	r5, r1
 800e3e0:	f7f2 fae2 	bl	80009a8 <__aeabi_dcmpeq>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f43f aebc 	beq.w	800e162 <_dtoa_r+0x472>
 800e3ea:	e6f1      	b.n	800e1d0 <_dtoa_r+0x4e0>
 800e3ec:	0800f360 	.word	0x0800f360
 800e3f0:	3fe00000 	.word	0x3fe00000
 800e3f4:	3ff00000 	.word	0x3ff00000
 800e3f8:	40240000 	.word	0x40240000
 800e3fc:	40140000 	.word	0x40140000
 800e400:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e402:	2a00      	cmp	r2, #0
 800e404:	f000 80db 	beq.w	800e5be <_dtoa_r+0x8ce>
 800e408:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e40a:	2a01      	cmp	r2, #1
 800e40c:	f300 80bf 	bgt.w	800e58e <_dtoa_r+0x89e>
 800e410:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e412:	2a00      	cmp	r2, #0
 800e414:	f000 80b7 	beq.w	800e586 <_dtoa_r+0x896>
 800e418:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e41c:	4646      	mov	r6, r8
 800e41e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e420:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e422:	2101      	movs	r1, #1
 800e424:	441a      	add	r2, r3
 800e426:	4658      	mov	r0, fp
 800e428:	4498      	add	r8, r3
 800e42a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e42c:	f7fe fe18 	bl	800d060 <__i2b>
 800e430:	4605      	mov	r5, r0
 800e432:	b15e      	cbz	r6, 800e44c <_dtoa_r+0x75c>
 800e434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e436:	2b00      	cmp	r3, #0
 800e438:	dd08      	ble.n	800e44c <_dtoa_r+0x75c>
 800e43a:	42b3      	cmp	r3, r6
 800e43c:	bfa8      	it	ge
 800e43e:	4633      	movge	r3, r6
 800e440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e442:	eba8 0803 	sub.w	r8, r8, r3
 800e446:	1af6      	subs	r6, r6, r3
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e44c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e44e:	b1f3      	cbz	r3, 800e48e <_dtoa_r+0x79e>
 800e450:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 80b7 	beq.w	800e5c6 <_dtoa_r+0x8d6>
 800e458:	b18c      	cbz	r4, 800e47e <_dtoa_r+0x78e>
 800e45a:	4629      	mov	r1, r5
 800e45c:	4622      	mov	r2, r4
 800e45e:	4658      	mov	r0, fp
 800e460:	f7fe febc 	bl	800d1dc <__pow5mult>
 800e464:	464a      	mov	r2, r9
 800e466:	4601      	mov	r1, r0
 800e468:	4605      	mov	r5, r0
 800e46a:	4658      	mov	r0, fp
 800e46c:	f7fe fe0e 	bl	800d08c <__multiply>
 800e470:	4649      	mov	r1, r9
 800e472:	9004      	str	r0, [sp, #16]
 800e474:	4658      	mov	r0, fp
 800e476:	f7fe fcf5 	bl	800ce64 <_Bfree>
 800e47a:	9b04      	ldr	r3, [sp, #16]
 800e47c:	4699      	mov	r9, r3
 800e47e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e480:	1b1a      	subs	r2, r3, r4
 800e482:	d004      	beq.n	800e48e <_dtoa_r+0x79e>
 800e484:	4649      	mov	r1, r9
 800e486:	4658      	mov	r0, fp
 800e488:	f7fe fea8 	bl	800d1dc <__pow5mult>
 800e48c:	4681      	mov	r9, r0
 800e48e:	2101      	movs	r1, #1
 800e490:	4658      	mov	r0, fp
 800e492:	f7fe fde5 	bl	800d060 <__i2b>
 800e496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e498:	4604      	mov	r4, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f000 81c9 	beq.w	800e832 <_dtoa_r+0xb42>
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	4658      	mov	r0, fp
 800e4a6:	f7fe fe99 	bl	800d1dc <__pow5mult>
 800e4aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	f300 808f 	bgt.w	800e5d2 <_dtoa_r+0x8e2>
 800e4b4:	9b02      	ldr	r3, [sp, #8]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f040 8087 	bne.w	800e5ca <_dtoa_r+0x8da>
 800e4bc:	9b03      	ldr	r3, [sp, #12]
 800e4be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f040 8083 	bne.w	800e5ce <_dtoa_r+0x8de>
 800e4c8:	9b03      	ldr	r3, [sp, #12]
 800e4ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4ce:	0d1b      	lsrs	r3, r3, #20
 800e4d0:	051b      	lsls	r3, r3, #20
 800e4d2:	b12b      	cbz	r3, 800e4e0 <_dtoa_r+0x7f0>
 800e4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d6:	f108 0801 	add.w	r8, r8, #1
 800e4da:	3301      	adds	r3, #1
 800e4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4de:	2301      	movs	r3, #1
 800e4e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 81aa 	beq.w	800e83e <_dtoa_r+0xb4e>
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4f0:	6918      	ldr	r0, [r3, #16]
 800e4f2:	f7fe fd69 	bl	800cfc8 <__hi0bits>
 800e4f6:	f1c0 0020 	rsb	r0, r0, #32
 800e4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4fc:	4418      	add	r0, r3
 800e4fe:	f010 001f 	ands.w	r0, r0, #31
 800e502:	d071      	beq.n	800e5e8 <_dtoa_r+0x8f8>
 800e504:	f1c0 0320 	rsb	r3, r0, #32
 800e508:	2b04      	cmp	r3, #4
 800e50a:	dd65      	ble.n	800e5d8 <_dtoa_r+0x8e8>
 800e50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e50e:	f1c0 001c 	rsb	r0, r0, #28
 800e512:	4403      	add	r3, r0
 800e514:	4480      	add	r8, r0
 800e516:	4406      	add	r6, r0
 800e518:	9309      	str	r3, [sp, #36]	@ 0x24
 800e51a:	f1b8 0f00 	cmp.w	r8, #0
 800e51e:	dd05      	ble.n	800e52c <_dtoa_r+0x83c>
 800e520:	4649      	mov	r1, r9
 800e522:	4642      	mov	r2, r8
 800e524:	4658      	mov	r0, fp
 800e526:	f7fe feb3 	bl	800d290 <__lshift>
 800e52a:	4681      	mov	r9, r0
 800e52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e52e:	2b00      	cmp	r3, #0
 800e530:	dd05      	ble.n	800e53e <_dtoa_r+0x84e>
 800e532:	4621      	mov	r1, r4
 800e534:	461a      	mov	r2, r3
 800e536:	4658      	mov	r0, fp
 800e538:	f7fe feaa 	bl	800d290 <__lshift>
 800e53c:	4604      	mov	r4, r0
 800e53e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e540:	2b00      	cmp	r3, #0
 800e542:	d053      	beq.n	800e5ec <_dtoa_r+0x8fc>
 800e544:	4621      	mov	r1, r4
 800e546:	4648      	mov	r0, r9
 800e548:	f7fe ff0e 	bl	800d368 <__mcmp>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	da4d      	bge.n	800e5ec <_dtoa_r+0x8fc>
 800e550:	1e7b      	subs	r3, r7, #1
 800e552:	4649      	mov	r1, r9
 800e554:	9304      	str	r3, [sp, #16]
 800e556:	220a      	movs	r2, #10
 800e558:	2300      	movs	r3, #0
 800e55a:	4658      	mov	r0, fp
 800e55c:	f7fe fca4 	bl	800cea8 <__multadd>
 800e560:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e562:	4681      	mov	r9, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	f000 816c 	beq.w	800e842 <_dtoa_r+0xb52>
 800e56a:	2300      	movs	r3, #0
 800e56c:	4629      	mov	r1, r5
 800e56e:	220a      	movs	r2, #10
 800e570:	4658      	mov	r0, fp
 800e572:	f7fe fc99 	bl	800cea8 <__multadd>
 800e576:	9b08      	ldr	r3, [sp, #32]
 800e578:	4605      	mov	r5, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	dc61      	bgt.n	800e642 <_dtoa_r+0x952>
 800e57e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e580:	2b02      	cmp	r3, #2
 800e582:	dc3b      	bgt.n	800e5fc <_dtoa_r+0x90c>
 800e584:	e05d      	b.n	800e642 <_dtoa_r+0x952>
 800e586:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e588:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e58c:	e746      	b.n	800e41c <_dtoa_r+0x72c>
 800e58e:	9b07      	ldr	r3, [sp, #28]
 800e590:	1e5c      	subs	r4, r3, #1
 800e592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e594:	42a3      	cmp	r3, r4
 800e596:	bfbf      	itttt	lt
 800e598:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e59a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800e59c:	1ae3      	sublt	r3, r4, r3
 800e59e:	18d2      	addlt	r2, r2, r3
 800e5a0:	bfa8      	it	ge
 800e5a2:	1b1c      	subge	r4, r3, r4
 800e5a4:	9b07      	ldr	r3, [sp, #28]
 800e5a6:	bfbe      	ittt	lt
 800e5a8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e5aa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800e5ac:	2400      	movlt	r4, #0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	bfb5      	itete	lt
 800e5b2:	eba8 0603 	sublt.w	r6, r8, r3
 800e5b6:	4646      	movge	r6, r8
 800e5b8:	2300      	movlt	r3, #0
 800e5ba:	9b07      	ldrge	r3, [sp, #28]
 800e5bc:	e730      	b.n	800e420 <_dtoa_r+0x730>
 800e5be:	4646      	mov	r6, r8
 800e5c0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e5c2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e5c4:	e735      	b.n	800e432 <_dtoa_r+0x742>
 800e5c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5c8:	e75c      	b.n	800e484 <_dtoa_r+0x794>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e788      	b.n	800e4e0 <_dtoa_r+0x7f0>
 800e5ce:	9b02      	ldr	r3, [sp, #8]
 800e5d0:	e786      	b.n	800e4e0 <_dtoa_r+0x7f0>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5d6:	e788      	b.n	800e4ea <_dtoa_r+0x7fa>
 800e5d8:	d09f      	beq.n	800e51a <_dtoa_r+0x82a>
 800e5da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5dc:	331c      	adds	r3, #28
 800e5de:	441a      	add	r2, r3
 800e5e0:	4498      	add	r8, r3
 800e5e2:	441e      	add	r6, r3
 800e5e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5e6:	e798      	b.n	800e51a <_dtoa_r+0x82a>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	e7f6      	b.n	800e5da <_dtoa_r+0x8ea>
 800e5ec:	9b07      	ldr	r3, [sp, #28]
 800e5ee:	9704      	str	r7, [sp, #16]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dc20      	bgt.n	800e636 <_dtoa_r+0x946>
 800e5f4:	9308      	str	r3, [sp, #32]
 800e5f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	dd1e      	ble.n	800e63a <_dtoa_r+0x94a>
 800e5fc:	9b08      	ldr	r3, [sp, #32]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f47f aebc 	bne.w	800e37c <_dtoa_r+0x68c>
 800e604:	4621      	mov	r1, r4
 800e606:	2205      	movs	r2, #5
 800e608:	4658      	mov	r0, fp
 800e60a:	f7fe fc4d 	bl	800cea8 <__multadd>
 800e60e:	4601      	mov	r1, r0
 800e610:	4604      	mov	r4, r0
 800e612:	4648      	mov	r0, r9
 800e614:	f7fe fea8 	bl	800d368 <__mcmp>
 800e618:	2800      	cmp	r0, #0
 800e61a:	f77f aeaf 	ble.w	800e37c <_dtoa_r+0x68c>
 800e61e:	2331      	movs	r3, #49	@ 0x31
 800e620:	4656      	mov	r6, sl
 800e622:	f806 3b01 	strb.w	r3, [r6], #1
 800e626:	9b04      	ldr	r3, [sp, #16]
 800e628:	3301      	adds	r3, #1
 800e62a:	9304      	str	r3, [sp, #16]
 800e62c:	e6aa      	b.n	800e384 <_dtoa_r+0x694>
 800e62e:	9c07      	ldr	r4, [sp, #28]
 800e630:	9704      	str	r7, [sp, #16]
 800e632:	4625      	mov	r5, r4
 800e634:	e7f3      	b.n	800e61e <_dtoa_r+0x92e>
 800e636:	9b07      	ldr	r3, [sp, #28]
 800e638:	9308      	str	r3, [sp, #32]
 800e63a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f000 8104 	beq.w	800e84a <_dtoa_r+0xb5a>
 800e642:	2e00      	cmp	r6, #0
 800e644:	dd05      	ble.n	800e652 <_dtoa_r+0x962>
 800e646:	4629      	mov	r1, r5
 800e648:	4632      	mov	r2, r6
 800e64a:	4658      	mov	r0, fp
 800e64c:	f7fe fe20 	bl	800d290 <__lshift>
 800e650:	4605      	mov	r5, r0
 800e652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e654:	2b00      	cmp	r3, #0
 800e656:	d05a      	beq.n	800e70e <_dtoa_r+0xa1e>
 800e658:	4658      	mov	r0, fp
 800e65a:	6869      	ldr	r1, [r5, #4]
 800e65c:	f7fe fbc2 	bl	800cde4 <_Balloc>
 800e660:	4606      	mov	r6, r0
 800e662:	b928      	cbnz	r0, 800e670 <_dtoa_r+0x980>
 800e664:	4602      	mov	r2, r0
 800e666:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e66a:	4b83      	ldr	r3, [pc, #524]	@ (800e878 <_dtoa_r+0xb88>)
 800e66c:	f7ff bb54 	b.w	800dd18 <_dtoa_r+0x28>
 800e670:	692a      	ldr	r2, [r5, #16]
 800e672:	f105 010c 	add.w	r1, r5, #12
 800e676:	3202      	adds	r2, #2
 800e678:	0092      	lsls	r2, r2, #2
 800e67a:	300c      	adds	r0, #12
 800e67c:	f7fd ff5b 	bl	800c536 <memcpy>
 800e680:	2201      	movs	r2, #1
 800e682:	4631      	mov	r1, r6
 800e684:	4658      	mov	r0, fp
 800e686:	f7fe fe03 	bl	800d290 <__lshift>
 800e68a:	462f      	mov	r7, r5
 800e68c:	4605      	mov	r5, r0
 800e68e:	f10a 0301 	add.w	r3, sl, #1
 800e692:	9307      	str	r3, [sp, #28]
 800e694:	9b08      	ldr	r3, [sp, #32]
 800e696:	4453      	add	r3, sl
 800e698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e69a:	9b02      	ldr	r3, [sp, #8]
 800e69c:	f003 0301 	and.w	r3, r3, #1
 800e6a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6a2:	9b07      	ldr	r3, [sp, #28]
 800e6a4:	4621      	mov	r1, r4
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	4648      	mov	r0, r9
 800e6aa:	9302      	str	r3, [sp, #8]
 800e6ac:	f7ff fa96 	bl	800dbdc <quorem>
 800e6b0:	4639      	mov	r1, r7
 800e6b2:	9008      	str	r0, [sp, #32]
 800e6b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e6b8:	4648      	mov	r0, r9
 800e6ba:	f7fe fe55 	bl	800d368 <__mcmp>
 800e6be:	462a      	mov	r2, r5
 800e6c0:	9009      	str	r0, [sp, #36]	@ 0x24
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	4658      	mov	r0, fp
 800e6c6:	f7fe fe6b 	bl	800d3a0 <__mdiff>
 800e6ca:	68c2      	ldr	r2, [r0, #12]
 800e6cc:	4606      	mov	r6, r0
 800e6ce:	bb02      	cbnz	r2, 800e712 <_dtoa_r+0xa22>
 800e6d0:	4601      	mov	r1, r0
 800e6d2:	4648      	mov	r0, r9
 800e6d4:	f7fe fe48 	bl	800d368 <__mcmp>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	4631      	mov	r1, r6
 800e6dc:	4658      	mov	r0, fp
 800e6de:	920c      	str	r2, [sp, #48]	@ 0x30
 800e6e0:	f7fe fbc0 	bl	800ce64 <_Bfree>
 800e6e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e6e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e6e8:	9e07      	ldr	r6, [sp, #28]
 800e6ea:	ea43 0102 	orr.w	r1, r3, r2
 800e6ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6f0:	4319      	orrs	r1, r3
 800e6f2:	d110      	bne.n	800e716 <_dtoa_r+0xa26>
 800e6f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e6f8:	d029      	beq.n	800e74e <_dtoa_r+0xa5e>
 800e6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dd02      	ble.n	800e706 <_dtoa_r+0xa16>
 800e700:	9b08      	ldr	r3, [sp, #32]
 800e702:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e706:	9b02      	ldr	r3, [sp, #8]
 800e708:	f883 8000 	strb.w	r8, [r3]
 800e70c:	e63b      	b.n	800e386 <_dtoa_r+0x696>
 800e70e:	4628      	mov	r0, r5
 800e710:	e7bb      	b.n	800e68a <_dtoa_r+0x99a>
 800e712:	2201      	movs	r2, #1
 800e714:	e7e1      	b.n	800e6da <_dtoa_r+0x9ea>
 800e716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e718:	2b00      	cmp	r3, #0
 800e71a:	db04      	blt.n	800e726 <_dtoa_r+0xa36>
 800e71c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800e71e:	430b      	orrs	r3, r1
 800e720:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e722:	430b      	orrs	r3, r1
 800e724:	d120      	bne.n	800e768 <_dtoa_r+0xa78>
 800e726:	2a00      	cmp	r2, #0
 800e728:	dded      	ble.n	800e706 <_dtoa_r+0xa16>
 800e72a:	4649      	mov	r1, r9
 800e72c:	2201      	movs	r2, #1
 800e72e:	4658      	mov	r0, fp
 800e730:	f7fe fdae 	bl	800d290 <__lshift>
 800e734:	4621      	mov	r1, r4
 800e736:	4681      	mov	r9, r0
 800e738:	f7fe fe16 	bl	800d368 <__mcmp>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	dc03      	bgt.n	800e748 <_dtoa_r+0xa58>
 800e740:	d1e1      	bne.n	800e706 <_dtoa_r+0xa16>
 800e742:	f018 0f01 	tst.w	r8, #1
 800e746:	d0de      	beq.n	800e706 <_dtoa_r+0xa16>
 800e748:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e74c:	d1d8      	bne.n	800e700 <_dtoa_r+0xa10>
 800e74e:	2339      	movs	r3, #57	@ 0x39
 800e750:	9a02      	ldr	r2, [sp, #8]
 800e752:	7013      	strb	r3, [r2, #0]
 800e754:	4633      	mov	r3, r6
 800e756:	461e      	mov	r6, r3
 800e758:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	2a39      	cmp	r2, #57	@ 0x39
 800e760:	d052      	beq.n	800e808 <_dtoa_r+0xb18>
 800e762:	3201      	adds	r2, #1
 800e764:	701a      	strb	r2, [r3, #0]
 800e766:	e60e      	b.n	800e386 <_dtoa_r+0x696>
 800e768:	2a00      	cmp	r2, #0
 800e76a:	dd07      	ble.n	800e77c <_dtoa_r+0xa8c>
 800e76c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e770:	d0ed      	beq.n	800e74e <_dtoa_r+0xa5e>
 800e772:	9a02      	ldr	r2, [sp, #8]
 800e774:	f108 0301 	add.w	r3, r8, #1
 800e778:	7013      	strb	r3, [r2, #0]
 800e77a:	e604      	b.n	800e386 <_dtoa_r+0x696>
 800e77c:	9b07      	ldr	r3, [sp, #28]
 800e77e:	9a07      	ldr	r2, [sp, #28]
 800e780:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e784:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e786:	4293      	cmp	r3, r2
 800e788:	d028      	beq.n	800e7dc <_dtoa_r+0xaec>
 800e78a:	4649      	mov	r1, r9
 800e78c:	2300      	movs	r3, #0
 800e78e:	220a      	movs	r2, #10
 800e790:	4658      	mov	r0, fp
 800e792:	f7fe fb89 	bl	800cea8 <__multadd>
 800e796:	42af      	cmp	r7, r5
 800e798:	4681      	mov	r9, r0
 800e79a:	f04f 0300 	mov.w	r3, #0
 800e79e:	f04f 020a 	mov.w	r2, #10
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	4658      	mov	r0, fp
 800e7a6:	d107      	bne.n	800e7b8 <_dtoa_r+0xac8>
 800e7a8:	f7fe fb7e 	bl	800cea8 <__multadd>
 800e7ac:	4607      	mov	r7, r0
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	9b07      	ldr	r3, [sp, #28]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	9307      	str	r3, [sp, #28]
 800e7b6:	e774      	b.n	800e6a2 <_dtoa_r+0x9b2>
 800e7b8:	f7fe fb76 	bl	800cea8 <__multadd>
 800e7bc:	4629      	mov	r1, r5
 800e7be:	4607      	mov	r7, r0
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	220a      	movs	r2, #10
 800e7c4:	4658      	mov	r0, fp
 800e7c6:	f7fe fb6f 	bl	800cea8 <__multadd>
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	e7f0      	b.n	800e7b0 <_dtoa_r+0xac0>
 800e7ce:	9b08      	ldr	r3, [sp, #32]
 800e7d0:	2700      	movs	r7, #0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	bfcc      	ite	gt
 800e7d6:	461e      	movgt	r6, r3
 800e7d8:	2601      	movle	r6, #1
 800e7da:	4456      	add	r6, sl
 800e7dc:	4649      	mov	r1, r9
 800e7de:	2201      	movs	r2, #1
 800e7e0:	4658      	mov	r0, fp
 800e7e2:	f7fe fd55 	bl	800d290 <__lshift>
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4681      	mov	r9, r0
 800e7ea:	f7fe fdbd 	bl	800d368 <__mcmp>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	dcb0      	bgt.n	800e754 <_dtoa_r+0xa64>
 800e7f2:	d102      	bne.n	800e7fa <_dtoa_r+0xb0a>
 800e7f4:	f018 0f01 	tst.w	r8, #1
 800e7f8:	d1ac      	bne.n	800e754 <_dtoa_r+0xa64>
 800e7fa:	4633      	mov	r3, r6
 800e7fc:	461e      	mov	r6, r3
 800e7fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e802:	2a30      	cmp	r2, #48	@ 0x30
 800e804:	d0fa      	beq.n	800e7fc <_dtoa_r+0xb0c>
 800e806:	e5be      	b.n	800e386 <_dtoa_r+0x696>
 800e808:	459a      	cmp	sl, r3
 800e80a:	d1a4      	bne.n	800e756 <_dtoa_r+0xa66>
 800e80c:	9b04      	ldr	r3, [sp, #16]
 800e80e:	3301      	adds	r3, #1
 800e810:	9304      	str	r3, [sp, #16]
 800e812:	2331      	movs	r3, #49	@ 0x31
 800e814:	f88a 3000 	strb.w	r3, [sl]
 800e818:	e5b5      	b.n	800e386 <_dtoa_r+0x696>
 800e81a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e81c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e87c <_dtoa_r+0xb8c>
 800e820:	b11b      	cbz	r3, 800e82a <_dtoa_r+0xb3a>
 800e822:	f10a 0308 	add.w	r3, sl, #8
 800e826:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e828:	6013      	str	r3, [r2, #0]
 800e82a:	4650      	mov	r0, sl
 800e82c:	b017      	add	sp, #92	@ 0x5c
 800e82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e832:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e834:	2b01      	cmp	r3, #1
 800e836:	f77f ae3d 	ble.w	800e4b4 <_dtoa_r+0x7c4>
 800e83a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e83c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e83e:	2001      	movs	r0, #1
 800e840:	e65b      	b.n	800e4fa <_dtoa_r+0x80a>
 800e842:	9b08      	ldr	r3, [sp, #32]
 800e844:	2b00      	cmp	r3, #0
 800e846:	f77f aed6 	ble.w	800e5f6 <_dtoa_r+0x906>
 800e84a:	4656      	mov	r6, sl
 800e84c:	4621      	mov	r1, r4
 800e84e:	4648      	mov	r0, r9
 800e850:	f7ff f9c4 	bl	800dbdc <quorem>
 800e854:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e858:	9b08      	ldr	r3, [sp, #32]
 800e85a:	f806 8b01 	strb.w	r8, [r6], #1
 800e85e:	eba6 020a 	sub.w	r2, r6, sl
 800e862:	4293      	cmp	r3, r2
 800e864:	ddb3      	ble.n	800e7ce <_dtoa_r+0xade>
 800e866:	4649      	mov	r1, r9
 800e868:	2300      	movs	r3, #0
 800e86a:	220a      	movs	r2, #10
 800e86c:	4658      	mov	r0, fp
 800e86e:	f7fe fb1b 	bl	800cea8 <__multadd>
 800e872:	4681      	mov	r9, r0
 800e874:	e7ea      	b.n	800e84c <_dtoa_r+0xb5c>
 800e876:	bf00      	nop
 800e878:	0800f248 	.word	0x0800f248
 800e87c:	0800f565 	.word	0x0800f565

0800e880 <malloc>:
 800e880:	4b02      	ldr	r3, [pc, #8]	@ (800e88c <malloc+0xc>)
 800e882:	4601      	mov	r1, r0
 800e884:	6818      	ldr	r0, [r3, #0]
 800e886:	f7fe ba0f 	b.w	800cca8 <_malloc_r>
 800e88a:	bf00      	nop
 800e88c:	200002f4 	.word	0x200002f4

0800e890 <fiprintf>:
 800e890:	b40e      	push	{r1, r2, r3}
 800e892:	b503      	push	{r0, r1, lr}
 800e894:	4601      	mov	r1, r0
 800e896:	ab03      	add	r3, sp, #12
 800e898:	4805      	ldr	r0, [pc, #20]	@ (800e8b0 <fiprintf+0x20>)
 800e89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e89e:	6800      	ldr	r0, [r0, #0]
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	f000 f835 	bl	800e910 <_vfiprintf_r>
 800e8a6:	b002      	add	sp, #8
 800e8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8ac:	b003      	add	sp, #12
 800e8ae:	4770      	bx	lr
 800e8b0:	200002f4 	.word	0x200002f4

0800e8b4 <abort>:
 800e8b4:	2006      	movs	r0, #6
 800e8b6:	b508      	push	{r3, lr}
 800e8b8:	f000 fb90 	bl	800efdc <raise>
 800e8bc:	2001      	movs	r0, #1
 800e8be:	f7f3 fafa 	bl	8001eb6 <_exit>

0800e8c2 <__sfputc_r>:
 800e8c2:	6893      	ldr	r3, [r2, #8]
 800e8c4:	b410      	push	{r4}
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	6093      	str	r3, [r2, #8]
 800e8cc:	da07      	bge.n	800e8de <__sfputc_r+0x1c>
 800e8ce:	6994      	ldr	r4, [r2, #24]
 800e8d0:	42a3      	cmp	r3, r4
 800e8d2:	db01      	blt.n	800e8d8 <__sfputc_r+0x16>
 800e8d4:	290a      	cmp	r1, #10
 800e8d6:	d102      	bne.n	800e8de <__sfputc_r+0x1c>
 800e8d8:	bc10      	pop	{r4}
 800e8da:	f000 bac3 	b.w	800ee64 <__swbuf_r>
 800e8de:	6813      	ldr	r3, [r2, #0]
 800e8e0:	1c58      	adds	r0, r3, #1
 800e8e2:	6010      	str	r0, [r2, #0]
 800e8e4:	7019      	strb	r1, [r3, #0]
 800e8e6:	4608      	mov	r0, r1
 800e8e8:	bc10      	pop	{r4}
 800e8ea:	4770      	bx	lr

0800e8ec <__sfputs_r>:
 800e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ee:	4606      	mov	r6, r0
 800e8f0:	460f      	mov	r7, r1
 800e8f2:	4614      	mov	r4, r2
 800e8f4:	18d5      	adds	r5, r2, r3
 800e8f6:	42ac      	cmp	r4, r5
 800e8f8:	d101      	bne.n	800e8fe <__sfputs_r+0x12>
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	e007      	b.n	800e90e <__sfputs_r+0x22>
 800e8fe:	463a      	mov	r2, r7
 800e900:	4630      	mov	r0, r6
 800e902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e906:	f7ff ffdc 	bl	800e8c2 <__sfputc_r>
 800e90a:	1c43      	adds	r3, r0, #1
 800e90c:	d1f3      	bne.n	800e8f6 <__sfputs_r+0xa>
 800e90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e910 <_vfiprintf_r>:
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	460d      	mov	r5, r1
 800e916:	4614      	mov	r4, r2
 800e918:	4698      	mov	r8, r3
 800e91a:	4606      	mov	r6, r0
 800e91c:	b09d      	sub	sp, #116	@ 0x74
 800e91e:	b118      	cbz	r0, 800e928 <_vfiprintf_r+0x18>
 800e920:	6a03      	ldr	r3, [r0, #32]
 800e922:	b90b      	cbnz	r3, 800e928 <_vfiprintf_r+0x18>
 800e924:	f7fd fd00 	bl	800c328 <__sinit>
 800e928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e92a:	07d9      	lsls	r1, r3, #31
 800e92c:	d405      	bmi.n	800e93a <_vfiprintf_r+0x2a>
 800e92e:	89ab      	ldrh	r3, [r5, #12]
 800e930:	059a      	lsls	r2, r3, #22
 800e932:	d402      	bmi.n	800e93a <_vfiprintf_r+0x2a>
 800e934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e936:	f7fd fdfc 	bl	800c532 <__retarget_lock_acquire_recursive>
 800e93a:	89ab      	ldrh	r3, [r5, #12]
 800e93c:	071b      	lsls	r3, r3, #28
 800e93e:	d501      	bpl.n	800e944 <_vfiprintf_r+0x34>
 800e940:	692b      	ldr	r3, [r5, #16]
 800e942:	b99b      	cbnz	r3, 800e96c <_vfiprintf_r+0x5c>
 800e944:	4629      	mov	r1, r5
 800e946:	4630      	mov	r0, r6
 800e948:	f000 faca 	bl	800eee0 <__swsetup_r>
 800e94c:	b170      	cbz	r0, 800e96c <_vfiprintf_r+0x5c>
 800e94e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e950:	07dc      	lsls	r4, r3, #31
 800e952:	d504      	bpl.n	800e95e <_vfiprintf_r+0x4e>
 800e954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e958:	b01d      	add	sp, #116	@ 0x74
 800e95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e95e:	89ab      	ldrh	r3, [r5, #12]
 800e960:	0598      	lsls	r0, r3, #22
 800e962:	d4f7      	bmi.n	800e954 <_vfiprintf_r+0x44>
 800e964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e966:	f7fd fde5 	bl	800c534 <__retarget_lock_release_recursive>
 800e96a:	e7f3      	b.n	800e954 <_vfiprintf_r+0x44>
 800e96c:	2300      	movs	r3, #0
 800e96e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e970:	2320      	movs	r3, #32
 800e972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e976:	2330      	movs	r3, #48	@ 0x30
 800e978:	f04f 0901 	mov.w	r9, #1
 800e97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e980:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800eb2c <_vfiprintf_r+0x21c>
 800e984:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e988:	4623      	mov	r3, r4
 800e98a:	469a      	mov	sl, r3
 800e98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e990:	b10a      	cbz	r2, 800e996 <_vfiprintf_r+0x86>
 800e992:	2a25      	cmp	r2, #37	@ 0x25
 800e994:	d1f9      	bne.n	800e98a <_vfiprintf_r+0x7a>
 800e996:	ebba 0b04 	subs.w	fp, sl, r4
 800e99a:	d00b      	beq.n	800e9b4 <_vfiprintf_r+0xa4>
 800e99c:	465b      	mov	r3, fp
 800e99e:	4622      	mov	r2, r4
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff ffa2 	bl	800e8ec <__sfputs_r>
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	f000 80a7 	beq.w	800eafc <_vfiprintf_r+0x1ec>
 800e9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9b0:	445a      	add	r2, fp
 800e9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f000 809f 	beq.w	800eafc <_vfiprintf_r+0x1ec>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9c8:	f10a 0a01 	add.w	sl, sl, #1
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	9307      	str	r3, [sp, #28]
 800e9d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9d6:	4654      	mov	r4, sl
 800e9d8:	2205      	movs	r2, #5
 800e9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9de:	4853      	ldr	r0, [pc, #332]	@ (800eb2c <_vfiprintf_r+0x21c>)
 800e9e0:	f000 fb18 	bl	800f014 <memchr>
 800e9e4:	9a04      	ldr	r2, [sp, #16]
 800e9e6:	b9d8      	cbnz	r0, 800ea20 <_vfiprintf_r+0x110>
 800e9e8:	06d1      	lsls	r1, r2, #27
 800e9ea:	bf44      	itt	mi
 800e9ec:	2320      	movmi	r3, #32
 800e9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9f2:	0713      	lsls	r3, r2, #28
 800e9f4:	bf44      	itt	mi
 800e9f6:	232b      	movmi	r3, #43	@ 0x2b
 800e9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ea00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea02:	d015      	beq.n	800ea30 <_vfiprintf_r+0x120>
 800ea04:	4654      	mov	r4, sl
 800ea06:	2000      	movs	r0, #0
 800ea08:	f04f 0c0a 	mov.w	ip, #10
 800ea0c:	9a07      	ldr	r2, [sp, #28]
 800ea0e:	4621      	mov	r1, r4
 800ea10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea14:	3b30      	subs	r3, #48	@ 0x30
 800ea16:	2b09      	cmp	r3, #9
 800ea18:	d94b      	bls.n	800eab2 <_vfiprintf_r+0x1a2>
 800ea1a:	b1b0      	cbz	r0, 800ea4a <_vfiprintf_r+0x13a>
 800ea1c:	9207      	str	r2, [sp, #28]
 800ea1e:	e014      	b.n	800ea4a <_vfiprintf_r+0x13a>
 800ea20:	eba0 0308 	sub.w	r3, r0, r8
 800ea24:	fa09 f303 	lsl.w	r3, r9, r3
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	46a2      	mov	sl, r4
 800ea2c:	9304      	str	r3, [sp, #16]
 800ea2e:	e7d2      	b.n	800e9d6 <_vfiprintf_r+0xc6>
 800ea30:	9b03      	ldr	r3, [sp, #12]
 800ea32:	1d19      	adds	r1, r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	9103      	str	r1, [sp, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	bfbb      	ittet	lt
 800ea3c:	425b      	neglt	r3, r3
 800ea3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ea42:	9307      	strge	r3, [sp, #28]
 800ea44:	9307      	strlt	r3, [sp, #28]
 800ea46:	bfb8      	it	lt
 800ea48:	9204      	strlt	r2, [sp, #16]
 800ea4a:	7823      	ldrb	r3, [r4, #0]
 800ea4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea4e:	d10a      	bne.n	800ea66 <_vfiprintf_r+0x156>
 800ea50:	7863      	ldrb	r3, [r4, #1]
 800ea52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea54:	d132      	bne.n	800eabc <_vfiprintf_r+0x1ac>
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	3402      	adds	r4, #2
 800ea5a:	1d1a      	adds	r2, r3, #4
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	9203      	str	r2, [sp, #12]
 800ea60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea64:	9305      	str	r3, [sp, #20]
 800ea66:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800eb30 <_vfiprintf_r+0x220>
 800ea6a:	2203      	movs	r2, #3
 800ea6c:	4650      	mov	r0, sl
 800ea6e:	7821      	ldrb	r1, [r4, #0]
 800ea70:	f000 fad0 	bl	800f014 <memchr>
 800ea74:	b138      	cbz	r0, 800ea86 <_vfiprintf_r+0x176>
 800ea76:	2240      	movs	r2, #64	@ 0x40
 800ea78:	9b04      	ldr	r3, [sp, #16]
 800ea7a:	eba0 000a 	sub.w	r0, r0, sl
 800ea7e:	4082      	lsls	r2, r0
 800ea80:	4313      	orrs	r3, r2
 800ea82:	3401      	adds	r4, #1
 800ea84:	9304      	str	r3, [sp, #16]
 800ea86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea8a:	2206      	movs	r2, #6
 800ea8c:	4829      	ldr	r0, [pc, #164]	@ (800eb34 <_vfiprintf_r+0x224>)
 800ea8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea92:	f000 fabf 	bl	800f014 <memchr>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d03f      	beq.n	800eb1a <_vfiprintf_r+0x20a>
 800ea9a:	4b27      	ldr	r3, [pc, #156]	@ (800eb38 <_vfiprintf_r+0x228>)
 800ea9c:	bb1b      	cbnz	r3, 800eae6 <_vfiprintf_r+0x1d6>
 800ea9e:	9b03      	ldr	r3, [sp, #12]
 800eaa0:	3307      	adds	r3, #7
 800eaa2:	f023 0307 	bic.w	r3, r3, #7
 800eaa6:	3308      	adds	r3, #8
 800eaa8:	9303      	str	r3, [sp, #12]
 800eaaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaac:	443b      	add	r3, r7
 800eaae:	9309      	str	r3, [sp, #36]	@ 0x24
 800eab0:	e76a      	b.n	800e988 <_vfiprintf_r+0x78>
 800eab2:	460c      	mov	r4, r1
 800eab4:	2001      	movs	r0, #1
 800eab6:	fb0c 3202 	mla	r2, ip, r2, r3
 800eaba:	e7a8      	b.n	800ea0e <_vfiprintf_r+0xfe>
 800eabc:	2300      	movs	r3, #0
 800eabe:	f04f 0c0a 	mov.w	ip, #10
 800eac2:	4619      	mov	r1, r3
 800eac4:	3401      	adds	r4, #1
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	4620      	mov	r0, r4
 800eaca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eace:	3a30      	subs	r2, #48	@ 0x30
 800ead0:	2a09      	cmp	r2, #9
 800ead2:	d903      	bls.n	800eadc <_vfiprintf_r+0x1cc>
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d0c6      	beq.n	800ea66 <_vfiprintf_r+0x156>
 800ead8:	9105      	str	r1, [sp, #20]
 800eada:	e7c4      	b.n	800ea66 <_vfiprintf_r+0x156>
 800eadc:	4604      	mov	r4, r0
 800eade:	2301      	movs	r3, #1
 800eae0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eae4:	e7f0      	b.n	800eac8 <_vfiprintf_r+0x1b8>
 800eae6:	ab03      	add	r3, sp, #12
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	462a      	mov	r2, r5
 800eaec:	4630      	mov	r0, r6
 800eaee:	4b13      	ldr	r3, [pc, #76]	@ (800eb3c <_vfiprintf_r+0x22c>)
 800eaf0:	a904      	add	r1, sp, #16
 800eaf2:	f3af 8000 	nop.w
 800eaf6:	4607      	mov	r7, r0
 800eaf8:	1c78      	adds	r0, r7, #1
 800eafa:	d1d6      	bne.n	800eaaa <_vfiprintf_r+0x19a>
 800eafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eafe:	07d9      	lsls	r1, r3, #31
 800eb00:	d405      	bmi.n	800eb0e <_vfiprintf_r+0x1fe>
 800eb02:	89ab      	ldrh	r3, [r5, #12]
 800eb04:	059a      	lsls	r2, r3, #22
 800eb06:	d402      	bmi.n	800eb0e <_vfiprintf_r+0x1fe>
 800eb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb0a:	f7fd fd13 	bl	800c534 <__retarget_lock_release_recursive>
 800eb0e:	89ab      	ldrh	r3, [r5, #12]
 800eb10:	065b      	lsls	r3, r3, #25
 800eb12:	f53f af1f 	bmi.w	800e954 <_vfiprintf_r+0x44>
 800eb16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb18:	e71e      	b.n	800e958 <_vfiprintf_r+0x48>
 800eb1a:	ab03      	add	r3, sp, #12
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	462a      	mov	r2, r5
 800eb20:	4630      	mov	r0, r6
 800eb22:	4b06      	ldr	r3, [pc, #24]	@ (800eb3c <_vfiprintf_r+0x22c>)
 800eb24:	a904      	add	r1, sp, #16
 800eb26:	f000 f87d 	bl	800ec24 <_printf_i>
 800eb2a:	e7e4      	b.n	800eaf6 <_vfiprintf_r+0x1e6>
 800eb2c:	0800f5cc 	.word	0x0800f5cc
 800eb30:	0800f5d2 	.word	0x0800f5d2
 800eb34:	0800f5d6 	.word	0x0800f5d6
 800eb38:	00000000 	.word	0x00000000
 800eb3c:	0800e8ed 	.word	0x0800e8ed

0800eb40 <_printf_common>:
 800eb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb44:	4616      	mov	r6, r2
 800eb46:	4698      	mov	r8, r3
 800eb48:	688a      	ldr	r2, [r1, #8]
 800eb4a:	690b      	ldr	r3, [r1, #16]
 800eb4c:	4607      	mov	r7, r0
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	bfb8      	it	lt
 800eb52:	4613      	movlt	r3, r2
 800eb54:	6033      	str	r3, [r6, #0]
 800eb56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb60:	b10a      	cbz	r2, 800eb66 <_printf_common+0x26>
 800eb62:	3301      	adds	r3, #1
 800eb64:	6033      	str	r3, [r6, #0]
 800eb66:	6823      	ldr	r3, [r4, #0]
 800eb68:	0699      	lsls	r1, r3, #26
 800eb6a:	bf42      	ittt	mi
 800eb6c:	6833      	ldrmi	r3, [r6, #0]
 800eb6e:	3302      	addmi	r3, #2
 800eb70:	6033      	strmi	r3, [r6, #0]
 800eb72:	6825      	ldr	r5, [r4, #0]
 800eb74:	f015 0506 	ands.w	r5, r5, #6
 800eb78:	d106      	bne.n	800eb88 <_printf_common+0x48>
 800eb7a:	f104 0a19 	add.w	sl, r4, #25
 800eb7e:	68e3      	ldr	r3, [r4, #12]
 800eb80:	6832      	ldr	r2, [r6, #0]
 800eb82:	1a9b      	subs	r3, r3, r2
 800eb84:	42ab      	cmp	r3, r5
 800eb86:	dc2b      	bgt.n	800ebe0 <_printf_common+0xa0>
 800eb88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb8c:	6822      	ldr	r2, [r4, #0]
 800eb8e:	3b00      	subs	r3, #0
 800eb90:	bf18      	it	ne
 800eb92:	2301      	movne	r3, #1
 800eb94:	0692      	lsls	r2, r2, #26
 800eb96:	d430      	bmi.n	800ebfa <_printf_common+0xba>
 800eb98:	4641      	mov	r1, r8
 800eb9a:	4638      	mov	r0, r7
 800eb9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eba0:	47c8      	blx	r9
 800eba2:	3001      	adds	r0, #1
 800eba4:	d023      	beq.n	800ebee <_printf_common+0xae>
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	6922      	ldr	r2, [r4, #16]
 800ebaa:	f003 0306 	and.w	r3, r3, #6
 800ebae:	2b04      	cmp	r3, #4
 800ebb0:	bf14      	ite	ne
 800ebb2:	2500      	movne	r5, #0
 800ebb4:	6833      	ldreq	r3, [r6, #0]
 800ebb6:	f04f 0600 	mov.w	r6, #0
 800ebba:	bf08      	it	eq
 800ebbc:	68e5      	ldreq	r5, [r4, #12]
 800ebbe:	f104 041a 	add.w	r4, r4, #26
 800ebc2:	bf08      	it	eq
 800ebc4:	1aed      	subeq	r5, r5, r3
 800ebc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ebca:	bf08      	it	eq
 800ebcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	bfc4      	itt	gt
 800ebd4:	1a9b      	subgt	r3, r3, r2
 800ebd6:	18ed      	addgt	r5, r5, r3
 800ebd8:	42b5      	cmp	r5, r6
 800ebda:	d11a      	bne.n	800ec12 <_printf_common+0xd2>
 800ebdc:	2000      	movs	r0, #0
 800ebde:	e008      	b.n	800ebf2 <_printf_common+0xb2>
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	4652      	mov	r2, sl
 800ebe4:	4641      	mov	r1, r8
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	47c8      	blx	r9
 800ebea:	3001      	adds	r0, #1
 800ebec:	d103      	bne.n	800ebf6 <_printf_common+0xb6>
 800ebee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf6:	3501      	adds	r5, #1
 800ebf8:	e7c1      	b.n	800eb7e <_printf_common+0x3e>
 800ebfa:	2030      	movs	r0, #48	@ 0x30
 800ebfc:	18e1      	adds	r1, r4, r3
 800ebfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec02:	1c5a      	adds	r2, r3, #1
 800ec04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec08:	4422      	add	r2, r4
 800ec0a:	3302      	adds	r3, #2
 800ec0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec10:	e7c2      	b.n	800eb98 <_printf_common+0x58>
 800ec12:	2301      	movs	r3, #1
 800ec14:	4622      	mov	r2, r4
 800ec16:	4641      	mov	r1, r8
 800ec18:	4638      	mov	r0, r7
 800ec1a:	47c8      	blx	r9
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	d0e6      	beq.n	800ebee <_printf_common+0xae>
 800ec20:	3601      	adds	r6, #1
 800ec22:	e7d9      	b.n	800ebd8 <_printf_common+0x98>

0800ec24 <_printf_i>:
 800ec24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec28:	7e0f      	ldrb	r7, [r1, #24]
 800ec2a:	4691      	mov	r9, r2
 800ec2c:	2f78      	cmp	r7, #120	@ 0x78
 800ec2e:	4680      	mov	r8, r0
 800ec30:	460c      	mov	r4, r1
 800ec32:	469a      	mov	sl, r3
 800ec34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec3a:	d807      	bhi.n	800ec4c <_printf_i+0x28>
 800ec3c:	2f62      	cmp	r7, #98	@ 0x62
 800ec3e:	d80a      	bhi.n	800ec56 <_printf_i+0x32>
 800ec40:	2f00      	cmp	r7, #0
 800ec42:	f000 80d3 	beq.w	800edec <_printf_i+0x1c8>
 800ec46:	2f58      	cmp	r7, #88	@ 0x58
 800ec48:	f000 80ba 	beq.w	800edc0 <_printf_i+0x19c>
 800ec4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec54:	e03a      	b.n	800eccc <_printf_i+0xa8>
 800ec56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec5a:	2b15      	cmp	r3, #21
 800ec5c:	d8f6      	bhi.n	800ec4c <_printf_i+0x28>
 800ec5e:	a101      	add	r1, pc, #4	@ (adr r1, 800ec64 <_printf_i+0x40>)
 800ec60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec64:	0800ecbd 	.word	0x0800ecbd
 800ec68:	0800ecd1 	.word	0x0800ecd1
 800ec6c:	0800ec4d 	.word	0x0800ec4d
 800ec70:	0800ec4d 	.word	0x0800ec4d
 800ec74:	0800ec4d 	.word	0x0800ec4d
 800ec78:	0800ec4d 	.word	0x0800ec4d
 800ec7c:	0800ecd1 	.word	0x0800ecd1
 800ec80:	0800ec4d 	.word	0x0800ec4d
 800ec84:	0800ec4d 	.word	0x0800ec4d
 800ec88:	0800ec4d 	.word	0x0800ec4d
 800ec8c:	0800ec4d 	.word	0x0800ec4d
 800ec90:	0800edd3 	.word	0x0800edd3
 800ec94:	0800ecfb 	.word	0x0800ecfb
 800ec98:	0800ed8d 	.word	0x0800ed8d
 800ec9c:	0800ec4d 	.word	0x0800ec4d
 800eca0:	0800ec4d 	.word	0x0800ec4d
 800eca4:	0800edf5 	.word	0x0800edf5
 800eca8:	0800ec4d 	.word	0x0800ec4d
 800ecac:	0800ecfb 	.word	0x0800ecfb
 800ecb0:	0800ec4d 	.word	0x0800ec4d
 800ecb4:	0800ec4d 	.word	0x0800ec4d
 800ecb8:	0800ed95 	.word	0x0800ed95
 800ecbc:	6833      	ldr	r3, [r6, #0]
 800ecbe:	1d1a      	adds	r2, r3, #4
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6032      	str	r2, [r6, #0]
 800ecc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eccc:	2301      	movs	r3, #1
 800ecce:	e09e      	b.n	800ee0e <_printf_i+0x1ea>
 800ecd0:	6833      	ldr	r3, [r6, #0]
 800ecd2:	6820      	ldr	r0, [r4, #0]
 800ecd4:	1d19      	adds	r1, r3, #4
 800ecd6:	6031      	str	r1, [r6, #0]
 800ecd8:	0606      	lsls	r6, r0, #24
 800ecda:	d501      	bpl.n	800ece0 <_printf_i+0xbc>
 800ecdc:	681d      	ldr	r5, [r3, #0]
 800ecde:	e003      	b.n	800ece8 <_printf_i+0xc4>
 800ece0:	0645      	lsls	r5, r0, #25
 800ece2:	d5fb      	bpl.n	800ecdc <_printf_i+0xb8>
 800ece4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ece8:	2d00      	cmp	r5, #0
 800ecea:	da03      	bge.n	800ecf4 <_printf_i+0xd0>
 800ecec:	232d      	movs	r3, #45	@ 0x2d
 800ecee:	426d      	negs	r5, r5
 800ecf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecf4:	230a      	movs	r3, #10
 800ecf6:	4859      	ldr	r0, [pc, #356]	@ (800ee5c <_printf_i+0x238>)
 800ecf8:	e011      	b.n	800ed1e <_printf_i+0xfa>
 800ecfa:	6821      	ldr	r1, [r4, #0]
 800ecfc:	6833      	ldr	r3, [r6, #0]
 800ecfe:	0608      	lsls	r0, r1, #24
 800ed00:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed04:	d402      	bmi.n	800ed0c <_printf_i+0xe8>
 800ed06:	0649      	lsls	r1, r1, #25
 800ed08:	bf48      	it	mi
 800ed0a:	b2ad      	uxthmi	r5, r5
 800ed0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed0e:	6033      	str	r3, [r6, #0]
 800ed10:	bf14      	ite	ne
 800ed12:	230a      	movne	r3, #10
 800ed14:	2308      	moveq	r3, #8
 800ed16:	4851      	ldr	r0, [pc, #324]	@ (800ee5c <_printf_i+0x238>)
 800ed18:	2100      	movs	r1, #0
 800ed1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed1e:	6866      	ldr	r6, [r4, #4]
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	bfa8      	it	ge
 800ed24:	6821      	ldrge	r1, [r4, #0]
 800ed26:	60a6      	str	r6, [r4, #8]
 800ed28:	bfa4      	itt	ge
 800ed2a:	f021 0104 	bicge.w	r1, r1, #4
 800ed2e:	6021      	strge	r1, [r4, #0]
 800ed30:	b90d      	cbnz	r5, 800ed36 <_printf_i+0x112>
 800ed32:	2e00      	cmp	r6, #0
 800ed34:	d04b      	beq.n	800edce <_printf_i+0x1aa>
 800ed36:	4616      	mov	r6, r2
 800ed38:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed3c:	fb03 5711 	mls	r7, r3, r1, r5
 800ed40:	5dc7      	ldrb	r7, [r0, r7]
 800ed42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed46:	462f      	mov	r7, r5
 800ed48:	42bb      	cmp	r3, r7
 800ed4a:	460d      	mov	r5, r1
 800ed4c:	d9f4      	bls.n	800ed38 <_printf_i+0x114>
 800ed4e:	2b08      	cmp	r3, #8
 800ed50:	d10b      	bne.n	800ed6a <_printf_i+0x146>
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	07df      	lsls	r7, r3, #31
 800ed56:	d508      	bpl.n	800ed6a <_printf_i+0x146>
 800ed58:	6923      	ldr	r3, [r4, #16]
 800ed5a:	6861      	ldr	r1, [r4, #4]
 800ed5c:	4299      	cmp	r1, r3
 800ed5e:	bfde      	ittt	le
 800ed60:	2330      	movle	r3, #48	@ 0x30
 800ed62:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed66:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ed6a:	1b92      	subs	r2, r2, r6
 800ed6c:	6122      	str	r2, [r4, #16]
 800ed6e:	464b      	mov	r3, r9
 800ed70:	4621      	mov	r1, r4
 800ed72:	4640      	mov	r0, r8
 800ed74:	f8cd a000 	str.w	sl, [sp]
 800ed78:	aa03      	add	r2, sp, #12
 800ed7a:	f7ff fee1 	bl	800eb40 <_printf_common>
 800ed7e:	3001      	adds	r0, #1
 800ed80:	d14a      	bne.n	800ee18 <_printf_i+0x1f4>
 800ed82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed86:	b004      	add	sp, #16
 800ed88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	f043 0320 	orr.w	r3, r3, #32
 800ed92:	6023      	str	r3, [r4, #0]
 800ed94:	2778      	movs	r7, #120	@ 0x78
 800ed96:	4832      	ldr	r0, [pc, #200]	@ (800ee60 <_printf_i+0x23c>)
 800ed98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed9c:	6823      	ldr	r3, [r4, #0]
 800ed9e:	6831      	ldr	r1, [r6, #0]
 800eda0:	061f      	lsls	r7, r3, #24
 800eda2:	f851 5b04 	ldr.w	r5, [r1], #4
 800eda6:	d402      	bmi.n	800edae <_printf_i+0x18a>
 800eda8:	065f      	lsls	r7, r3, #25
 800edaa:	bf48      	it	mi
 800edac:	b2ad      	uxthmi	r5, r5
 800edae:	6031      	str	r1, [r6, #0]
 800edb0:	07d9      	lsls	r1, r3, #31
 800edb2:	bf44      	itt	mi
 800edb4:	f043 0320 	orrmi.w	r3, r3, #32
 800edb8:	6023      	strmi	r3, [r4, #0]
 800edba:	b11d      	cbz	r5, 800edc4 <_printf_i+0x1a0>
 800edbc:	2310      	movs	r3, #16
 800edbe:	e7ab      	b.n	800ed18 <_printf_i+0xf4>
 800edc0:	4826      	ldr	r0, [pc, #152]	@ (800ee5c <_printf_i+0x238>)
 800edc2:	e7e9      	b.n	800ed98 <_printf_i+0x174>
 800edc4:	6823      	ldr	r3, [r4, #0]
 800edc6:	f023 0320 	bic.w	r3, r3, #32
 800edca:	6023      	str	r3, [r4, #0]
 800edcc:	e7f6      	b.n	800edbc <_printf_i+0x198>
 800edce:	4616      	mov	r6, r2
 800edd0:	e7bd      	b.n	800ed4e <_printf_i+0x12a>
 800edd2:	6833      	ldr	r3, [r6, #0]
 800edd4:	6825      	ldr	r5, [r4, #0]
 800edd6:	1d18      	adds	r0, r3, #4
 800edd8:	6961      	ldr	r1, [r4, #20]
 800edda:	6030      	str	r0, [r6, #0]
 800eddc:	062e      	lsls	r6, r5, #24
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	d501      	bpl.n	800ede6 <_printf_i+0x1c2>
 800ede2:	6019      	str	r1, [r3, #0]
 800ede4:	e002      	b.n	800edec <_printf_i+0x1c8>
 800ede6:	0668      	lsls	r0, r5, #25
 800ede8:	d5fb      	bpl.n	800ede2 <_printf_i+0x1be>
 800edea:	8019      	strh	r1, [r3, #0]
 800edec:	2300      	movs	r3, #0
 800edee:	4616      	mov	r6, r2
 800edf0:	6123      	str	r3, [r4, #16]
 800edf2:	e7bc      	b.n	800ed6e <_printf_i+0x14a>
 800edf4:	6833      	ldr	r3, [r6, #0]
 800edf6:	2100      	movs	r1, #0
 800edf8:	1d1a      	adds	r2, r3, #4
 800edfa:	6032      	str	r2, [r6, #0]
 800edfc:	681e      	ldr	r6, [r3, #0]
 800edfe:	6862      	ldr	r2, [r4, #4]
 800ee00:	4630      	mov	r0, r6
 800ee02:	f000 f907 	bl	800f014 <memchr>
 800ee06:	b108      	cbz	r0, 800ee0c <_printf_i+0x1e8>
 800ee08:	1b80      	subs	r0, r0, r6
 800ee0a:	6060      	str	r0, [r4, #4]
 800ee0c:	6863      	ldr	r3, [r4, #4]
 800ee0e:	6123      	str	r3, [r4, #16]
 800ee10:	2300      	movs	r3, #0
 800ee12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee16:	e7aa      	b.n	800ed6e <_printf_i+0x14a>
 800ee18:	4632      	mov	r2, r6
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	4640      	mov	r0, r8
 800ee1e:	6923      	ldr	r3, [r4, #16]
 800ee20:	47d0      	blx	sl
 800ee22:	3001      	adds	r0, #1
 800ee24:	d0ad      	beq.n	800ed82 <_printf_i+0x15e>
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	079b      	lsls	r3, r3, #30
 800ee2a:	d413      	bmi.n	800ee54 <_printf_i+0x230>
 800ee2c:	68e0      	ldr	r0, [r4, #12]
 800ee2e:	9b03      	ldr	r3, [sp, #12]
 800ee30:	4298      	cmp	r0, r3
 800ee32:	bfb8      	it	lt
 800ee34:	4618      	movlt	r0, r3
 800ee36:	e7a6      	b.n	800ed86 <_printf_i+0x162>
 800ee38:	2301      	movs	r3, #1
 800ee3a:	4632      	mov	r2, r6
 800ee3c:	4649      	mov	r1, r9
 800ee3e:	4640      	mov	r0, r8
 800ee40:	47d0      	blx	sl
 800ee42:	3001      	adds	r0, #1
 800ee44:	d09d      	beq.n	800ed82 <_printf_i+0x15e>
 800ee46:	3501      	adds	r5, #1
 800ee48:	68e3      	ldr	r3, [r4, #12]
 800ee4a:	9903      	ldr	r1, [sp, #12]
 800ee4c:	1a5b      	subs	r3, r3, r1
 800ee4e:	42ab      	cmp	r3, r5
 800ee50:	dcf2      	bgt.n	800ee38 <_printf_i+0x214>
 800ee52:	e7eb      	b.n	800ee2c <_printf_i+0x208>
 800ee54:	2500      	movs	r5, #0
 800ee56:	f104 0619 	add.w	r6, r4, #25
 800ee5a:	e7f5      	b.n	800ee48 <_printf_i+0x224>
 800ee5c:	0800f5dd 	.word	0x0800f5dd
 800ee60:	0800f5ee 	.word	0x0800f5ee

0800ee64 <__swbuf_r>:
 800ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	4614      	mov	r4, r2
 800ee6a:	4605      	mov	r5, r0
 800ee6c:	b118      	cbz	r0, 800ee76 <__swbuf_r+0x12>
 800ee6e:	6a03      	ldr	r3, [r0, #32]
 800ee70:	b90b      	cbnz	r3, 800ee76 <__swbuf_r+0x12>
 800ee72:	f7fd fa59 	bl	800c328 <__sinit>
 800ee76:	69a3      	ldr	r3, [r4, #24]
 800ee78:	60a3      	str	r3, [r4, #8]
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	071a      	lsls	r2, r3, #28
 800ee7e:	d501      	bpl.n	800ee84 <__swbuf_r+0x20>
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	b943      	cbnz	r3, 800ee96 <__swbuf_r+0x32>
 800ee84:	4621      	mov	r1, r4
 800ee86:	4628      	mov	r0, r5
 800ee88:	f000 f82a 	bl	800eee0 <__swsetup_r>
 800ee8c:	b118      	cbz	r0, 800ee96 <__swbuf_r+0x32>
 800ee8e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ee92:	4638      	mov	r0, r7
 800ee94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	6922      	ldr	r2, [r4, #16]
 800ee9a:	b2f6      	uxtb	r6, r6
 800ee9c:	1a98      	subs	r0, r3, r2
 800ee9e:	6963      	ldr	r3, [r4, #20]
 800eea0:	4637      	mov	r7, r6
 800eea2:	4283      	cmp	r3, r0
 800eea4:	dc05      	bgt.n	800eeb2 <__swbuf_r+0x4e>
 800eea6:	4621      	mov	r1, r4
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f7fe fe25 	bl	800daf8 <_fflush_r>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d1ed      	bne.n	800ee8e <__swbuf_r+0x2a>
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	60a3      	str	r3, [r4, #8]
 800eeb8:	6823      	ldr	r3, [r4, #0]
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	6022      	str	r2, [r4, #0]
 800eebe:	701e      	strb	r6, [r3, #0]
 800eec0:	6962      	ldr	r2, [r4, #20]
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d004      	beq.n	800eed2 <__swbuf_r+0x6e>
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	07db      	lsls	r3, r3, #31
 800eecc:	d5e1      	bpl.n	800ee92 <__swbuf_r+0x2e>
 800eece:	2e0a      	cmp	r6, #10
 800eed0:	d1df      	bne.n	800ee92 <__swbuf_r+0x2e>
 800eed2:	4621      	mov	r1, r4
 800eed4:	4628      	mov	r0, r5
 800eed6:	f7fe fe0f 	bl	800daf8 <_fflush_r>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d0d9      	beq.n	800ee92 <__swbuf_r+0x2e>
 800eede:	e7d6      	b.n	800ee8e <__swbuf_r+0x2a>

0800eee0 <__swsetup_r>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4b29      	ldr	r3, [pc, #164]	@ (800ef88 <__swsetup_r+0xa8>)
 800eee4:	4605      	mov	r5, r0
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	460c      	mov	r4, r1
 800eeea:	b118      	cbz	r0, 800eef4 <__swsetup_r+0x14>
 800eeec:	6a03      	ldr	r3, [r0, #32]
 800eeee:	b90b      	cbnz	r3, 800eef4 <__swsetup_r+0x14>
 800eef0:	f7fd fa1a 	bl	800c328 <__sinit>
 800eef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eef8:	0719      	lsls	r1, r3, #28
 800eefa:	d422      	bmi.n	800ef42 <__swsetup_r+0x62>
 800eefc:	06da      	lsls	r2, r3, #27
 800eefe:	d407      	bmi.n	800ef10 <__swsetup_r+0x30>
 800ef00:	2209      	movs	r2, #9
 800ef02:	602a      	str	r2, [r5, #0]
 800ef04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef0c:	81a3      	strh	r3, [r4, #12]
 800ef0e:	e033      	b.n	800ef78 <__swsetup_r+0x98>
 800ef10:	0758      	lsls	r0, r3, #29
 800ef12:	d512      	bpl.n	800ef3a <__swsetup_r+0x5a>
 800ef14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef16:	b141      	cbz	r1, 800ef2a <__swsetup_r+0x4a>
 800ef18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef1c:	4299      	cmp	r1, r3
 800ef1e:	d002      	beq.n	800ef26 <__swsetup_r+0x46>
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7fd fb1d 	bl	800c560 <_free_r>
 800ef26:	2300      	movs	r3, #0
 800ef28:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	2300      	movs	r3, #0
 800ef34:	6063      	str	r3, [r4, #4]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f043 0308 	orr.w	r3, r3, #8
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	6923      	ldr	r3, [r4, #16]
 800ef44:	b94b      	cbnz	r3, 800ef5a <__swsetup_r+0x7a>
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef50:	d003      	beq.n	800ef5a <__swsetup_r+0x7a>
 800ef52:	4621      	mov	r1, r4
 800ef54:	4628      	mov	r0, r5
 800ef56:	f000 f890 	bl	800f07a <__smakebuf_r>
 800ef5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef5e:	f013 0201 	ands.w	r2, r3, #1
 800ef62:	d00a      	beq.n	800ef7a <__swsetup_r+0x9a>
 800ef64:	2200      	movs	r2, #0
 800ef66:	60a2      	str	r2, [r4, #8]
 800ef68:	6962      	ldr	r2, [r4, #20]
 800ef6a:	4252      	negs	r2, r2
 800ef6c:	61a2      	str	r2, [r4, #24]
 800ef6e:	6922      	ldr	r2, [r4, #16]
 800ef70:	b942      	cbnz	r2, 800ef84 <__swsetup_r+0xa4>
 800ef72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef76:	d1c5      	bne.n	800ef04 <__swsetup_r+0x24>
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
 800ef7a:	0799      	lsls	r1, r3, #30
 800ef7c:	bf58      	it	pl
 800ef7e:	6962      	ldrpl	r2, [r4, #20]
 800ef80:	60a2      	str	r2, [r4, #8]
 800ef82:	e7f4      	b.n	800ef6e <__swsetup_r+0x8e>
 800ef84:	2000      	movs	r0, #0
 800ef86:	e7f7      	b.n	800ef78 <__swsetup_r+0x98>
 800ef88:	200002f4 	.word	0x200002f4

0800ef8c <_raise_r>:
 800ef8c:	291f      	cmp	r1, #31
 800ef8e:	b538      	push	{r3, r4, r5, lr}
 800ef90:	4605      	mov	r5, r0
 800ef92:	460c      	mov	r4, r1
 800ef94:	d904      	bls.n	800efa0 <_raise_r+0x14>
 800ef96:	2316      	movs	r3, #22
 800ef98:	6003      	str	r3, [r0, #0]
 800ef9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef9e:	bd38      	pop	{r3, r4, r5, pc}
 800efa0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efa2:	b112      	cbz	r2, 800efaa <_raise_r+0x1e>
 800efa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efa8:	b94b      	cbnz	r3, 800efbe <_raise_r+0x32>
 800efaa:	4628      	mov	r0, r5
 800efac:	f000 f830 	bl	800f010 <_getpid_r>
 800efb0:	4622      	mov	r2, r4
 800efb2:	4601      	mov	r1, r0
 800efb4:	4628      	mov	r0, r5
 800efb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efba:	f000 b817 	b.w	800efec <_kill_r>
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d00a      	beq.n	800efd8 <_raise_r+0x4c>
 800efc2:	1c59      	adds	r1, r3, #1
 800efc4:	d103      	bne.n	800efce <_raise_r+0x42>
 800efc6:	2316      	movs	r3, #22
 800efc8:	6003      	str	r3, [r0, #0]
 800efca:	2001      	movs	r0, #1
 800efcc:	e7e7      	b.n	800ef9e <_raise_r+0x12>
 800efce:	2100      	movs	r1, #0
 800efd0:	4620      	mov	r0, r4
 800efd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efd6:	4798      	blx	r3
 800efd8:	2000      	movs	r0, #0
 800efda:	e7e0      	b.n	800ef9e <_raise_r+0x12>

0800efdc <raise>:
 800efdc:	4b02      	ldr	r3, [pc, #8]	@ (800efe8 <raise+0xc>)
 800efde:	4601      	mov	r1, r0
 800efe0:	6818      	ldr	r0, [r3, #0]
 800efe2:	f7ff bfd3 	b.w	800ef8c <_raise_r>
 800efe6:	bf00      	nop
 800efe8:	200002f4 	.word	0x200002f4

0800efec <_kill_r>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	2300      	movs	r3, #0
 800eff0:	4d06      	ldr	r5, [pc, #24]	@ (800f00c <_kill_r+0x20>)
 800eff2:	4604      	mov	r4, r0
 800eff4:	4608      	mov	r0, r1
 800eff6:	4611      	mov	r1, r2
 800eff8:	602b      	str	r3, [r5, #0]
 800effa:	f7f2 ff4c 	bl	8001e96 <_kill>
 800effe:	1c43      	adds	r3, r0, #1
 800f000:	d102      	bne.n	800f008 <_kill_r+0x1c>
 800f002:	682b      	ldr	r3, [r5, #0]
 800f004:	b103      	cbz	r3, 800f008 <_kill_r+0x1c>
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	bd38      	pop	{r3, r4, r5, pc}
 800f00a:	bf00      	nop
 800f00c:	200018d8 	.word	0x200018d8

0800f010 <_getpid_r>:
 800f010:	f7f2 bf3a 	b.w	8001e88 <_getpid>

0800f014 <memchr>:
 800f014:	4603      	mov	r3, r0
 800f016:	b510      	push	{r4, lr}
 800f018:	b2c9      	uxtb	r1, r1
 800f01a:	4402      	add	r2, r0
 800f01c:	4293      	cmp	r3, r2
 800f01e:	4618      	mov	r0, r3
 800f020:	d101      	bne.n	800f026 <memchr+0x12>
 800f022:	2000      	movs	r0, #0
 800f024:	e003      	b.n	800f02e <memchr+0x1a>
 800f026:	7804      	ldrb	r4, [r0, #0]
 800f028:	3301      	adds	r3, #1
 800f02a:	428c      	cmp	r4, r1
 800f02c:	d1f6      	bne.n	800f01c <memchr+0x8>
 800f02e:	bd10      	pop	{r4, pc}

0800f030 <__swhatbuf_r>:
 800f030:	b570      	push	{r4, r5, r6, lr}
 800f032:	460c      	mov	r4, r1
 800f034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f038:	4615      	mov	r5, r2
 800f03a:	2900      	cmp	r1, #0
 800f03c:	461e      	mov	r6, r3
 800f03e:	b096      	sub	sp, #88	@ 0x58
 800f040:	da0c      	bge.n	800f05c <__swhatbuf_r+0x2c>
 800f042:	89a3      	ldrh	r3, [r4, #12]
 800f044:	2100      	movs	r1, #0
 800f046:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f04a:	bf14      	ite	ne
 800f04c:	2340      	movne	r3, #64	@ 0x40
 800f04e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f052:	2000      	movs	r0, #0
 800f054:	6031      	str	r1, [r6, #0]
 800f056:	602b      	str	r3, [r5, #0]
 800f058:	b016      	add	sp, #88	@ 0x58
 800f05a:	bd70      	pop	{r4, r5, r6, pc}
 800f05c:	466a      	mov	r2, sp
 800f05e:	f000 f849 	bl	800f0f4 <_fstat_r>
 800f062:	2800      	cmp	r0, #0
 800f064:	dbed      	blt.n	800f042 <__swhatbuf_r+0x12>
 800f066:	9901      	ldr	r1, [sp, #4]
 800f068:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f06c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f070:	4259      	negs	r1, r3
 800f072:	4159      	adcs	r1, r3
 800f074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f078:	e7eb      	b.n	800f052 <__swhatbuf_r+0x22>

0800f07a <__smakebuf_r>:
 800f07a:	898b      	ldrh	r3, [r1, #12]
 800f07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f07e:	079d      	lsls	r5, r3, #30
 800f080:	4606      	mov	r6, r0
 800f082:	460c      	mov	r4, r1
 800f084:	d507      	bpl.n	800f096 <__smakebuf_r+0x1c>
 800f086:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f08a:	6023      	str	r3, [r4, #0]
 800f08c:	6123      	str	r3, [r4, #16]
 800f08e:	2301      	movs	r3, #1
 800f090:	6163      	str	r3, [r4, #20]
 800f092:	b003      	add	sp, #12
 800f094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f096:	466a      	mov	r2, sp
 800f098:	ab01      	add	r3, sp, #4
 800f09a:	f7ff ffc9 	bl	800f030 <__swhatbuf_r>
 800f09e:	9f00      	ldr	r7, [sp, #0]
 800f0a0:	4605      	mov	r5, r0
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f7fd fdff 	bl	800cca8 <_malloc_r>
 800f0aa:	b948      	cbnz	r0, 800f0c0 <__smakebuf_r+0x46>
 800f0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0b0:	059a      	lsls	r2, r3, #22
 800f0b2:	d4ee      	bmi.n	800f092 <__smakebuf_r+0x18>
 800f0b4:	f023 0303 	bic.w	r3, r3, #3
 800f0b8:	f043 0302 	orr.w	r3, r3, #2
 800f0bc:	81a3      	strh	r3, [r4, #12]
 800f0be:	e7e2      	b.n	800f086 <__smakebuf_r+0xc>
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0ca:	81a3      	strh	r3, [r4, #12]
 800f0cc:	9b01      	ldr	r3, [sp, #4]
 800f0ce:	6020      	str	r0, [r4, #0]
 800f0d0:	b15b      	cbz	r3, 800f0ea <__smakebuf_r+0x70>
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0d8:	f000 f81e 	bl	800f118 <_isatty_r>
 800f0dc:	b128      	cbz	r0, 800f0ea <__smakebuf_r+0x70>
 800f0de:	89a3      	ldrh	r3, [r4, #12]
 800f0e0:	f023 0303 	bic.w	r3, r3, #3
 800f0e4:	f043 0301 	orr.w	r3, r3, #1
 800f0e8:	81a3      	strh	r3, [r4, #12]
 800f0ea:	89a3      	ldrh	r3, [r4, #12]
 800f0ec:	431d      	orrs	r5, r3
 800f0ee:	81a5      	strh	r5, [r4, #12]
 800f0f0:	e7cf      	b.n	800f092 <__smakebuf_r+0x18>
	...

0800f0f4 <_fstat_r>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	4d06      	ldr	r5, [pc, #24]	@ (800f114 <_fstat_r+0x20>)
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4608      	mov	r0, r1
 800f0fe:	4611      	mov	r1, r2
 800f100:	602b      	str	r3, [r5, #0]
 800f102:	f7f2 ff27 	bl	8001f54 <_fstat>
 800f106:	1c43      	adds	r3, r0, #1
 800f108:	d102      	bne.n	800f110 <_fstat_r+0x1c>
 800f10a:	682b      	ldr	r3, [r5, #0]
 800f10c:	b103      	cbz	r3, 800f110 <_fstat_r+0x1c>
 800f10e:	6023      	str	r3, [r4, #0]
 800f110:	bd38      	pop	{r3, r4, r5, pc}
 800f112:	bf00      	nop
 800f114:	200018d8 	.word	0x200018d8

0800f118 <_isatty_r>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	2300      	movs	r3, #0
 800f11c:	4d05      	ldr	r5, [pc, #20]	@ (800f134 <_isatty_r+0x1c>)
 800f11e:	4604      	mov	r4, r0
 800f120:	4608      	mov	r0, r1
 800f122:	602b      	str	r3, [r5, #0]
 800f124:	f7f2 ff25 	bl	8001f72 <_isatty>
 800f128:	1c43      	adds	r3, r0, #1
 800f12a:	d102      	bne.n	800f132 <_isatty_r+0x1a>
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	b103      	cbz	r3, 800f132 <_isatty_r+0x1a>
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	200018d8 	.word	0x200018d8

0800f138 <_init>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	bf00      	nop
 800f13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f13e:	bc08      	pop	{r3}
 800f140:	469e      	mov	lr, r3
 800f142:	4770      	bx	lr

0800f144 <_fini>:
 800f144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f146:	bf00      	nop
 800f148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f14a:	bc08      	pop	{r3}
 800f14c:	469e      	mov	lr, r3
 800f14e:	4770      	bx	lr
