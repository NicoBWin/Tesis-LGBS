
Tesis_LGBS_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fae4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800fbf8  0800fbf8  00010bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100ac  080100ac  00012348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080100ac  080100ac  000110ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100b4  080100b4  00012348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100b4  080100b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080100b8  080100b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  080100bc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001548  20000348  08010404  00012348  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001890  08010404  00012890  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00012348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d33  00000000  00000000  00012371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004437  00000000  00000000  0002a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0002e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108d  00000000  00000000  0002fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce14  00000000  00000000  00030b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019eef  00000000  00000000  0004d959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009678b  00000000  00000000  00067848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdfd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e04  00000000  00000000  000fe018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00104e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800fbdc 	.word	0x0800fbdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800fbdc 	.word	0x0800fbdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	2300      	movs	r3, #0
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	f7ff fc1f 	bl	80009bc <__aeabi_dcmplt>
 800117e:	b928      	cbnz	r0, 800118c <__aeabi_d2lz+0x1c>
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001188:	f000 b80a 	b.w	80011a0 <__aeabi_d2ulz>
 800118c:	4620      	mov	r0, r4
 800118e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001192:	f000 f805 	bl	80011a0 <__aeabi_d2ulz>
 8001196:	4240      	negs	r0, r0
 8001198:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	bf00      	nop

080011a0 <__aeabi_d2ulz>:
 80011a0:	b5d0      	push	{r4, r6, r7, lr}
 80011a2:	2200      	movs	r2, #0
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <__aeabi_d2ulz+0x34>)
 80011a6:	4606      	mov	r6, r0
 80011a8:	460f      	mov	r7, r1
 80011aa:	f7ff f995 	bl	80004d8 <__aeabi_dmul>
 80011ae:	f7ff fc55 	bl	8000a5c <__aeabi_d2uiz>
 80011b2:	4604      	mov	r4, r0
 80011b4:	f7ff f916 	bl	80003e4 <__aeabi_ui2d>
 80011b8:	2200      	movs	r2, #0
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <__aeabi_d2ulz+0x38>)
 80011bc:	f7ff f98c 	bl	80004d8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4630      	mov	r0, r6
 80011c6:	4639      	mov	r1, r7
 80011c8:	f7fe ffce 	bl	8000168 <__aeabi_dsub>
 80011cc:	f7ff fc46 	bl	8000a5c <__aeabi_d2uiz>
 80011d0:	4621      	mov	r1, r4
 80011d2:	bdd0      	pop	{r4, r6, r7, pc}
 80011d4:	3df00000 	.word	0x3df00000
 80011d8:	41f00000 	.word	0x41f00000

080011dc <set_speed>:
uint32_t last_mot_speed_count = 0;
uint32_t mot_speed_setpoint = 0;
uint8_t overflow_detected = 1;
uint8_t output_mode = SINE; // 0: square, 1: Sinewave
void set_speed(float value)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	mot_speed_setpoint = 27.7778e3f/(value);
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4807      	ldr	r0, [pc, #28]	@ (8001204 <set_speed+0x28>)
 80011e8:	f7ff fe6a 	bl	8000ec0 <__aeabi_fdiv>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff9e 	bl	8001130 <__aeabi_f2uiz>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <set_speed+0x2c>)
 80011f8:	6013      	str	r3, [r2, #0]
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	46d9039a 	.word	0x46d9039a
 8001208:	2000036c 	.word	0x2000036c

0800120c <get_speed>:

float get_speed(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	return 27.7778e3f/(float)mot_speed_setpoint;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <get_speed+0x20>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fd47 	bl	8000ca8 <__aeabi_ui2f>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	4804      	ldr	r0, [pc, #16]	@ (8001230 <get_speed+0x24>)
 8001220:	f7ff fe4e 	bl	8000ec0 <__aeabi_fdiv>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000036c 	.word	0x2000036c
 8001230:	46d9039a 	.word	0x46d9039a

08001234 <get_speed_meas>:

float get_speed_meas(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	float res = 27.7778e3f/(float)(last_mot_speed_count);
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <get_speed_meas+0x28>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fd32 	bl	8000ca8 <__aeabi_ui2f>
 8001244:	4603      	mov	r3, r0
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <get_speed_meas+0x2c>)
 800124a:	f7ff fe39 	bl	8000ec0 <__aeabi_fdiv>
 800124e:	4603      	mov	r3, r0
 8001250:	607b      	str	r3, [r7, #4]
	return res;
 8001252:	687b      	ldr	r3, [r7, #4]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000368 	.word	0x20000368
 8001260:	46d9039a 	.word	0x46d9039a

08001264 <HAL_TIM_IC_CaptureCallback>:
// Input compare
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	// current is in the order of 500 per amp
	/*
	 * In principle an error arround 1k cnts should increase the current by less than an amp to soften the current ramp.
	 * ESTO SALIO A OJO, NO HAY MATEMATICA
	 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800126c:	2102      	movs	r1, #2
 800126e:	484e      	ldr	r0, [pc, #312]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001270:	f002 fb83 	bl	800397a <HAL_GPIO_TogglePin>
	mot_speed_count = htim->Instance->CCR1;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127a:	4a4c      	ldr	r2, [pc, #304]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x148>)
 800127c:	6013      	str	r3, [r2, #0]
	if (mot_speed_count < 12000){
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x148>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001286:	4293      	cmp	r3, r2
 8001288:	d803      	bhi.n	8001292 <HAL_TIM_IC_CaptureCallback+0x2e>
		mot_speed_count = last_mot_speed_count;
 800128a:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a47      	ldr	r2, [pc, #284]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x148>)
 8001290:	6013      	str	r3, [r2, #0]
	}
	hall_A = HAL_GPIO_ReadPin(HALL_PORT, HALL_A);
 8001292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001296:	4847      	ldr	r0, [pc, #284]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001298:	f002 fb40 	bl	800391c <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b45      	ldr	r3, [pc, #276]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x154>)
 80012a2:	701a      	strb	r2, [r3, #0]
	hall_B = HAL_GPIO_ReadPin(HALL_PORT, HALL_B);
 80012a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a8:	4842      	ldr	r0, [pc, #264]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x150>)
 80012aa:	f002 fb37 	bl	800391c <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b42      	ldr	r3, [pc, #264]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0x158>)
 80012b4:	701a      	strb	r2, [r3, #0]
	hall_C = HAL_GPIO_ReadPin(HALL_PORT, HALL_C);
 80012b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ba:	483e      	ldr	r0, [pc, #248]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x150>)
 80012bc:	f002 fb2e 	bl	800391c <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b3e      	ldr	r3, [pc, #248]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80012c6:	701a      	strb	r2, [r3, #0]

	state = (hall_A << 2) + (hall_B << 1) + hall_C;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x154>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b3a      	ldr	r3, [pc, #232]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0x158>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4a38      	ldr	r2, [pc, #224]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x160>)
 80012e6:	801a      	strh	r2, [r3, #0]

	htim4.Instance->CNT = 0;
 80012e8:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x164>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	@ 0x24
//	}
//	else {
//		output_mode = SINE;
//	}

	switch (state) {
 80012f0:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x160>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d82c      	bhi.n	8001354 <HAL_TIM_IC_CaptureCallback+0xf0>
 80012fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001300 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	08001319 	.word	0x08001319
 8001304:	08001341 	.word	0x08001341
 8001308:	0800134b 	.word	0x0800134b
 800130c:	0800132d 	.word	0x0800132d
 8001310:	08001323 	.word	0x08001323
 8001314:	08001337 	.word	0x08001337
			case 0b001:
				set_spi_data(3072);
 8001318:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800131c:	f000 f9a0 	bl	8001660 <set_spi_data>
				break;
 8001320:	e01d      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0xfa>
			case 0b101:
				set_spi_data(3755);
 8001322:	f640 60ab 	movw	r0, #3755	@ 0xeab
 8001326:	f000 f99b 	bl	8001660 <set_spi_data>
				break;
 800132a:	e018      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0xfa>
			case 0b100:
				set_spi_data(341);
 800132c:	f240 1055 	movw	r0, #341	@ 0x155
 8001330:	f000 f996 	bl	8001660 <set_spi_data>
				break;
 8001334:	e013      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0xfa>
			case 0b110:
				set_spi_data(1024);
 8001336:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800133a:	f000 f991 	bl	8001660 <set_spi_data>
				break;
 800133e:	e00e      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0xfa>
			case 0b010:
				set_spi_data(1707);
 8001340:	f240 60ab 	movw	r0, #1707	@ 0x6ab
 8001344:	f000 f98c 	bl	8001660 <set_spi_data>
				break;
 8001348:	e009      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0xfa>
			case 0b011:
				set_spi_data(2391);
 800134a:	f640 1057 	movw	r0, #2391	@ 0x957
 800134e:	f000 f987 	bl	8001660 <set_spi_data>
				break;
 8001352:	e004      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0xfa>

			default:
				set_spi_data(3072);
 8001354:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001358:	f000 f982 	bl	8001660 <set_spi_data>
				break;
 800135c:	bf00      	nop
		}
	if (output_mode == SINE){
 800135e:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x168>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10f      	bne.n	8001386 <HAL_TIM_IC_CaptureCallback+0x122>
		freq = 1000000/mot_speed_count;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x148>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001374:	801a      	strh	r2, [r3, #0]
		set_offset(freq/2);
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f97e 	bl	8001680 <set_offset>
 8001384:	e005      	b.n	8001392 <HAL_TIM_IC_CaptureCallback+0x12e>
	}
	else {
		set_offset(0);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f97a 	bl	8001680 <set_offset>
		overflow_detected = 0;
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0x174>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
	}
	last_mot_speed_count = mot_speed_count;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x148>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001398:	6013      	str	r3, [r2, #0]
	mot_speed_count = 0;
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x148>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	20000364 	.word	0x20000364
 80013b0:	20000368 	.word	0x20000368
 80013b4:	40010800 	.word	0x40010800
 80013b8:	20000370 	.word	0x20000370
 80013bc:	20000371 	.word	0x20000371
 80013c0:	20000372 	.word	0x20000372
 80013c4:	20000374 	.word	0x20000374
 80013c8:	200004ec 	.word	0x200004ec
 80013cc:	20000001 	.word	0x20000001
 80013d0:	000f4240 	.word	0x000f4240
 80013d4:	20000376 	.word	0x20000376
 80013d8:	20000000 	.word	0x20000000

080013dc <HAL_TIM_PeriodElapsedCallback>:

// Overflow
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(htim);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f005 f975 	bl	80066d4 <HAL_TIM_Base_Stop>
	overflow_detected = 1;
 80013ea:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80013f0:	2101      	movs	r1, #1
 80013f2:	4804      	ldr	r0, [pc, #16]	@ (8001404 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013f4:	f002 fac1 	bl	800397a <HAL_GPIO_TogglePin>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000000 	.word	0x20000000
 8001404:	40010c00 	.word	0x40010c00

08001408 <curr_control_init>:
static int16_t max_curr = 0;
static bool calibrated = false;


void curr_control_init(ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2101      	movs	r1, #1
 8001416:	4817      	ldr	r0, [pc, #92]	@ (8001474 <curr_control_init+0x6c>)
 8001418:	f002 fa97 	bl	800394a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2102      	movs	r1, #2
 8001420:	4814      	ldr	r0, [pc, #80]	@ (8001474 <curr_control_init+0x6c>)
 8001422:	f002 fa92 	bl	800394a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_B, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2104      	movs	r1, #4
 800142a:	4812      	ldr	r0, [pc, #72]	@ (8001474 <curr_control_init+0x6c>)
 800142c:	f002 fa8d 	bl	800394a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_B, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2108      	movs	r1, #8
 8001434:	480f      	ldr	r0, [pc, #60]	@ (8001474 <curr_control_init+0x6c>)
 8001436:	f002 fa88 	bl	800394a <HAL_GPIO_WritePin>

	if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f001 fcbe 	bl	8002dbc <HAL_ADCEx_Calibration_Start>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <curr_control_init+0x42>
	{
		Error_Handler();
 8001446:	f000 fd49 	bl	8001edc <Error_Handler>
	}

	if (HAL_ADC_Start_IT(hadc) != HAL_OK)
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f001 f998 	bl	8002780 <HAL_ADC_Start_IT>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <curr_control_init+0x52>
	{
		Error_Handler();
 8001456:	f000 fd41 	bl	8001edc <Error_Handler>
	}

	if (HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1) != HAL_OK)
 800145a:	2100      	movs	r1, #0
 800145c:	6838      	ldr	r0, [r7, #0]
 800145e:	f006 f8d3 	bl	8007608 <HAL_TIMEx_PWMN_Start>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <curr_control_init+0x64>
	{
		Error_Handler();
 8001468:	f000 fd38 	bl	8001edc <Error_Handler>
	}


}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40010800 	.word	0x40010800

08001478 <get_I_meas>:

float get_I_meas()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	return (float)(adc_value-i_offset)/(float)SENS_SENSITIVITY;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <get_I_meas+0x2c>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	461a      	mov	r2, r3
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <get_I_meas+0x30>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc0f 	bl	8000cb0 <__aeabi_i2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4905      	ldr	r1, [pc, #20]	@ (80014ac <get_I_meas+0x34>)
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd12 	bl	8000ec0 <__aeabi_fdiv>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000378 	.word	0x20000378
 80014a8:	2000037c 	.word	0x2000037c
 80014ac:	43f80000 	.word	0x43f80000

080014b0 <get_I_float>:

float get_I_float()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	return (float)(i_ref_int-i_offset)/(float)SENS_SENSITIVITY;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <get_I_float+0x2c>)
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <get_I_float+0x30>)
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fbf3 	bl	8000cb0 <__aeabi_i2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4905      	ldr	r1, [pc, #20]	@ (80014e4 <get_I_float+0x34>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fcf6 	bl	8000ec0 <__aeabi_fdiv>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000037a 	.word	0x2000037a
 80014e0:	2000037c 	.word	0x2000037c
 80014e4:	43f80000 	.word	0x43f80000

080014e8 <set_I_float>:
uint16_t get_I_int()
{
	return i_ref_int - i_offset;
}
void set_I_float(float i)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	if (i > MAX_CURR || i < 0.0)
 80014f0:	4916      	ldr	r1, [pc, #88]	@ (800154c <set_I_float+0x64>)
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fdec 	bl	80010d0 <__aeabi_fcmpgt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <set_I_float+0x26>
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fdc6 	bl	8001094 <__aeabi_fcmplt>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <set_I_float+0x2a>
	{
		i = MAX_CURR;
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <set_I_float+0x64>)
 8001510:	607b      	str	r3, [r7, #4]
	}
	i_ref_int = i * SENS_SENSITIVITY + i_offset;
 8001512:	490f      	ldr	r1, [pc, #60]	@ (8001550 <set_I_float+0x68>)
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fc1f 	bl	8000d58 <__aeabi_fmul>
 800151a:	4603      	mov	r3, r0
 800151c:	461c      	mov	r4, r3
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <set_I_float+0x6c>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbc3 	bl	8000cb0 <__aeabi_i2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4619      	mov	r1, r3
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff fb0a 	bl	8000b48 <__addsf3>
 8001534:	4603      	mov	r3, r0
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fdd4 	bl	80010e4 <__aeabi_f2iz>
 800153c:	4603      	mov	r3, r0
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <set_I_float+0x70>)
 8001542:	801a      	strh	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	40400000 	.word	0x40400000
 8001550:	43f80000 	.word	0x43f80000
 8001554:	2000037c 	.word	0x2000037c
 8001558:	2000037a 	.word	0x2000037a

0800155c <HAL_ADC_ConvCpltCallback>:
void set_I_int(uint16_t i)
{
	i_ref_int = i > SENS_SENSITIVITY * MAX_CURR ? max_curr : i + i_offset;
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f001 f9c1 	bl	80028ec <HAL_ADC_GetValue>
 800156a:	4603      	mov	r3, r0
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001570:	801a      	strh	r2, [r3, #0]
	if (!calibrated)
 8001572:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	f083 0301 	eor.w	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01d      	beq.n	80015bc <HAL_ADC_ConvCpltCallback+0x60>
	{
		i_offset = adc_value;
 8001580:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001582:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001586:	4b29      	ldr	r3, [pc, #164]	@ (800162c <HAL_ADC_ConvCpltCallback+0xd0>)
 8001588:	801a      	strh	r2, [r3, #0]
		max_curr = MAX_CURR * SENS_SENSITIVITY + i_offset;
 800158a:	4b28      	ldr	r3, [pc, #160]	@ (800162c <HAL_ADC_ConvCpltCallback+0xd0>)
 800158c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ff37 	bl	8000404 <__aeabi_i2d>
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <HAL_ADC_ConvCpltCallback+0xd4>)
 800159c:	f7fe fde6 	bl	800016c <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fa30 	bl	8000a0c <__aeabi_d2iz>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_ADC_ConvCpltCallback+0xd8>)
 80015b2:	801a      	strh	r2, [r3, #0]
		calibrated = true;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <HAL_ADC_ConvCpltCallback+0xcc>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e02f      	b.n	800161c <HAL_ADC_ConvCpltCallback+0xc0>
	}
	else
	{
		if (i_ref_int == i_offset)
 80015bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <HAL_ADC_ConvCpltCallback+0xdc>)
 80015be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_ADC_ConvCpltCallback+0xd0>)
 80015c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10a      	bne.n	80015e2 <HAL_ADC_ConvCpltCallback+0x86>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	481a      	ldr	r0, [pc, #104]	@ (800163c <HAL_ADC_ConvCpltCallback+0xe0>)
 80015d2:	f002 f9ba 	bl	800394a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2102      	movs	r1, #2
 80015da:	4818      	ldr	r0, [pc, #96]	@ (800163c <HAL_ADC_ConvCpltCallback+0xe0>)
 80015dc:	f002 f9b5 	bl	800394a <HAL_GPIO_WritePin>
			return;
 80015e0:	e01c      	b.n	800161c <HAL_ADC_ConvCpltCallback+0xc0>
		}
		if (adc_value > i_ref_int)
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <HAL_ADC_ConvCpltCallback+0xc8>)
 80015e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_ADC_ConvCpltCallback+0xdc>)
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dd0a      	ble.n	8001608 <HAL_ADC_ConvCpltCallback+0xac>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	4811      	ldr	r0, [pc, #68]	@ (800163c <HAL_ADC_ConvCpltCallback+0xe0>)
 80015f8:	f002 f9a7 	bl	800394a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2102      	movs	r1, #2
 8001600:	480e      	ldr	r0, [pc, #56]	@ (800163c <HAL_ADC_ConvCpltCallback+0xe0>)
 8001602:	f002 f9a2 	bl	800394a <HAL_GPIO_WritePin>
 8001606:	e009      	b.n	800161c <HAL_ADC_ConvCpltCallback+0xc0>
		}
		else
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2102      	movs	r1, #2
 800160c:	480b      	ldr	r0, [pc, #44]	@ (800163c <HAL_ADC_ConvCpltCallback+0xe0>)
 800160e:	f002 f99c 	bl	800394a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2101      	movs	r1, #1
 8001616:	4809      	ldr	r0, [pc, #36]	@ (800163c <HAL_ADC_ConvCpltCallback+0xe0>)
 8001618:	f002 f997 	bl	800394a <HAL_GPIO_WritePin>
		}
	}
}
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000378 	.word	0x20000378
 8001628:	20000380 	.word	0x20000380
 800162c:	2000037c 	.word	0x2000037c
 8001630:	40974000 	.word	0x40974000
 8001634:	2000037e 	.word	0x2000037e
 8001638:	2000037a 	.word	0x2000037a
 800163c:	40010800 	.word	0x40010800

08001640 <init_LUT_comms>:
uint16_t offset = 0;
uint16_t spi_data = 0;


void init_LUT_comms(SPI_HandleTypeDef *hspi)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(hspi, &spi_data, 23);
 8001648:	2217      	movs	r2, #23
 800164a:	4904      	ldr	r1, [pc, #16]	@ (800165c <init_LUT_comms+0x1c>)
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f004 fcf9 	bl	8006044 <HAL_SPI_Transmit_DMA>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000384 	.word	0x20000384

08001660 <set_spi_data>:

void set_spi_data(uint16_t value)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
	spi_data = value;
 800166a:	4a04      	ldr	r2, [pc, #16]	@ (800167c <set_spi_data+0x1c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	8013      	strh	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000384 	.word	0x20000384

08001680 <set_offset>:
{
	return spi_data;
}

void set_offset(uint16_t value)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
	offset = value;
 800168a:	4a04      	ldr	r2, [pc, #16]	@ (800169c <set_offset+0x1c>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	8013      	strh	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000382 	.word	0x20000382

080016a0 <HAL_SPI_TxCpltCallback>:
	return offset;
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

	if (spi_data + offset > LUT_SIZE-1) {
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <HAL_SPI_TxCpltCallback+0x4c>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_SPI_TxCpltCallback+0x50>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016b8:	db0b      	blt.n	80016d2 <HAL_SPI_TxCpltCallback+0x32>
		spi_data = spi_data + offset - (LUT_SIZE - 1);
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <HAL_SPI_TxCpltCallback+0x4c>)
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_SPI_TxCpltCallback+0x50>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <HAL_SPI_TxCpltCallback+0x4c>)
 80016ce:	801a      	strh	r2, [r3, #0]
	}
	else {
		spi_data += offset;
	}
}
 80016d0:	e007      	b.n	80016e2 <HAL_SPI_TxCpltCallback+0x42>
		spi_data += offset;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_SPI_TxCpltCallback+0x4c>)
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_SPI_TxCpltCallback+0x50>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_SPI_TxCpltCallback+0x4c>)
 80016e0:	801a      	strh	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	20000384 	.word	0x20000384
 80016f0:	20000382 	.word	0x20000382

080016f4 <command_I>:

#include "stdio.h"
#include "string.h"


void command_I(uint8_t *buff, uint16_t size){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
	static float i;
	if (buff[1] == '?')
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3301      	adds	r3, #1
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b3f      	cmp	r3, #63	@ 0x3f
 8001708:	d112      	bne.n	8001730 <command_I+0x3c>
	{
		gcvt(get_I_float(), 3, buff);
 800170a:	f7ff fed1 	bl	80014b0 <get_I_float>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fe89 	bl	8000428 <__aeabi_f2d>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2203      	movs	r2, #3
 800171a:	f00b fa95 	bl	800cc48 <gcvt>
		buff[4] = '\n';
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	220a      	movs	r2, #10
 8001724:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 8001726:	2105      	movs	r1, #5
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f00a f86d 	bl	800b808 <CDC_Transmit_FS>
 800172e:	e02f      	b.n	8001790 <command_I+0x9c>
	}
	else if (buff[1] == '=')
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b3d      	cmp	r3, #61	@ 0x3d
 8001738:	d113      	bne.n	8001762 <command_I+0x6e>
	{
		i = atof(&buff[2]);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3302      	adds	r3, #2
 800173e:	4618      	mov	r0, r3
 8001740:	f00a fc7a 	bl	800c038 <atof>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f9a6 	bl	8000a9c <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <command_I+0xb8>)
 8001754:	6013      	str	r3, [r2, #0]
		set_I_float(i);
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <command_I+0xb8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fec4 	bl	80014e8 <set_I_float>
 8001760:	e016      	b.n	8001790 <command_I+0x9c>
	}
	else if (buff[1] == 'm')
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3301      	adds	r3, #1
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b6d      	cmp	r3, #109	@ 0x6d
 800176a:	d111      	bne.n	8001790 <command_I+0x9c>
	{
		gcvt(get_I_meas(), 3, buff);
 800176c:	f7ff fe84 	bl	8001478 <get_I_meas>
 8001770:	4603      	mov	r3, r0
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe58 	bl	8000428 <__aeabi_f2d>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2203      	movs	r2, #3
 800177c:	f00b fa64 	bl	800cc48 <gcvt>
		buff[4] = '\n';
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	220a      	movs	r2, #10
 8001786:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 8001788:	2105      	movs	r1, #5
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f00a f83c 	bl	800b808 <CDC_Transmit_FS>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 8001790:	bf00      	nop
 8001792:	2101      	movs	r1, #1
 8001794:	200a      	movs	r0, #10
 8001796:	f00a f837 	bl	800b808 <CDC_Transmit_FS>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d0f8      	beq.n	8001792 <command_I+0x9e>
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000388 	.word	0x20000388

080017b0 <command_S>:

void command_S(uint8_t *buff, uint16_t size){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
	static uint16_t data;
	if (buff[1] == '?')
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3301      	adds	r3, #1
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80017c4:	d11c      	bne.n	8001800 <command_S+0x50>
	{
		gcvt(get_speed(), 2, buff);
 80017c6:	f7ff fd21 	bl	800120c <get_speed>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe2b 	bl	8000428 <__aeabi_f2d>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2202      	movs	r2, #2
 80017d6:	f00b fa37 	bl	800cc48 <gcvt>
		auto len = strlen(buff);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fcb8 	bl	8000150 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	60fb      	str	r3, [r7, #12]
		buff[len] = '\n';
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	220a      	movs	r2, #10
 80017ec:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, len + 1);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f00a f805 	bl	800b808 <CDC_Transmit_FS>
 80017fe:	e03e      	b.n	800187e <command_S+0xce>
	}
	else if (buff[1] == '=')
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3301      	adds	r3, #1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b3d      	cmp	r3, #61	@ 0x3d
 8001808:	d118      	bne.n	800183c <command_S+0x8c>
	{
		data = atof(&buff[2]);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3302      	adds	r3, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f00a fc12 	bl	800c038 <atof>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f91e 	bl	8000a5c <__aeabi_d2uiz>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <command_S+0xe8>)
 8001826:	801a      	strh	r2, [r3, #0]
		set_speed(data);
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <command_S+0xe8>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fa3b 	bl	8000ca8 <__aeabi_ui2f>
 8001832:	4603      	mov	r3, r0
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fcd1 	bl	80011dc <set_speed>
 800183a:	e020      	b.n	800187e <command_S+0xce>
	}
	else if (buff[1] == 'm')
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b6d      	cmp	r3, #109	@ 0x6d
 8001844:	d11b      	bne.n	800187e <command_S+0xce>
	{
		float speed = (float)get_speed_meas();
 8001846:	f7ff fcf5 	bl	8001234 <get_speed_meas>
 800184a:	6178      	str	r0, [r7, #20]
		gcvt(speed, 2, buff);
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7fe fdeb 	bl	8000428 <__aeabi_f2d>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2202      	movs	r2, #2
 8001856:	f00b f9f7 	bl	800cc48 <gcvt>
		auto len = strlen(buff);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7fe fc78 	bl	8000150 <strlen>
 8001860:	4603      	mov	r3, r0
 8001862:	613b      	str	r3, [r7, #16]
		buff[len] = '\n';
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	220a      	movs	r2, #10
 800186c:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, len + 1);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	b29b      	uxth	r3, r3
 8001872:	3301      	adds	r3, #1
 8001874:	b29b      	uxth	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f009 ffc5 	bl	800b808 <CDC_Transmit_FS>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 800187e:	bf00      	nop
 8001880:	2101      	movs	r1, #1
 8001882:	200a      	movs	r0, #10
 8001884:	f009 ffc0 	bl	800b808 <CDC_Transmit_FS>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	d0f8      	beq.n	8001880 <command_S+0xd0>
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000038c 	.word	0x2000038c

0800189c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a0:	f000 fe34 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a4:	f000 f866 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a8:	f000 fa7e 	bl	8001da8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ac:	f000 fa5e 	bl	8001d6c <MX_DMA_Init>
  MX_SPI1_Init();
 80018b0:	f000 f8fc 	bl	8001aac <MX_SPI1_Init>
  MX_ADC1_Init();
 80018b4:	f000 f8bc 	bl	8001a30 <MX_ADC1_Init>
  MX_TIM3_Init();
 80018b8:	f000 f996 	bl	8001be8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80018bc:	f009 fed8 	bl	800b670 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80018c0:	f000 f926 	bl	8001b10 <MX_TIM1_Init>
  MX_TIM4_Init();
 80018c4:	f000 fa04 	bl	8001cd0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  curr_control_init(&hadc1, &htim3);
 80018c8:	4922      	ldr	r1, [pc, #136]	@ (8001954 <main+0xb8>)
 80018ca:	4823      	ldr	r0, [pc, #140]	@ (8001958 <main+0xbc>)
 80018cc:	f7ff fd9c 	bl	8001408 <curr_control_init>
  init_LUT_comms(&hspi1);
 80018d0:	4822      	ldr	r0, [pc, #136]	@ (800195c <main+0xc0>)
 80018d2:	f7ff feb5 	bl	8001640 <init_LUT_comms>
  HAL_TIMEx_HallSensor_Start_IT(&htim1);
 80018d6:	4822      	ldr	r0, [pc, #136]	@ (8001960 <main+0xc4>)
 80018d8:	f005 fe1c 	bl	8007514 <HAL_TIMEx_HallSensor_Start_IT>
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80018dc:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <main+0xc8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <main+0xc8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim4);
 80018ec:	481d      	ldr	r0, [pc, #116]	@ (8001964 <main+0xc8>)
 80018ee:	f004 ff17 	bl	8006720 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (CDC_data_recieved())
 80018f2:	f009 ffaf 	bl	800b854 <CDC_data_recieved>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0fa      	beq.n	80018f2 <main+0x56>
    {
      rx_usb_amount = CDC_Receive_data(msg, 64);
 80018fc:	2140      	movs	r1, #64	@ 0x40
 80018fe:	481a      	ldr	r0, [pc, #104]	@ (8001968 <main+0xcc>)
 8001900:	f009 ffb2 	bl	800b868 <CDC_Receive_data>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <main+0xd0>)
 800190a:	801a      	strh	r2, [r3, #0]
      switch ((int)msg[0])
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <main+0xcc>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b49      	cmp	r3, #73	@ 0x49
 8001912:	d002      	beq.n	800191a <main+0x7e>
 8001914:	2b53      	cmp	r3, #83	@ 0x53
 8001916:	d007      	beq.n	8001928 <main+0x8c>
 8001918:	e00d      	b.n	8001936 <main+0x9a>
      {
      case 'I':
        command_I(msg, rx_usb_amount);
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <main+0xd0>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	4811      	ldr	r0, [pc, #68]	@ (8001968 <main+0xcc>)
 8001922:	f7ff fee7 	bl	80016f4 <command_I>
        break;
 8001926:	e014      	b.n	8001952 <main+0xb6>
      case 'S':
        command_S(msg, rx_usb_amount);
 8001928:	4b10      	ldr	r3, [pc, #64]	@ (800196c <main+0xd0>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	480e      	ldr	r0, [pc, #56]	@ (8001968 <main+0xcc>)
 8001930:	f7ff ff3e 	bl	80017b0 <command_S>
        break;
 8001934:	e00d      	b.n	8001952 <main+0xb6>
      default:
        CDC_Transmit_FS("\nNo reconocido\n", 15);
 8001936:	210f      	movs	r1, #15
 8001938:	480d      	ldr	r0, [pc, #52]	@ (8001970 <main+0xd4>)
 800193a:	f009 ff65 	bl	800b808 <CDC_Transmit_FS>
        while (CDC_Transmit_FS(msg, rx_usb_amount) == USBD_BUSY)
 800193e:	bf00      	nop
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <main+0xd0>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	4808      	ldr	r0, [pc, #32]	@ (8001968 <main+0xcc>)
 8001948:	f009 ff5e 	bl	800b808 <CDC_Transmit_FS>
 800194c:	4603      	mov	r3, r0
 800194e:	2b01      	cmp	r3, #1
 8001950:	d0f6      	beq.n	8001940 <main+0xa4>
    if (CDC_data_recieved())
 8001952:	e7ce      	b.n	80018f2 <main+0x56>
 8001954:	200004a4 	.word	0x200004a4
 8001958:	20000390 	.word	0x20000390
 800195c:	200003c0 	.word	0x200003c0
 8001960:	2000045c 	.word	0x2000045c
 8001964:	200004ec 	.word	0x200004ec
 8001968:	20000534 	.word	0x20000534
 800196c:	20000574 	.word	0x20000574
 8001970:	0800fbf8 	.word	0x0800fbf8

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	@ 0x50
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800197e:	2228      	movs	r2, #40	@ 0x28
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f00b fa89 	bl	800ce9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a4:	2301      	movs	r3, #1
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b2:	2301      	movs	r3, #1
 80019b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b6:	2302      	movs	r3, #2
 80019b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019c0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 fd4e 	bl	800546c <HAL_RCC_OscConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019d6:	f000 fa81 	bl	8001edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019da:	230f      	movs	r3, #15
 80019dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2102      	movs	r1, #2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 ffba 	bl	8005970 <HAL_RCC_ClockConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a02:	f000 fa6b 	bl	8001edc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001a06:	2312      	movs	r3, #18
 8001a08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 f924 	bl	8005c64 <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a22:	f000 fa5b 	bl	8001edc <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	@ 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a42:	4a19      	ldr	r2, [pc, #100]	@ (8001aa8 <MX_ADC1_Init+0x78>)
 8001a44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a5a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a60:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a6c:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a6e:	f000 fdaf 	bl	80025d0 <HAL_ADC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 fa30 	bl	8001edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_ADC1_Init+0x74>)
 8001a8e:	f001 f801 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a98:	f000 fa20 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000390 	.word	0x20000390
 8001aa8:	40012400 	.word	0x40012400

08001aac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001ab2:	4a16      	ldr	r2, [pc, #88]	@ (8001b0c <MX_SPI1_Init+0x60>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001ac4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ac8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001af0:	220a      	movs	r2, #10
 8001af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001af4:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <MX_SPI1_Init+0x5c>)
 8001af6:	f004 fa21 	bl	8005f3c <HAL_SPI_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001b00:	f000 f9ec 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200003c0 	.word	0x200003c0
 8001b0c:	40013000 	.word	0x40013000

08001b10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	463b      	mov	r3, r7
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b3a:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b3c:	4a29      	ldr	r2, [pc, #164]	@ (8001be4 <MX_TIM1_Init+0xd4>)
 8001b3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 432;
 8001b40:	4b27      	ldr	r3, [pc, #156]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b42:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8001b46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b25      	ldr	r3, [pc, #148]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b4e:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b22      	ldr	r3, [pc, #136]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b5c:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b68:	481d      	ldr	r0, [pc, #116]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b6a:	f004 fd64 	bl	8006636 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001b74:	f000 f9b2 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b7c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b7e:	f107 0318 	add.w	r3, r7, #24
 8001b82:	4619      	mov	r1, r3
 8001b84:	4816      	ldr	r0, [pc, #88]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001b86:	f005 f827 	bl	8006bd8 <HAL_TIM_ConfigClockSource>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001b90:	f000 f9a4 	bl	8001edc <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 7;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001bac:	f005 fc00 	bl	80073b0 <HAL_TIMEx_HallSensor_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001bb6:	f000 f991 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001bba:	2350      	movs	r3, #80	@ 0x50
 8001bbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <MX_TIM1_Init+0xd0>)
 8001bc8:	f005 fdbc 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001bd2:	f000 f983 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	@ 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000045c 	.word	0x2000045c
 8001be4:	40012c00 	.word	0x40012c00

08001be8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08e      	sub	sp, #56	@ 0x38
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	f107 0320 	add.w	r3, r7, #32
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	615a      	str	r2, [r3, #20]
 8001c16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c18:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ccc <MX_TIM3_Init+0xe4>)
 8001c1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 720;
 8001c2a:	4b27      	ldr	r3, [pc, #156]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c2c:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8001c30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	4b25      	ldr	r3, [pc, #148]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c3e:	4822      	ldr	r0, [pc, #136]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c40:	f004 fcf9 	bl	8006636 <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c4a:	f000 f947 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481b      	ldr	r0, [pc, #108]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c5c:	f004 ffbc 	bl	8006bd8 <HAL_TIM_ConfigClockSource>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c66:	f000 f939 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c6a:	4817      	ldr	r0, [pc, #92]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c6c:	f004 fdaa 	bl	80067c4 <HAL_TIM_PWM_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c76:	f000 f931 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c82:	f107 0320 	add.w	r3, r7, #32
 8001c86:	4619      	mov	r1, r3
 8001c88:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001c8a:	f005 fd5b 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c94:	f000 f922 	bl	8001edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c98:	2360      	movs	r3, #96	@ 0x60
 8001c9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 180;
 8001c9c:	23b4      	movs	r3, #180	@ 0xb4
 8001c9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	@ (8001cc8 <MX_TIM3_Init+0xe0>)
 8001cb0:	f004 fed0 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cba:	f000 f90f 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3738      	adds	r7, #56	@ 0x38
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200004a4 	.word	0x200004a4
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001cee:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <MX_TIM4_Init+0x98>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001cf4:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001cf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001d00:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001d02:	2264      	movs	r2, #100	@ 0x64
 8001d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d06:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d12:	4814      	ldr	r0, [pc, #80]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001d14:	f004 fc8f 	bl	8006636 <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d1e:	f000 f8dd 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001d30:	f004 ff52 	bl	8006bd8 <HAL_TIM_ConfigClockSource>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d3a:	f000 f8cf 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d46:	463b      	mov	r3, r7
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	@ (8001d64 <MX_TIM4_Init+0x94>)
 8001d4c:	f005 fcfa 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d56:	f000 f8c1 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200004ec 	.word	0x200004ec
 8001d68:	40000800 	.word	0x40000800

08001d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <MX_DMA_Init+0x38>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	@ (8001da4 <MX_DMA_Init+0x38>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6153      	str	r3, [r2, #20]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <MX_DMA_Init+0x38>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	200d      	movs	r0, #13
 8001d90:	f001 f9a3 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d94:	200d      	movs	r0, #13
 8001d96:	f001 f9bc 	bl	8003112 <HAL_NVIC_EnableIRQ>

}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000

08001da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbc:	4b43      	ldr	r3, [pc, #268]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a42      	ldr	r2, [pc, #264]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001dc2:	f043 0320 	orr.w	r3, r3, #32
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b40      	ldr	r3, [pc, #256]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b37      	ldr	r3, [pc, #220]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a36      	ldr	r2, [pc, #216]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <MX_GPIO_Init+0x124>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	210f      	movs	r1, #15
 8001e08:	4831      	ldr	r0, [pc, #196]	@ (8001ed0 <MX_GPIO_Init+0x128>)
 8001e0a:	f001 fd9e 	bl	800394a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2103      	movs	r1, #3
 8001e12:	4830      	ldr	r0, [pc, #192]	@ (8001ed4 <MX_GPIO_Init+0x12c>)
 8001e14:	f001 fd99 	bl	800394a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4828      	ldr	r0, [pc, #160]	@ (8001ed0 <MX_GPIO_Init+0x128>)
 8001e30:	f001 fbf0 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e34:	230e      	movs	r3, #14
 8001e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4821      	ldr	r0, [pc, #132]	@ (8001ed0 <MX_GPIO_Init+0x128>)
 8001e4c:	f001 fbe2 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e50:	2303      	movs	r3, #3
 8001e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	481b      	ldr	r0, [pc, #108]	@ (8001ed4 <MX_GPIO_Init+0x12c>)
 8001e68:	f001 fbd4 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001e6c:	f44f 4372 	mov.w	r3, #61952	@ 0xf200
 8001e70:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4814      	ldr	r0, [pc, #80]	@ (8001ed4 <MX_GPIO_Init+0x12c>)
 8001e82:	f001 fbc7 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480e      	ldr	r0, [pc, #56]	@ (8001ed4 <MX_GPIO_Init+0x12c>)
 8001e9c:	f001 fbba 	bl	8003614 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <MX_GPIO_Init+0x130>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	4a06      	ldr	r2, [pc, #24]	@ (8001ed8 <MX_GPIO_Init+0x130>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	40010000 	.word	0x40010000

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <Error_Handler+0x8>

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6193      	str	r3, [r2, #24]
 8001efa:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <HAL_MspInit+0x60>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_MspInit+0x60>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000

08001f4c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a18      	ldr	r2, [pc, #96]	@ (8001fc8 <HAL_ADC_MspInit+0x7c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d129      	bne.n	8001fc0 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f9c:	2340      	movs	r3, #64	@ 0x40
 8001f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4809      	ldr	r0, [pc, #36]	@ (8001fd0 <HAL_ADC_MspInit+0x84>)
 8001fac:	f001 fb32 	bl	8003614 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2012      	movs	r0, #18
 8001fb6:	f001 f890 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fba:	2012      	movs	r0, #18
 8001fbc:	f001 f8a9 	bl	8003112 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40012400 	.word	0x40012400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010800 	.word	0x40010800

08001fd4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	@ 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a47      	ldr	r2, [pc, #284]	@ (800210c <HAL_SPI_MspInit+0x138>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f040 8087 	bne.w	8002104 <HAL_SPI_MspInit+0x130>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ff6:	4b46      	ldr	r3, [pc, #280]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	4a45      	ldr	r2, [pc, #276]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 8001ffc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002000:	6193      	str	r3, [r2, #24]
 8002002:	4b43      	ldr	r3, [pc, #268]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b40      	ldr	r3, [pc, #256]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	4a3f      	ldr	r2, [pc, #252]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6193      	str	r3, [r2, #24]
 800201a:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b3a      	ldr	r3, [pc, #232]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	4a39      	ldr	r2, [pc, #228]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 800202c:	f043 0308 	orr.w	r3, r3, #8
 8002030:	6193      	str	r3, [r2, #24]
 8002032:	4b37      	ldr	r3, [pc, #220]	@ (8002110 <HAL_SPI_MspInit+0x13c>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800203e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4830      	ldr	r0, [pc, #192]	@ (8002114 <HAL_SPI_MspInit+0x140>)
 8002054:	f001 fade 	bl	8003614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002058:	2308      	movs	r3, #8
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	482b      	ldr	r0, [pc, #172]	@ (8002118 <HAL_SPI_MspInit+0x144>)
 800206c:	f001 fad2 	bl	8003614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002070:	2330      	movs	r3, #48	@ 0x30
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4825      	ldr	r0, [pc, #148]	@ (8002118 <HAL_SPI_MspInit+0x144>)
 8002084:	f001 fac6 	bl	8003614 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002088:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_SPI_MspInit+0x148>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
 800209e:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_SPI_MspInit+0x148>)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002124 <HAL_SPI_MspInit+0x150>)
 80020a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020ac:	2210      	movs	r2, #16
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_DISABLE;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020c4:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020ce:	2220      	movs	r2, #32
 80020d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80020d8:	4811      	ldr	r0, [pc, #68]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020da:	f001 f835 	bl	8003148 <HAL_DMA_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 80020e4:	f7ff fefa 	bl	8001edc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020ec:	649a      	str	r2, [r3, #72]	@ 0x48
 80020ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <HAL_SPI_MspInit+0x14c>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	2023      	movs	r0, #35	@ 0x23
 80020fa:	f000 ffee 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80020fe:	2023      	movs	r0, #35	@ 0x23
 8002100:	f001 f807 	bl	8003112 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	@ 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40013000 	.word	0x40013000
 8002110:	40021000 	.word	0x40021000
 8002114:	40010800 	.word	0x40010800
 8002118:	40010c00 	.word	0x40010c00
 800211c:	40010000 	.word	0x40010000
 8002120:	20000418 	.word	0x20000418
 8002124:	40020030 	.word	0x40020030

08002128 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0318 	add.w	r3, r7, #24
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a38      	ldr	r2, [pc, #224]	@ (8002224 <HAL_TIM_Base_MspInit+0xfc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d13d      	bne.n	80021c4 <HAL_TIM_Base_MspInit+0x9c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002148:	4b37      	ldr	r3, [pc, #220]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a36      	ldr	r2, [pc, #216]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 800214e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a30      	ldr	r2, [pc, #192]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002178:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002182:	2301      	movs	r3, #1
 8002184:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0318 	add.w	r3, r7, #24
 800218a:	4619      	mov	r1, r3
 800218c:	4827      	ldr	r0, [pc, #156]	@ (800222c <HAL_TIM_Base_MspInit+0x104>)
 800218e:	f001 fa41 	bl	8003614 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	2019      	movs	r0, #25
 8002198:	f000 ff9f 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800219c:	2019      	movs	r0, #25
 800219e:	f000 ffb8 	bl	8003112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201a      	movs	r0, #26
 80021a8:	f000 ff97 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80021ac:	201a      	movs	r0, #26
 80021ae:	f000 ffb0 	bl	8003112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	201b      	movs	r0, #27
 80021b8:	f000 ff8f 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80021bc:	201b      	movs	r0, #27
 80021be:	f000 ffa8 	bl	8003112 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021c2:	e02a      	b.n	800221a <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <HAL_TIM_Base_MspInit+0x108>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10c      	bne.n	80021e8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ce:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b13      	ldr	r3, [pc, #76]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
}
 80021e6:	e018      	b.n	800221a <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM4)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a11      	ldr	r2, [pc, #68]	@ (8002234 <HAL_TIM_Base_MspInit+0x10c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d113      	bne.n	800221a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	201e      	movs	r0, #30
 8002210:	f000 ff63 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002214:	201e      	movs	r0, #30
 8002216:	f000 ff7c 	bl	8003112 <HAL_NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	@ 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40021000 	.word	0x40021000
 800222c:	40010800 	.word	0x40010800
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <NMI_Handler+0x4>

08002240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <HardFault_Handler+0x4>

08002248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <MemManage_Handler+0x4>

08002250 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <UsageFault_Handler+0x4>

08002260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002288:	f000 f986 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}

08002290 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <DMA1_Channel3_IRQHandler+0x10>)
 8002296:	f001 f889 	bl	80033ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000418 	.word	0x20000418

080022a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <ADC1_2_IRQHandler+0x10>)
 80022aa:	f000 fb2b 	bl	8002904 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000390 	.word	0x20000390

080022b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80022be:	f001 fc91 	bl	8003be4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000124c 	.word	0x2000124c

080022cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <TIM1_UP_IRQHandler+0x10>)
 80022d2:	f004 facf 	bl	8006874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000045c 	.word	0x2000045c

080022e0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80022e6:	f004 fac5 	bl	8006874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000045c 	.word	0x2000045c

080022f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <TIM1_CC_IRQHandler+0x10>)
 80022fa:	f004 fabb 	bl	8006874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000045c 	.word	0x2000045c

08002308 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <TIM4_IRQHandler+0x10>)
 800230e:	f004 fab1 	bl	8006874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200004ec 	.word	0x200004ec

0800231c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <SPI1_IRQHandler+0x10>)
 8002322:	f003 ff41 	bl	80061a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200003c0 	.word	0x200003c0

08002330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <_kill>:

int _kill(int pid, int sig)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002348:	f00a fe08 	bl	800cf5c <__errno>
 800234c:	4603      	mov	r3, r0
 800234e:	2216      	movs	r2, #22
 8002350:	601a      	str	r2, [r3, #0]
  return -1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_exit>:

void _exit (int status)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002366:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffe7 	bl	800233e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <_exit+0x12>

08002374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e00a      	b.n	800239c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002386:	f3af 8000 	nop.w
 800238a:	4601      	mov	r1, r0
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	60ba      	str	r2, [r7, #8]
 8002392:	b2ca      	uxtb	r2, r1
 8002394:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbf0      	blt.n	8002386 <_read+0x12>
  }

  return len;
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e009      	b.n	80023d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60ba      	str	r2, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbf1      	blt.n	80023c0 <_write+0x12>
  }
  return len;
 80023dc:	687b      	ldr	r3, [r7, #4]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_close>:

int _close(int file)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800240c:	605a      	str	r2, [r3, #4]
  return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <_isatty>:

int _isatty(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
	...

08002448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002450:	4a14      	ldr	r2, [pc, #80]	@ (80024a4 <_sbrk+0x5c>)
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <_sbrk+0x60>)
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <_sbrk+0x64>)
 8002466:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <_sbrk+0x68>)
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d207      	bcs.n	8002488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002478:	f00a fd70 	bl	800cf5c <__errno>
 800247c:	4603      	mov	r3, r0
 800247e:	220c      	movs	r2, #12
 8002480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002486:	e009      	b.n	800249c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <_sbrk+0x64>)
 8002498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20005000 	.word	0x20005000
 80024a8:	00000400 	.word	0x00000400
 80024ac:	20000578 	.word	0x20000578
 80024b0:	20001890 	.word	0x20001890

080024b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024c0:	f7ff fff8 	bl	80024b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c4:	480b      	ldr	r0, [pc, #44]	@ (80024f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024c6:	490c      	ldr	r1, [pc, #48]	@ (80024f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024c8:	4a0c      	ldr	r2, [pc, #48]	@ (80024fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a09      	ldr	r2, [pc, #36]	@ (8002500 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024dc:	4c09      	ldr	r4, [pc, #36]	@ (8002504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ea:	f00a fd3d 	bl	800cf68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ee:	f7ff f9d5 	bl	800189c <main>
  bx lr
 80024f2:	4770      	bx	lr
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 80024fc:	080100bc 	.word	0x080100bc
  ldr r2, =_sbss
 8002500:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8002504:	20001890 	.word	0x20001890

08002508 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <CAN1_RX1_IRQHandler>
	...

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_Init+0x28>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_Init+0x28>)
 8002516:	f043 0310 	orr.w	r3, r3, #16
 800251a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 fdd1 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002522:	200f      	movs	r0, #15
 8002524:	f000 f808 	bl	8002538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002528:	f7ff fcde 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_InitTick+0x54>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_InitTick+0x58>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fde9 	bl	800312e <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002574:	f000 fdb1 	bl	80030da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	@ (8002594 <HAL_InitTick+0x5c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000004 	.word	0x20000004
 8002590:	2000000c 	.word	0x2000000c
 8002594:	20000008 	.word	0x20000008

08002598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_IncTick+0x1c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_IncTick+0x20>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a03      	ldr	r2, [pc, #12]	@ (80025b8 <HAL_IncTick+0x20>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	2000057c 	.word	0x2000057c

080025bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return uwTick;
 80025c0:	4b02      	ldr	r3, [pc, #8]	@ (80025cc <HAL_GetTick+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	2000057c 	.word	0x2000057c

080025d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0be      	b.n	8002770 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff fc9c 	bl	8001f4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fb8f 	bl	8002d38 <ADC_ConversionStop_Disable>
 800261a:	4603      	mov	r3, r0
 800261c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8099 	bne.w	800275e <HAL_ADC_Init+0x18e>
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 8095 	bne.w	800275e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002638:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800263c:	f023 0302 	bic.w	r3, r3, #2
 8002640:	f043 0202 	orr.w	r2, r3, #2
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002650:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7b1b      	ldrb	r3, [r3, #12]
 8002656:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002658:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	4313      	orrs	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002668:	d003      	beq.n	8002672 <HAL_ADC_Init+0xa2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_ADC_Init+0xa8>
 8002672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002676:	e000      	b.n	800267a <HAL_ADC_Init+0xaa>
 8002678:	2300      	movs	r3, #0
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7d1b      	ldrb	r3, [r3, #20]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d119      	bne.n	80026bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7b1b      	ldrb	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	3b01      	subs	r3, #1
 8002696:	035a      	lsls	r2, r3, #13
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	e00b      	b.n	80026bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	4b28      	ldr	r3, [pc, #160]	@ (8002778 <HAL_ADC_Init+0x1a8>)
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ec:	d003      	beq.n	80026f6 <HAL_ADC_Init+0x126>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d104      	bne.n	8002700 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	051b      	lsls	r3, r3, #20
 80026fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	430a      	orrs	r2, r1
 8002712:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_ADC_Init+0x1ac>)
 800271c:	4013      	ands	r3, r2
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	429a      	cmp	r2, r3
 8002722:	d10b      	bne.n	800273c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800273a:	e018      	b.n	800276e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	f023 0312 	bic.w	r3, r3, #18
 8002744:	f043 0210 	orr.w	r2, r3, #16
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800275c:	e007      	b.n	800276e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	f043 0210 	orr.w	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800276e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	ffe1f7fd 	.word	0xffe1f7fd
 800277c:	ff1f0efe 	.word	0xff1f0efe

08002780 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_ADC_Start_IT+0x1a>
 8002796:	2302      	movs	r3, #2
 8002798:	e0a0      	b.n	80028dc <HAL_ADC_Start_IT+0x15c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa6e 	bl	8002c84 <ADC_Enable>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 808f 	bne.w	80028d2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a45      	ldr	r2, [pc, #276]	@ (80028e4 <HAL_ADC_Start_IT+0x164>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d105      	bne.n	80027de <HAL_ADC_Start_IT+0x5e>
 80027d2:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <HAL_ADC_Start_IT+0x168>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d026      	beq.n	8002846 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002800:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002808:	e01d      	b.n	8002846 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a33      	ldr	r2, [pc, #204]	@ (80028e8 <HAL_ADC_Start_IT+0x168>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d004      	beq.n	800282a <HAL_ADC_Start_IT+0xaa>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2f      	ldr	r2, [pc, #188]	@ (80028e4 <HAL_ADC_Start_IT+0x164>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10d      	bne.n	8002846 <HAL_ADC_Start_IT+0xc6>
 800282a:	4b2f      	ldr	r3, [pc, #188]	@ (80028e8 <HAL_ADC_Start_IT+0x168>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800283e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002856:	f023 0206 	bic.w	r2, r3, #6
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800285e:	e002      	b.n	8002866 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0202 	mvn.w	r2, #2
 8002876:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0220 	orr.w	r2, r2, #32
 8002886:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002892:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002896:	d113      	bne.n	80028c0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800289c:	4a11      	ldr	r2, [pc, #68]	@ (80028e4 <HAL_ADC_Start_IT+0x164>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d105      	bne.n	80028ae <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028a2:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_ADC_Start_IT+0x168>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	e00c      	b.n	80028da <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e003      	b.n	80028da <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40012800 	.word	0x40012800
 80028e8:	40012400 	.word	0x40012400

080028ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d03e      	beq.n	80029a4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d039      	beq.n	80029a4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002952:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002956:	d11d      	bne.n	8002994 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800295c:	2b00      	cmp	r3, #0
 800295e:	d119      	bne.n	8002994 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0220 	bic.w	r2, r2, #32
 800296e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7fe fde1 	bl	800155c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f06f 0212 	mvn.w	r2, #18
 80029a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d04d      	beq.n	8002a4a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d048      	beq.n	8002a4a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80029da:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80029de:	d012      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d125      	bne.n	8002a3a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029f8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029fc:	d11d      	bne.n	8002a3a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a14:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fa6c 	bl	8002f18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 020c 	mvn.w	r2, #12
 8002a48:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f809 	bl	8002a82 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0201 	mvn.w	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x20>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0dc      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x1da>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b06      	cmp	r3, #6
 8002ac2:	d81c      	bhi.n	8002afe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b05      	subs	r3, #5
 8002ad6:	221f      	movs	r2, #31
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4019      	ands	r1, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b05      	subs	r3, #5
 8002af0:	fa00 f203 	lsl.w	r2, r0, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	635a      	str	r2, [r3, #52]	@ 0x34
 8002afc:	e03c      	b.n	8002b78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d81c      	bhi.n	8002b40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b23      	subs	r3, #35	@ 0x23
 8002b18:	221f      	movs	r2, #31
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	4019      	ands	r1, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b23      	subs	r3, #35	@ 0x23
 8002b32:	fa00 f203 	lsl.w	r2, r0, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b3e:	e01b      	b.n	8002b78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b41      	subs	r3, #65	@ 0x41
 8002b52:	221f      	movs	r2, #31
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4019      	ands	r1, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b41      	subs	r3, #65	@ 0x41
 8002b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b09      	cmp	r3, #9
 8002b7e:	d91c      	bls.n	8002bba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68d9      	ldr	r1, [r3, #12]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b1e      	subs	r3, #30
 8002b92:	2207      	movs	r2, #7
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	4019      	ands	r1, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6898      	ldr	r0, [r3, #8]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	3b1e      	subs	r3, #30
 8002bac:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]
 8002bb8:	e019      	b.n	8002bee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6919      	ldr	r1, [r3, #16]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	2207      	movs	r2, #7
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	4019      	ands	r1, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6898      	ldr	r0, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	fa00 f203 	lsl.w	r2, r0, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d003      	beq.n	8002bfe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bfa:	2b11      	cmp	r3, #17
 8002bfc:	d132      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1d      	ldr	r2, [pc, #116]	@ (8002c78 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d125      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d126      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002c24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d11a      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2e:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <HAL_ADC_ConfigChannel+0x1e8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a13      	ldr	r2, [pc, #76]	@ (8002c80 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	0c9a      	lsrs	r2, r3, #18
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c44:	e002      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f9      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x1b2>
 8002c52:	e007      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	40012400 	.word	0x40012400
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	431bde83 	.word	0x431bde83

08002c84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d040      	beq.n	8002d24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d30 <ADC_Enable+0xac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d34 <ADC_Enable+0xb0>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cc0:	e002      	b.n	8002cc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f9      	bne.n	8002cc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cce:	f7ff fc75 	bl	80025bc <HAL_GetTick>
 8002cd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cd4:	e01f      	b.n	8002d16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cd6:	f7ff fc71 	bl	80025bc <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d918      	bls.n	8002d16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d011      	beq.n	8002d16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e007      	b.n	8002d26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d1d8      	bne.n	8002cd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000004 	.word	0x20000004
 8002d34:	431bde83 	.word	0x431bde83

08002d38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d12e      	bne.n	8002db0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d62:	f7ff fc2b 	bl	80025bc <HAL_GetTick>
 8002d66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d68:	e01b      	b.n	8002da2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d6a:	f7ff fc27 	bl	80025bc <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d914      	bls.n	8002da2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10d      	bne.n	8002da2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	f043 0210 	orr.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e007      	b.n	8002db2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d0dc      	beq.n	8002d6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_ADCEx_Calibration_Start+0x1e>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e097      	b.n	8002f0a <HAL_ADCEx_Calibration_Start+0x14e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ffa8 	bl	8002d38 <ADC_ConversionStop_Disable>
 8002de8:	4603      	mov	r3, r0
 8002dea:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff49 	bl	8002c84 <ADC_Enable>
 8002df2:	4603      	mov	r3, r0
 8002df4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 8081 	bne.w	8002f00 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e06:	f023 0302 	bic.w	r3, r3, #2
 8002e0a:	f043 0202 	orr.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e12:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <HAL_ADCEx_Calibration_Start+0x158>)
 8002e14:	681c      	ldr	r4, [r3, #0]
 8002e16:	2002      	movs	r0, #2
 8002e18:	f002 ffda 	bl	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002e22:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002e24:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002e26:	e002      	b.n	8002e2e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f9      	bne.n	8002e28 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0208 	orr.w	r2, r2, #8
 8002e42:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e44:	f7ff fbba 	bl	80025bc <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e4a:	e01b      	b.n	8002e84 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e4c:	f7ff fbb6 	bl	80025bc <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b0a      	cmp	r3, #10
 8002e58:	d914      	bls.n	8002e84 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	f023 0312 	bic.w	r3, r3, #18
 8002e70:	f043 0210 	orr.w	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e042      	b.n	8002f0a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1dc      	bne.n	8002e4c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0204 	orr.w	r2, r2, #4
 8002ea0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ea2:	f7ff fb8b 	bl	80025bc <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ea8:	e01b      	b.n	8002ee2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002eaa:	f7ff fb87 	bl	80025bc <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b0a      	cmp	r3, #10
 8002eb6:	d914      	bls.n	8002ee2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	f023 0312 	bic.w	r3, r3, #18
 8002ece:	f043 0210 	orr.w	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e013      	b.n	8002f0a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1dc      	bne.n	8002eaa <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	f023 0303 	bic.w	r3, r3, #3
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000004 	.word	0x20000004

08002f18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
	...

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5e:	4a04      	ldr	r2, [pc, #16]	@ (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	60d3      	str	r3, [r2, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	@ (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	4906      	ldr	r1, [pc, #24]	@ (8002fc4 <__NVIC_EnableIRQ+0x34>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	@ (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	@ (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	@ 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003090:	d301      	bcc.n	8003096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003092:	2301      	movs	r3, #1
 8003094:	e00f      	b.n	80030b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003096:	4a0a      	ldr	r2, [pc, #40]	@ (80030c0 <SysTick_Config+0x40>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309e:	210f      	movs	r1, #15
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030a4:	f7ff ff90 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <SysTick_Config+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ae:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <SysTick_Config+0x40>)
 80030b0:	2207      	movs	r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff2d 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ec:	f7ff ff42 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f7ff ff90 	bl	800301c <NVIC_EncodePriority>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff5f 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff35 	bl	8002f90 <__NVIC_EnableIRQ>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffa2 	bl	8003080 <SysTick_Config>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e043      	b.n	80031e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <HAL_DMA_Init+0xa8>)
 8003166:	4413      	add	r3, r2
 8003168:	4a22      	ldr	r2, [pc, #136]	@ (80031f4 <HAL_DMA_Init+0xac>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	009a      	lsls	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1f      	ldr	r2, [pc, #124]	@ (80031f8 <HAL_DMA_Init+0xb0>)
 800317a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003192:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003196:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	bffdfff8 	.word	0xbffdfff8
 80031f4:	cccccccd 	.word	0xcccccccd
 80031f8:	40020000 	.word	0x40020000

080031fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_DMA_Start_IT+0x20>
 8003218:	2302      	movs	r3, #2
 800321a:	e04b      	b.n	80032b4 <HAL_DMA_Start_IT+0xb8>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d13a      	bne.n	80032a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9af 	bl	80035b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 020e 	orr.w	r2, r2, #14
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e00f      	b.n	8003294 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0204 	bic.w	r2, r2, #4
 8003282:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 020a 	orr.w	r2, r2, #10
 8003292:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e005      	b.n	80032b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d005      	beq.n	80032e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2204      	movs	r2, #4
 80032d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e051      	b.n	8003384 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 020e 	bic.w	r2, r2, #14
 80032ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a22      	ldr	r2, [pc, #136]	@ (8003390 <HAL_DMA_Abort_IT+0xd4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d029      	beq.n	800335e <HAL_DMA_Abort_IT+0xa2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a21      	ldr	r2, [pc, #132]	@ (8003394 <HAL_DMA_Abort_IT+0xd8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_Abort_IT+0x9e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1f      	ldr	r2, [pc, #124]	@ (8003398 <HAL_DMA_Abort_IT+0xdc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01a      	beq.n	8003354 <HAL_DMA_Abort_IT+0x98>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1e      	ldr	r2, [pc, #120]	@ (800339c <HAL_DMA_Abort_IT+0xe0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d012      	beq.n	800334e <HAL_DMA_Abort_IT+0x92>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1c      	ldr	r2, [pc, #112]	@ (80033a0 <HAL_DMA_Abort_IT+0xe4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00a      	beq.n	8003348 <HAL_DMA_Abort_IT+0x8c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1b      	ldr	r2, [pc, #108]	@ (80033a4 <HAL_DMA_Abort_IT+0xe8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d102      	bne.n	8003342 <HAL_DMA_Abort_IT+0x86>
 800333c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003340:	e00e      	b.n	8003360 <HAL_DMA_Abort_IT+0xa4>
 8003342:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003346:	e00b      	b.n	8003360 <HAL_DMA_Abort_IT+0xa4>
 8003348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800334c:	e008      	b.n	8003360 <HAL_DMA_Abort_IT+0xa4>
 800334e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003352:	e005      	b.n	8003360 <HAL_DMA_Abort_IT+0xa4>
 8003354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003358:	e002      	b.n	8003360 <HAL_DMA_Abort_IT+0xa4>
 800335a:	2310      	movs	r3, #16
 800335c:	e000      	b.n	8003360 <HAL_DMA_Abort_IT+0xa4>
 800335e:	2301      	movs	r3, #1
 8003360:	4a11      	ldr	r2, [pc, #68]	@ (80033a8 <HAL_DMA_Abort_IT+0xec>)
 8003362:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
    } 
  }
  return status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40020008 	.word	0x40020008
 8003394:	4002001c 	.word	0x4002001c
 8003398:	40020030 	.word	0x40020030
 800339c:	40020044 	.word	0x40020044
 80033a0:	40020058 	.word	0x40020058
 80033a4:	4002006c 	.word	0x4002006c
 80033a8:	40020000 	.word	0x40020000

080033ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	2204      	movs	r2, #4
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d04f      	beq.n	8003474 <HAL_DMA_IRQHandler+0xc8>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0204 	bic.w	r2, r2, #4
 80033fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a66      	ldr	r2, [pc, #408]	@ (800359c <HAL_DMA_IRQHandler+0x1f0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d029      	beq.n	800345a <HAL_DMA_IRQHandler+0xae>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a65      	ldr	r2, [pc, #404]	@ (80035a0 <HAL_DMA_IRQHandler+0x1f4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMA_IRQHandler+0xaa>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a63      	ldr	r2, [pc, #396]	@ (80035a4 <HAL_DMA_IRQHandler+0x1f8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01a      	beq.n	8003450 <HAL_DMA_IRQHandler+0xa4>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a62      	ldr	r2, [pc, #392]	@ (80035a8 <HAL_DMA_IRQHandler+0x1fc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d012      	beq.n	800344a <HAL_DMA_IRQHandler+0x9e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a60      	ldr	r2, [pc, #384]	@ (80035ac <HAL_DMA_IRQHandler+0x200>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00a      	beq.n	8003444 <HAL_DMA_IRQHandler+0x98>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a5f      	ldr	r2, [pc, #380]	@ (80035b0 <HAL_DMA_IRQHandler+0x204>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d102      	bne.n	800343e <HAL_DMA_IRQHandler+0x92>
 8003438:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800343c:	e00e      	b.n	800345c <HAL_DMA_IRQHandler+0xb0>
 800343e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003442:	e00b      	b.n	800345c <HAL_DMA_IRQHandler+0xb0>
 8003444:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003448:	e008      	b.n	800345c <HAL_DMA_IRQHandler+0xb0>
 800344a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800344e:	e005      	b.n	800345c <HAL_DMA_IRQHandler+0xb0>
 8003450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003454:	e002      	b.n	800345c <HAL_DMA_IRQHandler+0xb0>
 8003456:	2340      	movs	r3, #64	@ 0x40
 8003458:	e000      	b.n	800345c <HAL_DMA_IRQHandler+0xb0>
 800345a:	2304      	movs	r3, #4
 800345c:	4a55      	ldr	r2, [pc, #340]	@ (80035b4 <HAL_DMA_IRQHandler+0x208>)
 800345e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8094 	beq.w	8003592 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003472:	e08e      	b.n	8003592 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	2202      	movs	r2, #2
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d056      	beq.n	8003532 <HAL_DMA_IRQHandler+0x186>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d051      	beq.n	8003532 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 020a 	bic.w	r2, r2, #10
 80034aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a38      	ldr	r2, [pc, #224]	@ (800359c <HAL_DMA_IRQHandler+0x1f0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d029      	beq.n	8003512 <HAL_DMA_IRQHandler+0x166>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a37      	ldr	r2, [pc, #220]	@ (80035a0 <HAL_DMA_IRQHandler+0x1f4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d022      	beq.n	800350e <HAL_DMA_IRQHandler+0x162>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a35      	ldr	r2, [pc, #212]	@ (80035a4 <HAL_DMA_IRQHandler+0x1f8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01a      	beq.n	8003508 <HAL_DMA_IRQHandler+0x15c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a34      	ldr	r2, [pc, #208]	@ (80035a8 <HAL_DMA_IRQHandler+0x1fc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d012      	beq.n	8003502 <HAL_DMA_IRQHandler+0x156>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a32      	ldr	r2, [pc, #200]	@ (80035ac <HAL_DMA_IRQHandler+0x200>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00a      	beq.n	80034fc <HAL_DMA_IRQHandler+0x150>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a31      	ldr	r2, [pc, #196]	@ (80035b0 <HAL_DMA_IRQHandler+0x204>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d102      	bne.n	80034f6 <HAL_DMA_IRQHandler+0x14a>
 80034f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034f4:	e00e      	b.n	8003514 <HAL_DMA_IRQHandler+0x168>
 80034f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034fa:	e00b      	b.n	8003514 <HAL_DMA_IRQHandler+0x168>
 80034fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003500:	e008      	b.n	8003514 <HAL_DMA_IRQHandler+0x168>
 8003502:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003506:	e005      	b.n	8003514 <HAL_DMA_IRQHandler+0x168>
 8003508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800350c:	e002      	b.n	8003514 <HAL_DMA_IRQHandler+0x168>
 800350e:	2320      	movs	r3, #32
 8003510:	e000      	b.n	8003514 <HAL_DMA_IRQHandler+0x168>
 8003512:	2302      	movs	r3, #2
 8003514:	4a27      	ldr	r2, [pc, #156]	@ (80035b4 <HAL_DMA_IRQHandler+0x208>)
 8003516:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d034      	beq.n	8003592 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003530:	e02f      	b.n	8003592 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	2208      	movs	r2, #8
 8003538:	409a      	lsls	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d028      	beq.n	8003594 <HAL_DMA_IRQHandler+0x1e8>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d023      	beq.n	8003594 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 020e 	bic.w	r2, r2, #14
 800355a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
    }
  }
  return;
 8003592:	bf00      	nop
 8003594:	bf00      	nop
}
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40020008 	.word	0x40020008
 80035a0:	4002001c 	.word	0x4002001c
 80035a4:	40020030 	.word	0x40020030
 80035a8:	40020044 	.word	0x40020044
 80035ac:	40020058 	.word	0x40020058
 80035b0:	4002006c 	.word	0x4002006c
 80035b4:	40020000 	.word	0x40020000

080035b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d108      	bne.n	80035f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035f6:	e007      	b.n	8003608 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
	...

08003614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003614:	b480      	push	{r7}
 8003616:	b08b      	sub	sp, #44	@ 0x2c
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003622:	2300      	movs	r3, #0
 8003624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003626:	e169      	b.n	80038fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003628:	2201      	movs	r2, #1
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	f040 8158 	bne.w	80038f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4a9a      	ldr	r2, [pc, #616]	@ (80038b4 <HAL_GPIO_Init+0x2a0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d05e      	beq.n	800370e <HAL_GPIO_Init+0xfa>
 8003650:	4a98      	ldr	r2, [pc, #608]	@ (80038b4 <HAL_GPIO_Init+0x2a0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d875      	bhi.n	8003742 <HAL_GPIO_Init+0x12e>
 8003656:	4a98      	ldr	r2, [pc, #608]	@ (80038b8 <HAL_GPIO_Init+0x2a4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d058      	beq.n	800370e <HAL_GPIO_Init+0xfa>
 800365c:	4a96      	ldr	r2, [pc, #600]	@ (80038b8 <HAL_GPIO_Init+0x2a4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d86f      	bhi.n	8003742 <HAL_GPIO_Init+0x12e>
 8003662:	4a96      	ldr	r2, [pc, #600]	@ (80038bc <HAL_GPIO_Init+0x2a8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d052      	beq.n	800370e <HAL_GPIO_Init+0xfa>
 8003668:	4a94      	ldr	r2, [pc, #592]	@ (80038bc <HAL_GPIO_Init+0x2a8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d869      	bhi.n	8003742 <HAL_GPIO_Init+0x12e>
 800366e:	4a94      	ldr	r2, [pc, #592]	@ (80038c0 <HAL_GPIO_Init+0x2ac>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04c      	beq.n	800370e <HAL_GPIO_Init+0xfa>
 8003674:	4a92      	ldr	r2, [pc, #584]	@ (80038c0 <HAL_GPIO_Init+0x2ac>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d863      	bhi.n	8003742 <HAL_GPIO_Init+0x12e>
 800367a:	4a92      	ldr	r2, [pc, #584]	@ (80038c4 <HAL_GPIO_Init+0x2b0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d046      	beq.n	800370e <HAL_GPIO_Init+0xfa>
 8003680:	4a90      	ldr	r2, [pc, #576]	@ (80038c4 <HAL_GPIO_Init+0x2b0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d85d      	bhi.n	8003742 <HAL_GPIO_Init+0x12e>
 8003686:	2b12      	cmp	r3, #18
 8003688:	d82a      	bhi.n	80036e0 <HAL_GPIO_Init+0xcc>
 800368a:	2b12      	cmp	r3, #18
 800368c:	d859      	bhi.n	8003742 <HAL_GPIO_Init+0x12e>
 800368e:	a201      	add	r2, pc, #4	@ (adr r2, 8003694 <HAL_GPIO_Init+0x80>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	0800370f 	.word	0x0800370f
 8003698:	080036e9 	.word	0x080036e9
 800369c:	080036fb 	.word	0x080036fb
 80036a0:	0800373d 	.word	0x0800373d
 80036a4:	08003743 	.word	0x08003743
 80036a8:	08003743 	.word	0x08003743
 80036ac:	08003743 	.word	0x08003743
 80036b0:	08003743 	.word	0x08003743
 80036b4:	08003743 	.word	0x08003743
 80036b8:	08003743 	.word	0x08003743
 80036bc:	08003743 	.word	0x08003743
 80036c0:	08003743 	.word	0x08003743
 80036c4:	08003743 	.word	0x08003743
 80036c8:	08003743 	.word	0x08003743
 80036cc:	08003743 	.word	0x08003743
 80036d0:	08003743 	.word	0x08003743
 80036d4:	08003743 	.word	0x08003743
 80036d8:	080036f1 	.word	0x080036f1
 80036dc:	08003705 	.word	0x08003705
 80036e0:	4a79      	ldr	r2, [pc, #484]	@ (80038c8 <HAL_GPIO_Init+0x2b4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036e6:	e02c      	b.n	8003742 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	623b      	str	r3, [r7, #32]
          break;
 80036ee:	e029      	b.n	8003744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	3304      	adds	r3, #4
 80036f6:	623b      	str	r3, [r7, #32]
          break;
 80036f8:	e024      	b.n	8003744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	3308      	adds	r3, #8
 8003700:	623b      	str	r3, [r7, #32]
          break;
 8003702:	e01f      	b.n	8003744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	330c      	adds	r3, #12
 800370a:	623b      	str	r3, [r7, #32]
          break;
 800370c:	e01a      	b.n	8003744 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003716:	2304      	movs	r3, #4
 8003718:	623b      	str	r3, [r7, #32]
          break;
 800371a:	e013      	b.n	8003744 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d105      	bne.n	8003730 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003724:	2308      	movs	r3, #8
 8003726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	611a      	str	r2, [r3, #16]
          break;
 800372e:	e009      	b.n	8003744 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003730:	2308      	movs	r3, #8
 8003732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	615a      	str	r2, [r3, #20]
          break;
 800373a:	e003      	b.n	8003744 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
          break;
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x130>
          break;
 8003742:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2bff      	cmp	r3, #255	@ 0xff
 8003748:	d801      	bhi.n	800374e <HAL_GPIO_Init+0x13a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	e001      	b.n	8003752 <HAL_GPIO_Init+0x13e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2bff      	cmp	r3, #255	@ 0xff
 8003758:	d802      	bhi.n	8003760 <HAL_GPIO_Init+0x14c>
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	e002      	b.n	8003766 <HAL_GPIO_Init+0x152>
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	3b08      	subs	r3, #8
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	210f      	movs	r1, #15
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	401a      	ands	r2, r3
 8003778:	6a39      	ldr	r1, [r7, #32]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	431a      	orrs	r2, r3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80b1 	beq.w	80038f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003794:	4b4d      	ldr	r3, [pc, #308]	@ (80038cc <HAL_GPIO_Init+0x2b8>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	4a4c      	ldr	r2, [pc, #304]	@ (80038cc <HAL_GPIO_Init+0x2b8>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6193      	str	r3, [r2, #24]
 80037a0:	4b4a      	ldr	r3, [pc, #296]	@ (80038cc <HAL_GPIO_Init+0x2b8>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037ac:	4a48      	ldr	r2, [pc, #288]	@ (80038d0 <HAL_GPIO_Init+0x2bc>)
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	3302      	adds	r3, #2
 80037b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a40      	ldr	r2, [pc, #256]	@ (80038d4 <HAL_GPIO_Init+0x2c0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <HAL_GPIO_Init+0x1ec>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a3f      	ldr	r2, [pc, #252]	@ (80038d8 <HAL_GPIO_Init+0x2c4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00d      	beq.n	80037fc <HAL_GPIO_Init+0x1e8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a3e      	ldr	r2, [pc, #248]	@ (80038dc <HAL_GPIO_Init+0x2c8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d007      	beq.n	80037f8 <HAL_GPIO_Init+0x1e4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a3d      	ldr	r2, [pc, #244]	@ (80038e0 <HAL_GPIO_Init+0x2cc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d101      	bne.n	80037f4 <HAL_GPIO_Init+0x1e0>
 80037f0:	2303      	movs	r3, #3
 80037f2:	e006      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 80037f4:	2304      	movs	r3, #4
 80037f6:	e004      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e002      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 8003800:	2300      	movs	r3, #0
 8003802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003804:	f002 0203 	and.w	r2, r2, #3
 8003808:	0092      	lsls	r2, r2, #2
 800380a:	4093      	lsls	r3, r2
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003812:	492f      	ldr	r1, [pc, #188]	@ (80038d0 <HAL_GPIO_Init+0x2bc>)
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800382c:	4b2d      	ldr	r3, [pc, #180]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	492c      	ldr	r1, [pc, #176]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]
 8003838:	e006      	b.n	8003848 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800383a:	4b2a      	ldr	r3, [pc, #168]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	43db      	mvns	r3, r3
 8003842:	4928      	ldr	r1, [pc, #160]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 8003844:	4013      	ands	r3, r2
 8003846:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003854:	4b23      	ldr	r3, [pc, #140]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	4922      	ldr	r1, [pc, #136]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	60cb      	str	r3, [r1, #12]
 8003860:	e006      	b.n	8003870 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003862:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	43db      	mvns	r3, r3
 800386a:	491e      	ldr	r1, [pc, #120]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 800386c:	4013      	ands	r3, r2
 800386e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d006      	beq.n	800388a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800387c:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4918      	ldr	r1, [pc, #96]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	e006      	b.n	8003898 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800388a:	4b16      	ldr	r3, [pc, #88]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	43db      	mvns	r3, r3
 8003892:	4914      	ldr	r1, [pc, #80]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 8003894:	4013      	ands	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d021      	beq.n	80038e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038a4:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	490e      	ldr	r1, [pc, #56]	@ (80038e4 <HAL_GPIO_Init+0x2d0>)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	e021      	b.n	80038f6 <HAL_GPIO_Init+0x2e2>
 80038b2:	bf00      	nop
 80038b4:	10320000 	.word	0x10320000
 80038b8:	10310000 	.word	0x10310000
 80038bc:	10220000 	.word	0x10220000
 80038c0:	10210000 	.word	0x10210000
 80038c4:	10120000 	.word	0x10120000
 80038c8:	10110000 	.word	0x10110000
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40010800 	.word	0x40010800
 80038d8:	40010c00 	.word	0x40010c00
 80038dc:	40011000 	.word	0x40011000
 80038e0:	40011400 	.word	0x40011400
 80038e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <HAL_GPIO_Init+0x304>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	4909      	ldr	r1, [pc, #36]	@ (8003918 <HAL_GPIO_Init+0x304>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	3301      	adds	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	f47f ae8e 	bne.w	8003628 <HAL_GPIO_Init+0x14>
  }
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	372c      	adds	r7, #44	@ 0x2c
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	40010400 	.word	0x40010400

0800391c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	887b      	ldrh	r3, [r7, #2]
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	e001      	b.n	800393e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	807b      	strh	r3, [r7, #2]
 8003956:	4613      	mov	r3, r2
 8003958:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800395a:	787b      	ldrb	r3, [r7, #1]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003960:	887a      	ldrh	r2, [r7, #2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003966:	e003      	b.n	8003970 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	041a      	lsls	r2, r3, #16
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	611a      	str	r2, [r3, #16]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800398c:	887a      	ldrh	r2, [r7, #2]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4013      	ands	r3, r2
 8003992:	041a      	lsls	r2, r3, #16
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	43d9      	mvns	r1, r3
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	400b      	ands	r3, r1
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0e8      	b.n	8003b90 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f008 f886 	bl	800bae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2203      	movs	r2, #3
 80039dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 ff61 	bl	80078b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039fa:	f003 ff37 	bl	800786c <USB_CoreInit>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0bf      	b.n	8003b90 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 ff65 	bl	80078e6 <USB_SetCurrentMode>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0b0      	b.n	8003b90 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	e03e      	b.n	8003ab2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	440b      	add	r3, r1
 8003a42:	3311      	adds	r3, #17
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	3310      	adds	r3, #16
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	440b      	add	r3, r1
 8003a6a:	3313      	adds	r3, #19
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3320      	adds	r3, #32
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	440b      	add	r3, r1
 8003a92:	3324      	adds	r3, #36	@ 0x24
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	791b      	ldrb	r3, [r3, #4]
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d3bb      	bcc.n	8003a34 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e044      	b.n	8003b4c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	791b      	ldrb	r3, [r3, #4]
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3b5      	bcc.n	8003ac2 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b60:	f003 fecd 	bl	80078fe <USB_DevInit>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e00c      	b.n	8003b90 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f006 f94c 	bl	8009e26 <USB_DevDisconnect>

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_PCD_Start+0x16>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e016      	b.n	8003bdc <HAL_PCD_Start+0x44>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f003 fe63 	bl	8007886 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f008 fa01 	bl	800bfca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f006 f920 	bl	8009e12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f006 f922 	bl	8009e3a <USB_ReadInterrupts>
 8003bf6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fb1a 	bl	800423c <PCD_EP_ISR_Handler>

    return;
 8003c08:	e119      	b.n	8003e3e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c26:	b292      	uxth	r2, r2
 8003c28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f007 ffd4 	bl	800bbda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c32:	2100      	movs	r1, #0
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f905 	bl	8003e44 <HAL_PCD_SetAddress>

    return;
 8003c3a:	e100      	b.n	8003e3e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c5e:	e0ee      	b.n	8003e3e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00c      	beq.n	8003c84 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c82:	e0dc      	b.n	8003e3e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d027      	beq.n	8003cde <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0204 	bic.w	r2, r2, #4
 8003ca0:	b292      	uxth	r2, r2
 8003ca2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0208 	bic.w	r2, r2, #8
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f007 ffc4 	bl	800bc4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003cdc:	e0af      	b.n	8003e3e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8083 	beq.w	8003df0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e010      	b.n	8003d12 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	7ffb      	ldrb	r3, [r7, #31]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	441a      	add	r2, r3
 8003cfc:	7ffb      	ldrb	r3, [r7, #31]
 8003cfe:	8812      	ldrh	r2, [r2, #0]
 8003d00:	b292      	uxth	r2, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	3320      	adds	r3, #32
 8003d06:	443b      	add	r3, r7
 8003d08:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	2b07      	cmp	r3, #7
 8003d16:	d9eb      	bls.n	8003cf0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	b292      	uxth	r2, r2
 8003d44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003d48:	bf00      	nop
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f6      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6e:	b292      	uxth	r2, r2
 8003d70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e00f      	b.n	8003d9a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	4611      	mov	r1, r2
 8003d82:	7ffa      	ldrb	r2, [r7, #31]
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	440a      	add	r2, r1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	3320      	adds	r3, #32
 8003d8c:	443b      	add	r3, r7
 8003d8e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003d92:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003d94:	7ffb      	ldrb	r3, [r7, #31]
 8003d96:	3301      	adds	r3, #1
 8003d98:	77fb      	strb	r3, [r7, #31]
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	2b07      	cmp	r3, #7
 8003d9e:	d9ec      	bls.n	8003d7a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0208 	orr.w	r2, r2, #8
 8003db2:	b292      	uxth	r2, r2
 8003db4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dca:	b292      	uxth	r2, r2
 8003dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0204 	orr.w	r2, r2, #4
 8003de2:	b292      	uxth	r2, r2
 8003de4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f007 ff15 	bl	800bc18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003dee:	e026      	b.n	8003e3e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00f      	beq.n	8003e1a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e0c:	b292      	uxth	r2, r2
 8003e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f007 fed3 	bl	800bbbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003e18:	e011      	b.n	8003e3e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e36:	b292      	uxth	r2, r2
 8003e38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e3c:	bf00      	nop
  }
}
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_PCD_SetAddress+0x1a>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e012      	b.n	8003e84 <HAL_PCD_SetAddress+0x40>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f005 ffb9 	bl	8009dec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	70fb      	strb	r3, [r7, #3]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	803b      	strh	r3, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	da0e      	bge.n	8003ed0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 0207 	and.w	r2, r3, #7
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3310      	adds	r3, #16
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	705a      	strb	r2, [r3, #1]
 8003ece:	e00e      	b.n	8003eee <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 0207 	and.w	r2, r3, #7
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003efa:	883a      	ldrh	r2, [r7, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	78ba      	ldrb	r2, [r7, #2]
 8003f04:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f06:	78bb      	ldrb	r3, [r7, #2]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d102      	bne.n	8003f12 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_PCD_EP_Open+0x94>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e00e      	b.n	8003f3e <HAL_PCD_EP_Open+0xb2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 fd02 	bl	8007938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003f3c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da0e      	bge.n	8003f78 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 0207 	and.w	r2, r3, #7
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	3310      	adds	r3, #16
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	705a      	strb	r2, [r3, #1]
 8003f76:	e00e      	b.n	8003f96 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 0207 	and.w	r2, r3, #7
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_PCD_EP_Close+0x6a>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e00e      	b.n	8003fce <HAL_PCD_EP_Close+0x88>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68f9      	ldr	r1, [r7, #12]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f004 f87a 	bl	80080b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
 8003fe8:	f003 0207 	and.w	r2, r3, #7
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2200      	movs	r2, #0
 8004014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	b2da      	uxtb	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6979      	ldr	r1, [r7, #20]
 8004028:	4618      	mov	r0, r3
 800402a:	f004 fa31 	bl	8008490 <USB_EPStartXfer>

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 0207 	and.w	r2, r3, #7
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	460b      	mov	r3, r1
 8004074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	f003 0207 	and.w	r2, r3, #7
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	3310      	adds	r3, #16
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2201      	movs	r2, #1
 80040b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f004 f9e3 	bl	8008490 <USB_EPStartXfer>

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	7912      	ldrb	r2, [r2, #4]
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e04c      	b.n	800418c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da0e      	bge.n	8004118 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	f003 0207 	and.w	r2, r3, #7
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	3310      	adds	r3, #16
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	705a      	strb	r2, [r3, #1]
 8004116:	e00c      	b.n	8004132 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_PCD_EP_SetStall+0x7e>
 800414e:	2302      	movs	r3, #2
 8004150:	e01c      	b.n	800418c <HAL_PCD_EP_SetStall+0xb8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	f005 fd46 	bl	8009bf2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	2b00      	cmp	r3, #0
 800416e:	d108      	bne.n	8004182 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f005 fe6b 	bl	8009e58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	7912      	ldrb	r2, [r2, #4]
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e040      	b.n	8004234 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da0e      	bge.n	80041d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	f003 0207 	and.w	r2, r3, #7
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	3310      	adds	r3, #16
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	705a      	strb	r2, [r3, #1]
 80041d6:	e00e      	b.n	80041f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	f003 0207 	and.w	r2, r3, #7
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_PCD_EP_ClrStall+0x82>
 8004212:	2302      	movs	r3, #2
 8004214:	e00e      	b.n	8004234 <HAL_PCD_EP_ClrStall+0xa0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68f9      	ldr	r1, [r7, #12]
 8004224:	4618      	mov	r0, r3
 8004226:	f005 fd34 	bl	8009c92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b096      	sub	sp, #88	@ 0x58
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004244:	e3bb      	b.n	80049be <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800424e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004260:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 8175 	bne.w	8004554 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800426a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d14e      	bne.n	8004314 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004286:	81fb      	strh	r3, [r7, #14]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	89fb      	ldrh	r3, [r7, #14]
 800428e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3310      	adds	r3, #16
 800429e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	3302      	adds	r3, #2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80042cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	441a      	add	r2, r3
 80042d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80042da:	2100      	movs	r1, #0
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f007 fc54 	bl	800bb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7b5b      	ldrb	r3, [r3, #13]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8368 	beq.w	80049be <PCD_EP_ISR_Handler+0x782>
 80042ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f040 8363 	bne.w	80049be <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7b5b      	ldrb	r3, [r3, #13]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004302:	b2da      	uxtb	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	735a      	strb	r2, [r3, #13]
 8004312:	e354      	b.n	80049be <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800431a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004326:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800432a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800432e:	2b00      	cmp	r3, #0
 8004330:	d034      	beq.n	800439c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	3306      	adds	r3, #6
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004370:	b29b      	uxth	r3, r3
 8004372:	f005 fdc2 	bl	8009efa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29a      	uxth	r2, r3
 800437e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004382:	4013      	ands	r3, r2
 8004384:	823b      	strh	r3, [r7, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	8a3a      	ldrh	r2, [r7, #16]
 800438c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004390:	b292      	uxth	r2, r2
 8004392:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f007 fbcb 	bl	800bb30 <HAL_PCD_SetupStageCallback>
 800439a:	e310      	b.n	80049be <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800439c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f280 830c 	bge.w	80049be <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80043b2:	4013      	ands	r3, r2
 80043b4:	83fb      	strh	r3, [r7, #30]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	8bfa      	ldrh	r2, [r7, #30]
 80043bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043c0:	b292      	uxth	r2, r2
 80043c2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	3306      	adds	r3, #6
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80043f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d019      	beq.n	800442c <PCD_EP_ISR_Handler+0x1f0>
 80043f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004406:	6959      	ldr	r1, [r3, #20]
 8004408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004410:	b29b      	uxth	r3, r3
 8004412:	f005 fd72 	bl	8009efa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	441a      	add	r2, r3
 8004420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004422:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004424:	2100      	movs	r1, #0
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f007 fb94 	bl	800bb54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004436:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800443a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800443e:	2b00      	cmp	r3, #0
 8004440:	f040 82bd 	bne.w	80049be <PCD_EP_ISR_Handler+0x782>
 8004444:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004448:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800444c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004450:	f000 82b5 	beq.w	80049be <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	4413      	add	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447e:	b29a      	uxth	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b3e      	cmp	r3, #62	@ 0x3e
 800448a:	d91d      	bls.n	80044c8 <PCD_EP_ISR_Handler+0x28c>
 800448c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	647b      	str	r3, [r7, #68]	@ 0x44
 8004494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <PCD_EP_ISR_Handler+0x26a>
 80044a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a2:	3b01      	subs	r3, #1
 80044a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	e026      	b.n	8004516 <PCD_EP_ISR_Handler+0x2da>
 80044c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <PCD_EP_ISR_Handler+0x2aa>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044de:	b29a      	uxth	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e017      	b.n	8004516 <PCD_EP_ISR_Handler+0x2da>
 80044e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <PCD_EP_ISR_Handler+0x2c4>
 80044fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044fc:	3301      	adds	r3, #1
 80044fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29a      	uxth	r2, r3
 8004506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004508:	b29b      	uxth	r3, r3
 800450a:	029b      	lsls	r3, r3, #10
 800450c:	b29b      	uxth	r3, r3
 800450e:	4313      	orrs	r3, r2
 8004510:	b29a      	uxth	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004526:	827b      	strh	r3, [r7, #18]
 8004528:	8a7b      	ldrh	r3, [r7, #18]
 800452a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800452e:	827b      	strh	r3, [r7, #18]
 8004530:	8a7b      	ldrh	r3, [r7, #18]
 8004532:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004536:	827b      	strh	r3, [r7, #18]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	8a7b      	ldrh	r3, [r7, #18]
 800453e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800454a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800454e:	b29b      	uxth	r3, r3
 8004550:	8013      	strh	r3, [r2, #0]
 8004552:	e234      	b.n	80049be <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004568:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800456c:	2b00      	cmp	r3, #0
 800456e:	f280 80fc 	bge.w	800476a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29a      	uxth	r2, r3
 8004584:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004588:	4013      	ands	r3, r2
 800458a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80045a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045a4:	b292      	uxth	r2, r2
 80045a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80045a8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4413      	add	r3, r2
 80045bc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80045be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c0:	7b1b      	ldrb	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d125      	bne.n	8004612 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	3306      	adds	r3, #6
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80045f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8092 	beq.w	8004720 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004602:	6959      	ldr	r1, [r3, #20]
 8004604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004606:	88da      	ldrh	r2, [r3, #6]
 8004608:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800460c:	f005 fc75 	bl	8009efa <USB_ReadPMA>
 8004610:	e086      	b.n	8004720 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004614:	78db      	ldrb	r3, [r3, #3]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d10a      	bne.n	8004630 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800461a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800461e:	461a      	mov	r2, r3
 8004620:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9d9 	bl	80049da <HAL_PCD_EP_DB_Receive>
 8004628:	4603      	mov	r3, r0
 800462a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800462e:	e077      	b.n	8004720 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800466c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004670:	b29b      	uxth	r3, r3
 8004672:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d024      	beq.n	80046d8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	3302      	adds	r3, #2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80046ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d02e      	beq.n	8004720 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c8:	6959      	ldr	r1, [r3, #20]
 80046ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046cc:	891a      	ldrh	r2, [r3, #8]
 80046ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046d2:	f005 fc12 	bl	8009efa <USB_ReadPMA>
 80046d6:	e023      	b.n	8004720 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	3306      	adds	r3, #6
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004700:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004704:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004712:	6959      	ldr	r1, [r3, #20]
 8004714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004716:	895a      	ldrh	r2, [r3, #10]
 8004718:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800471c:	f005 fbed 	bl	8009efa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004728:	441a      	add	r2, r3
 800472a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004736:	441a      	add	r2, r3
 8004738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800473c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <PCD_EP_ISR_Handler+0x514>
 8004744:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	429a      	cmp	r2, r3
 800474e:	d206      	bcs.n	800475e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f007 f9fc 	bl	800bb54 <HAL_PCD_DataOutStageCallback>
 800475c:	e005      	b.n	800476a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004764:	4618      	mov	r0, r3
 8004766:	f003 fe93 	bl	8008490 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800476a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8123 	beq.w	80049be <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004778:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	3310      	adds	r3, #16
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4413      	add	r3, r2
 800478a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80047a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80047bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80047c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ca:	78db      	ldrb	r3, [r3, #3]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 80a2 	bne.w	8004916 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80047d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d4:	2200      	movs	r2, #0
 80047d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80047d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047da:	7b1b      	ldrb	r3, [r3, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8093 	beq.w	8004908 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d046      	beq.n	800487c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f0:	785b      	ldrb	r3, [r3, #1]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d126      	bne.n	8004844 <PCD_EP_ISR_Handler+0x608>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004804:	b29b      	uxth	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	4413      	add	r3, r2
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
 800480e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	011a      	lsls	r2, r3, #4
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	4413      	add	r3, r2
 8004818:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004828:	b29a      	uxth	r2, r3
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	801a      	strh	r2, [r3, #0]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483c:	b29a      	uxth	r2, r3
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	e061      	b.n	8004908 <PCD_EP_ISR_Handler+0x6cc>
 8004844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004846:	785b      	ldrb	r3, [r3, #1]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d15d      	bne.n	8004908 <PCD_EP_ISR_Handler+0x6cc>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800485a:	b29b      	uxth	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004860:	4413      	add	r3, r2
 8004862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	011a      	lsls	r2, r3, #4
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	4413      	add	r3, r2
 800486e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004872:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004876:	2200      	movs	r2, #0
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	e045      	b.n	8004908 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d126      	bne.n	80048d8 <PCD_EP_ISR_Handler+0x69c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489e:	4413      	add	r3, r2
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	011a      	lsls	r2, r3, #4
 80048a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048aa:	4413      	add	r3, r2
 80048ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048bc:	b29a      	uxth	r2, r3
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	e017      	b.n	8004908 <PCD_EP_ISR_Handler+0x6cc>
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d113      	bne.n	8004908 <PCD_EP_ISR_Handler+0x6cc>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ee:	4413      	add	r3, r2
 80048f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	011a      	lsls	r2, r3, #4
 80048f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fa:	4413      	add	r3, r2
 80048fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004900:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	2200      	movs	r2, #0
 8004906:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f007 f93b 	bl	800bb8a <HAL_PCD_DataInStageCallback>
 8004914:	e053      	b.n	80049be <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004916:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800491a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d146      	bne.n	80049b0 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800492a:	b29b      	uxth	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	3302      	adds	r3, #2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800494a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800494e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004956:	429a      	cmp	r2, r3
 8004958:	d907      	bls.n	800496a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800495a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004966:	619a      	str	r2, [r3, #24]
 8004968:	e002      	b.n	8004970 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800496a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496c:	2200      	movs	r2, #0
 800496e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f007 f903 	bl	800bb8a <HAL_PCD_DataInStageCallback>
 8004984:	e01b      	b.n	80049be <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800498e:	441a      	add	r2, r3
 8004990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004992:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800499c:	441a      	add	r2, r3
 800499e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049a8:	4618      	mov	r0, r3
 80049aa:	f003 fd71 	bl	8008490 <USB_EPStartXfer>
 80049ae:	e006      	b.n	80049be <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80049b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049b4:	461a      	mov	r2, r3
 80049b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f91b 	bl	8004bf4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	b21b      	sxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f6ff ac3b 	blt.w	8004246 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3758      	adds	r7, #88	@ 0x58
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b088      	sub	sp, #32
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d07e      	beq.n	8004af0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	3302      	adds	r3, #2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	8b7b      	ldrh	r3, [r7, #26]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d306      	bcc.n	8004a34 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	8b7b      	ldrh	r3, [r7, #26]
 8004a2c:	1ad2      	subs	r2, r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	619a      	str	r2, [r3, #24]
 8004a32:	e002      	b.n	8004a3a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d123      	bne.n	8004a8a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5c:	833b      	strh	r3, [r7, #24]
 8004a5e:	8b3b      	ldrh	r3, [r7, #24]
 8004a60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a64:	833b      	strh	r3, [r7, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	8b3b      	ldrh	r3, [r7, #24]
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01f      	beq.n	8004ad4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aae:	82fb      	strh	r3, [r7, #22]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	441a      	add	r2, r3
 8004abe:	8afb      	ldrh	r3, [r7, #22]
 8004ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004acc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ad4:	8b7b      	ldrh	r3, [r7, #26]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8087 	beq.w	8004bea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6959      	ldr	r1, [r3, #20]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	891a      	ldrh	r2, [r3, #8]
 8004ae8:	8b7b      	ldrh	r3, [r7, #26]
 8004aea:	f005 fa06 	bl	8009efa <USB_ReadPMA>
 8004aee:	e07c      	b.n	8004bea <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	3306      	adds	r3, #6
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b18:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	8b7b      	ldrh	r3, [r7, #26]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d306      	bcc.n	8004b32 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	8b7b      	ldrh	r3, [r7, #26]
 8004b2a:	1ad2      	subs	r2, r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	619a      	str	r2, [r3, #24]
 8004b30:	e002      	b.n	8004b38 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d123      	bne.n	8004b88 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5a:	83fb      	strh	r3, [r7, #30]
 8004b5c:	8bfb      	ldrh	r3, [r7, #30]
 8004b5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b62:	83fb      	strh	r3, [r7, #30]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	8bfb      	ldrh	r3, [r7, #30]
 8004b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11f      	bne.n	8004bd2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bac:	83bb      	strh	r3, [r7, #28]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	8bbb      	ldrh	r3, [r7, #28]
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004bd2:	8b7b      	ldrh	r3, [r7, #26]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6959      	ldr	r1, [r3, #20]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	895a      	ldrh	r2, [r3, #10]
 8004be4:	8b7b      	ldrh	r3, [r7, #26]
 8004be6:	f005 f988 	bl	8009efa <USB_ReadPMA>
    }
  }

  return count;
 8004bea:	8b7b      	ldrh	r3, [r7, #26]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b0a4      	sub	sp, #144	@ 0x90
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 81dd 	beq.w	8004fc8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	3302      	adds	r3, #2
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c36:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d907      	bls.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	619a      	str	r2, [r3, #24]
 8004c54:	e002      	b.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 80b9 	bne.w	8004dd8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d126      	bne.n	8004cbc <HAL_PCD_EP_DB_Transmit+0xc8>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c82:	4413      	add	r3, r2
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	011a      	lsls	r2, r3, #4
 8004c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8e:	4413      	add	r3, r2
 8004c90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	e01a      	b.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d116      	bne.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd8:	4413      	add	r3, r2
 8004cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	011a      	lsls	r2, r3, #4
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	2200      	movs	r2, #0
 8004cf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d126      	bne.n	8004d4e <HAL_PCD_EP_DB_Transmit+0x15a>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	011a      	lsls	r2, r3, #4
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	801a      	strh	r2, [r3, #0]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	801a      	strh	r2, [r3, #0]
 8004d4c:	e017      	b.n	8004d7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	785b      	ldrb	r3, [r3, #1]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d113      	bne.n	8004d7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	4413      	add	r3, r2
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	011a      	lsls	r2, r3, #4
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	4413      	add	r3, r2
 8004d72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	4619      	mov	r1, r3
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f006 ff00 	bl	800bb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 82fc 	beq.w	800538e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db0:	82fb      	strh	r3, [r7, #22]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	8afb      	ldrh	r3, [r7, #22]
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]
 8004dd6:	e2da      	b.n	800538e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d021      	beq.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 82ae 	bne.w	800538e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e3a:	441a      	add	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e48:	441a      	add	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6a1a      	ldr	r2, [r3, #32]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d30b      	bcc.n	8004e72 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6a1a      	ldr	r2, [r3, #32]
 8004e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	621a      	str	r2, [r3, #32]
 8004e70:	e017      	b.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d108      	bne.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004e7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004e8a:	e00a      	b.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d165      	bne.n	8004f76 <HAL_PCD_EP_DB_Transmit+0x382>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ebe:	4413      	add	r3, r2
 8004ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	011a      	lsls	r2, r3, #4
 8004ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eca:	4413      	add	r3, r2
 8004ecc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	801a      	strh	r2, [r3, #0]
 8004ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ee8:	d91d      	bls.n	8004f26 <HAL_PCD_EP_DB_Transmit+0x332>
 8004eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <HAL_PCD_EP_DB_Transmit+0x310>
 8004efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f00:	3b01      	subs	r3, #1
 8004f02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	029b      	lsls	r3, r3, #10
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	4313      	orrs	r3, r2
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e044      	b.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <HAL_PCD_EP_DB_Transmit+0x350>
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	e035      	b.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_PCD_EP_DB_Transmit+0x36a>
 8004f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	029b      	lsls	r3, r3, #10
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	e01c      	b.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d118      	bne.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f92:	4413      	add	r3, r2
 8004f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	011a      	lsls	r2, r3, #4
 8004f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	6959      	ldr	r1, [r3, #20]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	891a      	ldrh	r2, [r3, #8]
 8004fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f004 ff54 	bl	8009e6e <USB_WritePMA>
 8004fc6:	e1e2      	b.n	800538e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4413      	add	r3, r2
 8004fdc:	3306      	adds	r3, #6
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d307      	bcc.n	8005010 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005008:	1ad2      	subs	r2, r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	619a      	str	r2, [r3, #24]
 800500e:	e002      	b.n	8005016 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2200      	movs	r2, #0
 8005014:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f040 80c0 	bne.w	80051a0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d126      	bne.n	8005076 <HAL_PCD_EP_DB_Transmit+0x482>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800503c:	4413      	add	r3, r2
 800503e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	011a      	lsls	r2, r3, #4
 8005046:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005048:	4413      	add	r3, r2
 800504a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800504e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505a:	b29a      	uxth	r2, r3
 800505c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800506a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506e:	b29a      	uxth	r2, r3
 8005070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e01a      	b.n	80050ac <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d116      	bne.n	80050ac <HAL_PCD_EP_DB_Transmit+0x4b8>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	667b      	str	r3, [r7, #100]	@ 0x64
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800508c:	b29b      	uxth	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005092:	4413      	add	r3, r2
 8005094:	667b      	str	r3, [r7, #100]	@ 0x64
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	011a      	lsls	r2, r3, #4
 800509c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800509e:	4413      	add	r3, r2
 80050a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050a8:	2200      	movs	r2, #0
 80050aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d12b      	bne.n	8005112 <HAL_PCD_EP_DB_Transmit+0x51e>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ce:	4413      	add	r3, r2
 80050d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	011a      	lsls	r2, r3, #4
 80050d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050da:	4413      	add	r3, r2
 80050dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005108:	b29a      	uxth	r2, r3
 800510a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e017      	b.n	8005142 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d113      	bne.n	8005142 <HAL_PCD_EP_DB_Transmit+0x54e>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005122:	b29b      	uxth	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005128:	4413      	add	r3, r2
 800512a:	677b      	str	r3, [r7, #116]	@ 0x74
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	011a      	lsls	r2, r3, #4
 8005132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005134:	4413      	add	r3, r2
 8005136:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800513a:	673b      	str	r3, [r7, #112]	@ 0x70
 800513c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800513e:	2200      	movs	r2, #0
 8005140:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	4619      	mov	r1, r3
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f006 fd1e 	bl	800bb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 811a 	bne.w	800538e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005174:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	441a      	add	r2, r3
 8005186:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005192:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
 800519e:	e0f6      	b.n	800538e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d121      	bne.n	80051ee <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f040 80ca 	bne.w	800538e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	695a      	ldr	r2, [r3, #20]
 80051fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005202:	441a      	add	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005210:	441a      	add	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6a1a      	ldr	r2, [r3, #32]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d30b      	bcc.n	800523a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	621a      	str	r2, [r3, #32]
 8005238:	e017      	b.n	800526a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005242:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005246:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005252:	e00a      	b.n	800526a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d165      	bne.n	8005344 <HAL_PCD_EP_DB_Transmit+0x750>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005286:	b29b      	uxth	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800528c:	4413      	add	r3, r2
 800528e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005298:	4413      	add	r3, r2
 800529a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800529e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80052b6:	d91d      	bls.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x700>
 80052b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80052cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ce:	3b01      	subs	r3, #1
 80052d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052da:	b29b      	uxth	r3, r3
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4313      	orrs	r3, r2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	e041      	b.n	8005378 <HAL_PCD_EP_DB_Transmit+0x784>
 80052f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <HAL_PCD_EP_DB_Transmit+0x71e>
 80052fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530a:	b29a      	uxth	r2, r3
 800530c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800530e:	801a      	strh	r2, [r3, #0]
 8005310:	e032      	b.n	8005378 <HAL_PCD_EP_DB_Transmit+0x784>
 8005312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_PCD_EP_DB_Transmit+0x738>
 8005326:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005328:	3301      	adds	r3, #1
 800532a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800532c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29a      	uxth	r2, r3
 8005332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005334:	b29b      	uxth	r3, r3
 8005336:	029b      	lsls	r3, r3, #10
 8005338:	b29b      	uxth	r3, r3
 800533a:	4313      	orrs	r3, r2
 800533c:	b29a      	uxth	r2, r3
 800533e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	e019      	b.n	8005378 <HAL_PCD_EP_DB_Transmit+0x784>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d115      	bne.n	8005378 <HAL_PCD_EP_DB_Transmit+0x784>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005354:	b29b      	uxth	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535a:	4413      	add	r3, r2
 800535c:	657b      	str	r3, [r7, #84]	@ 0x54
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	011a      	lsls	r2, r3, #4
 8005364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005366:	4413      	add	r3, r2
 8005368:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800536c:	653b      	str	r3, [r7, #80]	@ 0x50
 800536e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005372:	b29a      	uxth	r2, r3
 8005374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005376:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6959      	ldr	r1, [r3, #20]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	895a      	ldrh	r2, [r3, #10]
 8005384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005388:	b29b      	uxth	r3, r3
 800538a:	f004 fd70 	bl	8009e6e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a8:	82bb      	strh	r3, [r7, #20]
 80053aa:	8abb      	ldrh	r3, [r7, #20]
 80053ac:	f083 0310 	eor.w	r3, r3, #16
 80053b0:	82bb      	strh	r3, [r7, #20]
 80053b2:	8abb      	ldrh	r3, [r7, #20]
 80053b4:	f083 0320 	eor.w	r3, r3, #32
 80053b8:	82bb      	strh	r3, [r7, #20]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	8abb      	ldrh	r3, [r7, #20]
 80053ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3790      	adds	r7, #144	@ 0x90
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	460b      	mov	r3, r1
 80053f4:	817b      	strh	r3, [r7, #10]
 80053f6:	4613      	mov	r3, r2
 80053f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80053fa:	897b      	ldrh	r3, [r7, #10]
 80053fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005406:	897b      	ldrh	r3, [r7, #10]
 8005408:	f003 0207 	and.w	r2, r3, #7
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	3310      	adds	r3, #16
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e009      	b.n	8005432 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800541e:	897a      	ldrh	r2, [r7, #10]
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005432:	893b      	ldrh	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	b29a      	uxth	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	80da      	strh	r2, [r3, #6]
 8005446:	e00b      	b.n	8005460 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2201      	movs	r2, #1
 800544c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	b29a      	uxth	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	b29a      	uxth	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e272      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8087 	beq.w	800559a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800548c:	4b92      	ldr	r3, [pc, #584]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 030c 	and.w	r3, r3, #12
 8005494:	2b04      	cmp	r3, #4
 8005496:	d00c      	beq.n	80054b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005498:	4b8f      	ldr	r3, [pc, #572]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 030c 	and.w	r3, r3, #12
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d112      	bne.n	80054ca <HAL_RCC_OscConfig+0x5e>
 80054a4:	4b8c      	ldr	r3, [pc, #560]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054b0:	d10b      	bne.n	80054ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b2:	4b89      	ldr	r3, [pc, #548]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d06c      	beq.n	8005598 <HAL_RCC_OscConfig+0x12c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d168      	bne.n	8005598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e24c      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_OscConfig+0x76>
 80054d4:	4b80      	ldr	r3, [pc, #512]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a7f      	ldr	r2, [pc, #508]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80054da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	e02e      	b.n	8005540 <HAL_RCC_OscConfig+0xd4>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0x98>
 80054ea:	4b7b      	ldr	r3, [pc, #492]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a7a      	ldr	r2, [pc, #488]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b78      	ldr	r3, [pc, #480]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a77      	ldr	r2, [pc, #476]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e01d      	b.n	8005540 <HAL_RCC_OscConfig+0xd4>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800550c:	d10c      	bne.n	8005528 <HAL_RCC_OscConfig+0xbc>
 800550e:	4b72      	ldr	r3, [pc, #456]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a71      	ldr	r2, [pc, #452]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 8005514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4b6f      	ldr	r3, [pc, #444]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6e      	ldr	r2, [pc, #440]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e00b      	b.n	8005540 <HAL_RCC_OscConfig+0xd4>
 8005528:	4b6b      	ldr	r3, [pc, #428]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a6a      	ldr	r2, [pc, #424]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800552e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	4b68      	ldr	r3, [pc, #416]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a67      	ldr	r2, [pc, #412]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800553a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800553e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d013      	beq.n	8005570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005548:	f7fd f838 	bl	80025bc <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005550:	f7fd f834 	bl	80025bc <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	@ 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e200      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005562:	4b5d      	ldr	r3, [pc, #372]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0xe4>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005570:	f7fd f824 	bl	80025bc <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005578:	f7fd f820 	bl	80025bc <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b64      	cmp	r3, #100	@ 0x64
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1ec      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800558a:	4b53      	ldr	r3, [pc, #332]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x10c>
 8005596:	e000      	b.n	800559a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d063      	beq.n	800566e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055a6:	4b4c      	ldr	r3, [pc, #304]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80055b2:	4b49      	ldr	r3, [pc, #292]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d11c      	bne.n	80055f8 <HAL_RCC_OscConfig+0x18c>
 80055be:	4b46      	ldr	r3, [pc, #280]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d116      	bne.n	80055f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ca:	4b43      	ldr	r3, [pc, #268]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x176>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d001      	beq.n	80055e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e1c0      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e2:	4b3d      	ldr	r3, [pc, #244]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4939      	ldr	r1, [pc, #228]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f6:	e03a      	b.n	800566e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d020      	beq.n	8005642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005600:	4b36      	ldr	r3, [pc, #216]	@ (80056dc <HAL_RCC_OscConfig+0x270>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005606:	f7fc ffd9 	bl	80025bc <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560e:	f7fc ffd5 	bl	80025bc <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e1a1      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005620:	4b2d      	ldr	r3, [pc, #180]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562c:	4b2a      	ldr	r3, [pc, #168]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4927      	ldr	r1, [pc, #156]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]
 8005640:	e015      	b.n	800566e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005642:	4b26      	ldr	r3, [pc, #152]	@ (80056dc <HAL_RCC_OscConfig+0x270>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fc ffb8 	bl	80025bc <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005650:	f7fc ffb4 	bl	80025bc <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e180      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005662:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d03a      	beq.n	80056f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d019      	beq.n	80056b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005682:	4b17      	ldr	r3, [pc, #92]	@ (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005688:	f7fc ff98 	bl	80025bc <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005690:	f7fc ff94 	bl	80025bc <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e160      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <HAL_RCC_OscConfig+0x26c>)
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80056ae:	2001      	movs	r0, #1
 80056b0:	f000 faba 	bl	8005c28 <RCC_Delay>
 80056b4:	e01c      	b.n	80056f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b6:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <HAL_RCC_OscConfig+0x274>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056bc:	f7fc ff7e 	bl	80025bc <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c2:	e00f      	b.n	80056e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c4:	f7fc ff7a 	bl	80025bc <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d908      	bls.n	80056e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e146      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
 80056d6:	bf00      	nop
 80056d8:	40021000 	.word	0x40021000
 80056dc:	42420000 	.word	0x42420000
 80056e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e4:	4b92      	ldr	r3, [pc, #584]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e9      	bne.n	80056c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80a6 	beq.w	800584a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056fe:	2300      	movs	r3, #0
 8005700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005702:	4b8b      	ldr	r3, [pc, #556]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10d      	bne.n	800572a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800570e:	4b88      	ldr	r3, [pc, #544]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	4a87      	ldr	r2, [pc, #540]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005718:	61d3      	str	r3, [r2, #28]
 800571a:	4b85      	ldr	r3, [pc, #532]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005726:	2301      	movs	r3, #1
 8005728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572a:	4b82      	ldr	r3, [pc, #520]	@ (8005934 <HAL_RCC_OscConfig+0x4c8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d118      	bne.n	8005768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005736:	4b7f      	ldr	r3, [pc, #508]	@ (8005934 <HAL_RCC_OscConfig+0x4c8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a7e      	ldr	r2, [pc, #504]	@ (8005934 <HAL_RCC_OscConfig+0x4c8>)
 800573c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005742:	f7fc ff3b 	bl	80025bc <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800574a:	f7fc ff37 	bl	80025bc <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b64      	cmp	r3, #100	@ 0x64
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e103      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575c:	4b75      	ldr	r3, [pc, #468]	@ (8005934 <HAL_RCC_OscConfig+0x4c8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0f0      	beq.n	800574a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d106      	bne.n	800577e <HAL_RCC_OscConfig+0x312>
 8005770:	4b6f      	ldr	r3, [pc, #444]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	4a6e      	ldr	r2, [pc, #440]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6213      	str	r3, [r2, #32]
 800577c:	e02d      	b.n	80057da <HAL_RCC_OscConfig+0x36e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10c      	bne.n	80057a0 <HAL_RCC_OscConfig+0x334>
 8005786:	4b6a      	ldr	r3, [pc, #424]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	4a69      	ldr	r2, [pc, #420]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	6213      	str	r3, [r2, #32]
 8005792:	4b67      	ldr	r3, [pc, #412]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	4a66      	ldr	r2, [pc, #408]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	6213      	str	r3, [r2, #32]
 800579e:	e01c      	b.n	80057da <HAL_RCC_OscConfig+0x36e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x356>
 80057a8:	4b61      	ldr	r3, [pc, #388]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	4a60      	ldr	r2, [pc, #384]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80057ae:	f043 0304 	orr.w	r3, r3, #4
 80057b2:	6213      	str	r3, [r2, #32]
 80057b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6213      	str	r3, [r2, #32]
 80057c0:	e00b      	b.n	80057da <HAL_RCC_OscConfig+0x36e>
 80057c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	4a5a      	ldr	r2, [pc, #360]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	6213      	str	r3, [r2, #32]
 80057ce:	4b58      	ldr	r3, [pc, #352]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	4a57      	ldr	r2, [pc, #348]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80057d4:	f023 0304 	bic.w	r3, r3, #4
 80057d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d015      	beq.n	800580e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e2:	f7fc feeb 	bl	80025bc <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e8:	e00a      	b.n	8005800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fc fee7 	bl	80025bc <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e0b1      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	4b4b      	ldr	r3, [pc, #300]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ee      	beq.n	80057ea <HAL_RCC_OscConfig+0x37e>
 800580c:	e014      	b.n	8005838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800580e:	f7fc fed5 	bl	80025bc <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005814:	e00a      	b.n	800582c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005816:	f7fc fed1 	bl	80025bc <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e09b      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582c:	4b40      	ldr	r3, [pc, #256]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ee      	bne.n	8005816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800583e:	4b3c      	ldr	r3, [pc, #240]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	4a3b      	ldr	r2, [pc, #236]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8087 	beq.w	8005962 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005854:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 030c 	and.w	r3, r3, #12
 800585c:	2b08      	cmp	r3, #8
 800585e:	d061      	beq.n	8005924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d146      	bne.n	80058f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005868:	4b33      	ldr	r3, [pc, #204]	@ (8005938 <HAL_RCC_OscConfig+0x4cc>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586e:	f7fc fea5 	bl	80025bc <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005876:	f7fc fea1 	bl	80025bc <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e06d      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005888:	4b29      	ldr	r3, [pc, #164]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f0      	bne.n	8005876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589c:	d108      	bne.n	80058b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800589e:	4b24      	ldr	r3, [pc, #144]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	4921      	ldr	r1, [pc, #132]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a19      	ldr	r1, [r3, #32]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	430b      	orrs	r3, r1
 80058c2:	491b      	ldr	r1, [pc, #108]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005938 <HAL_RCC_OscConfig+0x4cc>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ce:	f7fc fe75 	bl	80025bc <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d6:	f7fc fe71 	bl	80025bc <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e03d      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058e8:	4b11      	ldr	r3, [pc, #68]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x46a>
 80058f4:	e035      	b.n	8005962 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b10      	ldr	r3, [pc, #64]	@ (8005938 <HAL_RCC_OscConfig+0x4cc>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fc:	f7fc fe5e 	bl	80025bc <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005904:	f7fc fe5a 	bl	80025bc <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e026      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <HAL_RCC_OscConfig+0x4c4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x498>
 8005922:	e01e      	b.n	8005962 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d107      	bne.n	800593c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e019      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
 8005930:	40021000 	.word	0x40021000
 8005934:	40007000 	.word	0x40007000
 8005938:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800593c:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <HAL_RCC_OscConfig+0x500>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	429a      	cmp	r2, r3
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d001      	beq.n	8005962 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40021000 	.word	0x40021000

08005970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0d0      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005984:	4b6a      	ldr	r3, [pc, #424]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d910      	bls.n	80059b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b67      	ldr	r3, [pc, #412]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 0207 	bic.w	r2, r3, #7
 800599a:	4965      	ldr	r1, [pc, #404]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b63      	ldr	r3, [pc, #396]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0b8      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d020      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059cc:	4b59      	ldr	r3, [pc, #356]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a58      	ldr	r2, [pc, #352]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 80059d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e4:	4b53      	ldr	r3, [pc, #332]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a52      	ldr	r2, [pc, #328]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 80059ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80059ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f0:	4b50      	ldr	r3, [pc, #320]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	494d      	ldr	r1, [pc, #308]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d040      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d107      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a16:	4b47      	ldr	r3, [pc, #284]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d115      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e07f      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d107      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2e:	4b41      	ldr	r3, [pc, #260]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e073      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e06b      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a4e:	4b39      	ldr	r3, [pc, #228]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f023 0203 	bic.w	r2, r3, #3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4936      	ldr	r1, [pc, #216]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a60:	f7fc fdac 	bl	80025bc <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a66:	e00a      	b.n	8005a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a68:	f7fc fda8 	bl	80025bc <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e053      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f003 020c 	and.w	r2, r3, #12
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d1eb      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a90:	4b27      	ldr	r3, [pc, #156]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d210      	bcs.n	8005ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9e:	4b24      	ldr	r3, [pc, #144]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 0207 	bic.w	r2, r3, #7
 8005aa6:	4922      	ldr	r1, [pc, #136]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	4b20      	ldr	r3, [pc, #128]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e032      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005acc:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4916      	ldr	r1, [pc, #88]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005aea:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	490e      	ldr	r1, [pc, #56]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005afe:	f000 f821 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8005b02:	4602      	mov	r2, r0
 8005b04:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	091b      	lsrs	r3, r3, #4
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	490a      	ldr	r1, [pc, #40]	@ (8005b38 <HAL_RCC_ClockConfig+0x1c8>)
 8005b10:	5ccb      	ldrb	r3, [r1, r3]
 8005b12:	fa22 f303 	lsr.w	r3, r2, r3
 8005b16:	4a09      	ldr	r2, [pc, #36]	@ (8005b3c <HAL_RCC_ClockConfig+0x1cc>)
 8005b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b1a:	4b09      	ldr	r3, [pc, #36]	@ (8005b40 <HAL_RCC_ClockConfig+0x1d0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fc fd0a 	bl	8002538 <HAL_InitTick>

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40022000 	.word	0x40022000
 8005b34:	40021000 	.word	0x40021000
 8005b38:	0800fc50 	.word	0x0800fc50
 8005b3c:	20000004 	.word	0x20000004
 8005b40:	20000008 	.word	0x20000008

08005b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d002      	beq.n	8005b74 <HAL_RCC_GetSysClockFreq+0x30>
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d003      	beq.n	8005b7a <HAL_RCC_GetSysClockFreq+0x36>
 8005b72:	e027      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b74:	4b19      	ldr	r3, [pc, #100]	@ (8005bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8005b76:	613b      	str	r3, [r7, #16]
      break;
 8005b78:	e027      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	0c9b      	lsrs	r3, r3, #18
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	4a17      	ldr	r2, [pc, #92]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b84:	5cd3      	ldrb	r3, [r2, r3]
 8005b86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b92:	4b11      	ldr	r3, [pc, #68]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	0c5b      	lsrs	r3, r3, #17
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	4a11      	ldr	r2, [pc, #68]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ba0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8005bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8005ba6:	fb03 f202 	mul.w	r2, r3, r2
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e004      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005be8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	613b      	str	r3, [r7, #16]
      break;
 8005bc2:	e002      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bc4:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8005bc6:	613b      	str	r3, [r7, #16]
      break;
 8005bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bca:	693b      	ldr	r3, [r7, #16]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	007a1200 	.word	0x007a1200
 8005be0:	0800fc68 	.word	0x0800fc68
 8005be4:	0800fc78 	.word	0x0800fc78
 8005be8:	003d0900 	.word	0x003d0900

08005bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf0:	4b02      	ldr	r3, [pc, #8]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr
 8005bfc:	20000004 	.word	0x20000004

08005c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c04:	f7ff fff2 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	0adb      	lsrs	r3, r3, #11
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4903      	ldr	r1, [pc, #12]	@ (8005c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40021000 	.word	0x40021000
 8005c24:	0800fc60 	.word	0x0800fc60

08005c28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c30:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <RCC_Delay+0x34>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a0a      	ldr	r2, [pc, #40]	@ (8005c60 <RCC_Delay+0x38>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	0a5b      	lsrs	r3, r3, #9
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
 8005c42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c44:	bf00      	nop
  }
  while (Delay --);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1e5a      	subs	r2, r3, #1
 8005c4a:	60fa      	str	r2, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f9      	bne.n	8005c44 <RCC_Delay+0x1c>
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	20000004 	.word	0x20000004
 8005c60:	10624dd3 	.word	0x10624dd3

08005c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d07d      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c84:	4b4f      	ldr	r3, [pc, #316]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10d      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c90:	4b4c      	ldr	r3, [pc, #304]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	4a4b      	ldr	r2, [pc, #300]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	61d3      	str	r3, [r2, #28]
 8005c9c:	4b49      	ldr	r3, [pc, #292]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	4b46      	ldr	r3, [pc, #280]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d118      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cb8:	4b43      	ldr	r3, [pc, #268]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a42      	ldr	r2, [pc, #264]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc4:	f7fc fc7a 	bl	80025bc <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cca:	e008      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ccc:	f7fc fc76 	bl	80025bc <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	@ 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e06d      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cde:	4b3a      	ldr	r3, [pc, #232]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cea:	4b36      	ldr	r3, [pc, #216]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d02e      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d027      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d08:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d12:	4b2e      	ldr	r3, [pc, #184]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d18:	4b2c      	ldr	r3, [pc, #176]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d1e:	4a29      	ldr	r2, [pc, #164]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d014      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2e:	f7fc fc45 	bl	80025bc <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d34:	e00a      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d36:	f7fc fc41 	bl	80025bc <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e036      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0ee      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d58:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4917      	ldr	r1, [pc, #92]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d70:	4b14      	ldr	r3, [pc, #80]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	4a13      	ldr	r2, [pc, #76]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d88:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	490b      	ldr	r1, [pc, #44]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d008      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005da6:	4b07      	ldr	r3, [pc, #28]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4904      	ldr	r1, [pc, #16]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	40007000 	.word	0x40007000
 8005dcc:	42420440 	.word	0x42420440

08005dd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	2300      	movs	r3, #0
 8005dea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	f200 808a 	bhi.w	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d045      	beq.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d075      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005e06:	e082      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005e08:	4b46      	ldr	r3, [pc, #280]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005e0e:	4b45      	ldr	r3, [pc, #276]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d07b      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	0c9b      	lsrs	r3, r3, #18
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	4a41      	ldr	r2, [pc, #260]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005e24:	5cd3      	ldrb	r3, [r2, r3]
 8005e26:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d015      	beq.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e32:	4b3c      	ldr	r3, [pc, #240]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	0c5b      	lsrs	r3, r3, #17
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	4a3b      	ldr	r2, [pc, #236]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005e3e:	5cd3      	ldrb	r3, [r2, r3]
 8005e40:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e4c:	4a38      	ldr	r2, [pc, #224]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	e004      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4a34      	ldr	r2, [pc, #208]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005e68:	4b2e      	ldr	r3, [pc, #184]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e74:	d102      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	61bb      	str	r3, [r7, #24]
      break;
 8005e7a:	e04a      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	4a2d      	ldr	r2, [pc, #180]	@ (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	61bb      	str	r3, [r7, #24]
      break;
 8005e8a:	e042      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005e8c:	4b25      	ldr	r3, [pc, #148]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e9c:	d108      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005ea8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e01f      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eba:	d109      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ebc:	4b19      	ldr	r3, [pc, #100]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005ec8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	e00f      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eda:	d11c      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005edc:	4b11      	ldr	r3, [pc, #68]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d016      	beq.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005ee8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005eec:	61bb      	str	r3, [r7, #24]
      break;
 8005eee:	e012      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ef0:	e011      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005ef2:	f7ff fe85 	bl	8005c00 <HAL_RCC_GetPCLK2Freq>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	0b9b      	lsrs	r3, r3, #14
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	3301      	adds	r3, #1
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	61bb      	str	r3, [r7, #24]
      break;
 8005f0c:	e004      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f16:	bf00      	nop
    }
  }
  return (frequency);
 8005f18:	69bb      	ldr	r3, [r7, #24]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40021000 	.word	0x40021000
 8005f28:	0800fc7c 	.word	0x0800fc7c
 8005f2c:	0800fc8c 	.word	0x0800fc8c
 8005f30:	007a1200 	.word	0x007a1200
 8005f34:	003d0900 	.word	0x003d0900
 8005f38:	aaaaaaab 	.word	0xaaaaaaab

08005f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e076      	b.n	800603c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d108      	bne.n	8005f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f5e:	d009      	beq.n	8005f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	61da      	str	r2, [r3, #28]
 8005f66:	e005      	b.n	8005f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fc f820 	bl	8001fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005faa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff8:	ea42 0103 	orr.w	r1, r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006000:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	0c1a      	lsrs	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f002 0204 	and.w	r2, r2, #4
 800601a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69da      	ldr	r2, [r3, #28]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800602a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b01      	cmp	r3, #1
 800605c:	d001      	beq.n	8006062 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
 8006060:	e097      	b.n	8006192 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_SPI_Transmit_DMA+0x2a>
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e08f      	b.n	8006192 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_SPI_Transmit_DMA+0x3c>
 800607c:	2302      	movs	r3, #2
 800607e:	e088      	b.n	8006192 <HAL_SPI_Transmit_DMA+0x14e>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2203      	movs	r2, #3
 800608c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ce:	d10f      	bne.n	80060f0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f4:	4a29      	ldr	r2, [pc, #164]	@ (800619c <HAL_SPI_Transmit_DMA+0x158>)
 80060f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fc:	4a28      	ldr	r2, [pc, #160]	@ (80061a0 <HAL_SPI_Transmit_DMA+0x15c>)
 80060fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006104:	4a27      	ldr	r2, [pc, #156]	@ (80061a4 <HAL_SPI_Transmit_DMA+0x160>)
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800610c:	2200      	movs	r2, #0
 800610e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006118:	4619      	mov	r1, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006126:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006128:	f7fd f868 	bl	80031fc <HAL_DMA_Start_IT>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006136:	f043 0210 	orr.w	r2, r3, #16
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e023      	b.n	8006192 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d007      	beq.n	8006168 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006166:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0220 	orr.w	r2, r2, #32
 800617e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0202 	orr.w	r2, r2, #2
 800618e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	0800643f 	.word	0x0800643f
 80061a0:	08006399 	.word	0x08006399
 80061a4:	0800645b 	.word	0x0800645b

080061a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	099b      	lsrs	r3, r3, #6
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10f      	bne.n	80061ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	099b      	lsrs	r3, r3, #6
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d004      	beq.n	80061ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
    return;
 80061ea:	e0be      	b.n	800636a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <HAL_SPI_IRQHandler+0x66>
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
    return;
 800620c:	e0ad      	b.n	800636a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_SPI_IRQHandler+0x80>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	099b      	lsrs	r3, r3, #6
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80a1 	beq.w	800636a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 809a 	beq.w	800636a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d023      	beq.n	800628a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b03      	cmp	r3, #3
 800624c:	d011      	beq.n	8006272 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006252:	f043 0204 	orr.w	r2, r3, #4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	e00b      	b.n	800628a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006272:	2300      	movs	r3, #0
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	693b      	ldr	r3, [r7, #16]
        return;
 8006288:	e06f      	b.n	800636a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d014      	beq.n	80062c0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629a:	f043 0201 	orr.w	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d04f      	beq.n	8006368 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d104      	bne.n	80062f4 <HAL_SPI_IRQHandler+0x14c>
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d034      	beq.n	800635e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0203 	bic.w	r2, r2, #3
 8006302:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d011      	beq.n	8006330 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006310:	4a17      	ldr	r2, [pc, #92]	@ (8006370 <HAL_SPI_IRQHandler+0x1c8>)
 8006312:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006318:	4618      	mov	r0, r3
 800631a:	f7fc ffcf 	bl	80032bc <HAL_DMA_Abort_IT>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006328:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006334:	2b00      	cmp	r3, #0
 8006336:	d016      	beq.n	8006366 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633c:	4a0c      	ldr	r2, [pc, #48]	@ (8006370 <HAL_SPI_IRQHandler+0x1c8>)
 800633e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006344:	4618      	mov	r0, r3
 8006346:	f7fc ffb9 	bl	80032bc <HAL_DMA_Abort_IT>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006354:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800635c:	e003      	b.n	8006366 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f811 	bl	8006386 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006364:	e000      	b.n	8006368 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006366:	bf00      	nop
    return;
 8006368:	bf00      	nop
  }
}
 800636a:	3720      	adds	r7, #32
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	0800649b 	.word	0x0800649b

08006374 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr

08006386 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063a6:	f7fc f909 	bl	80025bc <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d03b      	beq.n	8006432 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0220 	bic.w	r2, r2, #32
 80063c8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0202 	bic.w	r2, r2, #2
 80063d8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	2164      	movs	r1, #100	@ 0x64
 80063de:	6978      	ldr	r0, [r7, #20]
 80063e0:	f000 f8f8 	bl	80065d4 <SPI_EndRxTxTransaction>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d005      	beq.n	80063f6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800642a:	6978      	ldr	r0, [r7, #20]
 800642c:	f7ff ffab 	bl	8006386 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006430:	e002      	b.n	8006438 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006432:	6978      	ldr	r0, [r7, #20]
 8006434:	f7fb f934 	bl	80016a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7ff ff91 	bl	8006374 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0203 	bic.w	r2, r2, #3
 8006476:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647c:	f043 0210 	orr.w	r2, r3, #16
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff ff7a 	bl	8006386 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff ff66 	bl	8006386 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064d4:	f7fc f872 	bl	80025bc <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	4413      	add	r3, r2
 80064e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064e4:	f7fc f86a 	bl	80025bc <HAL_GetTick>
 80064e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064ea:	4b39      	ldr	r3, [pc, #228]	@ (80065d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	015b      	lsls	r3, r3, #5
 80064f0:	0d1b      	lsrs	r3, r3, #20
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064fa:	e054      	b.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006502:	d050      	beq.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006504:	f7fc f85a 	bl	80025bc <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	429a      	cmp	r2, r3
 8006512:	d902      	bls.n	800651a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d13d      	bne.n	8006596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006532:	d111      	bne.n	8006558 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800653c:	d004      	beq.n	8006548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006546:	d107      	bne.n	8006558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006560:	d10f      	bne.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e017      	b.n	80065c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4013      	ands	r3, r2
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d19b      	bne.n	80064fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000004 	.word	0x20000004

080065d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2201      	movs	r2, #1
 80065e8:	2102      	movs	r1, #2
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff ff6a 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e013      	b.n	800662e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	2180      	movs	r1, #128	@ 0x80
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff ff57 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e000      	b.n	800662e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e041      	b.n	80066cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fb fd63 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2202      	movs	r2, #2
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f000 fb91 	bl	8006d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10f      	bne.n	800670c <HAL_TIM_Base_Stop+0x38>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a1a      	ldr	r2, [r3, #32]
 80066f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <HAL_TIM_Base_Stop+0x38>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr

08006720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	d001      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e03a      	b.n	80067ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a18      	ldr	r2, [pc, #96]	@ (80067b8 <HAL_TIM_Base_Start_IT+0x98>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00e      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0x58>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006762:	d009      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0x58>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a14      	ldr	r2, [pc, #80]	@ (80067bc <HAL_TIM_Base_Start_IT+0x9c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0x58>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a13      	ldr	r2, [pc, #76]	@ (80067c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d111      	bne.n	800679c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b06      	cmp	r3, #6
 8006788:	d010      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0201 	orr.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679a:	e007      	b.n	80067ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	40012c00 	.word	0x40012c00
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800

080067c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e041      	b.n	800685a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f839 	bl	8006862 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f000 faca 	bl	8006d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d020      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01b      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0202 	mvn.w	r2, #2
 80068a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fa fcd0 	bl	8001264 <HAL_TIM_IC_CaptureCallback>
 80068c4:	e005      	b.n	80068d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fa4d 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fa53 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d020      	beq.n	8006924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0204 	mvn.w	r2, #4
 80068f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fa fcaa 	bl	8001264 <HAL_TIM_IC_CaptureCallback>
 8006910:	e005      	b.n	800691e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa27 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fa2d 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d020      	beq.n	8006970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0208 	mvn.w	r2, #8
 8006940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2204      	movs	r2, #4
 8006946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fa fc84 	bl	8001264 <HAL_TIM_IC_CaptureCallback>
 800695c:	e005      	b.n	800696a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa01 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa07 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b00      	cmp	r3, #0
 8006978:	d020      	beq.n	80069bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0210 	mvn.w	r2, #16
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2208      	movs	r2, #8
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fa fc5e 	bl	8001264 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9db 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9e1 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00c      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0201 	mvn.w	r2, #1
 80069d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fa fcfe 	bl	80013dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00c      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80069fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 ff07 	bl	8007812 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d007      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f9b1 	bl	8006d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d007      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0220 	mvn.w	r2, #32
 8006a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 feda 	bl	8007800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e0ae      	b.n	8006bd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b0c      	cmp	r3, #12
 8006a7e:	f200 809f 	bhi.w	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006abd 	.word	0x08006abd
 8006a8c:	08006bc1 	.word	0x08006bc1
 8006a90:	08006bc1 	.word	0x08006bc1
 8006a94:	08006bc1 	.word	0x08006bc1
 8006a98:	08006afd 	.word	0x08006afd
 8006a9c:	08006bc1 	.word	0x08006bc1
 8006aa0:	08006bc1 	.word	0x08006bc1
 8006aa4:	08006bc1 	.word	0x08006bc1
 8006aa8:	08006b3f 	.word	0x08006b3f
 8006aac:	08006bc1 	.word	0x08006bc1
 8006ab0:	08006bc1 	.word	0x08006bc1
 8006ab4:	08006bc1 	.word	0x08006bc1
 8006ab8:	08006b7f 	.word	0x08006b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 f9d8 	bl	8006e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0208 	orr.w	r2, r2, #8
 8006ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0204 	bic.w	r2, r2, #4
 8006ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6999      	ldr	r1, [r3, #24]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	619a      	str	r2, [r3, #24]
      break;
 8006afa:	e064      	b.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fa1e 	bl	8006f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6999      	ldr	r1, [r3, #24]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	021a      	lsls	r2, r3, #8
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	619a      	str	r2, [r3, #24]
      break;
 8006b3c:	e043      	b.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fa67 	bl	8007018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0208 	orr.w	r2, r2, #8
 8006b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0204 	bic.w	r2, r2, #4
 8006b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69d9      	ldr	r1, [r3, #28]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	61da      	str	r2, [r3, #28]
      break;
 8006b7c:	e023      	b.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fab1 	bl	80070ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69d9      	ldr	r1, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	021a      	lsls	r2, r3, #8
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	61da      	str	r2, [r3, #28]
      break;
 8006bbe:	e002      	b.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e0b4      	b.n	8006d5e <HAL_TIM_ConfigClockSource+0x186>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c2c:	d03e      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0xd4>
 8006c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c32:	f200 8087 	bhi.w	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c3a:	f000 8086 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x172>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c42:	d87f      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c44:	2b70      	cmp	r3, #112	@ 0x70
 8006c46:	d01a      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0xa6>
 8006c48:	2b70      	cmp	r3, #112	@ 0x70
 8006c4a:	d87b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c4c:	2b60      	cmp	r3, #96	@ 0x60
 8006c4e:	d050      	beq.n	8006cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8006c50:	2b60      	cmp	r3, #96	@ 0x60
 8006c52:	d877      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c54:	2b50      	cmp	r3, #80	@ 0x50
 8006c56:	d03c      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8006c58:	2b50      	cmp	r3, #80	@ 0x50
 8006c5a:	d873      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c5c:	2b40      	cmp	r3, #64	@ 0x40
 8006c5e:	d058      	beq.n	8006d12 <HAL_TIM_ConfigClockSource+0x13a>
 8006c60:	2b40      	cmp	r3, #64	@ 0x40
 8006c62:	d86f      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c64:	2b30      	cmp	r3, #48	@ 0x30
 8006c66:	d064      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c68:	2b30      	cmp	r3, #48	@ 0x30
 8006c6a:	d86b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d060      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d867      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d05c      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d05a      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c7c:	e062      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c8e:	f000 fb4c 	bl	800732a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
      break;
 8006caa:	e04f      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cbc:	f000 fb35 	bl	800732a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cce:	609a      	str	r2, [r3, #8]
      break;
 8006cd0:	e03c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f000 faac 	bl	800723c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2150      	movs	r1, #80	@ 0x50
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fb03 	bl	80072f6 <TIM_ITRx_SetConfig>
      break;
 8006cf0:	e02c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f000 faca 	bl	8007298 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2160      	movs	r1, #96	@ 0x60
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 faf3 	bl	80072f6 <TIM_ITRx_SetConfig>
      break;
 8006d10:	e01c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f000 fa8c 	bl	800723c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2140      	movs	r1, #64	@ 0x40
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fae3 	bl	80072f6 <TIM_ITRx_SetConfig>
      break;
 8006d30:	e00c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f000 fada 	bl	80072f6 <TIM_ITRx_SetConfig>
      break;
 8006d42:	e003      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      break;
 8006d48:	e000      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a2f      	ldr	r2, [pc, #188]	@ (8006e6c <TIM_Base_SetConfig+0xd0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <TIM_Base_SetConfig+0x30>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dba:	d007      	beq.n	8006dcc <TIM_Base_SetConfig+0x30>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8006e70 <TIM_Base_SetConfig+0xd4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0x30>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8006e74 <TIM_Base_SetConfig+0xd8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d108      	bne.n	8006dde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a22      	ldr	r2, [pc, #136]	@ (8006e6c <TIM_Base_SetConfig+0xd0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00b      	beq.n	8006dfe <TIM_Base_SetConfig+0x62>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dec:	d007      	beq.n	8006dfe <TIM_Base_SetConfig+0x62>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e70 <TIM_Base_SetConfig+0xd4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_Base_SetConfig+0x62>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a1e      	ldr	r2, [pc, #120]	@ (8006e74 <TIM_Base_SetConfig+0xd8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a0d      	ldr	r2, [pc, #52]	@ (8006e6c <TIM_Base_SetConfig+0xd0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d103      	bne.n	8006e44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f023 0201 	bic.w	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	611a      	str	r2, [r3, #16]
  }
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800

08006e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f023 0201 	bic.w	r2, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f023 0302 	bic.w	r3, r3, #2
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a1c      	ldr	r2, [pc, #112]	@ (8006f40 <TIM_OC1_SetConfig+0xc8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d10c      	bne.n	8006eee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f023 0308 	bic.w	r3, r3, #8
 8006eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f023 0304 	bic.w	r3, r3, #4
 8006eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a13      	ldr	r2, [pc, #76]	@ (8006f40 <TIM_OC1_SetConfig+0xc8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d111      	bne.n	8006f1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	621a      	str	r2, [r3, #32]
}
 8006f34:	bf00      	nop
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40012c00 	.word	0x40012c00

08006f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	f023 0210 	bic.w	r2, r3, #16
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f023 0320 	bic.w	r3, r3, #32
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007014 <TIM_OC2_SetConfig+0xd0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d10d      	bne.n	8006fc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a14      	ldr	r2, [pc, #80]	@ (8007014 <TIM_OC2_SetConfig+0xd0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d113      	bne.n	8006ff0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr
 8007014:	40012c00 	.word	0x40012c00

08007018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a1d      	ldr	r2, [pc, #116]	@ (80070e8 <TIM_OC3_SetConfig+0xd0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d10d      	bne.n	8007092 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800707c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a14      	ldr	r2, [pc, #80]	@ (80070e8 <TIM_OC3_SetConfig+0xd0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d113      	bne.n	80070c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40012c00 	.word	0x40012c00

080070ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800711a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	031b      	lsls	r3, r3, #12
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a0f      	ldr	r2, [pc, #60]	@ (8007184 <TIM_OC4_SetConfig+0x98>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d109      	bne.n	8007160 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	019b      	lsls	r3, r3, #6
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr
 8007184:	40012c00 	.word	0x40012c00

08007188 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f023 0201 	bic.w	r2, r3, #1
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007230 <TIM_TI1_SetConfig+0xa8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00b      	beq.n	80071ce <TIM_TI1_SetConfig+0x46>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071bc:	d007      	beq.n	80071ce <TIM_TI1_SetConfig+0x46>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007234 <TIM_TI1_SetConfig+0xac>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d003      	beq.n	80071ce <TIM_TI1_SetConfig+0x46>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007238 <TIM_TI1_SetConfig+0xb0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d101      	bne.n	80071d2 <TIM_TI1_SetConfig+0x4a>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <TIM_TI1_SetConfig+0x4c>
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f023 0303 	bic.w	r3, r3, #3
 80071de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	e003      	b.n	80071f2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f023 030a 	bic.w	r3, r3, #10
 800720c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f003 030a 	and.w	r3, r3, #10
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr
 8007230:	40012c00 	.word	0x40012c00
 8007234:	40000400 	.word	0x40000400
 8007238:	40000800 	.word	0x40000800

0800723c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0201 	bic.w	r2, r3, #1
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f023 030a 	bic.w	r3, r3, #10
 8007278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr

08007298 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	f023 0210 	bic.w	r2, r3, #16
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	031b      	lsls	r3, r3, #12
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	621a      	str	r2, [r3, #32]
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr

080072f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b085      	sub	sp, #20
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800730c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	f043 0307 	orr.w	r3, r3, #7
 8007318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	609a      	str	r2, [r3, #8]
}
 8007320:	bf00      	nop
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	bc80      	pop	{r7}
 8007328:	4770      	bx	lr

0800732a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800732a:	b480      	push	{r7}
 800732c:	b087      	sub	sp, #28
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]
 8007336:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007344:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	021a      	lsls	r2, r3, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	431a      	orrs	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4313      	orrs	r3, r2
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	609a      	str	r2, [r3, #8]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr

08007368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 031f 	and.w	r3, r3, #31
 800737a:	2201      	movs	r2, #1
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1a      	ldr	r2, [r3, #32]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	43db      	mvns	r3, r3
 800738a:	401a      	ands	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a1a      	ldr	r2, [r3, #32]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	fa01 f303 	lsl.w	r3, r1, r3
 80073a0:	431a      	orrs	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	@ 0x28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e09a      	b.n	80074fa <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f892 	bl	8007502 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7ff fcd3 	bl	8006d9c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6819      	ldr	r1, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2203      	movs	r2, #3
 8007404:	f7ff fec0 	bl	8007188 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 020c 	bic.w	r2, r2, #12
 8007416:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6999      	ldr	r1, [r3, #24]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007438:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007448:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007458:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0207 	bic.w	r2, r2, #7
 8007468:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0204 	orr.w	r2, r2, #4
 8007478:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800747e:	2300      	movs	r3, #0
 8007480:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007482:	2370      	movs	r3, #112	@ 0x70
 8007484:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007486:	2300      	movs	r3, #0
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800748a:	2300      	movs	r3, #0
 800748c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f107 020c 	add.w	r2, r7, #12
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff fd4e 	bl	8006f44 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80074b6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80074c6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3728      	adds	r7, #40	@ 0x28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007522:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800752a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007532:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800753a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d108      	bne.n	8007554 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d105      	bne.n	8007554 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007548:	7b7b      	ldrb	r3, [r7, #13]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d102      	bne.n	8007554 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800754e:	7b3b      	ldrb	r3, [r7, #12]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d001      	beq.n	8007558 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e04d      	b.n	80075f4 <HAL_TIMEx_HallSensor_Start_IT+0xe0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0202 	orr.w	r2, r2, #2
 8007586:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2201      	movs	r2, #1
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff fee9 	bl	8007368 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a18      	ldr	r2, [pc, #96]	@ (80075fc <HAL_TIMEx_HallSensor_Start_IT+0xe8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00e      	beq.n	80075be <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a8:	d009      	beq.n	80075be <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a14      	ldr	r2, [pc, #80]	@ (8007600 <HAL_TIMEx_HallSensor_Start_IT+0xec>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d004      	beq.n	80075be <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a12      	ldr	r2, [pc, #72]	@ (8007604 <HAL_TIMEx_HallSensor_Start_IT+0xf0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d111      	bne.n	80075e2 <HAL_TIMEx_HallSensor_Start_IT+0xce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d010      	beq.n	80075f2 <HAL_TIMEx_HallSensor_Start_IT+0xde>
    {
      __HAL_TIM_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	e007      	b.n	80075f2 <HAL_TIMEx_HallSensor_Start_IT+0xde>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0201 	orr.w	r2, r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40000400 	.word	0x40000400
 8007604:	40000800 	.word	0x40000800

08007608 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d109      	bne.n	800762c <HAL_TIMEx_PWMN_Start+0x24>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b01      	cmp	r3, #1
 8007622:	bf14      	ite	ne
 8007624:	2301      	movne	r3, #1
 8007626:	2300      	moveq	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	e022      	b.n	8007672 <HAL_TIMEx_PWMN_Start+0x6a>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b04      	cmp	r3, #4
 8007630:	d109      	bne.n	8007646 <HAL_TIMEx_PWMN_Start+0x3e>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b01      	cmp	r3, #1
 800763c:	bf14      	ite	ne
 800763e:	2301      	movne	r3, #1
 8007640:	2300      	moveq	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	e015      	b.n	8007672 <HAL_TIMEx_PWMN_Start+0x6a>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b08      	cmp	r3, #8
 800764a:	d109      	bne.n	8007660 <HAL_TIMEx_PWMN_Start+0x58>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	e008      	b.n	8007672 <HAL_TIMEx_PWMN_Start+0x6a>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	bf14      	ite	ne
 800766c:	2301      	movne	r3, #1
 800766e:	2300      	moveq	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e059      	b.n	800772e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <HAL_TIMEx_PWMN_Start+0x82>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007688:	e013      	b.n	80076b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b04      	cmp	r3, #4
 800768e:	d104      	bne.n	800769a <HAL_TIMEx_PWMN_Start+0x92>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007698:	e00b      	b.n	80076b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b08      	cmp	r3, #8
 800769e:	d104      	bne.n	80076aa <HAL_TIMEx_PWMN_Start+0xa2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076a8:	e003      	b.n	80076b2 <HAL_TIMEx_PWMN_Start+0xaa>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2204      	movs	r2, #4
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f8b2 	bl	8007824 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a18      	ldr	r2, [pc, #96]	@ (8007738 <HAL_TIMEx_PWMN_Start+0x130>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00e      	beq.n	80076f8 <HAL_TIMEx_PWMN_Start+0xf0>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e2:	d009      	beq.n	80076f8 <HAL_TIMEx_PWMN_Start+0xf0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a14      	ldr	r2, [pc, #80]	@ (800773c <HAL_TIMEx_PWMN_Start+0x134>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <HAL_TIMEx_PWMN_Start+0xf0>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a13      	ldr	r2, [pc, #76]	@ (8007740 <HAL_TIMEx_PWMN_Start+0x138>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d111      	bne.n	800771c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b06      	cmp	r3, #6
 8007708:	d010      	beq.n	800772c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0201 	orr.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771a:	e007      	b.n	800772c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0201 	orr.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800

08007744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007758:	2302      	movs	r3, #2
 800775a:	e046      	b.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a16      	ldr	r2, [pc, #88]	@ (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00e      	beq.n	80077be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077a8:	d009      	beq.n	80077be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a12      	ldr	r2, [pc, #72]	@ (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d004      	beq.n	80077be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a10      	ldr	r2, [pc, #64]	@ (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d10c      	bne.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800

08007800 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	bc80      	pop	{r7}
 8007810:	4770      	bx	lr

08007812 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	2204      	movs	r2, #4
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a1a      	ldr	r2, [r3, #32]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	43db      	mvns	r3, r3
 8007846:	401a      	ands	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a1a      	ldr	r2, [r3, #32]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	fa01 f303 	lsl.w	r3, r1, r3
 800785c:	431a      	orrs	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	621a      	str	r2, [r3, #32]
}
 8007862:	bf00      	nop
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr

0800786c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	4638      	mov	r0, r7
 8007876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr

08007886 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007896:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800789a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr

080078b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80078ba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80078be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	43db      	mvns	r3, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4013      	ands	r3, r2
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr

080078fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	4638      	mov	r0, r7
 8007908:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007938:	b480      	push	{r7}
 800793a:	b09d      	sub	sp, #116	@ 0x74
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800795a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	78db      	ldrb	r3, [r3, #3]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d81f      	bhi.n	80079aa <USB_ActivateEndpoint+0x72>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <USB_ActivateEndpoint+0x38>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007981 	.word	0x08007981
 8007974:	0800799d 	.word	0x0800799d
 8007978:	080079b3 	.word	0x080079b3
 800797c:	0800798f 	.word	0x0800798f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007980:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007984:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007988:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800798c:	e012      	b.n	80079b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800798e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007992:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007996:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800799a:	e00b      	b.n	80079b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800799c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80079a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80079a8:	e004      	b.n	80079b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80079b0:	e000      	b.n	80079b4 <USB_ActivateEndpoint+0x7c>
      break;
 80079b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80079c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	7812      	ldrb	r2, [r2, #0]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	441a      	add	r2, r3
 8007a02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	7b1b      	ldrb	r3, [r3, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 8178 	bne.w	8007d14 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8084 	beq.w	8007b36 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	4413      	add	r3, r2
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	011a      	lsls	r2, r3, #4
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	88db      	ldrh	r3, [r3, #6]
 8007a56:	085b      	lsrs	r3, r3, #1
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	827b      	strh	r3, [r7, #18]
 8007a70:	8a7b      	ldrh	r3, [r7, #18]
 8007a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01b      	beq.n	8007ab2 <USB_ActivateEndpoint+0x17a>
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a90:	823b      	strh	r3, [r7, #16]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	441a      	add	r2, r3
 8007a9c:	8a3b      	ldrh	r3, [r7, #16]
 8007a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	78db      	ldrb	r3, [r3, #3]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d020      	beq.n	8007afc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ad0:	81bb      	strh	r3, [r7, #12]
 8007ad2:	89bb      	ldrh	r3, [r7, #12]
 8007ad4:	f083 0320 	eor.w	r3, r3, #32
 8007ad8:	81bb      	strh	r3, [r7, #12]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	441a      	add	r2, r3
 8007ae4:	89bb      	ldrh	r3, [r7, #12]
 8007ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	8013      	strh	r3, [r2, #0]
 8007afa:	e2d5      	b.n	80080a8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b12:	81fb      	strh	r3, [r7, #14]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	89fb      	ldrh	r3, [r7, #14]
 8007b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8013      	strh	r3, [r2, #0]
 8007b34:	e2b8      	b.n	80080a8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	4413      	add	r3, r2
 8007b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	011a      	lsls	r2, r3, #4
 8007b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	88db      	ldrh	r3, [r3, #6]
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b68:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	4413      	add	r3, r2
 8007b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	011a      	lsls	r2, r3, #4
 8007b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b86:	4413      	add	r3, r2
 8007b88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ba4:	d91d      	bls.n	8007be2 <USB_ActivateEndpoint+0x2aa>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 031f 	and.w	r3, r3, #31
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <USB_ActivateEndpoint+0x288>
 8007bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	029b      	lsls	r3, r3, #10
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	801a      	strh	r2, [r3, #0]
 8007be0:	e026      	b.n	8007c30 <USB_ActivateEndpoint+0x2f8>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <USB_ActivateEndpoint+0x2c8>
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	801a      	strh	r2, [r3, #0]
 8007bfe:	e017      	b.n	8007c30 <USB_ActivateEndpoint+0x2f8>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	085b      	lsrs	r3, r3, #1
 8007c06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <USB_ActivateEndpoint+0x2e2>
 8007c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c16:	3301      	adds	r3, #1
 8007c18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	029b      	lsls	r3, r3, #10
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007c3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01b      	beq.n	8007c80 <USB_ActivateEndpoint+0x348>
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5e:	843b      	strh	r3, [r7, #32]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	8c3b      	ldrh	r3, [r7, #32]
 8007c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d124      	bne.n	8007cd2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9e:	83bb      	strh	r3, [r7, #28]
 8007ca0:	8bbb      	ldrh	r3, [r7, #28]
 8007ca2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ca6:	83bb      	strh	r3, [r7, #28]
 8007ca8:	8bbb      	ldrh	r3, [r7, #28]
 8007caa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cae:	83bb      	strh	r3, [r7, #28]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	8bbb      	ldrh	r3, [r7, #28]
 8007cbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8013      	strh	r3, [r2, #0]
 8007cd0:	e1ea      	b.n	80080a8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce8:	83fb      	strh	r3, [r7, #30]
 8007cea:	8bfb      	ldrh	r3, [r7, #30]
 8007cec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cf0:	83fb      	strh	r3, [r7, #30]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	441a      	add	r2, r3
 8007cfc:	8bfb      	ldrh	r3, [r7, #30]
 8007cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	8013      	strh	r3, [r2, #0]
 8007d12:	e1c9      	b.n	80080a8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	78db      	ldrb	r3, [r3, #3]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d11e      	bne.n	8007d5a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d32:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	441a      	add	r2, r3
 8007d40:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d4c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	8013      	strh	r3, [r2, #0]
 8007d58:	e01d      	b.n	8007d96 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d70:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	441a      	add	r2, r3
 8007d7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007da6:	4413      	add	r3, r2
 8007da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	011a      	lsls	r2, r3, #4
 8007db0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	891b      	ldrh	r3, [r3, #8]
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dda:	4413      	add	r3, r2
 8007ddc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	011a      	lsls	r2, r3, #4
 8007de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007dec:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	895b      	ldrh	r3, [r3, #10]
 8007df2:	085b      	lsrs	r3, r3, #1
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dfc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	785b      	ldrb	r3, [r3, #1]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f040 8093 	bne.w	8007f2e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007e18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007e1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01b      	beq.n	8007e5c <USB_ActivateEndpoint+0x524>
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	441a      	add	r2, r3
 8007e46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007e6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01b      	beq.n	8007eac <USB_ActivateEndpoint+0x574>
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e8a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	441a      	add	r2, r3
 8007e96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ea4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007ec4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007ec6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007eca:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007ecc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007ece:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ed2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	441a      	add	r2, r3
 8007ede:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007ee0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ee4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	441a      	add	r2, r3
 8007f16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	8013      	strh	r3, [r2, #0]
 8007f2c:	e0bc      	b.n	80080a8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007f3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d01d      	beq.n	8007f86 <USB_ActivateEndpoint+0x64e>
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f60:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	441a      	add	r2, r3
 8007f6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007f96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01d      	beq.n	8007fde <USB_ActivateEndpoint+0x6a6>
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	441a      	add	r2, r3
 8007fc6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	78db      	ldrb	r3, [r3, #3]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d024      	beq.n	8008030 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ffc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008000:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008004:	f083 0320 	eor.w	r3, r3, #32
 8008008:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	441a      	add	r2, r3
 8008016:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]
 800802e:	e01d      	b.n	800806c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008046:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800805c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008068:	b29b      	uxth	r3, r3
 800806a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800807e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008082:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800809c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80080a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3774      	adds	r7, #116	@ 0x74
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bc80      	pop	{r7}
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop

080080b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b08d      	sub	sp, #52	@ 0x34
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	7b1b      	ldrb	r3, [r3, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f040 808e 	bne.w	80081e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	785b      	ldrb	r3, [r3, #1]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d044      	beq.n	800815e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	81bb      	strh	r3, [r7, #12]
 80080e2:	89bb      	ldrh	r3, [r7, #12]
 80080e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01b      	beq.n	8008124 <USB_DeactivateEndpoint+0x6c>
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008102:	817b      	strh	r3, [r7, #10]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	441a      	add	r2, r3
 800810e:	897b      	ldrh	r3, [r7, #10]
 8008110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800811c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008120:	b29b      	uxth	r3, r3
 8008122:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800813a:	813b      	strh	r3, [r7, #8]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	441a      	add	r2, r3
 8008146:	893b      	ldrh	r3, [r7, #8]
 8008148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800814c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008158:	b29b      	uxth	r3, r3
 800815a:	8013      	strh	r3, [r2, #0]
 800815c:	e192      	b.n	8008484 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	827b      	strh	r3, [r7, #18]
 800816c:	8a7b      	ldrh	r3, [r7, #18]
 800816e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01b      	beq.n	80081ae <USB_DeactivateEndpoint+0xf6>
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818c:	823b      	strh	r3, [r7, #16]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	441a      	add	r2, r3
 8008198:	8a3b      	ldrh	r3, [r7, #16]
 800819a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800819e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c4:	81fb      	strh	r3, [r7, #14]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	441a      	add	r2, r3
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	8013      	strh	r3, [r2, #0]
 80081e6:	e14d      	b.n	8008484 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	785b      	ldrb	r3, [r3, #1]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 80a5 	bne.w	800833c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	843b      	strh	r3, [r7, #32]
 8008200:	8c3b      	ldrh	r3, [r7, #32]
 8008202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d01b      	beq.n	8008242 <USB_DeactivateEndpoint+0x18a>
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800821c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008220:	83fb      	strh	r3, [r7, #30]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	441a      	add	r2, r3
 800822c:	8bfb      	ldrh	r3, [r7, #30]
 800822e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800823a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800823e:	b29b      	uxth	r3, r3
 8008240:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	83bb      	strh	r3, [r7, #28]
 8008250:	8bbb      	ldrh	r3, [r7, #28]
 8008252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01b      	beq.n	8008292 <USB_DeactivateEndpoint+0x1da>
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800826c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008270:	837b      	strh	r3, [r7, #26]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	441a      	add	r2, r3
 800827c:	8b7b      	ldrh	r3, [r7, #26]
 800827e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800828a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800828e:	b29b      	uxth	r3, r3
 8008290:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a8:	833b      	strh	r3, [r7, #24]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	441a      	add	r2, r3
 80082b4:	8b3b      	ldrh	r3, [r7, #24]
 80082b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e0:	82fb      	strh	r3, [r7, #22]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	441a      	add	r2, r3
 80082ec:	8afb      	ldrh	r3, [r7, #22]
 80082ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fe:	b29b      	uxth	r3, r3
 8008300:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008318:	82bb      	strh	r3, [r7, #20]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	441a      	add	r2, r3
 8008324:	8abb      	ldrh	r3, [r7, #20]
 8008326:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800832a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800832e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008336:	b29b      	uxth	r3, r3
 8008338:	8013      	strh	r3, [r2, #0]
 800833a:	e0a3      	b.n	8008484 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800834a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800834c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01b      	beq.n	800838c <USB_DeactivateEndpoint+0x2d4>
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800836a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	441a      	add	r2, r3
 8008376:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008388:	b29b      	uxth	r3, r3
 800838a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800839a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800839c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01b      	beq.n	80083dc <USB_DeactivateEndpoint+0x324>
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	441a      	add	r2, r3
 80083c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80083c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083d8:	b29b      	uxth	r3, r3
 80083da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	441a      	add	r2, r3
 80083fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800840c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008410:	b29b      	uxth	r3, r3
 8008412:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800842a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800843c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008448:	b29b      	uxth	r3, r3
 800844a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800845e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008462:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	441a      	add	r2, r3
 800846e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800847c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008480:	b29b      	uxth	r3, r3
 8008482:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3734      	adds	r7, #52	@ 0x34
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr

08008490 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b0c2      	sub	sp, #264	@ 0x108
 8008494:	af00      	add	r7, sp, #0
 8008496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800849e:	6018      	str	r0, [r3, #0]
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	f040 86b7 	bne.w	800922a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80084bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	699a      	ldr	r2, [r3, #24]
 80084c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d908      	bls.n	80084ea <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80084d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80084e8:	e007      	b.n	80084fa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80084ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80084fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	7b1b      	ldrb	r3, [r3, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d13a      	bne.n	8008580 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800850a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6959      	ldr	r1, [r3, #20]
 8008516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	88da      	ldrh	r2, [r3, #6]
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008526:	b29b      	uxth	r3, r3
 8008528:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800852c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008530:	6800      	ldr	r0, [r0, #0]
 8008532:	f001 fc9c 	bl	8009e6e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008550:	b29b      	uxth	r3, r3
 8008552:	461a      	mov	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	011a      	lsls	r2, r3, #4
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	4413      	add	r3, r2
 800856c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008576:	b29a      	uxth	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	f000 be1f 	b.w	80091be <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	78db      	ldrb	r3, [r3, #3]
 800858c:	2b02      	cmp	r3, #2
 800858e:	f040 8462 	bne.w	8008e56 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6a1a      	ldr	r2, [r3, #32]
 800859e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	f240 83df 	bls.w	8008d6e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80085b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80085da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	441a      	add	r2, r3
 80085f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008600:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800860c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6a1a      	ldr	r2, [r3, #32]
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861c:	1ad2      	subs	r2, r2, r3
 800861e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800862a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 81c7 	beq.w	80089e0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	633b      	str	r3, [r7, #48]	@ 0x30
 800865e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	785b      	ldrb	r3, [r3, #1]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d177      	bne.n	800875e <USB_EPStartXfer+0x2ce>
 800866e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	62bb      	str	r3, [r7, #40]	@ 0x28
 800867a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008688:	b29b      	uxth	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	4413      	add	r3, r2
 8008690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	011a      	lsls	r2, r3, #4
 80086a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a2:	4413      	add	r3, r2
 80086a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	801a      	strh	r2, [r3, #0]
 80086ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086be:	2b3e      	cmp	r3, #62	@ 0x3e
 80086c0:	d921      	bls.n	8008706 <USB_EPStartXfer+0x276>
 80086c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80086cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d0:	f003 031f 	and.w	r3, r3, #31
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d104      	bne.n	80086e2 <USB_EPStartXfer+0x252>
 80086d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80086dc:	3b01      	subs	r3, #1
 80086de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	029b      	lsls	r3, r3, #10
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	4313      	orrs	r3, r2
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fe:	b29a      	uxth	r2, r3
 8008700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	e050      	b.n	80087a8 <USB_EPStartXfer+0x318>
 8008706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <USB_EPStartXfer+0x294>
 800870e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800871c:	b29a      	uxth	r2, r3
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	801a      	strh	r2, [r3, #0]
 8008722:	e041      	b.n	80087a8 <USB_EPStartXfer+0x318>
 8008724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800872e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <USB_EPStartXfer+0x2b4>
 800873a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800873e:	3301      	adds	r3, #1
 8008740:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	b29a      	uxth	r2, r3
 800874a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800874e:	b29b      	uxth	r3, r3
 8008750:	029b      	lsls	r3, r3, #10
 8008752:	b29b      	uxth	r3, r3
 8008754:	4313      	orrs	r3, r2
 8008756:	b29a      	uxth	r2, r3
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	e024      	b.n	80087a8 <USB_EPStartXfer+0x318>
 800875e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d11c      	bne.n	80087a8 <USB_EPStartXfer+0x318>
 800876e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800877c:	b29b      	uxth	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	4413      	add	r3, r2
 8008784:	633b      	str	r3, [r7, #48]	@ 0x30
 8008786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	011a      	lsls	r2, r3, #4
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	4413      	add	r3, r2
 8008798:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800879c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800879e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80087a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	895b      	ldrh	r3, [r3, #10]
 80087b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6959      	ldr	r1, [r3, #20]
 80087c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80087ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80087d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80087d6:	6800      	ldr	r0, [r0, #0]
 80087d8:	f001 fb49 	bl	8009e6e <USB_WritePMA>
            ep->xfer_buff += len;
 80087dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	695a      	ldr	r2, [r3, #20]
 80087e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ec:	441a      	add	r2, r3
 80087ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80087fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6a1a      	ldr	r2, [r3, #32]
 8008806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	429a      	cmp	r2, r3
 8008814:	d90f      	bls.n	8008836 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a1a      	ldr	r2, [r3, #32]
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	621a      	str	r2, [r3, #32]
 8008834:	e00e      	b.n	8008854 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800884a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2200      	movs	r2, #0
 8008852:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d177      	bne.n	8008954 <USB_EPStartXfer+0x4c4>
 8008864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800887e:	b29b      	uxth	r3, r3
 8008880:	461a      	mov	r2, r3
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	4413      	add	r3, r2
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	011a      	lsls	r2, r3, #4
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	4413      	add	r3, r2
 800889a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	801a      	strh	r2, [r3, #0]
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80088b6:	d921      	bls.n	80088fc <USB_EPStartXfer+0x46c>
 80088b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80088c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <USB_EPStartXfer+0x448>
 80088ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088d2:	3b01      	subs	r3, #1
 80088d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29a      	uxth	r2, r3
 80088de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e056      	b.n	80089aa <USB_EPStartXfer+0x51a>
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <USB_EPStartXfer+0x48a>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008912:	b29a      	uxth	r2, r3
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	801a      	strh	r2, [r3, #0]
 8008918:	e047      	b.n	80089aa <USB_EPStartXfer+0x51a>
 800891a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <USB_EPStartXfer+0x4aa>
 8008930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008934:	3301      	adds	r3, #1
 8008936:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008944:	b29b      	uxth	r3, r3
 8008946:	029b      	lsls	r3, r3, #10
 8008948:	b29b      	uxth	r3, r3
 800894a:	4313      	orrs	r3, r2
 800894c:	b29a      	uxth	r2, r3
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	e02a      	b.n	80089aa <USB_EPStartXfer+0x51a>
 8008954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d122      	bne.n	80089aa <USB_EPStartXfer+0x51a>
 8008964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	623b      	str	r3, [r7, #32]
 8008970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800897e:	b29b      	uxth	r3, r3
 8008980:	461a      	mov	r2, r3
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	4413      	add	r3, r2
 8008986:	623b      	str	r3, [r7, #32]
 8008988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	011a      	lsls	r2, r3, #4
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	4413      	add	r3, r2
 800899a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800899e:	61fb      	str	r3, [r7, #28]
 80089a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80089aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	891b      	ldrh	r3, [r3, #8]
 80089b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6959      	ldr	r1, [r3, #20]
 80089c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80089d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80089d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80089d8:	6800      	ldr	r0, [r0, #0]
 80089da:	f001 fa48 	bl	8009e6e <USB_WritePMA>
 80089de:	e3ee      	b.n	80091be <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80089e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	785b      	ldrb	r3, [r3, #1]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d177      	bne.n	8008ae0 <USB_EPStartXfer+0x650>
 80089f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a10:	4413      	add	r3, r2
 8008a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	011a      	lsls	r2, r3, #4
 8008a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a24:	4413      	add	r3, r2
 8008a26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a3a:	801a      	strh	r2, [r3, #0]
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a42:	d921      	bls.n	8008a88 <USB_EPStartXfer+0x5f8>
 8008a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a48:	095b      	lsrs	r3, r3, #5
 8008a4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a52:	f003 031f 	and.w	r3, r3, #31
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <USB_EPStartXfer+0x5d4>
 8008a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	029b      	lsls	r3, r3, #10
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	4313      	orrs	r3, r2
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	e056      	b.n	8008b36 <USB_EPStartXfer+0x6a6>
 8008a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <USB_EPStartXfer+0x616>
 8008a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	e047      	b.n	8008b36 <USB_EPStartXfer+0x6a6>
 8008aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <USB_EPStartXfer+0x636>
 8008abc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	029b      	lsls	r3, r3, #10
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008adc:	801a      	strh	r2, [r3, #0]
 8008ade:	e02a      	b.n	8008b36 <USB_EPStartXfer+0x6a6>
 8008ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	785b      	ldrb	r3, [r3, #1]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d122      	bne.n	8008b36 <USB_EPStartXfer+0x6a6>
 8008af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8008afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b10:	4413      	add	r3, r2
 8008b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	011a      	lsls	r2, r3, #4
 8008b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b24:	4413      	add	r3, r2
 8008b26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	891b      	ldrh	r3, [r3, #8]
 8008b42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6959      	ldr	r1, [r3, #20]
 8008b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b64:	6800      	ldr	r0, [r0, #0]
 8008b66:	f001 f982 	bl	8009e6e <USB_WritePMA>
            ep->xfer_buff += len;
 8008b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	695a      	ldr	r2, [r3, #20]
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7a:	441a      	add	r2, r3
 8008b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6a1a      	ldr	r2, [r3, #32]
 8008b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d90f      	bls.n	8008bc4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6a1a      	ldr	r2, [r3, #32]
 8008bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb4:	1ad2      	subs	r2, r2, r3
 8008bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	621a      	str	r2, [r3, #32]
 8008bc2:	e00e      	b.n	8008be2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2200      	movs	r2, #0
 8008be0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d177      	bne.n	8008cee <USB_EPStartXfer+0x85e>
 8008bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	4413      	add	r3, r2
 8008c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	011a      	lsls	r2, r3, #4
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	4413      	add	r3, r2
 8008c34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c48:	801a      	strh	r2, [r3, #0]
 8008c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c50:	d921      	bls.n	8008c96 <USB_EPStartXfer+0x806>
 8008c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c56:	095b      	lsrs	r3, r3, #5
 8008c58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c60:	f003 031f 	and.w	r3, r3, #31
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d104      	bne.n	8008c72 <USB_EPStartXfer+0x7e2>
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	029b      	lsls	r3, r3, #10
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	4313      	orrs	r3, r2
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c92:	801a      	strh	r2, [r3, #0]
 8008c94:	e050      	b.n	8008d38 <USB_EPStartXfer+0x8a8>
 8008c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <USB_EPStartXfer+0x824>
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb0:	801a      	strh	r2, [r3, #0]
 8008cb2:	e041      	b.n	8008d38 <USB_EPStartXfer+0x8a8>
 8008cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb8:	085b      	lsrs	r3, r3, #1
 8008cba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d004      	beq.n	8008cd4 <USB_EPStartXfer+0x844>
 8008cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	029b      	lsls	r3, r3, #10
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e024      	b.n	8008d38 <USB_EPStartXfer+0x8a8>
 8008cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d11c      	bne.n	8008d38 <USB_EPStartXfer+0x8a8>
 8008cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	461a      	mov	r2, r3
 8008d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d12:	4413      	add	r3, r2
 8008d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	011a      	lsls	r2, r3, #4
 8008d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d26:	4413      	add	r3, r2
 8008d28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	895b      	ldrh	r3, [r3, #10]
 8008d44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6959      	ldr	r1, [r3, #20]
 8008d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d5e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d62:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	f001 f881 	bl	8009e6e <USB_WritePMA>
 8008d6c:	e227      	b.n	80091be <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	441a      	add	r2, r3
 8008dc2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	461a      	mov	r2, r3
 8008df8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dfa:	4413      	add	r3, r2
 8008dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	011a      	lsls	r2, r3, #4
 8008e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e0e:	4413      	add	r3, r2
 8008e10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	891b      	ldrh	r3, [r3, #8]
 8008e2c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6959      	ldr	r1, [r3, #20]
 8008e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e46:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008e4a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	f001 f80d 	bl	8009e6e <USB_WritePMA>
 8008e54:	e1b3      	b.n	80091be <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a1a      	ldr	r2, [r3, #32]
 8008e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 80c6 	beq.w	8009028 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d177      	bne.n	8008fa8 <USB_EPStartXfer+0xb18>
 8008eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ebc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ed8:	4413      	add	r3, r2
 8008eda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	011a      	lsls	r2, r3, #4
 8008eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008eec:	4413      	add	r3, r2
 8008eee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008ef2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f02:	801a      	strh	r2, [r3, #0]
 8008f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f08:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f0a:	d921      	bls.n	8008f50 <USB_EPStartXfer+0xac0>
 8008f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f10:	095b      	lsrs	r3, r3, #5
 8008f12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d104      	bne.n	8008f2c <USB_EPStartXfer+0xa9c>
 8008f22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008f26:	3b01      	subs	r3, #1
 8008f28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	029b      	lsls	r3, r3, #10
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f4c:	801a      	strh	r2, [r3, #0]
 8008f4e:	e050      	b.n	8008ff2 <USB_EPStartXfer+0xb62>
 8008f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <USB_EPStartXfer+0xade>
 8008f58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f6a:	801a      	strh	r2, [r3, #0]
 8008f6c:	e041      	b.n	8008ff2 <USB_EPStartXfer+0xb62>
 8008f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f72:	085b      	lsrs	r3, r3, #1
 8008f74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <USB_EPStartXfer+0xafe>
 8008f84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008f88:	3301      	adds	r3, #1
 8008f8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	029b      	lsls	r3, r3, #10
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fa4:	801a      	strh	r2, [r3, #0]
 8008fa6:	e024      	b.n	8008ff2 <USB_EPStartXfer+0xb62>
 8008fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	785b      	ldrb	r3, [r3, #1]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d11c      	bne.n	8008ff2 <USB_EPStartXfer+0xb62>
 8008fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fcc:	4413      	add	r3, r2
 8008fce:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	011a      	lsls	r2, r3, #4
 8008fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ff0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	895b      	ldrh	r3, [r3, #10]
 8008ffe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6959      	ldr	r1, [r3, #20]
 800900e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009012:	b29b      	uxth	r3, r3
 8009014:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009018:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800901c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009020:	6800      	ldr	r0, [r0, #0]
 8009022:	f000 ff24 	bl	8009e6e <USB_WritePMA>
 8009026:	e0ca      	b.n	80091be <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	785b      	ldrb	r3, [r3, #1]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d177      	bne.n	8009128 <USB_EPStartXfer+0xc98>
 8009038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009052:	b29b      	uxth	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009058:	4413      	add	r3, r2
 800905a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800905c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	011a      	lsls	r2, r3, #4
 800906a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800906c:	4413      	add	r3, r2
 800906e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009072:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009074:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800907e:	b29a      	uxth	r2, r3
 8009080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009082:	801a      	strh	r2, [r3, #0]
 8009084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009088:	2b3e      	cmp	r3, #62	@ 0x3e
 800908a:	d921      	bls.n	80090d0 <USB_EPStartXfer+0xc40>
 800908c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009090:	095b      	lsrs	r3, r3, #5
 8009092:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909a:	f003 031f 	and.w	r3, r3, #31
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d104      	bne.n	80090ac <USB_EPStartXfer+0xc1c>
 80090a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80090a6:	3b01      	subs	r3, #1
 80090a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80090ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	029b      	lsls	r3, r3, #10
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	4313      	orrs	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090cc:	801a      	strh	r2, [r3, #0]
 80090ce:	e05c      	b.n	800918a <USB_EPStartXfer+0xcfa>
 80090d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <USB_EPStartXfer+0xc5e>
 80090d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	e04d      	b.n	800918a <USB_EPStartXfer+0xcfa>
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f2:	085b      	lsrs	r3, r3, #1
 80090f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80090f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <USB_EPStartXfer+0xc7e>
 8009104:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009108:	3301      	adds	r3, #1
 800910a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800910e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29a      	uxth	r2, r3
 8009114:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009118:	b29b      	uxth	r3, r3
 800911a:	029b      	lsls	r3, r3, #10
 800911c:	b29b      	uxth	r3, r3
 800911e:	4313      	orrs	r3, r2
 8009120:	b29a      	uxth	r2, r3
 8009122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009124:	801a      	strh	r2, [r3, #0]
 8009126:	e030      	b.n	800918a <USB_EPStartXfer+0xcfa>
 8009128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800912c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d128      	bne.n	800918a <USB_EPStartXfer+0xcfa>
 8009138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800914a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009154:	b29b      	uxth	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800915c:	4413      	add	r3, r2
 800915e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	011a      	lsls	r2, r3, #4
 8009170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009174:	4413      	add	r3, r2
 8009176:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800917a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800917e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009182:	b29a      	uxth	r2, r3
 8009184:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009188:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800918a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	891b      	ldrh	r3, [r3, #8]
 8009196:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800919a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6959      	ldr	r1, [r3, #20]
 80091a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80091b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80091b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80091b8:	6800      	ldr	r0, [r0, #0]
 80091ba:	f000 fe58 	bl	8009e6e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80091be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091e4:	817b      	strh	r3, [r7, #10]
 80091e6:	897b      	ldrh	r3, [r7, #10]
 80091e8:	f083 0310 	eor.w	r3, r3, #16
 80091ec:	817b      	strh	r3, [r7, #10]
 80091ee:	897b      	ldrh	r3, [r7, #10]
 80091f0:	f083 0320 	eor.w	r3, r3, #32
 80091f4:	817b      	strh	r3, [r7, #10]
 80091f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	441a      	add	r2, r3
 8009210:	897b      	ldrh	r3, [r7, #10]
 8009212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800921a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800921e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009222:	b29b      	uxth	r3, r3
 8009224:	8013      	strh	r3, [r2, #0]
 8009226:	f000 bcde 	b.w	8009be6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800922a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800922e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	7b1b      	ldrb	r3, [r3, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f040 80bb 	bne.w	80093b2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800923c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	699a      	ldr	r2, [r3, #24]
 8009248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	429a      	cmp	r2, r3
 8009256:	d917      	bls.n	8009288 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800925c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800926c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009278:	1ad2      	subs	r2, r2, r3
 800927a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800927e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	619a      	str	r2, [r3, #24]
 8009286:	e00e      	b.n	80092a6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2200      	movs	r2, #0
 80092a4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80092a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	461a      	mov	r2, r3
 80092c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092ca:	4413      	add	r3, r2
 80092cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	011a      	lsls	r2, r3, #4
 80092de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092e2:	4413      	add	r3, r2
 80092e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80092e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80092ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092fe:	801a      	strh	r2, [r3, #0]
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009304:	2b3e      	cmp	r3, #62	@ 0x3e
 8009306:	d924      	bls.n	8009352 <USB_EPStartXfer+0xec2>
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930c:	095b      	lsrs	r3, r3, #5
 800930e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	2b00      	cmp	r3, #0
 800931c:	d104      	bne.n	8009328 <USB_EPStartXfer+0xe98>
 800931e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009322:	3b01      	subs	r3, #1
 8009324:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009328:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	b29a      	uxth	r2, r3
 8009330:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009334:	b29b      	uxth	r3, r3
 8009336:	029b      	lsls	r3, r3, #10
 8009338:	b29b      	uxth	r3, r3
 800933a:	4313      	orrs	r3, r2
 800933c:	b29b      	uxth	r3, r3
 800933e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009346:	b29a      	uxth	r2, r3
 8009348:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800934c:	801a      	strh	r2, [r3, #0]
 800934e:	f000 bc10 	b.w	8009b72 <USB_EPStartXfer+0x16e2>
 8009352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10c      	bne.n	8009374 <USB_EPStartXfer+0xee4>
 800935a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800936a:	b29a      	uxth	r2, r3
 800936c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009370:	801a      	strh	r2, [r3, #0]
 8009372:	e3fe      	b.n	8009b72 <USB_EPStartXfer+0x16e2>
 8009374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009378:	085b      	lsrs	r3, r3, #1
 800937a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800937e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d004      	beq.n	8009394 <USB_EPStartXfer+0xf04>
 800938a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800938e:	3301      	adds	r3, #1
 8009390:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b29a      	uxth	r2, r3
 800939c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	029b      	lsls	r3, r3, #10
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	4313      	orrs	r3, r2
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093ae:	801a      	strh	r2, [r3, #0]
 80093b0:	e3df      	b.n	8009b72 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80093b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	78db      	ldrb	r3, [r3, #3]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	f040 8218 	bne.w	80097f4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80093c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f040 809d 	bne.w	8009510 <USB_EPStartXfer+0x1080>
 80093d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	461a      	mov	r2, r3
 80093f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093fa:	4413      	add	r3, r2
 80093fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	011a      	lsls	r2, r3, #4
 800940e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009412:	4413      	add	r3, r2
 8009414:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800941c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	b29b      	uxth	r3, r3
 8009424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	2b3e      	cmp	r3, #62	@ 0x3e
 800943e:	d92b      	bls.n	8009498 <USB_EPStartXfer+0x1008>
 8009440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	095b      	lsrs	r3, r3, #5
 800944e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <USB_EPStartXfer+0xfe0>
 8009466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800946a:	3b01      	subs	r3, #1
 800946c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b29a      	uxth	r2, r3
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947c:	b29b      	uxth	r3, r3
 800947e:	029b      	lsls	r3, r3, #10
 8009480:	b29b      	uxth	r3, r3
 8009482:	4313      	orrs	r3, r2
 8009484:	b29b      	uxth	r3, r3
 8009486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800948a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800948e:	b29a      	uxth	r2, r3
 8009490:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	e070      	b.n	800957a <USB_EPStartXfer+0x10ea>
 8009498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10c      	bne.n	80094c2 <USB_EPStartXfer+0x1032>
 80094a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80094be:	801a      	strh	r2, [r3, #0]
 80094c0:	e05b      	b.n	800957a <USB_EPStartXfer+0x10ea>
 80094c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	085b      	lsrs	r3, r3, #1
 80094d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80094d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <USB_EPStartXfer+0x1062>
 80094e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ec:	3301      	adds	r3, #1
 80094ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80094f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094fe:	b29b      	uxth	r3, r3
 8009500:	029b      	lsls	r3, r3, #10
 8009502:	b29b      	uxth	r3, r3
 8009504:	4313      	orrs	r3, r2
 8009506:	b29a      	uxth	r2, r3
 8009508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	e034      	b.n	800957a <USB_EPStartXfer+0x10ea>
 8009510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	785b      	ldrb	r3, [r3, #1]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d12c      	bne.n	800957a <USB_EPStartXfer+0x10ea>
 8009520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800952e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800953c:	b29b      	uxth	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009544:	4413      	add	r3, r2
 8009546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800954a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800954e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	011a      	lsls	r2, r3, #4
 8009558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800955c:	4413      	add	r3, r2
 800955e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	b29a      	uxth	r2, r3
 8009574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800957e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800958c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	785b      	ldrb	r3, [r3, #1]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f040 809d 	bne.w	80096d4 <USB_EPStartXfer+0x1244>
 800959a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800959e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	461a      	mov	r2, r3
 80095ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095be:	4413      	add	r3, r2
 80095c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	011a      	lsls	r2, r3, #4
 80095d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095d6:	4413      	add	r3, r2
 80095d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80095dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095f2:	801a      	strh	r2, [r3, #0]
 80095f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	2b3e      	cmp	r3, #62	@ 0x3e
 8009602:	d92b      	bls.n	800965c <USB_EPStartXfer+0x11cc>
 8009604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	095b      	lsrs	r3, r3, #5
 8009612:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f003 031f 	and.w	r3, r3, #31
 8009626:	2b00      	cmp	r3, #0
 8009628:	d104      	bne.n	8009634 <USB_EPStartXfer+0x11a4>
 800962a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800962e:	3b01      	subs	r3, #1
 8009630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	b29a      	uxth	r2, r3
 800963c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009640:	b29b      	uxth	r3, r3
 8009642:	029b      	lsls	r3, r3, #10
 8009644:	b29b      	uxth	r3, r3
 8009646:	4313      	orrs	r3, r2
 8009648:	b29b      	uxth	r3, r3
 800964a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800964e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009652:	b29a      	uxth	r2, r3
 8009654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009658:	801a      	strh	r2, [r3, #0]
 800965a:	e069      	b.n	8009730 <USB_EPStartXfer+0x12a0>
 800965c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10c      	bne.n	8009686 <USB_EPStartXfer+0x11f6>
 800966c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800967c:	b29a      	uxth	r2, r3
 800967e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009682:	801a      	strh	r2, [r3, #0]
 8009684:	e054      	b.n	8009730 <USB_EPStartXfer+0x12a0>
 8009686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800968a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	085b      	lsrs	r3, r3, #1
 8009694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800969c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d004      	beq.n	80096b6 <USB_EPStartXfer+0x1226>
 80096ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b0:	3301      	adds	r3, #1
 80096b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	029b      	lsls	r3, r3, #10
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4313      	orrs	r3, r2
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	e02d      	b.n	8009730 <USB_EPStartXfer+0x12a0>
 80096d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	785b      	ldrb	r3, [r3, #1]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d125      	bne.n	8009730 <USB_EPStartXfer+0x12a0>
 80096e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80096fa:	4413      	add	r3, r2
 80096fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	011a      	lsls	r2, r3, #4
 800970e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009712:	4413      	add	r3, r2
 8009714:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800971c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	b29a      	uxth	r2, r3
 800972a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800972e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8218 	beq.w	8009b72 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009762:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <USB_EPStartXfer+0x12ea>
 800976e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10d      	bne.n	8009796 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800977a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800977e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009782:	2b00      	cmp	r3, #0
 8009784:	f040 81f5 	bne.w	8009b72 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009788:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800978c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009790:	2b00      	cmp	r3, #0
 8009792:	f040 81ee 	bne.w	8009b72 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800979a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097bc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80097c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	441a      	add	r2, r3
 80097da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80097de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	8013      	strh	r3, [r2, #0]
 80097f2:	e1be      	b.n	8009b72 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80097f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	78db      	ldrb	r3, [r3, #3]
 8009800:	2b01      	cmp	r3, #1
 8009802:	f040 81b4 	bne.w	8009b6e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800980a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	699a      	ldr	r2, [r3, #24]
 8009812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	429a      	cmp	r2, r3
 8009820:	d917      	bls.n	8009852 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699a      	ldr	r2, [r3, #24]
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009842:	1ad2      	subs	r2, r2, r3
 8009844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	619a      	str	r2, [r3, #24]
 8009850:	e00e      	b.n	8009870 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2200      	movs	r2, #0
 800986e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	785b      	ldrb	r3, [r3, #1]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 8085 	bne.w	800998c <USB_EPStartXfer+0x14fc>
 8009882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800989e:	b29b      	uxth	r3, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80098a6:	4413      	add	r3, r2
 80098a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	011a      	lsls	r2, r3, #4
 80098ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80098be:	4413      	add	r3, r2
 80098c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80098c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098da:	801a      	strh	r2, [r3, #0]
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80098e2:	d923      	bls.n	800992c <USB_EPStartXfer+0x149c>
 80098e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e8:	095b      	lsrs	r3, r3, #5
 80098ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80098ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f2:	f003 031f 	and.w	r3, r3, #31
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d104      	bne.n	8009904 <USB_EPStartXfer+0x1474>
 80098fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098fe:	3b01      	subs	r3, #1
 8009900:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009904:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	b29a      	uxth	r2, r3
 800990c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009910:	b29b      	uxth	r3, r3
 8009912:	029b      	lsls	r3, r3, #10
 8009914:	b29b      	uxth	r3, r3
 8009916:	4313      	orrs	r3, r2
 8009918:	b29b      	uxth	r3, r3
 800991a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800991e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009922:	b29a      	uxth	r2, r3
 8009924:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	e060      	b.n	80099ee <USB_EPStartXfer+0x155e>
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10c      	bne.n	800994e <USB_EPStartXfer+0x14be>
 8009934:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009944:	b29a      	uxth	r2, r3
 8009946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800994a:	801a      	strh	r2, [r3, #0]
 800994c:	e04f      	b.n	80099ee <USB_EPStartXfer+0x155e>
 800994e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009952:	085b      	lsrs	r3, r3, #1
 8009954:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <USB_EPStartXfer+0x14de>
 8009964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009968:	3301      	adds	r3, #1
 800996a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800996e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	b29a      	uxth	r2, r3
 8009976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800997a:	b29b      	uxth	r3, r3
 800997c:	029b      	lsls	r3, r3, #10
 800997e:	b29b      	uxth	r3, r3
 8009980:	4313      	orrs	r3, r2
 8009982:	b29a      	uxth	r2, r3
 8009984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	e030      	b.n	80099ee <USB_EPStartXfer+0x155e>
 800998c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	785b      	ldrb	r3, [r3, #1]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d128      	bne.n	80099ee <USB_EPStartXfer+0x155e>
 800999c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80099aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	461a      	mov	r2, r3
 80099bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80099c0:	4413      	add	r3, r2
 80099c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80099c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	011a      	lsls	r2, r3, #4
 80099d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80099d8:	4413      	add	r3, r2
 80099da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f040 8085 	bne.w	8009b18 <USB_EPStartXfer+0x1688>
 8009a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009a32:	4413      	add	r3, r2
 8009a34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	011a      	lsls	r2, r3, #4
 8009a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a66:	801a      	strh	r2, [r3, #0]
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a6e:	d923      	bls.n	8009ab8 <USB_EPStartXfer+0x1628>
 8009a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a74:	095b      	lsrs	r3, r3, #5
 8009a76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7e:	f003 031f 	and.w	r3, r3, #31
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d104      	bne.n	8009a90 <USB_EPStartXfer+0x1600>
 8009a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	029b      	lsls	r3, r3, #10
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ab4:	801a      	strh	r2, [r3, #0]
 8009ab6:	e05c      	b.n	8009b72 <USB_EPStartXfer+0x16e2>
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10c      	bne.n	8009ada <USB_EPStartXfer+0x164a>
 8009ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ad6:	801a      	strh	r2, [r3, #0]
 8009ad8:	e04b      	b.n	8009b72 <USB_EPStartXfer+0x16e2>
 8009ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ade:	085b      	lsrs	r3, r3, #1
 8009ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <USB_EPStartXfer+0x166a>
 8009af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009af4:	3301      	adds	r3, #1
 8009af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	029b      	lsls	r3, r3, #10
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b14:	801a      	strh	r2, [r3, #0]
 8009b16:	e02c      	b.n	8009b72 <USB_EPStartXfer+0x16e2>
 8009b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	785b      	ldrb	r3, [r3, #1]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d124      	bne.n	8009b72 <USB_EPStartXfer+0x16e2>
 8009b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	461a      	mov	r2, r3
 8009b3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009b3e:	4413      	add	r3, r2
 8009b40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	011a      	lsls	r2, r3, #4
 8009b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009b56:	4413      	add	r3, r2
 8009b58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	e001      	b.n	8009b72 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e03a      	b.n	8009be8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b98:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009b9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ba0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ba4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009ba8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009bac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009bb0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	441a      	add	r2, r3
 8009bce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d020      	beq.n	8009c46 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c1a:	81bb      	strh	r3, [r7, #12]
 8009c1c:	89bb      	ldrh	r3, [r7, #12]
 8009c1e:	f083 0310 	eor.w	r3, r3, #16
 8009c22:	81bb      	strh	r3, [r7, #12]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	441a      	add	r2, r3
 8009c2e:	89bb      	ldrh	r3, [r7, #12]
 8009c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	8013      	strh	r3, [r2, #0]
 8009c44:	e01f      	b.n	8009c86 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c5c:	81fb      	strh	r3, [r7, #14]
 8009c5e:	89fb      	ldrh	r3, [r7, #14]
 8009c60:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009c64:	81fb      	strh	r3, [r7, #14]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	441a      	add	r2, r3
 8009c70:	89fb      	ldrh	r3, [r7, #14]
 8009c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bc80      	pop	{r7}
 8009c90:	4770      	bx	lr

08009c92 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b087      	sub	sp, #28
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	7b1b      	ldrb	r3, [r3, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f040 809d 	bne.w	8009de0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d04c      	beq.n	8009d48 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	823b      	strh	r3, [r7, #16]
 8009cbc:	8a3b      	ldrh	r3, [r7, #16]
 8009cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d01b      	beq.n	8009cfe <USB_EPClearStall+0x6c>
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cdc:	81fb      	strh	r3, [r7, #14]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	441a      	add	r2, r3
 8009ce8:	89fb      	ldrh	r3, [r7, #14]
 8009cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cf6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	78db      	ldrb	r3, [r3, #3]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d06c      	beq.n	8009de0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d1c:	81bb      	strh	r3, [r7, #12]
 8009d1e:	89bb      	ldrh	r3, [r7, #12]
 8009d20:	f083 0320 	eor.w	r3, r3, #32
 8009d24:	81bb      	strh	r3, [r7, #12]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	441a      	add	r2, r3
 8009d30:	89bb      	ldrh	r3, [r7, #12]
 8009d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	8013      	strh	r3, [r2, #0]
 8009d46:	e04b      	b.n	8009de0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	82fb      	strh	r3, [r7, #22]
 8009d56:	8afb      	ldrh	r3, [r7, #22]
 8009d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01b      	beq.n	8009d98 <USB_EPClearStall+0x106>
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d76:	82bb      	strh	r3, [r7, #20]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	441a      	add	r2, r3
 8009d82:	8abb      	ldrh	r3, [r7, #20]
 8009d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dae:	827b      	strh	r3, [r7, #18]
 8009db0:	8a7b      	ldrh	r3, [r7, #18]
 8009db2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009db6:	827b      	strh	r3, [r7, #18]
 8009db8:	8a7b      	ldrh	r3, [r7, #18]
 8009dba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009dbe:	827b      	strh	r3, [r7, #18]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	441a      	add	r2, r3
 8009dca:	8a7b      	ldrh	r3, [r7, #18]
 8009dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bc80      	pop	{r7}
 8009dea:	4770      	bx	lr

08009dec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2280      	movs	r2, #128	@ 0x80
 8009e02:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bc80      	pop	{r7}
 8009e10:	4770      	bx	lr

08009e12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr

08009e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr

08009e3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bc80      	pop	{r7}
 8009e56:	4770      	bx	lr

08009e58 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bc80      	pop	{r7}
 8009e6c:	4770      	bx	lr

08009e6e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b08b      	sub	sp, #44	@ 0x2c
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	4611      	mov	r1, r2
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	80fb      	strh	r3, [r7, #6]
 8009e80:	4613      	mov	r3, r2
 8009e82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009e84:	88bb      	ldrh	r3, [r7, #4]
 8009e86:	3301      	adds	r3, #1
 8009e88:	085b      	lsrs	r3, r3, #1
 8009e8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e94:	88fb      	ldrh	r3, [r7, #6]
 8009e96:	005a      	lsls	r2, r3, #1
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ea0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ea6:	e01f      	b.n	8009ee8 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b21b      	sxth	r3, r3
 8009eb6:	021b      	lsls	r3, r3, #8
 8009eb8:	b21a      	sxth	r2, r3
 8009eba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	b21b      	sxth	r3, r3
 8009ec2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	8a7a      	ldrh	r2, [r7, #18]
 8009ec8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	3302      	adds	r3, #2
 8009ece:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	3302      	adds	r3, #2
 8009ed4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1dc      	bne.n	8009ea8 <USB_WritePMA+0x3a>
  }
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	372c      	adds	r7, #44	@ 0x2c
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bc80      	pop	{r7}
 8009ef8:	4770      	bx	lr

08009efa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b08b      	sub	sp, #44	@ 0x2c
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	4611      	mov	r1, r2
 8009f06:	461a      	mov	r2, r3
 8009f08:	460b      	mov	r3, r1
 8009f0a:	80fb      	strh	r3, [r7, #6]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009f10:	88bb      	ldrh	r3, [r7, #4]
 8009f12:	085b      	lsrs	r3, r3, #1
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f20:	88fb      	ldrh	r3, [r7, #6]
 8009f22:	005a      	lsls	r2, r3, #1
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f2c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f32:	e01b      	b.n	8009f6c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	3302      	adds	r3, #2
 8009f40:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	0a1b      	lsrs	r3, r3, #8
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	3302      	adds	r3, #2
 8009f64:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e0      	bne.n	8009f34 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009f72:	88bb      	ldrh	r3, [r7, #4]
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d007      	beq.n	8009f8e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	701a      	strb	r2, [r3, #0]
  }
}
 8009f8e:	bf00      	nop
 8009f90:	372c      	adds	r7, #44	@ 0x2c
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bc80      	pop	{r7}
 8009f96:	4770      	bx	lr

08009f98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7c1b      	ldrb	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d115      	bne.n	8009fdc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	2181      	movs	r1, #129	@ 0x81
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f001 feca 	bl	800bd52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009fc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009fc8:	2202      	movs	r2, #2
 8009fca:	2101      	movs	r1, #1
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 fec0 	bl	800bd52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009fda:	e012      	b.n	800a002 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009fdc:	2340      	movs	r3, #64	@ 0x40
 8009fde:	2202      	movs	r2, #2
 8009fe0:	2181      	movs	r1, #129	@ 0x81
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 feb5 	bl	800bd52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009fee:	2340      	movs	r3, #64	@ 0x40
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 feac 	bl	800bd52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a002:	2308      	movs	r3, #8
 800a004:	2203      	movs	r2, #3
 800a006:	2182      	movs	r1, #130	@ 0x82
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fea2 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a014:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a018:	f001 ffc2 	bl	800bfa0 <USBD_static_malloc>
 800a01c:	4602      	mov	r2, r0
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d102      	bne.n	800a034 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a02e:	2301      	movs	r3, #1
 800a030:	73fb      	strb	r3, [r7, #15]
 800a032:	e026      	b.n	800a082 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a03a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2200      	movs	r2, #0
 800a052:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7c1b      	ldrb	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d109      	bne.n	800a072 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a064:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a068:	2101      	movs	r1, #1
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f001 ff61 	bl	800bf32 <USBD_LL_PrepareReceive>
 800a070:	e007      	b.n	800a082 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a078:	2340      	movs	r3, #64	@ 0x40
 800a07a:	2101      	movs	r1, #1
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 ff58 	bl	800bf32 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a082:	7bfb      	ldrb	r3, [r7, #15]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a09c:	2181      	movs	r1, #129	@ 0x81
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 fe7d 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 fe76 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a0ba:	2182      	movs	r1, #130	@ 0x82
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f001 fe6e 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00e      	beq.n	800a0f0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 ff68 	bl	800bfb8 <USBD_static_free>
    pdev->pClassData = NULL;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b086      	sub	sp, #24
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a10a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a120:	2b00      	cmp	r3, #0
 800a122:	d039      	beq.n	800a198 <USBD_CDC_Setup+0x9e>
 800a124:	2b20      	cmp	r3, #32
 800a126:	d17f      	bne.n	800a228 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	88db      	ldrh	r3, [r3, #6]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d029      	beq.n	800a184 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	b25b      	sxtb	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	da11      	bge.n	800a15e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a146:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	88d2      	ldrh	r2, [r2, #6]
 800a14c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a14e:	6939      	ldr	r1, [r7, #16]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	88db      	ldrh	r3, [r3, #6]
 800a154:	461a      	mov	r2, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f001 fa06 	bl	800b568 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a15c:	e06b      	b.n	800a236 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	785a      	ldrb	r2, [r3, #1]
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	88db      	ldrh	r3, [r3, #6]
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a174:	6939      	ldr	r1, [r7, #16]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	88db      	ldrh	r3, [r3, #6]
 800a17a:	461a      	mov	r2, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 fa21 	bl	800b5c4 <USBD_CtlPrepareRx>
      break;
 800a182:	e058      	b.n	800a236 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	7850      	ldrb	r0, [r2, #1]
 800a190:	2200      	movs	r2, #0
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	4798      	blx	r3
      break;
 800a196:	e04e      	b.n	800a236 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	785b      	ldrb	r3, [r3, #1]
 800a19c:	2b0b      	cmp	r3, #11
 800a19e:	d02e      	beq.n	800a1fe <USBD_CDC_Setup+0x104>
 800a1a0:	2b0b      	cmp	r3, #11
 800a1a2:	dc38      	bgt.n	800a216 <USBD_CDC_Setup+0x11c>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <USBD_CDC_Setup+0xb4>
 800a1a8:	2b0a      	cmp	r3, #10
 800a1aa:	d014      	beq.n	800a1d6 <USBD_CDC_Setup+0xdc>
 800a1ac:	e033      	b.n	800a216 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d107      	bne.n	800a1c8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a1b8:	f107 030c 	add.w	r3, r7, #12
 800a1bc:	2202      	movs	r2, #2
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 f9d1 	bl	800b568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1c6:	e02e      	b.n	800a226 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 f962 	bl	800b494 <USBD_CtlError>
            ret = USBD_FAIL;
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	75fb      	strb	r3, [r7, #23]
          break;
 800a1d4:	e027      	b.n	800a226 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d107      	bne.n	800a1f0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a1e0:	f107 030f 	add.w	r3, r7, #15
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f001 f9bd 	bl	800b568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1ee:	e01a      	b.n	800a226 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 f94e 	bl	800b494 <USBD_CtlError>
            ret = USBD_FAIL;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	75fb      	strb	r3, [r7, #23]
          break;
 800a1fc:	e013      	b.n	800a226 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a204:	2b03      	cmp	r3, #3
 800a206:	d00d      	beq.n	800a224 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f001 f942 	bl	800b494 <USBD_CtlError>
            ret = USBD_FAIL;
 800a210:	2302      	movs	r3, #2
 800a212:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a214:	e006      	b.n	800a224 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f93b 	bl	800b494 <USBD_CtlError>
          ret = USBD_FAIL;
 800a21e:	2302      	movs	r3, #2
 800a220:	75fb      	strb	r3, [r7, #23]
          break;
 800a222:	e000      	b.n	800a226 <USBD_CDC_Setup+0x12c>
          break;
 800a224:	bf00      	nop
      }
      break;
 800a226:	e006      	b.n	800a236 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f001 f932 	bl	800b494 <USBD_CtlError>
      ret = USBD_FAIL;
 800a230:	2302      	movs	r3, #2
 800a232:	75fb      	strb	r3, [r7, #23]
      break;
 800a234:	bf00      	nop
  }

  return ret;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a252:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a25a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a262:	2b00      	cmp	r3, #0
 800a264:	d03a      	beq.n	800a2dc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a266:	78fa      	ldrb	r2, [r7, #3]
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	440b      	add	r3, r1
 800a274:	331c      	adds	r3, #28
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d029      	beq.n	800a2d0 <USBD_CDC_DataIn+0x90>
 800a27c:	78fa      	ldrb	r2, [r7, #3]
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	440b      	add	r3, r1
 800a28a:	331c      	adds	r3, #28
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	78f9      	ldrb	r1, [r7, #3]
 800a290:	68b8      	ldr	r0, [r7, #8]
 800a292:	460b      	mov	r3, r1
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	440b      	add	r3, r1
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	4403      	add	r3, r0
 800a29c:	3320      	adds	r3, #32
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a2a4:	fb01 f303 	mul.w	r3, r1, r3
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d110      	bne.n	800a2d0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a2ae:	78fa      	ldrb	r2, [r7, #3]
 800a2b0:	6879      	ldr	r1, [r7, #4]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	440b      	add	r3, r1
 800a2bc:	331c      	adds	r3, #28
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a2c2:	78f9      	ldrb	r1, [r7, #3]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 fe0f 	bl	800beec <USBD_LL_Transmit>
 800a2ce:	e003      	b.n	800a2d8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e000      	b.n	800a2de <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a2dc:	2302      	movs	r3, #2
  }
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2fa:	78fb      	ldrb	r3, [r7, #3]
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 fe3a 	bl	800bf78 <USBD_LL_GetRxDataSize>
 800a304:	4602      	mov	r2, r0
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00d      	beq.n	800a332 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a32a:	4611      	mov	r1, r2
 800a32c:	4798      	blx	r3

    return USBD_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	e000      	b.n	800a334 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a332:	2302      	movs	r3, #2
  }
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a34a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a352:	2b00      	cmp	r3, #0
 800a354:	d014      	beq.n	800a380 <USBD_CDC_EP0_RxReady+0x44>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a35c:	2bff      	cmp	r3, #255	@ 0xff
 800a35e:	d00f      	beq.n	800a380 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a36e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a376:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	22ff      	movs	r2, #255	@ 0xff
 800a37c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2243      	movs	r2, #67	@ 0x43
 800a398:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a39a:	4b03      	ldr	r3, [pc, #12]	@ (800a3a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20000098 	.word	0x20000098

0800a3ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2243      	movs	r2, #67	@ 0x43
 800a3b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a3ba:	4b03      	ldr	r3, [pc, #12]	@ (800a3c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bc80      	pop	{r7}
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	20000054 	.word	0x20000054

0800a3cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2243      	movs	r2, #67	@ 0x43
 800a3d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a3da:	4b03      	ldr	r3, [pc, #12]	@ (800a3e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bc80      	pop	{r7}
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	200000dc 	.word	0x200000dc

0800a3ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	220a      	movs	r2, #10
 800a3f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a3fa:	4b03      	ldr	r3, [pc, #12]	@ (800a408 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	bc80      	pop	{r7}
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20000010 	.word	0x20000010

0800a40c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a416:	2302      	movs	r3, #2
 800a418:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d005      	beq.n	800a42c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	bc80      	pop	{r7}
 800a436:	4770      	bx	lr

0800a438 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a44c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a456:	88fa      	ldrh	r2, [r7, #6]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	371c      	adds	r7, #28
 800a464:	46bd      	mov	sp, r7
 800a466:	bc80      	pop	{r7}
 800a468:	4770      	bx	lr

0800a46a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b085      	sub	sp, #20
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a47a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bc80      	pop	{r7}
 800a48e:	4770      	bx	lr

0800a490 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a49e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d01c      	beq.n	800a4e4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d115      	bne.n	800a4e0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	2181      	movs	r1, #129	@ 0x81
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f001 fd08 	bl	800beec <USBD_LL_Transmit>

      return USBD_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	e002      	b.n	800a4e6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e000      	b.n	800a4e6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a4e4:	2302      	movs	r3, #2
  }
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a504:	2b00      	cmp	r3, #0
 800a506:	d017      	beq.n	800a538 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	7c1b      	ldrb	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d109      	bne.n	800a524 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a51a:	2101      	movs	r1, #1
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 fd08 	bl	800bf32 <USBD_LL_PrepareReceive>
 800a522:	e007      	b.n	800a534 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a52a:	2340      	movs	r3, #64	@ 0x40
 800a52c:	2101      	movs	r1, #1
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 fcff 	bl	800bf32 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	e000      	b.n	800a53a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a538:	2302      	movs	r3, #2
  }
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	4613      	mov	r3, r2
 800a54e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a556:	2302      	movs	r3, #2
 800a558:	e01a      	b.n	800a590 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	79fa      	ldrb	r2, [r7, #7]
 800a586:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f001 fb6d 	bl	800bc68 <USBD_LL_Init>

  return USBD_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d006      	beq.n	800a5ba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	73fb      	strb	r3, [r7, #15]
 800a5b8:	e001      	b.n	800a5be <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr

0800a5ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fba2 	bl	800bd1c <USBD_LL_Start>

  return USBD_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bc80      	pop	{r7}
 800a5f4:	4770      	bx	lr

0800a5f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a602:	2302      	movs	r3, #2
 800a604:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00c      	beq.n	800a62a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	4611      	mov	r1, r2
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	4798      	blx	r3
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	78fa      	ldrb	r2, [r7, #3]
 800a64a:	4611      	mov	r1, r2
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	4798      	blx	r3

  return USBD_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b082      	sub	sp, #8
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 fed8 	bl	800b422 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a680:	461a      	mov	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a68e:	f003 031f 	and.w	r3, r3, #31
 800a692:	2b02      	cmp	r3, #2
 800a694:	d016      	beq.n	800a6c4 <USBD_LL_SetupStage+0x6a>
 800a696:	2b02      	cmp	r3, #2
 800a698:	d81c      	bhi.n	800a6d4 <USBD_LL_SetupStage+0x7a>
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <USBD_LL_SetupStage+0x4a>
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d008      	beq.n	800a6b4 <USBD_LL_SetupStage+0x5a>
 800a6a2:	e017      	b.n	800a6d4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f9cb 	bl	800aa48 <USBD_StdDevReq>
      break;
 800a6b2:	e01a      	b.n	800a6ea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fa2d 	bl	800ab1c <USBD_StdItfReq>
      break;
 800a6c2:	e012      	b.n	800a6ea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fa6d 	bl	800abac <USBD_StdEPReq>
      break;
 800a6d2:	e00a      	b.n	800a6ea <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a6da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f001 fb7a 	bl	800bddc <USBD_LL_StallEP>
      break;
 800a6e8:	bf00      	nop
  }

  return USBD_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a702:	7afb      	ldrb	r3, [r7, #11]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d14b      	bne.n	800a7a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a70e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a716:	2b03      	cmp	r3, #3
 800a718:	d134      	bne.n	800a784 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	68da      	ldr	r2, [r3, #12]
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	429a      	cmp	r2, r3
 800a724:	d919      	bls.n	800a75a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d203      	bcs.n	800a748 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a744:	b29b      	uxth	r3, r3
 800a746:	e002      	b.n	800a74e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	461a      	mov	r2, r3
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 ff54 	bl	800b600 <USBD_CtlContinueRx>
 800a758:	e038      	b.n	800a7cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d105      	bne.n	800a77c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 ff51 	bl	800b624 <USBD_CtlSendStatus>
 800a782:	e023      	b.n	800a7cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	d11e      	bne.n	800a7cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a796:	2100      	movs	r1, #0
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f001 fb1f 	bl	800bddc <USBD_LL_StallEP>
 800a79e:	e015      	b.n	800a7cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00d      	beq.n	800a7c8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d108      	bne.n	800a7c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	7afa      	ldrb	r2, [r7, #11]
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	4798      	blx	r3
 800a7c6:	e001      	b.n	800a7cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e000      	b.n	800a7ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b086      	sub	sp, #24
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	607a      	str	r2, [r7, #4]
 800a7e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a7e4:	7afb      	ldrb	r3, [r7, #11]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d17f      	bne.n	800a8ea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3314      	adds	r3, #20
 800a7ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d15c      	bne.n	800a8b4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	68da      	ldr	r2, [r3, #12]
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	429a      	cmp	r2, r3
 800a804:	d915      	bls.n	800a832 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 febe 	bl	800b5a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a824:	2300      	movs	r3, #0
 800a826:	2200      	movs	r2, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f001 fb81 	bl	800bf32 <USBD_LL_PrepareReceive>
 800a830:	e04e      	b.n	800a8d0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	6912      	ldr	r2, [r2, #16]
 800a83a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a83e:	fb01 f202 	mul.w	r2, r1, r2
 800a842:	1a9b      	subs	r3, r3, r2
 800a844:	2b00      	cmp	r3, #0
 800a846:	d11c      	bne.n	800a882 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a850:	429a      	cmp	r2, r3
 800a852:	d316      	bcc.n	800a882 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a85e:	429a      	cmp	r2, r3
 800a860:	d20f      	bcs.n	800a882 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f000 fe9a 	bl	800b5a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a874:	2300      	movs	r3, #0
 800a876:	2200      	movs	r2, #0
 800a878:	2100      	movs	r1, #0
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f001 fb59 	bl	800bf32 <USBD_LL_PrepareReceive>
 800a880:	e026      	b.n	800a8d0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a894:	2b03      	cmp	r3, #3
 800a896:	d105      	bne.n	800a8a4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a8a4:	2180      	movs	r1, #128	@ 0x80
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f001 fa98 	bl	800bddc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 fecc 	bl	800b64a <USBD_CtlReceiveStatus>
 800a8b2:	e00d      	b.n	800a8d0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	d004      	beq.n	800a8c8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d103      	bne.n	800a8d0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a8c8:	2180      	movs	r1, #128	@ 0x80
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f001 fa86 	bl	800bddc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d11d      	bne.n	800a916 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f7ff fe81 	bl	800a5e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8e8:	e015      	b.n	800a916 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00d      	beq.n	800a912 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d108      	bne.n	800a912 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	7afa      	ldrb	r2, [r7, #11]
 800a90a:	4611      	mov	r1, r2
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	4798      	blx	r3
 800a910:	e001      	b.n	800a916 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a912:	2302      	movs	r3, #2
 800a914:	e000      	b.n	800a918 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a928:	2340      	movs	r3, #64	@ 0x40
 800a92a:	2200      	movs	r2, #0
 800a92c:	2100      	movs	r1, #0
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 fa0f 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2240      	movs	r2, #64	@ 0x40
 800a940:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a944:	2340      	movs	r3, #64	@ 0x40
 800a946:	2200      	movs	r2, #0
 800a948:	2180      	movs	r1, #128	@ 0x80
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f001 fa01 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2240      	movs	r2, #64	@ 0x40
 800a95a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d009      	beq.n	800a998 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	6852      	ldr	r2, [r2, #4]
 800a990:	b2d2      	uxtb	r2, r2
 800a992:	4611      	mov	r1, r2
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	4798      	blx	r3
  }

  return USBD_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b083      	sub	sp, #12
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	78fa      	ldrb	r2, [r7, #3]
 800a9b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bc80      	pop	{r7}
 800a9be:	4770      	bx	lr

0800a9c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2204      	movs	r2, #4
 800a9d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bc80      	pop	{r7}
 800a9e6:	4770      	bx	lr

0800a9e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d105      	bne.n	800aa06 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr

0800aa12 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d10b      	bne.n	800aa3c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa2a:	69db      	ldr	r3, [r3, #28]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d005      	beq.n	800aa3c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa36:	69db      	ldr	r3, [r3, #28]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa5e:	2b40      	cmp	r3, #64	@ 0x40
 800aa60:	d005      	beq.n	800aa6e <USBD_StdDevReq+0x26>
 800aa62:	2b40      	cmp	r3, #64	@ 0x40
 800aa64:	d84f      	bhi.n	800ab06 <USBD_StdDevReq+0xbe>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <USBD_StdDevReq+0x36>
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	d14b      	bne.n	800ab06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	4798      	blx	r3
      break;
 800aa7c:	e048      	b.n	800ab10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	785b      	ldrb	r3, [r3, #1]
 800aa82:	2b09      	cmp	r3, #9
 800aa84:	d839      	bhi.n	800aafa <USBD_StdDevReq+0xb2>
 800aa86:	a201      	add	r2, pc, #4	@ (adr r2, 800aa8c <USBD_StdDevReq+0x44>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800aadd 	.word	0x0800aadd
 800aa90:	0800aaf1 	.word	0x0800aaf1
 800aa94:	0800aafb 	.word	0x0800aafb
 800aa98:	0800aae7 	.word	0x0800aae7
 800aa9c:	0800aafb 	.word	0x0800aafb
 800aaa0:	0800aabf 	.word	0x0800aabf
 800aaa4:	0800aab5 	.word	0x0800aab5
 800aaa8:	0800aafb 	.word	0x0800aafb
 800aaac:	0800aad3 	.word	0x0800aad3
 800aab0:	0800aac9 	.word	0x0800aac9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f9dc 	bl	800ae74 <USBD_GetDescriptor>
          break;
 800aabc:	e022      	b.n	800ab04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fb3f 	bl	800b144 <USBD_SetAddress>
          break;
 800aac6:	e01d      	b.n	800ab04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fb7e 	bl	800b1cc <USBD_SetConfig>
          break;
 800aad0:	e018      	b.n	800ab04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fc07 	bl	800b2e8 <USBD_GetConfig>
          break;
 800aada:	e013      	b.n	800ab04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fc37 	bl	800b352 <USBD_GetStatus>
          break;
 800aae4:	e00e      	b.n	800ab04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fc65 	bl	800b3b8 <USBD_SetFeature>
          break;
 800aaee:	e009      	b.n	800ab04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fc74 	bl	800b3e0 <USBD_ClrFeature>
          break;
 800aaf8:	e004      	b.n	800ab04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fcc9 	bl	800b494 <USBD_CtlError>
          break;
 800ab02:	bf00      	nop
      }
      break;
 800ab04:	e004      	b.n	800ab10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fcc3 	bl	800b494 <USBD_CtlError>
      break;
 800ab0e:	bf00      	nop
  }

  return ret;
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop

0800ab1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab32:	2b40      	cmp	r3, #64	@ 0x40
 800ab34:	d005      	beq.n	800ab42 <USBD_StdItfReq+0x26>
 800ab36:	2b40      	cmp	r3, #64	@ 0x40
 800ab38:	d82e      	bhi.n	800ab98 <USBD_StdItfReq+0x7c>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <USBD_StdItfReq+0x26>
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	d12a      	bne.n	800ab98 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d81d      	bhi.n	800ab8a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	889b      	ldrh	r3, [r3, #4]
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d813      	bhi.n	800ab80 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	88db      	ldrh	r3, [r3, #6]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d110      	bne.n	800ab94 <USBD_StdItfReq+0x78>
 800ab72:	7bfb      	ldrb	r3, [r7, #15]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10d      	bne.n	800ab94 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fd53 	bl	800b624 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab7e:	e009      	b.n	800ab94 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fc86 	bl	800b494 <USBD_CtlError>
          break;
 800ab88:	e004      	b.n	800ab94 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 fc81 	bl	800b494 <USBD_CtlError>
          break;
 800ab92:	e000      	b.n	800ab96 <USBD_StdItfReq+0x7a>
          break;
 800ab94:	bf00      	nop
      }
      break;
 800ab96:	e004      	b.n	800aba2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fc7a 	bl	800b494 <USBD_CtlError>
      break;
 800aba0:	bf00      	nop
  }

  return USBD_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	889b      	ldrh	r3, [r3, #4]
 800abbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abc8:	2b40      	cmp	r3, #64	@ 0x40
 800abca:	d007      	beq.n	800abdc <USBD_StdEPReq+0x30>
 800abcc:	2b40      	cmp	r3, #64	@ 0x40
 800abce:	f200 8146 	bhi.w	800ae5e <USBD_StdEPReq+0x2b2>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <USBD_StdEPReq+0x40>
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	f040 8141 	bne.w	800ae5e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	4798      	blx	r3
      break;
 800abea:	e13d      	b.n	800ae68 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	d10a      	bne.n	800ac0e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	4798      	blx	r3
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	e12d      	b.n	800ae6a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	785b      	ldrb	r3, [r3, #1]
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d007      	beq.n	800ac26 <USBD_StdEPReq+0x7a>
 800ac16:	2b03      	cmp	r3, #3
 800ac18:	f300 811b 	bgt.w	800ae52 <USBD_StdEPReq+0x2a6>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d072      	beq.n	800ad06 <USBD_StdEPReq+0x15a>
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d03a      	beq.n	800ac9a <USBD_StdEPReq+0xee>
 800ac24:	e115      	b.n	800ae52 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d002      	beq.n	800ac36 <USBD_StdEPReq+0x8a>
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	d015      	beq.n	800ac60 <USBD_StdEPReq+0xb4>
 800ac34:	e02b      	b.n	800ac8e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00c      	beq.n	800ac56 <USBD_StdEPReq+0xaa>
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	2b80      	cmp	r3, #128	@ 0x80
 800ac40:	d009      	beq.n	800ac56 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
 800ac44:	4619      	mov	r1, r3
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f001 f8c8 	bl	800bddc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ac4c:	2180      	movs	r1, #128	@ 0x80
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f001 f8c4 	bl	800bddc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac54:	e020      	b.n	800ac98 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fc1b 	bl	800b494 <USBD_CtlError>
              break;
 800ac5e:	e01b      	b.n	800ac98 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	885b      	ldrh	r3, [r3, #2]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10e      	bne.n	800ac86 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00b      	beq.n	800ac86 <USBD_StdEPReq+0xda>
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
 800ac70:	2b80      	cmp	r3, #128	@ 0x80
 800ac72:	d008      	beq.n	800ac86 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	88db      	ldrh	r3, [r3, #6]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f001 f8ab 	bl	800bddc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fccc 	bl	800b624 <USBD_CtlSendStatus>

              break;
 800ac8c:	e004      	b.n	800ac98 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fbff 	bl	800b494 <USBD_CtlError>
              break;
 800ac96:	bf00      	nop
          }
          break;
 800ac98:	e0e0      	b.n	800ae5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d002      	beq.n	800acaa <USBD_StdEPReq+0xfe>
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d015      	beq.n	800acd4 <USBD_StdEPReq+0x128>
 800aca8:	e026      	b.n	800acf8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acaa:	7bbb      	ldrb	r3, [r7, #14]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00c      	beq.n	800acca <USBD_StdEPReq+0x11e>
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	2b80      	cmp	r3, #128	@ 0x80
 800acb4:	d009      	beq.n	800acca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f001 f88e 	bl	800bddc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800acc0:	2180      	movs	r1, #128	@ 0x80
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 f88a 	bl	800bddc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acc8:	e01c      	b.n	800ad04 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fbe1 	bl	800b494 <USBD_CtlError>
              break;
 800acd2:	e017      	b.n	800ad04 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	885b      	ldrh	r3, [r3, #2]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d112      	bne.n	800ad02 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d004      	beq.n	800acf0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 f895 	bl	800be1a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fc97 	bl	800b624 <USBD_CtlSendStatus>
              }
              break;
 800acf6:	e004      	b.n	800ad02 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fbca 	bl	800b494 <USBD_CtlError>
              break;
 800ad00:	e000      	b.n	800ad04 <USBD_StdEPReq+0x158>
              break;
 800ad02:	bf00      	nop
          }
          break;
 800ad04:	e0aa      	b.n	800ae5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d002      	beq.n	800ad16 <USBD_StdEPReq+0x16a>
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d032      	beq.n	800ad7a <USBD_StdEPReq+0x1ce>
 800ad14:	e097      	b.n	800ae46 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d007      	beq.n	800ad2c <USBD_StdEPReq+0x180>
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
 800ad1e:	2b80      	cmp	r3, #128	@ 0x80
 800ad20:	d004      	beq.n	800ad2c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fbb5 	bl	800b494 <USBD_CtlError>
                break;
 800ad2a:	e091      	b.n	800ae50 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	da0b      	bge.n	800ad4c <USBD_StdEPReq+0x1a0>
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	3310      	adds	r3, #16
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	4413      	add	r3, r2
 800ad48:	3304      	adds	r3, #4
 800ad4a:	e00b      	b.n	800ad64 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
 800ad4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4413      	add	r3, r2
 800ad62:	3304      	adds	r3, #4
 800ad64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fbf8 	bl	800b568 <USBD_CtlSendData>
              break;
 800ad78:	e06a      	b.n	800ae50 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	da11      	bge.n	800ada6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
 800ad84:	f003 020f 	and.w	r2, r3, #15
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	440b      	add	r3, r1
 800ad94:	3318      	adds	r3, #24
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d117      	bne.n	800adcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fb78 	bl	800b494 <USBD_CtlError>
                  break;
 800ada4:	e054      	b.n	800ae50 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	f003 020f 	and.w	r2, r3, #15
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	4613      	mov	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	440b      	add	r3, r1
 800adb8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d104      	bne.n	800adcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fb65 	bl	800b494 <USBD_CtlError>
                  break;
 800adca:	e041      	b.n	800ae50 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add0:	2b00      	cmp	r3, #0
 800add2:	da0b      	bge.n	800adec <USBD_StdEPReq+0x240>
 800add4:	7bbb      	ldrb	r3, [r7, #14]
 800add6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adda:	4613      	mov	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	3310      	adds	r3, #16
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	4413      	add	r3, r2
 800ade8:	3304      	adds	r3, #4
 800adea:	e00b      	b.n	800ae04 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adf2:	4613      	mov	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	4413      	add	r3, r2
 800ae02:	3304      	adds	r3, #4
 800ae04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <USBD_StdEPReq+0x266>
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	2b80      	cmp	r3, #128	@ 0x80
 800ae10:	d103      	bne.n	800ae1a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	e00e      	b.n	800ae38 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f001 f81a 	bl	800be58 <USBD_LL_IsStallEP>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	e002      	b.n	800ae38 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fb92 	bl	800b568 <USBD_CtlSendData>
              break;
 800ae44:	e004      	b.n	800ae50 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fb23 	bl	800b494 <USBD_CtlError>
              break;
 800ae4e:	bf00      	nop
          }
          break;
 800ae50:	e004      	b.n	800ae5c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fb1d 	bl	800b494 <USBD_CtlError>
          break;
 800ae5a:	bf00      	nop
      }
      break;
 800ae5c:	e004      	b.n	800ae68 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fb17 	bl	800b494 <USBD_CtlError>
      break;
 800ae66:	bf00      	nop
  }

  return ret;
 800ae68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	3b01      	subs	r3, #1
 800ae94:	2b06      	cmp	r3, #6
 800ae96:	f200 8128 	bhi.w	800b0ea <USBD_GetDescriptor+0x276>
 800ae9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aea0 <USBD_GetDescriptor+0x2c>)
 800ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea0:	0800aebd 	.word	0x0800aebd
 800aea4:	0800aed5 	.word	0x0800aed5
 800aea8:	0800af15 	.word	0x0800af15
 800aeac:	0800b0eb 	.word	0x0800b0eb
 800aeb0:	0800b0eb 	.word	0x0800b0eb
 800aeb4:	0800b08b 	.word	0x0800b08b
 800aeb8:	0800b0b7 	.word	0x0800b0b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	7c12      	ldrb	r2, [r2, #16]
 800aec8:	f107 0108 	add.w	r1, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
      break;
 800aed2:	e112      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7c1b      	ldrb	r3, [r3, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10d      	bne.n	800aef8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee4:	f107 0208 	add.w	r2, r7, #8
 800aee8:	4610      	mov	r0, r2
 800aeea:	4798      	blx	r3
 800aeec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3301      	adds	r3, #1
 800aef2:	2202      	movs	r2, #2
 800aef4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aef6:	e100      	b.n	800b0fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af00:	f107 0208 	add.w	r2, r7, #8
 800af04:	4610      	mov	r0, r2
 800af06:	4798      	blx	r3
 800af08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	2202      	movs	r2, #2
 800af10:	701a      	strb	r2, [r3, #0]
      break;
 800af12:	e0f2      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	885b      	ldrh	r3, [r3, #2]
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b05      	cmp	r3, #5
 800af1c:	f200 80ac 	bhi.w	800b078 <USBD_GetDescriptor+0x204>
 800af20:	a201      	add	r2, pc, #4	@ (adr r2, 800af28 <USBD_GetDescriptor+0xb4>)
 800af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af26:	bf00      	nop
 800af28:	0800af41 	.word	0x0800af41
 800af2c:	0800af75 	.word	0x0800af75
 800af30:	0800afa9 	.word	0x0800afa9
 800af34:	0800afdd 	.word	0x0800afdd
 800af38:	0800b011 	.word	0x0800b011
 800af3c:	0800b045 	.word	0x0800b045
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	7c12      	ldrb	r2, [r2, #16]
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af62:	e091      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fa94 	bl	800b494 <USBD_CtlError>
            err++;
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	3301      	adds	r3, #1
 800af70:	72fb      	strb	r3, [r7, #11]
          break;
 800af72:	e089      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 0108 	add.w	r1, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af96:	e077      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa7a 	bl	800b494 <USBD_CtlError>
            err++;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	3301      	adds	r3, #1
 800afa4:	72fb      	strb	r3, [r7, #11]
          break;
 800afa6:	e06f      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00b      	beq.n	800afcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	7c12      	ldrb	r2, [r2, #16]
 800afc0:	f107 0108 	add.w	r1, r7, #8
 800afc4:	4610      	mov	r0, r2
 800afc6:	4798      	blx	r3
 800afc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afca:	e05d      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa60 	bl	800b494 <USBD_CtlError>
            err++;
 800afd4:	7afb      	ldrb	r3, [r7, #11]
 800afd6:	3301      	adds	r3, #1
 800afd8:	72fb      	strb	r3, [r7, #11]
          break;
 800afda:	e055      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	7c12      	ldrb	r2, [r2, #16]
 800aff4:	f107 0108 	add.w	r1, r7, #8
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
 800affc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affe:	e043      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fa46 	bl	800b494 <USBD_CtlError>
            err++;
 800b008:	7afb      	ldrb	r3, [r7, #11]
 800b00a:	3301      	adds	r3, #1
 800b00c:	72fb      	strb	r3, [r7, #11]
          break;
 800b00e:	e03b      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	7c12      	ldrb	r2, [r2, #16]
 800b028:	f107 0108 	add.w	r1, r7, #8
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
 800b030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b032:	e029      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa2c 	bl	800b494 <USBD_CtlError>
            err++;
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	3301      	adds	r3, #1
 800b040:	72fb      	strb	r3, [r7, #11]
          break;
 800b042:	e021      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00b      	beq.n	800b068 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	7c12      	ldrb	r2, [r2, #16]
 800b05c:	f107 0108 	add.w	r1, r7, #8
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
 800b064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b066:	e00f      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa12 	bl	800b494 <USBD_CtlError>
            err++;
 800b070:	7afb      	ldrb	r3, [r7, #11]
 800b072:	3301      	adds	r3, #1
 800b074:	72fb      	strb	r3, [r7, #11]
          break;
 800b076:	e007      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fa0a 	bl	800b494 <USBD_CtlError>
          err++;
 800b080:	7afb      	ldrb	r3, [r7, #11]
 800b082:	3301      	adds	r3, #1
 800b084:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b086:	e038      	b.n	800b0fa <USBD_GetDescriptor+0x286>
 800b088:	e037      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7c1b      	ldrb	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b09a:	f107 0208 	add.w	r2, r7, #8
 800b09e:	4610      	mov	r0, r2
 800b0a0:	4798      	blx	r3
 800b0a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0a4:	e029      	b.n	800b0fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f9f3 	bl	800b494 <USBD_CtlError>
        err++;
 800b0ae:	7afb      	ldrb	r3, [r7, #11]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b0b4:	e021      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	7c1b      	ldrb	r3, [r3, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10d      	bne.n	800b0da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c6:	f107 0208 	add.w	r2, r7, #8
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	4798      	blx	r3
 800b0ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	2207      	movs	r2, #7
 800b0d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0d8:	e00f      	b.n	800b0fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f9d9 	bl	800b494 <USBD_CtlError>
        err++;
 800b0e2:	7afb      	ldrb	r3, [r7, #11]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0e8:	e007      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f9d1 	bl	800b494 <USBD_CtlError>
      err++;
 800b0f2:	7afb      	ldrb	r3, [r7, #11]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0f8:	bf00      	nop
  }

  if (err != 0U)
 800b0fa:	7afb      	ldrb	r3, [r7, #11]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d11c      	bne.n	800b13a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b100:	893b      	ldrh	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d011      	beq.n	800b12a <USBD_GetDescriptor+0x2b6>
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	88db      	ldrh	r3, [r3, #6]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00d      	beq.n	800b12a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	88da      	ldrh	r2, [r3, #6]
 800b112:	893b      	ldrh	r3, [r7, #8]
 800b114:	4293      	cmp	r3, r2
 800b116:	bf28      	it	cs
 800b118:	4613      	movcs	r3, r2
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b11e:	893b      	ldrh	r3, [r7, #8]
 800b120:	461a      	mov	r2, r3
 800b122:	68f9      	ldr	r1, [r7, #12]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fa1f 	bl	800b568 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	88db      	ldrh	r3, [r3, #6]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d104      	bne.n	800b13c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fa76 	bl	800b624 <USBD_CtlSendStatus>
 800b138:	e000      	b.n	800b13c <USBD_GetDescriptor+0x2c8>
    return;
 800b13a:	bf00      	nop
    }
  }
}
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop

0800b144 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	889b      	ldrh	r3, [r3, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d130      	bne.n	800b1b8 <USBD_SetAddress+0x74>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	88db      	ldrh	r3, [r3, #6]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d12c      	bne.n	800b1b8 <USBD_SetAddress+0x74>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	885b      	ldrh	r3, [r3, #2]
 800b162:	2b7f      	cmp	r3, #127	@ 0x7f
 800b164:	d828      	bhi.n	800b1b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	885b      	ldrh	r3, [r3, #2]
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b170:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d104      	bne.n	800b186 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f988 	bl	800b494 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b184:	e01d      	b.n	800b1c2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7bfa      	ldrb	r2, [r7, #15]
 800b18a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fe8b 	bl	800beae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fa43 	bl	800b624 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d004      	beq.n	800b1ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ac:	e009      	b.n	800b1c2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b6:	e004      	b.n	800b1c2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f96a 	bl	800b494 <USBD_CtlError>
  }
}
 800b1c0:	bf00      	nop
 800b1c2:	bf00      	nop
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	885b      	ldrh	r3, [r3, #2]
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	4b41      	ldr	r3, [pc, #260]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b1de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1e0:	4b40      	ldr	r3, [pc, #256]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d904      	bls.n	800b1f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f952 	bl	800b494 <USBD_CtlError>
 800b1f0:	e075      	b.n	800b2de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d002      	beq.n	800b202 <USBD_SetConfig+0x36>
 800b1fc:	2b03      	cmp	r3, #3
 800b1fe:	d023      	beq.n	800b248 <USBD_SetConfig+0x7c>
 800b200:	e062      	b.n	800b2c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b202:	4b38      	ldr	r3, [pc, #224]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d01a      	beq.n	800b240 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b20a:	4b36      	ldr	r3, [pc, #216]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	461a      	mov	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2203      	movs	r2, #3
 800b218:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b21c:	4b31      	ldr	r3, [pc, #196]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7ff f9e7 	bl	800a5f6 <USBD_SetClassConfig>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d104      	bne.n	800b238 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f92f 	bl	800b494 <USBD_CtlError>
            return;
 800b236:	e052      	b.n	800b2de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f9f3 	bl	800b624 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b23e:	e04e      	b.n	800b2de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f9ef 	bl	800b624 <USBD_CtlSendStatus>
        break;
 800b246:	e04a      	b.n	800b2de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b248:	4b26      	ldr	r3, [pc, #152]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d112      	bne.n	800b276 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2202      	movs	r2, #2
 800b254:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b258:	4b22      	ldr	r3, [pc, #136]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	461a      	mov	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b262:	4b20      	ldr	r3, [pc, #128]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff f9e3 	bl	800a634 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f9d8 	bl	800b624 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b274:	e033      	b.n	800b2de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b276:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	429a      	cmp	r2, r3
 800b282:	d01d      	beq.n	800b2c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff f9d1 	bl	800a634 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b292:	4b14      	ldr	r3, [pc, #80]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b29c:	4b11      	ldr	r3, [pc, #68]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7ff f9a7 	bl	800a5f6 <USBD_SetClassConfig>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d104      	bne.n	800b2b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f8ef 	bl	800b494 <USBD_CtlError>
            return;
 800b2b6:	e012      	b.n	800b2de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f9b3 	bl	800b624 <USBD_CtlSendStatus>
        break;
 800b2be:	e00e      	b.n	800b2de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f9af 	bl	800b624 <USBD_CtlSendStatus>
        break;
 800b2c6:	e00a      	b.n	800b2de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f8e2 	bl	800b494 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b2d0:	4b04      	ldr	r3, [pc, #16]	@ (800b2e4 <USBD_SetConfig+0x118>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7ff f9ac 	bl	800a634 <USBD_ClrClassConfig>
        break;
 800b2dc:	bf00      	nop
    }
  }
}
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	20000580 	.word	0x20000580

0800b2e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	88db      	ldrh	r3, [r3, #6]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d004      	beq.n	800b304 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f8c9 	bl	800b494 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b302:	e022      	b.n	800b34a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	dc02      	bgt.n	800b314 <USBD_GetConfig+0x2c>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	dc03      	bgt.n	800b31a <USBD_GetConfig+0x32>
 800b312:	e015      	b.n	800b340 <USBD_GetConfig+0x58>
 800b314:	2b03      	cmp	r3, #3
 800b316:	d00b      	beq.n	800b330 <USBD_GetConfig+0x48>
 800b318:	e012      	b.n	800b340 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3308      	adds	r3, #8
 800b324:	2201      	movs	r2, #1
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f91d 	bl	800b568 <USBD_CtlSendData>
        break;
 800b32e:	e00c      	b.n	800b34a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3304      	adds	r3, #4
 800b334:	2201      	movs	r2, #1
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f915 	bl	800b568 <USBD_CtlSendData>
        break;
 800b33e:	e004      	b.n	800b34a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f8a6 	bl	800b494 <USBD_CtlError>
        break;
 800b348:	bf00      	nop
}
 800b34a:	bf00      	nop
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b082      	sub	sp, #8
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b362:	3b01      	subs	r3, #1
 800b364:	2b02      	cmp	r3, #2
 800b366:	d81e      	bhi.n	800b3a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	88db      	ldrh	r3, [r3, #6]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d004      	beq.n	800b37a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f88e 	bl	800b494 <USBD_CtlError>
        break;
 800b378:	e01a      	b.n	800b3b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2201      	movs	r2, #1
 800b37e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b386:	2b00      	cmp	r3, #0
 800b388:	d005      	beq.n	800b396 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f043 0202 	orr.w	r2, r3, #2
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	330c      	adds	r3, #12
 800b39a:	2202      	movs	r2, #2
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f8e2 	bl	800b568 <USBD_CtlSendData>
      break;
 800b3a4:	e004      	b.n	800b3b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f873 	bl	800b494 <USBD_CtlError>
      break;
 800b3ae:	bf00      	nop
  }
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	885b      	ldrh	r3, [r3, #2]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d106      	bne.n	800b3d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f926 	bl	800b624 <USBD_CtlSendStatus>
  }
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d80b      	bhi.n	800b40e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	885b      	ldrh	r3, [r3, #2]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d10c      	bne.n	800b418 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f90c 	bl	800b624 <USBD_CtlSendStatus>
      }
      break;
 800b40c:	e004      	b.n	800b418 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f83f 	bl	800b494 <USBD_CtlError>
      break;
 800b416:	e000      	b.n	800b41a <USBD_ClrFeature+0x3a>
      break;
 800b418:	bf00      	nop
  }
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	781a      	ldrb	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	785a      	ldrb	r2, [r3, #1]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	3302      	adds	r3, #2
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	3303      	adds	r3, #3
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	4413      	add	r3, r2
 800b450:	b29a      	uxth	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	3304      	adds	r3, #4
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	461a      	mov	r2, r3
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	3305      	adds	r3, #5
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	021b      	lsls	r3, r3, #8
 800b466:	b29b      	uxth	r3, r3
 800b468:	4413      	add	r3, r2
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	3306      	adds	r3, #6
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	461a      	mov	r2, r3
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	3307      	adds	r3, #7
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	b29b      	uxth	r3, r3
 800b482:	4413      	add	r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	80da      	strh	r2, [r3, #6]

}
 800b48a:	bf00      	nop
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	bc80      	pop	{r7}
 800b492:	4770      	bx	lr

0800b494 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b49e:	2180      	movs	r1, #128	@ 0x80
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fc9b 	bl	800bddc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fc97 	bl	800bddc <USBD_LL_StallEP>
}
 800b4ae:	bf00      	nop
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b086      	sub	sp, #24
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	60f8      	str	r0, [r7, #12]
 800b4be:	60b9      	str	r1, [r7, #8]
 800b4c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d032      	beq.n	800b532 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 f834 	bl	800b53a <USBD_GetLen>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	005b      	lsls	r3, r3, #1
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	75fa      	strb	r2, [r7, #23]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	7812      	ldrb	r2, [r2, #0]
 800b4f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b4f2:	7dfb      	ldrb	r3, [r7, #23]
 800b4f4:	1c5a      	adds	r2, r3, #1
 800b4f6:	75fa      	strb	r2, [r7, #23]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	2203      	movs	r2, #3
 800b500:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b502:	e012      	b.n	800b52a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	60fa      	str	r2, [r7, #12]
 800b50a:	7dfa      	ldrb	r2, [r7, #23]
 800b50c:	1c51      	adds	r1, r2, #1
 800b50e:	75f9      	strb	r1, [r7, #23]
 800b510:	4611      	mov	r1, r2
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	440a      	add	r2, r1
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	1c5a      	adds	r2, r3, #1
 800b51e:	75fa      	strb	r2, [r7, #23]
 800b520:	461a      	mov	r2, r3
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	4413      	add	r3, r2
 800b526:	2200      	movs	r2, #0
 800b528:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1e8      	bne.n	800b504 <USBD_GetString+0x4e>
    }
  }
}
 800b532:	bf00      	nop
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b085      	sub	sp, #20
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b546:	e005      	b.n	800b554 <USBD_GetLen+0x1a>
  {
    len++;
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	3301      	adds	r3, #1
 800b54c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3301      	adds	r3, #1
 800b552:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1f5      	bne.n	800b548 <USBD_GetLen+0xe>
  }

  return len;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	bc80      	pop	{r7}
 800b566:	4770      	bx	lr

0800b568 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	4613      	mov	r3, r2
 800b574:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2202      	movs	r2, #2
 800b57a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b57e:	88fa      	ldrh	r2, [r7, #6]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b584:	88fa      	ldrh	r2, [r7, #6]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	2100      	movs	r1, #0
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 fcab 	bl	800beec <USBD_LL_Transmit>

  return USBD_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5ae:	88fb      	ldrh	r3, [r7, #6]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f000 fc99 	bl	800beec <USBD_LL_Transmit>

  return USBD_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2203      	movs	r2, #3
 800b5d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b5da:	88fa      	ldrh	r2, [r7, #6]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b5e2:	88fa      	ldrh	r2, [r7, #6]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5ea:	88fb      	ldrh	r3, [r7, #6]
 800b5ec:	68ba      	ldr	r2, [r7, #8]
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 fc9e 	bl	800bf32 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	4613      	mov	r3, r2
 800b60c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b60e:	88fb      	ldrh	r3, [r7, #6]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	2100      	movs	r1, #0
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fc8c 	bl	800bf32 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2204      	movs	r2, #4
 800b630:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b634:	2300      	movs	r3, #0
 800b636:	2200      	movs	r2, #0
 800b638:	2100      	movs	r1, #0
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fc56 	bl	800beec <USBD_LL_Transmit>

  return USBD_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2205      	movs	r2, #5
 800b656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b65a:	2300      	movs	r3, #0
 800b65c:	2200      	movs	r2, #0
 800b65e:	2100      	movs	r1, #0
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fc66 	bl	800bf32 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b674:	2200      	movs	r2, #0
 800b676:	4912      	ldr	r1, [pc, #72]	@ (800b6c0 <MX_USB_DEVICE_Init+0x50>)
 800b678:	4812      	ldr	r0, [pc, #72]	@ (800b6c4 <MX_USB_DEVICE_Init+0x54>)
 800b67a:	f7fe ff62 	bl	800a542 <USBD_Init>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b684:	f7f6 fc2a 	bl	8001edc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b688:	490f      	ldr	r1, [pc, #60]	@ (800b6c8 <MX_USB_DEVICE_Init+0x58>)
 800b68a:	480e      	ldr	r0, [pc, #56]	@ (800b6c4 <MX_USB_DEVICE_Init+0x54>)
 800b68c:	f7fe ff84 	bl	800a598 <USBD_RegisterClass>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b696:	f7f6 fc21 	bl	8001edc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b69a:	490c      	ldr	r1, [pc, #48]	@ (800b6cc <MX_USB_DEVICE_Init+0x5c>)
 800b69c:	4809      	ldr	r0, [pc, #36]	@ (800b6c4 <MX_USB_DEVICE_Init+0x54>)
 800b69e:	f7fe feb5 	bl	800a40c <USBD_CDC_RegisterInterface>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6a8:	f7f6 fc18 	bl	8001edc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6ac:	4805      	ldr	r0, [pc, #20]	@ (800b6c4 <MX_USB_DEVICE_Init+0x54>)
 800b6ae:	f7fe ff8c 	bl	800a5ca <USBD_Start>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b6b8:	f7f6 fc10 	bl	8001edc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b6bc:	bf00      	nop
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	20000130 	.word	0x20000130
 800b6c4:	20000584 	.word	0x20000584
 800b6c8:	2000001c 	.word	0x2000001c
 800b6cc:	20000120 	.word	0x20000120

0800b6d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4905      	ldr	r1, [pc, #20]	@ (800b6ec <CDC_Init_FS+0x1c>)
 800b6d8:	4805      	ldr	r0, [pc, #20]	@ (800b6f0 <CDC_Init_FS+0x20>)
 800b6da:	f7fe fead 	bl	800a438 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6de:	4905      	ldr	r1, [pc, #20]	@ (800b6f4 <CDC_Init_FS+0x24>)
 800b6e0:	4803      	ldr	r0, [pc, #12]	@ (800b6f0 <CDC_Init_FS+0x20>)
 800b6e2:	f7fe fec2 	bl	800a46a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20000c48 	.word	0x20000c48
 800b6f0:	20000584 	.word	0x20000584
 800b6f4:	20000848 	.word	0x20000848

0800b6f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b6fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	46bd      	mov	sp, r7
 800b702:	bc80      	pop	{r7}
 800b704:	4770      	bx	lr
	...

0800b708 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	71fb      	strb	r3, [r7, #7]
 800b714:	4613      	mov	r3, r2
 800b716:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b718:	79fb      	ldrb	r3, [r7, #7]
 800b71a:	2b23      	cmp	r3, #35	@ 0x23
 800b71c:	d84a      	bhi.n	800b7b4 <CDC_Control_FS+0xac>
 800b71e:	a201      	add	r2, pc, #4	@ (adr r2, 800b724 <CDC_Control_FS+0x1c>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b7b5 	.word	0x0800b7b5
 800b728:	0800b7b5 	.word	0x0800b7b5
 800b72c:	0800b7b5 	.word	0x0800b7b5
 800b730:	0800b7b5 	.word	0x0800b7b5
 800b734:	0800b7b5 	.word	0x0800b7b5
 800b738:	0800b7b5 	.word	0x0800b7b5
 800b73c:	0800b7b5 	.word	0x0800b7b5
 800b740:	0800b7b5 	.word	0x0800b7b5
 800b744:	0800b7b5 	.word	0x0800b7b5
 800b748:	0800b7b5 	.word	0x0800b7b5
 800b74c:	0800b7b5 	.word	0x0800b7b5
 800b750:	0800b7b5 	.word	0x0800b7b5
 800b754:	0800b7b5 	.word	0x0800b7b5
 800b758:	0800b7b5 	.word	0x0800b7b5
 800b75c:	0800b7b5 	.word	0x0800b7b5
 800b760:	0800b7b5 	.word	0x0800b7b5
 800b764:	0800b7b5 	.word	0x0800b7b5
 800b768:	0800b7b5 	.word	0x0800b7b5
 800b76c:	0800b7b5 	.word	0x0800b7b5
 800b770:	0800b7b5 	.word	0x0800b7b5
 800b774:	0800b7b5 	.word	0x0800b7b5
 800b778:	0800b7b5 	.word	0x0800b7b5
 800b77c:	0800b7b5 	.word	0x0800b7b5
 800b780:	0800b7b5 	.word	0x0800b7b5
 800b784:	0800b7b5 	.word	0x0800b7b5
 800b788:	0800b7b5 	.word	0x0800b7b5
 800b78c:	0800b7b5 	.word	0x0800b7b5
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7b5 	.word	0x0800b7b5
 800b798:	0800b7b5 	.word	0x0800b7b5
 800b79c:	0800b7b5 	.word	0x0800b7b5
 800b7a0:	0800b7b5 	.word	0x0800b7b5
 800b7a4:	0800b7b5 	.word	0x0800b7b5
 800b7a8:	0800b7b5 	.word	0x0800b7b5
 800b7ac:	0800b7b5 	.word	0x0800b7b5
 800b7b0:	0800b7b5 	.word	0x0800b7b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7b4:	bf00      	nop
  }

  return (USBD_OK);
 800b7b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc80      	pop	{r7}
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop

0800b7c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7ce:	6879      	ldr	r1, [r7, #4]
 800b7d0:	480a      	ldr	r0, [pc, #40]	@ (800b7fc <CDC_Receive_FS+0x38>)
 800b7d2:	f7fe fe4a 	bl	800a46a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7d6:	4809      	ldr	r0, [pc, #36]	@ (800b7fc <CDC_Receive_FS+0x38>)
 800b7d8:	f7fe fe89 	bl	800a4ee <USBD_CDC_ReceivePacket>
  data_recieved += strlen(UserRxBufferFS);
 800b7dc:	4808      	ldr	r0, [pc, #32]	@ (800b800 <CDC_Receive_FS+0x3c>)
 800b7de:	f7f4 fcb7 	bl	8000150 <strlen>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	4b07      	ldr	r3, [pc, #28]	@ (800b804 <CDC_Receive_FS+0x40>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	4b05      	ldr	r3, [pc, #20]	@ (800b804 <CDC_Receive_FS+0x40>)
 800b7f0:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800b7f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	20000584 	.word	0x20000584
 800b800:	20000848 	.word	0x20000848
 800b804:	20001048 	.word	0x20001048

0800b808 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	460b      	mov	r3, r1
 800b812:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b818:	4b0d      	ldr	r3, [pc, #52]	@ (800b850 <CDC_Transmit_FS+0x48>)
 800b81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b81e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e00b      	b.n	800b846 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b82e:	887b      	ldrh	r3, [r7, #2]
 800b830:	461a      	mov	r2, r3
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	4806      	ldr	r0, [pc, #24]	@ (800b850 <CDC_Transmit_FS+0x48>)
 800b836:	f7fe fdff 	bl	800a438 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b83a:	4805      	ldr	r0, [pc, #20]	@ (800b850 <CDC_Transmit_FS+0x48>)
 800b83c:	f7fe fe28 	bl	800a490 <USBD_CDC_TransmitPacket>
 800b840:	4603      	mov	r3, r0
 800b842:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b844:	7bfb      	ldrb	r3, [r7, #15]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20000584 	.word	0x20000584

0800b854 <CDC_data_recieved>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_data_recieved()
{
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0
	return data_recieved;
 800b858:	4b02      	ldr	r3, [pc, #8]	@ (800b864 <CDC_data_recieved+0x10>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	46bd      	mov	sp, r7
 800b860:	bc80      	pop	{r7}
 800b862:	4770      	bx	lr
 800b864:	20001048 	.word	0x20001048

0800b868 <CDC_Receive_data>:

uint8_t CDC_Receive_data(uint8_t* buf, size_t size)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
	if (data_recieved + 1 <= size) size = data_recieved + 1;
 800b872:	4b13      	ldr	r3, [pc, #76]	@ (800b8c0 <CDC_Receive_data+0x58>)
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	3301      	adds	r3, #1
 800b878:	461a      	mov	r2, r3
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d303      	bcc.n	800b888 <CDC_Receive_data+0x20>
 800b880:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c0 <CDC_Receive_data+0x58>)
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	3301      	adds	r3, #1
 800b886:	603b      	str	r3, [r7, #0]
	memset(buf, '\0', size);
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	2100      	movs	r1, #0
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f001 fb04 	bl	800ce9a <memset>
	memcpy(buf, UserRxBufferFS, size);
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	490b      	ldr	r1, [pc, #44]	@ (800b8c4 <CDC_Receive_data+0x5c>)
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f001 fb8d 	bl	800cfb6 <memcpy>
	memset(UserRxBufferFS, '\0', data_recieved);
 800b89c:	4b08      	ldr	r3, [pc, #32]	@ (800b8c0 <CDC_Receive_data+0x58>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	4807      	ldr	r0, [pc, #28]	@ (800b8c4 <CDC_Receive_data+0x5c>)
 800b8a6:	f001 faf8 	bl	800ce9a <memset>
	data_recieved = 0;
 800b8aa:	4b05      	ldr	r3, [pc, #20]	@ (800b8c0 <CDC_Receive_data+0x58>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	701a      	strb	r2, [r3, #0]
	return size - 1;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	b2db      	uxtb	r3, r3
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	20001048 	.word	0x20001048
 800b8c4:	20000848 	.word	0x20000848

0800b8c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	6039      	str	r1, [r7, #0]
 800b8d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	2212      	movs	r2, #18
 800b8d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8da:	4b03      	ldr	r3, [pc, #12]	@ (800b8e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	2000014c 	.word	0x2000014c

0800b8ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	6039      	str	r1, [r7, #0]
 800b8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2204      	movs	r2, #4
 800b8fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8fe:	4b03      	ldr	r3, [pc, #12]	@ (800b90c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b900:	4618      	mov	r0, r3
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	bc80      	pop	{r7}
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	20000160 	.word	0x20000160

0800b910 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	4603      	mov	r3, r0
 800b918:	6039      	str	r1, [r7, #0]
 800b91a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b91c:	79fb      	ldrb	r3, [r7, #7]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d105      	bne.n	800b92e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	4907      	ldr	r1, [pc, #28]	@ (800b944 <USBD_FS_ProductStrDescriptor+0x34>)
 800b926:	4808      	ldr	r0, [pc, #32]	@ (800b948 <USBD_FS_ProductStrDescriptor+0x38>)
 800b928:	f7ff fdc5 	bl	800b4b6 <USBD_GetString>
 800b92c:	e004      	b.n	800b938 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	4904      	ldr	r1, [pc, #16]	@ (800b944 <USBD_FS_ProductStrDescriptor+0x34>)
 800b932:	4805      	ldr	r0, [pc, #20]	@ (800b948 <USBD_FS_ProductStrDescriptor+0x38>)
 800b934:	f7ff fdbf 	bl	800b4b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b938:	4b02      	ldr	r3, [pc, #8]	@ (800b944 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	2000104c 	.word	0x2000104c
 800b948:	0800fc08 	.word	0x0800fc08

0800b94c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	6039      	str	r1, [r7, #0]
 800b956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	4904      	ldr	r1, [pc, #16]	@ (800b96c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b95c:	4804      	ldr	r0, [pc, #16]	@ (800b970 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b95e:	f7ff fdaa 	bl	800b4b6 <USBD_GetString>
  return USBD_StrDesc;
 800b962:	4b02      	ldr	r3, [pc, #8]	@ (800b96c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	2000104c 	.word	0x2000104c
 800b970:	0800fc20 	.word	0x0800fc20

0800b974 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	4603      	mov	r3, r0
 800b97c:	6039      	str	r1, [r7, #0]
 800b97e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	221a      	movs	r2, #26
 800b984:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b986:	f000 f843 	bl	800ba10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b98a:	4b02      	ldr	r3, [pc, #8]	@ (800b994 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20000164 	.word	0x20000164

0800b998 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	6039      	str	r1, [r7, #0]
 800b9a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d105      	bne.n	800b9b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	4907      	ldr	r1, [pc, #28]	@ (800b9cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9ae:	4808      	ldr	r0, [pc, #32]	@ (800b9d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9b0:	f7ff fd81 	bl	800b4b6 <USBD_GetString>
 800b9b4:	e004      	b.n	800b9c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	4904      	ldr	r1, [pc, #16]	@ (800b9cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9ba:	4805      	ldr	r0, [pc, #20]	@ (800b9d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9bc:	f7ff fd7b 	bl	800b4b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9c0:	4b02      	ldr	r3, [pc, #8]	@ (800b9cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	2000104c 	.word	0x2000104c
 800b9d0:	0800fc34 	.word	0x0800fc34

0800b9d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	6039      	str	r1, [r7, #0]
 800b9de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d105      	bne.n	800b9f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	4907      	ldr	r1, [pc, #28]	@ (800ba08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9ea:	4808      	ldr	r0, [pc, #32]	@ (800ba0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9ec:	f7ff fd63 	bl	800b4b6 <USBD_GetString>
 800b9f0:	e004      	b.n	800b9fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	4904      	ldr	r1, [pc, #16]	@ (800ba08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9f6:	4805      	ldr	r0, [pc, #20]	@ (800ba0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9f8:	f7ff fd5d 	bl	800b4b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9fc:	4b02      	ldr	r3, [pc, #8]	@ (800ba08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	2000104c 	.word	0x2000104c
 800ba0c:	0800fc40 	.word	0x0800fc40

0800ba10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba16:	4b0f      	ldr	r3, [pc, #60]	@ (800ba54 <Get_SerialNum+0x44>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ba58 <Get_SerialNum+0x48>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba22:	4b0e      	ldr	r3, [pc, #56]	@ (800ba5c <Get_SerialNum+0x4c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba36:	2208      	movs	r2, #8
 800ba38:	4909      	ldr	r1, [pc, #36]	@ (800ba60 <Get_SerialNum+0x50>)
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f000 f814 	bl	800ba68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba40:	2204      	movs	r2, #4
 800ba42:	4908      	ldr	r1, [pc, #32]	@ (800ba64 <Get_SerialNum+0x54>)
 800ba44:	68b8      	ldr	r0, [r7, #8]
 800ba46:	f000 f80f 	bl	800ba68 <IntToUnicode>
  }
}
 800ba4a:	bf00      	nop
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	1ffff7e8 	.word	0x1ffff7e8
 800ba58:	1ffff7ec 	.word	0x1ffff7ec
 800ba5c:	1ffff7f0 	.word	0x1ffff7f0
 800ba60:	20000166 	.word	0x20000166
 800ba64:	20000176 	.word	0x20000176

0800ba68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b087      	sub	sp, #28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	4613      	mov	r3, r2
 800ba74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	75fb      	strb	r3, [r7, #23]
 800ba7e:	e027      	b.n	800bad0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	0f1b      	lsrs	r3, r3, #28
 800ba84:	2b09      	cmp	r3, #9
 800ba86:	d80b      	bhi.n	800baa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	0f1b      	lsrs	r3, r3, #28
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	005b      	lsls	r3, r3, #1
 800ba92:	4619      	mov	r1, r3
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	440b      	add	r3, r1
 800ba98:	3230      	adds	r2, #48	@ 0x30
 800ba9a:	b2d2      	uxtb	r2, r2
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	e00a      	b.n	800bab6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	0f1b      	lsrs	r3, r3, #28
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	7dfb      	ldrb	r3, [r7, #23]
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	4619      	mov	r1, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	440b      	add	r3, r1
 800bab0:	3237      	adds	r2, #55	@ 0x37
 800bab2:	b2d2      	uxtb	r2, r2
 800bab4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	011b      	lsls	r3, r3, #4
 800baba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	3301      	adds	r3, #1
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	4413      	add	r3, r2
 800bac6:	2200      	movs	r2, #0
 800bac8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	3301      	adds	r3, #1
 800bace:	75fb      	strb	r3, [r7, #23]
 800bad0:	7dfa      	ldrb	r2, [r7, #23]
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d3d3      	bcc.n	800ba80 <IntToUnicode+0x18>
  }
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	371c      	adds	r7, #28
 800bade:	46bd      	mov	sp, r7
 800bae0:	bc80      	pop	{r7}
 800bae2:	4770      	bx	lr

0800bae4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a0d      	ldr	r2, [pc, #52]	@ (800bb28 <HAL_PCD_MspInit+0x44>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d113      	bne.n	800bb1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800baf6:	4b0d      	ldr	r3, [pc, #52]	@ (800bb2c <HAL_PCD_MspInit+0x48>)
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	4a0c      	ldr	r2, [pc, #48]	@ (800bb2c <HAL_PCD_MspInit+0x48>)
 800bafc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bb00:	61d3      	str	r3, [r2, #28]
 800bb02:	4b0a      	ldr	r3, [pc, #40]	@ (800bb2c <HAL_PCD_MspInit+0x48>)
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2100      	movs	r1, #0
 800bb12:	2014      	movs	r0, #20
 800bb14:	f7f7 fae1 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bb18:	2014      	movs	r0, #20
 800bb1a:	f7f7 fafa 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb1e:	bf00      	nop
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	40005c00 	.word	0x40005c00
 800bb2c:	40021000 	.word	0x40021000

0800bb30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f7fe fd87 	bl	800a65a <USBD_LL_SetupStage>
}
 800bb4c:	bf00      	nop
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bb66:	78fa      	ldrb	r2, [r7, #3]
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	440b      	add	r3, r1
 800bb74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	78fb      	ldrb	r3, [r7, #3]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	f7fe fdb9 	bl	800a6f4 <USBD_LL_DataOutStage>
}
 800bb82:	bf00      	nop
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bb9c:	78fa      	ldrb	r2, [r7, #3]
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	4613      	mov	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	440b      	add	r3, r1
 800bbaa:	3324      	adds	r3, #36	@ 0x24
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	78fb      	ldrb	r3, [r7, #3]
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	f7fe fe10 	bl	800a7d6 <USBD_LL_DataInStage>
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe ff20 	bl	800aa12 <USBD_LL_SOF>
}
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	799b      	ldrb	r3, [r3, #6]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d001      	beq.n	800bbf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbee:	f7f6 f975 	bl	8001edc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbf8:	7bfa      	ldrb	r2, [r7, #15]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe fed0 	bl	800a9a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7fe fe89 	bl	800a920 <USBD_LL_Reset>
}
 800bc0e:	bf00      	nop
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe feca 	bl	800a9c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	7a9b      	ldrb	r3, [r3, #10]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d005      	beq.n	800bc40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc34:	4b04      	ldr	r3, [pc, #16]	@ (800bc48 <HAL_PCD_SuspendCallback+0x30>)
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	4a03      	ldr	r2, [pc, #12]	@ (800bc48 <HAL_PCD_SuspendCallback+0x30>)
 800bc3a:	f043 0306 	orr.w	r3, r3, #6
 800bc3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc40:	bf00      	nop
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	e000ed00 	.word	0xe000ed00

0800bc4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fec4 	bl	800a9e8 <USBD_LL_Resume>
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bc70:	4a28      	ldr	r2, [pc, #160]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a26      	ldr	r2, [pc, #152]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bc7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bc80:	4b24      	ldr	r3, [pc, #144]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bc82:	4a25      	ldr	r2, [pc, #148]	@ (800bd18 <USBD_LL_Init+0xb0>)
 800bc84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc86:	4b23      	ldr	r3, [pc, #140]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bc88:	2208      	movs	r2, #8
 800bc8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc8c:	4b21      	ldr	r3, [pc, #132]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bc8e:	2202      	movs	r2, #2
 800bc90:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc92:	4b20      	ldr	r3, [pc, #128]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc98:	4b1e      	ldr	r3, [pc, #120]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bca4:	481b      	ldr	r0, [pc, #108]	@ (800bd14 <USBD_LL_Init+0xac>)
 800bca6:	f7f7 fe81 	bl	80039ac <HAL_PCD_Init>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bcb0:	f7f6 f914 	bl	8001edc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bcba:	2318      	movs	r3, #24
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	f7f9 fb92 	bl	80053e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bcca:	2358      	movs	r3, #88	@ 0x58
 800bccc:	2200      	movs	r2, #0
 800bcce:	2180      	movs	r1, #128	@ 0x80
 800bcd0:	f7f9 fb8a 	bl	80053e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bcda:	23c0      	movs	r3, #192	@ 0xc0
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2181      	movs	r1, #129	@ 0x81
 800bce0:	f7f9 fb82 	bl	80053e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bcea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	f7f9 fb79 	bl	80053e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bcfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd00:	2200      	movs	r2, #0
 800bd02:	2182      	movs	r1, #130	@ 0x82
 800bd04:	f7f9 fb70 	bl	80053e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	2000124c 	.word	0x2000124c
 800bd18:	40005c00 	.word	0x40005c00

0800bd1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f7 ff30 	bl	8003b98 <HAL_PCD_Start>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 f94e 	bl	800bfe0 <USBD_Get_USB_Status>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4603      	mov	r3, r0
 800bd62:	70fb      	strb	r3, [r7, #3]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70bb      	strb	r3, [r7, #2]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bd7a:	78bb      	ldrb	r3, [r7, #2]
 800bd7c:	883a      	ldrh	r2, [r7, #0]
 800bd7e:	78f9      	ldrb	r1, [r7, #3]
 800bd80:	f7f8 f884 	bl	8003e8c <HAL_PCD_EP_Open>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 f928 	bl	800bfe0 <USBD_Get_USB_Status>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	460b      	mov	r3, r1
 800bda8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bdb8:	78fa      	ldrb	r2, [r7, #3]
 800bdba:	4611      	mov	r1, r2
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7f8 f8c2 	bl	8003f46 <HAL_PCD_EP_Close>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 f909 	bl	800bfe0 <USBD_Get_USB_Status>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bdf6:	78fa      	ldrb	r2, [r7, #3]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7f8 f96a 	bl	80040d4 <HAL_PCD_EP_SetStall>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f8ea 	bl	800bfe0 <USBD_Get_USB_Status>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be10:	7bbb      	ldrb	r3, [r7, #14]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800be34:	78fa      	ldrb	r2, [r7, #3]
 800be36:	4611      	mov	r1, r2
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f8 f9ab 	bl	8004194 <HAL_PCD_EP_ClrStall>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	4618      	mov	r0, r3
 800be46:	f000 f8cb 	bl	800bfe0 <USBD_Get_USB_Status>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800be6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be70:	2b00      	cmp	r3, #0
 800be72:	da0b      	bge.n	800be8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	4613      	mov	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	440b      	add	r3, r1
 800be86:	3312      	adds	r3, #18
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	e00b      	b.n	800bea4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be8c:	78fb      	ldrb	r3, [r7, #3]
 800be8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be92:	68f9      	ldr	r1, [r7, #12]
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	440b      	add	r3, r1
 800be9e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800bea2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bc80      	pop	{r7}
 800beac:	4770      	bx	lr

0800beae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	460b      	mov	r3, r1
 800beb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bec8:	78fa      	ldrb	r2, [r7, #3]
 800beca:	4611      	mov	r1, r2
 800becc:	4618      	mov	r0, r3
 800bece:	f7f7 ffb9 	bl	8003e44 <HAL_PCD_SetAddress>
 800bed2:	4603      	mov	r3, r0
 800bed4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 f881 	bl	800bfe0 <USBD_Get_USB_Status>
 800bede:	4603      	mov	r3, r0
 800bee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	607a      	str	r2, [r7, #4]
 800bef6:	461a      	mov	r2, r3
 800bef8:	460b      	mov	r3, r1
 800befa:	72fb      	strb	r3, [r7, #11]
 800befc:	4613      	mov	r3, r2
 800befe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf0e:	893b      	ldrh	r3, [r7, #8]
 800bf10:	7af9      	ldrb	r1, [r7, #11]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	f7f8 f8a7 	bl	8004066 <HAL_PCD_EP_Transmit>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 f85e 	bl	800bfe0 <USBD_Get_USB_Status>
 800bf24:	4603      	mov	r3, r0
 800bf26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf28:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b086      	sub	sp, #24
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	460b      	mov	r3, r1
 800bf40:	72fb      	strb	r3, [r7, #11]
 800bf42:	4613      	mov	r3, r2
 800bf44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf54:	893b      	ldrh	r3, [r7, #8]
 800bf56:	7af9      	ldrb	r1, [r7, #11]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	f7f8 f83c 	bl	8003fd6 <HAL_PCD_EP_Receive>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 f83b 	bl	800bfe0 <USBD_Get_USB_Status>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bf8a:	78fa      	ldrb	r2, [r7, #3]
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7f8 f852 	bl	8004038 <HAL_PCD_EP_GetRxCount>
 800bf94:	4603      	mov	r3, r0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfa8:	4b02      	ldr	r3, [pc, #8]	@ (800bfb4 <USBD_static_malloc+0x14>)
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bc80      	pop	{r7}
 800bfb2:	4770      	bx	lr
 800bfb4:	20001524 	.word	0x20001524

0800bfb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]

}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bc80      	pop	{r7}
 800bfc8:	4770      	bx	lr

0800bfca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfca:	b480      	push	{r7}
 800bfcc:	b083      	sub	sp, #12
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bfd6:	bf00      	nop
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr

0800bfe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	2b03      	cmp	r3, #3
 800bff2:	d817      	bhi.n	800c024 <USBD_Get_USB_Status+0x44>
 800bff4:	a201      	add	r2, pc, #4	@ (adr r2, 800bffc <USBD_Get_USB_Status+0x1c>)
 800bff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffa:	bf00      	nop
 800bffc:	0800c00d 	.word	0x0800c00d
 800c000:	0800c013 	.word	0x0800c013
 800c004:	0800c019 	.word	0x0800c019
 800c008:	0800c01f 	.word	0x0800c01f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
    break;
 800c010:	e00b      	b.n	800c02a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c012:	2302      	movs	r3, #2
 800c014:	73fb      	strb	r3, [r7, #15]
    break;
 800c016:	e008      	b.n	800c02a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c018:	2301      	movs	r3, #1
 800c01a:	73fb      	strb	r3, [r7, #15]
    break;
 800c01c:	e005      	b.n	800c02a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c01e:	2302      	movs	r3, #2
 800c020:	73fb      	strb	r3, [r7, #15]
    break;
 800c022:	e002      	b.n	800c02a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c024:	2302      	movs	r3, #2
 800c026:	73fb      	strb	r3, [r7, #15]
    break;
 800c028:	bf00      	nop
  }
  return usb_status;
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	bc80      	pop	{r7}
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop

0800c038 <atof>:
 800c038:	2100      	movs	r1, #0
 800c03a:	f000 bdf9 	b.w	800cc30 <strtod>

0800c03e <sulp>:
 800c03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c042:	460f      	mov	r7, r1
 800c044:	4690      	mov	r8, r2
 800c046:	f001 ff79 	bl	800df3c <__ulp>
 800c04a:	4604      	mov	r4, r0
 800c04c:	460d      	mov	r5, r1
 800c04e:	f1b8 0f00 	cmp.w	r8, #0
 800c052:	d011      	beq.n	800c078 <sulp+0x3a>
 800c054:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dd0b      	ble.n	800c078 <sulp+0x3a>
 800c060:	2400      	movs	r4, #0
 800c062:	051b      	lsls	r3, r3, #20
 800c064:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c068:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c06c:	4622      	mov	r2, r4
 800c06e:	462b      	mov	r3, r5
 800c070:	f7f4 fa32 	bl	80004d8 <__aeabi_dmul>
 800c074:	4604      	mov	r4, r0
 800c076:	460d      	mov	r5, r1
 800c078:	4620      	mov	r0, r4
 800c07a:	4629      	mov	r1, r5
 800c07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c080 <_strtod_l>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	b09f      	sub	sp, #124	@ 0x7c
 800c086:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c088:	2200      	movs	r2, #0
 800c08a:	460c      	mov	r4, r1
 800c08c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c08e:	f04f 0a00 	mov.w	sl, #0
 800c092:	f04f 0b00 	mov.w	fp, #0
 800c096:	460a      	mov	r2, r1
 800c098:	9005      	str	r0, [sp, #20]
 800c09a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c09c:	7811      	ldrb	r1, [r2, #0]
 800c09e:	292b      	cmp	r1, #43	@ 0x2b
 800c0a0:	d048      	beq.n	800c134 <_strtod_l+0xb4>
 800c0a2:	d836      	bhi.n	800c112 <_strtod_l+0x92>
 800c0a4:	290d      	cmp	r1, #13
 800c0a6:	d830      	bhi.n	800c10a <_strtod_l+0x8a>
 800c0a8:	2908      	cmp	r1, #8
 800c0aa:	d830      	bhi.n	800c10e <_strtod_l+0x8e>
 800c0ac:	2900      	cmp	r1, #0
 800c0ae:	d039      	beq.n	800c124 <_strtod_l+0xa4>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c0b6:	782a      	ldrb	r2, [r5, #0]
 800c0b8:	2a30      	cmp	r2, #48	@ 0x30
 800c0ba:	f040 80b0 	bne.w	800c21e <_strtod_l+0x19e>
 800c0be:	786a      	ldrb	r2, [r5, #1]
 800c0c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c0c4:	2a58      	cmp	r2, #88	@ 0x58
 800c0c6:	d16c      	bne.n	800c1a2 <_strtod_l+0x122>
 800c0c8:	9302      	str	r3, [sp, #8]
 800c0ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0cc:	4a8f      	ldr	r2, [pc, #572]	@ (800c30c <_strtod_l+0x28c>)
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	ab1a      	add	r3, sp, #104	@ 0x68
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	9805      	ldr	r0, [sp, #20]
 800c0d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c0d8:	a919      	add	r1, sp, #100	@ 0x64
 800c0da:	f001 f831 	bl	800d140 <__gethex>
 800c0de:	f010 060f 	ands.w	r6, r0, #15
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	d005      	beq.n	800c0f2 <_strtod_l+0x72>
 800c0e6:	2e06      	cmp	r6, #6
 800c0e8:	d126      	bne.n	800c138 <_strtod_l+0xb8>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	3501      	adds	r5, #1
 800c0ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800c0f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c0f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f040 8582 	bne.w	800cbfe <_strtod_l+0xb7e>
 800c0fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0fc:	b1bb      	cbz	r3, 800c12e <_strtod_l+0xae>
 800c0fe:	4650      	mov	r0, sl
 800c100:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c104:	b01f      	add	sp, #124	@ 0x7c
 800c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10a:	2920      	cmp	r1, #32
 800c10c:	d1d0      	bne.n	800c0b0 <_strtod_l+0x30>
 800c10e:	3201      	adds	r2, #1
 800c110:	e7c3      	b.n	800c09a <_strtod_l+0x1a>
 800c112:	292d      	cmp	r1, #45	@ 0x2d
 800c114:	d1cc      	bne.n	800c0b0 <_strtod_l+0x30>
 800c116:	2101      	movs	r1, #1
 800c118:	910e      	str	r1, [sp, #56]	@ 0x38
 800c11a:	1c51      	adds	r1, r2, #1
 800c11c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c11e:	7852      	ldrb	r2, [r2, #1]
 800c120:	2a00      	cmp	r2, #0
 800c122:	d1c7      	bne.n	800c0b4 <_strtod_l+0x34>
 800c124:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c126:	9419      	str	r4, [sp, #100]	@ 0x64
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f040 8566 	bne.w	800cbfa <_strtod_l+0xb7a>
 800c12e:	4650      	mov	r0, sl
 800c130:	4659      	mov	r1, fp
 800c132:	e7e7      	b.n	800c104 <_strtod_l+0x84>
 800c134:	2100      	movs	r1, #0
 800c136:	e7ef      	b.n	800c118 <_strtod_l+0x98>
 800c138:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c13a:	b13a      	cbz	r2, 800c14c <_strtod_l+0xcc>
 800c13c:	2135      	movs	r1, #53	@ 0x35
 800c13e:	a81c      	add	r0, sp, #112	@ 0x70
 800c140:	f002 f808 	bl	800e154 <__copybits>
 800c144:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c146:	9805      	ldr	r0, [sp, #20]
 800c148:	f001 fbcc 	bl	800d8e4 <_Bfree>
 800c14c:	3e01      	subs	r6, #1
 800c14e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c150:	2e04      	cmp	r6, #4
 800c152:	d806      	bhi.n	800c162 <_strtod_l+0xe2>
 800c154:	e8df f006 	tbb	[pc, r6]
 800c158:	201d0314 	.word	0x201d0314
 800c15c:	14          	.byte	0x14
 800c15d:	00          	.byte	0x00
 800c15e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c162:	05e1      	lsls	r1, r4, #23
 800c164:	bf48      	it	mi
 800c166:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c16a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c16e:	0d1b      	lsrs	r3, r3, #20
 800c170:	051b      	lsls	r3, r3, #20
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1bd      	bne.n	800c0f2 <_strtod_l+0x72>
 800c176:	f000 fef1 	bl	800cf5c <__errno>
 800c17a:	2322      	movs	r3, #34	@ 0x22
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	e7b8      	b.n	800c0f2 <_strtod_l+0x72>
 800c180:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c184:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c188:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c18c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c190:	e7e7      	b.n	800c162 <_strtod_l+0xe2>
 800c192:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c310 <_strtod_l+0x290>
 800c196:	e7e4      	b.n	800c162 <_strtod_l+0xe2>
 800c198:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c19c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c1a0:	e7df      	b.n	800c162 <_strtod_l+0xe2>
 800c1a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1a8:	785b      	ldrb	r3, [r3, #1]
 800c1aa:	2b30      	cmp	r3, #48	@ 0x30
 800c1ac:	d0f9      	beq.n	800c1a2 <_strtod_l+0x122>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d09f      	beq.n	800c0f2 <_strtod_l+0x72>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	2700      	movs	r7, #0
 800c1b6:	220a      	movs	r2, #10
 800c1b8:	46b9      	mov	r9, r7
 800c1ba:	9308      	str	r3, [sp, #32]
 800c1bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1be:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c1c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1c2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c1c4:	7805      	ldrb	r5, [r0, #0]
 800c1c6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c1ca:	b2d9      	uxtb	r1, r3
 800c1cc:	2909      	cmp	r1, #9
 800c1ce:	d928      	bls.n	800c222 <_strtod_l+0x1a2>
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	4950      	ldr	r1, [pc, #320]	@ (800c314 <_strtod_l+0x294>)
 800c1d4:	f000 fe69 	bl	800ceaa <strncmp>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d032      	beq.n	800c242 <_strtod_l+0x1c2>
 800c1dc:	2000      	movs	r0, #0
 800c1de:	462a      	mov	r2, r5
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	464d      	mov	r5, r9
 800c1e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c1e6:	2a65      	cmp	r2, #101	@ 0x65
 800c1e8:	d001      	beq.n	800c1ee <_strtod_l+0x16e>
 800c1ea:	2a45      	cmp	r2, #69	@ 0x45
 800c1ec:	d114      	bne.n	800c218 <_strtod_l+0x198>
 800c1ee:	b91d      	cbnz	r5, 800c1f8 <_strtod_l+0x178>
 800c1f0:	9a08      	ldr	r2, [sp, #32]
 800c1f2:	4302      	orrs	r2, r0
 800c1f4:	d096      	beq.n	800c124 <_strtod_l+0xa4>
 800c1f6:	2500      	movs	r5, #0
 800c1f8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c1fa:	1c62      	adds	r2, r4, #1
 800c1fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1fe:	7862      	ldrb	r2, [r4, #1]
 800c200:	2a2b      	cmp	r2, #43	@ 0x2b
 800c202:	d07a      	beq.n	800c2fa <_strtod_l+0x27a>
 800c204:	2a2d      	cmp	r2, #45	@ 0x2d
 800c206:	d07e      	beq.n	800c306 <_strtod_l+0x286>
 800c208:	f04f 0c00 	mov.w	ip, #0
 800c20c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c210:	2909      	cmp	r1, #9
 800c212:	f240 8085 	bls.w	800c320 <_strtod_l+0x2a0>
 800c216:	9419      	str	r4, [sp, #100]	@ 0x64
 800c218:	f04f 0800 	mov.w	r8, #0
 800c21c:	e0a5      	b.n	800c36a <_strtod_l+0x2ea>
 800c21e:	2300      	movs	r3, #0
 800c220:	e7c8      	b.n	800c1b4 <_strtod_l+0x134>
 800c222:	f1b9 0f08 	cmp.w	r9, #8
 800c226:	bfd8      	it	le
 800c228:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c22a:	f100 0001 	add.w	r0, r0, #1
 800c22e:	bfd6      	itet	le
 800c230:	fb02 3301 	mlale	r3, r2, r1, r3
 800c234:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c238:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c23a:	f109 0901 	add.w	r9, r9, #1
 800c23e:	9019      	str	r0, [sp, #100]	@ 0x64
 800c240:	e7bf      	b.n	800c1c2 <_strtod_l+0x142>
 800c242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c244:	1c5a      	adds	r2, r3, #1
 800c246:	9219      	str	r2, [sp, #100]	@ 0x64
 800c248:	785a      	ldrb	r2, [r3, #1]
 800c24a:	f1b9 0f00 	cmp.w	r9, #0
 800c24e:	d03b      	beq.n	800c2c8 <_strtod_l+0x248>
 800c250:	464d      	mov	r5, r9
 800c252:	900a      	str	r0, [sp, #40]	@ 0x28
 800c254:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c258:	2b09      	cmp	r3, #9
 800c25a:	d912      	bls.n	800c282 <_strtod_l+0x202>
 800c25c:	2301      	movs	r3, #1
 800c25e:	e7c2      	b.n	800c1e6 <_strtod_l+0x166>
 800c260:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c262:	3001      	adds	r0, #1
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	9219      	str	r2, [sp, #100]	@ 0x64
 800c268:	785a      	ldrb	r2, [r3, #1]
 800c26a:	2a30      	cmp	r2, #48	@ 0x30
 800c26c:	d0f8      	beq.n	800c260 <_strtod_l+0x1e0>
 800c26e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c272:	2b08      	cmp	r3, #8
 800c274:	f200 84c8 	bhi.w	800cc08 <_strtod_l+0xb88>
 800c278:	900a      	str	r0, [sp, #40]	@ 0x28
 800c27a:	2000      	movs	r0, #0
 800c27c:	4605      	mov	r5, r0
 800c27e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c280:	930c      	str	r3, [sp, #48]	@ 0x30
 800c282:	3a30      	subs	r2, #48	@ 0x30
 800c284:	f100 0301 	add.w	r3, r0, #1
 800c288:	d018      	beq.n	800c2bc <_strtod_l+0x23c>
 800c28a:	462e      	mov	r6, r5
 800c28c:	f04f 0e0a 	mov.w	lr, #10
 800c290:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c292:	4419      	add	r1, r3
 800c294:	910a      	str	r1, [sp, #40]	@ 0x28
 800c296:	1c71      	adds	r1, r6, #1
 800c298:	eba1 0c05 	sub.w	ip, r1, r5
 800c29c:	4563      	cmp	r3, ip
 800c29e:	dc15      	bgt.n	800c2cc <_strtod_l+0x24c>
 800c2a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c2a4:	182b      	adds	r3, r5, r0
 800c2a6:	2b08      	cmp	r3, #8
 800c2a8:	f105 0501 	add.w	r5, r5, #1
 800c2ac:	4405      	add	r5, r0
 800c2ae:	dc1a      	bgt.n	800c2e6 <_strtod_l+0x266>
 800c2b0:	230a      	movs	r3, #10
 800c2b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2b4:	fb03 2301 	mla	r3, r3, r1, r2
 800c2b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c2be:	4618      	mov	r0, r3
 800c2c0:	1c51      	adds	r1, r2, #1
 800c2c2:	9119      	str	r1, [sp, #100]	@ 0x64
 800c2c4:	7852      	ldrb	r2, [r2, #1]
 800c2c6:	e7c5      	b.n	800c254 <_strtod_l+0x1d4>
 800c2c8:	4648      	mov	r0, r9
 800c2ca:	e7ce      	b.n	800c26a <_strtod_l+0x1ea>
 800c2cc:	2e08      	cmp	r6, #8
 800c2ce:	dc05      	bgt.n	800c2dc <_strtod_l+0x25c>
 800c2d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c2d2:	fb0e f606 	mul.w	r6, lr, r6
 800c2d6:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c2d8:	460e      	mov	r6, r1
 800c2da:	e7dc      	b.n	800c296 <_strtod_l+0x216>
 800c2dc:	2910      	cmp	r1, #16
 800c2de:	bfd8      	it	le
 800c2e0:	fb0e f707 	mulle.w	r7, lr, r7
 800c2e4:	e7f8      	b.n	800c2d8 <_strtod_l+0x258>
 800c2e6:	2b0f      	cmp	r3, #15
 800c2e8:	bfdc      	itt	le
 800c2ea:	230a      	movle	r3, #10
 800c2ec:	fb03 2707 	mlale	r7, r3, r7, r2
 800c2f0:	e7e3      	b.n	800c2ba <_strtod_l+0x23a>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e77a      	b.n	800c1f0 <_strtod_l+0x170>
 800c2fa:	f04f 0c00 	mov.w	ip, #0
 800c2fe:	1ca2      	adds	r2, r4, #2
 800c300:	9219      	str	r2, [sp, #100]	@ 0x64
 800c302:	78a2      	ldrb	r2, [r4, #2]
 800c304:	e782      	b.n	800c20c <_strtod_l+0x18c>
 800c306:	f04f 0c01 	mov.w	ip, #1
 800c30a:	e7f8      	b.n	800c2fe <_strtod_l+0x27e>
 800c30c:	0800fe6c 	.word	0x0800fe6c
 800c310:	7ff00000 	.word	0x7ff00000
 800c314:	0800fc8e 	.word	0x0800fc8e
 800c318:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c31a:	1c51      	adds	r1, r2, #1
 800c31c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c31e:	7852      	ldrb	r2, [r2, #1]
 800c320:	2a30      	cmp	r2, #48	@ 0x30
 800c322:	d0f9      	beq.n	800c318 <_strtod_l+0x298>
 800c324:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c328:	2908      	cmp	r1, #8
 800c32a:	f63f af75 	bhi.w	800c218 <_strtod_l+0x198>
 800c32e:	f04f 080a 	mov.w	r8, #10
 800c332:	3a30      	subs	r2, #48	@ 0x30
 800c334:	9209      	str	r2, [sp, #36]	@ 0x24
 800c336:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c338:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c33a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c33c:	1c56      	adds	r6, r2, #1
 800c33e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c340:	7852      	ldrb	r2, [r2, #1]
 800c342:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c346:	f1be 0f09 	cmp.w	lr, #9
 800c34a:	d939      	bls.n	800c3c0 <_strtod_l+0x340>
 800c34c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c34e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c352:	1a76      	subs	r6, r6, r1
 800c354:	2e08      	cmp	r6, #8
 800c356:	dc03      	bgt.n	800c360 <_strtod_l+0x2e0>
 800c358:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c35a:	4588      	cmp	r8, r1
 800c35c:	bfa8      	it	ge
 800c35e:	4688      	movge	r8, r1
 800c360:	f1bc 0f00 	cmp.w	ip, #0
 800c364:	d001      	beq.n	800c36a <_strtod_l+0x2ea>
 800c366:	f1c8 0800 	rsb	r8, r8, #0
 800c36a:	2d00      	cmp	r5, #0
 800c36c:	d14e      	bne.n	800c40c <_strtod_l+0x38c>
 800c36e:	9908      	ldr	r1, [sp, #32]
 800c370:	4308      	orrs	r0, r1
 800c372:	f47f aebe 	bne.w	800c0f2 <_strtod_l+0x72>
 800c376:	2b00      	cmp	r3, #0
 800c378:	f47f aed4 	bne.w	800c124 <_strtod_l+0xa4>
 800c37c:	2a69      	cmp	r2, #105	@ 0x69
 800c37e:	d028      	beq.n	800c3d2 <_strtod_l+0x352>
 800c380:	dc25      	bgt.n	800c3ce <_strtod_l+0x34e>
 800c382:	2a49      	cmp	r2, #73	@ 0x49
 800c384:	d025      	beq.n	800c3d2 <_strtod_l+0x352>
 800c386:	2a4e      	cmp	r2, #78	@ 0x4e
 800c388:	f47f aecc 	bne.w	800c124 <_strtod_l+0xa4>
 800c38c:	4999      	ldr	r1, [pc, #612]	@ (800c5f4 <_strtod_l+0x574>)
 800c38e:	a819      	add	r0, sp, #100	@ 0x64
 800c390:	f001 f8f8 	bl	800d584 <__match>
 800c394:	2800      	cmp	r0, #0
 800c396:	f43f aec5 	beq.w	800c124 <_strtod_l+0xa4>
 800c39a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b28      	cmp	r3, #40	@ 0x28
 800c3a0:	d12e      	bne.n	800c400 <_strtod_l+0x380>
 800c3a2:	4995      	ldr	r1, [pc, #596]	@ (800c5f8 <_strtod_l+0x578>)
 800c3a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c3a6:	a819      	add	r0, sp, #100	@ 0x64
 800c3a8:	f001 f900 	bl	800d5ac <__hexnan>
 800c3ac:	2805      	cmp	r0, #5
 800c3ae:	d127      	bne.n	800c400 <_strtod_l+0x380>
 800c3b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c3b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c3b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c3ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c3be:	e698      	b.n	800c0f2 <_strtod_l+0x72>
 800c3c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3c2:	fb08 2101 	mla	r1, r8, r1, r2
 800c3c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c3ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3cc:	e7b5      	b.n	800c33a <_strtod_l+0x2ba>
 800c3ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800c3d0:	e7da      	b.n	800c388 <_strtod_l+0x308>
 800c3d2:	498a      	ldr	r1, [pc, #552]	@ (800c5fc <_strtod_l+0x57c>)
 800c3d4:	a819      	add	r0, sp, #100	@ 0x64
 800c3d6:	f001 f8d5 	bl	800d584 <__match>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	f43f aea2 	beq.w	800c124 <_strtod_l+0xa4>
 800c3e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3e2:	4987      	ldr	r1, [pc, #540]	@ (800c600 <_strtod_l+0x580>)
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	a819      	add	r0, sp, #100	@ 0x64
 800c3e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c3ea:	f001 f8cb 	bl	800d584 <__match>
 800c3ee:	b910      	cbnz	r0, 800c3f6 <_strtod_l+0x376>
 800c3f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c3f6:	f04f 0a00 	mov.w	sl, #0
 800c3fa:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800c604 <_strtod_l+0x584>
 800c3fe:	e678      	b.n	800c0f2 <_strtod_l+0x72>
 800c400:	4881      	ldr	r0, [pc, #516]	@ (800c608 <_strtod_l+0x588>)
 800c402:	f000 fde7 	bl	800cfd4 <nan>
 800c406:	4682      	mov	sl, r0
 800c408:	468b      	mov	fp, r1
 800c40a:	e672      	b.n	800c0f2 <_strtod_l+0x72>
 800c40c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c40e:	f1b9 0f00 	cmp.w	r9, #0
 800c412:	bf08      	it	eq
 800c414:	46a9      	moveq	r9, r5
 800c416:	eba8 0303 	sub.w	r3, r8, r3
 800c41a:	2d10      	cmp	r5, #16
 800c41c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c41e:	462c      	mov	r4, r5
 800c420:	9309      	str	r3, [sp, #36]	@ 0x24
 800c422:	bfa8      	it	ge
 800c424:	2410      	movge	r4, #16
 800c426:	f7f3 ffdd 	bl	80003e4 <__aeabi_ui2d>
 800c42a:	2d09      	cmp	r5, #9
 800c42c:	4682      	mov	sl, r0
 800c42e:	468b      	mov	fp, r1
 800c430:	dc11      	bgt.n	800c456 <_strtod_l+0x3d6>
 800c432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c434:	2b00      	cmp	r3, #0
 800c436:	f43f ae5c 	beq.w	800c0f2 <_strtod_l+0x72>
 800c43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c43c:	dd76      	ble.n	800c52c <_strtod_l+0x4ac>
 800c43e:	2b16      	cmp	r3, #22
 800c440:	dc5d      	bgt.n	800c4fe <_strtod_l+0x47e>
 800c442:	4972      	ldr	r1, [pc, #456]	@ (800c60c <_strtod_l+0x58c>)
 800c444:	4652      	mov	r2, sl
 800c446:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c44a:	465b      	mov	r3, fp
 800c44c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c450:	f7f4 f842 	bl	80004d8 <__aeabi_dmul>
 800c454:	e7d7      	b.n	800c406 <_strtod_l+0x386>
 800c456:	4b6d      	ldr	r3, [pc, #436]	@ (800c60c <_strtod_l+0x58c>)
 800c458:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c45c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c460:	f7f4 f83a 	bl	80004d8 <__aeabi_dmul>
 800c464:	4682      	mov	sl, r0
 800c466:	4638      	mov	r0, r7
 800c468:	468b      	mov	fp, r1
 800c46a:	f7f3 ffbb 	bl	80003e4 <__aeabi_ui2d>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	4650      	mov	r0, sl
 800c474:	4659      	mov	r1, fp
 800c476:	f7f3 fe79 	bl	800016c <__adddf3>
 800c47a:	2d0f      	cmp	r5, #15
 800c47c:	4682      	mov	sl, r0
 800c47e:	468b      	mov	fp, r1
 800c480:	ddd7      	ble.n	800c432 <_strtod_l+0x3b2>
 800c482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c484:	1b2c      	subs	r4, r5, r4
 800c486:	441c      	add	r4, r3
 800c488:	2c00      	cmp	r4, #0
 800c48a:	f340 8093 	ble.w	800c5b4 <_strtod_l+0x534>
 800c48e:	f014 030f 	ands.w	r3, r4, #15
 800c492:	d00a      	beq.n	800c4aa <_strtod_l+0x42a>
 800c494:	495d      	ldr	r1, [pc, #372]	@ (800c60c <_strtod_l+0x58c>)
 800c496:	4652      	mov	r2, sl
 800c498:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a0:	465b      	mov	r3, fp
 800c4a2:	f7f4 f819 	bl	80004d8 <__aeabi_dmul>
 800c4a6:	4682      	mov	sl, r0
 800c4a8:	468b      	mov	fp, r1
 800c4aa:	f034 040f 	bics.w	r4, r4, #15
 800c4ae:	d073      	beq.n	800c598 <_strtod_l+0x518>
 800c4b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c4b4:	dd49      	ble.n	800c54a <_strtod_l+0x4ca>
 800c4b6:	2400      	movs	r4, #0
 800c4b8:	46a0      	mov	r8, r4
 800c4ba:	46a1      	mov	r9, r4
 800c4bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c4be:	2322      	movs	r3, #34	@ 0x22
 800c4c0:	f04f 0a00 	mov.w	sl, #0
 800c4c4:	9a05      	ldr	r2, [sp, #20]
 800c4c6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800c604 <_strtod_l+0x584>
 800c4ca:	6013      	str	r3, [r2, #0]
 800c4cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f43f ae0f 	beq.w	800c0f2 <_strtod_l+0x72>
 800c4d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4d6:	9805      	ldr	r0, [sp, #20]
 800c4d8:	f001 fa04 	bl	800d8e4 <_Bfree>
 800c4dc:	4649      	mov	r1, r9
 800c4de:	9805      	ldr	r0, [sp, #20]
 800c4e0:	f001 fa00 	bl	800d8e4 <_Bfree>
 800c4e4:	4641      	mov	r1, r8
 800c4e6:	9805      	ldr	r0, [sp, #20]
 800c4e8:	f001 f9fc 	bl	800d8e4 <_Bfree>
 800c4ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4ee:	9805      	ldr	r0, [sp, #20]
 800c4f0:	f001 f9f8 	bl	800d8e4 <_Bfree>
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	9805      	ldr	r0, [sp, #20]
 800c4f8:	f001 f9f4 	bl	800d8e4 <_Bfree>
 800c4fc:	e5f9      	b.n	800c0f2 <_strtod_l+0x72>
 800c4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c500:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c504:	4293      	cmp	r3, r2
 800c506:	dbbc      	blt.n	800c482 <_strtod_l+0x402>
 800c508:	4c40      	ldr	r4, [pc, #256]	@ (800c60c <_strtod_l+0x58c>)
 800c50a:	f1c5 050f 	rsb	r5, r5, #15
 800c50e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c512:	4652      	mov	r2, sl
 800c514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c518:	465b      	mov	r3, fp
 800c51a:	f7f3 ffdd 	bl	80004d8 <__aeabi_dmul>
 800c51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c520:	1b5d      	subs	r5, r3, r5
 800c522:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c526:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c52a:	e791      	b.n	800c450 <_strtod_l+0x3d0>
 800c52c:	3316      	adds	r3, #22
 800c52e:	dba8      	blt.n	800c482 <_strtod_l+0x402>
 800c530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c532:	4650      	mov	r0, sl
 800c534:	eba3 0808 	sub.w	r8, r3, r8
 800c538:	4b34      	ldr	r3, [pc, #208]	@ (800c60c <_strtod_l+0x58c>)
 800c53a:	4659      	mov	r1, fp
 800c53c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c540:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c544:	f7f4 f8f2 	bl	800072c <__aeabi_ddiv>
 800c548:	e75d      	b.n	800c406 <_strtod_l+0x386>
 800c54a:	2300      	movs	r3, #0
 800c54c:	4650      	mov	r0, sl
 800c54e:	4659      	mov	r1, fp
 800c550:	461e      	mov	r6, r3
 800c552:	4f2f      	ldr	r7, [pc, #188]	@ (800c610 <_strtod_l+0x590>)
 800c554:	1124      	asrs	r4, r4, #4
 800c556:	2c01      	cmp	r4, #1
 800c558:	dc21      	bgt.n	800c59e <_strtod_l+0x51e>
 800c55a:	b10b      	cbz	r3, 800c560 <_strtod_l+0x4e0>
 800c55c:	4682      	mov	sl, r0
 800c55e:	468b      	mov	fp, r1
 800c560:	492b      	ldr	r1, [pc, #172]	@ (800c610 <_strtod_l+0x590>)
 800c562:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c566:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c56a:	4652      	mov	r2, sl
 800c56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c570:	465b      	mov	r3, fp
 800c572:	f7f3 ffb1 	bl	80004d8 <__aeabi_dmul>
 800c576:	4b23      	ldr	r3, [pc, #140]	@ (800c604 <_strtod_l+0x584>)
 800c578:	460a      	mov	r2, r1
 800c57a:	400b      	ands	r3, r1
 800c57c:	4925      	ldr	r1, [pc, #148]	@ (800c614 <_strtod_l+0x594>)
 800c57e:	4682      	mov	sl, r0
 800c580:	428b      	cmp	r3, r1
 800c582:	d898      	bhi.n	800c4b6 <_strtod_l+0x436>
 800c584:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c588:	428b      	cmp	r3, r1
 800c58a:	bf86      	itte	hi
 800c58c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800c590:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800c618 <_strtod_l+0x598>
 800c594:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c598:	2300      	movs	r3, #0
 800c59a:	9308      	str	r3, [sp, #32]
 800c59c:	e076      	b.n	800c68c <_strtod_l+0x60c>
 800c59e:	07e2      	lsls	r2, r4, #31
 800c5a0:	d504      	bpl.n	800c5ac <_strtod_l+0x52c>
 800c5a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5a6:	f7f3 ff97 	bl	80004d8 <__aeabi_dmul>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	3601      	adds	r6, #1
 800c5ae:	1064      	asrs	r4, r4, #1
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	e7d0      	b.n	800c556 <_strtod_l+0x4d6>
 800c5b4:	d0f0      	beq.n	800c598 <_strtod_l+0x518>
 800c5b6:	4264      	negs	r4, r4
 800c5b8:	f014 020f 	ands.w	r2, r4, #15
 800c5bc:	d00a      	beq.n	800c5d4 <_strtod_l+0x554>
 800c5be:	4b13      	ldr	r3, [pc, #76]	@ (800c60c <_strtod_l+0x58c>)
 800c5c0:	4650      	mov	r0, sl
 800c5c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5c6:	4659      	mov	r1, fp
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f4 f8ae 	bl	800072c <__aeabi_ddiv>
 800c5d0:	4682      	mov	sl, r0
 800c5d2:	468b      	mov	fp, r1
 800c5d4:	1124      	asrs	r4, r4, #4
 800c5d6:	d0df      	beq.n	800c598 <_strtod_l+0x518>
 800c5d8:	2c1f      	cmp	r4, #31
 800c5da:	dd1f      	ble.n	800c61c <_strtod_l+0x59c>
 800c5dc:	2400      	movs	r4, #0
 800c5de:	46a0      	mov	r8, r4
 800c5e0:	46a1      	mov	r9, r4
 800c5e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c5e4:	2322      	movs	r3, #34	@ 0x22
 800c5e6:	9a05      	ldr	r2, [sp, #20]
 800c5e8:	f04f 0a00 	mov.w	sl, #0
 800c5ec:	f04f 0b00 	mov.w	fp, #0
 800c5f0:	6013      	str	r3, [r2, #0]
 800c5f2:	e76b      	b.n	800c4cc <_strtod_l+0x44c>
 800c5f4:	0800fc93 	.word	0x0800fc93
 800c5f8:	0800fe58 	.word	0x0800fe58
 800c5fc:	0800fc90 	.word	0x0800fc90
 800c600:	0800fdbe 	.word	0x0800fdbe
 800c604:	7ff00000 	.word	0x7ff00000
 800c608:	0800fdba 	.word	0x0800fdba
 800c60c:	0800fee0 	.word	0x0800fee0
 800c610:	0800feb8 	.word	0x0800feb8
 800c614:	7ca00000 	.word	0x7ca00000
 800c618:	7fefffff 	.word	0x7fefffff
 800c61c:	f014 0310 	ands.w	r3, r4, #16
 800c620:	bf18      	it	ne
 800c622:	236a      	movne	r3, #106	@ 0x6a
 800c624:	4650      	mov	r0, sl
 800c626:	9308      	str	r3, [sp, #32]
 800c628:	4659      	mov	r1, fp
 800c62a:	2300      	movs	r3, #0
 800c62c:	4e77      	ldr	r6, [pc, #476]	@ (800c80c <_strtod_l+0x78c>)
 800c62e:	07e7      	lsls	r7, r4, #31
 800c630:	d504      	bpl.n	800c63c <_strtod_l+0x5bc>
 800c632:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c636:	f7f3 ff4f 	bl	80004d8 <__aeabi_dmul>
 800c63a:	2301      	movs	r3, #1
 800c63c:	1064      	asrs	r4, r4, #1
 800c63e:	f106 0608 	add.w	r6, r6, #8
 800c642:	d1f4      	bne.n	800c62e <_strtod_l+0x5ae>
 800c644:	b10b      	cbz	r3, 800c64a <_strtod_l+0x5ca>
 800c646:	4682      	mov	sl, r0
 800c648:	468b      	mov	fp, r1
 800c64a:	9b08      	ldr	r3, [sp, #32]
 800c64c:	b1b3      	cbz	r3, 800c67c <_strtod_l+0x5fc>
 800c64e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c652:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c656:	2b00      	cmp	r3, #0
 800c658:	4659      	mov	r1, fp
 800c65a:	dd0f      	ble.n	800c67c <_strtod_l+0x5fc>
 800c65c:	2b1f      	cmp	r3, #31
 800c65e:	dd58      	ble.n	800c712 <_strtod_l+0x692>
 800c660:	2b34      	cmp	r3, #52	@ 0x34
 800c662:	bfd8      	it	le
 800c664:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800c668:	f04f 0a00 	mov.w	sl, #0
 800c66c:	bfcf      	iteee	gt
 800c66e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c672:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c676:	4093      	lslle	r3, r2
 800c678:	ea03 0b01 	andle.w	fp, r3, r1
 800c67c:	2200      	movs	r2, #0
 800c67e:	2300      	movs	r3, #0
 800c680:	4650      	mov	r0, sl
 800c682:	4659      	mov	r1, fp
 800c684:	f7f4 f990 	bl	80009a8 <__aeabi_dcmpeq>
 800c688:	2800      	cmp	r0, #0
 800c68a:	d1a7      	bne.n	800c5dc <_strtod_l+0x55c>
 800c68c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c68e:	464a      	mov	r2, r9
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c694:	462b      	mov	r3, r5
 800c696:	9805      	ldr	r0, [sp, #20]
 800c698:	f001 f98c 	bl	800d9b4 <__s2b>
 800c69c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	f43f af09 	beq.w	800c4b6 <_strtod_l+0x436>
 800c6a4:	2400      	movs	r4, #0
 800c6a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6aa:	2a00      	cmp	r2, #0
 800c6ac:	eba3 0308 	sub.w	r3, r3, r8
 800c6b0:	bfa8      	it	ge
 800c6b2:	2300      	movge	r3, #0
 800c6b4:	46a0      	mov	r8, r4
 800c6b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c6b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c6bc:	9316      	str	r3, [sp, #88]	@ 0x58
 800c6be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6c0:	9805      	ldr	r0, [sp, #20]
 800c6c2:	6859      	ldr	r1, [r3, #4]
 800c6c4:	f001 f8ce 	bl	800d864 <_Balloc>
 800c6c8:	4681      	mov	r9, r0
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	f43f aef7 	beq.w	800c4be <_strtod_l+0x43e>
 800c6d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6d2:	300c      	adds	r0, #12
 800c6d4:	691a      	ldr	r2, [r3, #16]
 800c6d6:	f103 010c 	add.w	r1, r3, #12
 800c6da:	3202      	adds	r2, #2
 800c6dc:	0092      	lsls	r2, r2, #2
 800c6de:	f000 fc6a 	bl	800cfb6 <memcpy>
 800c6e2:	ab1c      	add	r3, sp, #112	@ 0x70
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	4652      	mov	r2, sl
 800c6ec:	465b      	mov	r3, fp
 800c6ee:	9805      	ldr	r0, [sp, #20]
 800c6f0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c6f4:	f001 fc8a 	bl	800e00c <__d2b>
 800c6f8:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	f43f aedf 	beq.w	800c4be <_strtod_l+0x43e>
 800c700:	2101      	movs	r1, #1
 800c702:	9805      	ldr	r0, [sp, #20]
 800c704:	f001 f9ec 	bl	800dae0 <__i2b>
 800c708:	4680      	mov	r8, r0
 800c70a:	b948      	cbnz	r0, 800c720 <_strtod_l+0x6a0>
 800c70c:	f04f 0800 	mov.w	r8, #0
 800c710:	e6d5      	b.n	800c4be <_strtod_l+0x43e>
 800c712:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c716:	fa02 f303 	lsl.w	r3, r2, r3
 800c71a:	ea03 0a0a 	and.w	sl, r3, sl
 800c71e:	e7ad      	b.n	800c67c <_strtod_l+0x5fc>
 800c720:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c722:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c724:	2d00      	cmp	r5, #0
 800c726:	bfab      	itete	ge
 800c728:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c72a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c72c:	18ef      	addge	r7, r5, r3
 800c72e:	1b5e      	sublt	r6, r3, r5
 800c730:	9b08      	ldr	r3, [sp, #32]
 800c732:	bfa8      	it	ge
 800c734:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c736:	eba5 0503 	sub.w	r5, r5, r3
 800c73a:	4415      	add	r5, r2
 800c73c:	4b34      	ldr	r3, [pc, #208]	@ (800c810 <_strtod_l+0x790>)
 800c73e:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800c742:	bfb8      	it	lt
 800c744:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c746:	429d      	cmp	r5, r3
 800c748:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c74c:	da50      	bge.n	800c7f0 <_strtod_l+0x770>
 800c74e:	1b5b      	subs	r3, r3, r5
 800c750:	2b1f      	cmp	r3, #31
 800c752:	f04f 0101 	mov.w	r1, #1
 800c756:	eba2 0203 	sub.w	r2, r2, r3
 800c75a:	dc3d      	bgt.n	800c7d8 <_strtod_l+0x758>
 800c75c:	fa01 f303 	lsl.w	r3, r1, r3
 800c760:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c762:	2300      	movs	r3, #0
 800c764:	9310      	str	r3, [sp, #64]	@ 0x40
 800c766:	18bd      	adds	r5, r7, r2
 800c768:	9b08      	ldr	r3, [sp, #32]
 800c76a:	42af      	cmp	r7, r5
 800c76c:	4416      	add	r6, r2
 800c76e:	441e      	add	r6, r3
 800c770:	463b      	mov	r3, r7
 800c772:	bfa8      	it	ge
 800c774:	462b      	movge	r3, r5
 800c776:	42b3      	cmp	r3, r6
 800c778:	bfa8      	it	ge
 800c77a:	4633      	movge	r3, r6
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	bfc2      	ittt	gt
 800c780:	1aed      	subgt	r5, r5, r3
 800c782:	1af6      	subgt	r6, r6, r3
 800c784:	1aff      	subgt	r7, r7, r3
 800c786:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c788:	2b00      	cmp	r3, #0
 800c78a:	dd16      	ble.n	800c7ba <_strtod_l+0x73a>
 800c78c:	4641      	mov	r1, r8
 800c78e:	461a      	mov	r2, r3
 800c790:	9805      	ldr	r0, [sp, #20]
 800c792:	f001 fa5d 	bl	800dc50 <__pow5mult>
 800c796:	4680      	mov	r8, r0
 800c798:	2800      	cmp	r0, #0
 800c79a:	d0b7      	beq.n	800c70c <_strtod_l+0x68c>
 800c79c:	4601      	mov	r1, r0
 800c79e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c7a0:	9805      	ldr	r0, [sp, #20]
 800c7a2:	f001 f9b3 	bl	800db0c <__multiply>
 800c7a6:	900a      	str	r0, [sp, #40]	@ 0x28
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	f43f ae88 	beq.w	800c4be <_strtod_l+0x43e>
 800c7ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7b0:	9805      	ldr	r0, [sp, #20]
 800c7b2:	f001 f897 	bl	800d8e4 <_Bfree>
 800c7b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7ba:	2d00      	cmp	r5, #0
 800c7bc:	dc1d      	bgt.n	800c7fa <_strtod_l+0x77a>
 800c7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	dd27      	ble.n	800c814 <_strtod_l+0x794>
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c7c8:	9805      	ldr	r0, [sp, #20]
 800c7ca:	f001 fa41 	bl	800dc50 <__pow5mult>
 800c7ce:	4681      	mov	r9, r0
 800c7d0:	bb00      	cbnz	r0, 800c814 <_strtod_l+0x794>
 800c7d2:	f04f 0900 	mov.w	r9, #0
 800c7d6:	e672      	b.n	800c4be <_strtod_l+0x43e>
 800c7d8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c7dc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c7e0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c7e4:	35e2      	adds	r5, #226	@ 0xe2
 800c7e6:	fa01 f305 	lsl.w	r3, r1, r5
 800c7ea:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7ec:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c7ee:	e7ba      	b.n	800c766 <_strtod_l+0x6e6>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7f8:	e7b5      	b.n	800c766 <_strtod_l+0x6e6>
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7fe:	9805      	ldr	r0, [sp, #20]
 800c800:	f001 fa80 	bl	800dd04 <__lshift>
 800c804:	901a      	str	r0, [sp, #104]	@ 0x68
 800c806:	2800      	cmp	r0, #0
 800c808:	d1d9      	bne.n	800c7be <_strtod_l+0x73e>
 800c80a:	e658      	b.n	800c4be <_strtod_l+0x43e>
 800c80c:	0800fe80 	.word	0x0800fe80
 800c810:	fffffc02 	.word	0xfffffc02
 800c814:	2e00      	cmp	r6, #0
 800c816:	dd07      	ble.n	800c828 <_strtod_l+0x7a8>
 800c818:	4649      	mov	r1, r9
 800c81a:	4632      	mov	r2, r6
 800c81c:	9805      	ldr	r0, [sp, #20]
 800c81e:	f001 fa71 	bl	800dd04 <__lshift>
 800c822:	4681      	mov	r9, r0
 800c824:	2800      	cmp	r0, #0
 800c826:	d0d4      	beq.n	800c7d2 <_strtod_l+0x752>
 800c828:	2f00      	cmp	r7, #0
 800c82a:	dd08      	ble.n	800c83e <_strtod_l+0x7be>
 800c82c:	4641      	mov	r1, r8
 800c82e:	463a      	mov	r2, r7
 800c830:	9805      	ldr	r0, [sp, #20]
 800c832:	f001 fa67 	bl	800dd04 <__lshift>
 800c836:	4680      	mov	r8, r0
 800c838:	2800      	cmp	r0, #0
 800c83a:	f43f ae40 	beq.w	800c4be <_strtod_l+0x43e>
 800c83e:	464a      	mov	r2, r9
 800c840:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c842:	9805      	ldr	r0, [sp, #20]
 800c844:	f001 fae6 	bl	800de14 <__mdiff>
 800c848:	4604      	mov	r4, r0
 800c84a:	2800      	cmp	r0, #0
 800c84c:	f43f ae37 	beq.w	800c4be <_strtod_l+0x43e>
 800c850:	68c3      	ldr	r3, [r0, #12]
 800c852:	4641      	mov	r1, r8
 800c854:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c856:	2300      	movs	r3, #0
 800c858:	60c3      	str	r3, [r0, #12]
 800c85a:	f001 fabf 	bl	800dddc <__mcmp>
 800c85e:	2800      	cmp	r0, #0
 800c860:	da3d      	bge.n	800c8de <_strtod_l+0x85e>
 800c862:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c864:	ea53 030a 	orrs.w	r3, r3, sl
 800c868:	d163      	bne.n	800c932 <_strtod_l+0x8b2>
 800c86a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d15f      	bne.n	800c932 <_strtod_l+0x8b2>
 800c872:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c876:	0d1b      	lsrs	r3, r3, #20
 800c878:	051b      	lsls	r3, r3, #20
 800c87a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c87e:	d958      	bls.n	800c932 <_strtod_l+0x8b2>
 800c880:	6963      	ldr	r3, [r4, #20]
 800c882:	b913      	cbnz	r3, 800c88a <_strtod_l+0x80a>
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	2b01      	cmp	r3, #1
 800c888:	dd53      	ble.n	800c932 <_strtod_l+0x8b2>
 800c88a:	4621      	mov	r1, r4
 800c88c:	2201      	movs	r2, #1
 800c88e:	9805      	ldr	r0, [sp, #20]
 800c890:	f001 fa38 	bl	800dd04 <__lshift>
 800c894:	4641      	mov	r1, r8
 800c896:	4604      	mov	r4, r0
 800c898:	f001 faa0 	bl	800dddc <__mcmp>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	dd48      	ble.n	800c932 <_strtod_l+0x8b2>
 800c8a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8a4:	9a08      	ldr	r2, [sp, #32]
 800c8a6:	0d1b      	lsrs	r3, r3, #20
 800c8a8:	051b      	lsls	r3, r3, #20
 800c8aa:	2a00      	cmp	r2, #0
 800c8ac:	d062      	beq.n	800c974 <_strtod_l+0x8f4>
 800c8ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8b2:	d85f      	bhi.n	800c974 <_strtod_l+0x8f4>
 800c8b4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c8b8:	f67f ae94 	bls.w	800c5e4 <_strtod_l+0x564>
 800c8bc:	4650      	mov	r0, sl
 800c8be:	4659      	mov	r1, fp
 800c8c0:	4ba3      	ldr	r3, [pc, #652]	@ (800cb50 <_strtod_l+0xad0>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f7f3 fe08 	bl	80004d8 <__aeabi_dmul>
 800c8c8:	4ba2      	ldr	r3, [pc, #648]	@ (800cb54 <_strtod_l+0xad4>)
 800c8ca:	4682      	mov	sl, r0
 800c8cc:	400b      	ands	r3, r1
 800c8ce:	468b      	mov	fp, r1
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f47f adff 	bne.w	800c4d4 <_strtod_l+0x454>
 800c8d6:	2322      	movs	r3, #34	@ 0x22
 800c8d8:	9a05      	ldr	r2, [sp, #20]
 800c8da:	6013      	str	r3, [r2, #0]
 800c8dc:	e5fa      	b.n	800c4d4 <_strtod_l+0x454>
 800c8de:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c8e2:	d165      	bne.n	800c9b0 <_strtod_l+0x930>
 800c8e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c8e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8ea:	b35a      	cbz	r2, 800c944 <_strtod_l+0x8c4>
 800c8ec:	4a9a      	ldr	r2, [pc, #616]	@ (800cb58 <_strtod_l+0xad8>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d12b      	bne.n	800c94a <_strtod_l+0x8ca>
 800c8f2:	9b08      	ldr	r3, [sp, #32]
 800c8f4:	4651      	mov	r1, sl
 800c8f6:	b303      	cbz	r3, 800c93a <_strtod_l+0x8ba>
 800c8f8:	465a      	mov	r2, fp
 800c8fa:	4b96      	ldr	r3, [pc, #600]	@ (800cb54 <_strtod_l+0xad4>)
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c902:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c906:	d81b      	bhi.n	800c940 <_strtod_l+0x8c0>
 800c908:	0d1b      	lsrs	r3, r3, #20
 800c90a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c90e:	fa02 f303 	lsl.w	r3, r2, r3
 800c912:	4299      	cmp	r1, r3
 800c914:	d119      	bne.n	800c94a <_strtod_l+0x8ca>
 800c916:	4b91      	ldr	r3, [pc, #580]	@ (800cb5c <_strtod_l+0xadc>)
 800c918:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d102      	bne.n	800c924 <_strtod_l+0x8a4>
 800c91e:	3101      	adds	r1, #1
 800c920:	f43f adcd 	beq.w	800c4be <_strtod_l+0x43e>
 800c924:	f04f 0a00 	mov.w	sl, #0
 800c928:	4b8a      	ldr	r3, [pc, #552]	@ (800cb54 <_strtod_l+0xad4>)
 800c92a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c92c:	401a      	ands	r2, r3
 800c92e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c932:	9b08      	ldr	r3, [sp, #32]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1c1      	bne.n	800c8bc <_strtod_l+0x83c>
 800c938:	e5cc      	b.n	800c4d4 <_strtod_l+0x454>
 800c93a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c93e:	e7e8      	b.n	800c912 <_strtod_l+0x892>
 800c940:	4613      	mov	r3, r2
 800c942:	e7e6      	b.n	800c912 <_strtod_l+0x892>
 800c944:	ea53 030a 	orrs.w	r3, r3, sl
 800c948:	d0aa      	beq.n	800c8a0 <_strtod_l+0x820>
 800c94a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c94c:	b1db      	cbz	r3, 800c986 <_strtod_l+0x906>
 800c94e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c950:	4213      	tst	r3, r2
 800c952:	d0ee      	beq.n	800c932 <_strtod_l+0x8b2>
 800c954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c956:	4650      	mov	r0, sl
 800c958:	4659      	mov	r1, fp
 800c95a:	9a08      	ldr	r2, [sp, #32]
 800c95c:	b1bb      	cbz	r3, 800c98e <_strtod_l+0x90e>
 800c95e:	f7ff fb6e 	bl	800c03e <sulp>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c96a:	f7f3 fbff 	bl	800016c <__adddf3>
 800c96e:	4682      	mov	sl, r0
 800c970:	468b      	mov	fp, r1
 800c972:	e7de      	b.n	800c932 <_strtod_l+0x8b2>
 800c974:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c978:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c97c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c980:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c984:	e7d5      	b.n	800c932 <_strtod_l+0x8b2>
 800c986:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c988:	ea13 0f0a 	tst.w	r3, sl
 800c98c:	e7e1      	b.n	800c952 <_strtod_l+0x8d2>
 800c98e:	f7ff fb56 	bl	800c03e <sulp>
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c99a:	f7f3 fbe5 	bl	8000168 <__aeabi_dsub>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4682      	mov	sl, r0
 800c9a4:	468b      	mov	fp, r1
 800c9a6:	f7f3 ffff 	bl	80009a8 <__aeabi_dcmpeq>
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d0c1      	beq.n	800c932 <_strtod_l+0x8b2>
 800c9ae:	e619      	b.n	800c5e4 <_strtod_l+0x564>
 800c9b0:	4641      	mov	r1, r8
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f001 fb82 	bl	800e0bc <__ratio>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460f      	mov	r7, r1
 800c9c2:	f7f4 f805 	bl	80009d0 <__aeabi_dcmple>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d06d      	beq.n	800caa6 <_strtod_l+0xa26>
 800c9ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d178      	bne.n	800cac2 <_strtod_l+0xa42>
 800c9d0:	f1ba 0f00 	cmp.w	sl, #0
 800c9d4:	d156      	bne.n	800ca84 <_strtod_l+0xa04>
 800c9d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d158      	bne.n	800ca92 <_strtod_l+0xa12>
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	4b5e      	ldr	r3, [pc, #376]	@ (800cb60 <_strtod_l+0xae0>)
 800c9e8:	f7f3 ffe8 	bl	80009bc <__aeabi_dcmplt>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d157      	bne.n	800caa0 <_strtod_l+0xa20>
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	4639      	mov	r1, r7
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4b5b      	ldr	r3, [pc, #364]	@ (800cb64 <_strtod_l+0xae4>)
 800c9f8:	f7f3 fd6e 	bl	80004d8 <__aeabi_dmul>
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	460f      	mov	r7, r1
 800ca00:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca04:	9606      	str	r6, [sp, #24]
 800ca06:	9307      	str	r3, [sp, #28]
 800ca08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca0c:	4d51      	ldr	r5, [pc, #324]	@ (800cb54 <_strtod_l+0xad4>)
 800ca0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca14:	401d      	ands	r5, r3
 800ca16:	4b54      	ldr	r3, [pc, #336]	@ (800cb68 <_strtod_l+0xae8>)
 800ca18:	429d      	cmp	r5, r3
 800ca1a:	f040 80ab 	bne.w	800cb74 <_strtod_l+0xaf4>
 800ca1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca20:	4650      	mov	r0, sl
 800ca22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ca26:	4659      	mov	r1, fp
 800ca28:	f001 fa88 	bl	800df3c <__ulp>
 800ca2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca30:	f7f3 fd52 	bl	80004d8 <__aeabi_dmul>
 800ca34:	4652      	mov	r2, sl
 800ca36:	465b      	mov	r3, fp
 800ca38:	f7f3 fb98 	bl	800016c <__adddf3>
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4945      	ldr	r1, [pc, #276]	@ (800cb54 <_strtod_l+0xad4>)
 800ca40:	4a4a      	ldr	r2, [pc, #296]	@ (800cb6c <_strtod_l+0xaec>)
 800ca42:	4019      	ands	r1, r3
 800ca44:	4291      	cmp	r1, r2
 800ca46:	4682      	mov	sl, r0
 800ca48:	d942      	bls.n	800cad0 <_strtod_l+0xa50>
 800ca4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca4c:	4b43      	ldr	r3, [pc, #268]	@ (800cb5c <_strtod_l+0xadc>)
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d103      	bne.n	800ca5a <_strtod_l+0x9da>
 800ca52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca54:	3301      	adds	r3, #1
 800ca56:	f43f ad32 	beq.w	800c4be <_strtod_l+0x43e>
 800ca5a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ca5e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800cb5c <_strtod_l+0xadc>
 800ca62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca64:	9805      	ldr	r0, [sp, #20]
 800ca66:	f000 ff3d 	bl	800d8e4 <_Bfree>
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	9805      	ldr	r0, [sp, #20]
 800ca6e:	f000 ff39 	bl	800d8e4 <_Bfree>
 800ca72:	4641      	mov	r1, r8
 800ca74:	9805      	ldr	r0, [sp, #20]
 800ca76:	f000 ff35 	bl	800d8e4 <_Bfree>
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	9805      	ldr	r0, [sp, #20]
 800ca7e:	f000 ff31 	bl	800d8e4 <_Bfree>
 800ca82:	e61c      	b.n	800c6be <_strtod_l+0x63e>
 800ca84:	f1ba 0f01 	cmp.w	sl, #1
 800ca88:	d103      	bne.n	800ca92 <_strtod_l+0xa12>
 800ca8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f43f ada9 	beq.w	800c5e4 <_strtod_l+0x564>
 800ca92:	2200      	movs	r2, #0
 800ca94:	4b36      	ldr	r3, [pc, #216]	@ (800cb70 <_strtod_l+0xaf0>)
 800ca96:	2600      	movs	r6, #0
 800ca98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ca9c:	4f30      	ldr	r7, [pc, #192]	@ (800cb60 <_strtod_l+0xae0>)
 800ca9e:	e7b3      	b.n	800ca08 <_strtod_l+0x988>
 800caa0:	2600      	movs	r6, #0
 800caa2:	4f30      	ldr	r7, [pc, #192]	@ (800cb64 <_strtod_l+0xae4>)
 800caa4:	e7ac      	b.n	800ca00 <_strtod_l+0x980>
 800caa6:	4630      	mov	r0, r6
 800caa8:	4639      	mov	r1, r7
 800caaa:	4b2e      	ldr	r3, [pc, #184]	@ (800cb64 <_strtod_l+0xae4>)
 800caac:	2200      	movs	r2, #0
 800caae:	f7f3 fd13 	bl	80004d8 <__aeabi_dmul>
 800cab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0a1      	beq.n	800ca00 <_strtod_l+0x980>
 800cabc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cac0:	e7a2      	b.n	800ca08 <_strtod_l+0x988>
 800cac2:	2200      	movs	r2, #0
 800cac4:	4b26      	ldr	r3, [pc, #152]	@ (800cb60 <_strtod_l+0xae0>)
 800cac6:	4616      	mov	r6, r2
 800cac8:	461f      	mov	r7, r3
 800caca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cace:	e79b      	b.n	800ca08 <_strtod_l+0x988>
 800cad0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cad4:	9b08      	ldr	r3, [sp, #32]
 800cad6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1c1      	bne.n	800ca62 <_strtod_l+0x9e2>
 800cade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cae2:	0d1b      	lsrs	r3, r3, #20
 800cae4:	051b      	lsls	r3, r3, #20
 800cae6:	429d      	cmp	r5, r3
 800cae8:	d1bb      	bne.n	800ca62 <_strtod_l+0x9e2>
 800caea:	4630      	mov	r0, r6
 800caec:	4639      	mov	r1, r7
 800caee:	f7f4 fb3f 	bl	8001170 <__aeabi_d2lz>
 800caf2:	f7f3 fcc3 	bl	800047c <__aeabi_l2d>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	4630      	mov	r0, r6
 800cafc:	4639      	mov	r1, r7
 800cafe:	f7f3 fb33 	bl	8000168 <__aeabi_dsub>
 800cb02:	460b      	mov	r3, r1
 800cb04:	4602      	mov	r2, r0
 800cb06:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cb0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb10:	ea46 060a 	orr.w	r6, r6, sl
 800cb14:	431e      	orrs	r6, r3
 800cb16:	d06a      	beq.n	800cbee <_strtod_l+0xb6e>
 800cb18:	a309      	add	r3, pc, #36	@ (adr r3, 800cb40 <_strtod_l+0xac0>)
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	f7f3 ff4d 	bl	80009bc <__aeabi_dcmplt>
 800cb22:	2800      	cmp	r0, #0
 800cb24:	f47f acd6 	bne.w	800c4d4 <_strtod_l+0x454>
 800cb28:	a307      	add	r3, pc, #28	@ (adr r3, 800cb48 <_strtod_l+0xac8>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb32:	f7f3 ff61 	bl	80009f8 <__aeabi_dcmpgt>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d093      	beq.n	800ca62 <_strtod_l+0x9e2>
 800cb3a:	e4cb      	b.n	800c4d4 <_strtod_l+0x454>
 800cb3c:	f3af 8000 	nop.w
 800cb40:	94a03595 	.word	0x94a03595
 800cb44:	3fdfffff 	.word	0x3fdfffff
 800cb48:	35afe535 	.word	0x35afe535
 800cb4c:	3fe00000 	.word	0x3fe00000
 800cb50:	39500000 	.word	0x39500000
 800cb54:	7ff00000 	.word	0x7ff00000
 800cb58:	000fffff 	.word	0x000fffff
 800cb5c:	7fefffff 	.word	0x7fefffff
 800cb60:	3ff00000 	.word	0x3ff00000
 800cb64:	3fe00000 	.word	0x3fe00000
 800cb68:	7fe00000 	.word	0x7fe00000
 800cb6c:	7c9fffff 	.word	0x7c9fffff
 800cb70:	bff00000 	.word	0xbff00000
 800cb74:	9b08      	ldr	r3, [sp, #32]
 800cb76:	b323      	cbz	r3, 800cbc2 <_strtod_l+0xb42>
 800cb78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cb7c:	d821      	bhi.n	800cbc2 <_strtod_l+0xb42>
 800cb7e:	a328      	add	r3, pc, #160	@ (adr r3, 800cc20 <_strtod_l+0xba0>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	4630      	mov	r0, r6
 800cb86:	4639      	mov	r1, r7
 800cb88:	f7f3 ff22 	bl	80009d0 <__aeabi_dcmple>
 800cb8c:	b1a0      	cbz	r0, 800cbb8 <_strtod_l+0xb38>
 800cb8e:	4639      	mov	r1, r7
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7f3 ff63 	bl	8000a5c <__aeabi_d2uiz>
 800cb96:	2801      	cmp	r0, #1
 800cb98:	bf38      	it	cc
 800cb9a:	2001      	movcc	r0, #1
 800cb9c:	f7f3 fc22 	bl	80003e4 <__aeabi_ui2d>
 800cba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cba2:	4606      	mov	r6, r0
 800cba4:	460f      	mov	r7, r1
 800cba6:	b9fb      	cbnz	r3, 800cbe8 <_strtod_l+0xb68>
 800cba8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cbac:	9014      	str	r0, [sp, #80]	@ 0x50
 800cbae:	9315      	str	r3, [sp, #84]	@ 0x54
 800cbb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cbb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cbb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cbba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cbbe:	1b5b      	subs	r3, r3, r5
 800cbc0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cbc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cbca:	f001 f9b7 	bl	800df3c <__ulp>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4650      	mov	r0, sl
 800cbd4:	4659      	mov	r1, fp
 800cbd6:	f7f3 fc7f 	bl	80004d8 <__aeabi_dmul>
 800cbda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cbde:	f7f3 fac5 	bl	800016c <__adddf3>
 800cbe2:	4682      	mov	sl, r0
 800cbe4:	468b      	mov	fp, r1
 800cbe6:	e775      	b.n	800cad4 <_strtod_l+0xa54>
 800cbe8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cbec:	e7e0      	b.n	800cbb0 <_strtod_l+0xb30>
 800cbee:	a30e      	add	r3, pc, #56	@ (adr r3, 800cc28 <_strtod_l+0xba8>)
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	f7f3 fee2 	bl	80009bc <__aeabi_dcmplt>
 800cbf8:	e79d      	b.n	800cb36 <_strtod_l+0xab6>
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	930e      	str	r3, [sp, #56]	@ 0x38
 800cbfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc00:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cc02:	6013      	str	r3, [r2, #0]
 800cc04:	f7ff ba79 	b.w	800c0fa <_strtod_l+0x7a>
 800cc08:	2a65      	cmp	r2, #101	@ 0x65
 800cc0a:	f43f ab72 	beq.w	800c2f2 <_strtod_l+0x272>
 800cc0e:	2a45      	cmp	r2, #69	@ 0x45
 800cc10:	f43f ab6f 	beq.w	800c2f2 <_strtod_l+0x272>
 800cc14:	2301      	movs	r3, #1
 800cc16:	f7ff bbaa 	b.w	800c36e <_strtod_l+0x2ee>
 800cc1a:	bf00      	nop
 800cc1c:	f3af 8000 	nop.w
 800cc20:	ffc00000 	.word	0xffc00000
 800cc24:	41dfffff 	.word	0x41dfffff
 800cc28:	94a03595 	.word	0x94a03595
 800cc2c:	3fcfffff 	.word	0x3fcfffff

0800cc30 <strtod>:
 800cc30:	460a      	mov	r2, r1
 800cc32:	4601      	mov	r1, r0
 800cc34:	4802      	ldr	r0, [pc, #8]	@ (800cc40 <strtod+0x10>)
 800cc36:	4b03      	ldr	r3, [pc, #12]	@ (800cc44 <strtod+0x14>)
 800cc38:	6800      	ldr	r0, [r0, #0]
 800cc3a:	f7ff ba21 	b.w	800c080 <_strtod_l>
 800cc3e:	bf00      	nop
 800cc40:	200002f8 	.word	0x200002f8
 800cc44:	2000018c 	.word	0x2000018c

0800cc48 <gcvt>:
 800cc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc4a:	461c      	mov	r4, r3
 800cc4c:	4615      	mov	r5, r2
 800cc4e:	2300      	movs	r3, #0
 800cc50:	2200      	movs	r2, #0
 800cc52:	b085      	sub	sp, #20
 800cc54:	4606      	mov	r6, r0
 800cc56:	460f      	mov	r7, r1
 800cc58:	f7f3 feb0 	bl	80009bc <__aeabi_dcmplt>
 800cc5c:	4623      	mov	r3, r4
 800cc5e:	b118      	cbz	r0, 800cc68 <gcvt+0x20>
 800cc60:	222d      	movs	r2, #45	@ 0x2d
 800cc62:	3d01      	subs	r5, #1
 800cc64:	f803 2b01 	strb.w	r2, [r3], #1
 800cc68:	2267      	movs	r2, #103	@ 0x67
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	e9cd 5300 	strd	r5, r3, [sp]
 800cc70:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cc74:	4905      	ldr	r1, [pc, #20]	@ (800cc8c <gcvt+0x44>)
 800cc76:	4632      	mov	r2, r6
 800cc78:	463b      	mov	r3, r7
 800cc7a:	6808      	ldr	r0, [r1, #0]
 800cc7c:	f001 fb34 	bl	800e2e8 <_gcvt>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	bf18      	it	ne
 800cc84:	4620      	movne	r0, r4
 800cc86:	b005      	add	sp, #20
 800cc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	200002f8 	.word	0x200002f8

0800cc90 <std>:
 800cc90:	2300      	movs	r3, #0
 800cc92:	b510      	push	{r4, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	e9c0 3300 	strd	r3, r3, [r0]
 800cc9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc9e:	6083      	str	r3, [r0, #8]
 800cca0:	8181      	strh	r1, [r0, #12]
 800cca2:	6643      	str	r3, [r0, #100]	@ 0x64
 800cca4:	81c2      	strh	r2, [r0, #14]
 800cca6:	6183      	str	r3, [r0, #24]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	2208      	movs	r2, #8
 800ccac:	305c      	adds	r0, #92	@ 0x5c
 800ccae:	f000 f8f4 	bl	800ce9a <memset>
 800ccb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cce8 <std+0x58>)
 800ccb4:	6224      	str	r4, [r4, #32]
 800ccb6:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccb8:	4b0c      	ldr	r3, [pc, #48]	@ (800ccec <std+0x5c>)
 800ccba:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ccbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <std+0x60>)
 800ccbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ccc0:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf4 <std+0x64>)
 800ccc2:	6323      	str	r3, [r4, #48]	@ 0x30
 800ccc4:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf8 <std+0x68>)
 800ccc6:	429c      	cmp	r4, r3
 800ccc8:	d006      	beq.n	800ccd8 <std+0x48>
 800ccca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccce:	4294      	cmp	r4, r2
 800ccd0:	d002      	beq.n	800ccd8 <std+0x48>
 800ccd2:	33d0      	adds	r3, #208	@ 0xd0
 800ccd4:	429c      	cmp	r4, r3
 800ccd6:	d105      	bne.n	800cce4 <std+0x54>
 800ccd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce0:	f000 b966 	b.w	800cfb0 <__retarget_lock_init_recursive>
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	bf00      	nop
 800cce8:	0800ce15 	.word	0x0800ce15
 800ccec:	0800ce37 	.word	0x0800ce37
 800ccf0:	0800ce6f 	.word	0x0800ce6f
 800ccf4:	0800ce93 	.word	0x0800ce93
 800ccf8:	20001744 	.word	0x20001744

0800ccfc <stdio_exit_handler>:
 800ccfc:	4a02      	ldr	r2, [pc, #8]	@ (800cd08 <stdio_exit_handler+0xc>)
 800ccfe:	4903      	ldr	r1, [pc, #12]	@ (800cd0c <stdio_exit_handler+0x10>)
 800cd00:	4803      	ldr	r0, [pc, #12]	@ (800cd10 <stdio_exit_handler+0x14>)
 800cd02:	f000 b869 	b.w	800cdd8 <_fwalk_sglue>
 800cd06:	bf00      	nop
 800cd08:	20000180 	.word	0x20000180
 800cd0c:	0800e589 	.word	0x0800e589
 800cd10:	200002fc 	.word	0x200002fc

0800cd14 <cleanup_stdio>:
 800cd14:	6841      	ldr	r1, [r0, #4]
 800cd16:	4b0c      	ldr	r3, [pc, #48]	@ (800cd48 <cleanup_stdio+0x34>)
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	4299      	cmp	r1, r3
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	d001      	beq.n	800cd24 <cleanup_stdio+0x10>
 800cd20:	f001 fc32 	bl	800e588 <_fflush_r>
 800cd24:	68a1      	ldr	r1, [r4, #8]
 800cd26:	4b09      	ldr	r3, [pc, #36]	@ (800cd4c <cleanup_stdio+0x38>)
 800cd28:	4299      	cmp	r1, r3
 800cd2a:	d002      	beq.n	800cd32 <cleanup_stdio+0x1e>
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	f001 fc2b 	bl	800e588 <_fflush_r>
 800cd32:	68e1      	ldr	r1, [r4, #12]
 800cd34:	4b06      	ldr	r3, [pc, #24]	@ (800cd50 <cleanup_stdio+0x3c>)
 800cd36:	4299      	cmp	r1, r3
 800cd38:	d004      	beq.n	800cd44 <cleanup_stdio+0x30>
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd40:	f001 bc22 	b.w	800e588 <_fflush_r>
 800cd44:	bd10      	pop	{r4, pc}
 800cd46:	bf00      	nop
 800cd48:	20001744 	.word	0x20001744
 800cd4c:	200017ac 	.word	0x200017ac
 800cd50:	20001814 	.word	0x20001814

0800cd54 <global_stdio_init.part.0>:
 800cd54:	b510      	push	{r4, lr}
 800cd56:	4b0b      	ldr	r3, [pc, #44]	@ (800cd84 <global_stdio_init.part.0+0x30>)
 800cd58:	4c0b      	ldr	r4, [pc, #44]	@ (800cd88 <global_stdio_init.part.0+0x34>)
 800cd5a:	4a0c      	ldr	r2, [pc, #48]	@ (800cd8c <global_stdio_init.part.0+0x38>)
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	2104      	movs	r1, #4
 800cd62:	2200      	movs	r2, #0
 800cd64:	f7ff ff94 	bl	800cc90 <std>
 800cd68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	2109      	movs	r1, #9
 800cd70:	f7ff ff8e 	bl	800cc90 <std>
 800cd74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd78:	2202      	movs	r2, #2
 800cd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd7e:	2112      	movs	r1, #18
 800cd80:	f7ff bf86 	b.w	800cc90 <std>
 800cd84:	2000187c 	.word	0x2000187c
 800cd88:	20001744 	.word	0x20001744
 800cd8c:	0800ccfd 	.word	0x0800ccfd

0800cd90 <__sfp_lock_acquire>:
 800cd90:	4801      	ldr	r0, [pc, #4]	@ (800cd98 <__sfp_lock_acquire+0x8>)
 800cd92:	f000 b90e 	b.w	800cfb2 <__retarget_lock_acquire_recursive>
 800cd96:	bf00      	nop
 800cd98:	20001885 	.word	0x20001885

0800cd9c <__sfp_lock_release>:
 800cd9c:	4801      	ldr	r0, [pc, #4]	@ (800cda4 <__sfp_lock_release+0x8>)
 800cd9e:	f000 b909 	b.w	800cfb4 <__retarget_lock_release_recursive>
 800cda2:	bf00      	nop
 800cda4:	20001885 	.word	0x20001885

0800cda8 <__sinit>:
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	4604      	mov	r4, r0
 800cdac:	f7ff fff0 	bl	800cd90 <__sfp_lock_acquire>
 800cdb0:	6a23      	ldr	r3, [r4, #32]
 800cdb2:	b11b      	cbz	r3, 800cdbc <__sinit+0x14>
 800cdb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdb8:	f7ff bff0 	b.w	800cd9c <__sfp_lock_release>
 800cdbc:	4b04      	ldr	r3, [pc, #16]	@ (800cdd0 <__sinit+0x28>)
 800cdbe:	6223      	str	r3, [r4, #32]
 800cdc0:	4b04      	ldr	r3, [pc, #16]	@ (800cdd4 <__sinit+0x2c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1f5      	bne.n	800cdb4 <__sinit+0xc>
 800cdc8:	f7ff ffc4 	bl	800cd54 <global_stdio_init.part.0>
 800cdcc:	e7f2      	b.n	800cdb4 <__sinit+0xc>
 800cdce:	bf00      	nop
 800cdd0:	0800cd15 	.word	0x0800cd15
 800cdd4:	2000187c 	.word	0x2000187c

0800cdd8 <_fwalk_sglue>:
 800cdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cddc:	4607      	mov	r7, r0
 800cdde:	4688      	mov	r8, r1
 800cde0:	4614      	mov	r4, r2
 800cde2:	2600      	movs	r6, #0
 800cde4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cde8:	f1b9 0901 	subs.w	r9, r9, #1
 800cdec:	d505      	bpl.n	800cdfa <_fwalk_sglue+0x22>
 800cdee:	6824      	ldr	r4, [r4, #0]
 800cdf0:	2c00      	cmp	r4, #0
 800cdf2:	d1f7      	bne.n	800cde4 <_fwalk_sglue+0xc>
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d907      	bls.n	800ce10 <_fwalk_sglue+0x38>
 800ce00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce04:	3301      	adds	r3, #1
 800ce06:	d003      	beq.n	800ce10 <_fwalk_sglue+0x38>
 800ce08:	4629      	mov	r1, r5
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	47c0      	blx	r8
 800ce0e:	4306      	orrs	r6, r0
 800ce10:	3568      	adds	r5, #104	@ 0x68
 800ce12:	e7e9      	b.n	800cde8 <_fwalk_sglue+0x10>

0800ce14 <__sread>:
 800ce14:	b510      	push	{r4, lr}
 800ce16:	460c      	mov	r4, r1
 800ce18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce1c:	f000 f87a 	bl	800cf14 <_read_r>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	bfab      	itete	ge
 800ce24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce26:	89a3      	ldrhlt	r3, [r4, #12]
 800ce28:	181b      	addge	r3, r3, r0
 800ce2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce2e:	bfac      	ite	ge
 800ce30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce32:	81a3      	strhlt	r3, [r4, #12]
 800ce34:	bd10      	pop	{r4, pc}

0800ce36 <__swrite>:
 800ce36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	461f      	mov	r7, r3
 800ce3c:	898b      	ldrh	r3, [r1, #12]
 800ce3e:	4605      	mov	r5, r0
 800ce40:	05db      	lsls	r3, r3, #23
 800ce42:	460c      	mov	r4, r1
 800ce44:	4616      	mov	r6, r2
 800ce46:	d505      	bpl.n	800ce54 <__swrite+0x1e>
 800ce48:	2302      	movs	r3, #2
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce50:	f000 f84e 	bl	800cef0 <_lseek_r>
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	4632      	mov	r2, r6
 800ce58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	4628      	mov	r0, r5
 800ce60:	463b      	mov	r3, r7
 800ce62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6a:	f000 b865 	b.w	800cf38 <_write_r>

0800ce6e <__sseek>:
 800ce6e:	b510      	push	{r4, lr}
 800ce70:	460c      	mov	r4, r1
 800ce72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce76:	f000 f83b 	bl	800cef0 <_lseek_r>
 800ce7a:	1c43      	adds	r3, r0, #1
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	bf15      	itete	ne
 800ce80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce8a:	81a3      	strheq	r3, [r4, #12]
 800ce8c:	bf18      	it	ne
 800ce8e:	81a3      	strhne	r3, [r4, #12]
 800ce90:	bd10      	pop	{r4, pc}

0800ce92 <__sclose>:
 800ce92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce96:	f000 b81b 	b.w	800ced0 <_close_r>

0800ce9a <memset>:
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	4402      	add	r2, r0
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d100      	bne.n	800cea4 <memset+0xa>
 800cea2:	4770      	bx	lr
 800cea4:	f803 1b01 	strb.w	r1, [r3], #1
 800cea8:	e7f9      	b.n	800ce9e <memset+0x4>

0800ceaa <strncmp>:
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	b16a      	cbz	r2, 800ceca <strncmp+0x20>
 800ceae:	3901      	subs	r1, #1
 800ceb0:	1884      	adds	r4, r0, r2
 800ceb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d103      	bne.n	800cec6 <strncmp+0x1c>
 800cebe:	42a0      	cmp	r0, r4
 800cec0:	d001      	beq.n	800cec6 <strncmp+0x1c>
 800cec2:	2a00      	cmp	r2, #0
 800cec4:	d1f5      	bne.n	800ceb2 <strncmp+0x8>
 800cec6:	1ad0      	subs	r0, r2, r3
 800cec8:	bd10      	pop	{r4, pc}
 800ceca:	4610      	mov	r0, r2
 800cecc:	e7fc      	b.n	800cec8 <strncmp+0x1e>
	...

0800ced0 <_close_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	2300      	movs	r3, #0
 800ced4:	4d05      	ldr	r5, [pc, #20]	@ (800ceec <_close_r+0x1c>)
 800ced6:	4604      	mov	r4, r0
 800ced8:	4608      	mov	r0, r1
 800ceda:	602b      	str	r3, [r5, #0]
 800cedc:	f7f5 fa83 	bl	80023e6 <_close>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d102      	bne.n	800ceea <_close_r+0x1a>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	b103      	cbz	r3, 800ceea <_close_r+0x1a>
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	20001880 	.word	0x20001880

0800cef0 <_lseek_r>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	4611      	mov	r1, r2
 800cef8:	2200      	movs	r2, #0
 800cefa:	4d05      	ldr	r5, [pc, #20]	@ (800cf10 <_lseek_r+0x20>)
 800cefc:	602a      	str	r2, [r5, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	f7f5 fa95 	bl	800242e <_lseek>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d102      	bne.n	800cf0e <_lseek_r+0x1e>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b103      	cbz	r3, 800cf0e <_lseek_r+0x1e>
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	bd38      	pop	{r3, r4, r5, pc}
 800cf10:	20001880 	.word	0x20001880

0800cf14 <_read_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	4d05      	ldr	r5, [pc, #20]	@ (800cf34 <_read_r+0x20>)
 800cf20:	602a      	str	r2, [r5, #0]
 800cf22:	461a      	mov	r2, r3
 800cf24:	f7f5 fa26 	bl	8002374 <_read>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d102      	bne.n	800cf32 <_read_r+0x1e>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	b103      	cbz	r3, 800cf32 <_read_r+0x1e>
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	20001880 	.word	0x20001880

0800cf38 <_write_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	4611      	mov	r1, r2
 800cf40:	2200      	movs	r2, #0
 800cf42:	4d05      	ldr	r5, [pc, #20]	@ (800cf58 <_write_r+0x20>)
 800cf44:	602a      	str	r2, [r5, #0]
 800cf46:	461a      	mov	r2, r3
 800cf48:	f7f5 fa31 	bl	80023ae <_write>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_write_r+0x1e>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_write_r+0x1e>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	20001880 	.word	0x20001880

0800cf5c <__errno>:
 800cf5c:	4b01      	ldr	r3, [pc, #4]	@ (800cf64 <__errno+0x8>)
 800cf5e:	6818      	ldr	r0, [r3, #0]
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	200002f8 	.word	0x200002f8

0800cf68 <__libc_init_array>:
 800cf68:	b570      	push	{r4, r5, r6, lr}
 800cf6a:	2600      	movs	r6, #0
 800cf6c:	4d0c      	ldr	r5, [pc, #48]	@ (800cfa0 <__libc_init_array+0x38>)
 800cf6e:	4c0d      	ldr	r4, [pc, #52]	@ (800cfa4 <__libc_init_array+0x3c>)
 800cf70:	1b64      	subs	r4, r4, r5
 800cf72:	10a4      	asrs	r4, r4, #2
 800cf74:	42a6      	cmp	r6, r4
 800cf76:	d109      	bne.n	800cf8c <__libc_init_array+0x24>
 800cf78:	f002 fe30 	bl	800fbdc <_init>
 800cf7c:	2600      	movs	r6, #0
 800cf7e:	4d0a      	ldr	r5, [pc, #40]	@ (800cfa8 <__libc_init_array+0x40>)
 800cf80:	4c0a      	ldr	r4, [pc, #40]	@ (800cfac <__libc_init_array+0x44>)
 800cf82:	1b64      	subs	r4, r4, r5
 800cf84:	10a4      	asrs	r4, r4, #2
 800cf86:	42a6      	cmp	r6, r4
 800cf88:	d105      	bne.n	800cf96 <__libc_init_array+0x2e>
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf90:	4798      	blx	r3
 800cf92:	3601      	adds	r6, #1
 800cf94:	e7ee      	b.n	800cf74 <__libc_init_array+0xc>
 800cf96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf9a:	4798      	blx	r3
 800cf9c:	3601      	adds	r6, #1
 800cf9e:	e7f2      	b.n	800cf86 <__libc_init_array+0x1e>
 800cfa0:	080100b4 	.word	0x080100b4
 800cfa4:	080100b4 	.word	0x080100b4
 800cfa8:	080100b4 	.word	0x080100b4
 800cfac:	080100b8 	.word	0x080100b8

0800cfb0 <__retarget_lock_init_recursive>:
 800cfb0:	4770      	bx	lr

0800cfb2 <__retarget_lock_acquire_recursive>:
 800cfb2:	4770      	bx	lr

0800cfb4 <__retarget_lock_release_recursive>:
 800cfb4:	4770      	bx	lr

0800cfb6 <memcpy>:
 800cfb6:	440a      	add	r2, r1
 800cfb8:	4291      	cmp	r1, r2
 800cfba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cfbe:	d100      	bne.n	800cfc2 <memcpy+0xc>
 800cfc0:	4770      	bx	lr
 800cfc2:	b510      	push	{r4, lr}
 800cfc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfc8:	4291      	cmp	r1, r2
 800cfca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfce:	d1f9      	bne.n	800cfc4 <memcpy+0xe>
 800cfd0:	bd10      	pop	{r4, pc}
	...

0800cfd4 <nan>:
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	4901      	ldr	r1, [pc, #4]	@ (800cfdc <nan+0x8>)
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	7ff80000 	.word	0x7ff80000

0800cfe0 <_free_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	2900      	cmp	r1, #0
 800cfe6:	d040      	beq.n	800d06a <_free_r+0x8a>
 800cfe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfec:	1f0c      	subs	r4, r1, #4
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	bfb8      	it	lt
 800cff2:	18e4      	addlt	r4, r4, r3
 800cff4:	f000 fc2a 	bl	800d84c <__malloc_lock>
 800cff8:	4a1c      	ldr	r2, [pc, #112]	@ (800d06c <_free_r+0x8c>)
 800cffa:	6813      	ldr	r3, [r2, #0]
 800cffc:	b933      	cbnz	r3, 800d00c <_free_r+0x2c>
 800cffe:	6063      	str	r3, [r4, #4]
 800d000:	6014      	str	r4, [r2, #0]
 800d002:	4628      	mov	r0, r5
 800d004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d008:	f000 bc26 	b.w	800d858 <__malloc_unlock>
 800d00c:	42a3      	cmp	r3, r4
 800d00e:	d908      	bls.n	800d022 <_free_r+0x42>
 800d010:	6820      	ldr	r0, [r4, #0]
 800d012:	1821      	adds	r1, r4, r0
 800d014:	428b      	cmp	r3, r1
 800d016:	bf01      	itttt	eq
 800d018:	6819      	ldreq	r1, [r3, #0]
 800d01a:	685b      	ldreq	r3, [r3, #4]
 800d01c:	1809      	addeq	r1, r1, r0
 800d01e:	6021      	streq	r1, [r4, #0]
 800d020:	e7ed      	b.n	800cffe <_free_r+0x1e>
 800d022:	461a      	mov	r2, r3
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	b10b      	cbz	r3, 800d02c <_free_r+0x4c>
 800d028:	42a3      	cmp	r3, r4
 800d02a:	d9fa      	bls.n	800d022 <_free_r+0x42>
 800d02c:	6811      	ldr	r1, [r2, #0]
 800d02e:	1850      	adds	r0, r2, r1
 800d030:	42a0      	cmp	r0, r4
 800d032:	d10b      	bne.n	800d04c <_free_r+0x6c>
 800d034:	6820      	ldr	r0, [r4, #0]
 800d036:	4401      	add	r1, r0
 800d038:	1850      	adds	r0, r2, r1
 800d03a:	4283      	cmp	r3, r0
 800d03c:	6011      	str	r1, [r2, #0]
 800d03e:	d1e0      	bne.n	800d002 <_free_r+0x22>
 800d040:	6818      	ldr	r0, [r3, #0]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	4408      	add	r0, r1
 800d046:	6010      	str	r0, [r2, #0]
 800d048:	6053      	str	r3, [r2, #4]
 800d04a:	e7da      	b.n	800d002 <_free_r+0x22>
 800d04c:	d902      	bls.n	800d054 <_free_r+0x74>
 800d04e:	230c      	movs	r3, #12
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	e7d6      	b.n	800d002 <_free_r+0x22>
 800d054:	6820      	ldr	r0, [r4, #0]
 800d056:	1821      	adds	r1, r4, r0
 800d058:	428b      	cmp	r3, r1
 800d05a:	bf01      	itttt	eq
 800d05c:	6819      	ldreq	r1, [r3, #0]
 800d05e:	685b      	ldreq	r3, [r3, #4]
 800d060:	1809      	addeq	r1, r1, r0
 800d062:	6021      	streq	r1, [r4, #0]
 800d064:	6063      	str	r3, [r4, #4]
 800d066:	6054      	str	r4, [r2, #4]
 800d068:	e7cb      	b.n	800d002 <_free_r+0x22>
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	2000188c 	.word	0x2000188c

0800d070 <rshift>:
 800d070:	6903      	ldr	r3, [r0, #16]
 800d072:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d076:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d07a:	f100 0414 	add.w	r4, r0, #20
 800d07e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d082:	dd46      	ble.n	800d112 <rshift+0xa2>
 800d084:	f011 011f 	ands.w	r1, r1, #31
 800d088:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d08c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d090:	d10c      	bne.n	800d0ac <rshift+0x3c>
 800d092:	4629      	mov	r1, r5
 800d094:	f100 0710 	add.w	r7, r0, #16
 800d098:	42b1      	cmp	r1, r6
 800d09a:	d335      	bcc.n	800d108 <rshift+0x98>
 800d09c:	1a9b      	subs	r3, r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	1eea      	subs	r2, r5, #3
 800d0a2:	4296      	cmp	r6, r2
 800d0a4:	bf38      	it	cc
 800d0a6:	2300      	movcc	r3, #0
 800d0a8:	4423      	add	r3, r4
 800d0aa:	e015      	b.n	800d0d8 <rshift+0x68>
 800d0ac:	46a1      	mov	r9, r4
 800d0ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0b2:	f1c1 0820 	rsb	r8, r1, #32
 800d0b6:	40cf      	lsrs	r7, r1
 800d0b8:	f105 0e04 	add.w	lr, r5, #4
 800d0bc:	4576      	cmp	r6, lr
 800d0be:	46f4      	mov	ip, lr
 800d0c0:	d816      	bhi.n	800d0f0 <rshift+0x80>
 800d0c2:	1a9a      	subs	r2, r3, r2
 800d0c4:	0092      	lsls	r2, r2, #2
 800d0c6:	3a04      	subs	r2, #4
 800d0c8:	3501      	adds	r5, #1
 800d0ca:	42ae      	cmp	r6, r5
 800d0cc:	bf38      	it	cc
 800d0ce:	2200      	movcc	r2, #0
 800d0d0:	18a3      	adds	r3, r4, r2
 800d0d2:	50a7      	str	r7, [r4, r2]
 800d0d4:	b107      	cbz	r7, 800d0d8 <rshift+0x68>
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	42a3      	cmp	r3, r4
 800d0da:	eba3 0204 	sub.w	r2, r3, r4
 800d0de:	bf08      	it	eq
 800d0e0:	2300      	moveq	r3, #0
 800d0e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d0e6:	6102      	str	r2, [r0, #16]
 800d0e8:	bf08      	it	eq
 800d0ea:	6143      	streq	r3, [r0, #20]
 800d0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0f0:	f8dc c000 	ldr.w	ip, [ip]
 800d0f4:	fa0c fc08 	lsl.w	ip, ip, r8
 800d0f8:	ea4c 0707 	orr.w	r7, ip, r7
 800d0fc:	f849 7b04 	str.w	r7, [r9], #4
 800d100:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d104:	40cf      	lsrs	r7, r1
 800d106:	e7d9      	b.n	800d0bc <rshift+0x4c>
 800d108:	f851 cb04 	ldr.w	ip, [r1], #4
 800d10c:	f847 cf04 	str.w	ip, [r7, #4]!
 800d110:	e7c2      	b.n	800d098 <rshift+0x28>
 800d112:	4623      	mov	r3, r4
 800d114:	e7e0      	b.n	800d0d8 <rshift+0x68>

0800d116 <__hexdig_fun>:
 800d116:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d11a:	2b09      	cmp	r3, #9
 800d11c:	d802      	bhi.n	800d124 <__hexdig_fun+0xe>
 800d11e:	3820      	subs	r0, #32
 800d120:	b2c0      	uxtb	r0, r0
 800d122:	4770      	bx	lr
 800d124:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d128:	2b05      	cmp	r3, #5
 800d12a:	d801      	bhi.n	800d130 <__hexdig_fun+0x1a>
 800d12c:	3847      	subs	r0, #71	@ 0x47
 800d12e:	e7f7      	b.n	800d120 <__hexdig_fun+0xa>
 800d130:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d134:	2b05      	cmp	r3, #5
 800d136:	d801      	bhi.n	800d13c <__hexdig_fun+0x26>
 800d138:	3827      	subs	r0, #39	@ 0x27
 800d13a:	e7f1      	b.n	800d120 <__hexdig_fun+0xa>
 800d13c:	2000      	movs	r0, #0
 800d13e:	4770      	bx	lr

0800d140 <__gethex>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	468a      	mov	sl, r1
 800d146:	4690      	mov	r8, r2
 800d148:	b085      	sub	sp, #20
 800d14a:	9302      	str	r3, [sp, #8]
 800d14c:	680b      	ldr	r3, [r1, #0]
 800d14e:	9001      	str	r0, [sp, #4]
 800d150:	1c9c      	adds	r4, r3, #2
 800d152:	46a1      	mov	r9, r4
 800d154:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d158:	2830      	cmp	r0, #48	@ 0x30
 800d15a:	d0fa      	beq.n	800d152 <__gethex+0x12>
 800d15c:	eba9 0303 	sub.w	r3, r9, r3
 800d160:	f1a3 0b02 	sub.w	fp, r3, #2
 800d164:	f7ff ffd7 	bl	800d116 <__hexdig_fun>
 800d168:	4605      	mov	r5, r0
 800d16a:	2800      	cmp	r0, #0
 800d16c:	d168      	bne.n	800d240 <__gethex+0x100>
 800d16e:	2201      	movs	r2, #1
 800d170:	4648      	mov	r0, r9
 800d172:	499f      	ldr	r1, [pc, #636]	@ (800d3f0 <__gethex+0x2b0>)
 800d174:	f7ff fe99 	bl	800ceaa <strncmp>
 800d178:	4607      	mov	r7, r0
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d167      	bne.n	800d24e <__gethex+0x10e>
 800d17e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d182:	4626      	mov	r6, r4
 800d184:	f7ff ffc7 	bl	800d116 <__hexdig_fun>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d062      	beq.n	800d252 <__gethex+0x112>
 800d18c:	4623      	mov	r3, r4
 800d18e:	7818      	ldrb	r0, [r3, #0]
 800d190:	4699      	mov	r9, r3
 800d192:	2830      	cmp	r0, #48	@ 0x30
 800d194:	f103 0301 	add.w	r3, r3, #1
 800d198:	d0f9      	beq.n	800d18e <__gethex+0x4e>
 800d19a:	f7ff ffbc 	bl	800d116 <__hexdig_fun>
 800d19e:	fab0 f580 	clz	r5, r0
 800d1a2:	f04f 0b01 	mov.w	fp, #1
 800d1a6:	096d      	lsrs	r5, r5, #5
 800d1a8:	464a      	mov	r2, r9
 800d1aa:	4616      	mov	r6, r2
 800d1ac:	7830      	ldrb	r0, [r6, #0]
 800d1ae:	3201      	adds	r2, #1
 800d1b0:	f7ff ffb1 	bl	800d116 <__hexdig_fun>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d1f8      	bne.n	800d1aa <__gethex+0x6a>
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	498c      	ldr	r1, [pc, #560]	@ (800d3f0 <__gethex+0x2b0>)
 800d1be:	f7ff fe74 	bl	800ceaa <strncmp>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	d13f      	bne.n	800d246 <__gethex+0x106>
 800d1c6:	b944      	cbnz	r4, 800d1da <__gethex+0x9a>
 800d1c8:	1c74      	adds	r4, r6, #1
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	4616      	mov	r6, r2
 800d1ce:	7830      	ldrb	r0, [r6, #0]
 800d1d0:	3201      	adds	r2, #1
 800d1d2:	f7ff ffa0 	bl	800d116 <__hexdig_fun>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	d1f8      	bne.n	800d1cc <__gethex+0x8c>
 800d1da:	1ba4      	subs	r4, r4, r6
 800d1dc:	00a7      	lsls	r7, r4, #2
 800d1de:	7833      	ldrb	r3, [r6, #0]
 800d1e0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d1e4:	2b50      	cmp	r3, #80	@ 0x50
 800d1e6:	d13e      	bne.n	800d266 <__gethex+0x126>
 800d1e8:	7873      	ldrb	r3, [r6, #1]
 800d1ea:	2b2b      	cmp	r3, #43	@ 0x2b
 800d1ec:	d033      	beq.n	800d256 <__gethex+0x116>
 800d1ee:	2b2d      	cmp	r3, #45	@ 0x2d
 800d1f0:	d034      	beq.n	800d25c <__gethex+0x11c>
 800d1f2:	2400      	movs	r4, #0
 800d1f4:	1c71      	adds	r1, r6, #1
 800d1f6:	7808      	ldrb	r0, [r1, #0]
 800d1f8:	f7ff ff8d 	bl	800d116 <__hexdig_fun>
 800d1fc:	1e43      	subs	r3, r0, #1
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	2b18      	cmp	r3, #24
 800d202:	d830      	bhi.n	800d266 <__gethex+0x126>
 800d204:	f1a0 0210 	sub.w	r2, r0, #16
 800d208:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d20c:	f7ff ff83 	bl	800d116 <__hexdig_fun>
 800d210:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d214:	fa5f fc8c 	uxtb.w	ip, ip
 800d218:	f1bc 0f18 	cmp.w	ip, #24
 800d21c:	f04f 030a 	mov.w	r3, #10
 800d220:	d91e      	bls.n	800d260 <__gethex+0x120>
 800d222:	b104      	cbz	r4, 800d226 <__gethex+0xe6>
 800d224:	4252      	negs	r2, r2
 800d226:	4417      	add	r7, r2
 800d228:	f8ca 1000 	str.w	r1, [sl]
 800d22c:	b1ed      	cbz	r5, 800d26a <__gethex+0x12a>
 800d22e:	f1bb 0f00 	cmp.w	fp, #0
 800d232:	bf0c      	ite	eq
 800d234:	2506      	moveq	r5, #6
 800d236:	2500      	movne	r5, #0
 800d238:	4628      	mov	r0, r5
 800d23a:	b005      	add	sp, #20
 800d23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d240:	2500      	movs	r5, #0
 800d242:	462c      	mov	r4, r5
 800d244:	e7b0      	b.n	800d1a8 <__gethex+0x68>
 800d246:	2c00      	cmp	r4, #0
 800d248:	d1c7      	bne.n	800d1da <__gethex+0x9a>
 800d24a:	4627      	mov	r7, r4
 800d24c:	e7c7      	b.n	800d1de <__gethex+0x9e>
 800d24e:	464e      	mov	r6, r9
 800d250:	462f      	mov	r7, r5
 800d252:	2501      	movs	r5, #1
 800d254:	e7c3      	b.n	800d1de <__gethex+0x9e>
 800d256:	2400      	movs	r4, #0
 800d258:	1cb1      	adds	r1, r6, #2
 800d25a:	e7cc      	b.n	800d1f6 <__gethex+0xb6>
 800d25c:	2401      	movs	r4, #1
 800d25e:	e7fb      	b.n	800d258 <__gethex+0x118>
 800d260:	fb03 0002 	mla	r0, r3, r2, r0
 800d264:	e7ce      	b.n	800d204 <__gethex+0xc4>
 800d266:	4631      	mov	r1, r6
 800d268:	e7de      	b.n	800d228 <__gethex+0xe8>
 800d26a:	4629      	mov	r1, r5
 800d26c:	eba6 0309 	sub.w	r3, r6, r9
 800d270:	3b01      	subs	r3, #1
 800d272:	2b07      	cmp	r3, #7
 800d274:	dc0a      	bgt.n	800d28c <__gethex+0x14c>
 800d276:	9801      	ldr	r0, [sp, #4]
 800d278:	f000 faf4 	bl	800d864 <_Balloc>
 800d27c:	4604      	mov	r4, r0
 800d27e:	b940      	cbnz	r0, 800d292 <__gethex+0x152>
 800d280:	4602      	mov	r2, r0
 800d282:	21e4      	movs	r1, #228	@ 0xe4
 800d284:	4b5b      	ldr	r3, [pc, #364]	@ (800d3f4 <__gethex+0x2b4>)
 800d286:	485c      	ldr	r0, [pc, #368]	@ (800d3f8 <__gethex+0x2b8>)
 800d288:	f001 f9be 	bl	800e608 <__assert_func>
 800d28c:	3101      	adds	r1, #1
 800d28e:	105b      	asrs	r3, r3, #1
 800d290:	e7ef      	b.n	800d272 <__gethex+0x132>
 800d292:	2300      	movs	r3, #0
 800d294:	f100 0a14 	add.w	sl, r0, #20
 800d298:	4655      	mov	r5, sl
 800d29a:	469b      	mov	fp, r3
 800d29c:	45b1      	cmp	r9, r6
 800d29e:	d337      	bcc.n	800d310 <__gethex+0x1d0>
 800d2a0:	f845 bb04 	str.w	fp, [r5], #4
 800d2a4:	eba5 050a 	sub.w	r5, r5, sl
 800d2a8:	10ad      	asrs	r5, r5, #2
 800d2aa:	6125      	str	r5, [r4, #16]
 800d2ac:	4658      	mov	r0, fp
 800d2ae:	f000 fbcb 	bl	800da48 <__hi0bits>
 800d2b2:	016d      	lsls	r5, r5, #5
 800d2b4:	f8d8 6000 	ldr.w	r6, [r8]
 800d2b8:	1a2d      	subs	r5, r5, r0
 800d2ba:	42b5      	cmp	r5, r6
 800d2bc:	dd54      	ble.n	800d368 <__gethex+0x228>
 800d2be:	1bad      	subs	r5, r5, r6
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f000 ff69 	bl	800e19a <__any_on>
 800d2c8:	4681      	mov	r9, r0
 800d2ca:	b178      	cbz	r0, 800d2ec <__gethex+0x1ac>
 800d2cc:	f04f 0901 	mov.w	r9, #1
 800d2d0:	1e6b      	subs	r3, r5, #1
 800d2d2:	1159      	asrs	r1, r3, #5
 800d2d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d2d8:	f003 021f 	and.w	r2, r3, #31
 800d2dc:	fa09 f202 	lsl.w	r2, r9, r2
 800d2e0:	420a      	tst	r2, r1
 800d2e2:	d003      	beq.n	800d2ec <__gethex+0x1ac>
 800d2e4:	454b      	cmp	r3, r9
 800d2e6:	dc36      	bgt.n	800d356 <__gethex+0x216>
 800d2e8:	f04f 0902 	mov.w	r9, #2
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f7ff febe 	bl	800d070 <rshift>
 800d2f4:	442f      	add	r7, r5
 800d2f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2fa:	42bb      	cmp	r3, r7
 800d2fc:	da42      	bge.n	800d384 <__gethex+0x244>
 800d2fe:	4621      	mov	r1, r4
 800d300:	9801      	ldr	r0, [sp, #4]
 800d302:	f000 faef 	bl	800d8e4 <_Bfree>
 800d306:	2300      	movs	r3, #0
 800d308:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d30a:	25a3      	movs	r5, #163	@ 0xa3
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	e793      	b.n	800d238 <__gethex+0xf8>
 800d310:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d314:	2a2e      	cmp	r2, #46	@ 0x2e
 800d316:	d012      	beq.n	800d33e <__gethex+0x1fe>
 800d318:	2b20      	cmp	r3, #32
 800d31a:	d104      	bne.n	800d326 <__gethex+0x1e6>
 800d31c:	f845 bb04 	str.w	fp, [r5], #4
 800d320:	f04f 0b00 	mov.w	fp, #0
 800d324:	465b      	mov	r3, fp
 800d326:	7830      	ldrb	r0, [r6, #0]
 800d328:	9303      	str	r3, [sp, #12]
 800d32a:	f7ff fef4 	bl	800d116 <__hexdig_fun>
 800d32e:	9b03      	ldr	r3, [sp, #12]
 800d330:	f000 000f 	and.w	r0, r0, #15
 800d334:	4098      	lsls	r0, r3
 800d336:	ea4b 0b00 	orr.w	fp, fp, r0
 800d33a:	3304      	adds	r3, #4
 800d33c:	e7ae      	b.n	800d29c <__gethex+0x15c>
 800d33e:	45b1      	cmp	r9, r6
 800d340:	d8ea      	bhi.n	800d318 <__gethex+0x1d8>
 800d342:	2201      	movs	r2, #1
 800d344:	4630      	mov	r0, r6
 800d346:	492a      	ldr	r1, [pc, #168]	@ (800d3f0 <__gethex+0x2b0>)
 800d348:	9303      	str	r3, [sp, #12]
 800d34a:	f7ff fdae 	bl	800ceaa <strncmp>
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	2800      	cmp	r0, #0
 800d352:	d1e1      	bne.n	800d318 <__gethex+0x1d8>
 800d354:	e7a2      	b.n	800d29c <__gethex+0x15c>
 800d356:	4620      	mov	r0, r4
 800d358:	1ea9      	subs	r1, r5, #2
 800d35a:	f000 ff1e 	bl	800e19a <__any_on>
 800d35e:	2800      	cmp	r0, #0
 800d360:	d0c2      	beq.n	800d2e8 <__gethex+0x1a8>
 800d362:	f04f 0903 	mov.w	r9, #3
 800d366:	e7c1      	b.n	800d2ec <__gethex+0x1ac>
 800d368:	da09      	bge.n	800d37e <__gethex+0x23e>
 800d36a:	1b75      	subs	r5, r6, r5
 800d36c:	4621      	mov	r1, r4
 800d36e:	462a      	mov	r2, r5
 800d370:	9801      	ldr	r0, [sp, #4]
 800d372:	f000 fcc7 	bl	800dd04 <__lshift>
 800d376:	4604      	mov	r4, r0
 800d378:	1b7f      	subs	r7, r7, r5
 800d37a:	f100 0a14 	add.w	sl, r0, #20
 800d37e:	f04f 0900 	mov.w	r9, #0
 800d382:	e7b8      	b.n	800d2f6 <__gethex+0x1b6>
 800d384:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d388:	42bd      	cmp	r5, r7
 800d38a:	dd6f      	ble.n	800d46c <__gethex+0x32c>
 800d38c:	1bed      	subs	r5, r5, r7
 800d38e:	42ae      	cmp	r6, r5
 800d390:	dc34      	bgt.n	800d3fc <__gethex+0x2bc>
 800d392:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d396:	2b02      	cmp	r3, #2
 800d398:	d022      	beq.n	800d3e0 <__gethex+0x2a0>
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d024      	beq.n	800d3e8 <__gethex+0x2a8>
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d115      	bne.n	800d3ce <__gethex+0x28e>
 800d3a2:	42ae      	cmp	r6, r5
 800d3a4:	d113      	bne.n	800d3ce <__gethex+0x28e>
 800d3a6:	2e01      	cmp	r6, #1
 800d3a8:	d10b      	bne.n	800d3c2 <__gethex+0x282>
 800d3aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3ae:	9a02      	ldr	r2, [sp, #8]
 800d3b0:	2562      	movs	r5, #98	@ 0x62
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	6123      	str	r3, [r4, #16]
 800d3b8:	f8ca 3000 	str.w	r3, [sl]
 800d3bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3be:	601c      	str	r4, [r3, #0]
 800d3c0:	e73a      	b.n	800d238 <__gethex+0xf8>
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	1e71      	subs	r1, r6, #1
 800d3c6:	f000 fee8 	bl	800e19a <__any_on>
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	d1ed      	bne.n	800d3aa <__gethex+0x26a>
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	9801      	ldr	r0, [sp, #4]
 800d3d2:	f000 fa87 	bl	800d8e4 <_Bfree>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3da:	2550      	movs	r5, #80	@ 0x50
 800d3dc:	6013      	str	r3, [r2, #0]
 800d3de:	e72b      	b.n	800d238 <__gethex+0xf8>
 800d3e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1f3      	bne.n	800d3ce <__gethex+0x28e>
 800d3e6:	e7e0      	b.n	800d3aa <__gethex+0x26a>
 800d3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1dd      	bne.n	800d3aa <__gethex+0x26a>
 800d3ee:	e7ee      	b.n	800d3ce <__gethex+0x28e>
 800d3f0:	0800fc8e 	.word	0x0800fc8e
 800d3f4:	0800fc9e 	.word	0x0800fc9e
 800d3f8:	0800fcaf 	.word	0x0800fcaf
 800d3fc:	1e6f      	subs	r7, r5, #1
 800d3fe:	f1b9 0f00 	cmp.w	r9, #0
 800d402:	d130      	bne.n	800d466 <__gethex+0x326>
 800d404:	b127      	cbz	r7, 800d410 <__gethex+0x2d0>
 800d406:	4639      	mov	r1, r7
 800d408:	4620      	mov	r0, r4
 800d40a:	f000 fec6 	bl	800e19a <__any_on>
 800d40e:	4681      	mov	r9, r0
 800d410:	2301      	movs	r3, #1
 800d412:	4629      	mov	r1, r5
 800d414:	1b76      	subs	r6, r6, r5
 800d416:	2502      	movs	r5, #2
 800d418:	117a      	asrs	r2, r7, #5
 800d41a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d41e:	f007 071f 	and.w	r7, r7, #31
 800d422:	40bb      	lsls	r3, r7
 800d424:	4213      	tst	r3, r2
 800d426:	4620      	mov	r0, r4
 800d428:	bf18      	it	ne
 800d42a:	f049 0902 	orrne.w	r9, r9, #2
 800d42e:	f7ff fe1f 	bl	800d070 <rshift>
 800d432:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d436:	f1b9 0f00 	cmp.w	r9, #0
 800d43a:	d047      	beq.n	800d4cc <__gethex+0x38c>
 800d43c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d440:	2b02      	cmp	r3, #2
 800d442:	d015      	beq.n	800d470 <__gethex+0x330>
 800d444:	2b03      	cmp	r3, #3
 800d446:	d017      	beq.n	800d478 <__gethex+0x338>
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d109      	bne.n	800d460 <__gethex+0x320>
 800d44c:	f019 0f02 	tst.w	r9, #2
 800d450:	d006      	beq.n	800d460 <__gethex+0x320>
 800d452:	f8da 3000 	ldr.w	r3, [sl]
 800d456:	ea49 0903 	orr.w	r9, r9, r3
 800d45a:	f019 0f01 	tst.w	r9, #1
 800d45e:	d10e      	bne.n	800d47e <__gethex+0x33e>
 800d460:	f045 0510 	orr.w	r5, r5, #16
 800d464:	e032      	b.n	800d4cc <__gethex+0x38c>
 800d466:	f04f 0901 	mov.w	r9, #1
 800d46a:	e7d1      	b.n	800d410 <__gethex+0x2d0>
 800d46c:	2501      	movs	r5, #1
 800d46e:	e7e2      	b.n	800d436 <__gethex+0x2f6>
 800d470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d472:	f1c3 0301 	rsb	r3, r3, #1
 800d476:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0f0      	beq.n	800d460 <__gethex+0x320>
 800d47e:	f04f 0c00 	mov.w	ip, #0
 800d482:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d486:	f104 0314 	add.w	r3, r4, #20
 800d48a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d48e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d492:	4618      	mov	r0, r3
 800d494:	f853 2b04 	ldr.w	r2, [r3], #4
 800d498:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d49c:	d01b      	beq.n	800d4d6 <__gethex+0x396>
 800d49e:	3201      	adds	r2, #1
 800d4a0:	6002      	str	r2, [r0, #0]
 800d4a2:	2d02      	cmp	r5, #2
 800d4a4:	f104 0314 	add.w	r3, r4, #20
 800d4a8:	d13c      	bne.n	800d524 <__gethex+0x3e4>
 800d4aa:	f8d8 2000 	ldr.w	r2, [r8]
 800d4ae:	3a01      	subs	r2, #1
 800d4b0:	42b2      	cmp	r2, r6
 800d4b2:	d109      	bne.n	800d4c8 <__gethex+0x388>
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	1171      	asrs	r1, r6, #5
 800d4b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d4bc:	f006 061f 	and.w	r6, r6, #31
 800d4c0:	fa02 f606 	lsl.w	r6, r2, r6
 800d4c4:	421e      	tst	r6, r3
 800d4c6:	d13a      	bne.n	800d53e <__gethex+0x3fe>
 800d4c8:	f045 0520 	orr.w	r5, r5, #32
 800d4cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ce:	601c      	str	r4, [r3, #0]
 800d4d0:	9b02      	ldr	r3, [sp, #8]
 800d4d2:	601f      	str	r7, [r3, #0]
 800d4d4:	e6b0      	b.n	800d238 <__gethex+0xf8>
 800d4d6:	4299      	cmp	r1, r3
 800d4d8:	f843 cc04 	str.w	ip, [r3, #-4]
 800d4dc:	d8d9      	bhi.n	800d492 <__gethex+0x352>
 800d4de:	68a3      	ldr	r3, [r4, #8]
 800d4e0:	459b      	cmp	fp, r3
 800d4e2:	db17      	blt.n	800d514 <__gethex+0x3d4>
 800d4e4:	6861      	ldr	r1, [r4, #4]
 800d4e6:	9801      	ldr	r0, [sp, #4]
 800d4e8:	3101      	adds	r1, #1
 800d4ea:	f000 f9bb 	bl	800d864 <_Balloc>
 800d4ee:	4681      	mov	r9, r0
 800d4f0:	b918      	cbnz	r0, 800d4fa <__gethex+0x3ba>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	2184      	movs	r1, #132	@ 0x84
 800d4f6:	4b19      	ldr	r3, [pc, #100]	@ (800d55c <__gethex+0x41c>)
 800d4f8:	e6c5      	b.n	800d286 <__gethex+0x146>
 800d4fa:	6922      	ldr	r2, [r4, #16]
 800d4fc:	f104 010c 	add.w	r1, r4, #12
 800d500:	3202      	adds	r2, #2
 800d502:	0092      	lsls	r2, r2, #2
 800d504:	300c      	adds	r0, #12
 800d506:	f7ff fd56 	bl	800cfb6 <memcpy>
 800d50a:	4621      	mov	r1, r4
 800d50c:	9801      	ldr	r0, [sp, #4]
 800d50e:	f000 f9e9 	bl	800d8e4 <_Bfree>
 800d512:	464c      	mov	r4, r9
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	1c5a      	adds	r2, r3, #1
 800d518:	6122      	str	r2, [r4, #16]
 800d51a:	2201      	movs	r2, #1
 800d51c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d520:	615a      	str	r2, [r3, #20]
 800d522:	e7be      	b.n	800d4a2 <__gethex+0x362>
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	455a      	cmp	r2, fp
 800d528:	dd0b      	ble.n	800d542 <__gethex+0x402>
 800d52a:	2101      	movs	r1, #1
 800d52c:	4620      	mov	r0, r4
 800d52e:	f7ff fd9f 	bl	800d070 <rshift>
 800d532:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d536:	3701      	adds	r7, #1
 800d538:	42bb      	cmp	r3, r7
 800d53a:	f6ff aee0 	blt.w	800d2fe <__gethex+0x1be>
 800d53e:	2501      	movs	r5, #1
 800d540:	e7c2      	b.n	800d4c8 <__gethex+0x388>
 800d542:	f016 061f 	ands.w	r6, r6, #31
 800d546:	d0fa      	beq.n	800d53e <__gethex+0x3fe>
 800d548:	4453      	add	r3, sl
 800d54a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d54e:	f000 fa7b 	bl	800da48 <__hi0bits>
 800d552:	f1c6 0620 	rsb	r6, r6, #32
 800d556:	42b0      	cmp	r0, r6
 800d558:	dbe7      	blt.n	800d52a <__gethex+0x3ea>
 800d55a:	e7f0      	b.n	800d53e <__gethex+0x3fe>
 800d55c:	0800fc9e 	.word	0x0800fc9e

0800d560 <L_shift>:
 800d560:	f1c2 0208 	rsb	r2, r2, #8
 800d564:	0092      	lsls	r2, r2, #2
 800d566:	b570      	push	{r4, r5, r6, lr}
 800d568:	f1c2 0620 	rsb	r6, r2, #32
 800d56c:	6843      	ldr	r3, [r0, #4]
 800d56e:	6804      	ldr	r4, [r0, #0]
 800d570:	fa03 f506 	lsl.w	r5, r3, r6
 800d574:	432c      	orrs	r4, r5
 800d576:	40d3      	lsrs	r3, r2
 800d578:	6004      	str	r4, [r0, #0]
 800d57a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d57e:	4288      	cmp	r0, r1
 800d580:	d3f4      	bcc.n	800d56c <L_shift+0xc>
 800d582:	bd70      	pop	{r4, r5, r6, pc}

0800d584 <__match>:
 800d584:	b530      	push	{r4, r5, lr}
 800d586:	6803      	ldr	r3, [r0, #0]
 800d588:	3301      	adds	r3, #1
 800d58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d58e:	b914      	cbnz	r4, 800d596 <__match+0x12>
 800d590:	6003      	str	r3, [r0, #0]
 800d592:	2001      	movs	r0, #1
 800d594:	bd30      	pop	{r4, r5, pc}
 800d596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d59a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d59e:	2d19      	cmp	r5, #25
 800d5a0:	bf98      	it	ls
 800d5a2:	3220      	addls	r2, #32
 800d5a4:	42a2      	cmp	r2, r4
 800d5a6:	d0f0      	beq.n	800d58a <__match+0x6>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	e7f3      	b.n	800d594 <__match+0x10>

0800d5ac <__hexnan>:
 800d5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b0:	2500      	movs	r5, #0
 800d5b2:	680b      	ldr	r3, [r1, #0]
 800d5b4:	4682      	mov	sl, r0
 800d5b6:	115e      	asrs	r6, r3, #5
 800d5b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d5bc:	f013 031f 	ands.w	r3, r3, #31
 800d5c0:	bf18      	it	ne
 800d5c2:	3604      	addne	r6, #4
 800d5c4:	1f37      	subs	r7, r6, #4
 800d5c6:	4690      	mov	r8, r2
 800d5c8:	46b9      	mov	r9, r7
 800d5ca:	463c      	mov	r4, r7
 800d5cc:	46ab      	mov	fp, r5
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	6801      	ldr	r1, [r0, #0]
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5d8:	9502      	str	r5, [sp, #8]
 800d5da:	784a      	ldrb	r2, [r1, #1]
 800d5dc:	1c4b      	adds	r3, r1, #1
 800d5de:	9303      	str	r3, [sp, #12]
 800d5e0:	b342      	cbz	r2, 800d634 <__hexnan+0x88>
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	9105      	str	r1, [sp, #20]
 800d5e6:	9204      	str	r2, [sp, #16]
 800d5e8:	f7ff fd95 	bl	800d116 <__hexdig_fun>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d151      	bne.n	800d694 <__hexnan+0xe8>
 800d5f0:	9a04      	ldr	r2, [sp, #16]
 800d5f2:	9905      	ldr	r1, [sp, #20]
 800d5f4:	2a20      	cmp	r2, #32
 800d5f6:	d818      	bhi.n	800d62a <__hexnan+0x7e>
 800d5f8:	9b02      	ldr	r3, [sp, #8]
 800d5fa:	459b      	cmp	fp, r3
 800d5fc:	dd13      	ble.n	800d626 <__hexnan+0x7a>
 800d5fe:	454c      	cmp	r4, r9
 800d600:	d206      	bcs.n	800d610 <__hexnan+0x64>
 800d602:	2d07      	cmp	r5, #7
 800d604:	dc04      	bgt.n	800d610 <__hexnan+0x64>
 800d606:	462a      	mov	r2, r5
 800d608:	4649      	mov	r1, r9
 800d60a:	4620      	mov	r0, r4
 800d60c:	f7ff ffa8 	bl	800d560 <L_shift>
 800d610:	4544      	cmp	r4, r8
 800d612:	d952      	bls.n	800d6ba <__hexnan+0x10e>
 800d614:	2300      	movs	r3, #0
 800d616:	f1a4 0904 	sub.w	r9, r4, #4
 800d61a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d61e:	461d      	mov	r5, r3
 800d620:	464c      	mov	r4, r9
 800d622:	f8cd b008 	str.w	fp, [sp, #8]
 800d626:	9903      	ldr	r1, [sp, #12]
 800d628:	e7d7      	b.n	800d5da <__hexnan+0x2e>
 800d62a:	2a29      	cmp	r2, #41	@ 0x29
 800d62c:	d157      	bne.n	800d6de <__hexnan+0x132>
 800d62e:	3102      	adds	r1, #2
 800d630:	f8ca 1000 	str.w	r1, [sl]
 800d634:	f1bb 0f00 	cmp.w	fp, #0
 800d638:	d051      	beq.n	800d6de <__hexnan+0x132>
 800d63a:	454c      	cmp	r4, r9
 800d63c:	d206      	bcs.n	800d64c <__hexnan+0xa0>
 800d63e:	2d07      	cmp	r5, #7
 800d640:	dc04      	bgt.n	800d64c <__hexnan+0xa0>
 800d642:	462a      	mov	r2, r5
 800d644:	4649      	mov	r1, r9
 800d646:	4620      	mov	r0, r4
 800d648:	f7ff ff8a 	bl	800d560 <L_shift>
 800d64c:	4544      	cmp	r4, r8
 800d64e:	d936      	bls.n	800d6be <__hexnan+0x112>
 800d650:	4623      	mov	r3, r4
 800d652:	f1a8 0204 	sub.w	r2, r8, #4
 800d656:	f853 1b04 	ldr.w	r1, [r3], #4
 800d65a:	429f      	cmp	r7, r3
 800d65c:	f842 1f04 	str.w	r1, [r2, #4]!
 800d660:	d2f9      	bcs.n	800d656 <__hexnan+0xaa>
 800d662:	1b3b      	subs	r3, r7, r4
 800d664:	f023 0303 	bic.w	r3, r3, #3
 800d668:	3304      	adds	r3, #4
 800d66a:	3401      	adds	r4, #1
 800d66c:	3e03      	subs	r6, #3
 800d66e:	42b4      	cmp	r4, r6
 800d670:	bf88      	it	hi
 800d672:	2304      	movhi	r3, #4
 800d674:	2200      	movs	r2, #0
 800d676:	4443      	add	r3, r8
 800d678:	f843 2b04 	str.w	r2, [r3], #4
 800d67c:	429f      	cmp	r7, r3
 800d67e:	d2fb      	bcs.n	800d678 <__hexnan+0xcc>
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	b91b      	cbnz	r3, 800d68c <__hexnan+0xe0>
 800d684:	4547      	cmp	r7, r8
 800d686:	d128      	bne.n	800d6da <__hexnan+0x12e>
 800d688:	2301      	movs	r3, #1
 800d68a:	603b      	str	r3, [r7, #0]
 800d68c:	2005      	movs	r0, #5
 800d68e:	b007      	add	sp, #28
 800d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d694:	3501      	adds	r5, #1
 800d696:	2d08      	cmp	r5, #8
 800d698:	f10b 0b01 	add.w	fp, fp, #1
 800d69c:	dd06      	ble.n	800d6ac <__hexnan+0x100>
 800d69e:	4544      	cmp	r4, r8
 800d6a0:	d9c1      	bls.n	800d626 <__hexnan+0x7a>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	2501      	movs	r5, #1
 800d6a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6aa:	3c04      	subs	r4, #4
 800d6ac:	6822      	ldr	r2, [r4, #0]
 800d6ae:	f000 000f 	and.w	r0, r0, #15
 800d6b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d6b6:	6020      	str	r0, [r4, #0]
 800d6b8:	e7b5      	b.n	800d626 <__hexnan+0x7a>
 800d6ba:	2508      	movs	r5, #8
 800d6bc:	e7b3      	b.n	800d626 <__hexnan+0x7a>
 800d6be:	9b01      	ldr	r3, [sp, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d0dd      	beq.n	800d680 <__hexnan+0xd4>
 800d6c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6c8:	f1c3 0320 	rsb	r3, r3, #32
 800d6cc:	40da      	lsrs	r2, r3
 800d6ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d6d8:	e7d2      	b.n	800d680 <__hexnan+0xd4>
 800d6da:	3f04      	subs	r7, #4
 800d6dc:	e7d0      	b.n	800d680 <__hexnan+0xd4>
 800d6de:	2004      	movs	r0, #4
 800d6e0:	e7d5      	b.n	800d68e <__hexnan+0xe2>
	...

0800d6e4 <sbrk_aligned>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	4e0f      	ldr	r6, [pc, #60]	@ (800d724 <sbrk_aligned+0x40>)
 800d6e8:	460c      	mov	r4, r1
 800d6ea:	6831      	ldr	r1, [r6, #0]
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	b911      	cbnz	r1, 800d6f6 <sbrk_aligned+0x12>
 800d6f0:	f000 ff72 	bl	800e5d8 <_sbrk_r>
 800d6f4:	6030      	str	r0, [r6, #0]
 800d6f6:	4621      	mov	r1, r4
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f000 ff6d 	bl	800e5d8 <_sbrk_r>
 800d6fe:	1c43      	adds	r3, r0, #1
 800d700:	d103      	bne.n	800d70a <sbrk_aligned+0x26>
 800d702:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d706:	4620      	mov	r0, r4
 800d708:	bd70      	pop	{r4, r5, r6, pc}
 800d70a:	1cc4      	adds	r4, r0, #3
 800d70c:	f024 0403 	bic.w	r4, r4, #3
 800d710:	42a0      	cmp	r0, r4
 800d712:	d0f8      	beq.n	800d706 <sbrk_aligned+0x22>
 800d714:	1a21      	subs	r1, r4, r0
 800d716:	4628      	mov	r0, r5
 800d718:	f000 ff5e 	bl	800e5d8 <_sbrk_r>
 800d71c:	3001      	adds	r0, #1
 800d71e:	d1f2      	bne.n	800d706 <sbrk_aligned+0x22>
 800d720:	e7ef      	b.n	800d702 <sbrk_aligned+0x1e>
 800d722:	bf00      	nop
 800d724:	20001888 	.word	0x20001888

0800d728 <_malloc_r>:
 800d728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d72c:	1ccd      	adds	r5, r1, #3
 800d72e:	f025 0503 	bic.w	r5, r5, #3
 800d732:	3508      	adds	r5, #8
 800d734:	2d0c      	cmp	r5, #12
 800d736:	bf38      	it	cc
 800d738:	250c      	movcc	r5, #12
 800d73a:	2d00      	cmp	r5, #0
 800d73c:	4606      	mov	r6, r0
 800d73e:	db01      	blt.n	800d744 <_malloc_r+0x1c>
 800d740:	42a9      	cmp	r1, r5
 800d742:	d904      	bls.n	800d74e <_malloc_r+0x26>
 800d744:	230c      	movs	r3, #12
 800d746:	6033      	str	r3, [r6, #0]
 800d748:	2000      	movs	r0, #0
 800d74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d74e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d824 <_malloc_r+0xfc>
 800d752:	f000 f87b 	bl	800d84c <__malloc_lock>
 800d756:	f8d8 3000 	ldr.w	r3, [r8]
 800d75a:	461c      	mov	r4, r3
 800d75c:	bb44      	cbnz	r4, 800d7b0 <_malloc_r+0x88>
 800d75e:	4629      	mov	r1, r5
 800d760:	4630      	mov	r0, r6
 800d762:	f7ff ffbf 	bl	800d6e4 <sbrk_aligned>
 800d766:	1c43      	adds	r3, r0, #1
 800d768:	4604      	mov	r4, r0
 800d76a:	d158      	bne.n	800d81e <_malloc_r+0xf6>
 800d76c:	f8d8 4000 	ldr.w	r4, [r8]
 800d770:	4627      	mov	r7, r4
 800d772:	2f00      	cmp	r7, #0
 800d774:	d143      	bne.n	800d7fe <_malloc_r+0xd6>
 800d776:	2c00      	cmp	r4, #0
 800d778:	d04b      	beq.n	800d812 <_malloc_r+0xea>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	4639      	mov	r1, r7
 800d77e:	4630      	mov	r0, r6
 800d780:	eb04 0903 	add.w	r9, r4, r3
 800d784:	f000 ff28 	bl	800e5d8 <_sbrk_r>
 800d788:	4581      	cmp	r9, r0
 800d78a:	d142      	bne.n	800d812 <_malloc_r+0xea>
 800d78c:	6821      	ldr	r1, [r4, #0]
 800d78e:	4630      	mov	r0, r6
 800d790:	1a6d      	subs	r5, r5, r1
 800d792:	4629      	mov	r1, r5
 800d794:	f7ff ffa6 	bl	800d6e4 <sbrk_aligned>
 800d798:	3001      	adds	r0, #1
 800d79a:	d03a      	beq.n	800d812 <_malloc_r+0xea>
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	442b      	add	r3, r5
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d7a6:	685a      	ldr	r2, [r3, #4]
 800d7a8:	bb62      	cbnz	r2, 800d804 <_malloc_r+0xdc>
 800d7aa:	f8c8 7000 	str.w	r7, [r8]
 800d7ae:	e00f      	b.n	800d7d0 <_malloc_r+0xa8>
 800d7b0:	6822      	ldr	r2, [r4, #0]
 800d7b2:	1b52      	subs	r2, r2, r5
 800d7b4:	d420      	bmi.n	800d7f8 <_malloc_r+0xd0>
 800d7b6:	2a0b      	cmp	r2, #11
 800d7b8:	d917      	bls.n	800d7ea <_malloc_r+0xc2>
 800d7ba:	1961      	adds	r1, r4, r5
 800d7bc:	42a3      	cmp	r3, r4
 800d7be:	6025      	str	r5, [r4, #0]
 800d7c0:	bf18      	it	ne
 800d7c2:	6059      	strne	r1, [r3, #4]
 800d7c4:	6863      	ldr	r3, [r4, #4]
 800d7c6:	bf08      	it	eq
 800d7c8:	f8c8 1000 	streq.w	r1, [r8]
 800d7cc:	5162      	str	r2, [r4, r5]
 800d7ce:	604b      	str	r3, [r1, #4]
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f000 f841 	bl	800d858 <__malloc_unlock>
 800d7d6:	f104 000b 	add.w	r0, r4, #11
 800d7da:	1d23      	adds	r3, r4, #4
 800d7dc:	f020 0007 	bic.w	r0, r0, #7
 800d7e0:	1ac2      	subs	r2, r0, r3
 800d7e2:	bf1c      	itt	ne
 800d7e4:	1a1b      	subne	r3, r3, r0
 800d7e6:	50a3      	strne	r3, [r4, r2]
 800d7e8:	e7af      	b.n	800d74a <_malloc_r+0x22>
 800d7ea:	6862      	ldr	r2, [r4, #4]
 800d7ec:	42a3      	cmp	r3, r4
 800d7ee:	bf0c      	ite	eq
 800d7f0:	f8c8 2000 	streq.w	r2, [r8]
 800d7f4:	605a      	strne	r2, [r3, #4]
 800d7f6:	e7eb      	b.n	800d7d0 <_malloc_r+0xa8>
 800d7f8:	4623      	mov	r3, r4
 800d7fa:	6864      	ldr	r4, [r4, #4]
 800d7fc:	e7ae      	b.n	800d75c <_malloc_r+0x34>
 800d7fe:	463c      	mov	r4, r7
 800d800:	687f      	ldr	r7, [r7, #4]
 800d802:	e7b6      	b.n	800d772 <_malloc_r+0x4a>
 800d804:	461a      	mov	r2, r3
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	42a3      	cmp	r3, r4
 800d80a:	d1fb      	bne.n	800d804 <_malloc_r+0xdc>
 800d80c:	2300      	movs	r3, #0
 800d80e:	6053      	str	r3, [r2, #4]
 800d810:	e7de      	b.n	800d7d0 <_malloc_r+0xa8>
 800d812:	230c      	movs	r3, #12
 800d814:	4630      	mov	r0, r6
 800d816:	6033      	str	r3, [r6, #0]
 800d818:	f000 f81e 	bl	800d858 <__malloc_unlock>
 800d81c:	e794      	b.n	800d748 <_malloc_r+0x20>
 800d81e:	6005      	str	r5, [r0, #0]
 800d820:	e7d6      	b.n	800d7d0 <_malloc_r+0xa8>
 800d822:	bf00      	nop
 800d824:	2000188c 	.word	0x2000188c

0800d828 <__ascii_mbtowc>:
 800d828:	b082      	sub	sp, #8
 800d82a:	b901      	cbnz	r1, 800d82e <__ascii_mbtowc+0x6>
 800d82c:	a901      	add	r1, sp, #4
 800d82e:	b142      	cbz	r2, 800d842 <__ascii_mbtowc+0x1a>
 800d830:	b14b      	cbz	r3, 800d846 <__ascii_mbtowc+0x1e>
 800d832:	7813      	ldrb	r3, [r2, #0]
 800d834:	600b      	str	r3, [r1, #0]
 800d836:	7812      	ldrb	r2, [r2, #0]
 800d838:	1e10      	subs	r0, r2, #0
 800d83a:	bf18      	it	ne
 800d83c:	2001      	movne	r0, #1
 800d83e:	b002      	add	sp, #8
 800d840:	4770      	bx	lr
 800d842:	4610      	mov	r0, r2
 800d844:	e7fb      	b.n	800d83e <__ascii_mbtowc+0x16>
 800d846:	f06f 0001 	mvn.w	r0, #1
 800d84a:	e7f8      	b.n	800d83e <__ascii_mbtowc+0x16>

0800d84c <__malloc_lock>:
 800d84c:	4801      	ldr	r0, [pc, #4]	@ (800d854 <__malloc_lock+0x8>)
 800d84e:	f7ff bbb0 	b.w	800cfb2 <__retarget_lock_acquire_recursive>
 800d852:	bf00      	nop
 800d854:	20001884 	.word	0x20001884

0800d858 <__malloc_unlock>:
 800d858:	4801      	ldr	r0, [pc, #4]	@ (800d860 <__malloc_unlock+0x8>)
 800d85a:	f7ff bbab 	b.w	800cfb4 <__retarget_lock_release_recursive>
 800d85e:	bf00      	nop
 800d860:	20001884 	.word	0x20001884

0800d864 <_Balloc>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	69c6      	ldr	r6, [r0, #28]
 800d868:	4604      	mov	r4, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	b976      	cbnz	r6, 800d88c <_Balloc+0x28>
 800d86e:	2010      	movs	r0, #16
 800d870:	f001 fd5a 	bl	800f328 <malloc>
 800d874:	4602      	mov	r2, r0
 800d876:	61e0      	str	r0, [r4, #28]
 800d878:	b920      	cbnz	r0, 800d884 <_Balloc+0x20>
 800d87a:	216b      	movs	r1, #107	@ 0x6b
 800d87c:	4b17      	ldr	r3, [pc, #92]	@ (800d8dc <_Balloc+0x78>)
 800d87e:	4818      	ldr	r0, [pc, #96]	@ (800d8e0 <_Balloc+0x7c>)
 800d880:	f000 fec2 	bl	800e608 <__assert_func>
 800d884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d888:	6006      	str	r6, [r0, #0]
 800d88a:	60c6      	str	r6, [r0, #12]
 800d88c:	69e6      	ldr	r6, [r4, #28]
 800d88e:	68f3      	ldr	r3, [r6, #12]
 800d890:	b183      	cbz	r3, 800d8b4 <_Balloc+0x50>
 800d892:	69e3      	ldr	r3, [r4, #28]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d89a:	b9b8      	cbnz	r0, 800d8cc <_Balloc+0x68>
 800d89c:	2101      	movs	r1, #1
 800d89e:	fa01 f605 	lsl.w	r6, r1, r5
 800d8a2:	1d72      	adds	r2, r6, #5
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	0092      	lsls	r2, r2, #2
 800d8a8:	f000 fecc 	bl	800e644 <_calloc_r>
 800d8ac:	b160      	cbz	r0, 800d8c8 <_Balloc+0x64>
 800d8ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8b2:	e00e      	b.n	800d8d2 <_Balloc+0x6e>
 800d8b4:	2221      	movs	r2, #33	@ 0x21
 800d8b6:	2104      	movs	r1, #4
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f000 fec3 	bl	800e644 <_calloc_r>
 800d8be:	69e3      	ldr	r3, [r4, #28]
 800d8c0:	60f0      	str	r0, [r6, #12]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1e4      	bne.n	800d892 <_Balloc+0x2e>
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
 800d8cc:	6802      	ldr	r2, [r0, #0]
 800d8ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8d8:	e7f7      	b.n	800d8ca <_Balloc+0x66>
 800d8da:	bf00      	nop
 800d8dc:	0800fd0f 	.word	0x0800fd0f
 800d8e0:	0800fd26 	.word	0x0800fd26

0800d8e4 <_Bfree>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	69c6      	ldr	r6, [r0, #28]
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	b976      	cbnz	r6, 800d90c <_Bfree+0x28>
 800d8ee:	2010      	movs	r0, #16
 800d8f0:	f001 fd1a 	bl	800f328 <malloc>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	61e8      	str	r0, [r5, #28]
 800d8f8:	b920      	cbnz	r0, 800d904 <_Bfree+0x20>
 800d8fa:	218f      	movs	r1, #143	@ 0x8f
 800d8fc:	4b08      	ldr	r3, [pc, #32]	@ (800d920 <_Bfree+0x3c>)
 800d8fe:	4809      	ldr	r0, [pc, #36]	@ (800d924 <_Bfree+0x40>)
 800d900:	f000 fe82 	bl	800e608 <__assert_func>
 800d904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d908:	6006      	str	r6, [r0, #0]
 800d90a:	60c6      	str	r6, [r0, #12]
 800d90c:	b13c      	cbz	r4, 800d91e <_Bfree+0x3a>
 800d90e:	69eb      	ldr	r3, [r5, #28]
 800d910:	6862      	ldr	r2, [r4, #4]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d918:	6021      	str	r1, [r4, #0]
 800d91a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	0800fd0f 	.word	0x0800fd0f
 800d924:	0800fd26 	.word	0x0800fd26

0800d928 <__multadd>:
 800d928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d92c:	4607      	mov	r7, r0
 800d92e:	460c      	mov	r4, r1
 800d930:	461e      	mov	r6, r3
 800d932:	2000      	movs	r0, #0
 800d934:	690d      	ldr	r5, [r1, #16]
 800d936:	f101 0c14 	add.w	ip, r1, #20
 800d93a:	f8dc 3000 	ldr.w	r3, [ip]
 800d93e:	3001      	adds	r0, #1
 800d940:	b299      	uxth	r1, r3
 800d942:	fb02 6101 	mla	r1, r2, r1, r6
 800d946:	0c1e      	lsrs	r6, r3, #16
 800d948:	0c0b      	lsrs	r3, r1, #16
 800d94a:	fb02 3306 	mla	r3, r2, r6, r3
 800d94e:	b289      	uxth	r1, r1
 800d950:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d954:	4285      	cmp	r5, r0
 800d956:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d95a:	f84c 1b04 	str.w	r1, [ip], #4
 800d95e:	dcec      	bgt.n	800d93a <__multadd+0x12>
 800d960:	b30e      	cbz	r6, 800d9a6 <__multadd+0x7e>
 800d962:	68a3      	ldr	r3, [r4, #8]
 800d964:	42ab      	cmp	r3, r5
 800d966:	dc19      	bgt.n	800d99c <__multadd+0x74>
 800d968:	6861      	ldr	r1, [r4, #4]
 800d96a:	4638      	mov	r0, r7
 800d96c:	3101      	adds	r1, #1
 800d96e:	f7ff ff79 	bl	800d864 <_Balloc>
 800d972:	4680      	mov	r8, r0
 800d974:	b928      	cbnz	r0, 800d982 <__multadd+0x5a>
 800d976:	4602      	mov	r2, r0
 800d978:	21ba      	movs	r1, #186	@ 0xba
 800d97a:	4b0c      	ldr	r3, [pc, #48]	@ (800d9ac <__multadd+0x84>)
 800d97c:	480c      	ldr	r0, [pc, #48]	@ (800d9b0 <__multadd+0x88>)
 800d97e:	f000 fe43 	bl	800e608 <__assert_func>
 800d982:	6922      	ldr	r2, [r4, #16]
 800d984:	f104 010c 	add.w	r1, r4, #12
 800d988:	3202      	adds	r2, #2
 800d98a:	0092      	lsls	r2, r2, #2
 800d98c:	300c      	adds	r0, #12
 800d98e:	f7ff fb12 	bl	800cfb6 <memcpy>
 800d992:	4621      	mov	r1, r4
 800d994:	4638      	mov	r0, r7
 800d996:	f7ff ffa5 	bl	800d8e4 <_Bfree>
 800d99a:	4644      	mov	r4, r8
 800d99c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	615e      	str	r6, [r3, #20]
 800d9a4:	6125      	str	r5, [r4, #16]
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ac:	0800fc9e 	.word	0x0800fc9e
 800d9b0:	0800fd26 	.word	0x0800fd26

0800d9b4 <__s2b>:
 800d9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9b8:	4615      	mov	r5, r2
 800d9ba:	2209      	movs	r2, #9
 800d9bc:	461f      	mov	r7, r3
 800d9be:	3308      	adds	r3, #8
 800d9c0:	460c      	mov	r4, r1
 800d9c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	db09      	blt.n	800d9e4 <__s2b+0x30>
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f7ff ff47 	bl	800d864 <_Balloc>
 800d9d6:	b940      	cbnz	r0, 800d9ea <__s2b+0x36>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	21d3      	movs	r1, #211	@ 0xd3
 800d9dc:	4b18      	ldr	r3, [pc, #96]	@ (800da40 <__s2b+0x8c>)
 800d9de:	4819      	ldr	r0, [pc, #100]	@ (800da44 <__s2b+0x90>)
 800d9e0:	f000 fe12 	bl	800e608 <__assert_func>
 800d9e4:	0052      	lsls	r2, r2, #1
 800d9e6:	3101      	adds	r1, #1
 800d9e8:	e7f0      	b.n	800d9cc <__s2b+0x18>
 800d9ea:	9b08      	ldr	r3, [sp, #32]
 800d9ec:	2d09      	cmp	r5, #9
 800d9ee:	6143      	str	r3, [r0, #20]
 800d9f0:	f04f 0301 	mov.w	r3, #1
 800d9f4:	6103      	str	r3, [r0, #16]
 800d9f6:	dd16      	ble.n	800da26 <__s2b+0x72>
 800d9f8:	f104 0909 	add.w	r9, r4, #9
 800d9fc:	46c8      	mov	r8, r9
 800d9fe:	442c      	add	r4, r5
 800da00:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da04:	4601      	mov	r1, r0
 800da06:	220a      	movs	r2, #10
 800da08:	4630      	mov	r0, r6
 800da0a:	3b30      	subs	r3, #48	@ 0x30
 800da0c:	f7ff ff8c 	bl	800d928 <__multadd>
 800da10:	45a0      	cmp	r8, r4
 800da12:	d1f5      	bne.n	800da00 <__s2b+0x4c>
 800da14:	f1a5 0408 	sub.w	r4, r5, #8
 800da18:	444c      	add	r4, r9
 800da1a:	1b2d      	subs	r5, r5, r4
 800da1c:	1963      	adds	r3, r4, r5
 800da1e:	42bb      	cmp	r3, r7
 800da20:	db04      	blt.n	800da2c <__s2b+0x78>
 800da22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da26:	2509      	movs	r5, #9
 800da28:	340a      	adds	r4, #10
 800da2a:	e7f6      	b.n	800da1a <__s2b+0x66>
 800da2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da30:	4601      	mov	r1, r0
 800da32:	220a      	movs	r2, #10
 800da34:	4630      	mov	r0, r6
 800da36:	3b30      	subs	r3, #48	@ 0x30
 800da38:	f7ff ff76 	bl	800d928 <__multadd>
 800da3c:	e7ee      	b.n	800da1c <__s2b+0x68>
 800da3e:	bf00      	nop
 800da40:	0800fc9e 	.word	0x0800fc9e
 800da44:	0800fd26 	.word	0x0800fd26

0800da48 <__hi0bits>:
 800da48:	4603      	mov	r3, r0
 800da4a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800da4e:	bf3a      	itte	cc
 800da50:	0403      	lslcc	r3, r0, #16
 800da52:	2010      	movcc	r0, #16
 800da54:	2000      	movcs	r0, #0
 800da56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da5a:	bf3c      	itt	cc
 800da5c:	021b      	lslcc	r3, r3, #8
 800da5e:	3008      	addcc	r0, #8
 800da60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da64:	bf3c      	itt	cc
 800da66:	011b      	lslcc	r3, r3, #4
 800da68:	3004      	addcc	r0, #4
 800da6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da6e:	bf3c      	itt	cc
 800da70:	009b      	lslcc	r3, r3, #2
 800da72:	3002      	addcc	r0, #2
 800da74:	2b00      	cmp	r3, #0
 800da76:	db05      	blt.n	800da84 <__hi0bits+0x3c>
 800da78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800da7c:	f100 0001 	add.w	r0, r0, #1
 800da80:	bf08      	it	eq
 800da82:	2020      	moveq	r0, #32
 800da84:	4770      	bx	lr

0800da86 <__lo0bits>:
 800da86:	6803      	ldr	r3, [r0, #0]
 800da88:	4602      	mov	r2, r0
 800da8a:	f013 0007 	ands.w	r0, r3, #7
 800da8e:	d00b      	beq.n	800daa8 <__lo0bits+0x22>
 800da90:	07d9      	lsls	r1, r3, #31
 800da92:	d421      	bmi.n	800dad8 <__lo0bits+0x52>
 800da94:	0798      	lsls	r0, r3, #30
 800da96:	bf49      	itett	mi
 800da98:	085b      	lsrmi	r3, r3, #1
 800da9a:	089b      	lsrpl	r3, r3, #2
 800da9c:	2001      	movmi	r0, #1
 800da9e:	6013      	strmi	r3, [r2, #0]
 800daa0:	bf5c      	itt	pl
 800daa2:	2002      	movpl	r0, #2
 800daa4:	6013      	strpl	r3, [r2, #0]
 800daa6:	4770      	bx	lr
 800daa8:	b299      	uxth	r1, r3
 800daaa:	b909      	cbnz	r1, 800dab0 <__lo0bits+0x2a>
 800daac:	2010      	movs	r0, #16
 800daae:	0c1b      	lsrs	r3, r3, #16
 800dab0:	b2d9      	uxtb	r1, r3
 800dab2:	b909      	cbnz	r1, 800dab8 <__lo0bits+0x32>
 800dab4:	3008      	adds	r0, #8
 800dab6:	0a1b      	lsrs	r3, r3, #8
 800dab8:	0719      	lsls	r1, r3, #28
 800daba:	bf04      	itt	eq
 800dabc:	091b      	lsreq	r3, r3, #4
 800dabe:	3004      	addeq	r0, #4
 800dac0:	0799      	lsls	r1, r3, #30
 800dac2:	bf04      	itt	eq
 800dac4:	089b      	lsreq	r3, r3, #2
 800dac6:	3002      	addeq	r0, #2
 800dac8:	07d9      	lsls	r1, r3, #31
 800daca:	d403      	bmi.n	800dad4 <__lo0bits+0x4e>
 800dacc:	085b      	lsrs	r3, r3, #1
 800dace:	f100 0001 	add.w	r0, r0, #1
 800dad2:	d003      	beq.n	800dadc <__lo0bits+0x56>
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	4770      	bx	lr
 800dad8:	2000      	movs	r0, #0
 800dada:	4770      	bx	lr
 800dadc:	2020      	movs	r0, #32
 800dade:	4770      	bx	lr

0800dae0 <__i2b>:
 800dae0:	b510      	push	{r4, lr}
 800dae2:	460c      	mov	r4, r1
 800dae4:	2101      	movs	r1, #1
 800dae6:	f7ff febd 	bl	800d864 <_Balloc>
 800daea:	4602      	mov	r2, r0
 800daec:	b928      	cbnz	r0, 800dafa <__i2b+0x1a>
 800daee:	f240 1145 	movw	r1, #325	@ 0x145
 800daf2:	4b04      	ldr	r3, [pc, #16]	@ (800db04 <__i2b+0x24>)
 800daf4:	4804      	ldr	r0, [pc, #16]	@ (800db08 <__i2b+0x28>)
 800daf6:	f000 fd87 	bl	800e608 <__assert_func>
 800dafa:	2301      	movs	r3, #1
 800dafc:	6144      	str	r4, [r0, #20]
 800dafe:	6103      	str	r3, [r0, #16]
 800db00:	bd10      	pop	{r4, pc}
 800db02:	bf00      	nop
 800db04:	0800fc9e 	.word	0x0800fc9e
 800db08:	0800fd26 	.word	0x0800fd26

0800db0c <__multiply>:
 800db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db10:	4617      	mov	r7, r2
 800db12:	690a      	ldr	r2, [r1, #16]
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	4689      	mov	r9, r1
 800db18:	429a      	cmp	r2, r3
 800db1a:	bfa2      	ittt	ge
 800db1c:	463b      	movge	r3, r7
 800db1e:	460f      	movge	r7, r1
 800db20:	4699      	movge	r9, r3
 800db22:	693d      	ldr	r5, [r7, #16]
 800db24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	6879      	ldr	r1, [r7, #4]
 800db2c:	eb05 060a 	add.w	r6, r5, sl
 800db30:	42b3      	cmp	r3, r6
 800db32:	b085      	sub	sp, #20
 800db34:	bfb8      	it	lt
 800db36:	3101      	addlt	r1, #1
 800db38:	f7ff fe94 	bl	800d864 <_Balloc>
 800db3c:	b930      	cbnz	r0, 800db4c <__multiply+0x40>
 800db3e:	4602      	mov	r2, r0
 800db40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800db44:	4b40      	ldr	r3, [pc, #256]	@ (800dc48 <__multiply+0x13c>)
 800db46:	4841      	ldr	r0, [pc, #260]	@ (800dc4c <__multiply+0x140>)
 800db48:	f000 fd5e 	bl	800e608 <__assert_func>
 800db4c:	f100 0414 	add.w	r4, r0, #20
 800db50:	4623      	mov	r3, r4
 800db52:	2200      	movs	r2, #0
 800db54:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800db58:	4573      	cmp	r3, lr
 800db5a:	d320      	bcc.n	800db9e <__multiply+0x92>
 800db5c:	f107 0814 	add.w	r8, r7, #20
 800db60:	f109 0114 	add.w	r1, r9, #20
 800db64:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800db68:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800db6c:	9302      	str	r3, [sp, #8]
 800db6e:	1beb      	subs	r3, r5, r7
 800db70:	3b15      	subs	r3, #21
 800db72:	f023 0303 	bic.w	r3, r3, #3
 800db76:	3304      	adds	r3, #4
 800db78:	3715      	adds	r7, #21
 800db7a:	42bd      	cmp	r5, r7
 800db7c:	bf38      	it	cc
 800db7e:	2304      	movcc	r3, #4
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	9b02      	ldr	r3, [sp, #8]
 800db84:	9103      	str	r1, [sp, #12]
 800db86:	428b      	cmp	r3, r1
 800db88:	d80c      	bhi.n	800dba4 <__multiply+0x98>
 800db8a:	2e00      	cmp	r6, #0
 800db8c:	dd03      	ble.n	800db96 <__multiply+0x8a>
 800db8e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800db92:	2b00      	cmp	r3, #0
 800db94:	d055      	beq.n	800dc42 <__multiply+0x136>
 800db96:	6106      	str	r6, [r0, #16]
 800db98:	b005      	add	sp, #20
 800db9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db9e:	f843 2b04 	str.w	r2, [r3], #4
 800dba2:	e7d9      	b.n	800db58 <__multiply+0x4c>
 800dba4:	f8b1 a000 	ldrh.w	sl, [r1]
 800dba8:	f1ba 0f00 	cmp.w	sl, #0
 800dbac:	d01f      	beq.n	800dbee <__multiply+0xe2>
 800dbae:	46c4      	mov	ip, r8
 800dbb0:	46a1      	mov	r9, r4
 800dbb2:	2700      	movs	r7, #0
 800dbb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dbb8:	f8d9 3000 	ldr.w	r3, [r9]
 800dbbc:	fa1f fb82 	uxth.w	fp, r2
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	fb0a 330b 	mla	r3, sl, fp, r3
 800dbc6:	443b      	add	r3, r7
 800dbc8:	f8d9 7000 	ldr.w	r7, [r9]
 800dbcc:	0c12      	lsrs	r2, r2, #16
 800dbce:	0c3f      	lsrs	r7, r7, #16
 800dbd0:	fb0a 7202 	mla	r2, sl, r2, r7
 800dbd4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbde:	4565      	cmp	r5, ip
 800dbe0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dbe4:	f849 3b04 	str.w	r3, [r9], #4
 800dbe8:	d8e4      	bhi.n	800dbb4 <__multiply+0xa8>
 800dbea:	9b01      	ldr	r3, [sp, #4]
 800dbec:	50e7      	str	r7, [r4, r3]
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	3104      	adds	r1, #4
 800dbf2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dbf6:	f1b9 0f00 	cmp.w	r9, #0
 800dbfa:	d020      	beq.n	800dc3e <__multiply+0x132>
 800dbfc:	4647      	mov	r7, r8
 800dbfe:	46a4      	mov	ip, r4
 800dc00:	f04f 0a00 	mov.w	sl, #0
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	f8b7 b000 	ldrh.w	fp, [r7]
 800dc0a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	fb09 220b 	mla	r2, r9, fp, r2
 800dc14:	4452      	add	r2, sl
 800dc16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc1a:	f84c 3b04 	str.w	r3, [ip], #4
 800dc1e:	f857 3b04 	ldr.w	r3, [r7], #4
 800dc22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc26:	f8bc 3000 	ldrh.w	r3, [ip]
 800dc2a:	42bd      	cmp	r5, r7
 800dc2c:	fb09 330a 	mla	r3, r9, sl, r3
 800dc30:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dc34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc38:	d8e5      	bhi.n	800dc06 <__multiply+0xfa>
 800dc3a:	9a01      	ldr	r2, [sp, #4]
 800dc3c:	50a3      	str	r3, [r4, r2]
 800dc3e:	3404      	adds	r4, #4
 800dc40:	e79f      	b.n	800db82 <__multiply+0x76>
 800dc42:	3e01      	subs	r6, #1
 800dc44:	e7a1      	b.n	800db8a <__multiply+0x7e>
 800dc46:	bf00      	nop
 800dc48:	0800fc9e 	.word	0x0800fc9e
 800dc4c:	0800fd26 	.word	0x0800fd26

0800dc50 <__pow5mult>:
 800dc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc54:	4615      	mov	r5, r2
 800dc56:	f012 0203 	ands.w	r2, r2, #3
 800dc5a:	4607      	mov	r7, r0
 800dc5c:	460e      	mov	r6, r1
 800dc5e:	d007      	beq.n	800dc70 <__pow5mult+0x20>
 800dc60:	4c25      	ldr	r4, [pc, #148]	@ (800dcf8 <__pow5mult+0xa8>)
 800dc62:	3a01      	subs	r2, #1
 800dc64:	2300      	movs	r3, #0
 800dc66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc6a:	f7ff fe5d 	bl	800d928 <__multadd>
 800dc6e:	4606      	mov	r6, r0
 800dc70:	10ad      	asrs	r5, r5, #2
 800dc72:	d03d      	beq.n	800dcf0 <__pow5mult+0xa0>
 800dc74:	69fc      	ldr	r4, [r7, #28]
 800dc76:	b97c      	cbnz	r4, 800dc98 <__pow5mult+0x48>
 800dc78:	2010      	movs	r0, #16
 800dc7a:	f001 fb55 	bl	800f328 <malloc>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	61f8      	str	r0, [r7, #28]
 800dc82:	b928      	cbnz	r0, 800dc90 <__pow5mult+0x40>
 800dc84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dc88:	4b1c      	ldr	r3, [pc, #112]	@ (800dcfc <__pow5mult+0xac>)
 800dc8a:	481d      	ldr	r0, [pc, #116]	@ (800dd00 <__pow5mult+0xb0>)
 800dc8c:	f000 fcbc 	bl	800e608 <__assert_func>
 800dc90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc94:	6004      	str	r4, [r0, #0]
 800dc96:	60c4      	str	r4, [r0, #12]
 800dc98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dc9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dca0:	b94c      	cbnz	r4, 800dcb6 <__pow5mult+0x66>
 800dca2:	f240 2171 	movw	r1, #625	@ 0x271
 800dca6:	4638      	mov	r0, r7
 800dca8:	f7ff ff1a 	bl	800dae0 <__i2b>
 800dcac:	2300      	movs	r3, #0
 800dcae:	4604      	mov	r4, r0
 800dcb0:	f8c8 0008 	str.w	r0, [r8, #8]
 800dcb4:	6003      	str	r3, [r0, #0]
 800dcb6:	f04f 0900 	mov.w	r9, #0
 800dcba:	07eb      	lsls	r3, r5, #31
 800dcbc:	d50a      	bpl.n	800dcd4 <__pow5mult+0x84>
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	f7ff ff22 	bl	800db0c <__multiply>
 800dcc8:	4680      	mov	r8, r0
 800dcca:	4631      	mov	r1, r6
 800dccc:	4638      	mov	r0, r7
 800dcce:	f7ff fe09 	bl	800d8e4 <_Bfree>
 800dcd2:	4646      	mov	r6, r8
 800dcd4:	106d      	asrs	r5, r5, #1
 800dcd6:	d00b      	beq.n	800dcf0 <__pow5mult+0xa0>
 800dcd8:	6820      	ldr	r0, [r4, #0]
 800dcda:	b938      	cbnz	r0, 800dcec <__pow5mult+0x9c>
 800dcdc:	4622      	mov	r2, r4
 800dcde:	4621      	mov	r1, r4
 800dce0:	4638      	mov	r0, r7
 800dce2:	f7ff ff13 	bl	800db0c <__multiply>
 800dce6:	6020      	str	r0, [r4, #0]
 800dce8:	f8c0 9000 	str.w	r9, [r0]
 800dcec:	4604      	mov	r4, r0
 800dcee:	e7e4      	b.n	800dcba <__pow5mult+0x6a>
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf6:	bf00      	nop
 800dcf8:	0800fea8 	.word	0x0800fea8
 800dcfc:	0800fd0f 	.word	0x0800fd0f
 800dd00:	0800fd26 	.word	0x0800fd26

0800dd04 <__lshift>:
 800dd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd08:	460c      	mov	r4, r1
 800dd0a:	4607      	mov	r7, r0
 800dd0c:	4691      	mov	r9, r2
 800dd0e:	6923      	ldr	r3, [r4, #16]
 800dd10:	6849      	ldr	r1, [r1, #4]
 800dd12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd16:	68a3      	ldr	r3, [r4, #8]
 800dd18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd1c:	f108 0601 	add.w	r6, r8, #1
 800dd20:	42b3      	cmp	r3, r6
 800dd22:	db0b      	blt.n	800dd3c <__lshift+0x38>
 800dd24:	4638      	mov	r0, r7
 800dd26:	f7ff fd9d 	bl	800d864 <_Balloc>
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	b948      	cbnz	r0, 800dd42 <__lshift+0x3e>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dd34:	4b27      	ldr	r3, [pc, #156]	@ (800ddd4 <__lshift+0xd0>)
 800dd36:	4828      	ldr	r0, [pc, #160]	@ (800ddd8 <__lshift+0xd4>)
 800dd38:	f000 fc66 	bl	800e608 <__assert_func>
 800dd3c:	3101      	adds	r1, #1
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	e7ee      	b.n	800dd20 <__lshift+0x1c>
 800dd42:	2300      	movs	r3, #0
 800dd44:	f100 0114 	add.w	r1, r0, #20
 800dd48:	f100 0210 	add.w	r2, r0, #16
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	4553      	cmp	r3, sl
 800dd50:	db33      	blt.n	800ddba <__lshift+0xb6>
 800dd52:	6920      	ldr	r0, [r4, #16]
 800dd54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd58:	f104 0314 	add.w	r3, r4, #20
 800dd5c:	f019 091f 	ands.w	r9, r9, #31
 800dd60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd68:	d02b      	beq.n	800ddc2 <__lshift+0xbe>
 800dd6a:	468a      	mov	sl, r1
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f1c9 0e20 	rsb	lr, r9, #32
 800dd72:	6818      	ldr	r0, [r3, #0]
 800dd74:	fa00 f009 	lsl.w	r0, r0, r9
 800dd78:	4310      	orrs	r0, r2
 800dd7a:	f84a 0b04 	str.w	r0, [sl], #4
 800dd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd82:	459c      	cmp	ip, r3
 800dd84:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd88:	d8f3      	bhi.n	800dd72 <__lshift+0x6e>
 800dd8a:	ebac 0304 	sub.w	r3, ip, r4
 800dd8e:	3b15      	subs	r3, #21
 800dd90:	f023 0303 	bic.w	r3, r3, #3
 800dd94:	3304      	adds	r3, #4
 800dd96:	f104 0015 	add.w	r0, r4, #21
 800dd9a:	4560      	cmp	r0, ip
 800dd9c:	bf88      	it	hi
 800dd9e:	2304      	movhi	r3, #4
 800dda0:	50ca      	str	r2, [r1, r3]
 800dda2:	b10a      	cbz	r2, 800dda8 <__lshift+0xa4>
 800dda4:	f108 0602 	add.w	r6, r8, #2
 800dda8:	3e01      	subs	r6, #1
 800ddaa:	4638      	mov	r0, r7
 800ddac:	4621      	mov	r1, r4
 800ddae:	612e      	str	r6, [r5, #16]
 800ddb0:	f7ff fd98 	bl	800d8e4 <_Bfree>
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddba:	f842 0f04 	str.w	r0, [r2, #4]!
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	e7c5      	b.n	800dd4e <__lshift+0x4a>
 800ddc2:	3904      	subs	r1, #4
 800ddc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc8:	459c      	cmp	ip, r3
 800ddca:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddce:	d8f9      	bhi.n	800ddc4 <__lshift+0xc0>
 800ddd0:	e7ea      	b.n	800dda8 <__lshift+0xa4>
 800ddd2:	bf00      	nop
 800ddd4:	0800fc9e 	.word	0x0800fc9e
 800ddd8:	0800fd26 	.word	0x0800fd26

0800dddc <__mcmp>:
 800dddc:	4603      	mov	r3, r0
 800ddde:	690a      	ldr	r2, [r1, #16]
 800dde0:	6900      	ldr	r0, [r0, #16]
 800dde2:	b530      	push	{r4, r5, lr}
 800dde4:	1a80      	subs	r0, r0, r2
 800dde6:	d10e      	bne.n	800de06 <__mcmp+0x2a>
 800dde8:	3314      	adds	r3, #20
 800ddea:	3114      	adds	r1, #20
 800ddec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ddf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ddf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ddf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ddfc:	4295      	cmp	r5, r2
 800ddfe:	d003      	beq.n	800de08 <__mcmp+0x2c>
 800de00:	d205      	bcs.n	800de0e <__mcmp+0x32>
 800de02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de06:	bd30      	pop	{r4, r5, pc}
 800de08:	42a3      	cmp	r3, r4
 800de0a:	d3f3      	bcc.n	800ddf4 <__mcmp+0x18>
 800de0c:	e7fb      	b.n	800de06 <__mcmp+0x2a>
 800de0e:	2001      	movs	r0, #1
 800de10:	e7f9      	b.n	800de06 <__mcmp+0x2a>
	...

0800de14 <__mdiff>:
 800de14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de18:	4689      	mov	r9, r1
 800de1a:	4606      	mov	r6, r0
 800de1c:	4611      	mov	r1, r2
 800de1e:	4648      	mov	r0, r9
 800de20:	4614      	mov	r4, r2
 800de22:	f7ff ffdb 	bl	800dddc <__mcmp>
 800de26:	1e05      	subs	r5, r0, #0
 800de28:	d112      	bne.n	800de50 <__mdiff+0x3c>
 800de2a:	4629      	mov	r1, r5
 800de2c:	4630      	mov	r0, r6
 800de2e:	f7ff fd19 	bl	800d864 <_Balloc>
 800de32:	4602      	mov	r2, r0
 800de34:	b928      	cbnz	r0, 800de42 <__mdiff+0x2e>
 800de36:	f240 2137 	movw	r1, #567	@ 0x237
 800de3a:	4b3e      	ldr	r3, [pc, #248]	@ (800df34 <__mdiff+0x120>)
 800de3c:	483e      	ldr	r0, [pc, #248]	@ (800df38 <__mdiff+0x124>)
 800de3e:	f000 fbe3 	bl	800e608 <__assert_func>
 800de42:	2301      	movs	r3, #1
 800de44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de48:	4610      	mov	r0, r2
 800de4a:	b003      	add	sp, #12
 800de4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de50:	bfbc      	itt	lt
 800de52:	464b      	movlt	r3, r9
 800de54:	46a1      	movlt	r9, r4
 800de56:	4630      	mov	r0, r6
 800de58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800de5c:	bfba      	itte	lt
 800de5e:	461c      	movlt	r4, r3
 800de60:	2501      	movlt	r5, #1
 800de62:	2500      	movge	r5, #0
 800de64:	f7ff fcfe 	bl	800d864 <_Balloc>
 800de68:	4602      	mov	r2, r0
 800de6a:	b918      	cbnz	r0, 800de74 <__mdiff+0x60>
 800de6c:	f240 2145 	movw	r1, #581	@ 0x245
 800de70:	4b30      	ldr	r3, [pc, #192]	@ (800df34 <__mdiff+0x120>)
 800de72:	e7e3      	b.n	800de3c <__mdiff+0x28>
 800de74:	f100 0b14 	add.w	fp, r0, #20
 800de78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800de7c:	f109 0310 	add.w	r3, r9, #16
 800de80:	60c5      	str	r5, [r0, #12]
 800de82:	f04f 0c00 	mov.w	ip, #0
 800de86:	f109 0514 	add.w	r5, r9, #20
 800de8a:	46d9      	mov	r9, fp
 800de8c:	6926      	ldr	r6, [r4, #16]
 800de8e:	f104 0e14 	add.w	lr, r4, #20
 800de92:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800de96:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800de9a:	9301      	str	r3, [sp, #4]
 800de9c:	9b01      	ldr	r3, [sp, #4]
 800de9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dea2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dea6:	b281      	uxth	r1, r0
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	fa1f f38a 	uxth.w	r3, sl
 800deae:	1a5b      	subs	r3, r3, r1
 800deb0:	0c00      	lsrs	r0, r0, #16
 800deb2:	4463      	add	r3, ip
 800deb4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800deb8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800debc:	b29b      	uxth	r3, r3
 800debe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dec2:	4576      	cmp	r6, lr
 800dec4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dec8:	f849 3b04 	str.w	r3, [r9], #4
 800decc:	d8e6      	bhi.n	800de9c <__mdiff+0x88>
 800dece:	1b33      	subs	r3, r6, r4
 800ded0:	3b15      	subs	r3, #21
 800ded2:	f023 0303 	bic.w	r3, r3, #3
 800ded6:	3415      	adds	r4, #21
 800ded8:	3304      	adds	r3, #4
 800deda:	42a6      	cmp	r6, r4
 800dedc:	bf38      	it	cc
 800dede:	2304      	movcc	r3, #4
 800dee0:	441d      	add	r5, r3
 800dee2:	445b      	add	r3, fp
 800dee4:	461e      	mov	r6, r3
 800dee6:	462c      	mov	r4, r5
 800dee8:	4544      	cmp	r4, r8
 800deea:	d30e      	bcc.n	800df0a <__mdiff+0xf6>
 800deec:	f108 0103 	add.w	r1, r8, #3
 800def0:	1b49      	subs	r1, r1, r5
 800def2:	f021 0103 	bic.w	r1, r1, #3
 800def6:	3d03      	subs	r5, #3
 800def8:	45a8      	cmp	r8, r5
 800defa:	bf38      	it	cc
 800defc:	2100      	movcc	r1, #0
 800defe:	440b      	add	r3, r1
 800df00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df04:	b199      	cbz	r1, 800df2e <__mdiff+0x11a>
 800df06:	6117      	str	r7, [r2, #16]
 800df08:	e79e      	b.n	800de48 <__mdiff+0x34>
 800df0a:	46e6      	mov	lr, ip
 800df0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800df10:	fa1f fc81 	uxth.w	ip, r1
 800df14:	44f4      	add	ip, lr
 800df16:	0c08      	lsrs	r0, r1, #16
 800df18:	4471      	add	r1, lr
 800df1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800df1e:	b289      	uxth	r1, r1
 800df20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800df24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df28:	f846 1b04 	str.w	r1, [r6], #4
 800df2c:	e7dc      	b.n	800dee8 <__mdiff+0xd4>
 800df2e:	3f01      	subs	r7, #1
 800df30:	e7e6      	b.n	800df00 <__mdiff+0xec>
 800df32:	bf00      	nop
 800df34:	0800fc9e 	.word	0x0800fc9e
 800df38:	0800fd26 	.word	0x0800fd26

0800df3c <__ulp>:
 800df3c:	4b0e      	ldr	r3, [pc, #56]	@ (800df78 <__ulp+0x3c>)
 800df3e:	400b      	ands	r3, r1
 800df40:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800df44:	2b00      	cmp	r3, #0
 800df46:	dc08      	bgt.n	800df5a <__ulp+0x1e>
 800df48:	425b      	negs	r3, r3
 800df4a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800df4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df52:	da04      	bge.n	800df5e <__ulp+0x22>
 800df54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800df58:	4113      	asrs	r3, r2
 800df5a:	2200      	movs	r2, #0
 800df5c:	e008      	b.n	800df70 <__ulp+0x34>
 800df5e:	f1a2 0314 	sub.w	r3, r2, #20
 800df62:	2b1e      	cmp	r3, #30
 800df64:	bfd6      	itet	le
 800df66:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800df6a:	2201      	movgt	r2, #1
 800df6c:	40da      	lsrle	r2, r3
 800df6e:	2300      	movs	r3, #0
 800df70:	4619      	mov	r1, r3
 800df72:	4610      	mov	r0, r2
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	7ff00000 	.word	0x7ff00000

0800df7c <__b2d>:
 800df7c:	6902      	ldr	r2, [r0, #16]
 800df7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df80:	f100 0614 	add.w	r6, r0, #20
 800df84:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800df88:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800df8c:	4f1e      	ldr	r7, [pc, #120]	@ (800e008 <__b2d+0x8c>)
 800df8e:	4620      	mov	r0, r4
 800df90:	f7ff fd5a 	bl	800da48 <__hi0bits>
 800df94:	4603      	mov	r3, r0
 800df96:	f1c0 0020 	rsb	r0, r0, #32
 800df9a:	2b0a      	cmp	r3, #10
 800df9c:	f1a2 0504 	sub.w	r5, r2, #4
 800dfa0:	6008      	str	r0, [r1, #0]
 800dfa2:	dc12      	bgt.n	800dfca <__b2d+0x4e>
 800dfa4:	42ae      	cmp	r6, r5
 800dfa6:	bf2c      	ite	cs
 800dfa8:	2200      	movcs	r2, #0
 800dfaa:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800dfae:	f1c3 0c0b 	rsb	ip, r3, #11
 800dfb2:	3315      	adds	r3, #21
 800dfb4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800dfb8:	fa04 f303 	lsl.w	r3, r4, r3
 800dfbc:	fa22 f20c 	lsr.w	r2, r2, ip
 800dfc0:	ea4e 0107 	orr.w	r1, lr, r7
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfca:	42ae      	cmp	r6, r5
 800dfcc:	bf36      	itet	cc
 800dfce:	f1a2 0508 	subcc.w	r5, r2, #8
 800dfd2:	2200      	movcs	r2, #0
 800dfd4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800dfd8:	3b0b      	subs	r3, #11
 800dfda:	d012      	beq.n	800e002 <__b2d+0x86>
 800dfdc:	f1c3 0720 	rsb	r7, r3, #32
 800dfe0:	fa22 f107 	lsr.w	r1, r2, r7
 800dfe4:	409c      	lsls	r4, r3
 800dfe6:	430c      	orrs	r4, r1
 800dfe8:	42b5      	cmp	r5, r6
 800dfea:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800dfee:	bf94      	ite	ls
 800dff0:	2400      	movls	r4, #0
 800dff2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800dff6:	409a      	lsls	r2, r3
 800dff8:	40fc      	lsrs	r4, r7
 800dffa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800dffe:	4322      	orrs	r2, r4
 800e000:	e7e1      	b.n	800dfc6 <__b2d+0x4a>
 800e002:	ea44 0107 	orr.w	r1, r4, r7
 800e006:	e7de      	b.n	800dfc6 <__b2d+0x4a>
 800e008:	3ff00000 	.word	0x3ff00000

0800e00c <__d2b>:
 800e00c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800e010:	2101      	movs	r1, #1
 800e012:	4690      	mov	r8, r2
 800e014:	4699      	mov	r9, r3
 800e016:	9e08      	ldr	r6, [sp, #32]
 800e018:	f7ff fc24 	bl	800d864 <_Balloc>
 800e01c:	4604      	mov	r4, r0
 800e01e:	b930      	cbnz	r0, 800e02e <__d2b+0x22>
 800e020:	4602      	mov	r2, r0
 800e022:	f240 310f 	movw	r1, #783	@ 0x30f
 800e026:	4b23      	ldr	r3, [pc, #140]	@ (800e0b4 <__d2b+0xa8>)
 800e028:	4823      	ldr	r0, [pc, #140]	@ (800e0b8 <__d2b+0xac>)
 800e02a:	f000 faed 	bl	800e608 <__assert_func>
 800e02e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e032:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e036:	b10d      	cbz	r5, 800e03c <__d2b+0x30>
 800e038:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	f1b8 0300 	subs.w	r3, r8, #0
 800e042:	d024      	beq.n	800e08e <__d2b+0x82>
 800e044:	4668      	mov	r0, sp
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	f7ff fd1d 	bl	800da86 <__lo0bits>
 800e04c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e050:	b1d8      	cbz	r0, 800e08a <__d2b+0x7e>
 800e052:	f1c0 0320 	rsb	r3, r0, #32
 800e056:	fa02 f303 	lsl.w	r3, r2, r3
 800e05a:	430b      	orrs	r3, r1
 800e05c:	40c2      	lsrs	r2, r0
 800e05e:	6163      	str	r3, [r4, #20]
 800e060:	9201      	str	r2, [sp, #4]
 800e062:	9b01      	ldr	r3, [sp, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	bf0c      	ite	eq
 800e068:	2201      	moveq	r2, #1
 800e06a:	2202      	movne	r2, #2
 800e06c:	61a3      	str	r3, [r4, #24]
 800e06e:	6122      	str	r2, [r4, #16]
 800e070:	b1ad      	cbz	r5, 800e09e <__d2b+0x92>
 800e072:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e076:	4405      	add	r5, r0
 800e078:	6035      	str	r5, [r6, #0]
 800e07a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e080:	6018      	str	r0, [r3, #0]
 800e082:	4620      	mov	r0, r4
 800e084:	b002      	add	sp, #8
 800e086:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e08a:	6161      	str	r1, [r4, #20]
 800e08c:	e7e9      	b.n	800e062 <__d2b+0x56>
 800e08e:	a801      	add	r0, sp, #4
 800e090:	f7ff fcf9 	bl	800da86 <__lo0bits>
 800e094:	9b01      	ldr	r3, [sp, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	6163      	str	r3, [r4, #20]
 800e09a:	3020      	adds	r0, #32
 800e09c:	e7e7      	b.n	800e06e <__d2b+0x62>
 800e09e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e0a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0a6:	6030      	str	r0, [r6, #0]
 800e0a8:	6918      	ldr	r0, [r3, #16]
 800e0aa:	f7ff fccd 	bl	800da48 <__hi0bits>
 800e0ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0b2:	e7e4      	b.n	800e07e <__d2b+0x72>
 800e0b4:	0800fc9e 	.word	0x0800fc9e
 800e0b8:	0800fd26 	.word	0x0800fd26

0800e0bc <__ratio>:
 800e0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c0:	b085      	sub	sp, #20
 800e0c2:	e9cd 1000 	strd	r1, r0, [sp]
 800e0c6:	a902      	add	r1, sp, #8
 800e0c8:	f7ff ff58 	bl	800df7c <__b2d>
 800e0cc:	468b      	mov	fp, r1
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	460f      	mov	r7, r1
 800e0d2:	9800      	ldr	r0, [sp, #0]
 800e0d4:	a903      	add	r1, sp, #12
 800e0d6:	f7ff ff51 	bl	800df7c <__b2d>
 800e0da:	460d      	mov	r5, r1
 800e0dc:	9b01      	ldr	r3, [sp, #4]
 800e0de:	4689      	mov	r9, r1
 800e0e0:	6919      	ldr	r1, [r3, #16]
 800e0e2:	9b00      	ldr	r3, [sp, #0]
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	1ac9      	subs	r1, r1, r3
 800e0ec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e0f0:	1a9b      	subs	r3, r3, r2
 800e0f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	bfcd      	iteet	gt
 800e0fa:	463a      	movgt	r2, r7
 800e0fc:	462a      	movle	r2, r5
 800e0fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e102:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e106:	bfd8      	it	le
 800e108:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e10c:	464b      	mov	r3, r9
 800e10e:	4622      	mov	r2, r4
 800e110:	4659      	mov	r1, fp
 800e112:	f7f2 fb0b 	bl	800072c <__aeabi_ddiv>
 800e116:	b005      	add	sp, #20
 800e118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e11c <_mprec_log10>:
 800e11c:	2817      	cmp	r0, #23
 800e11e:	b5d0      	push	{r4, r6, r7, lr}
 800e120:	4604      	mov	r4, r0
 800e122:	dc05      	bgt.n	800e130 <_mprec_log10+0x14>
 800e124:	4b08      	ldr	r3, [pc, #32]	@ (800e148 <_mprec_log10+0x2c>)
 800e126:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800e12a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e12e:	bdd0      	pop	{r4, r6, r7, pc}
 800e130:	2000      	movs	r0, #0
 800e132:	2600      	movs	r6, #0
 800e134:	4905      	ldr	r1, [pc, #20]	@ (800e14c <_mprec_log10+0x30>)
 800e136:	4f06      	ldr	r7, [pc, #24]	@ (800e150 <_mprec_log10+0x34>)
 800e138:	4632      	mov	r2, r6
 800e13a:	463b      	mov	r3, r7
 800e13c:	f7f2 f9cc 	bl	80004d8 <__aeabi_dmul>
 800e140:	3c01      	subs	r4, #1
 800e142:	d1f9      	bne.n	800e138 <_mprec_log10+0x1c>
 800e144:	e7f3      	b.n	800e12e <_mprec_log10+0x12>
 800e146:	bf00      	nop
 800e148:	0800fee0 	.word	0x0800fee0
 800e14c:	3ff00000 	.word	0x3ff00000
 800e150:	40240000 	.word	0x40240000

0800e154 <__copybits>:
 800e154:	3901      	subs	r1, #1
 800e156:	b570      	push	{r4, r5, r6, lr}
 800e158:	1149      	asrs	r1, r1, #5
 800e15a:	6914      	ldr	r4, [r2, #16]
 800e15c:	3101      	adds	r1, #1
 800e15e:	f102 0314 	add.w	r3, r2, #20
 800e162:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e16a:	1f05      	subs	r5, r0, #4
 800e16c:	42a3      	cmp	r3, r4
 800e16e:	d30c      	bcc.n	800e18a <__copybits+0x36>
 800e170:	1aa3      	subs	r3, r4, r2
 800e172:	3b11      	subs	r3, #17
 800e174:	f023 0303 	bic.w	r3, r3, #3
 800e178:	3211      	adds	r2, #17
 800e17a:	42a2      	cmp	r2, r4
 800e17c:	bf88      	it	hi
 800e17e:	2300      	movhi	r3, #0
 800e180:	4418      	add	r0, r3
 800e182:	2300      	movs	r3, #0
 800e184:	4288      	cmp	r0, r1
 800e186:	d305      	bcc.n	800e194 <__copybits+0x40>
 800e188:	bd70      	pop	{r4, r5, r6, pc}
 800e18a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e18e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e192:	e7eb      	b.n	800e16c <__copybits+0x18>
 800e194:	f840 3b04 	str.w	r3, [r0], #4
 800e198:	e7f4      	b.n	800e184 <__copybits+0x30>

0800e19a <__any_on>:
 800e19a:	f100 0214 	add.w	r2, r0, #20
 800e19e:	6900      	ldr	r0, [r0, #16]
 800e1a0:	114b      	asrs	r3, r1, #5
 800e1a2:	4298      	cmp	r0, r3
 800e1a4:	b510      	push	{r4, lr}
 800e1a6:	db11      	blt.n	800e1cc <__any_on+0x32>
 800e1a8:	dd0a      	ble.n	800e1c0 <__any_on+0x26>
 800e1aa:	f011 011f 	ands.w	r1, r1, #31
 800e1ae:	d007      	beq.n	800e1c0 <__any_on+0x26>
 800e1b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e1b4:	fa24 f001 	lsr.w	r0, r4, r1
 800e1b8:	fa00 f101 	lsl.w	r1, r0, r1
 800e1bc:	428c      	cmp	r4, r1
 800e1be:	d10b      	bne.n	800e1d8 <__any_on+0x3e>
 800e1c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d803      	bhi.n	800e1d0 <__any_on+0x36>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	bd10      	pop	{r4, pc}
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	e7f7      	b.n	800e1c0 <__any_on+0x26>
 800e1d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1d4:	2900      	cmp	r1, #0
 800e1d6:	d0f5      	beq.n	800e1c4 <__any_on+0x2a>
 800e1d8:	2001      	movs	r0, #1
 800e1da:	e7f6      	b.n	800e1ca <__any_on+0x30>

0800e1dc <__ascii_wctomb>:
 800e1dc:	4603      	mov	r3, r0
 800e1de:	4608      	mov	r0, r1
 800e1e0:	b141      	cbz	r1, 800e1f4 <__ascii_wctomb+0x18>
 800e1e2:	2aff      	cmp	r2, #255	@ 0xff
 800e1e4:	d904      	bls.n	800e1f0 <__ascii_wctomb+0x14>
 800e1e6:	228a      	movs	r2, #138	@ 0x8a
 800e1e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1ec:	601a      	str	r2, [r3, #0]
 800e1ee:	4770      	bx	lr
 800e1f0:	2001      	movs	r0, #1
 800e1f2:	700a      	strb	r2, [r1, #0]
 800e1f4:	4770      	bx	lr

0800e1f6 <print_e>:
 800e1f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1f8:	b08b      	sub	sp, #44	@ 0x2c
 800e1fa:	460d      	mov	r5, r1
 800e1fc:	a908      	add	r1, sp, #32
 800e1fe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e200:	9104      	str	r1, [sp, #16]
 800e202:	a907      	add	r1, sp, #28
 800e204:	9103      	str	r1, [sp, #12]
 800e206:	a909      	add	r1, sp, #36	@ 0x24
 800e208:	9102      	str	r1, [sp, #8]
 800e20a:	1c71      	adds	r1, r6, #1
 800e20c:	9101      	str	r1, [sp, #4]
 800e20e:	2102      	movs	r1, #2
 800e210:	9100      	str	r1, [sp, #0]
 800e212:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 800e216:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800e218:	f000 fab2 	bl	800e780 <_dtoa_r>
 800e21c:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e222:	4601      	mov	r1, r0
 800e224:	429a      	cmp	r2, r3
 800e226:	d104      	bne.n	800e232 <print_e+0x3c>
 800e228:	4628      	mov	r0, r5
 800e22a:	f000 f9e5 	bl	800e5f8 <strcpy>
 800e22e:	b00b      	add	sp, #44	@ 0x2c
 800e230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e232:	462b      	mov	r3, r5
 800e234:	7800      	ldrb	r0, [r0, #0]
 800e236:	2e00      	cmp	r6, #0
 800e238:	f803 0b01 	strb.w	r0, [r3], #1
 800e23c:	bfc8      	it	gt
 800e23e:	2401      	movgt	r4, #1
 800e240:	202e      	movs	r0, #46	@ 0x2e
 800e242:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800e246:	b10d      	cbz	r5, 800e24c <print_e+0x56>
 800e248:	2e00      	cmp	r6, #0
 800e24a:	dc29      	bgt.n	800e2a0 <print_e+0xaa>
 800e24c:	2f67      	cmp	r7, #103	@ 0x67
 800e24e:	d038      	beq.n	800e2c2 <print_e+0xcc>
 800e250:	2f47      	cmp	r7, #71	@ 0x47
 800e252:	d038      	beq.n	800e2c6 <print_e+0xd0>
 800e254:	212e      	movs	r1, #46	@ 0x2e
 800e256:	2030      	movs	r0, #48	@ 0x30
 800e258:	2e00      	cmp	r6, #0
 800e25a:	dc2a      	bgt.n	800e2b2 <print_e+0xbc>
 800e25c:	1e51      	subs	r1, r2, #1
 800e25e:	2900      	cmp	r1, #0
 800e260:	bfa8      	it	ge
 800e262:	222b      	movge	r2, #43	@ 0x2b
 800e264:	9109      	str	r1, [sp, #36]	@ 0x24
 800e266:	bfbd      	ittte	lt
 800e268:	212d      	movlt	r1, #45	@ 0x2d
 800e26a:	f1c2 0201 	rsblt	r2, r2, #1
 800e26e:	9209      	strlt	r2, [sp, #36]	@ 0x24
 800e270:	705a      	strbge	r2, [r3, #1]
 800e272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e274:	bfb8      	it	lt
 800e276:	7059      	strblt	r1, [r3, #1]
 800e278:	2a63      	cmp	r2, #99	@ 0x63
 800e27a:	701f      	strb	r7, [r3, #0]
 800e27c:	dc25      	bgt.n	800e2ca <print_e+0xd4>
 800e27e:	1c98      	adds	r0, r3, #2
 800e280:	220a      	movs	r2, #10
 800e282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e284:	fb93 f2f2 	sdiv	r2, r3, r2
 800e288:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800e28c:	7001      	strb	r1, [r0, #0]
 800e28e:	f06f 0109 	mvn.w	r1, #9
 800e292:	fb01 3302 	mla	r3, r1, r2, r3
 800e296:	3330      	adds	r3, #48	@ 0x30
 800e298:	7043      	strb	r3, [r0, #1]
 800e29a:	2300      	movs	r3, #0
 800e29c:	7083      	strb	r3, [r0, #2]
 800e29e:	e7c6      	b.n	800e22e <print_e+0x38>
 800e2a0:	b10c      	cbz	r4, 800e2a6 <print_e+0xb0>
 800e2a2:	f803 0b01 	strb.w	r0, [r3], #1
 800e2a6:	780c      	ldrb	r4, [r1, #0]
 800e2a8:	3e01      	subs	r6, #1
 800e2aa:	f803 4b01 	strb.w	r4, [r3], #1
 800e2ae:	2400      	movs	r4, #0
 800e2b0:	e7c7      	b.n	800e242 <print_e+0x4c>
 800e2b2:	b10c      	cbz	r4, 800e2b8 <print_e+0xc2>
 800e2b4:	f803 1b01 	strb.w	r1, [r3], #1
 800e2b8:	2400      	movs	r4, #0
 800e2ba:	f803 0b01 	strb.w	r0, [r3], #1
 800e2be:	3e01      	subs	r6, #1
 800e2c0:	e7ca      	b.n	800e258 <print_e+0x62>
 800e2c2:	2765      	movs	r7, #101	@ 0x65
 800e2c4:	e7ca      	b.n	800e25c <print_e+0x66>
 800e2c6:	2745      	movs	r7, #69	@ 0x45
 800e2c8:	e7c8      	b.n	800e25c <print_e+0x66>
 800e2ca:	2164      	movs	r1, #100	@ 0x64
 800e2cc:	fb92 f1f1 	sdiv	r1, r2, r1
 800e2d0:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 800e2d4:	1cd8      	adds	r0, r3, #3
 800e2d6:	709c      	strb	r4, [r3, #2]
 800e2d8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800e2dc:	fb03 2201 	mla	r2, r3, r1, r2
 800e2e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2e2:	e7cd      	b.n	800e280 <print_e+0x8a>
 800e2e4:	0000      	movs	r0, r0
	...

0800e2e8 <_gcvt>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	4614      	mov	r4, r2
 800e2ee:	461d      	mov	r5, r3
 800e2f0:	b08a      	sub	sp, #40	@ 0x28
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	@ 0x48
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4681      	mov	r9, r0
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	4620      	mov	r0, r4
 800e300:	f7f2 fb5c 	bl	80009bc <__aeabi_dcmplt>
 800e304:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e306:	4682      	mov	sl, r0
 800e308:	2200      	movs	r2, #0
 800e30a:	2300      	movs	r3, #0
 800e30c:	b1c0      	cbz	r0, 800e340 <_gcvt+0x58>
 800e30e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800e312:	461d      	mov	r5, r3
 800e314:	a35a      	add	r3, pc, #360	@ (adr r3, 800e480 <_gcvt+0x198>)
 800e316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31a:	4620      	mov	r0, r4
 800e31c:	4629      	mov	r1, r5
 800e31e:	f7f2 fb57 	bl	80009d0 <__aeabi_dcmple>
 800e322:	b1d8      	cbz	r0, 800e35c <_gcvt+0x74>
 800e324:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e328:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	9000      	str	r0, [sp, #0]
 800e330:	4622      	mov	r2, r4
 800e332:	462b      	mov	r3, r5
 800e334:	4631      	mov	r1, r6
 800e336:	4648      	mov	r0, r9
 800e338:	9702      	str	r7, [sp, #8]
 800e33a:	f7ff ff5c 	bl	800e1f6 <print_e>
 800e33e:	e009      	b.n	800e354 <_gcvt+0x6c>
 800e340:	4620      	mov	r0, r4
 800e342:	4629      	mov	r1, r5
 800e344:	f7f2 fb30 	bl	80009a8 <__aeabi_dcmpeq>
 800e348:	2800      	cmp	r0, #0
 800e34a:	d0e3      	beq.n	800e314 <_gcvt+0x2c>
 800e34c:	2330      	movs	r3, #48	@ 0x30
 800e34e:	f886 a001 	strb.w	sl, [r6, #1]
 800e352:	7033      	strb	r3, [r6, #0]
 800e354:	4630      	mov	r0, r6
 800e356:	b00a      	add	sp, #40	@ 0x28
 800e358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e35c:	4640      	mov	r0, r8
 800e35e:	f7ff fedd 	bl	800e11c <_mprec_log10>
 800e362:	4622      	mov	r2, r4
 800e364:	462b      	mov	r3, r5
 800e366:	f7f2 fb33 	bl	80009d0 <__aeabi_dcmple>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d1da      	bne.n	800e324 <_gcvt+0x3c>
 800e36e:	ab09      	add	r3, sp, #36	@ 0x24
 800e370:	9304      	str	r3, [sp, #16]
 800e372:	ab08      	add	r3, sp, #32
 800e374:	9303      	str	r3, [sp, #12]
 800e376:	ab07      	add	r3, sp, #28
 800e378:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800e37c:	2302      	movs	r3, #2
 800e37e:	4622      	mov	r2, r4
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	4648      	mov	r0, r9
 800e384:	462b      	mov	r3, r5
 800e386:	f000 f9fb 	bl	800e780 <_dtoa_r>
 800e38a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e38e:	9a07      	ldr	r2, [sp, #28]
 800e390:	4601      	mov	r1, r0
 800e392:	429a      	cmp	r2, r3
 800e394:	d045      	beq.n	800e422 <_gcvt+0x13a>
 800e396:	4633      	mov	r3, r6
 800e398:	460c      	mov	r4, r1
 800e39a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e39e:	9a07      	ldr	r2, [sp, #28]
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d142      	bne.n	800e42a <_gcvt+0x142>
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800e3aa:	eb06 0008 	add.w	r0, r6, r8
 800e3ae:	1ac0      	subs	r0, r0, r3
 800e3b0:	2a00      	cmp	r2, #0
 800e3b2:	4615      	mov	r5, r2
 800e3b4:	dc45      	bgt.n	800e442 <_gcvt+0x15a>
 800e3b6:	b101      	cbz	r1, 800e3ba <_gcvt+0xd2>
 800e3b8:	9207      	str	r2, [sp, #28]
 800e3ba:	b90f      	cbnz	r7, 800e3c0 <_gcvt+0xd8>
 800e3bc:	7822      	ldrb	r2, [r4, #0]
 800e3be:	b36a      	cbz	r2, 800e41c <_gcvt+0x134>
 800e3c0:	42b3      	cmp	r3, r6
 800e3c2:	bf04      	itt	eq
 800e3c4:	2230      	moveq	r2, #48	@ 0x30
 800e3c6:	f803 2b01 	strbeq.w	r2, [r3], #1
 800e3ca:	222e      	movs	r2, #46	@ 0x2e
 800e3cc:	f04f 0e00 	mov.w	lr, #0
 800e3d0:	701a      	strb	r2, [r3, #0]
 800e3d2:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	9907      	ldr	r1, [sp, #28]
 800e3da:	1acd      	subs	r5, r1, r3
 800e3dc:	42d5      	cmn	r5, r2
 800e3de:	d438      	bmi.n	800e452 <_gcvt+0x16a>
 800e3e0:	2900      	cmp	r1, #0
 800e3e2:	bfcc      	ite	gt
 800e3e4:	f04f 0c00 	movgt.w	ip, #0
 800e3e8:	f04f 0c01 	movle.w	ip, #1
 800e3ec:	424a      	negs	r2, r1
 800e3ee:	f1bc 0f00 	cmp.w	ip, #0
 800e3f2:	bf14      	ite	ne
 800e3f4:	4615      	movne	r5, r2
 800e3f6:	2500      	moveq	r5, #0
 800e3f8:	3501      	adds	r5, #1
 800e3fa:	442b      	add	r3, r5
 800e3fc:	f1be 0f00 	cmp.w	lr, #0
 800e400:	d005      	beq.n	800e40e <_gcvt+0x126>
 800e402:	f1bc 0f00 	cmp.w	ip, #0
 800e406:	bf08      	it	eq
 800e408:	2200      	moveq	r2, #0
 800e40a:	440a      	add	r2, r1
 800e40c:	9207      	str	r2, [sp, #28]
 800e40e:	1e62      	subs	r2, r4, #1
 800e410:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e414:	b109      	cbz	r1, 800e41a <_gcvt+0x132>
 800e416:	2800      	cmp	r0, #0
 800e418:	dc20      	bgt.n	800e45c <_gcvt+0x174>
 800e41a:	bb67      	cbnz	r7, 800e476 <_gcvt+0x18e>
 800e41c:	2200      	movs	r2, #0
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e798      	b.n	800e354 <_gcvt+0x6c>
 800e422:	4630      	mov	r0, r6
 800e424:	f000 f8e8 	bl	800e5f8 <strcpy>
 800e428:	e794      	b.n	800e354 <_gcvt+0x6c>
 800e42a:	2a00      	cmp	r2, #0
 800e42c:	ddba      	ble.n	800e3a4 <_gcvt+0xbc>
 800e42e:	3a01      	subs	r2, #1
 800e430:	f803 0b01 	strb.w	r0, [r3], #1
 800e434:	9207      	str	r2, [sp, #28]
 800e436:	e7af      	b.n	800e398 <_gcvt+0xb0>
 800e438:	2101      	movs	r1, #1
 800e43a:	f803 cb01 	strb.w	ip, [r3], #1
 800e43e:	3801      	subs	r0, #1
 800e440:	e7b6      	b.n	800e3b0 <_gcvt+0xc8>
 800e442:	2800      	cmp	r0, #0
 800e444:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 800e448:	dcf6      	bgt.n	800e438 <_gcvt+0x150>
 800e44a:	2900      	cmp	r1, #0
 800e44c:	d0b5      	beq.n	800e3ba <_gcvt+0xd2>
 800e44e:	9507      	str	r5, [sp, #28]
 800e450:	e7b3      	b.n	800e3ba <_gcvt+0xd2>
 800e452:	f04f 0e01 	mov.w	lr, #1
 800e456:	f802 cf01 	strb.w	ip, [r2, #1]!
 800e45a:	e7bf      	b.n	800e3dc <_gcvt+0xf4>
 800e45c:	f803 1b01 	strb.w	r1, [r3], #1
 800e460:	3801      	subs	r0, #1
 800e462:	e7d5      	b.n	800e410 <_gcvt+0x128>
 800e464:	f802 5b01 	strb.w	r5, [r2], #1
 800e468:	1aa1      	subs	r1, r4, r2
 800e46a:	2900      	cmp	r1, #0
 800e46c:	dcfa      	bgt.n	800e464 <_gcvt+0x17c>
 800e46e:	2800      	cmp	r0, #0
 800e470:	bfa8      	it	ge
 800e472:	181b      	addge	r3, r3, r0
 800e474:	e7d2      	b.n	800e41c <_gcvt+0x134>
 800e476:	461a      	mov	r2, r3
 800e478:	2530      	movs	r5, #48	@ 0x30
 800e47a:	181c      	adds	r4, r3, r0
 800e47c:	e7f4      	b.n	800e468 <_gcvt+0x180>
 800e47e:	bf00      	nop
 800e480:	eb1c432d 	.word	0xeb1c432d
 800e484:	3f1a36e2 	.word	0x3f1a36e2

0800e488 <__sflush_r>:
 800e488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e48e:	0716      	lsls	r6, r2, #28
 800e490:	4605      	mov	r5, r0
 800e492:	460c      	mov	r4, r1
 800e494:	d454      	bmi.n	800e540 <__sflush_r+0xb8>
 800e496:	684b      	ldr	r3, [r1, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	dc02      	bgt.n	800e4a2 <__sflush_r+0x1a>
 800e49c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	dd48      	ble.n	800e534 <__sflush_r+0xac>
 800e4a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4a4:	2e00      	cmp	r6, #0
 800e4a6:	d045      	beq.n	800e534 <__sflush_r+0xac>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4ae:	682f      	ldr	r7, [r5, #0]
 800e4b0:	6a21      	ldr	r1, [r4, #32]
 800e4b2:	602b      	str	r3, [r5, #0]
 800e4b4:	d030      	beq.n	800e518 <__sflush_r+0x90>
 800e4b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4b8:	89a3      	ldrh	r3, [r4, #12]
 800e4ba:	0759      	lsls	r1, r3, #29
 800e4bc:	d505      	bpl.n	800e4ca <__sflush_r+0x42>
 800e4be:	6863      	ldr	r3, [r4, #4]
 800e4c0:	1ad2      	subs	r2, r2, r3
 800e4c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e4c4:	b10b      	cbz	r3, 800e4ca <__sflush_r+0x42>
 800e4c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e4c8:	1ad2      	subs	r2, r2, r3
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4d0:	6a21      	ldr	r1, [r4, #32]
 800e4d2:	47b0      	blx	r6
 800e4d4:	1c43      	adds	r3, r0, #1
 800e4d6:	89a3      	ldrh	r3, [r4, #12]
 800e4d8:	d106      	bne.n	800e4e8 <__sflush_r+0x60>
 800e4da:	6829      	ldr	r1, [r5, #0]
 800e4dc:	291d      	cmp	r1, #29
 800e4de:	d82b      	bhi.n	800e538 <__sflush_r+0xb0>
 800e4e0:	4a28      	ldr	r2, [pc, #160]	@ (800e584 <__sflush_r+0xfc>)
 800e4e2:	40ca      	lsrs	r2, r1
 800e4e4:	07d6      	lsls	r6, r2, #31
 800e4e6:	d527      	bpl.n	800e538 <__sflush_r+0xb0>
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	6062      	str	r2, [r4, #4]
 800e4ec:	6922      	ldr	r2, [r4, #16]
 800e4ee:	04d9      	lsls	r1, r3, #19
 800e4f0:	6022      	str	r2, [r4, #0]
 800e4f2:	d504      	bpl.n	800e4fe <__sflush_r+0x76>
 800e4f4:	1c42      	adds	r2, r0, #1
 800e4f6:	d101      	bne.n	800e4fc <__sflush_r+0x74>
 800e4f8:	682b      	ldr	r3, [r5, #0]
 800e4fa:	b903      	cbnz	r3, 800e4fe <__sflush_r+0x76>
 800e4fc:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e500:	602f      	str	r7, [r5, #0]
 800e502:	b1b9      	cbz	r1, 800e534 <__sflush_r+0xac>
 800e504:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e508:	4299      	cmp	r1, r3
 800e50a:	d002      	beq.n	800e512 <__sflush_r+0x8a>
 800e50c:	4628      	mov	r0, r5
 800e50e:	f7fe fd67 	bl	800cfe0 <_free_r>
 800e512:	2300      	movs	r3, #0
 800e514:	6363      	str	r3, [r4, #52]	@ 0x34
 800e516:	e00d      	b.n	800e534 <__sflush_r+0xac>
 800e518:	2301      	movs	r3, #1
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b0      	blx	r6
 800e51e:	4602      	mov	r2, r0
 800e520:	1c50      	adds	r0, r2, #1
 800e522:	d1c9      	bne.n	800e4b8 <__sflush_r+0x30>
 800e524:	682b      	ldr	r3, [r5, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0c6      	beq.n	800e4b8 <__sflush_r+0x30>
 800e52a:	2b1d      	cmp	r3, #29
 800e52c:	d001      	beq.n	800e532 <__sflush_r+0xaa>
 800e52e:	2b16      	cmp	r3, #22
 800e530:	d11d      	bne.n	800e56e <__sflush_r+0xe6>
 800e532:	602f      	str	r7, [r5, #0]
 800e534:	2000      	movs	r0, #0
 800e536:	e021      	b.n	800e57c <__sflush_r+0xf4>
 800e538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e53c:	b21b      	sxth	r3, r3
 800e53e:	e01a      	b.n	800e576 <__sflush_r+0xee>
 800e540:	690f      	ldr	r7, [r1, #16]
 800e542:	2f00      	cmp	r7, #0
 800e544:	d0f6      	beq.n	800e534 <__sflush_r+0xac>
 800e546:	0793      	lsls	r3, r2, #30
 800e548:	bf18      	it	ne
 800e54a:	2300      	movne	r3, #0
 800e54c:	680e      	ldr	r6, [r1, #0]
 800e54e:	bf08      	it	eq
 800e550:	694b      	ldreq	r3, [r1, #20]
 800e552:	1bf6      	subs	r6, r6, r7
 800e554:	600f      	str	r7, [r1, #0]
 800e556:	608b      	str	r3, [r1, #8]
 800e558:	2e00      	cmp	r6, #0
 800e55a:	ddeb      	ble.n	800e534 <__sflush_r+0xac>
 800e55c:	4633      	mov	r3, r6
 800e55e:	463a      	mov	r2, r7
 800e560:	4628      	mov	r0, r5
 800e562:	6a21      	ldr	r1, [r4, #32]
 800e564:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e568:	47e0      	blx	ip
 800e56a:	2800      	cmp	r0, #0
 800e56c:	dc07      	bgt.n	800e57e <__sflush_r+0xf6>
 800e56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e57e:	4407      	add	r7, r0
 800e580:	1a36      	subs	r6, r6, r0
 800e582:	e7e9      	b.n	800e558 <__sflush_r+0xd0>
 800e584:	20400001 	.word	0x20400001

0800e588 <_fflush_r>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	690b      	ldr	r3, [r1, #16]
 800e58c:	4605      	mov	r5, r0
 800e58e:	460c      	mov	r4, r1
 800e590:	b913      	cbnz	r3, 800e598 <_fflush_r+0x10>
 800e592:	2500      	movs	r5, #0
 800e594:	4628      	mov	r0, r5
 800e596:	bd38      	pop	{r3, r4, r5, pc}
 800e598:	b118      	cbz	r0, 800e5a2 <_fflush_r+0x1a>
 800e59a:	6a03      	ldr	r3, [r0, #32]
 800e59c:	b90b      	cbnz	r3, 800e5a2 <_fflush_r+0x1a>
 800e59e:	f7fe fc03 	bl	800cda8 <__sinit>
 800e5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d0f3      	beq.n	800e592 <_fflush_r+0xa>
 800e5aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5ac:	07d0      	lsls	r0, r2, #31
 800e5ae:	d404      	bmi.n	800e5ba <_fflush_r+0x32>
 800e5b0:	0599      	lsls	r1, r3, #22
 800e5b2:	d402      	bmi.n	800e5ba <_fflush_r+0x32>
 800e5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5b6:	f7fe fcfc 	bl	800cfb2 <__retarget_lock_acquire_recursive>
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	4621      	mov	r1, r4
 800e5be:	f7ff ff63 	bl	800e488 <__sflush_r>
 800e5c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	07da      	lsls	r2, r3, #31
 800e5c8:	d4e4      	bmi.n	800e594 <_fflush_r+0xc>
 800e5ca:	89a3      	ldrh	r3, [r4, #12]
 800e5cc:	059b      	lsls	r3, r3, #22
 800e5ce:	d4e1      	bmi.n	800e594 <_fflush_r+0xc>
 800e5d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5d2:	f7fe fcef 	bl	800cfb4 <__retarget_lock_release_recursive>
 800e5d6:	e7dd      	b.n	800e594 <_fflush_r+0xc>

0800e5d8 <_sbrk_r>:
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	2300      	movs	r3, #0
 800e5dc:	4d05      	ldr	r5, [pc, #20]	@ (800e5f4 <_sbrk_r+0x1c>)
 800e5de:	4604      	mov	r4, r0
 800e5e0:	4608      	mov	r0, r1
 800e5e2:	602b      	str	r3, [r5, #0]
 800e5e4:	f7f3 ff30 	bl	8002448 <_sbrk>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	d102      	bne.n	800e5f2 <_sbrk_r+0x1a>
 800e5ec:	682b      	ldr	r3, [r5, #0]
 800e5ee:	b103      	cbz	r3, 800e5f2 <_sbrk_r+0x1a>
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	bd38      	pop	{r3, r4, r5, pc}
 800e5f4:	20001880 	.word	0x20001880

0800e5f8 <strcpy>:
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5fe:	f803 2b01 	strb.w	r2, [r3], #1
 800e602:	2a00      	cmp	r2, #0
 800e604:	d1f9      	bne.n	800e5fa <strcpy+0x2>
 800e606:	4770      	bx	lr

0800e608 <__assert_func>:
 800e608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e60a:	4614      	mov	r4, r2
 800e60c:	461a      	mov	r2, r3
 800e60e:	4b09      	ldr	r3, [pc, #36]	@ (800e634 <__assert_func+0x2c>)
 800e610:	4605      	mov	r5, r0
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	68d8      	ldr	r0, [r3, #12]
 800e616:	b14c      	cbz	r4, 800e62c <__assert_func+0x24>
 800e618:	4b07      	ldr	r3, [pc, #28]	@ (800e638 <__assert_func+0x30>)
 800e61a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e61e:	9100      	str	r1, [sp, #0]
 800e620:	462b      	mov	r3, r5
 800e622:	4906      	ldr	r1, [pc, #24]	@ (800e63c <__assert_func+0x34>)
 800e624:	f000 fe88 	bl	800f338 <fiprintf>
 800e628:	f000 fe98 	bl	800f35c <abort>
 800e62c:	4b04      	ldr	r3, [pc, #16]	@ (800e640 <__assert_func+0x38>)
 800e62e:	461c      	mov	r4, r3
 800e630:	e7f3      	b.n	800e61a <__assert_func+0x12>
 800e632:	bf00      	nop
 800e634:	200002f8 	.word	0x200002f8
 800e638:	0800fd7f 	.word	0x0800fd7f
 800e63c:	0800fd8c 	.word	0x0800fd8c
 800e640:	0800fdba 	.word	0x0800fdba

0800e644 <_calloc_r>:
 800e644:	b570      	push	{r4, r5, r6, lr}
 800e646:	fba1 5402 	umull	r5, r4, r1, r2
 800e64a:	b934      	cbnz	r4, 800e65a <_calloc_r+0x16>
 800e64c:	4629      	mov	r1, r5
 800e64e:	f7ff f86b 	bl	800d728 <_malloc_r>
 800e652:	4606      	mov	r6, r0
 800e654:	b928      	cbnz	r0, 800e662 <_calloc_r+0x1e>
 800e656:	4630      	mov	r0, r6
 800e658:	bd70      	pop	{r4, r5, r6, pc}
 800e65a:	220c      	movs	r2, #12
 800e65c:	2600      	movs	r6, #0
 800e65e:	6002      	str	r2, [r0, #0]
 800e660:	e7f9      	b.n	800e656 <_calloc_r+0x12>
 800e662:	462a      	mov	r2, r5
 800e664:	4621      	mov	r1, r4
 800e666:	f7fe fc18 	bl	800ce9a <memset>
 800e66a:	e7f4      	b.n	800e656 <_calloc_r+0x12>

0800e66c <quorem>:
 800e66c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e670:	6903      	ldr	r3, [r0, #16]
 800e672:	690c      	ldr	r4, [r1, #16]
 800e674:	4607      	mov	r7, r0
 800e676:	42a3      	cmp	r3, r4
 800e678:	db7e      	blt.n	800e778 <quorem+0x10c>
 800e67a:	3c01      	subs	r4, #1
 800e67c:	00a3      	lsls	r3, r4, #2
 800e67e:	f100 0514 	add.w	r5, r0, #20
 800e682:	f101 0814 	add.w	r8, r1, #20
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e68c:	9301      	str	r3, [sp, #4]
 800e68e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e696:	3301      	adds	r3, #1
 800e698:	429a      	cmp	r2, r3
 800e69a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e69e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e6a2:	d32e      	bcc.n	800e702 <quorem+0x96>
 800e6a4:	f04f 0a00 	mov.w	sl, #0
 800e6a8:	46c4      	mov	ip, r8
 800e6aa:	46ae      	mov	lr, r5
 800e6ac:	46d3      	mov	fp, sl
 800e6ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e6b2:	b298      	uxth	r0, r3
 800e6b4:	fb06 a000 	mla	r0, r6, r0, sl
 800e6b8:	0c1b      	lsrs	r3, r3, #16
 800e6ba:	0c02      	lsrs	r2, r0, #16
 800e6bc:	fb06 2303 	mla	r3, r6, r3, r2
 800e6c0:	f8de 2000 	ldr.w	r2, [lr]
 800e6c4:	b280      	uxth	r0, r0
 800e6c6:	b292      	uxth	r2, r2
 800e6c8:	1a12      	subs	r2, r2, r0
 800e6ca:	445a      	add	r2, fp
 800e6cc:	f8de 0000 	ldr.w	r0, [lr]
 800e6d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e6da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e6de:	b292      	uxth	r2, r2
 800e6e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e6e4:	45e1      	cmp	r9, ip
 800e6e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e6ea:	f84e 2b04 	str.w	r2, [lr], #4
 800e6ee:	d2de      	bcs.n	800e6ae <quorem+0x42>
 800e6f0:	9b00      	ldr	r3, [sp, #0]
 800e6f2:	58eb      	ldr	r3, [r5, r3]
 800e6f4:	b92b      	cbnz	r3, 800e702 <quorem+0x96>
 800e6f6:	9b01      	ldr	r3, [sp, #4]
 800e6f8:	3b04      	subs	r3, #4
 800e6fa:	429d      	cmp	r5, r3
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	d32f      	bcc.n	800e760 <quorem+0xf4>
 800e700:	613c      	str	r4, [r7, #16]
 800e702:	4638      	mov	r0, r7
 800e704:	f7ff fb6a 	bl	800dddc <__mcmp>
 800e708:	2800      	cmp	r0, #0
 800e70a:	db25      	blt.n	800e758 <quorem+0xec>
 800e70c:	4629      	mov	r1, r5
 800e70e:	2000      	movs	r0, #0
 800e710:	f858 2b04 	ldr.w	r2, [r8], #4
 800e714:	f8d1 c000 	ldr.w	ip, [r1]
 800e718:	fa1f fe82 	uxth.w	lr, r2
 800e71c:	fa1f f38c 	uxth.w	r3, ip
 800e720:	eba3 030e 	sub.w	r3, r3, lr
 800e724:	4403      	add	r3, r0
 800e726:	0c12      	lsrs	r2, r2, #16
 800e728:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e72c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e730:	b29b      	uxth	r3, r3
 800e732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e736:	45c1      	cmp	r9, r8
 800e738:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e73c:	f841 3b04 	str.w	r3, [r1], #4
 800e740:	d2e6      	bcs.n	800e710 <quorem+0xa4>
 800e742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e74a:	b922      	cbnz	r2, 800e756 <quorem+0xea>
 800e74c:	3b04      	subs	r3, #4
 800e74e:	429d      	cmp	r5, r3
 800e750:	461a      	mov	r2, r3
 800e752:	d30b      	bcc.n	800e76c <quorem+0x100>
 800e754:	613c      	str	r4, [r7, #16]
 800e756:	3601      	adds	r6, #1
 800e758:	4630      	mov	r0, r6
 800e75a:	b003      	add	sp, #12
 800e75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e760:	6812      	ldr	r2, [r2, #0]
 800e762:	3b04      	subs	r3, #4
 800e764:	2a00      	cmp	r2, #0
 800e766:	d1cb      	bne.n	800e700 <quorem+0x94>
 800e768:	3c01      	subs	r4, #1
 800e76a:	e7c6      	b.n	800e6fa <quorem+0x8e>
 800e76c:	6812      	ldr	r2, [r2, #0]
 800e76e:	3b04      	subs	r3, #4
 800e770:	2a00      	cmp	r2, #0
 800e772:	d1ef      	bne.n	800e754 <quorem+0xe8>
 800e774:	3c01      	subs	r4, #1
 800e776:	e7ea      	b.n	800e74e <quorem+0xe2>
 800e778:	2000      	movs	r0, #0
 800e77a:	e7ee      	b.n	800e75a <quorem+0xee>
 800e77c:	0000      	movs	r0, r0
	...

0800e780 <_dtoa_r>:
 800e780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e784:	4614      	mov	r4, r2
 800e786:	461d      	mov	r5, r3
 800e788:	69c7      	ldr	r7, [r0, #28]
 800e78a:	b097      	sub	sp, #92	@ 0x5c
 800e78c:	4681      	mov	r9, r0
 800e78e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e792:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e794:	b97f      	cbnz	r7, 800e7b6 <_dtoa_r+0x36>
 800e796:	2010      	movs	r0, #16
 800e798:	f000 fdc6 	bl	800f328 <malloc>
 800e79c:	4602      	mov	r2, r0
 800e79e:	f8c9 001c 	str.w	r0, [r9, #28]
 800e7a2:	b920      	cbnz	r0, 800e7ae <_dtoa_r+0x2e>
 800e7a4:	21ef      	movs	r1, #239	@ 0xef
 800e7a6:	4bac      	ldr	r3, [pc, #688]	@ (800ea58 <_dtoa_r+0x2d8>)
 800e7a8:	48ac      	ldr	r0, [pc, #688]	@ (800ea5c <_dtoa_r+0x2dc>)
 800e7aa:	f7ff ff2d 	bl	800e608 <__assert_func>
 800e7ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e7b2:	6007      	str	r7, [r0, #0]
 800e7b4:	60c7      	str	r7, [r0, #12]
 800e7b6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e7ba:	6819      	ldr	r1, [r3, #0]
 800e7bc:	b159      	cbz	r1, 800e7d6 <_dtoa_r+0x56>
 800e7be:	685a      	ldr	r2, [r3, #4]
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	4093      	lsls	r3, r2
 800e7c4:	604a      	str	r2, [r1, #4]
 800e7c6:	608b      	str	r3, [r1, #8]
 800e7c8:	4648      	mov	r0, r9
 800e7ca:	f7ff f88b 	bl	800d8e4 <_Bfree>
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	1e2b      	subs	r3, r5, #0
 800e7d8:	bfaf      	iteee	ge
 800e7da:	2300      	movge	r3, #0
 800e7dc:	2201      	movlt	r2, #1
 800e7de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e7e2:	9307      	strlt	r3, [sp, #28]
 800e7e4:	bfa8      	it	ge
 800e7e6:	6033      	strge	r3, [r6, #0]
 800e7e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e7ec:	4b9c      	ldr	r3, [pc, #624]	@ (800ea60 <_dtoa_r+0x2e0>)
 800e7ee:	bfb8      	it	lt
 800e7f0:	6032      	strlt	r2, [r6, #0]
 800e7f2:	ea33 0308 	bics.w	r3, r3, r8
 800e7f6:	d112      	bne.n	800e81e <_dtoa_r+0x9e>
 800e7f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e7fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e804:	4323      	orrs	r3, r4
 800e806:	f000 855e 	beq.w	800f2c6 <_dtoa_r+0xb46>
 800e80a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e80c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ea64 <_dtoa_r+0x2e4>
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 8560 	beq.w	800f2d6 <_dtoa_r+0xb56>
 800e816:	f10a 0303 	add.w	r3, sl, #3
 800e81a:	f000 bd5a 	b.w	800f2d2 <_dtoa_r+0xb52>
 800e81e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e822:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e82a:	2200      	movs	r2, #0
 800e82c:	2300      	movs	r3, #0
 800e82e:	f7f2 f8bb 	bl	80009a8 <__aeabi_dcmpeq>
 800e832:	4607      	mov	r7, r0
 800e834:	b158      	cbz	r0, 800e84e <_dtoa_r+0xce>
 800e836:	2301      	movs	r3, #1
 800e838:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e83a:	6013      	str	r3, [r2, #0]
 800e83c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e83e:	b113      	cbz	r3, 800e846 <_dtoa_r+0xc6>
 800e840:	4b89      	ldr	r3, [pc, #548]	@ (800ea68 <_dtoa_r+0x2e8>)
 800e842:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e844:	6013      	str	r3, [r2, #0]
 800e846:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800ea6c <_dtoa_r+0x2ec>
 800e84a:	f000 bd44 	b.w	800f2d6 <_dtoa_r+0xb56>
 800e84e:	ab14      	add	r3, sp, #80	@ 0x50
 800e850:	9301      	str	r3, [sp, #4]
 800e852:	ab15      	add	r3, sp, #84	@ 0x54
 800e854:	9300      	str	r3, [sp, #0]
 800e856:	4648      	mov	r0, r9
 800e858:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e85c:	f7ff fbd6 	bl	800e00c <__d2b>
 800e860:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e864:	9003      	str	r0, [sp, #12]
 800e866:	2e00      	cmp	r6, #0
 800e868:	d078      	beq.n	800e95c <_dtoa_r+0x1dc>
 800e86a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e86e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e870:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e878:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e87c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e880:	9712      	str	r7, [sp, #72]	@ 0x48
 800e882:	4619      	mov	r1, r3
 800e884:	2200      	movs	r2, #0
 800e886:	4b7a      	ldr	r3, [pc, #488]	@ (800ea70 <_dtoa_r+0x2f0>)
 800e888:	f7f1 fc6e 	bl	8000168 <__aeabi_dsub>
 800e88c:	a36c      	add	r3, pc, #432	@ (adr r3, 800ea40 <_dtoa_r+0x2c0>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f7f1 fe21 	bl	80004d8 <__aeabi_dmul>
 800e896:	a36c      	add	r3, pc, #432	@ (adr r3, 800ea48 <_dtoa_r+0x2c8>)
 800e898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89c:	f7f1 fc66 	bl	800016c <__adddf3>
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	460d      	mov	r5, r1
 800e8a6:	f7f1 fdad 	bl	8000404 <__aeabi_i2d>
 800e8aa:	a369      	add	r3, pc, #420	@ (adr r3, 800ea50 <_dtoa_r+0x2d0>)
 800e8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b0:	f7f1 fe12 	bl	80004d8 <__aeabi_dmul>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	f7f1 fc56 	bl	800016c <__adddf3>
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	460d      	mov	r5, r1
 800e8c4:	f7f2 f8a2 	bl	8000a0c <__aeabi_d2iz>
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	4607      	mov	r7, r0
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f7f2 f873 	bl	80009bc <__aeabi_dcmplt>
 800e8d6:	b140      	cbz	r0, 800e8ea <_dtoa_r+0x16a>
 800e8d8:	4638      	mov	r0, r7
 800e8da:	f7f1 fd93 	bl	8000404 <__aeabi_i2d>
 800e8de:	4622      	mov	r2, r4
 800e8e0:	462b      	mov	r3, r5
 800e8e2:	f7f2 f861 	bl	80009a8 <__aeabi_dcmpeq>
 800e8e6:	b900      	cbnz	r0, 800e8ea <_dtoa_r+0x16a>
 800e8e8:	3f01      	subs	r7, #1
 800e8ea:	2f16      	cmp	r7, #22
 800e8ec:	d854      	bhi.n	800e998 <_dtoa_r+0x218>
 800e8ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8f2:	4b60      	ldr	r3, [pc, #384]	@ (800ea74 <_dtoa_r+0x2f4>)
 800e8f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	f7f2 f85e 	bl	80009bc <__aeabi_dcmplt>
 800e900:	2800      	cmp	r0, #0
 800e902:	d04b      	beq.n	800e99c <_dtoa_r+0x21c>
 800e904:	2300      	movs	r3, #0
 800e906:	3f01      	subs	r7, #1
 800e908:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e90a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e90c:	1b9b      	subs	r3, r3, r6
 800e90e:	1e5a      	subs	r2, r3, #1
 800e910:	bf49      	itett	mi
 800e912:	f1c3 0301 	rsbmi	r3, r3, #1
 800e916:	2300      	movpl	r3, #0
 800e918:	9304      	strmi	r3, [sp, #16]
 800e91a:	2300      	movmi	r3, #0
 800e91c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e91e:	bf54      	ite	pl
 800e920:	9304      	strpl	r3, [sp, #16]
 800e922:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800e924:	2f00      	cmp	r7, #0
 800e926:	db3b      	blt.n	800e9a0 <_dtoa_r+0x220>
 800e928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92a:	970e      	str	r7, [sp, #56]	@ 0x38
 800e92c:	443b      	add	r3, r7
 800e92e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e930:	2300      	movs	r3, #0
 800e932:	930a      	str	r3, [sp, #40]	@ 0x28
 800e934:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e936:	2b09      	cmp	r3, #9
 800e938:	d865      	bhi.n	800ea06 <_dtoa_r+0x286>
 800e93a:	2b05      	cmp	r3, #5
 800e93c:	bfc4      	itt	gt
 800e93e:	3b04      	subgt	r3, #4
 800e940:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800e942:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e944:	bfc8      	it	gt
 800e946:	2400      	movgt	r4, #0
 800e948:	f1a3 0302 	sub.w	r3, r3, #2
 800e94c:	bfd8      	it	le
 800e94e:	2401      	movle	r4, #1
 800e950:	2b03      	cmp	r3, #3
 800e952:	d864      	bhi.n	800ea1e <_dtoa_r+0x29e>
 800e954:	e8df f003 	tbb	[pc, r3]
 800e958:	2c385553 	.word	0x2c385553
 800e95c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e960:	441e      	add	r6, r3
 800e962:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e966:	2b20      	cmp	r3, #32
 800e968:	bfc1      	itttt	gt
 800e96a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e96e:	fa08 f803 	lslgt.w	r8, r8, r3
 800e972:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e976:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e97a:	bfd6      	itet	le
 800e97c:	f1c3 0320 	rsble	r3, r3, #32
 800e980:	ea48 0003 	orrgt.w	r0, r8, r3
 800e984:	fa04 f003 	lslle.w	r0, r4, r3
 800e988:	f7f1 fd2c 	bl	80003e4 <__aeabi_ui2d>
 800e98c:	2201      	movs	r2, #1
 800e98e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e992:	3e01      	subs	r6, #1
 800e994:	9212      	str	r2, [sp, #72]	@ 0x48
 800e996:	e774      	b.n	800e882 <_dtoa_r+0x102>
 800e998:	2301      	movs	r3, #1
 800e99a:	e7b5      	b.n	800e908 <_dtoa_r+0x188>
 800e99c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e99e:	e7b4      	b.n	800e90a <_dtoa_r+0x18a>
 800e9a0:	9b04      	ldr	r3, [sp, #16]
 800e9a2:	1bdb      	subs	r3, r3, r7
 800e9a4:	9304      	str	r3, [sp, #16]
 800e9a6:	427b      	negs	r3, r7
 800e9a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800e9ae:	e7c1      	b.n	800e934 <_dtoa_r+0x1b4>
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e9b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9b6:	eb07 0b03 	add.w	fp, r7, r3
 800e9ba:	f10b 0301 	add.w	r3, fp, #1
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	9308      	str	r3, [sp, #32]
 800e9c2:	bfb8      	it	lt
 800e9c4:	2301      	movlt	r3, #1
 800e9c6:	e006      	b.n	800e9d6 <_dtoa_r+0x256>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e9cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	dd28      	ble.n	800ea24 <_dtoa_r+0x2a4>
 800e9d2:	469b      	mov	fp, r3
 800e9d4:	9308      	str	r3, [sp, #32]
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	2204      	movs	r2, #4
 800e9da:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e9de:	f102 0514 	add.w	r5, r2, #20
 800e9e2:	429d      	cmp	r5, r3
 800e9e4:	d926      	bls.n	800ea34 <_dtoa_r+0x2b4>
 800e9e6:	6041      	str	r1, [r0, #4]
 800e9e8:	4648      	mov	r0, r9
 800e9ea:	f7fe ff3b 	bl	800d864 <_Balloc>
 800e9ee:	4682      	mov	sl, r0
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d143      	bne.n	800ea7c <_dtoa_r+0x2fc>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e9fa:	4b1f      	ldr	r3, [pc, #124]	@ (800ea78 <_dtoa_r+0x2f8>)
 800e9fc:	e6d4      	b.n	800e7a8 <_dtoa_r+0x28>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e7e3      	b.n	800e9ca <_dtoa_r+0x24a>
 800ea02:	2300      	movs	r3, #0
 800ea04:	e7d5      	b.n	800e9b2 <_dtoa_r+0x232>
 800ea06:	2401      	movs	r4, #1
 800ea08:	2300      	movs	r3, #0
 800ea0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ea0c:	9320      	str	r3, [sp, #128]	@ 0x80
 800ea0e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ea12:	2200      	movs	r2, #0
 800ea14:	2312      	movs	r3, #18
 800ea16:	f8cd b020 	str.w	fp, [sp, #32]
 800ea1a:	9221      	str	r2, [sp, #132]	@ 0x84
 800ea1c:	e7db      	b.n	800e9d6 <_dtoa_r+0x256>
 800ea1e:	2301      	movs	r3, #1
 800ea20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea22:	e7f4      	b.n	800ea0e <_dtoa_r+0x28e>
 800ea24:	f04f 0b01 	mov.w	fp, #1
 800ea28:	465b      	mov	r3, fp
 800ea2a:	f8cd b020 	str.w	fp, [sp, #32]
 800ea2e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800ea32:	e7d0      	b.n	800e9d6 <_dtoa_r+0x256>
 800ea34:	3101      	adds	r1, #1
 800ea36:	0052      	lsls	r2, r2, #1
 800ea38:	e7d1      	b.n	800e9de <_dtoa_r+0x25e>
 800ea3a:	bf00      	nop
 800ea3c:	f3af 8000 	nop.w
 800ea40:	636f4361 	.word	0x636f4361
 800ea44:	3fd287a7 	.word	0x3fd287a7
 800ea48:	8b60c8b3 	.word	0x8b60c8b3
 800ea4c:	3fc68a28 	.word	0x3fc68a28
 800ea50:	509f79fb 	.word	0x509f79fb
 800ea54:	3fd34413 	.word	0x3fd34413
 800ea58:	0800fd0f 	.word	0x0800fd0f
 800ea5c:	0800fdca 	.word	0x0800fdca
 800ea60:	7ff00000 	.word	0x7ff00000
 800ea64:	0800fdc4 	.word	0x0800fdc4
 800ea68:	0800fdc9 	.word	0x0800fdc9
 800ea6c:	0800fdc8 	.word	0x0800fdc8
 800ea70:	3ff80000 	.word	0x3ff80000
 800ea74:	0800fee0 	.word	0x0800fee0
 800ea78:	0800fc9e 	.word	0x0800fc9e
 800ea7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ea80:	6018      	str	r0, [r3, #0]
 800ea82:	9b08      	ldr	r3, [sp, #32]
 800ea84:	2b0e      	cmp	r3, #14
 800ea86:	f200 80a1 	bhi.w	800ebcc <_dtoa_r+0x44c>
 800ea8a:	2c00      	cmp	r4, #0
 800ea8c:	f000 809e 	beq.w	800ebcc <_dtoa_r+0x44c>
 800ea90:	2f00      	cmp	r7, #0
 800ea92:	dd33      	ble.n	800eafc <_dtoa_r+0x37c>
 800ea94:	4b9c      	ldr	r3, [pc, #624]	@ (800ed08 <_dtoa_r+0x588>)
 800ea96:	f007 020f 	and.w	r2, r7, #15
 800ea9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea9e:	05f8      	lsls	r0, r7, #23
 800eaa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eaa4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800eaa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800eaac:	d516      	bpl.n	800eadc <_dtoa_r+0x35c>
 800eaae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eab2:	4b96      	ldr	r3, [pc, #600]	@ (800ed0c <_dtoa_r+0x58c>)
 800eab4:	2603      	movs	r6, #3
 800eab6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eaba:	f7f1 fe37 	bl	800072c <__aeabi_ddiv>
 800eabe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eac2:	f004 040f 	and.w	r4, r4, #15
 800eac6:	4d91      	ldr	r5, [pc, #580]	@ (800ed0c <_dtoa_r+0x58c>)
 800eac8:	b954      	cbnz	r4, 800eae0 <_dtoa_r+0x360>
 800eaca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ead2:	f7f1 fe2b 	bl	800072c <__aeabi_ddiv>
 800ead6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eada:	e028      	b.n	800eb2e <_dtoa_r+0x3ae>
 800eadc:	2602      	movs	r6, #2
 800eade:	e7f2      	b.n	800eac6 <_dtoa_r+0x346>
 800eae0:	07e1      	lsls	r1, r4, #31
 800eae2:	d508      	bpl.n	800eaf6 <_dtoa_r+0x376>
 800eae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaec:	f7f1 fcf4 	bl	80004d8 <__aeabi_dmul>
 800eaf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eaf4:	3601      	adds	r6, #1
 800eaf6:	1064      	asrs	r4, r4, #1
 800eaf8:	3508      	adds	r5, #8
 800eafa:	e7e5      	b.n	800eac8 <_dtoa_r+0x348>
 800eafc:	f000 80af 	beq.w	800ec5e <_dtoa_r+0x4de>
 800eb00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb04:	427c      	negs	r4, r7
 800eb06:	4b80      	ldr	r3, [pc, #512]	@ (800ed08 <_dtoa_r+0x588>)
 800eb08:	f004 020f 	and.w	r2, r4, #15
 800eb0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	f7f1 fce0 	bl	80004d8 <__aeabi_dmul>
 800eb18:	2602      	movs	r6, #2
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb20:	4d7a      	ldr	r5, [pc, #488]	@ (800ed0c <_dtoa_r+0x58c>)
 800eb22:	1124      	asrs	r4, r4, #4
 800eb24:	2c00      	cmp	r4, #0
 800eb26:	f040 808f 	bne.w	800ec48 <_dtoa_r+0x4c8>
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1d3      	bne.n	800ead6 <_dtoa_r+0x356>
 800eb2e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800eb32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f000 8094 	beq.w	800ec62 <_dtoa_r+0x4e2>
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	4629      	mov	r1, r5
 800eb40:	4b73      	ldr	r3, [pc, #460]	@ (800ed10 <_dtoa_r+0x590>)
 800eb42:	f7f1 ff3b 	bl	80009bc <__aeabi_dcmplt>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	f000 808b 	beq.w	800ec62 <_dtoa_r+0x4e2>
 800eb4c:	9b08      	ldr	r3, [sp, #32]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f000 8087 	beq.w	800ec62 <_dtoa_r+0x4e2>
 800eb54:	f1bb 0f00 	cmp.w	fp, #0
 800eb58:	dd34      	ble.n	800ebc4 <_dtoa_r+0x444>
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	4629      	mov	r1, r5
 800eb60:	4b6c      	ldr	r3, [pc, #432]	@ (800ed14 <_dtoa_r+0x594>)
 800eb62:	f7f1 fcb9 	bl	80004d8 <__aeabi_dmul>
 800eb66:	465c      	mov	r4, fp
 800eb68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb6c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800eb70:	3601      	adds	r6, #1
 800eb72:	4630      	mov	r0, r6
 800eb74:	f7f1 fc46 	bl	8000404 <__aeabi_i2d>
 800eb78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb7c:	f7f1 fcac 	bl	80004d8 <__aeabi_dmul>
 800eb80:	2200      	movs	r2, #0
 800eb82:	4b65      	ldr	r3, [pc, #404]	@ (800ed18 <_dtoa_r+0x598>)
 800eb84:	f7f1 faf2 	bl	800016c <__adddf3>
 800eb88:	4605      	mov	r5, r0
 800eb8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800eb8e:	2c00      	cmp	r4, #0
 800eb90:	d16a      	bne.n	800ec68 <_dtoa_r+0x4e8>
 800eb92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb96:	2200      	movs	r2, #0
 800eb98:	4b60      	ldr	r3, [pc, #384]	@ (800ed1c <_dtoa_r+0x59c>)
 800eb9a:	f7f1 fae5 	bl	8000168 <__aeabi_dsub>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eba6:	462a      	mov	r2, r5
 800eba8:	4633      	mov	r3, r6
 800ebaa:	f7f1 ff25 	bl	80009f8 <__aeabi_dcmpgt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	f040 8298 	bne.w	800f0e4 <_dtoa_r+0x964>
 800ebb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebb8:	462a      	mov	r2, r5
 800ebba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ebbe:	f7f1 fefd 	bl	80009bc <__aeabi_dcmplt>
 800ebc2:	bb38      	cbnz	r0, 800ec14 <_dtoa_r+0x494>
 800ebc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ebc8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ebcc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f2c0 8157 	blt.w	800ee82 <_dtoa_r+0x702>
 800ebd4:	2f0e      	cmp	r7, #14
 800ebd6:	f300 8154 	bgt.w	800ee82 <_dtoa_r+0x702>
 800ebda:	4b4b      	ldr	r3, [pc, #300]	@ (800ed08 <_dtoa_r+0x588>)
 800ebdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ebe0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ebe4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ebe8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f280 80e5 	bge.w	800edba <_dtoa_r+0x63a>
 800ebf0:	9b08      	ldr	r3, [sp, #32]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f300 80e1 	bgt.w	800edba <_dtoa_r+0x63a>
 800ebf8:	d10c      	bne.n	800ec14 <_dtoa_r+0x494>
 800ebfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	4b46      	ldr	r3, [pc, #280]	@ (800ed1c <_dtoa_r+0x59c>)
 800ec02:	f7f1 fc69 	bl	80004d8 <__aeabi_dmul>
 800ec06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec0a:	f7f1 feeb 	bl	80009e4 <__aeabi_dcmpge>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	f000 8266 	beq.w	800f0e0 <_dtoa_r+0x960>
 800ec14:	2400      	movs	r4, #0
 800ec16:	4625      	mov	r5, r4
 800ec18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ec1a:	4656      	mov	r6, sl
 800ec1c:	ea6f 0803 	mvn.w	r8, r3
 800ec20:	2700      	movs	r7, #0
 800ec22:	4621      	mov	r1, r4
 800ec24:	4648      	mov	r0, r9
 800ec26:	f7fe fe5d 	bl	800d8e4 <_Bfree>
 800ec2a:	2d00      	cmp	r5, #0
 800ec2c:	f000 80bd 	beq.w	800edaa <_dtoa_r+0x62a>
 800ec30:	b12f      	cbz	r7, 800ec3e <_dtoa_r+0x4be>
 800ec32:	42af      	cmp	r7, r5
 800ec34:	d003      	beq.n	800ec3e <_dtoa_r+0x4be>
 800ec36:	4639      	mov	r1, r7
 800ec38:	4648      	mov	r0, r9
 800ec3a:	f7fe fe53 	bl	800d8e4 <_Bfree>
 800ec3e:	4629      	mov	r1, r5
 800ec40:	4648      	mov	r0, r9
 800ec42:	f7fe fe4f 	bl	800d8e4 <_Bfree>
 800ec46:	e0b0      	b.n	800edaa <_dtoa_r+0x62a>
 800ec48:	07e2      	lsls	r2, r4, #31
 800ec4a:	d505      	bpl.n	800ec58 <_dtoa_r+0x4d8>
 800ec4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec50:	f7f1 fc42 	bl	80004d8 <__aeabi_dmul>
 800ec54:	2301      	movs	r3, #1
 800ec56:	3601      	adds	r6, #1
 800ec58:	1064      	asrs	r4, r4, #1
 800ec5a:	3508      	adds	r5, #8
 800ec5c:	e762      	b.n	800eb24 <_dtoa_r+0x3a4>
 800ec5e:	2602      	movs	r6, #2
 800ec60:	e765      	b.n	800eb2e <_dtoa_r+0x3ae>
 800ec62:	46b8      	mov	r8, r7
 800ec64:	9c08      	ldr	r4, [sp, #32]
 800ec66:	e784      	b.n	800eb72 <_dtoa_r+0x3f2>
 800ec68:	4b27      	ldr	r3, [pc, #156]	@ (800ed08 <_dtoa_r+0x588>)
 800ec6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec74:	4454      	add	r4, sl
 800ec76:	2900      	cmp	r1, #0
 800ec78:	d054      	beq.n	800ed24 <_dtoa_r+0x5a4>
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	4928      	ldr	r1, [pc, #160]	@ (800ed20 <_dtoa_r+0x5a0>)
 800ec7e:	f7f1 fd55 	bl	800072c <__aeabi_ddiv>
 800ec82:	4633      	mov	r3, r6
 800ec84:	462a      	mov	r2, r5
 800ec86:	f7f1 fa6f 	bl	8000168 <__aeabi_dsub>
 800ec8a:	4656      	mov	r6, sl
 800ec8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ec90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec94:	f7f1 feba 	bl	8000a0c <__aeabi_d2iz>
 800ec98:	4605      	mov	r5, r0
 800ec9a:	f7f1 fbb3 	bl	8000404 <__aeabi_i2d>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	460b      	mov	r3, r1
 800eca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eca6:	f7f1 fa5f 	bl	8000168 <__aeabi_dsub>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	460b      	mov	r3, r1
 800ecae:	3530      	adds	r5, #48	@ 0x30
 800ecb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ecb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ecb8:	f806 5b01 	strb.w	r5, [r6], #1
 800ecbc:	f7f1 fe7e 	bl	80009bc <__aeabi_dcmplt>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d172      	bne.n	800edaa <_dtoa_r+0x62a>
 800ecc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecc8:	2000      	movs	r0, #0
 800ecca:	4911      	ldr	r1, [pc, #68]	@ (800ed10 <_dtoa_r+0x590>)
 800eccc:	f7f1 fa4c 	bl	8000168 <__aeabi_dsub>
 800ecd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ecd4:	f7f1 fe72 	bl	80009bc <__aeabi_dcmplt>
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	f040 80b4 	bne.w	800ee46 <_dtoa_r+0x6c6>
 800ecde:	42a6      	cmp	r6, r4
 800ece0:	f43f af70 	beq.w	800ebc4 <_dtoa_r+0x444>
 800ece4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ece8:	2200      	movs	r2, #0
 800ecea:	4b0a      	ldr	r3, [pc, #40]	@ (800ed14 <_dtoa_r+0x594>)
 800ecec:	f7f1 fbf4 	bl	80004d8 <__aeabi_dmul>
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ecf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ecfa:	4b06      	ldr	r3, [pc, #24]	@ (800ed14 <_dtoa_r+0x594>)
 800ecfc:	f7f1 fbec 	bl	80004d8 <__aeabi_dmul>
 800ed00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed04:	e7c4      	b.n	800ec90 <_dtoa_r+0x510>
 800ed06:	bf00      	nop
 800ed08:	0800fee0 	.word	0x0800fee0
 800ed0c:	0800feb8 	.word	0x0800feb8
 800ed10:	3ff00000 	.word	0x3ff00000
 800ed14:	40240000 	.word	0x40240000
 800ed18:	401c0000 	.word	0x401c0000
 800ed1c:	40140000 	.word	0x40140000
 800ed20:	3fe00000 	.word	0x3fe00000
 800ed24:	4631      	mov	r1, r6
 800ed26:	4628      	mov	r0, r5
 800ed28:	f7f1 fbd6 	bl	80004d8 <__aeabi_dmul>
 800ed2c:	4656      	mov	r6, sl
 800ed2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ed32:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ed34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed38:	f7f1 fe68 	bl	8000a0c <__aeabi_d2iz>
 800ed3c:	4605      	mov	r5, r0
 800ed3e:	f7f1 fb61 	bl	8000404 <__aeabi_i2d>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed4a:	f7f1 fa0d 	bl	8000168 <__aeabi_dsub>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	460b      	mov	r3, r1
 800ed52:	3530      	adds	r5, #48	@ 0x30
 800ed54:	f806 5b01 	strb.w	r5, [r6], #1
 800ed58:	42a6      	cmp	r6, r4
 800ed5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed5e:	f04f 0200 	mov.w	r2, #0
 800ed62:	d124      	bne.n	800edae <_dtoa_r+0x62e>
 800ed64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ed68:	4bae      	ldr	r3, [pc, #696]	@ (800f024 <_dtoa_r+0x8a4>)
 800ed6a:	f7f1 f9ff 	bl	800016c <__adddf3>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	460b      	mov	r3, r1
 800ed72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed76:	f7f1 fe3f 	bl	80009f8 <__aeabi_dcmpgt>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d163      	bne.n	800ee46 <_dtoa_r+0x6c6>
 800ed7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ed82:	2000      	movs	r0, #0
 800ed84:	49a7      	ldr	r1, [pc, #668]	@ (800f024 <_dtoa_r+0x8a4>)
 800ed86:	f7f1 f9ef 	bl	8000168 <__aeabi_dsub>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed92:	f7f1 fe13 	bl	80009bc <__aeabi_dcmplt>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f43f af14 	beq.w	800ebc4 <_dtoa_r+0x444>
 800ed9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ed9e:	1e73      	subs	r3, r6, #1
 800eda0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eda2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eda6:	2b30      	cmp	r3, #48	@ 0x30
 800eda8:	d0f8      	beq.n	800ed9c <_dtoa_r+0x61c>
 800edaa:	4647      	mov	r7, r8
 800edac:	e03b      	b.n	800ee26 <_dtoa_r+0x6a6>
 800edae:	4b9e      	ldr	r3, [pc, #632]	@ (800f028 <_dtoa_r+0x8a8>)
 800edb0:	f7f1 fb92 	bl	80004d8 <__aeabi_dmul>
 800edb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800edb8:	e7bc      	b.n	800ed34 <_dtoa_r+0x5b4>
 800edba:	4656      	mov	r6, sl
 800edbc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800edc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edc4:	4620      	mov	r0, r4
 800edc6:	4629      	mov	r1, r5
 800edc8:	f7f1 fcb0 	bl	800072c <__aeabi_ddiv>
 800edcc:	f7f1 fe1e 	bl	8000a0c <__aeabi_d2iz>
 800edd0:	4680      	mov	r8, r0
 800edd2:	f7f1 fb17 	bl	8000404 <__aeabi_i2d>
 800edd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edda:	f7f1 fb7d 	bl	80004d8 <__aeabi_dmul>
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	4620      	mov	r0, r4
 800ede4:	4629      	mov	r1, r5
 800ede6:	f7f1 f9bf 	bl	8000168 <__aeabi_dsub>
 800edea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800edee:	9d08      	ldr	r5, [sp, #32]
 800edf0:	f806 4b01 	strb.w	r4, [r6], #1
 800edf4:	eba6 040a 	sub.w	r4, r6, sl
 800edf8:	42a5      	cmp	r5, r4
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	d133      	bne.n	800ee68 <_dtoa_r+0x6e8>
 800ee00:	f7f1 f9b4 	bl	800016c <__adddf3>
 800ee04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee08:	4604      	mov	r4, r0
 800ee0a:	460d      	mov	r5, r1
 800ee0c:	f7f1 fdf4 	bl	80009f8 <__aeabi_dcmpgt>
 800ee10:	b9c0      	cbnz	r0, 800ee44 <_dtoa_r+0x6c4>
 800ee12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee16:	4620      	mov	r0, r4
 800ee18:	4629      	mov	r1, r5
 800ee1a:	f7f1 fdc5 	bl	80009a8 <__aeabi_dcmpeq>
 800ee1e:	b110      	cbz	r0, 800ee26 <_dtoa_r+0x6a6>
 800ee20:	f018 0f01 	tst.w	r8, #1
 800ee24:	d10e      	bne.n	800ee44 <_dtoa_r+0x6c4>
 800ee26:	4648      	mov	r0, r9
 800ee28:	9903      	ldr	r1, [sp, #12]
 800ee2a:	f7fe fd5b 	bl	800d8e4 <_Bfree>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	7033      	strb	r3, [r6, #0]
 800ee32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ee34:	3701      	adds	r7, #1
 800ee36:	601f      	str	r7, [r3, #0]
 800ee38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f000 824b 	beq.w	800f2d6 <_dtoa_r+0xb56>
 800ee40:	601e      	str	r6, [r3, #0]
 800ee42:	e248      	b.n	800f2d6 <_dtoa_r+0xb56>
 800ee44:	46b8      	mov	r8, r7
 800ee46:	4633      	mov	r3, r6
 800ee48:	461e      	mov	r6, r3
 800ee4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee4e:	2a39      	cmp	r2, #57	@ 0x39
 800ee50:	d106      	bne.n	800ee60 <_dtoa_r+0x6e0>
 800ee52:	459a      	cmp	sl, r3
 800ee54:	d1f8      	bne.n	800ee48 <_dtoa_r+0x6c8>
 800ee56:	2230      	movs	r2, #48	@ 0x30
 800ee58:	f108 0801 	add.w	r8, r8, #1
 800ee5c:	f88a 2000 	strb.w	r2, [sl]
 800ee60:	781a      	ldrb	r2, [r3, #0]
 800ee62:	3201      	adds	r2, #1
 800ee64:	701a      	strb	r2, [r3, #0]
 800ee66:	e7a0      	b.n	800edaa <_dtoa_r+0x62a>
 800ee68:	2200      	movs	r2, #0
 800ee6a:	4b6f      	ldr	r3, [pc, #444]	@ (800f028 <_dtoa_r+0x8a8>)
 800ee6c:	f7f1 fb34 	bl	80004d8 <__aeabi_dmul>
 800ee70:	2200      	movs	r2, #0
 800ee72:	2300      	movs	r3, #0
 800ee74:	4604      	mov	r4, r0
 800ee76:	460d      	mov	r5, r1
 800ee78:	f7f1 fd96 	bl	80009a8 <__aeabi_dcmpeq>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d09f      	beq.n	800edc0 <_dtoa_r+0x640>
 800ee80:	e7d1      	b.n	800ee26 <_dtoa_r+0x6a6>
 800ee82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ee84:	2a00      	cmp	r2, #0
 800ee86:	f000 80ea 	beq.w	800f05e <_dtoa_r+0x8de>
 800ee8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ee8c:	2a01      	cmp	r2, #1
 800ee8e:	f300 80cd 	bgt.w	800f02c <_dtoa_r+0x8ac>
 800ee92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ee94:	2a00      	cmp	r2, #0
 800ee96:	f000 80c1 	beq.w	800f01c <_dtoa_r+0x89c>
 800ee9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ee9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eea0:	9e04      	ldr	r6, [sp, #16]
 800eea2:	9a04      	ldr	r2, [sp, #16]
 800eea4:	2101      	movs	r1, #1
 800eea6:	441a      	add	r2, r3
 800eea8:	9204      	str	r2, [sp, #16]
 800eeaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eeac:	4648      	mov	r0, r9
 800eeae:	441a      	add	r2, r3
 800eeb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800eeb2:	f7fe fe15 	bl	800dae0 <__i2b>
 800eeb6:	4605      	mov	r5, r0
 800eeb8:	b166      	cbz	r6, 800eed4 <_dtoa_r+0x754>
 800eeba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	dd09      	ble.n	800eed4 <_dtoa_r+0x754>
 800eec0:	42b3      	cmp	r3, r6
 800eec2:	bfa8      	it	ge
 800eec4:	4633      	movge	r3, r6
 800eec6:	9a04      	ldr	r2, [sp, #16]
 800eec8:	1af6      	subs	r6, r6, r3
 800eeca:	1ad2      	subs	r2, r2, r3
 800eecc:	9204      	str	r2, [sp, #16]
 800eece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eed0:	1ad3      	subs	r3, r2, r3
 800eed2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eed6:	b30b      	cbz	r3, 800ef1c <_dtoa_r+0x79c>
 800eed8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 80c6 	beq.w	800f06c <_dtoa_r+0x8ec>
 800eee0:	2c00      	cmp	r4, #0
 800eee2:	f000 80c0 	beq.w	800f066 <_dtoa_r+0x8e6>
 800eee6:	4629      	mov	r1, r5
 800eee8:	4622      	mov	r2, r4
 800eeea:	4648      	mov	r0, r9
 800eeec:	f7fe feb0 	bl	800dc50 <__pow5mult>
 800eef0:	9a03      	ldr	r2, [sp, #12]
 800eef2:	4601      	mov	r1, r0
 800eef4:	4605      	mov	r5, r0
 800eef6:	4648      	mov	r0, r9
 800eef8:	f7fe fe08 	bl	800db0c <__multiply>
 800eefc:	9903      	ldr	r1, [sp, #12]
 800eefe:	4680      	mov	r8, r0
 800ef00:	4648      	mov	r0, r9
 800ef02:	f7fe fcef 	bl	800d8e4 <_Bfree>
 800ef06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef08:	1b1b      	subs	r3, r3, r4
 800ef0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef0c:	f000 80b1 	beq.w	800f072 <_dtoa_r+0x8f2>
 800ef10:	4641      	mov	r1, r8
 800ef12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef14:	4648      	mov	r0, r9
 800ef16:	f7fe fe9b 	bl	800dc50 <__pow5mult>
 800ef1a:	9003      	str	r0, [sp, #12]
 800ef1c:	2101      	movs	r1, #1
 800ef1e:	4648      	mov	r0, r9
 800ef20:	f7fe fdde 	bl	800dae0 <__i2b>
 800ef24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef26:	4604      	mov	r4, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f000 81d8 	beq.w	800f2de <_dtoa_r+0xb5e>
 800ef2e:	461a      	mov	r2, r3
 800ef30:	4601      	mov	r1, r0
 800ef32:	4648      	mov	r0, r9
 800ef34:	f7fe fe8c 	bl	800dc50 <__pow5mult>
 800ef38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	f300 809f 	bgt.w	800f080 <_dtoa_r+0x900>
 800ef42:	9b06      	ldr	r3, [sp, #24]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f040 8097 	bne.w	800f078 <_dtoa_r+0x8f8>
 800ef4a:	9b07      	ldr	r3, [sp, #28]
 800ef4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f040 8093 	bne.w	800f07c <_dtoa_r+0x8fc>
 800ef56:	9b07      	ldr	r3, [sp, #28]
 800ef58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ef5c:	0d1b      	lsrs	r3, r3, #20
 800ef5e:	051b      	lsls	r3, r3, #20
 800ef60:	b133      	cbz	r3, 800ef70 <_dtoa_r+0x7f0>
 800ef62:	9b04      	ldr	r3, [sp, #16]
 800ef64:	3301      	adds	r3, #1
 800ef66:	9304      	str	r3, [sp, #16]
 800ef68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef6e:	2301      	movs	r3, #1
 800ef70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f000 81b8 	beq.w	800f2ea <_dtoa_r+0xb6a>
 800ef7a:	6923      	ldr	r3, [r4, #16]
 800ef7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef80:	6918      	ldr	r0, [r3, #16]
 800ef82:	f7fe fd61 	bl	800da48 <__hi0bits>
 800ef86:	f1c0 0020 	rsb	r0, r0, #32
 800ef8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef8c:	4418      	add	r0, r3
 800ef8e:	f010 001f 	ands.w	r0, r0, #31
 800ef92:	f000 8082 	beq.w	800f09a <_dtoa_r+0x91a>
 800ef96:	f1c0 0320 	rsb	r3, r0, #32
 800ef9a:	2b04      	cmp	r3, #4
 800ef9c:	dd73      	ble.n	800f086 <_dtoa_r+0x906>
 800ef9e:	9b04      	ldr	r3, [sp, #16]
 800efa0:	f1c0 001c 	rsb	r0, r0, #28
 800efa4:	4403      	add	r3, r0
 800efa6:	9304      	str	r3, [sp, #16]
 800efa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efaa:	4406      	add	r6, r0
 800efac:	4403      	add	r3, r0
 800efae:	9309      	str	r3, [sp, #36]	@ 0x24
 800efb0:	9b04      	ldr	r3, [sp, #16]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	dd05      	ble.n	800efc2 <_dtoa_r+0x842>
 800efb6:	461a      	mov	r2, r3
 800efb8:	4648      	mov	r0, r9
 800efba:	9903      	ldr	r1, [sp, #12]
 800efbc:	f7fe fea2 	bl	800dd04 <__lshift>
 800efc0:	9003      	str	r0, [sp, #12]
 800efc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	dd05      	ble.n	800efd4 <_dtoa_r+0x854>
 800efc8:	4621      	mov	r1, r4
 800efca:	461a      	mov	r2, r3
 800efcc:	4648      	mov	r0, r9
 800efce:	f7fe fe99 	bl	800dd04 <__lshift>
 800efd2:	4604      	mov	r4, r0
 800efd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d061      	beq.n	800f09e <_dtoa_r+0x91e>
 800efda:	4621      	mov	r1, r4
 800efdc:	9803      	ldr	r0, [sp, #12]
 800efde:	f7fe fefd 	bl	800dddc <__mcmp>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	da5b      	bge.n	800f09e <_dtoa_r+0x91e>
 800efe6:	2300      	movs	r3, #0
 800efe8:	220a      	movs	r2, #10
 800efea:	4648      	mov	r0, r9
 800efec:	9903      	ldr	r1, [sp, #12]
 800efee:	f7fe fc9b 	bl	800d928 <__multadd>
 800eff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eff4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800eff8:	9003      	str	r0, [sp, #12]
 800effa:	2b00      	cmp	r3, #0
 800effc:	f000 8177 	beq.w	800f2ee <_dtoa_r+0xb6e>
 800f000:	4629      	mov	r1, r5
 800f002:	2300      	movs	r3, #0
 800f004:	220a      	movs	r2, #10
 800f006:	4648      	mov	r0, r9
 800f008:	f7fe fc8e 	bl	800d928 <__multadd>
 800f00c:	f1bb 0f00 	cmp.w	fp, #0
 800f010:	4605      	mov	r5, r0
 800f012:	dc6f      	bgt.n	800f0f4 <_dtoa_r+0x974>
 800f014:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f016:	2b02      	cmp	r3, #2
 800f018:	dc49      	bgt.n	800f0ae <_dtoa_r+0x92e>
 800f01a:	e06b      	b.n	800f0f4 <_dtoa_r+0x974>
 800f01c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f01e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f022:	e73c      	b.n	800ee9e <_dtoa_r+0x71e>
 800f024:	3fe00000 	.word	0x3fe00000
 800f028:	40240000 	.word	0x40240000
 800f02c:	9b08      	ldr	r3, [sp, #32]
 800f02e:	1e5c      	subs	r4, r3, #1
 800f030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f032:	42a3      	cmp	r3, r4
 800f034:	db09      	blt.n	800f04a <_dtoa_r+0x8ca>
 800f036:	1b1c      	subs	r4, r3, r4
 800f038:	9b08      	ldr	r3, [sp, #32]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f6bf af30 	bge.w	800eea0 <_dtoa_r+0x720>
 800f040:	9b04      	ldr	r3, [sp, #16]
 800f042:	9a08      	ldr	r2, [sp, #32]
 800f044:	1a9e      	subs	r6, r3, r2
 800f046:	2300      	movs	r3, #0
 800f048:	e72b      	b.n	800eea2 <_dtoa_r+0x722>
 800f04a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f04c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f04e:	1ae3      	subs	r3, r4, r3
 800f050:	441a      	add	r2, r3
 800f052:	940a      	str	r4, [sp, #40]	@ 0x28
 800f054:	9e04      	ldr	r6, [sp, #16]
 800f056:	2400      	movs	r4, #0
 800f058:	9b08      	ldr	r3, [sp, #32]
 800f05a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f05c:	e721      	b.n	800eea2 <_dtoa_r+0x722>
 800f05e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f060:	9e04      	ldr	r6, [sp, #16]
 800f062:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f064:	e728      	b.n	800eeb8 <_dtoa_r+0x738>
 800f066:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f06a:	e751      	b.n	800ef10 <_dtoa_r+0x790>
 800f06c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f06e:	9903      	ldr	r1, [sp, #12]
 800f070:	e750      	b.n	800ef14 <_dtoa_r+0x794>
 800f072:	f8cd 800c 	str.w	r8, [sp, #12]
 800f076:	e751      	b.n	800ef1c <_dtoa_r+0x79c>
 800f078:	2300      	movs	r3, #0
 800f07a:	e779      	b.n	800ef70 <_dtoa_r+0x7f0>
 800f07c:	9b06      	ldr	r3, [sp, #24]
 800f07e:	e777      	b.n	800ef70 <_dtoa_r+0x7f0>
 800f080:	2300      	movs	r3, #0
 800f082:	930a      	str	r3, [sp, #40]	@ 0x28
 800f084:	e779      	b.n	800ef7a <_dtoa_r+0x7fa>
 800f086:	d093      	beq.n	800efb0 <_dtoa_r+0x830>
 800f088:	9a04      	ldr	r2, [sp, #16]
 800f08a:	331c      	adds	r3, #28
 800f08c:	441a      	add	r2, r3
 800f08e:	9204      	str	r2, [sp, #16]
 800f090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f092:	441e      	add	r6, r3
 800f094:	441a      	add	r2, r3
 800f096:	9209      	str	r2, [sp, #36]	@ 0x24
 800f098:	e78a      	b.n	800efb0 <_dtoa_r+0x830>
 800f09a:	4603      	mov	r3, r0
 800f09c:	e7f4      	b.n	800f088 <_dtoa_r+0x908>
 800f09e:	9b08      	ldr	r3, [sp, #32]
 800f0a0:	46b8      	mov	r8, r7
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	dc20      	bgt.n	800f0e8 <_dtoa_r+0x968>
 800f0a6:	469b      	mov	fp, r3
 800f0a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	dd1e      	ble.n	800f0ec <_dtoa_r+0x96c>
 800f0ae:	f1bb 0f00 	cmp.w	fp, #0
 800f0b2:	f47f adb1 	bne.w	800ec18 <_dtoa_r+0x498>
 800f0b6:	4621      	mov	r1, r4
 800f0b8:	465b      	mov	r3, fp
 800f0ba:	2205      	movs	r2, #5
 800f0bc:	4648      	mov	r0, r9
 800f0be:	f7fe fc33 	bl	800d928 <__multadd>
 800f0c2:	4601      	mov	r1, r0
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	9803      	ldr	r0, [sp, #12]
 800f0c8:	f7fe fe88 	bl	800dddc <__mcmp>
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	f77f ada3 	ble.w	800ec18 <_dtoa_r+0x498>
 800f0d2:	4656      	mov	r6, sl
 800f0d4:	2331      	movs	r3, #49	@ 0x31
 800f0d6:	f108 0801 	add.w	r8, r8, #1
 800f0da:	f806 3b01 	strb.w	r3, [r6], #1
 800f0de:	e59f      	b.n	800ec20 <_dtoa_r+0x4a0>
 800f0e0:	46b8      	mov	r8, r7
 800f0e2:	9c08      	ldr	r4, [sp, #32]
 800f0e4:	4625      	mov	r5, r4
 800f0e6:	e7f4      	b.n	800f0d2 <_dtoa_r+0x952>
 800f0e8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800f0ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f000 8101 	beq.w	800f2f6 <_dtoa_r+0xb76>
 800f0f4:	2e00      	cmp	r6, #0
 800f0f6:	dd05      	ble.n	800f104 <_dtoa_r+0x984>
 800f0f8:	4629      	mov	r1, r5
 800f0fa:	4632      	mov	r2, r6
 800f0fc:	4648      	mov	r0, r9
 800f0fe:	f7fe fe01 	bl	800dd04 <__lshift>
 800f102:	4605      	mov	r5, r0
 800f104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f106:	2b00      	cmp	r3, #0
 800f108:	d05c      	beq.n	800f1c4 <_dtoa_r+0xa44>
 800f10a:	4648      	mov	r0, r9
 800f10c:	6869      	ldr	r1, [r5, #4]
 800f10e:	f7fe fba9 	bl	800d864 <_Balloc>
 800f112:	4606      	mov	r6, r0
 800f114:	b928      	cbnz	r0, 800f122 <_dtoa_r+0x9a2>
 800f116:	4602      	mov	r2, r0
 800f118:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f11c:	4b80      	ldr	r3, [pc, #512]	@ (800f320 <_dtoa_r+0xba0>)
 800f11e:	f7ff bb43 	b.w	800e7a8 <_dtoa_r+0x28>
 800f122:	692a      	ldr	r2, [r5, #16]
 800f124:	f105 010c 	add.w	r1, r5, #12
 800f128:	3202      	adds	r2, #2
 800f12a:	0092      	lsls	r2, r2, #2
 800f12c:	300c      	adds	r0, #12
 800f12e:	f7fd ff42 	bl	800cfb6 <memcpy>
 800f132:	2201      	movs	r2, #1
 800f134:	4631      	mov	r1, r6
 800f136:	4648      	mov	r0, r9
 800f138:	f7fe fde4 	bl	800dd04 <__lshift>
 800f13c:	462f      	mov	r7, r5
 800f13e:	4605      	mov	r5, r0
 800f140:	f10a 0301 	add.w	r3, sl, #1
 800f144:	9304      	str	r3, [sp, #16]
 800f146:	eb0a 030b 	add.w	r3, sl, fp
 800f14a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f14c:	9b06      	ldr	r3, [sp, #24]
 800f14e:	f003 0301 	and.w	r3, r3, #1
 800f152:	9309      	str	r3, [sp, #36]	@ 0x24
 800f154:	9b04      	ldr	r3, [sp, #16]
 800f156:	4621      	mov	r1, r4
 800f158:	9803      	ldr	r0, [sp, #12]
 800f15a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800f15e:	f7ff fa85 	bl	800e66c <quorem>
 800f162:	4603      	mov	r3, r0
 800f164:	4639      	mov	r1, r7
 800f166:	3330      	adds	r3, #48	@ 0x30
 800f168:	9006      	str	r0, [sp, #24]
 800f16a:	9803      	ldr	r0, [sp, #12]
 800f16c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f16e:	f7fe fe35 	bl	800dddc <__mcmp>
 800f172:	462a      	mov	r2, r5
 800f174:	9008      	str	r0, [sp, #32]
 800f176:	4621      	mov	r1, r4
 800f178:	4648      	mov	r0, r9
 800f17a:	f7fe fe4b 	bl	800de14 <__mdiff>
 800f17e:	68c2      	ldr	r2, [r0, #12]
 800f180:	4606      	mov	r6, r0
 800f182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f184:	bb02      	cbnz	r2, 800f1c8 <_dtoa_r+0xa48>
 800f186:	4601      	mov	r1, r0
 800f188:	9803      	ldr	r0, [sp, #12]
 800f18a:	f7fe fe27 	bl	800dddc <__mcmp>
 800f18e:	4602      	mov	r2, r0
 800f190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f192:	4631      	mov	r1, r6
 800f194:	4648      	mov	r0, r9
 800f196:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800f19a:	f7fe fba3 	bl	800d8e4 <_Bfree>
 800f19e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f1a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f1a2:	9e04      	ldr	r6, [sp, #16]
 800f1a4:	ea42 0103 	orr.w	r1, r2, r3
 800f1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1aa:	4319      	orrs	r1, r3
 800f1ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1ae:	d10d      	bne.n	800f1cc <_dtoa_r+0xa4c>
 800f1b0:	2b39      	cmp	r3, #57	@ 0x39
 800f1b2:	d027      	beq.n	800f204 <_dtoa_r+0xa84>
 800f1b4:	9a08      	ldr	r2, [sp, #32]
 800f1b6:	2a00      	cmp	r2, #0
 800f1b8:	dd01      	ble.n	800f1be <_dtoa_r+0xa3e>
 800f1ba:	9b06      	ldr	r3, [sp, #24]
 800f1bc:	3331      	adds	r3, #49	@ 0x31
 800f1be:	f88b 3000 	strb.w	r3, [fp]
 800f1c2:	e52e      	b.n	800ec22 <_dtoa_r+0x4a2>
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	e7b9      	b.n	800f13c <_dtoa_r+0x9bc>
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	e7e2      	b.n	800f192 <_dtoa_r+0xa12>
 800f1cc:	9908      	ldr	r1, [sp, #32]
 800f1ce:	2900      	cmp	r1, #0
 800f1d0:	db04      	blt.n	800f1dc <_dtoa_r+0xa5c>
 800f1d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800f1d4:	4301      	orrs	r1, r0
 800f1d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1d8:	4301      	orrs	r1, r0
 800f1da:	d120      	bne.n	800f21e <_dtoa_r+0xa9e>
 800f1dc:	2a00      	cmp	r2, #0
 800f1de:	ddee      	ble.n	800f1be <_dtoa_r+0xa3e>
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	9903      	ldr	r1, [sp, #12]
 800f1e4:	4648      	mov	r0, r9
 800f1e6:	9304      	str	r3, [sp, #16]
 800f1e8:	f7fe fd8c 	bl	800dd04 <__lshift>
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	9003      	str	r0, [sp, #12]
 800f1f0:	f7fe fdf4 	bl	800dddc <__mcmp>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	9b04      	ldr	r3, [sp, #16]
 800f1f8:	dc02      	bgt.n	800f200 <_dtoa_r+0xa80>
 800f1fa:	d1e0      	bne.n	800f1be <_dtoa_r+0xa3e>
 800f1fc:	07da      	lsls	r2, r3, #31
 800f1fe:	d5de      	bpl.n	800f1be <_dtoa_r+0xa3e>
 800f200:	2b39      	cmp	r3, #57	@ 0x39
 800f202:	d1da      	bne.n	800f1ba <_dtoa_r+0xa3a>
 800f204:	2339      	movs	r3, #57	@ 0x39
 800f206:	f88b 3000 	strb.w	r3, [fp]
 800f20a:	4633      	mov	r3, r6
 800f20c:	461e      	mov	r6, r3
 800f20e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f212:	3b01      	subs	r3, #1
 800f214:	2a39      	cmp	r2, #57	@ 0x39
 800f216:	d04e      	beq.n	800f2b6 <_dtoa_r+0xb36>
 800f218:	3201      	adds	r2, #1
 800f21a:	701a      	strb	r2, [r3, #0]
 800f21c:	e501      	b.n	800ec22 <_dtoa_r+0x4a2>
 800f21e:	2a00      	cmp	r2, #0
 800f220:	dd03      	ble.n	800f22a <_dtoa_r+0xaaa>
 800f222:	2b39      	cmp	r3, #57	@ 0x39
 800f224:	d0ee      	beq.n	800f204 <_dtoa_r+0xa84>
 800f226:	3301      	adds	r3, #1
 800f228:	e7c9      	b.n	800f1be <_dtoa_r+0xa3e>
 800f22a:	9a04      	ldr	r2, [sp, #16]
 800f22c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f22e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f232:	428a      	cmp	r2, r1
 800f234:	d028      	beq.n	800f288 <_dtoa_r+0xb08>
 800f236:	2300      	movs	r3, #0
 800f238:	220a      	movs	r2, #10
 800f23a:	9903      	ldr	r1, [sp, #12]
 800f23c:	4648      	mov	r0, r9
 800f23e:	f7fe fb73 	bl	800d928 <__multadd>
 800f242:	42af      	cmp	r7, r5
 800f244:	9003      	str	r0, [sp, #12]
 800f246:	f04f 0300 	mov.w	r3, #0
 800f24a:	f04f 020a 	mov.w	r2, #10
 800f24e:	4639      	mov	r1, r7
 800f250:	4648      	mov	r0, r9
 800f252:	d107      	bne.n	800f264 <_dtoa_r+0xae4>
 800f254:	f7fe fb68 	bl	800d928 <__multadd>
 800f258:	4607      	mov	r7, r0
 800f25a:	4605      	mov	r5, r0
 800f25c:	9b04      	ldr	r3, [sp, #16]
 800f25e:	3301      	adds	r3, #1
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	e777      	b.n	800f154 <_dtoa_r+0x9d4>
 800f264:	f7fe fb60 	bl	800d928 <__multadd>
 800f268:	4629      	mov	r1, r5
 800f26a:	4607      	mov	r7, r0
 800f26c:	2300      	movs	r3, #0
 800f26e:	220a      	movs	r2, #10
 800f270:	4648      	mov	r0, r9
 800f272:	f7fe fb59 	bl	800d928 <__multadd>
 800f276:	4605      	mov	r5, r0
 800f278:	e7f0      	b.n	800f25c <_dtoa_r+0xadc>
 800f27a:	f1bb 0f00 	cmp.w	fp, #0
 800f27e:	bfcc      	ite	gt
 800f280:	465e      	movgt	r6, fp
 800f282:	2601      	movle	r6, #1
 800f284:	2700      	movs	r7, #0
 800f286:	4456      	add	r6, sl
 800f288:	2201      	movs	r2, #1
 800f28a:	9903      	ldr	r1, [sp, #12]
 800f28c:	4648      	mov	r0, r9
 800f28e:	9304      	str	r3, [sp, #16]
 800f290:	f7fe fd38 	bl	800dd04 <__lshift>
 800f294:	4621      	mov	r1, r4
 800f296:	9003      	str	r0, [sp, #12]
 800f298:	f7fe fda0 	bl	800dddc <__mcmp>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	dcb4      	bgt.n	800f20a <_dtoa_r+0xa8a>
 800f2a0:	d102      	bne.n	800f2a8 <_dtoa_r+0xb28>
 800f2a2:	9b04      	ldr	r3, [sp, #16]
 800f2a4:	07db      	lsls	r3, r3, #31
 800f2a6:	d4b0      	bmi.n	800f20a <_dtoa_r+0xa8a>
 800f2a8:	4633      	mov	r3, r6
 800f2aa:	461e      	mov	r6, r3
 800f2ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2b0:	2a30      	cmp	r2, #48	@ 0x30
 800f2b2:	d0fa      	beq.n	800f2aa <_dtoa_r+0xb2a>
 800f2b4:	e4b5      	b.n	800ec22 <_dtoa_r+0x4a2>
 800f2b6:	459a      	cmp	sl, r3
 800f2b8:	d1a8      	bne.n	800f20c <_dtoa_r+0xa8c>
 800f2ba:	2331      	movs	r3, #49	@ 0x31
 800f2bc:	f108 0801 	add.w	r8, r8, #1
 800f2c0:	f88a 3000 	strb.w	r3, [sl]
 800f2c4:	e4ad      	b.n	800ec22 <_dtoa_r+0x4a2>
 800f2c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f2c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f324 <_dtoa_r+0xba4>
 800f2cc:	b11b      	cbz	r3, 800f2d6 <_dtoa_r+0xb56>
 800f2ce:	f10a 0308 	add.w	r3, sl, #8
 800f2d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f2d4:	6013      	str	r3, [r2, #0]
 800f2d6:	4650      	mov	r0, sl
 800f2d8:	b017      	add	sp, #92	@ 0x5c
 800f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	f77f ae2e 	ble.w	800ef42 <_dtoa_r+0x7c2>
 800f2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	e64d      	b.n	800ef8a <_dtoa_r+0x80a>
 800f2ee:	f1bb 0f00 	cmp.w	fp, #0
 800f2f2:	f77f aed9 	ble.w	800f0a8 <_dtoa_r+0x928>
 800f2f6:	4656      	mov	r6, sl
 800f2f8:	4621      	mov	r1, r4
 800f2fa:	9803      	ldr	r0, [sp, #12]
 800f2fc:	f7ff f9b6 	bl	800e66c <quorem>
 800f300:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f304:	f806 3b01 	strb.w	r3, [r6], #1
 800f308:	eba6 020a 	sub.w	r2, r6, sl
 800f30c:	4593      	cmp	fp, r2
 800f30e:	ddb4      	ble.n	800f27a <_dtoa_r+0xafa>
 800f310:	2300      	movs	r3, #0
 800f312:	220a      	movs	r2, #10
 800f314:	4648      	mov	r0, r9
 800f316:	9903      	ldr	r1, [sp, #12]
 800f318:	f7fe fb06 	bl	800d928 <__multadd>
 800f31c:	9003      	str	r0, [sp, #12]
 800f31e:	e7eb      	b.n	800f2f8 <_dtoa_r+0xb78>
 800f320:	0800fc9e 	.word	0x0800fc9e
 800f324:	0800fdbb 	.word	0x0800fdbb

0800f328 <malloc>:
 800f328:	4b02      	ldr	r3, [pc, #8]	@ (800f334 <malloc+0xc>)
 800f32a:	4601      	mov	r1, r0
 800f32c:	6818      	ldr	r0, [r3, #0]
 800f32e:	f7fe b9fb 	b.w	800d728 <_malloc_r>
 800f332:	bf00      	nop
 800f334:	200002f8 	.word	0x200002f8

0800f338 <fiprintf>:
 800f338:	b40e      	push	{r1, r2, r3}
 800f33a:	b503      	push	{r0, r1, lr}
 800f33c:	4601      	mov	r1, r0
 800f33e:	ab03      	add	r3, sp, #12
 800f340:	4805      	ldr	r0, [pc, #20]	@ (800f358 <fiprintf+0x20>)
 800f342:	f853 2b04 	ldr.w	r2, [r3], #4
 800f346:	6800      	ldr	r0, [r0, #0]
 800f348:	9301      	str	r3, [sp, #4]
 800f34a:	f000 f835 	bl	800f3b8 <_vfiprintf_r>
 800f34e:	b002      	add	sp, #8
 800f350:	f85d eb04 	ldr.w	lr, [sp], #4
 800f354:	b003      	add	sp, #12
 800f356:	4770      	bx	lr
 800f358:	200002f8 	.word	0x200002f8

0800f35c <abort>:
 800f35c:	2006      	movs	r0, #6
 800f35e:	b508      	push	{r3, lr}
 800f360:	f000 fb8e 	bl	800fa80 <raise>
 800f364:	2001      	movs	r0, #1
 800f366:	f7f2 fffa 	bl	800235e <_exit>

0800f36a <__sfputc_r>:
 800f36a:	6893      	ldr	r3, [r2, #8]
 800f36c:	b410      	push	{r4}
 800f36e:	3b01      	subs	r3, #1
 800f370:	2b00      	cmp	r3, #0
 800f372:	6093      	str	r3, [r2, #8]
 800f374:	da07      	bge.n	800f386 <__sfputc_r+0x1c>
 800f376:	6994      	ldr	r4, [r2, #24]
 800f378:	42a3      	cmp	r3, r4
 800f37a:	db01      	blt.n	800f380 <__sfputc_r+0x16>
 800f37c:	290a      	cmp	r1, #10
 800f37e:	d102      	bne.n	800f386 <__sfputc_r+0x1c>
 800f380:	bc10      	pop	{r4}
 800f382:	f000 bac1 	b.w	800f908 <__swbuf_r>
 800f386:	6813      	ldr	r3, [r2, #0]
 800f388:	1c58      	adds	r0, r3, #1
 800f38a:	6010      	str	r0, [r2, #0]
 800f38c:	7019      	strb	r1, [r3, #0]
 800f38e:	4608      	mov	r0, r1
 800f390:	bc10      	pop	{r4}
 800f392:	4770      	bx	lr

0800f394 <__sfputs_r>:
 800f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f396:	4606      	mov	r6, r0
 800f398:	460f      	mov	r7, r1
 800f39a:	4614      	mov	r4, r2
 800f39c:	18d5      	adds	r5, r2, r3
 800f39e:	42ac      	cmp	r4, r5
 800f3a0:	d101      	bne.n	800f3a6 <__sfputs_r+0x12>
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	e007      	b.n	800f3b6 <__sfputs_r+0x22>
 800f3a6:	463a      	mov	r2, r7
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ae:	f7ff ffdc 	bl	800f36a <__sfputc_r>
 800f3b2:	1c43      	adds	r3, r0, #1
 800f3b4:	d1f3      	bne.n	800f39e <__sfputs_r+0xa>
 800f3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f3b8 <_vfiprintf_r>:
 800f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3bc:	460d      	mov	r5, r1
 800f3be:	4614      	mov	r4, r2
 800f3c0:	4698      	mov	r8, r3
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	b09d      	sub	sp, #116	@ 0x74
 800f3c6:	b118      	cbz	r0, 800f3d0 <_vfiprintf_r+0x18>
 800f3c8:	6a03      	ldr	r3, [r0, #32]
 800f3ca:	b90b      	cbnz	r3, 800f3d0 <_vfiprintf_r+0x18>
 800f3cc:	f7fd fcec 	bl	800cda8 <__sinit>
 800f3d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3d2:	07d9      	lsls	r1, r3, #31
 800f3d4:	d405      	bmi.n	800f3e2 <_vfiprintf_r+0x2a>
 800f3d6:	89ab      	ldrh	r3, [r5, #12]
 800f3d8:	059a      	lsls	r2, r3, #22
 800f3da:	d402      	bmi.n	800f3e2 <_vfiprintf_r+0x2a>
 800f3dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3de:	f7fd fde8 	bl	800cfb2 <__retarget_lock_acquire_recursive>
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	071b      	lsls	r3, r3, #28
 800f3e6:	d501      	bpl.n	800f3ec <_vfiprintf_r+0x34>
 800f3e8:	692b      	ldr	r3, [r5, #16]
 800f3ea:	b99b      	cbnz	r3, 800f414 <_vfiprintf_r+0x5c>
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	f000 fac8 	bl	800f984 <__swsetup_r>
 800f3f4:	b170      	cbz	r0, 800f414 <_vfiprintf_r+0x5c>
 800f3f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3f8:	07dc      	lsls	r4, r3, #31
 800f3fa:	d504      	bpl.n	800f406 <_vfiprintf_r+0x4e>
 800f3fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f400:	b01d      	add	sp, #116	@ 0x74
 800f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f406:	89ab      	ldrh	r3, [r5, #12]
 800f408:	0598      	lsls	r0, r3, #22
 800f40a:	d4f7      	bmi.n	800f3fc <_vfiprintf_r+0x44>
 800f40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f40e:	f7fd fdd1 	bl	800cfb4 <__retarget_lock_release_recursive>
 800f412:	e7f3      	b.n	800f3fc <_vfiprintf_r+0x44>
 800f414:	2300      	movs	r3, #0
 800f416:	9309      	str	r3, [sp, #36]	@ 0x24
 800f418:	2320      	movs	r3, #32
 800f41a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f41e:	2330      	movs	r3, #48	@ 0x30
 800f420:	f04f 0901 	mov.w	r9, #1
 800f424:	f8cd 800c 	str.w	r8, [sp, #12]
 800f428:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800f5d4 <_vfiprintf_r+0x21c>
 800f42c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f430:	4623      	mov	r3, r4
 800f432:	469a      	mov	sl, r3
 800f434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f438:	b10a      	cbz	r2, 800f43e <_vfiprintf_r+0x86>
 800f43a:	2a25      	cmp	r2, #37	@ 0x25
 800f43c:	d1f9      	bne.n	800f432 <_vfiprintf_r+0x7a>
 800f43e:	ebba 0b04 	subs.w	fp, sl, r4
 800f442:	d00b      	beq.n	800f45c <_vfiprintf_r+0xa4>
 800f444:	465b      	mov	r3, fp
 800f446:	4622      	mov	r2, r4
 800f448:	4629      	mov	r1, r5
 800f44a:	4630      	mov	r0, r6
 800f44c:	f7ff ffa2 	bl	800f394 <__sfputs_r>
 800f450:	3001      	adds	r0, #1
 800f452:	f000 80a7 	beq.w	800f5a4 <_vfiprintf_r+0x1ec>
 800f456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f458:	445a      	add	r2, fp
 800f45a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f45c:	f89a 3000 	ldrb.w	r3, [sl]
 800f460:	2b00      	cmp	r3, #0
 800f462:	f000 809f 	beq.w	800f5a4 <_vfiprintf_r+0x1ec>
 800f466:	2300      	movs	r3, #0
 800f468:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f470:	f10a 0a01 	add.w	sl, sl, #1
 800f474:	9304      	str	r3, [sp, #16]
 800f476:	9307      	str	r3, [sp, #28]
 800f478:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f47c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f47e:	4654      	mov	r4, sl
 800f480:	2205      	movs	r2, #5
 800f482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f486:	4853      	ldr	r0, [pc, #332]	@ (800f5d4 <_vfiprintf_r+0x21c>)
 800f488:	f000 fb16 	bl	800fab8 <memchr>
 800f48c:	9a04      	ldr	r2, [sp, #16]
 800f48e:	b9d8      	cbnz	r0, 800f4c8 <_vfiprintf_r+0x110>
 800f490:	06d1      	lsls	r1, r2, #27
 800f492:	bf44      	itt	mi
 800f494:	2320      	movmi	r3, #32
 800f496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f49a:	0713      	lsls	r3, r2, #28
 800f49c:	bf44      	itt	mi
 800f49e:	232b      	movmi	r3, #43	@ 0x2b
 800f4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4aa:	d015      	beq.n	800f4d8 <_vfiprintf_r+0x120>
 800f4ac:	4654      	mov	r4, sl
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	f04f 0c0a 	mov.w	ip, #10
 800f4b4:	9a07      	ldr	r2, [sp, #28]
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4bc:	3b30      	subs	r3, #48	@ 0x30
 800f4be:	2b09      	cmp	r3, #9
 800f4c0:	d94b      	bls.n	800f55a <_vfiprintf_r+0x1a2>
 800f4c2:	b1b0      	cbz	r0, 800f4f2 <_vfiprintf_r+0x13a>
 800f4c4:	9207      	str	r2, [sp, #28]
 800f4c6:	e014      	b.n	800f4f2 <_vfiprintf_r+0x13a>
 800f4c8:	eba0 0308 	sub.w	r3, r0, r8
 800f4cc:	fa09 f303 	lsl.w	r3, r9, r3
 800f4d0:	4313      	orrs	r3, r2
 800f4d2:	46a2      	mov	sl, r4
 800f4d4:	9304      	str	r3, [sp, #16]
 800f4d6:	e7d2      	b.n	800f47e <_vfiprintf_r+0xc6>
 800f4d8:	9b03      	ldr	r3, [sp, #12]
 800f4da:	1d19      	adds	r1, r3, #4
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	9103      	str	r1, [sp, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	bfbb      	ittet	lt
 800f4e4:	425b      	neglt	r3, r3
 800f4e6:	f042 0202 	orrlt.w	r2, r2, #2
 800f4ea:	9307      	strge	r3, [sp, #28]
 800f4ec:	9307      	strlt	r3, [sp, #28]
 800f4ee:	bfb8      	it	lt
 800f4f0:	9204      	strlt	r2, [sp, #16]
 800f4f2:	7823      	ldrb	r3, [r4, #0]
 800f4f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4f6:	d10a      	bne.n	800f50e <_vfiprintf_r+0x156>
 800f4f8:	7863      	ldrb	r3, [r4, #1]
 800f4fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4fc:	d132      	bne.n	800f564 <_vfiprintf_r+0x1ac>
 800f4fe:	9b03      	ldr	r3, [sp, #12]
 800f500:	3402      	adds	r4, #2
 800f502:	1d1a      	adds	r2, r3, #4
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	9203      	str	r2, [sp, #12]
 800f508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f50c:	9305      	str	r3, [sp, #20]
 800f50e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f5d8 <_vfiprintf_r+0x220>
 800f512:	2203      	movs	r2, #3
 800f514:	4650      	mov	r0, sl
 800f516:	7821      	ldrb	r1, [r4, #0]
 800f518:	f000 face 	bl	800fab8 <memchr>
 800f51c:	b138      	cbz	r0, 800f52e <_vfiprintf_r+0x176>
 800f51e:	2240      	movs	r2, #64	@ 0x40
 800f520:	9b04      	ldr	r3, [sp, #16]
 800f522:	eba0 000a 	sub.w	r0, r0, sl
 800f526:	4082      	lsls	r2, r0
 800f528:	4313      	orrs	r3, r2
 800f52a:	3401      	adds	r4, #1
 800f52c:	9304      	str	r3, [sp, #16]
 800f52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f532:	2206      	movs	r2, #6
 800f534:	4829      	ldr	r0, [pc, #164]	@ (800f5dc <_vfiprintf_r+0x224>)
 800f536:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f53a:	f000 fabd 	bl	800fab8 <memchr>
 800f53e:	2800      	cmp	r0, #0
 800f540:	d03f      	beq.n	800f5c2 <_vfiprintf_r+0x20a>
 800f542:	4b27      	ldr	r3, [pc, #156]	@ (800f5e0 <_vfiprintf_r+0x228>)
 800f544:	bb1b      	cbnz	r3, 800f58e <_vfiprintf_r+0x1d6>
 800f546:	9b03      	ldr	r3, [sp, #12]
 800f548:	3307      	adds	r3, #7
 800f54a:	f023 0307 	bic.w	r3, r3, #7
 800f54e:	3308      	adds	r3, #8
 800f550:	9303      	str	r3, [sp, #12]
 800f552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f554:	443b      	add	r3, r7
 800f556:	9309      	str	r3, [sp, #36]	@ 0x24
 800f558:	e76a      	b.n	800f430 <_vfiprintf_r+0x78>
 800f55a:	460c      	mov	r4, r1
 800f55c:	2001      	movs	r0, #1
 800f55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f562:	e7a8      	b.n	800f4b6 <_vfiprintf_r+0xfe>
 800f564:	2300      	movs	r3, #0
 800f566:	f04f 0c0a 	mov.w	ip, #10
 800f56a:	4619      	mov	r1, r3
 800f56c:	3401      	adds	r4, #1
 800f56e:	9305      	str	r3, [sp, #20]
 800f570:	4620      	mov	r0, r4
 800f572:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f576:	3a30      	subs	r2, #48	@ 0x30
 800f578:	2a09      	cmp	r2, #9
 800f57a:	d903      	bls.n	800f584 <_vfiprintf_r+0x1cc>
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d0c6      	beq.n	800f50e <_vfiprintf_r+0x156>
 800f580:	9105      	str	r1, [sp, #20]
 800f582:	e7c4      	b.n	800f50e <_vfiprintf_r+0x156>
 800f584:	4604      	mov	r4, r0
 800f586:	2301      	movs	r3, #1
 800f588:	fb0c 2101 	mla	r1, ip, r1, r2
 800f58c:	e7f0      	b.n	800f570 <_vfiprintf_r+0x1b8>
 800f58e:	ab03      	add	r3, sp, #12
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	462a      	mov	r2, r5
 800f594:	4630      	mov	r0, r6
 800f596:	4b13      	ldr	r3, [pc, #76]	@ (800f5e4 <_vfiprintf_r+0x22c>)
 800f598:	a904      	add	r1, sp, #16
 800f59a:	f3af 8000 	nop.w
 800f59e:	4607      	mov	r7, r0
 800f5a0:	1c78      	adds	r0, r7, #1
 800f5a2:	d1d6      	bne.n	800f552 <_vfiprintf_r+0x19a>
 800f5a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5a6:	07d9      	lsls	r1, r3, #31
 800f5a8:	d405      	bmi.n	800f5b6 <_vfiprintf_r+0x1fe>
 800f5aa:	89ab      	ldrh	r3, [r5, #12]
 800f5ac:	059a      	lsls	r2, r3, #22
 800f5ae:	d402      	bmi.n	800f5b6 <_vfiprintf_r+0x1fe>
 800f5b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5b2:	f7fd fcff 	bl	800cfb4 <__retarget_lock_release_recursive>
 800f5b6:	89ab      	ldrh	r3, [r5, #12]
 800f5b8:	065b      	lsls	r3, r3, #25
 800f5ba:	f53f af1f 	bmi.w	800f3fc <_vfiprintf_r+0x44>
 800f5be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5c0:	e71e      	b.n	800f400 <_vfiprintf_r+0x48>
 800f5c2:	ab03      	add	r3, sp, #12
 800f5c4:	9300      	str	r3, [sp, #0]
 800f5c6:	462a      	mov	r2, r5
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	4b06      	ldr	r3, [pc, #24]	@ (800f5e4 <_vfiprintf_r+0x22c>)
 800f5cc:	a904      	add	r1, sp, #16
 800f5ce:	f000 f87d 	bl	800f6cc <_printf_i>
 800f5d2:	e7e4      	b.n	800f59e <_vfiprintf_r+0x1e6>
 800f5d4:	0800fe22 	.word	0x0800fe22
 800f5d8:	0800fe28 	.word	0x0800fe28
 800f5dc:	0800fe2c 	.word	0x0800fe2c
 800f5e0:	00000000 	.word	0x00000000
 800f5e4:	0800f395 	.word	0x0800f395

0800f5e8 <_printf_common>:
 800f5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ec:	4616      	mov	r6, r2
 800f5ee:	4698      	mov	r8, r3
 800f5f0:	688a      	ldr	r2, [r1, #8]
 800f5f2:	690b      	ldr	r3, [r1, #16]
 800f5f4:	4607      	mov	r7, r0
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	bfb8      	it	lt
 800f5fa:	4613      	movlt	r3, r2
 800f5fc:	6033      	str	r3, [r6, #0]
 800f5fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f602:	460c      	mov	r4, r1
 800f604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f608:	b10a      	cbz	r2, 800f60e <_printf_common+0x26>
 800f60a:	3301      	adds	r3, #1
 800f60c:	6033      	str	r3, [r6, #0]
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	0699      	lsls	r1, r3, #26
 800f612:	bf42      	ittt	mi
 800f614:	6833      	ldrmi	r3, [r6, #0]
 800f616:	3302      	addmi	r3, #2
 800f618:	6033      	strmi	r3, [r6, #0]
 800f61a:	6825      	ldr	r5, [r4, #0]
 800f61c:	f015 0506 	ands.w	r5, r5, #6
 800f620:	d106      	bne.n	800f630 <_printf_common+0x48>
 800f622:	f104 0a19 	add.w	sl, r4, #25
 800f626:	68e3      	ldr	r3, [r4, #12]
 800f628:	6832      	ldr	r2, [r6, #0]
 800f62a:	1a9b      	subs	r3, r3, r2
 800f62c:	42ab      	cmp	r3, r5
 800f62e:	dc2b      	bgt.n	800f688 <_printf_common+0xa0>
 800f630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f634:	6822      	ldr	r2, [r4, #0]
 800f636:	3b00      	subs	r3, #0
 800f638:	bf18      	it	ne
 800f63a:	2301      	movne	r3, #1
 800f63c:	0692      	lsls	r2, r2, #26
 800f63e:	d430      	bmi.n	800f6a2 <_printf_common+0xba>
 800f640:	4641      	mov	r1, r8
 800f642:	4638      	mov	r0, r7
 800f644:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f648:	47c8      	blx	r9
 800f64a:	3001      	adds	r0, #1
 800f64c:	d023      	beq.n	800f696 <_printf_common+0xae>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	6922      	ldr	r2, [r4, #16]
 800f652:	f003 0306 	and.w	r3, r3, #6
 800f656:	2b04      	cmp	r3, #4
 800f658:	bf14      	ite	ne
 800f65a:	2500      	movne	r5, #0
 800f65c:	6833      	ldreq	r3, [r6, #0]
 800f65e:	f04f 0600 	mov.w	r6, #0
 800f662:	bf08      	it	eq
 800f664:	68e5      	ldreq	r5, [r4, #12]
 800f666:	f104 041a 	add.w	r4, r4, #26
 800f66a:	bf08      	it	eq
 800f66c:	1aed      	subeq	r5, r5, r3
 800f66e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f672:	bf08      	it	eq
 800f674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f678:	4293      	cmp	r3, r2
 800f67a:	bfc4      	itt	gt
 800f67c:	1a9b      	subgt	r3, r3, r2
 800f67e:	18ed      	addgt	r5, r5, r3
 800f680:	42b5      	cmp	r5, r6
 800f682:	d11a      	bne.n	800f6ba <_printf_common+0xd2>
 800f684:	2000      	movs	r0, #0
 800f686:	e008      	b.n	800f69a <_printf_common+0xb2>
 800f688:	2301      	movs	r3, #1
 800f68a:	4652      	mov	r2, sl
 800f68c:	4641      	mov	r1, r8
 800f68e:	4638      	mov	r0, r7
 800f690:	47c8      	blx	r9
 800f692:	3001      	adds	r0, #1
 800f694:	d103      	bne.n	800f69e <_printf_common+0xb6>
 800f696:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f69e:	3501      	adds	r5, #1
 800f6a0:	e7c1      	b.n	800f626 <_printf_common+0x3e>
 800f6a2:	2030      	movs	r0, #48	@ 0x30
 800f6a4:	18e1      	adds	r1, r4, r3
 800f6a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f6b0:	4422      	add	r2, r4
 800f6b2:	3302      	adds	r3, #2
 800f6b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f6b8:	e7c2      	b.n	800f640 <_printf_common+0x58>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	4622      	mov	r2, r4
 800f6be:	4641      	mov	r1, r8
 800f6c0:	4638      	mov	r0, r7
 800f6c2:	47c8      	blx	r9
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	d0e6      	beq.n	800f696 <_printf_common+0xae>
 800f6c8:	3601      	adds	r6, #1
 800f6ca:	e7d9      	b.n	800f680 <_printf_common+0x98>

0800f6cc <_printf_i>:
 800f6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6d0:	7e0f      	ldrb	r7, [r1, #24]
 800f6d2:	4691      	mov	r9, r2
 800f6d4:	2f78      	cmp	r7, #120	@ 0x78
 800f6d6:	4680      	mov	r8, r0
 800f6d8:	460c      	mov	r4, r1
 800f6da:	469a      	mov	sl, r3
 800f6dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f6de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f6e2:	d807      	bhi.n	800f6f4 <_printf_i+0x28>
 800f6e4:	2f62      	cmp	r7, #98	@ 0x62
 800f6e6:	d80a      	bhi.n	800f6fe <_printf_i+0x32>
 800f6e8:	2f00      	cmp	r7, #0
 800f6ea:	f000 80d1 	beq.w	800f890 <_printf_i+0x1c4>
 800f6ee:	2f58      	cmp	r7, #88	@ 0x58
 800f6f0:	f000 80b8 	beq.w	800f864 <_printf_i+0x198>
 800f6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f6fc:	e03a      	b.n	800f774 <_printf_i+0xa8>
 800f6fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f702:	2b15      	cmp	r3, #21
 800f704:	d8f6      	bhi.n	800f6f4 <_printf_i+0x28>
 800f706:	a101      	add	r1, pc, #4	@ (adr r1, 800f70c <_printf_i+0x40>)
 800f708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f70c:	0800f765 	.word	0x0800f765
 800f710:	0800f779 	.word	0x0800f779
 800f714:	0800f6f5 	.word	0x0800f6f5
 800f718:	0800f6f5 	.word	0x0800f6f5
 800f71c:	0800f6f5 	.word	0x0800f6f5
 800f720:	0800f6f5 	.word	0x0800f6f5
 800f724:	0800f779 	.word	0x0800f779
 800f728:	0800f6f5 	.word	0x0800f6f5
 800f72c:	0800f6f5 	.word	0x0800f6f5
 800f730:	0800f6f5 	.word	0x0800f6f5
 800f734:	0800f6f5 	.word	0x0800f6f5
 800f738:	0800f877 	.word	0x0800f877
 800f73c:	0800f7a3 	.word	0x0800f7a3
 800f740:	0800f831 	.word	0x0800f831
 800f744:	0800f6f5 	.word	0x0800f6f5
 800f748:	0800f6f5 	.word	0x0800f6f5
 800f74c:	0800f899 	.word	0x0800f899
 800f750:	0800f6f5 	.word	0x0800f6f5
 800f754:	0800f7a3 	.word	0x0800f7a3
 800f758:	0800f6f5 	.word	0x0800f6f5
 800f75c:	0800f6f5 	.word	0x0800f6f5
 800f760:	0800f839 	.word	0x0800f839
 800f764:	6833      	ldr	r3, [r6, #0]
 800f766:	1d1a      	adds	r2, r3, #4
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	6032      	str	r2, [r6, #0]
 800f76c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f774:	2301      	movs	r3, #1
 800f776:	e09c      	b.n	800f8b2 <_printf_i+0x1e6>
 800f778:	6833      	ldr	r3, [r6, #0]
 800f77a:	6820      	ldr	r0, [r4, #0]
 800f77c:	1d19      	adds	r1, r3, #4
 800f77e:	6031      	str	r1, [r6, #0]
 800f780:	0606      	lsls	r6, r0, #24
 800f782:	d501      	bpl.n	800f788 <_printf_i+0xbc>
 800f784:	681d      	ldr	r5, [r3, #0]
 800f786:	e003      	b.n	800f790 <_printf_i+0xc4>
 800f788:	0645      	lsls	r5, r0, #25
 800f78a:	d5fb      	bpl.n	800f784 <_printf_i+0xb8>
 800f78c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f790:	2d00      	cmp	r5, #0
 800f792:	da03      	bge.n	800f79c <_printf_i+0xd0>
 800f794:	232d      	movs	r3, #45	@ 0x2d
 800f796:	426d      	negs	r5, r5
 800f798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f79c:	230a      	movs	r3, #10
 800f79e:	4858      	ldr	r0, [pc, #352]	@ (800f900 <_printf_i+0x234>)
 800f7a0:	e011      	b.n	800f7c6 <_printf_i+0xfa>
 800f7a2:	6821      	ldr	r1, [r4, #0]
 800f7a4:	6833      	ldr	r3, [r6, #0]
 800f7a6:	0608      	lsls	r0, r1, #24
 800f7a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f7ac:	d402      	bmi.n	800f7b4 <_printf_i+0xe8>
 800f7ae:	0649      	lsls	r1, r1, #25
 800f7b0:	bf48      	it	mi
 800f7b2:	b2ad      	uxthmi	r5, r5
 800f7b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f7b6:	6033      	str	r3, [r6, #0]
 800f7b8:	bf14      	ite	ne
 800f7ba:	230a      	movne	r3, #10
 800f7bc:	2308      	moveq	r3, #8
 800f7be:	4850      	ldr	r0, [pc, #320]	@ (800f900 <_printf_i+0x234>)
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f7c6:	6866      	ldr	r6, [r4, #4]
 800f7c8:	2e00      	cmp	r6, #0
 800f7ca:	60a6      	str	r6, [r4, #8]
 800f7cc:	db05      	blt.n	800f7da <_printf_i+0x10e>
 800f7ce:	6821      	ldr	r1, [r4, #0]
 800f7d0:	432e      	orrs	r6, r5
 800f7d2:	f021 0104 	bic.w	r1, r1, #4
 800f7d6:	6021      	str	r1, [r4, #0]
 800f7d8:	d04b      	beq.n	800f872 <_printf_i+0x1a6>
 800f7da:	4616      	mov	r6, r2
 800f7dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7e0:	fb03 5711 	mls	r7, r3, r1, r5
 800f7e4:	5dc7      	ldrb	r7, [r0, r7]
 800f7e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f7ea:	462f      	mov	r7, r5
 800f7ec:	42bb      	cmp	r3, r7
 800f7ee:	460d      	mov	r5, r1
 800f7f0:	d9f4      	bls.n	800f7dc <_printf_i+0x110>
 800f7f2:	2b08      	cmp	r3, #8
 800f7f4:	d10b      	bne.n	800f80e <_printf_i+0x142>
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	07df      	lsls	r7, r3, #31
 800f7fa:	d508      	bpl.n	800f80e <_printf_i+0x142>
 800f7fc:	6923      	ldr	r3, [r4, #16]
 800f7fe:	6861      	ldr	r1, [r4, #4]
 800f800:	4299      	cmp	r1, r3
 800f802:	bfde      	ittt	le
 800f804:	2330      	movle	r3, #48	@ 0x30
 800f806:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f80a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f80e:	1b92      	subs	r2, r2, r6
 800f810:	6122      	str	r2, [r4, #16]
 800f812:	464b      	mov	r3, r9
 800f814:	4621      	mov	r1, r4
 800f816:	4640      	mov	r0, r8
 800f818:	f8cd a000 	str.w	sl, [sp]
 800f81c:	aa03      	add	r2, sp, #12
 800f81e:	f7ff fee3 	bl	800f5e8 <_printf_common>
 800f822:	3001      	adds	r0, #1
 800f824:	d14a      	bne.n	800f8bc <_printf_i+0x1f0>
 800f826:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f82a:	b004      	add	sp, #16
 800f82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f830:	6823      	ldr	r3, [r4, #0]
 800f832:	f043 0320 	orr.w	r3, r3, #32
 800f836:	6023      	str	r3, [r4, #0]
 800f838:	2778      	movs	r7, #120	@ 0x78
 800f83a:	4832      	ldr	r0, [pc, #200]	@ (800f904 <_printf_i+0x238>)
 800f83c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	6831      	ldr	r1, [r6, #0]
 800f844:	061f      	lsls	r7, r3, #24
 800f846:	f851 5b04 	ldr.w	r5, [r1], #4
 800f84a:	d402      	bmi.n	800f852 <_printf_i+0x186>
 800f84c:	065f      	lsls	r7, r3, #25
 800f84e:	bf48      	it	mi
 800f850:	b2ad      	uxthmi	r5, r5
 800f852:	6031      	str	r1, [r6, #0]
 800f854:	07d9      	lsls	r1, r3, #31
 800f856:	bf44      	itt	mi
 800f858:	f043 0320 	orrmi.w	r3, r3, #32
 800f85c:	6023      	strmi	r3, [r4, #0]
 800f85e:	b11d      	cbz	r5, 800f868 <_printf_i+0x19c>
 800f860:	2310      	movs	r3, #16
 800f862:	e7ad      	b.n	800f7c0 <_printf_i+0xf4>
 800f864:	4826      	ldr	r0, [pc, #152]	@ (800f900 <_printf_i+0x234>)
 800f866:	e7e9      	b.n	800f83c <_printf_i+0x170>
 800f868:	6823      	ldr	r3, [r4, #0]
 800f86a:	f023 0320 	bic.w	r3, r3, #32
 800f86e:	6023      	str	r3, [r4, #0]
 800f870:	e7f6      	b.n	800f860 <_printf_i+0x194>
 800f872:	4616      	mov	r6, r2
 800f874:	e7bd      	b.n	800f7f2 <_printf_i+0x126>
 800f876:	6833      	ldr	r3, [r6, #0]
 800f878:	6825      	ldr	r5, [r4, #0]
 800f87a:	1d18      	adds	r0, r3, #4
 800f87c:	6961      	ldr	r1, [r4, #20]
 800f87e:	6030      	str	r0, [r6, #0]
 800f880:	062e      	lsls	r6, r5, #24
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	d501      	bpl.n	800f88a <_printf_i+0x1be>
 800f886:	6019      	str	r1, [r3, #0]
 800f888:	e002      	b.n	800f890 <_printf_i+0x1c4>
 800f88a:	0668      	lsls	r0, r5, #25
 800f88c:	d5fb      	bpl.n	800f886 <_printf_i+0x1ba>
 800f88e:	8019      	strh	r1, [r3, #0]
 800f890:	2300      	movs	r3, #0
 800f892:	4616      	mov	r6, r2
 800f894:	6123      	str	r3, [r4, #16]
 800f896:	e7bc      	b.n	800f812 <_printf_i+0x146>
 800f898:	6833      	ldr	r3, [r6, #0]
 800f89a:	2100      	movs	r1, #0
 800f89c:	1d1a      	adds	r2, r3, #4
 800f89e:	6032      	str	r2, [r6, #0]
 800f8a0:	681e      	ldr	r6, [r3, #0]
 800f8a2:	6862      	ldr	r2, [r4, #4]
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	f000 f907 	bl	800fab8 <memchr>
 800f8aa:	b108      	cbz	r0, 800f8b0 <_printf_i+0x1e4>
 800f8ac:	1b80      	subs	r0, r0, r6
 800f8ae:	6060      	str	r0, [r4, #4]
 800f8b0:	6863      	ldr	r3, [r4, #4]
 800f8b2:	6123      	str	r3, [r4, #16]
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8ba:	e7aa      	b.n	800f812 <_printf_i+0x146>
 800f8bc:	4632      	mov	r2, r6
 800f8be:	4649      	mov	r1, r9
 800f8c0:	4640      	mov	r0, r8
 800f8c2:	6923      	ldr	r3, [r4, #16]
 800f8c4:	47d0      	blx	sl
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	d0ad      	beq.n	800f826 <_printf_i+0x15a>
 800f8ca:	6823      	ldr	r3, [r4, #0]
 800f8cc:	079b      	lsls	r3, r3, #30
 800f8ce:	d413      	bmi.n	800f8f8 <_printf_i+0x22c>
 800f8d0:	68e0      	ldr	r0, [r4, #12]
 800f8d2:	9b03      	ldr	r3, [sp, #12]
 800f8d4:	4298      	cmp	r0, r3
 800f8d6:	bfb8      	it	lt
 800f8d8:	4618      	movlt	r0, r3
 800f8da:	e7a6      	b.n	800f82a <_printf_i+0x15e>
 800f8dc:	2301      	movs	r3, #1
 800f8de:	4632      	mov	r2, r6
 800f8e0:	4649      	mov	r1, r9
 800f8e2:	4640      	mov	r0, r8
 800f8e4:	47d0      	blx	sl
 800f8e6:	3001      	adds	r0, #1
 800f8e8:	d09d      	beq.n	800f826 <_printf_i+0x15a>
 800f8ea:	3501      	adds	r5, #1
 800f8ec:	68e3      	ldr	r3, [r4, #12]
 800f8ee:	9903      	ldr	r1, [sp, #12]
 800f8f0:	1a5b      	subs	r3, r3, r1
 800f8f2:	42ab      	cmp	r3, r5
 800f8f4:	dcf2      	bgt.n	800f8dc <_printf_i+0x210>
 800f8f6:	e7eb      	b.n	800f8d0 <_printf_i+0x204>
 800f8f8:	2500      	movs	r5, #0
 800f8fa:	f104 0619 	add.w	r6, r4, #25
 800f8fe:	e7f5      	b.n	800f8ec <_printf_i+0x220>
 800f900:	0800fe33 	.word	0x0800fe33
 800f904:	0800fe44 	.word	0x0800fe44

0800f908 <__swbuf_r>:
 800f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90a:	460e      	mov	r6, r1
 800f90c:	4614      	mov	r4, r2
 800f90e:	4605      	mov	r5, r0
 800f910:	b118      	cbz	r0, 800f91a <__swbuf_r+0x12>
 800f912:	6a03      	ldr	r3, [r0, #32]
 800f914:	b90b      	cbnz	r3, 800f91a <__swbuf_r+0x12>
 800f916:	f7fd fa47 	bl	800cda8 <__sinit>
 800f91a:	69a3      	ldr	r3, [r4, #24]
 800f91c:	60a3      	str	r3, [r4, #8]
 800f91e:	89a3      	ldrh	r3, [r4, #12]
 800f920:	071a      	lsls	r2, r3, #28
 800f922:	d501      	bpl.n	800f928 <__swbuf_r+0x20>
 800f924:	6923      	ldr	r3, [r4, #16]
 800f926:	b943      	cbnz	r3, 800f93a <__swbuf_r+0x32>
 800f928:	4621      	mov	r1, r4
 800f92a:	4628      	mov	r0, r5
 800f92c:	f000 f82a 	bl	800f984 <__swsetup_r>
 800f930:	b118      	cbz	r0, 800f93a <__swbuf_r+0x32>
 800f932:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f936:	4638      	mov	r0, r7
 800f938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	6922      	ldr	r2, [r4, #16]
 800f93e:	b2f6      	uxtb	r6, r6
 800f940:	1a98      	subs	r0, r3, r2
 800f942:	6963      	ldr	r3, [r4, #20]
 800f944:	4637      	mov	r7, r6
 800f946:	4283      	cmp	r3, r0
 800f948:	dc05      	bgt.n	800f956 <__swbuf_r+0x4e>
 800f94a:	4621      	mov	r1, r4
 800f94c:	4628      	mov	r0, r5
 800f94e:	f7fe fe1b 	bl	800e588 <_fflush_r>
 800f952:	2800      	cmp	r0, #0
 800f954:	d1ed      	bne.n	800f932 <__swbuf_r+0x2a>
 800f956:	68a3      	ldr	r3, [r4, #8]
 800f958:	3b01      	subs	r3, #1
 800f95a:	60a3      	str	r3, [r4, #8]
 800f95c:	6823      	ldr	r3, [r4, #0]
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	6022      	str	r2, [r4, #0]
 800f962:	701e      	strb	r6, [r3, #0]
 800f964:	6962      	ldr	r2, [r4, #20]
 800f966:	1c43      	adds	r3, r0, #1
 800f968:	429a      	cmp	r2, r3
 800f96a:	d004      	beq.n	800f976 <__swbuf_r+0x6e>
 800f96c:	89a3      	ldrh	r3, [r4, #12]
 800f96e:	07db      	lsls	r3, r3, #31
 800f970:	d5e1      	bpl.n	800f936 <__swbuf_r+0x2e>
 800f972:	2e0a      	cmp	r6, #10
 800f974:	d1df      	bne.n	800f936 <__swbuf_r+0x2e>
 800f976:	4621      	mov	r1, r4
 800f978:	4628      	mov	r0, r5
 800f97a:	f7fe fe05 	bl	800e588 <_fflush_r>
 800f97e:	2800      	cmp	r0, #0
 800f980:	d0d9      	beq.n	800f936 <__swbuf_r+0x2e>
 800f982:	e7d6      	b.n	800f932 <__swbuf_r+0x2a>

0800f984 <__swsetup_r>:
 800f984:	b538      	push	{r3, r4, r5, lr}
 800f986:	4b29      	ldr	r3, [pc, #164]	@ (800fa2c <__swsetup_r+0xa8>)
 800f988:	4605      	mov	r5, r0
 800f98a:	6818      	ldr	r0, [r3, #0]
 800f98c:	460c      	mov	r4, r1
 800f98e:	b118      	cbz	r0, 800f998 <__swsetup_r+0x14>
 800f990:	6a03      	ldr	r3, [r0, #32]
 800f992:	b90b      	cbnz	r3, 800f998 <__swsetup_r+0x14>
 800f994:	f7fd fa08 	bl	800cda8 <__sinit>
 800f998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f99c:	0719      	lsls	r1, r3, #28
 800f99e:	d422      	bmi.n	800f9e6 <__swsetup_r+0x62>
 800f9a0:	06da      	lsls	r2, r3, #27
 800f9a2:	d407      	bmi.n	800f9b4 <__swsetup_r+0x30>
 800f9a4:	2209      	movs	r2, #9
 800f9a6:	602a      	str	r2, [r5, #0]
 800f9a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9b0:	81a3      	strh	r3, [r4, #12]
 800f9b2:	e033      	b.n	800fa1c <__swsetup_r+0x98>
 800f9b4:	0758      	lsls	r0, r3, #29
 800f9b6:	d512      	bpl.n	800f9de <__swsetup_r+0x5a>
 800f9b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f9ba:	b141      	cbz	r1, 800f9ce <__swsetup_r+0x4a>
 800f9bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f9c0:	4299      	cmp	r1, r3
 800f9c2:	d002      	beq.n	800f9ca <__swsetup_r+0x46>
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	f7fd fb0b 	bl	800cfe0 <_free_r>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f9ce:	89a3      	ldrh	r3, [r4, #12]
 800f9d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f9d4:	81a3      	strh	r3, [r4, #12]
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	6063      	str	r3, [r4, #4]
 800f9da:	6923      	ldr	r3, [r4, #16]
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	89a3      	ldrh	r3, [r4, #12]
 800f9e0:	f043 0308 	orr.w	r3, r3, #8
 800f9e4:	81a3      	strh	r3, [r4, #12]
 800f9e6:	6923      	ldr	r3, [r4, #16]
 800f9e8:	b94b      	cbnz	r3, 800f9fe <__swsetup_r+0x7a>
 800f9ea:	89a3      	ldrh	r3, [r4, #12]
 800f9ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f9f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9f4:	d003      	beq.n	800f9fe <__swsetup_r+0x7a>
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f000 f890 	bl	800fb1e <__smakebuf_r>
 800f9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa02:	f013 0201 	ands.w	r2, r3, #1
 800fa06:	d00a      	beq.n	800fa1e <__swsetup_r+0x9a>
 800fa08:	2200      	movs	r2, #0
 800fa0a:	60a2      	str	r2, [r4, #8]
 800fa0c:	6962      	ldr	r2, [r4, #20]
 800fa0e:	4252      	negs	r2, r2
 800fa10:	61a2      	str	r2, [r4, #24]
 800fa12:	6922      	ldr	r2, [r4, #16]
 800fa14:	b942      	cbnz	r2, 800fa28 <__swsetup_r+0xa4>
 800fa16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa1a:	d1c5      	bne.n	800f9a8 <__swsetup_r+0x24>
 800fa1c:	bd38      	pop	{r3, r4, r5, pc}
 800fa1e:	0799      	lsls	r1, r3, #30
 800fa20:	bf58      	it	pl
 800fa22:	6962      	ldrpl	r2, [r4, #20]
 800fa24:	60a2      	str	r2, [r4, #8]
 800fa26:	e7f4      	b.n	800fa12 <__swsetup_r+0x8e>
 800fa28:	2000      	movs	r0, #0
 800fa2a:	e7f7      	b.n	800fa1c <__swsetup_r+0x98>
 800fa2c:	200002f8 	.word	0x200002f8

0800fa30 <_raise_r>:
 800fa30:	291f      	cmp	r1, #31
 800fa32:	b538      	push	{r3, r4, r5, lr}
 800fa34:	4605      	mov	r5, r0
 800fa36:	460c      	mov	r4, r1
 800fa38:	d904      	bls.n	800fa44 <_raise_r+0x14>
 800fa3a:	2316      	movs	r3, #22
 800fa3c:	6003      	str	r3, [r0, #0]
 800fa3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa42:	bd38      	pop	{r3, r4, r5, pc}
 800fa44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa46:	b112      	cbz	r2, 800fa4e <_raise_r+0x1e>
 800fa48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa4c:	b94b      	cbnz	r3, 800fa62 <_raise_r+0x32>
 800fa4e:	4628      	mov	r0, r5
 800fa50:	f000 f830 	bl	800fab4 <_getpid_r>
 800fa54:	4622      	mov	r2, r4
 800fa56:	4601      	mov	r1, r0
 800fa58:	4628      	mov	r0, r5
 800fa5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa5e:	f000 b817 	b.w	800fa90 <_kill_r>
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d00a      	beq.n	800fa7c <_raise_r+0x4c>
 800fa66:	1c59      	adds	r1, r3, #1
 800fa68:	d103      	bne.n	800fa72 <_raise_r+0x42>
 800fa6a:	2316      	movs	r3, #22
 800fa6c:	6003      	str	r3, [r0, #0]
 800fa6e:	2001      	movs	r0, #1
 800fa70:	e7e7      	b.n	800fa42 <_raise_r+0x12>
 800fa72:	2100      	movs	r1, #0
 800fa74:	4620      	mov	r0, r4
 800fa76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa7a:	4798      	blx	r3
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	e7e0      	b.n	800fa42 <_raise_r+0x12>

0800fa80 <raise>:
 800fa80:	4b02      	ldr	r3, [pc, #8]	@ (800fa8c <raise+0xc>)
 800fa82:	4601      	mov	r1, r0
 800fa84:	6818      	ldr	r0, [r3, #0]
 800fa86:	f7ff bfd3 	b.w	800fa30 <_raise_r>
 800fa8a:	bf00      	nop
 800fa8c:	200002f8 	.word	0x200002f8

0800fa90 <_kill_r>:
 800fa90:	b538      	push	{r3, r4, r5, lr}
 800fa92:	2300      	movs	r3, #0
 800fa94:	4d06      	ldr	r5, [pc, #24]	@ (800fab0 <_kill_r+0x20>)
 800fa96:	4604      	mov	r4, r0
 800fa98:	4608      	mov	r0, r1
 800fa9a:	4611      	mov	r1, r2
 800fa9c:	602b      	str	r3, [r5, #0]
 800fa9e:	f7f2 fc4e 	bl	800233e <_kill>
 800faa2:	1c43      	adds	r3, r0, #1
 800faa4:	d102      	bne.n	800faac <_kill_r+0x1c>
 800faa6:	682b      	ldr	r3, [r5, #0]
 800faa8:	b103      	cbz	r3, 800faac <_kill_r+0x1c>
 800faaa:	6023      	str	r3, [r4, #0]
 800faac:	bd38      	pop	{r3, r4, r5, pc}
 800faae:	bf00      	nop
 800fab0:	20001880 	.word	0x20001880

0800fab4 <_getpid_r>:
 800fab4:	f7f2 bc3c 	b.w	8002330 <_getpid>

0800fab8 <memchr>:
 800fab8:	4603      	mov	r3, r0
 800faba:	b510      	push	{r4, lr}
 800fabc:	b2c9      	uxtb	r1, r1
 800fabe:	4402      	add	r2, r0
 800fac0:	4293      	cmp	r3, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	d101      	bne.n	800faca <memchr+0x12>
 800fac6:	2000      	movs	r0, #0
 800fac8:	e003      	b.n	800fad2 <memchr+0x1a>
 800faca:	7804      	ldrb	r4, [r0, #0]
 800facc:	3301      	adds	r3, #1
 800face:	428c      	cmp	r4, r1
 800fad0:	d1f6      	bne.n	800fac0 <memchr+0x8>
 800fad2:	bd10      	pop	{r4, pc}

0800fad4 <__swhatbuf_r>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	460c      	mov	r4, r1
 800fad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fadc:	4615      	mov	r5, r2
 800fade:	2900      	cmp	r1, #0
 800fae0:	461e      	mov	r6, r3
 800fae2:	b096      	sub	sp, #88	@ 0x58
 800fae4:	da0c      	bge.n	800fb00 <__swhatbuf_r+0x2c>
 800fae6:	89a3      	ldrh	r3, [r4, #12]
 800fae8:	2100      	movs	r1, #0
 800faea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800faee:	bf14      	ite	ne
 800faf0:	2340      	movne	r3, #64	@ 0x40
 800faf2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800faf6:	2000      	movs	r0, #0
 800faf8:	6031      	str	r1, [r6, #0]
 800fafa:	602b      	str	r3, [r5, #0]
 800fafc:	b016      	add	sp, #88	@ 0x58
 800fafe:	bd70      	pop	{r4, r5, r6, pc}
 800fb00:	466a      	mov	r2, sp
 800fb02:	f000 f849 	bl	800fb98 <_fstat_r>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	dbed      	blt.n	800fae6 <__swhatbuf_r+0x12>
 800fb0a:	9901      	ldr	r1, [sp, #4]
 800fb0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb14:	4259      	negs	r1, r3
 800fb16:	4159      	adcs	r1, r3
 800fb18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb1c:	e7eb      	b.n	800faf6 <__swhatbuf_r+0x22>

0800fb1e <__smakebuf_r>:
 800fb1e:	898b      	ldrh	r3, [r1, #12]
 800fb20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb22:	079d      	lsls	r5, r3, #30
 800fb24:	4606      	mov	r6, r0
 800fb26:	460c      	mov	r4, r1
 800fb28:	d507      	bpl.n	800fb3a <__smakebuf_r+0x1c>
 800fb2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb2e:	6023      	str	r3, [r4, #0]
 800fb30:	6123      	str	r3, [r4, #16]
 800fb32:	2301      	movs	r3, #1
 800fb34:	6163      	str	r3, [r4, #20]
 800fb36:	b003      	add	sp, #12
 800fb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb3a:	466a      	mov	r2, sp
 800fb3c:	ab01      	add	r3, sp, #4
 800fb3e:	f7ff ffc9 	bl	800fad4 <__swhatbuf_r>
 800fb42:	9f00      	ldr	r7, [sp, #0]
 800fb44:	4605      	mov	r5, r0
 800fb46:	4639      	mov	r1, r7
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7fd fded 	bl	800d728 <_malloc_r>
 800fb4e:	b948      	cbnz	r0, 800fb64 <__smakebuf_r+0x46>
 800fb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb54:	059a      	lsls	r2, r3, #22
 800fb56:	d4ee      	bmi.n	800fb36 <__smakebuf_r+0x18>
 800fb58:	f023 0303 	bic.w	r3, r3, #3
 800fb5c:	f043 0302 	orr.w	r3, r3, #2
 800fb60:	81a3      	strh	r3, [r4, #12]
 800fb62:	e7e2      	b.n	800fb2a <__smakebuf_r+0xc>
 800fb64:	89a3      	ldrh	r3, [r4, #12]
 800fb66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb6e:	81a3      	strh	r3, [r4, #12]
 800fb70:	9b01      	ldr	r3, [sp, #4]
 800fb72:	6020      	str	r0, [r4, #0]
 800fb74:	b15b      	cbz	r3, 800fb8e <__smakebuf_r+0x70>
 800fb76:	4630      	mov	r0, r6
 800fb78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb7c:	f000 f81e 	bl	800fbbc <_isatty_r>
 800fb80:	b128      	cbz	r0, 800fb8e <__smakebuf_r+0x70>
 800fb82:	89a3      	ldrh	r3, [r4, #12]
 800fb84:	f023 0303 	bic.w	r3, r3, #3
 800fb88:	f043 0301 	orr.w	r3, r3, #1
 800fb8c:	81a3      	strh	r3, [r4, #12]
 800fb8e:	89a3      	ldrh	r3, [r4, #12]
 800fb90:	431d      	orrs	r5, r3
 800fb92:	81a5      	strh	r5, [r4, #12]
 800fb94:	e7cf      	b.n	800fb36 <__smakebuf_r+0x18>
	...

0800fb98 <_fstat_r>:
 800fb98:	b538      	push	{r3, r4, r5, lr}
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	4d06      	ldr	r5, [pc, #24]	@ (800fbb8 <_fstat_r+0x20>)
 800fb9e:	4604      	mov	r4, r0
 800fba0:	4608      	mov	r0, r1
 800fba2:	4611      	mov	r1, r2
 800fba4:	602b      	str	r3, [r5, #0]
 800fba6:	f7f2 fc29 	bl	80023fc <_fstat>
 800fbaa:	1c43      	adds	r3, r0, #1
 800fbac:	d102      	bne.n	800fbb4 <_fstat_r+0x1c>
 800fbae:	682b      	ldr	r3, [r5, #0]
 800fbb0:	b103      	cbz	r3, 800fbb4 <_fstat_r+0x1c>
 800fbb2:	6023      	str	r3, [r4, #0]
 800fbb4:	bd38      	pop	{r3, r4, r5, pc}
 800fbb6:	bf00      	nop
 800fbb8:	20001880 	.word	0x20001880

0800fbbc <_isatty_r>:
 800fbbc:	b538      	push	{r3, r4, r5, lr}
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	4d05      	ldr	r5, [pc, #20]	@ (800fbd8 <_isatty_r+0x1c>)
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	4608      	mov	r0, r1
 800fbc6:	602b      	str	r3, [r5, #0]
 800fbc8:	f7f2 fc27 	bl	800241a <_isatty>
 800fbcc:	1c43      	adds	r3, r0, #1
 800fbce:	d102      	bne.n	800fbd6 <_isatty_r+0x1a>
 800fbd0:	682b      	ldr	r3, [r5, #0]
 800fbd2:	b103      	cbz	r3, 800fbd6 <_isatty_r+0x1a>
 800fbd4:	6023      	str	r3, [r4, #0]
 800fbd6:	bd38      	pop	{r3, r4, r5, pc}
 800fbd8:	20001880 	.word	0x20001880

0800fbdc <_init>:
 800fbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbde:	bf00      	nop
 800fbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbe2:	bc08      	pop	{r3}
 800fbe4:	469e      	mov	lr, r3
 800fbe6:	4770      	bx	lr

0800fbe8 <_fini>:
 800fbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbea:	bf00      	nop
 800fbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbee:	bc08      	pop	{r3}
 800fbf0:	469e      	mov	lr, r3
 800fbf2:	4770      	bx	lr
