
Tesis_LGBS_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd14  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800fe28  0800fe28  00010e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102dc  080102dc  00012348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080102dc  080102dc  000112dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102e4  080102e4  00012348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102e4  080102e4  000112e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080102e8  080102e8  000112e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  080102ec  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001550  20000348  08010634  00012348  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001898  08010634  00012898  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00012348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ce5  00000000  00000000  00012371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f1  00000000  00000000  0002a056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0002e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107b  00000000  00000000  0002fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb60  00000000  00000000  00030a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d72  00000000  00000000  0004d5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ef4  00000000  00000000  00067355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006db0  00000000  00000000  000fd28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0010403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800fe0c 	.word	0x0800fe0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800fe0c 	.word	0x0800fe0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	2300      	movs	r3, #0
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	f7ff fc1f 	bl	80009bc <__aeabi_dcmplt>
 800117e:	b928      	cbnz	r0, 800118c <__aeabi_d2lz+0x1c>
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001188:	f000 b80a 	b.w	80011a0 <__aeabi_d2ulz>
 800118c:	4620      	mov	r0, r4
 800118e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001192:	f000 f805 	bl	80011a0 <__aeabi_d2ulz>
 8001196:	4240      	negs	r0, r0
 8001198:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	bf00      	nop

080011a0 <__aeabi_d2ulz>:
 80011a0:	b5d0      	push	{r4, r6, r7, lr}
 80011a2:	2200      	movs	r2, #0
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <__aeabi_d2ulz+0x34>)
 80011a6:	4606      	mov	r6, r0
 80011a8:	460f      	mov	r7, r1
 80011aa:	f7ff f995 	bl	80004d8 <__aeabi_dmul>
 80011ae:	f7ff fc55 	bl	8000a5c <__aeabi_d2uiz>
 80011b2:	4604      	mov	r4, r0
 80011b4:	f7ff f916 	bl	80003e4 <__aeabi_ui2d>
 80011b8:	2200      	movs	r2, #0
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <__aeabi_d2ulz+0x38>)
 80011bc:	f7ff f98c 	bl	80004d8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4630      	mov	r0, r6
 80011c6:	4639      	mov	r1, r7
 80011c8:	f7fe ffce 	bl	8000168 <__aeabi_dsub>
 80011cc:	f7ff fc46 	bl	8000a5c <__aeabi_d2uiz>
 80011d0:	4621      	mov	r1, r4
 80011d2:	bdd0      	pop	{r4, r6, r7, pc}
 80011d4:	3df00000 	.word	0x3df00000
 80011d8:	41f00000 	.word	0x41f00000

080011dc <set_speed>:
#include "BLDCcontrol.h"
uint32_t mot_speed_count = 0;
uint32_t last_mot_speed_count = 0;
uint32_t mot_speed_setpoint = 0;
void set_speed(float value)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	mot_speed_setpoint = (value*18)/60;
 80011e4:	4909      	ldr	r1, [pc, #36]	@ (800120c <set_speed+0x30>)
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdb6 	bl	8000d58 <__aeabi_fmul>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4908      	ldr	r1, [pc, #32]	@ (8001210 <set_speed+0x34>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe65 	bl	8000ec0 <__aeabi_fdiv>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff99 	bl	8001130 <__aeabi_f2uiz>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <set_speed+0x38>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	41900000 	.word	0x41900000
 8001210:	42700000 	.word	0x42700000
 8001214:	2000036c 	.word	0x2000036c

08001218 <get_speed>:

float get_speed(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	return mot_speed_setpoint*60.0/18.0;
 800121c:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <get_speed+0x3c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f8df 	bl	80003e4 <__aeabi_ui2d>
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <get_speed+0x40>)
 800122c:	f7ff f954 	bl	80004d8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <get_speed+0x44>)
 800123e:	f7ff fa75 	bl	800072c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fc27 	bl	8000a9c <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000036c 	.word	0x2000036c
 8001258:	404e0000 	.word	0x404e0000
 800125c:	40320000 	.word	0x40320000

08001260 <get_speed_meas>:

float get_speed_meas(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	return last_mot_speed_count*60.0/18.0;
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <get_speed_meas+0x3c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8bb 	bl	80003e4 <__aeabi_ui2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <get_speed_meas+0x40>)
 8001274:	f7ff f930 	bl	80004d8 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <get_speed_meas+0x44>)
 8001286:	f7ff fa51 	bl	800072c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc03 	bl	8000a9c <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
}
 8001298:	4618      	mov	r0, r3
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000368 	.word	0x20000368
 80012a0:	404e0000 	.word	0x404e0000
 80012a4:	40320000 	.word	0x40320000

080012a8 <HAL_TIM_IC_CaptureCallback>:
// Input compare
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	// current is in the order of 500 per amp
	/*
	 * In principle an error arround 1k cnts should increase the current by less than an amp to soften the current ramp.
	 * ESTO SALIO A OJO, NO HAY MATEMATICA
	 */
	mot_speed_count += htim->Instance->CNT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a36      	ldr	r2, [pc, #216]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80012be:	6013      	str	r3, [r2, #0]

	err = mot_speed_setpoint - mot_speed_count;
 80012c0:	4b36      	ldr	r3, [pc, #216]	@ (800139c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b34      	ldr	r3, [pc, #208]	@ (80013a0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80012ce:	601a      	str	r2, [r3, #0]

	p = Kp * err;
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f895 	bl	8000404 <__aeabi_i2d>
 80012da:	a32b      	add	r3, pc, #172	@ (adr r3, 8001388 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff f8fa 	bl	80004d8 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fb8e 	bl	8000a0c <__aeabi_d2iz>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a2c      	ldr	r2, [pc, #176]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80012f4:	6013      	str	r3, [r2, #0]
	aux_i = i + Ki * err ;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x100>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f882 	bl	8000404 <__aeabi_i2d>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f87b 	bl	8000404 <__aeabi_i2d>
 800130e:	a320      	add	r3, pc, #128	@ (adr r3, 8001390 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff f8e0 	bl	80004d8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe ff24 	bl	800016c <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fb6e 	bl	8000a0c <__aeabi_d2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x104>)
 8001334:	6013      	str	r3, [r2, #0]
	i = abs(aux_i) < SATURATION_INT ? aux_i : i;
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x104>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f513 6fba 	cmn.w	r3, #1488	@ 0x5d0
 800133e:	dd07      	ble.n	8001350 <HAL_TIM_IC_CaptureCallback+0xa8>
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x104>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f5b3 6fba 	cmp.w	r3, #1488	@ 0x5d0
 8001348:	da02      	bge.n	8001350 <HAL_TIM_IC_CaptureCallback+0xa8>
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x104>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e001      	b.n	8001354 <HAL_TIM_IC_CaptureCallback+0xac>
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001356:	6013      	str	r3, [r2, #0]

	out_pi = p + i;
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4413      	add	r3, r2
 8001362:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001364:	6013      	str	r3, [r2, #0]
	set_I_int(out_pi);
 8001366:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f8df 	bl	8001530 <set_I_int>
	last_mot_speed_count = mot_speed_count;
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a0f      	ldr	r2, [pc, #60]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001378:	6013      	str	r3, [r2, #0]
	mot_speed_count = 0;
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	33333333 	.word	0x33333333
 800138c:	3fd33333 	.word	0x3fd33333
 8001390:	d2f1a9fc 	.word	0xd2f1a9fc
 8001394:	3f50624d 	.word	0x3f50624d
 8001398:	20000364 	.word	0x20000364
 800139c:	2000036c 	.word	0x2000036c
 80013a0:	20000370 	.word	0x20000370
 80013a4:	20000374 	.word	0x20000374
 80013a8:	20000378 	.word	0x20000378
 80013ac:	2000037c 	.word	0x2000037c
 80013b0:	20000380 	.word	0x20000380
 80013b4:	20000368 	.word	0x20000368

080013b8 <HAL_TIM_PeriodElapsedCallback>:

// Overflow
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	mot_speed_count += 65536;
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80013c8:	4a03      	ldr	r2, [pc, #12]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000364 	.word	0x20000364

080013dc <curr_control_init>:
static int16_t max_curr = 0;
static bool calibrated = false;


void curr_control_init(ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2101      	movs	r1, #1
 80013ea:	4817      	ldr	r0, [pc, #92]	@ (8001448 <curr_control_init+0x6c>)
 80013ec:	f002 fa76 	bl	80038dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2102      	movs	r1, #2
 80013f4:	4814      	ldr	r0, [pc, #80]	@ (8001448 <curr_control_init+0x6c>)
 80013f6:	f002 fa71 	bl	80038dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_B, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2104      	movs	r1, #4
 80013fe:	4812      	ldr	r0, [pc, #72]	@ (8001448 <curr_control_init+0x6c>)
 8001400:	f002 fa6c 	bl	80038dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_B, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	2108      	movs	r1, #8
 8001408:	480f      	ldr	r0, [pc, #60]	@ (8001448 <curr_control_init+0x6c>)
 800140a:	f002 fa67 	bl	80038dc <HAL_GPIO_WritePin>

	if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f001 fcb4 	bl	8002d7c <HAL_ADCEx_Calibration_Start>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <curr_control_init+0x42>
	{
		Error_Handler();
 800141a:	f000 fd5b 	bl	8001ed4 <Error_Handler>
	}

	if (HAL_ADC_Start_IT(hadc) != HAL_OK)
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f001 f98e 	bl	8002740 <HAL_ADC_Start_IT>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <curr_control_init+0x52>
	{
		Error_Handler();
 800142a:	f000 fd53 	bl	8001ed4 <Error_Handler>
	}

	if (HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f006 f9ff 	bl	8007834 <HAL_TIMEx_PWMN_Start>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <curr_control_init+0x64>
	{
		Error_Handler();
 800143c:	f000 fd4a 	bl	8001ed4 <Error_Handler>
	}


}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40010800 	.word	0x40010800

0800144c <get_I_meas>:

float get_I_meas()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	return (float)(adc_value-i_offset)/(float)SENS_SENSITIVITY;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <get_I_meas+0x2c>)
 8001452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001456:	461a      	mov	r2, r3
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <get_I_meas+0x30>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fc25 	bl	8000cb0 <__aeabi_i2f>
 8001466:	4603      	mov	r3, r0
 8001468:	4905      	ldr	r1, [pc, #20]	@ (8001480 <get_I_meas+0x34>)
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fd28 	bl	8000ec0 <__aeabi_fdiv>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000384 	.word	0x20000384
 800147c:	20000388 	.word	0x20000388
 8001480:	43f80000 	.word	0x43f80000

08001484 <get_I_float>:

float get_I_float()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	return (float)(i_ref_int-i_offset)/(float)SENS_SENSITIVITY;
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <get_I_float+0x2c>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148e:	461a      	mov	r2, r3
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <get_I_float+0x30>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc09 	bl	8000cb0 <__aeabi_i2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	4905      	ldr	r1, [pc, #20]	@ (80014b8 <get_I_float+0x34>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd0c 	bl	8000ec0 <__aeabi_fdiv>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000386 	.word	0x20000386
 80014b4:	20000388 	.word	0x20000388
 80014b8:	43f80000 	.word	0x43f80000

080014bc <set_I_float>:
uint16_t get_I_int()
{
	return i_ref_int - i_offset;
}
void set_I_float(float i)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (i > MAX_CURR || i < 0.0)
 80014c4:	4916      	ldr	r1, [pc, #88]	@ (8001520 <set_I_float+0x64>)
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fe02 	bl	80010d0 <__aeabi_fcmpgt>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d107      	bne.n	80014e2 <set_I_float+0x26>
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fddc 	bl	8001094 <__aeabi_fcmplt>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <set_I_float+0x2a>
	{
		i = MAX_CURR;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <set_I_float+0x64>)
 80014e4:	607b      	str	r3, [r7, #4]
	}
	i_ref_int = i * SENS_SENSITIVITY + i_offset;
 80014e6:	490f      	ldr	r1, [pc, #60]	@ (8001524 <set_I_float+0x68>)
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fc35 	bl	8000d58 <__aeabi_fmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461c      	mov	r4, r3
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <set_I_float+0x6c>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fbd9 	bl	8000cb0 <__aeabi_i2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4619      	mov	r1, r3
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fb20 	bl	8000b48 <__addsf3>
 8001508:	4603      	mov	r3, r0
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fdea 	bl	80010e4 <__aeabi_f2iz>
 8001510:	4603      	mov	r3, r0
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <set_I_float+0x70>)
 8001516:	801a      	strh	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	40400000 	.word	0x40400000
 8001524:	43f80000 	.word	0x43f80000
 8001528:	20000388 	.word	0x20000388
 800152c:	20000386 	.word	0x20000386

08001530 <set_I_int>:

void set_I_int(uint16_t i)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
	i_ref_int = i > SENS_SENSITIVITY * MAX_CURR ? max_curr : i + i_offset;
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	f5b3 6fba 	cmp.w	r3, #1488	@ 0x5d0
 8001540:	d808      	bhi.n	8001554 <set_I_int+0x24>
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <set_I_int+0x38>)
 8001544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001548:	b29a      	uxth	r2, r3
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	4413      	add	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	b21b      	sxth	r3, r3
 8001552:	e002      	b.n	800155a <set_I_int+0x2a>
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <set_I_int+0x3c>)
 8001556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <set_I_int+0x40>)
 800155c:	8013      	strh	r3, [r2, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000388 	.word	0x20000388
 800156c:	2000038a 	.word	0x2000038a
 8001570:	20000386 	.word	0x20000386

08001574 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f001 f995 	bl	80028ac <HAL_ADC_GetValue>
 8001582:	4603      	mov	r3, r0
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <HAL_ADC_ConvCpltCallback+0xc8>)
 8001588:	801a      	strh	r2, [r3, #0]
	if (!calibrated)
 800158a:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <HAL_ADC_ConvCpltCallback+0xcc>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	f083 0301 	eor.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01d      	beq.n	80015d4 <HAL_ADC_ConvCpltCallback+0x60>
	{
		i_offset = adc_value;
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <HAL_ADC_ConvCpltCallback+0xc8>)
 800159a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800159e:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <HAL_ADC_ConvCpltCallback+0xd0>)
 80015a0:	801a      	strh	r2, [r3, #0]
		max_curr = MAX_CURR * SENS_SENSITIVITY + i_offset;
 80015a2:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <HAL_ADC_ConvCpltCallback+0xd0>)
 80015a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff2b 	bl	8000404 <__aeabi_i2d>
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <HAL_ADC_ConvCpltCallback+0xd4>)
 80015b4:	f7fe fdda 	bl	800016c <__adddf3>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fa24 	bl	8000a0c <__aeabi_d2iz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_ADC_ConvCpltCallback+0xd8>)
 80015ca:	801a      	strh	r2, [r3, #0]
		calibrated = true;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <HAL_ADC_ConvCpltCallback+0xcc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e02f      	b.n	8001634 <HAL_ADC_ConvCpltCallback+0xc0>
	}
	else
	{
		if (i_ref_int == i_offset)
 80015d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <HAL_ADC_ConvCpltCallback+0xdc>)
 80015d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <HAL_ADC_ConvCpltCallback+0xd0>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d10a      	bne.n	80015fa <HAL_ADC_ConvCpltCallback+0x86>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2101      	movs	r1, #1
 80015e8:	481a      	ldr	r0, [pc, #104]	@ (8001654 <HAL_ADC_ConvCpltCallback+0xe0>)
 80015ea:	f002 f977 	bl	80038dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2102      	movs	r1, #2
 80015f2:	4818      	ldr	r0, [pc, #96]	@ (8001654 <HAL_ADC_ConvCpltCallback+0xe0>)
 80015f4:	f002 f972 	bl	80038dc <HAL_GPIO_WritePin>
			return;
 80015f8:	e01c      	b.n	8001634 <HAL_ADC_ConvCpltCallback+0xc0>
		}
		if (adc_value > i_ref_int)
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_ADC_ConvCpltCallback+0xc8>)
 80015fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	429a      	cmp	r2, r3
 8001608:	dd0a      	ble.n	8001620 <HAL_ADC_ConvCpltCallback+0xac>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2101      	movs	r1, #1
 800160e:	4811      	ldr	r0, [pc, #68]	@ (8001654 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001610:	f002 f964 	bl	80038dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2102      	movs	r1, #2
 8001618:	480e      	ldr	r0, [pc, #56]	@ (8001654 <HAL_ADC_ConvCpltCallback+0xe0>)
 800161a:	f002 f95f 	bl	80038dc <HAL_GPIO_WritePin>
 800161e:	e009      	b.n	8001634 <HAL_ADC_ConvCpltCallback+0xc0>
		}
		else
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2102      	movs	r1, #2
 8001624:	480b      	ldr	r0, [pc, #44]	@ (8001654 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001626:	f002 f959 	bl	80038dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2101      	movs	r1, #1
 800162e:	4809      	ldr	r0, [pc, #36]	@ (8001654 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001630:	f002 f954 	bl	80038dc <HAL_GPIO_WritePin>
		}
	}
}
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000384 	.word	0x20000384
 8001640:	2000038c 	.word	0x2000038c
 8001644:	20000388 	.word	0x20000388
 8001648:	40974000 	.word	0x40974000
 800164c:	2000038a 	.word	0x2000038a
 8001650:	20000386 	.word	0x20000386
 8001654:	40010800 	.word	0x40010800

08001658 <init_LUT_comms>:
uint16_t offset = 50;
uint16_t spi_data = 0;


void init_LUT_comms(SPI_HandleTypeDef *hspi)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(hspi, &spi_data, 40);
 8001660:	2228      	movs	r2, #40	@ 0x28
 8001662:	4904      	ldr	r1, [pc, #16]	@ (8001674 <init_LUT_comms+0x1c>)
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f004 fc9d 	bl	8005fa4 <HAL_SPI_Transmit_DMA>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000038e 	.word	0x2000038e

08001678 <HAL_SPI_TxCpltCallback>:
	return offset;
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

	if (spi_data + offset > LUT_SIZE-1) {
 8001680:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_SPI_TxCpltCallback+0x4c>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_SPI_TxCpltCallback+0x50>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001690:	db0b      	blt.n	80016aa <HAL_SPI_TxCpltCallback+0x32>
		spi_data = spi_data + offset - (LUT_SIZE - 1);
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <HAL_SPI_TxCpltCallback+0x4c>)
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <HAL_SPI_TxCpltCallback+0x50>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	b29b      	uxth	r3, r3
 800169e:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <HAL_SPI_TxCpltCallback+0x4c>)
 80016a6:	801a      	strh	r2, [r3, #0]
	}
	else {
		spi_data += offset;
	}
}
 80016a8:	e007      	b.n	80016ba <HAL_SPI_TxCpltCallback+0x42>
		spi_data += offset;
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_SPI_TxCpltCallback+0x4c>)
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_SPI_TxCpltCallback+0x50>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_SPI_TxCpltCallback+0x4c>)
 80016b8:	801a      	strh	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	2000038e 	.word	0x2000038e
 80016c8:	20000000 	.word	0x20000000

080016cc <command_I>:

#include "stdio.h"
#include "string.h"


void command_I(uint8_t *buff, uint16_t size){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
	static float i;
	if (buff[1] == '?')
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b3f      	cmp	r3, #63	@ 0x3f
 80016e0:	d112      	bne.n	8001708 <command_I+0x3c>
	{
		gcvt(get_I_float(), 3, buff);
 80016e2:	f7ff fecf 	bl	8001484 <get_I_float>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fe9d 	bl	8000428 <__aeabi_f2d>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2203      	movs	r2, #3
 80016f2:	f00b fbc1 	bl	800ce78 <gcvt>
		buff[4] = '\n';
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	220a      	movs	r2, #10
 80016fc:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 80016fe:	2105      	movs	r1, #5
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f00a f997 	bl	800ba34 <CDC_Transmit_FS>
 8001706:	e02f      	b.n	8001768 <command_I+0x9c>
	}
	else if (buff[1] == '=')
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001710:	d113      	bne.n	800173a <command_I+0x6e>
	{
		i = atof(&buff[2]);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3302      	adds	r3, #2
 8001716:	4618      	mov	r0, r3
 8001718:	f00a fda4 	bl	800c264 <atof>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff f9ba 	bl	8000a9c <__aeabi_d2f>
 8001728:	4603      	mov	r3, r0
 800172a:	4a16      	ldr	r2, [pc, #88]	@ (8001784 <command_I+0xb8>)
 800172c:	6013      	str	r3, [r2, #0]
		set_I_float(i);
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <command_I+0xb8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fec2 	bl	80014bc <set_I_float>
 8001738:	e016      	b.n	8001768 <command_I+0x9c>
	}
	else if (buff[1] == 'm')
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3301      	adds	r3, #1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b6d      	cmp	r3, #109	@ 0x6d
 8001742:	d111      	bne.n	8001768 <command_I+0x9c>
	{
		gcvt(get_I_meas(), 3, buff);
 8001744:	f7ff fe82 	bl	800144c <get_I_meas>
 8001748:	4603      	mov	r3, r0
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe6c 	bl	8000428 <__aeabi_f2d>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2203      	movs	r2, #3
 8001754:	f00b fb90 	bl	800ce78 <gcvt>
		buff[4] = '\n';
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3304      	adds	r3, #4
 800175c:	220a      	movs	r2, #10
 800175e:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 8001760:	2105      	movs	r1, #5
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f00a f966 	bl	800ba34 <CDC_Transmit_FS>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 8001768:	bf00      	nop
 800176a:	2101      	movs	r1, #1
 800176c:	200a      	movs	r0, #10
 800176e:	f00a f961 	bl	800ba34 <CDC_Transmit_FS>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d0f8      	beq.n	800176a <command_I+0x9e>
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000390 	.word	0x20000390

08001788 <command_S>:

void command_S(uint8_t *buff, uint16_t size){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
	static uint16_t data;
	if (buff[1] == '?')
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b3f      	cmp	r3, #63	@ 0x3f
 800179c:	d11a      	bne.n	80017d4 <command_S+0x4c>
	{
		gcvt(get_speed(), 2, buff);
 800179e:	f7ff fd3b 	bl	8001218 <get_speed>
 80017a2:	4603      	mov	r3, r0
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	2102      	movs	r1, #2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f00b fb65 	bl	800ce78 <gcvt>
		auto len = strlen(buff);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7fe fcce 	bl	8000150 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	60bb      	str	r3, [r7, #8]
		buff[len] = '\n';
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	220a      	movs	r2, #10
 80017c0:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, len + 1);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f00a f931 	bl	800ba34 <CDC_Transmit_FS>
 80017d2:	e038      	b.n	8001846 <command_S+0xbe>
	}
	else if (buff[1] == '=')
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b3d      	cmp	r3, #61	@ 0x3d
 80017dc:	d114      	bne.n	8001808 <command_S+0x80>
	{
		data = atof(&buff[2]);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3302      	adds	r3, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00a fd3e 	bl	800c264 <atof>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f934 	bl	8000a5c <__aeabi_d2uiz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <command_S+0xd8>)
 80017fa:	801a      	strh	r2, [r3, #0]
		set_speed(data);
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <command_S+0xd8>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fceb 	bl	80011dc <set_speed>
 8001806:	e01e      	b.n	8001846 <command_S+0xbe>
	}
	else if (buff[1] == 'm')
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b6d      	cmp	r3, #109	@ 0x6d
 8001810:	d119      	bne.n	8001846 <command_S+0xbe>
	{
		gcvt(get_speed_meas(), 2, buff);
 8001812:	f7ff fd25 	bl	8001260 <get_speed_meas>
 8001816:	4603      	mov	r3, r0
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	2102      	movs	r1, #2
 800181c:	4618      	mov	r0, r3
 800181e:	f00b fb2b 	bl	800ce78 <gcvt>
		auto len = strlen(buff);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe fc94 	bl	8000150 <strlen>
 8001828:	4603      	mov	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
		buff[len] = '\n';
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	220a      	movs	r2, #10
 8001834:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, len + 1);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	b29b      	uxth	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	b29b      	uxth	r3, r3
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f00a f8f7 	bl	800ba34 <CDC_Transmit_FS>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 8001846:	bf00      	nop
 8001848:	2101      	movs	r1, #1
 800184a:	200a      	movs	r0, #10
 800184c:	f00a f8f2 	bl	800ba34 <CDC_Transmit_FS>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d0f8      	beq.n	8001848 <command_S+0xc0>
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000394 	.word	0x20000394

08001864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001868:	f000 fe30 	bl	80024cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186c:	f000 f854 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f000 faa8 	bl	8001dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001874:	f000 fa88 	bl	8001d88 <MX_DMA_Init>
  MX_SPI1_Init();
 8001878:	f000 f8ea 	bl	8001a50 <MX_SPI1_Init>
  MX_ADC1_Init();
 800187c:	f000 f8aa 	bl	80019d4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001880:	f000 f982 	bl	8001b88 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001884:	f00a f80a 	bl	800b89c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001888:	f000 f914 	bl	8001ab4 <MX_TIM1_Init>
  MX_TIM4_Init();
 800188c:	f000 f9f0 	bl	8001c70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  curr_control_init(&hadc1, &htim3);
 8001890:	491b      	ldr	r1, [pc, #108]	@ (8001900 <main+0x9c>)
 8001892:	481c      	ldr	r0, [pc, #112]	@ (8001904 <main+0xa0>)
 8001894:	f7ff fda2 	bl	80013dc <curr_control_init>
  init_LUT_comms(&hspi1);
 8001898:	481b      	ldr	r0, [pc, #108]	@ (8001908 <main+0xa4>)
 800189a:	f7ff fedd 	bl	8001658 <init_LUT_comms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (CDC_data_recieved())
 800189e:	f00a f8ef 	bl	800ba80 <CDC_data_recieved>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0fa      	beq.n	800189e <main+0x3a>
	  {
		  rx_usb_amount = CDC_Receive_data(msg, 64);
 80018a8:	2140      	movs	r1, #64	@ 0x40
 80018aa:	4818      	ldr	r0, [pc, #96]	@ (800190c <main+0xa8>)
 80018ac:	f00a f8f2 	bl	800ba94 <CDC_Receive_data>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <main+0xac>)
 80018b6:	801a      	strh	r2, [r3, #0]
		  switch ((int)msg[0])
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <main+0xa8>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b49      	cmp	r3, #73	@ 0x49
 80018be:	d002      	beq.n	80018c6 <main+0x62>
 80018c0:	2b53      	cmp	r3, #83	@ 0x53
 80018c2:	d007      	beq.n	80018d4 <main+0x70>
 80018c4:	e00d      	b.n	80018e2 <main+0x7e>
		  {
		  	  case 'I':
		  		  command_I(msg, rx_usb_amount);
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <main+0xac>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	480f      	ldr	r0, [pc, #60]	@ (800190c <main+0xa8>)
 80018ce:	f7ff fefd 	bl	80016cc <command_I>
		  		  break;
 80018d2:	e014      	b.n	80018fe <main+0x9a>
		  	  case 'S':
		  		  command_S(msg, rx_usb_amount);
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <main+0xac>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	480c      	ldr	r0, [pc, #48]	@ (800190c <main+0xa8>)
 80018dc:	f7ff ff54 	bl	8001788 <command_S>
		  		  break;
 80018e0:	e00d      	b.n	80018fe <main+0x9a>
		  	  default:
		  		  CDC_Transmit_FS("\nNo reconocido\n", 15);
 80018e2:	210f      	movs	r1, #15
 80018e4:	480b      	ldr	r0, [pc, #44]	@ (8001914 <main+0xb0>)
 80018e6:	f00a f8a5 	bl	800ba34 <CDC_Transmit_FS>
		  		  while (CDC_Transmit_FS(msg, rx_usb_amount) == USBD_BUSY);
 80018ea:	bf00      	nop
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <main+0xac>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <main+0xa8>)
 80018f4:	f00a f89e 	bl	800ba34 <CDC_Transmit_FS>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d0f6      	beq.n	80018ec <main+0x88>
	  if (CDC_data_recieved())
 80018fe:	e7ce      	b.n	800189e <main+0x3a>
 8001900:	200004ac 	.word	0x200004ac
 8001904:	20000398 	.word	0x20000398
 8001908:	200003c8 	.word	0x200003c8
 800190c:	2000053c 	.word	0x2000053c
 8001910:	2000057c 	.word	0x2000057c
 8001914:	0800fe28 	.word	0x0800fe28

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	@ 0x50
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001922:	2228      	movs	r2, #40	@ 0x28
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f00b fbcf 	bl	800d0ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001948:	2301      	movs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800194c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001956:	2301      	movs	r3, #1
 8001958:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2302      	movs	r3, #2
 800195c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001964:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001968:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fd2c 	bl	80053cc <HAL_RCC_OscConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800197a:	f000 faab 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197e:	230f      	movs	r3, #15
 8001980:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800198e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2102      	movs	r1, #2
 800199a:	4618      	mov	r0, r3
 800199c:	f003 ff98 	bl	80058d0 <HAL_RCC_ClockConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019a6:	f000 fa95 	bl	8001ed4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80019aa:	2312      	movs	r3, #18
 80019ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 f902 	bl	8005bc4 <HAL_RCCEx_PeriphCLKConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80019c6:	f000 fa85 	bl	8001ed4 <Error_Handler>
  }
}
 80019ca:	bf00      	nop
 80019cc:	3750      	adds	r7, #80	@ 0x50
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <MX_ADC1_Init+0x74>)
 80019e6:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <MX_ADC1_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <MX_ADC1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <MX_ADC1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <MX_ADC1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <MX_ADC1_Init+0x74>)
 80019fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <MX_ADC1_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_ADC1_Init+0x74>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a10:	480d      	ldr	r0, [pc, #52]	@ (8001a48 <MX_ADC1_Init+0x74>)
 8001a12:	f000 fdbd 	bl	8002590 <HAL_ADC_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a1c:	f000 fa5a 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a20:	2306      	movs	r3, #6
 8001a22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_ADC1_Init+0x74>)
 8001a32:	f001 f80f 	bl	8002a54 <HAL_ADC_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a3c:	f000 fa4a 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000398 	.word	0x20000398
 8001a4c:	40012400 	.word	0x40012400

08001a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a56:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <MX_SPI1_Init+0x60>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a74:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a94:	220a      	movs	r2, #10
 8001a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	@ (8001aac <MX_SPI1_Init+0x5c>)
 8001a9a:	f004 f9ff 	bl	8005e9c <HAL_SPI_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001aa4:	f000 fa16 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200003c8 	.word	0x200003c8
 8001ab0:	40013000 	.word	0x40013000

08001ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001ae0:	4a28      	ldr	r2, [pc, #160]	@ (8001b84 <MX_TIM1_Init+0xd0>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b25      	ldr	r3, [pc, #148]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af0:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001af2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001af6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b0a:	481d      	ldr	r0, [pc, #116]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001b0c:	f004 fd43 	bl	8006596 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001b16:	f000 f9dd 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4816      	ldr	r0, [pc, #88]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001b28:	f005 f882 	bl	8006c30 <HAL_TIM_ConfigClockSource>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b32:	f000 f9cf 	bl	8001ed4 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 7;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001b4e:	f005 fdbe 	bl	80076ce <HAL_TIMEx_HallSensor_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b58:	f000 f9bc 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001b5c:	2350      	movs	r3, #80	@ 0x50
 8001b5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_TIM1_Init+0xcc>)
 8001b6a:	f005 ff01 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b74:	f000 f9ae 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	@ 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000464 	.word	0x20000464
 8001b84:	40012c00 	.word	0x40012c00

08001b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	@ 0x38
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001bba:	4a2c      	ldr	r2, [pc, #176]	@ (8001c6c <MX_TIM3_Init+0xe4>)
 8001bbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 720;
 8001bca:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001bcc:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8001bd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd8:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bde:	4822      	ldr	r0, [pc, #136]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001be0:	f004 fcd9 	bl	8006596 <HAL_TIM_Base_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001bea:	f000 f973 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bf4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	481b      	ldr	r0, [pc, #108]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001bfc:	f005 f818 	bl	8006c30 <HAL_TIM_ConfigClockSource>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c06:	f000 f965 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c0a:	4817      	ldr	r0, [pc, #92]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001c0c:	f004 fd12 	bl	8006634 <HAL_TIM_PWM_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c16:	f000 f95d 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	4619      	mov	r1, r3
 8001c28:	480f      	ldr	r0, [pc, #60]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001c2a:	f005 fea1 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c34:	f000 f94e 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c38:	2360      	movs	r3, #96	@ 0x60
 8001c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 180;
 8001c3c:	23b4      	movs	r3, #180	@ 0xb4
 8001c3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	@ (8001c68 <MX_TIM3_Init+0xe0>)
 8001c50:	f004 ff2c 	bl	8006aac <HAL_TIM_PWM_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c5a:	f000 f93b 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	3738      	adds	r7, #56	@ 0x38
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200004ac 	.word	0x200004ac
 8001c6c:	40000400 	.word	0x40000400

08001c70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b090      	sub	sp, #64	@ 0x40
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001caa:	4b35      	ldr	r3, [pc, #212]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001cac:	4a35      	ldr	r2, [pc, #212]	@ (8001d84 <MX_TIM4_Init+0x114>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8001cb0:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001cb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cbe:	4b30      	ldr	r3, [pc, #192]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001cc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ccc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cce:	4b2c      	ldr	r3, [pc, #176]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cd4:	482a      	ldr	r0, [pc, #168]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001cd6:	f004 fc5e 	bl	8006596 <HAL_TIM_Base_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001ce0:	f000 f8f8 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4823      	ldr	r0, [pc, #140]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001cf2:	f004 ff9d 	bl	8006c30 <HAL_TIM_ConfigClockSource>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001cfc:	f000 f8ea 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001d00:	481f      	ldr	r0, [pc, #124]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001d02:	f004 fcef 	bl	80066e4 <HAL_TIM_IC_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001d0c:	f000 f8e2 	bl	8001ed4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d10:	2304      	movs	r3, #4
 8001d12:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001d14:	2340      	movs	r3, #64	@ 0x40
 8001d16:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	4817      	ldr	r0, [pc, #92]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001d24:	f005 f84b 	bl	8006dbe <HAL_TIM_SlaveConfigSynchro>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8001d2e:	f000 f8d1 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480f      	ldr	r0, [pc, #60]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001d42:	f005 fe15 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001d4c:	f000 f8c2 	bl	8001ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 8001d54:	2303      	movs	r3, #3
 8001d56:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	@ (8001d80 <MX_TIM4_Init+0x110>)
 8001d68:	f004 fe04 	bl	8006974 <HAL_TIM_IC_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8001d72:	f000 f8af 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	3740      	adds	r7, #64	@ 0x40
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200004f4 	.word	0x200004f4
 8001d84:	40000800 	.word	0x40000800

08001d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <MX_DMA_Init+0x38>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <MX_DMA_Init+0x38>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6153      	str	r3, [r2, #20]
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <MX_DMA_Init+0x38>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	200d      	movs	r0, #13
 8001dac:	f001 f975 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001db0:	200d      	movs	r0, #13
 8001db2:	f001 f98e 	bl	80030d2 <HAL_NVIC_EnableIRQ>

}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a39      	ldr	r2, [pc, #228]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001dde:	f043 0320 	orr.w	r3, r3, #32
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	4b34      	ldr	r3, [pc, #208]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a33      	ldr	r2, [pc, #204]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001e0e:	f043 0308 	orr.w	r3, r3, #8
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <MX_GPIO_Init+0x100>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	210f      	movs	r1, #15
 8001e24:	4828      	ldr	r0, [pc, #160]	@ (8001ec8 <MX_GPIO_Init+0x104>)
 8001e26:	f001 fd59 	bl	80038dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4821      	ldr	r0, [pc, #132]	@ (8001ec8 <MX_GPIO_Init+0x104>)
 8001e42:	f001 fbc7 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e46:	230e      	movs	r3, #14
 8001e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481a      	ldr	r0, [pc, #104]	@ (8001ec8 <MX_GPIO_Init+0x104>)
 8001e5e:	f001 fbb9 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001e62:	f44f 4372 	mov.w	r3, #61952	@ 0xf200
 8001e66:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	4619      	mov	r1, r3
 8001e76:	4815      	ldr	r0, [pc, #84]	@ (8001ecc <MX_GPIO_Init+0x108>)
 8001e78:	f001 fbac 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <MX_GPIO_Init+0x108>)
 8001e92:	f001 fb9f 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <MX_GPIO_Init+0x10c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <MX_GPIO_Init+0x10c>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eba:	bf00      	nop
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	40010c00 	.word	0x40010c00
 8001ed0:	40010000 	.word	0x40010000

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <Error_Handler+0x8>

08001ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <HAL_MspInit+0x60>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_MspInit+0x60>)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010000 	.word	0x40010000

08001f44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a18      	ldr	r2, [pc, #96]	@ (8001fc0 <HAL_ADC_MspInit+0x7c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d129      	bne.n	8001fb8 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <HAL_ADC_MspInit+0x80>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a16      	ldr	r2, [pc, #88]	@ (8001fc4 <HAL_ADC_MspInit+0x80>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <HAL_ADC_MspInit+0x80>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <HAL_ADC_MspInit+0x80>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <HAL_ADC_MspInit+0x80>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_ADC_MspInit+0x80>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f94:	2340      	movs	r3, #64	@ 0x40
 8001f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4809      	ldr	r0, [pc, #36]	@ (8001fc8 <HAL_ADC_MspInit+0x84>)
 8001fa4:	f001 fb16 	bl	80035d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2012      	movs	r0, #18
 8001fae:	f001 f874 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fb2:	2012      	movs	r0, #18
 8001fb4:	f001 f88d 	bl	80030d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fb8:	bf00      	nop
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40012400 	.word	0x40012400
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010800 	.word	0x40010800

08001fcc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a47      	ldr	r2, [pc, #284]	@ (8002104 <HAL_SPI_MspInit+0x138>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	f040 8087 	bne.w	80020fc <HAL_SPI_MspInit+0x130>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fee:	4b46      	ldr	r3, [pc, #280]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4a45      	ldr	r2, [pc, #276]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ff8:	6193      	str	r3, [r2, #24]
 8001ffa:	4b43      	ldr	r3, [pc, #268]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b40      	ldr	r3, [pc, #256]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	4a3f      	ldr	r2, [pc, #252]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6193      	str	r3, [r2, #24]
 8002012:	4b3d      	ldr	r3, [pc, #244]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	4b3a      	ldr	r3, [pc, #232]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a39      	ldr	r2, [pc, #228]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	6193      	str	r3, [r2, #24]
 800202a:	4b37      	ldr	r3, [pc, #220]	@ (8002108 <HAL_SPI_MspInit+0x13c>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4830      	ldr	r0, [pc, #192]	@ (800210c <HAL_SPI_MspInit+0x140>)
 800204c:	f001 fac2 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002050:	2308      	movs	r3, #8
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	482b      	ldr	r0, [pc, #172]	@ (8002110 <HAL_SPI_MspInit+0x144>)
 8002064:	f001 fab6 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002068:	2330      	movs	r3, #48	@ 0x30
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	4825      	ldr	r0, [pc, #148]	@ (8002110 <HAL_SPI_MspInit+0x144>)
 800207c:	f001 faaa 	bl	80035d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002080:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_SPI_MspInit+0x148>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
 8002096:	4a1f      	ldr	r2, [pc, #124]	@ (8002114 <HAL_SPI_MspInit+0x148>)
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800209c:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 800209e:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_SPI_MspInit+0x150>)
 80020a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020a4:	2210      	movs	r2, #16
 80020a6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_DISABLE;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b4:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020bc:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020c6:	2220      	movs	r2, #32
 80020c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80020d0:	4811      	ldr	r0, [pc, #68]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020d2:	f001 f819 	bl	8003108 <HAL_DMA_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 80020dc:	f7ff fefa 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020e4:	649a      	str	r2, [r3, #72]	@ 0x48
 80020e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002118 <HAL_SPI_MspInit+0x14c>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2023      	movs	r0, #35	@ 0x23
 80020f2:	f000 ffd2 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80020f6:	2023      	movs	r0, #35	@ 0x23
 80020f8:	f000 ffeb 	bl	80030d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	@ 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40013000 	.word	0x40013000
 8002108:	40021000 	.word	0x40021000
 800210c:	40010800 	.word	0x40010800
 8002110:	40010c00 	.word	0x40010c00
 8002114:	40010000 	.word	0x40010000
 8002118:	20000420 	.word	0x20000420
 800211c:	40020030 	.word	0x40020030

08002120 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	@ 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0320 	add.w	r3, r7, #32
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a38      	ldr	r2, [pc, #224]	@ (800221c <HAL_TIM_Base_MspInit+0xfc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d125      	bne.n	800218c <HAL_TIM_Base_MspInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002140:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a36      	ldr	r2, [pc, #216]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 8002146:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6193      	str	r3, [r2, #24]
 8002164:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002170:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0320 	add.w	r3, r7, #32
 8002182:	4619      	mov	r1, r3
 8002184:	4827      	ldr	r0, [pc, #156]	@ (8002224 <HAL_TIM_Base_MspInit+0x104>)
 8002186:	f001 fa25 	bl	80035d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800218a:	e042      	b.n	8002212 <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a25      	ldr	r2, [pc, #148]	@ (8002228 <HAL_TIM_Base_MspInit+0x108>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10c      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002196:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
}
 80021ae:	e030      	b.n	8002212 <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	@ (800222c <HAL_TIM_Base_MspInit+0x10c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12b      	bne.n	8002212 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a18      	ldr	r2, [pc, #96]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_TIM_Base_MspInit+0x100>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ea:	2340      	movs	r3, #64	@ 0x40
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0320 	add.w	r3, r7, #32
 80021fa:	4619      	mov	r1, r3
 80021fc:	480c      	ldr	r0, [pc, #48]	@ (8002230 <HAL_TIM_Base_MspInit+0x110>)
 80021fe:	f001 f9e9 	bl	80035d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	201e      	movs	r0, #30
 8002208:	f000 ff47 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800220c:	201e      	movs	r0, #30
 800220e:	f000 ff60 	bl	80030d2 <HAL_NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3730      	adds	r7, #48	@ 0x30
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40021000 	.word	0x40021000
 8002224:	40010800 	.word	0x40010800
 8002228:	40000400 	.word	0x40000400
 800222c:	40000800 	.word	0x40000800
 8002230:	40010c00 	.word	0x40010c00

08002234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <NMI_Handler+0x4>

0800223c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <HardFault_Handler+0x4>

08002244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <MemManage_Handler+0x4>

0800224c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <BusFault_Handler+0x4>

08002254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <UsageFault_Handler+0x4>

0800225c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002284:	f000 f968 	bl	8002558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <DMA1_Channel3_IRQHandler+0x10>)
 8002292:	f001 f86b 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000420 	.word	0x20000420

080022a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022a4:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <ADC1_2_IRQHandler+0x10>)
 80022a6:	f000 fb0d 	bl	80028c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000398 	.word	0x20000398

080022b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80022ba:	f001 fc43 	bl	8003b44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20001254 	.word	0x20001254

080022c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <TIM4_IRQHandler+0x10>)
 80022ce:	f004 fa61 	bl	8006794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200004f4 	.word	0x200004f4

080022dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022e0:	4802      	ldr	r0, [pc, #8]	@ (80022ec <SPI1_IRQHandler+0x10>)
 80022e2:	f003 ff11 	bl	8006108 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200003c8 	.word	0x200003c8

080022f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <_kill>:

int _kill(int pid, int sig)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002308:	f00a ff40 	bl	800d18c <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	2216      	movs	r2, #22
 8002310:	601a      	str	r2, [r3, #0]
  return -1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_exit>:

void _exit (int status)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002326:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffe7 	bl	80022fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <_exit+0x12>

08002334 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e00a      	b.n	800235c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002346:	f3af 8000 	nop.w
 800234a:	4601      	mov	r1, r0
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	b2ca      	uxtb	r2, r1
 8002354:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbf0      	blt.n	8002346 <_read+0x12>
  }

  return len;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e009      	b.n	8002394 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	429a      	cmp	r2, r3
 800239a:	dbf1      	blt.n	8002380 <_write+0x12>
  }
  return len;
 800239c:	687b      	ldr	r3, [r7, #4]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_close>:

int _close(int file)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023cc:	605a      	str	r2, [r3, #4]
  return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <_isatty>:

int _isatty(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
	...

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	@ (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f00a fea8 	bl	800d18c <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	@ (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	@ (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20005000 	.word	0x20005000
 8002468:	00000400 	.word	0x00000400
 800246c:	20000580 	.word	0x20000580
 8002470:	20001898 	.word	0x20001898

08002474 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002480:	f7ff fff8 	bl	8002474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002484:	480b      	ldr	r0, [pc, #44]	@ (80024b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002486:	490c      	ldr	r1, [pc, #48]	@ (80024b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002488:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800248c:	e002      	b.n	8002494 <LoopCopyDataInit>

0800248e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002492:	3304      	adds	r3, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002498:	d3f9      	bcc.n	800248e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249a:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800249c:	4c09      	ldr	r4, [pc, #36]	@ (80024c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a0:	e001      	b.n	80024a6 <LoopFillZerobss>

080024a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a4:	3204      	adds	r2, #4

080024a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a8:	d3fb      	bcc.n	80024a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024aa:	f00a fe75 	bl	800d198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ae:	f7ff f9d9 	bl	8001864 <main>
  bx lr
 80024b2:	4770      	bx	lr
  ldr r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b8:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 80024bc:	080102ec 	.word	0x080102ec
  ldr r2, =_sbss
 80024c0:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 80024c4:	20001898 	.word	0x20001898

080024c8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <CAN1_RX1_IRQHandler>
	...

080024cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_Init+0x28>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_Init+0x28>)
 80024d6:	f043 0310 	orr.w	r3, r3, #16
 80024da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 fdd1 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e2:	200f      	movs	r0, #15
 80024e4:	f000 f808 	bl	80024f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e8:	f7ff fcfa 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000

080024f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_InitTick+0x54>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_InitTick+0x58>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800250e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fde9 	bl	80030ee <HAL_SYSTICK_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e00e      	b.n	8002544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d80a      	bhi.n	8002542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252c:	2200      	movs	r2, #0
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002534:	f000 fdb1 	bl	800309a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002538:	4a06      	ldr	r2, [pc, #24]	@ (8002554 <HAL_InitTick+0x5c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000004 	.word	0x20000004
 8002550:	2000000c 	.word	0x2000000c
 8002554:	20000008 	.word	0x20000008

08002558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <HAL_IncTick+0x1c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_IncTick+0x20>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a03      	ldr	r2, [pc, #12]	@ (8002578 <HAL_IncTick+0x20>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	2000000c 	.word	0x2000000c
 8002578:	20000584 	.word	0x20000584

0800257c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return uwTick;
 8002580:	4b02      	ldr	r3, [pc, #8]	@ (800258c <HAL_GetTick+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	20000584 	.word	0x20000584

08002590 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0be      	b.n	8002730 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fcb8 	bl	8001f44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb8f 	bl	8002cf8 <ADC_ConversionStop_Disable>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 8099 	bne.w	800271e <HAL_ADC_Init+0x18e>
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 8095 	bne.w	800271e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025fc:	f023 0302 	bic.w	r3, r3, #2
 8002600:	f043 0202 	orr.w	r2, r3, #2
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002610:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7b1b      	ldrb	r3, [r3, #12]
 8002616:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002618:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4313      	orrs	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002628:	d003      	beq.n	8002632 <HAL_ADC_Init+0xa2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d102      	bne.n	8002638 <HAL_ADC_Init+0xa8>
 8002632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002636:	e000      	b.n	800263a <HAL_ADC_Init+0xaa>
 8002638:	2300      	movs	r3, #0
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7d1b      	ldrb	r3, [r3, #20]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d119      	bne.n	800267c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7b1b      	ldrb	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	3b01      	subs	r3, #1
 8002656:	035a      	lsls	r2, r3, #13
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	e00b      	b.n	800267c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	430a      	orrs	r2, r1
 800268e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	4b28      	ldr	r3, [pc, #160]	@ (8002738 <HAL_ADC_Init+0x1a8>)
 8002698:	4013      	ands	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ac:	d003      	beq.n	80026b6 <HAL_ADC_Init+0x126>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d104      	bne.n	80026c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	051b      	lsls	r3, r3, #20
 80026be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <HAL_ADC_Init+0x1ac>)
 80026dc:	4013      	ands	r3, r2
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10b      	bne.n	80026fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026fa:	e018      	b.n	800272e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	f023 0312 	bic.w	r3, r3, #18
 8002704:	f043 0210 	orr.w	r2, r3, #16
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800271c:	e007      	b.n	800272e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	f043 0210 	orr.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800272e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ffe1f7fd 	.word	0xffe1f7fd
 800273c:	ff1f0efe 	.word	0xff1f0efe

08002740 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_ADC_Start_IT+0x1a>
 8002756:	2302      	movs	r3, #2
 8002758:	e0a0      	b.n	800289c <HAL_ADC_Start_IT+0x15c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa6e 	bl	8002c44 <ADC_Enable>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 808f 	bne.w	8002892 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002778:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a45      	ldr	r2, [pc, #276]	@ (80028a4 <HAL_ADC_Start_IT+0x164>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d105      	bne.n	800279e <HAL_ADC_Start_IT+0x5e>
 8002792:	4b45      	ldr	r3, [pc, #276]	@ (80028a8 <HAL_ADC_Start_IT+0x168>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d115      	bne.n	80027ca <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d026      	beq.n	8002806 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027c8:	e01d      	b.n	8002806 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a33      	ldr	r2, [pc, #204]	@ (80028a8 <HAL_ADC_Start_IT+0x168>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d004      	beq.n	80027ea <HAL_ADC_Start_IT+0xaa>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2f      	ldr	r2, [pc, #188]	@ (80028a4 <HAL_ADC_Start_IT+0x164>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10d      	bne.n	8002806 <HAL_ADC_Start_IT+0xc6>
 80027ea:	4b2f      	ldr	r3, [pc, #188]	@ (80028a8 <HAL_ADC_Start_IT+0x168>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002816:	f023 0206 	bic.w	r2, r3, #6
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800281e:	e002      	b.n	8002826 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0202 	mvn.w	r2, #2
 8002836:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002852:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002856:	d113      	bne.n	8002880 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800285c:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_ADC_Start_IT+0x164>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d105      	bne.n	800286e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_ADC_Start_IT+0x168>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	e00c      	b.n	800289a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	e003      	b.n	800289a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40012800 	.word	0x40012800
 80028a8:	40012400 	.word	0x40012400

080028ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d03e      	beq.n	8002964 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d039      	beq.n	8002964 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d105      	bne.n	8002908 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002912:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002916:	d11d      	bne.n	8002954 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800291c:	2b00      	cmp	r3, #0
 800291e:	d119      	bne.n	8002954 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0220 	bic.w	r2, r2, #32
 800292e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7fe fe0d 	bl	8001574 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0212 	mvn.w	r2, #18
 8002962:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d04d      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d048      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002988:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800299a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800299e:	d012      	beq.n	80029c6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d125      	bne.n	80029fa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029b8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029bc:	d11d      	bne.n	80029fa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d119      	bne.n	80029fa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029d4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fa6c 	bl	8002ed8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 020c 	mvn.w	r2, #12
 8002a08:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f809 	bl	8002a42 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x20>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e0dc      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1da>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d81c      	bhi.n	8002abe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	3b05      	subs	r3, #5
 8002a96:	221f      	movs	r2, #31
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4019      	ands	r1, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b05      	subs	r3, #5
 8002ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	635a      	str	r2, [r3, #52]	@ 0x34
 8002abc:	e03c      	b.n	8002b38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d81c      	bhi.n	8002b00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b23      	subs	r3, #35	@ 0x23
 8002ad8:	221f      	movs	r2, #31
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4019      	ands	r1, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	3b23      	subs	r3, #35	@ 0x23
 8002af2:	fa00 f203 	lsl.w	r2, r0, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002afe:	e01b      	b.n	8002b38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b41      	subs	r3, #65	@ 0x41
 8002b12:	221f      	movs	r2, #31
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	4019      	ands	r1, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b41      	subs	r3, #65	@ 0x41
 8002b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b09      	cmp	r3, #9
 8002b3e:	d91c      	bls.n	8002b7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68d9      	ldr	r1, [r3, #12]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b1e      	subs	r3, #30
 8002b52:	2207      	movs	r2, #7
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4019      	ands	r1, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6898      	ldr	r0, [r3, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b1e      	subs	r3, #30
 8002b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]
 8002b78:	e019      	b.n	8002bae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6919      	ldr	r1, [r3, #16]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4019      	ands	r1, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6898      	ldr	r0, [r3, #8]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d003      	beq.n	8002bbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bba:	2b11      	cmp	r3, #17
 8002bbc:	d132      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d125      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d126      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002be4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d11a      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bee:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <HAL_ADC_ConfigChannel+0x1e8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a13      	ldr	r2, [pc, #76]	@ (8002c40 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	0c9a      	lsrs	r2, r3, #18
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c04:	e002      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f9      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x1b2>
 8002c12:	e007      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40012400 	.word	0x40012400
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	431bde83 	.word	0x431bde83

08002c44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d040      	beq.n	8002ce4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c72:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf0 <ADC_Enable+0xac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf4 <ADC_Enable+0xb0>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	0c9b      	lsrs	r3, r3, #18
 8002c7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c80:	e002      	b.n	8002c88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f9      	bne.n	8002c82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c8e:	f7ff fc75 	bl	800257c <HAL_GetTick>
 8002c92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c94:	e01f      	b.n	8002cd6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c96:	f7ff fc71 	bl	800257c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d918      	bls.n	8002cd6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d011      	beq.n	8002cd6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e007      	b.n	8002ce6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d1d8      	bne.n	8002c96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000004 	.word	0x20000004
 8002cf4:	431bde83 	.word	0x431bde83

08002cf8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d12e      	bne.n	8002d70 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d22:	f7ff fc2b 	bl	800257c <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d28:	e01b      	b.n	8002d62 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d2a:	f7ff fc27 	bl	800257c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d914      	bls.n	8002d62 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10d      	bne.n	8002d62 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e007      	b.n	8002d72 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d0dc      	beq.n	8002d2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_ADCEx_Calibration_Start+0x1e>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e097      	b.n	8002eca <HAL_ADCEx_Calibration_Start+0x14e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffa8 	bl	8002cf8 <ADC_ConversionStop_Disable>
 8002da8:	4603      	mov	r3, r0
 8002daa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff49 	bl	8002c44 <ADC_Enable>
 8002db2:	4603      	mov	r3, r0
 8002db4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 8081 	bne.w	8002ec0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dc6:	f023 0302 	bic.w	r3, r3, #2
 8002dca:	f043 0202 	orr.w	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002dd2:	4b40      	ldr	r3, [pc, #256]	@ (8002ed4 <HAL_ADCEx_Calibration_Start+0x158>)
 8002dd4:	681c      	ldr	r4, [r3, #0]
 8002dd6:	2002      	movs	r0, #2
 8002dd8:	f002 ffaa 	bl	8005d30 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002de2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002de4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002de6:	e002      	b.n	8002dee <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f9      	bne.n	8002de8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0208 	orr.w	r2, r2, #8
 8002e02:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e04:	f7ff fbba 	bl	800257c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e0a:	e01b      	b.n	8002e44 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e0c:	f7ff fbb6 	bl	800257c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b0a      	cmp	r3, #10
 8002e18:	d914      	bls.n	8002e44 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f023 0312 	bic.w	r3, r3, #18
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e042      	b.n	8002eca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1dc      	bne.n	8002e0c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0204 	orr.w	r2, r2, #4
 8002e60:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e62:	f7ff fb8b 	bl	800257c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e68:	e01b      	b.n	8002ea2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e6a:	f7ff fb87 	bl	800257c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b0a      	cmp	r3, #10
 8002e76:	d914      	bls.n	8002ea2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	f023 0312 	bic.w	r3, r3, #18
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e013      	b.n	8002eca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1dc      	bne.n	8002e6a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	f023 0303 	bic.w	r3, r3, #3
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000004 	.word	0x20000004

08002ed8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
	...

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	@ (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4906      	ldr	r1, [pc, #24]	@ (8002f84 <__NVIC_EnableIRQ+0x34>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	e000e100 	.word	0xe000e100

08002f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db0a      	blt.n	8002fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	490c      	ldr	r1, [pc, #48]	@ (8002fd4 <__NVIC_SetPriority+0x4c>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb0:	e00a      	b.n	8002fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4908      	ldr	r1, [pc, #32]	@ (8002fd8 <__NVIC_SetPriority+0x50>)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	761a      	strb	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	@ 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	bf28      	it	cs
 8002ffa:	2304      	movcs	r3, #4
 8002ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3304      	adds	r3, #4
 8003002:	2b06      	cmp	r3, #6
 8003004:	d902      	bls.n	800300c <NVIC_EncodePriority+0x30>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3b03      	subs	r3, #3
 800300a:	e000      	b.n	800300e <NVIC_EncodePriority+0x32>
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	401a      	ands	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003024:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43d9      	mvns	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	4313      	orrs	r3, r2
         );
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	@ 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003064:	f7ff ff90 	bl	8002f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff2d 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff42 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff90 	bl	8002fdc <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5f 	bl	8002f88 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff35 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa2 	bl	8003040 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e043      	b.n	80031a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	4b22      	ldr	r3, [pc, #136]	@ (80031b0 <HAL_DMA_Init+0xa8>)
 8003126:	4413      	add	r3, r2
 8003128:	4a22      	ldr	r2, [pc, #136]	@ (80031b4 <HAL_DMA_Init+0xac>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	009a      	lsls	r2, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1f      	ldr	r2, [pc, #124]	@ (80031b8 <HAL_DMA_Init+0xb0>)
 800313a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003152:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003156:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	bffdfff8 	.word	0xbffdfff8
 80031b4:	cccccccd 	.word	0xcccccccd
 80031b8:	40020000 	.word	0x40020000

080031bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Start_IT+0x20>
 80031d8:	2302      	movs	r3, #2
 80031da:	e04b      	b.n	8003274 <HAL_DMA_Start_IT+0xb8>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d13a      	bne.n	8003266 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f9af 	bl	8003578 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 020e 	orr.w	r2, r2, #14
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e00f      	b.n	8003254 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 020a 	orr.w	r2, r2, #10
 8003252:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e005      	b.n	8003272 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d005      	beq.n	80032a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2204      	movs	r2, #4
 8003298:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e051      	b.n	8003344 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 020e 	bic.w	r2, r2, #14
 80032ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a22      	ldr	r2, [pc, #136]	@ (8003350 <HAL_DMA_Abort_IT+0xd4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d029      	beq.n	800331e <HAL_DMA_Abort_IT+0xa2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a21      	ldr	r2, [pc, #132]	@ (8003354 <HAL_DMA_Abort_IT+0xd8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_Abort_IT+0x9e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003358 <HAL_DMA_Abort_IT+0xdc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01a      	beq.n	8003314 <HAL_DMA_Abort_IT+0x98>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <HAL_DMA_Abort_IT+0xe0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d012      	beq.n	800330e <HAL_DMA_Abort_IT+0x92>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <HAL_DMA_Abort_IT+0xe4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00a      	beq.n	8003308 <HAL_DMA_Abort_IT+0x8c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <HAL_DMA_Abort_IT+0xe8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <HAL_DMA_Abort_IT+0x86>
 80032fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003300:	e00e      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 8003302:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003306:	e00b      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 8003308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800330c:	e008      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 800330e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003312:	e005      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 8003314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003318:	e002      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 800331a:	2310      	movs	r3, #16
 800331c:	e000      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 800331e:	2301      	movs	r3, #1
 8003320:	4a11      	ldr	r2, [pc, #68]	@ (8003368 <HAL_DMA_Abort_IT+0xec>)
 8003322:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
    } 
  }
  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40020008 	.word	0x40020008
 8003354:	4002001c 	.word	0x4002001c
 8003358:	40020030 	.word	0x40020030
 800335c:	40020044 	.word	0x40020044
 8003360:	40020058 	.word	0x40020058
 8003364:	4002006c 	.word	0x4002006c
 8003368:	40020000 	.word	0x40020000

0800336c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	2204      	movs	r2, #4
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d04f      	beq.n	8003434 <HAL_DMA_IRQHandler+0xc8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d04a      	beq.n	8003434 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a66      	ldr	r2, [pc, #408]	@ (800355c <HAL_DMA_IRQHandler+0x1f0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d029      	beq.n	800341a <HAL_DMA_IRQHandler+0xae>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a65      	ldr	r2, [pc, #404]	@ (8003560 <HAL_DMA_IRQHandler+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_IRQHandler+0xaa>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a63      	ldr	r2, [pc, #396]	@ (8003564 <HAL_DMA_IRQHandler+0x1f8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01a      	beq.n	8003410 <HAL_DMA_IRQHandler+0xa4>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a62      	ldr	r2, [pc, #392]	@ (8003568 <HAL_DMA_IRQHandler+0x1fc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d012      	beq.n	800340a <HAL_DMA_IRQHandler+0x9e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a60      	ldr	r2, [pc, #384]	@ (800356c <HAL_DMA_IRQHandler+0x200>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00a      	beq.n	8003404 <HAL_DMA_IRQHandler+0x98>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003570 <HAL_DMA_IRQHandler+0x204>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d102      	bne.n	80033fe <HAL_DMA_IRQHandler+0x92>
 80033f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033fc:	e00e      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 80033fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003402:	e00b      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003404:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003408:	e008      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 800340a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800340e:	e005      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003414:	e002      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003416:	2340      	movs	r3, #64	@ 0x40
 8003418:	e000      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 800341a:	2304      	movs	r3, #4
 800341c:	4a55      	ldr	r2, [pc, #340]	@ (8003574 <HAL_DMA_IRQHandler+0x208>)
 800341e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8094 	beq.w	8003552 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003432:	e08e      	b.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	2202      	movs	r2, #2
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d056      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x186>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d051      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020a 	bic.w	r2, r2, #10
 800346a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a38      	ldr	r2, [pc, #224]	@ (800355c <HAL_DMA_IRQHandler+0x1f0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d029      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x166>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a37      	ldr	r2, [pc, #220]	@ (8003560 <HAL_DMA_IRQHandler+0x1f4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <HAL_DMA_IRQHandler+0x162>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a35      	ldr	r2, [pc, #212]	@ (8003564 <HAL_DMA_IRQHandler+0x1f8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x15c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a34      	ldr	r2, [pc, #208]	@ (8003568 <HAL_DMA_IRQHandler+0x1fc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d012      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x156>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a32      	ldr	r2, [pc, #200]	@ (800356c <HAL_DMA_IRQHandler+0x200>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00a      	beq.n	80034bc <HAL_DMA_IRQHandler+0x150>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <HAL_DMA_IRQHandler+0x204>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d102      	bne.n	80034b6 <HAL_DMA_IRQHandler+0x14a>
 80034b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034b4:	e00e      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ba:	e00b      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034c0:	e008      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034c6:	e005      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034cc:	e002      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034ce:	2320      	movs	r3, #32
 80034d0:	e000      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034d2:	2302      	movs	r3, #2
 80034d4:	4a27      	ldr	r2, [pc, #156]	@ (8003574 <HAL_DMA_IRQHandler+0x208>)
 80034d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d034      	beq.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034f0:	e02f      	b.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	2208      	movs	r2, #8
 80034f8:	409a      	lsls	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d028      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 020e 	bic.w	r2, r2, #14
 800351a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
    }
  }
  return;
 8003552:	bf00      	nop
 8003554:	bf00      	nop
}
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40020008 	.word	0x40020008
 8003560:	4002001c 	.word	0x4002001c
 8003564:	40020030 	.word	0x40020030
 8003568:	40020044 	.word	0x40020044
 800356c:	40020058 	.word	0x40020058
 8003570:	4002006c 	.word	0x4002006c
 8003574:	40020000 	.word	0x40020000

08003578 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358e:	2101      	movs	r1, #1
 8003590:	fa01 f202 	lsl.w	r2, r1, r2
 8003594:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d108      	bne.n	80035b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035b6:	e007      	b.n	80035c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b08b      	sub	sp, #44	@ 0x2c
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e6:	e169      	b.n	80038bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035e8:	2201      	movs	r2, #1
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	429a      	cmp	r2, r3
 8003602:	f040 8158 	bne.w	80038b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a9a      	ldr	r2, [pc, #616]	@ (8003874 <HAL_GPIO_Init+0x2a0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d05e      	beq.n	80036ce <HAL_GPIO_Init+0xfa>
 8003610:	4a98      	ldr	r2, [pc, #608]	@ (8003874 <HAL_GPIO_Init+0x2a0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d875      	bhi.n	8003702 <HAL_GPIO_Init+0x12e>
 8003616:	4a98      	ldr	r2, [pc, #608]	@ (8003878 <HAL_GPIO_Init+0x2a4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d058      	beq.n	80036ce <HAL_GPIO_Init+0xfa>
 800361c:	4a96      	ldr	r2, [pc, #600]	@ (8003878 <HAL_GPIO_Init+0x2a4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d86f      	bhi.n	8003702 <HAL_GPIO_Init+0x12e>
 8003622:	4a96      	ldr	r2, [pc, #600]	@ (800387c <HAL_GPIO_Init+0x2a8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d052      	beq.n	80036ce <HAL_GPIO_Init+0xfa>
 8003628:	4a94      	ldr	r2, [pc, #592]	@ (800387c <HAL_GPIO_Init+0x2a8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d869      	bhi.n	8003702 <HAL_GPIO_Init+0x12e>
 800362e:	4a94      	ldr	r2, [pc, #592]	@ (8003880 <HAL_GPIO_Init+0x2ac>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d04c      	beq.n	80036ce <HAL_GPIO_Init+0xfa>
 8003634:	4a92      	ldr	r2, [pc, #584]	@ (8003880 <HAL_GPIO_Init+0x2ac>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d863      	bhi.n	8003702 <HAL_GPIO_Init+0x12e>
 800363a:	4a92      	ldr	r2, [pc, #584]	@ (8003884 <HAL_GPIO_Init+0x2b0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d046      	beq.n	80036ce <HAL_GPIO_Init+0xfa>
 8003640:	4a90      	ldr	r2, [pc, #576]	@ (8003884 <HAL_GPIO_Init+0x2b0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d85d      	bhi.n	8003702 <HAL_GPIO_Init+0x12e>
 8003646:	2b12      	cmp	r3, #18
 8003648:	d82a      	bhi.n	80036a0 <HAL_GPIO_Init+0xcc>
 800364a:	2b12      	cmp	r3, #18
 800364c:	d859      	bhi.n	8003702 <HAL_GPIO_Init+0x12e>
 800364e:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <HAL_GPIO_Init+0x80>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	080036cf 	.word	0x080036cf
 8003658:	080036a9 	.word	0x080036a9
 800365c:	080036bb 	.word	0x080036bb
 8003660:	080036fd 	.word	0x080036fd
 8003664:	08003703 	.word	0x08003703
 8003668:	08003703 	.word	0x08003703
 800366c:	08003703 	.word	0x08003703
 8003670:	08003703 	.word	0x08003703
 8003674:	08003703 	.word	0x08003703
 8003678:	08003703 	.word	0x08003703
 800367c:	08003703 	.word	0x08003703
 8003680:	08003703 	.word	0x08003703
 8003684:	08003703 	.word	0x08003703
 8003688:	08003703 	.word	0x08003703
 800368c:	08003703 	.word	0x08003703
 8003690:	08003703 	.word	0x08003703
 8003694:	08003703 	.word	0x08003703
 8003698:	080036b1 	.word	0x080036b1
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	4a79      	ldr	r2, [pc, #484]	@ (8003888 <HAL_GPIO_Init+0x2b4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036a6:	e02c      	b.n	8003702 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	623b      	str	r3, [r7, #32]
          break;
 80036ae:	e029      	b.n	8003704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	3304      	adds	r3, #4
 80036b6:	623b      	str	r3, [r7, #32]
          break;
 80036b8:	e024      	b.n	8003704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	3308      	adds	r3, #8
 80036c0:	623b      	str	r3, [r7, #32]
          break;
 80036c2:	e01f      	b.n	8003704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	330c      	adds	r3, #12
 80036ca:	623b      	str	r3, [r7, #32]
          break;
 80036cc:	e01a      	b.n	8003704 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036d6:	2304      	movs	r3, #4
 80036d8:	623b      	str	r3, [r7, #32]
          break;
 80036da:	e013      	b.n	8003704 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d105      	bne.n	80036f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036e4:	2308      	movs	r3, #8
 80036e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	611a      	str	r2, [r3, #16]
          break;
 80036ee:	e009      	b.n	8003704 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036f0:	2308      	movs	r3, #8
 80036f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	615a      	str	r2, [r3, #20]
          break;
 80036fa:	e003      	b.n	8003704 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036fc:	2300      	movs	r3, #0
 80036fe:	623b      	str	r3, [r7, #32]
          break;
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x130>
          break;
 8003702:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2bff      	cmp	r3, #255	@ 0xff
 8003708:	d801      	bhi.n	800370e <HAL_GPIO_Init+0x13a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	e001      	b.n	8003712 <HAL_GPIO_Init+0x13e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2bff      	cmp	r3, #255	@ 0xff
 8003718:	d802      	bhi.n	8003720 <HAL_GPIO_Init+0x14c>
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	e002      	b.n	8003726 <HAL_GPIO_Init+0x152>
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	3b08      	subs	r3, #8
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	210f      	movs	r1, #15
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	401a      	ands	r2, r3
 8003738:	6a39      	ldr	r1, [r7, #32]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	431a      	orrs	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80b1 	beq.w	80038b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003754:	4b4d      	ldr	r3, [pc, #308]	@ (800388c <HAL_GPIO_Init+0x2b8>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4a4c      	ldr	r2, [pc, #304]	@ (800388c <HAL_GPIO_Init+0x2b8>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6193      	str	r3, [r2, #24]
 8003760:	4b4a      	ldr	r3, [pc, #296]	@ (800388c <HAL_GPIO_Init+0x2b8>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800376c:	4a48      	ldr	r2, [pc, #288]	@ (8003890 <HAL_GPIO_Init+0x2bc>)
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003778:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	220f      	movs	r2, #15
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4013      	ands	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a40      	ldr	r2, [pc, #256]	@ (8003894 <HAL_GPIO_Init+0x2c0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <HAL_GPIO_Init+0x1ec>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3f      	ldr	r2, [pc, #252]	@ (8003898 <HAL_GPIO_Init+0x2c4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00d      	beq.n	80037bc <HAL_GPIO_Init+0x1e8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a3e      	ldr	r2, [pc, #248]	@ (800389c <HAL_GPIO_Init+0x2c8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d007      	beq.n	80037b8 <HAL_GPIO_Init+0x1e4>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3d      	ldr	r2, [pc, #244]	@ (80038a0 <HAL_GPIO_Init+0x2cc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_GPIO_Init+0x1e0>
 80037b0:	2303      	movs	r3, #3
 80037b2:	e006      	b.n	80037c2 <HAL_GPIO_Init+0x1ee>
 80037b4:	2304      	movs	r3, #4
 80037b6:	e004      	b.n	80037c2 <HAL_GPIO_Init+0x1ee>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e002      	b.n	80037c2 <HAL_GPIO_Init+0x1ee>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_GPIO_Init+0x1ee>
 80037c0:	2300      	movs	r3, #0
 80037c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c4:	f002 0203 	and.w	r2, r2, #3
 80037c8:	0092      	lsls	r2, r2, #2
 80037ca:	4093      	lsls	r3, r2
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037d2:	492f      	ldr	r1, [pc, #188]	@ (8003890 <HAL_GPIO_Init+0x2bc>)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	3302      	adds	r3, #2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037ec:	4b2d      	ldr	r3, [pc, #180]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	492c      	ldr	r1, [pc, #176]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]
 80037f8:	e006      	b.n	8003808 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037fa:	4b2a      	ldr	r3, [pc, #168]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	43db      	mvns	r3, r3
 8003802:	4928      	ldr	r1, [pc, #160]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 8003804:	4013      	ands	r3, r2
 8003806:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d006      	beq.n	8003822 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003814:	4b23      	ldr	r3, [pc, #140]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	4922      	ldr	r1, [pc, #136]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	60cb      	str	r3, [r1, #12]
 8003820:	e006      	b.n	8003830 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	43db      	mvns	r3, r3
 800382a:	491e      	ldr	r1, [pc, #120]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 800382c:	4013      	ands	r3, r2
 800382e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800383c:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	4918      	ldr	r1, [pc, #96]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800384a:	4b16      	ldr	r3, [pc, #88]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	43db      	mvns	r3, r3
 8003852:	4914      	ldr	r1, [pc, #80]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 8003854:	4013      	ands	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d021      	beq.n	80038a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	490e      	ldr	r1, [pc, #56]	@ (80038a4 <HAL_GPIO_Init+0x2d0>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
 8003870:	e021      	b.n	80038b6 <HAL_GPIO_Init+0x2e2>
 8003872:	bf00      	nop
 8003874:	10320000 	.word	0x10320000
 8003878:	10310000 	.word	0x10310000
 800387c:	10220000 	.word	0x10220000
 8003880:	10210000 	.word	0x10210000
 8003884:	10120000 	.word	0x10120000
 8003888:	10110000 	.word	0x10110000
 800388c:	40021000 	.word	0x40021000
 8003890:	40010000 	.word	0x40010000
 8003894:	40010800 	.word	0x40010800
 8003898:	40010c00 	.word	0x40010c00
 800389c:	40011000 	.word	0x40011000
 80038a0:	40011400 	.word	0x40011400
 80038a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <HAL_GPIO_Init+0x304>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	4909      	ldr	r1, [pc, #36]	@ (80038d8 <HAL_GPIO_Init+0x304>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	3301      	adds	r3, #1
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f47f ae8e 	bne.w	80035e8 <HAL_GPIO_Init+0x14>
  }
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	372c      	adds	r7, #44	@ 0x2c
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	40010400 	.word	0x40010400

080038dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	807b      	strh	r3, [r7, #2]
 80038e8:	4613      	mov	r3, r2
 80038ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038ec:	787b      	ldrb	r3, [r7, #1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f2:	887a      	ldrh	r2, [r7, #2]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038f8:	e003      	b.n	8003902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038fa:	887b      	ldrh	r3, [r7, #2]
 80038fc:	041a      	lsls	r2, r3, #16
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	611a      	str	r2, [r3, #16]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0e8      	b.n	8003af0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f008 f9ec 	bl	800bd10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2203      	movs	r2, #3
 800393c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f004 f8c7 	bl	8007ade <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800395a:	f004 f89d 	bl	8007a98 <USB_CoreInit>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0bf      	b.n	8003af0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f004 f8cb 	bl	8007b12 <USB_SetCurrentMode>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0b0      	b.n	8003af0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e03e      	b.n	8003a12 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	440b      	add	r3, r1
 80039a2:	3311      	adds	r3, #17
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	3310      	adds	r3, #16
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	3313      	adds	r3, #19
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	440b      	add	r3, r1
 80039de:	3320      	adds	r3, #32
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	440b      	add	r3, r1
 80039f2:	3324      	adds	r3, #36	@ 0x24
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	440b      	add	r3, r1
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	791b      	ldrb	r3, [r3, #4]
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3bb      	bcc.n	8003994 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	e044      	b.n	8003aac <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	440b      	add	r3, r1
 8003a30:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	791b      	ldrb	r3, [r3, #4]
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3b5      	bcc.n	8003a22 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac0:	f004 f833 	bl	8007b2a <USB_DevInit>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00c      	b.n	8003af0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f006 fab2 	bl	800a052 <USB_DevDisconnect>

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_PCD_Start+0x16>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e016      	b.n	8003b3c <HAL_PCD_Start+0x44>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 ffc9 	bl	8007ab2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003b20:	2101      	movs	r1, #1
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f008 fb67 	bl	800c1f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f006 fa86 	bl	800a03e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f006 fa88 	bl	800a066 <USB_ReadInterrupts>
 8003b56:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fb1a 	bl	800419c <PCD_EP_ISR_Handler>

    return;
 8003b68:	e119      	b.n	8003d9e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b86:	b292      	uxth	r2, r2
 8003b88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f008 f93a 	bl	800be06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b92:	2100      	movs	r1, #0
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f905 	bl	8003da4 <HAL_PCD_SetAddress>

    return;
 8003b9a:	e100      	b.n	8003d9e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bb8:	b292      	uxth	r2, r2
 8003bba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bbe:	e0ee      	b.n	8003d9e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00c      	beq.n	8003be4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003be2:	e0dc      	b.n	8003d9e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d027      	beq.n	8003c3e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0204 	bic.w	r2, r2, #4
 8003c00:	b292      	uxth	r2, r2
 8003c02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0208 	bic.w	r2, r2, #8
 8003c18:	b292      	uxth	r2, r2
 8003c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f008 f92a 	bl	800be78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c36:	b292      	uxth	r2, r2
 8003c38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c3c:	e0af      	b.n	8003d9e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8083 	beq.w	8003d50 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e010      	b.n	8003c72 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	7ffb      	ldrb	r3, [r7, #31]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	441a      	add	r2, r3
 8003c5c:	7ffb      	ldrb	r3, [r7, #31]
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	b292      	uxth	r2, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	3320      	adds	r3, #32
 8003c66:	443b      	add	r3, r7
 8003c68:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003c6c:	7ffb      	ldrb	r3, [r7, #31]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	2b07      	cmp	r3, #7
 8003c76:	d9eb      	bls.n	8003c50 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003ca8:	bf00      	nop
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f6      	beq.n	8003caa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e00f      	b.n	8003cfa <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003cda:	7ffb      	ldrb	r3, [r7, #31]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	7ffa      	ldrb	r2, [r7, #31]
 8003ce4:	0092      	lsls	r2, r2, #2
 8003ce6:	440a      	add	r2, r1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	3320      	adds	r3, #32
 8003cec:	443b      	add	r3, r7
 8003cee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003cf2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	7ffb      	ldrb	r3, [r7, #31]
 8003cfc:	2b07      	cmp	r3, #7
 8003cfe:	d9ec      	bls.n	8003cda <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0208 	orr.w	r2, r2, #8
 8003d12:	b292      	uxth	r2, r2
 8003d14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0204 	orr.w	r2, r2, #4
 8003d42:	b292      	uxth	r2, r2
 8003d44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f008 f87b 	bl	800be44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d4e:	e026      	b.n	8003d9e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00f      	beq.n	8003d7a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f008 f839 	bl	800bdea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d78:	e011      	b.n	8003d9e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d96:	b292      	uxth	r2, r2
 8003d98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d9c:	bf00      	nop
  }
}
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_PCD_SetAddress+0x1a>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e012      	b.n	8003de4 <HAL_PCD_SetAddress+0x40>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f006 f91f 	bl	800a018 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	70fb      	strb	r3, [r7, #3]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	803b      	strh	r3, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	da0e      	bge.n	8003e30 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	f003 0207 	and.w	r2, r3, #7
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	3310      	adds	r3, #16
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	705a      	strb	r2, [r3, #1]
 8003e2e:	e00e      	b.n	8003e4e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 0207 	and.w	r2, r3, #7
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e5a:	883a      	ldrh	r2, [r7, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	78ba      	ldrb	r2, [r7, #2]
 8003e64:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e66:	78bb      	ldrb	r3, [r7, #2]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d102      	bne.n	8003e72 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_PCD_EP_Open+0x94>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e00e      	b.n	8003e9e <HAL_PCD_EP_Open+0xb2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68f9      	ldr	r1, [r7, #12]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 fe68 	bl	8007b64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da0e      	bge.n	8003ed8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 0207 	and.w	r2, r3, #7
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	3310      	adds	r3, #16
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	705a      	strb	r2, [r3, #1]
 8003ed6:	e00e      	b.n	8003ef6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 0207 	and.w	r2, r3, #7
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_PCD_EP_Close+0x6a>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e00e      	b.n	8003f2e <HAL_PCD_EP_Close+0x88>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68f9      	ldr	r1, [r7, #12]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 f9e0 	bl	80082e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	460b      	mov	r3, r1
 8003f44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	7afb      	ldrb	r3, [r7, #11]
 8003f48:	f003 0207 	and.w	r2, r3, #7
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f76:	7afb      	ldrb	r3, [r7, #11]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6979      	ldr	r1, [r7, #20]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f004 fb97 	bl	80086bc <USB_EPStartXfer>

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 0207 	and.w	r2, r3, #7
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
 8003fd8:	f003 0207 	and.w	r2, r3, #7
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	3310      	adds	r3, #16
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2201      	movs	r2, #1
 8004010:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	b2da      	uxtb	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6979      	ldr	r1, [r7, #20]
 8004024:	4618      	mov	r0, r3
 8004026:	f004 fb49 	bl	80086bc <USB_EPStartXfer>

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	7912      	ldrb	r2, [r2, #4]
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e04c      	b.n	80040ec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da0e      	bge.n	8004078 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 0207 	and.w	r2, r3, #7
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	3310      	adds	r3, #16
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	705a      	strb	r2, [r3, #1]
 8004076:	e00c      	b.n	8004092 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_PCD_EP_SetStall+0x7e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e01c      	b.n	80040ec <HAL_PCD_EP_SetStall+0xb8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f005 feac 	bl	8009e1e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f005 ffd1 	bl	800a084 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	7912      	ldrb	r2, [r2, #4]
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e040      	b.n	8004194 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da0e      	bge.n	8004138 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 0207 	and.w	r2, r3, #7
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	3310      	adds	r3, #16
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	705a      	strb	r2, [r3, #1]
 8004136:	e00e      	b.n	8004156 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 0207 	and.w	r2, r3, #7
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_PCD_EP_ClrStall+0x82>
 8004172:	2302      	movs	r3, #2
 8004174:	e00e      	b.n	8004194 <HAL_PCD_EP_ClrStall+0xa0>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68f9      	ldr	r1, [r7, #12]
 8004184:	4618      	mov	r0, r3
 8004186:	f005 fe9a 	bl	8009ebe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b096      	sub	sp, #88	@ 0x58
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041a4:	e3bb      	b.n	800491e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80041c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f040 8175 	bne.w	80044b4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d14e      	bne.n	8004274 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e6:	81fb      	strh	r3, [r7, #14]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	89fb      	ldrh	r3, [r7, #14]
 80041ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3310      	adds	r3, #16
 80041fe:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	3302      	adds	r3, #2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800422c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	441a      	add	r2, r3
 8004236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004238:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800423a:	2100      	movs	r1, #0
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f007 fdba 	bl	800bdb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	7b5b      	ldrb	r3, [r3, #13]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8368 	beq.w	800491e <PCD_EP_ISR_Handler+0x782>
 800424e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 8363 	bne.w	800491e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7b5b      	ldrb	r3, [r3, #13]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004262:	b2da      	uxtb	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	735a      	strb	r2, [r3, #13]
 8004272:	e354      	b.n	800491e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800427a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004286:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800428a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800428e:	2b00      	cmp	r3, #0
 8004290:	d034      	beq.n	80042fc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800429a:	b29b      	uxth	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4413      	add	r3, r2
 80042a6:	3306      	adds	r3, #6
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80042c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f005 ff28 	bl	800a126 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042e2:	4013      	ands	r3, r2
 80042e4:	823b      	strh	r3, [r7, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	8a3a      	ldrh	r2, [r7, #16]
 80042ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f007 fd31 	bl	800bd5c <HAL_PCD_SetupStageCallback>
 80042fa:	e310      	b.n	800491e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004300:	2b00      	cmp	r3, #0
 8004302:	f280 830c 	bge.w	800491e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29a      	uxth	r2, r3
 800430e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004312:	4013      	ands	r3, r2
 8004314:	83fb      	strh	r3, [r7, #30]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	8bfa      	ldrh	r2, [r7, #30]
 800431c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004320:	b292      	uxth	r2, r2
 8004322:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432c:	b29b      	uxth	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	3306      	adds	r3, #6
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800434c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d019      	beq.n	800438c <PCD_EP_ISR_Handler+0x1f0>
 8004358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004366:	6959      	ldr	r1, [r3, #20]
 8004368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004370:	b29b      	uxth	r3, r3
 8004372:	f005 fed8 	bl	800a126 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	441a      	add	r2, r3
 8004380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004382:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004384:	2100      	movs	r1, #0
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f007 fcfa 	bl	800bd80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004396:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800439a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 82bd 	bne.w	800491e <PCD_EP_ISR_Handler+0x782>
 80043a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043a8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80043ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043b0:	f000 82b5 	beq.w	800491e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	4413      	add	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043de:	b29a      	uxth	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80043ea:	d91d      	bls.n	8004428 <PCD_EP_ISR_Handler+0x28c>
 80043ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <PCD_EP_ISR_Handler+0x26a>
 8004400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004402:	3b01      	subs	r3, #1
 8004404:	647b      	str	r3, [r7, #68]	@ 0x44
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29a      	uxth	r2, r3
 800440c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800440e:	b29b      	uxth	r3, r3
 8004410:	029b      	lsls	r3, r3, #10
 8004412:	b29b      	uxth	r3, r3
 8004414:	4313      	orrs	r3, r2
 8004416:	b29b      	uxth	r3, r3
 8004418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004420:	b29a      	uxth	r2, r3
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	e026      	b.n	8004476 <PCD_EP_ISR_Handler+0x2da>
 8004428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <PCD_EP_ISR_Handler+0x2aa>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443e:	b29a      	uxth	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	e017      	b.n	8004476 <PCD_EP_ISR_Handler+0x2da>
 8004446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	647b      	str	r3, [r7, #68]	@ 0x44
 800444e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <PCD_EP_ISR_Handler+0x2c4>
 800445a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445c:	3301      	adds	r3, #1
 800445e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29a      	uxth	r2, r3
 8004466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004468:	b29b      	uxth	r3, r3
 800446a:	029b      	lsls	r3, r3, #10
 800446c:	b29b      	uxth	r3, r3
 800446e:	4313      	orrs	r3, r2
 8004470:	b29a      	uxth	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004486:	827b      	strh	r3, [r7, #18]
 8004488:	8a7b      	ldrh	r3, [r7, #18]
 800448a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800448e:	827b      	strh	r3, [r7, #18]
 8004490:	8a7b      	ldrh	r3, [r7, #18]
 8004492:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004496:	827b      	strh	r3, [r7, #18]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	8a7b      	ldrh	r3, [r7, #18]
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]
 80044b2:	e234      	b.n	800491e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f280 80fc 	bge.w	80046ca <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80044e8:	4013      	ands	r3, r2
 80044ea:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004500:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004504:	b292      	uxth	r2, r2
 8004506:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004508:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	4413      	add	r3, r2
 800451c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800451e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004520:	7b1b      	ldrb	r3, [r3, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d125      	bne.n	8004572 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	3306      	adds	r3, #6
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800454e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004552:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8092 	beq.w	8004680 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004562:	6959      	ldr	r1, [r3, #20]
 8004564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004566:	88da      	ldrh	r2, [r3, #6]
 8004568:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800456c:	f005 fddb 	bl	800a126 <USB_ReadPMA>
 8004570:	e086      	b.n	8004680 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004574:	78db      	ldrb	r3, [r3, #3]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d10a      	bne.n	8004590 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800457a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800457e:	461a      	mov	r2, r3
 8004580:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9d9 	bl	800493a <HAL_PCD_EP_DB_Receive>
 8004588:	4603      	mov	r3, r0
 800458a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800458e:	e077      	b.n	8004680 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045aa:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d024      	beq.n	8004638 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4413      	add	r3, r2
 8004602:	3302      	adds	r3, #2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004616:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800461a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02e      	beq.n	8004680 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004628:	6959      	ldr	r1, [r3, #20]
 800462a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800462c:	891a      	ldrh	r2, [r3, #8]
 800462e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004632:	f005 fd78 	bl	800a126 <USB_ReadPMA>
 8004636:	e023      	b.n	8004680 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004640:	b29b      	uxth	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4413      	add	r3, r2
 800464c:	3306      	adds	r3, #6
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004660:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004664:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004672:	6959      	ldr	r1, [r3, #20]
 8004674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004676:	895a      	ldrh	r2, [r3, #10]
 8004678:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800467c:	f005 fd53 	bl	800a126 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004688:	441a      	add	r2, r3
 800468a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800468e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004696:	441a      	add	r2, r3
 8004698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800469c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <PCD_EP_ISR_Handler+0x514>
 80046a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80046a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d206      	bcs.n	80046be <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f007 fb62 	bl	800bd80 <HAL_PCD_DataOutStageCallback>
 80046bc:	e005      	b.n	80046ca <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046c4:	4618      	mov	r0, r3
 80046c6:	f003 fff9 	bl	80086bc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8123 	beq.w	800491e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80046d8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	3310      	adds	r3, #16
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004706:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800471c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472a:	78db      	ldrb	r3, [r3, #3]
 800472c:	2b01      	cmp	r3, #1
 800472e:	f040 80a2 	bne.w	8004876 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004734:	2200      	movs	r2, #0
 8004736:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473a:	7b1b      	ldrb	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8093 	beq.w	8004868 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004742:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d046      	beq.n	80047dc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800474e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d126      	bne.n	80047a4 <PCD_EP_ISR_Handler+0x608>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004764:	b29b      	uxth	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	4413      	add	r3, r2
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	011a      	lsls	r2, r3, #4
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	4413      	add	r3, r2
 8004778:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004788:	b29a      	uxth	r2, r3
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479c:	b29a      	uxth	r2, r3
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	e061      	b.n	8004868 <PCD_EP_ISR_Handler+0x6cc>
 80047a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d15d      	bne.n	8004868 <PCD_EP_ISR_Handler+0x6cc>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	4413      	add	r3, r2
 80047c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	011a      	lsls	r2, r3, #4
 80047ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047cc:	4413      	add	r3, r2
 80047ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	2200      	movs	r2, #0
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	e045      	b.n	8004868 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d126      	bne.n	8004838 <PCD_EP_ISR_Handler+0x69c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fe:	4413      	add	r3, r2
 8004800:	637b      	str	r3, [r7, #52]	@ 0x34
 8004802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	011a      	lsls	r2, r3, #4
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	4413      	add	r3, r2
 800480c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004810:	633b      	str	r3, [r7, #48]	@ 0x30
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481c:	b29a      	uxth	r2, r3
 800481e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800482c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004830:	b29a      	uxth	r2, r3
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	e017      	b.n	8004868 <PCD_EP_ISR_Handler+0x6cc>
 8004838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d113      	bne.n	8004868 <PCD_EP_ISR_Handler+0x6cc>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004848:	b29b      	uxth	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484e:	4413      	add	r3, r2
 8004850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	011a      	lsls	r2, r3, #4
 8004858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800485a:	4413      	add	r3, r2
 800485c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004860:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004864:	2200      	movs	r2, #0
 8004866:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f007 faa1 	bl	800bdb6 <HAL_PCD_DataInStageCallback>
 8004874:	e053      	b.n	800491e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004876:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800487a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d146      	bne.n	8004910 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4413      	add	r3, r2
 8004896:	3302      	adds	r3, #2
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80048ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d907      	bls.n	80048ca <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80048ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c6:	619a      	str	r2, [r3, #24]
 80048c8:	e002      	b.n	80048d0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80048ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048cc:	2200      	movs	r2, #0
 80048ce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f007 fa69 	bl	800bdb6 <HAL_PCD_DataInStageCallback>
 80048e4:	e01b      	b.n	800491e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048ee:	441a      	add	r2, r3
 80048f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80048f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048fc:	441a      	add	r2, r3
 80048fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004900:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004908:	4618      	mov	r0, r3
 800490a:	f003 fed7 	bl	80086bc <USB_EPStartXfer>
 800490e:	e006      	b.n	800491e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004910:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004914:	461a      	mov	r2, r3
 8004916:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f91b 	bl	8004b54 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004926:	b29b      	uxth	r3, r3
 8004928:	b21b      	sxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	f6ff ac3b 	blt.w	80041a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3758      	adds	r7, #88	@ 0x58
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b088      	sub	sp, #32
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	4613      	mov	r3, r2
 8004946:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d07e      	beq.n	8004a50 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4413      	add	r3, r2
 8004966:	3302      	adds	r3, #2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800497a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	8b7b      	ldrh	r3, [r7, #26]
 8004982:	429a      	cmp	r2, r3
 8004984:	d306      	bcc.n	8004994 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	8b7b      	ldrh	r3, [r7, #26]
 800498c:	1ad2      	subs	r2, r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	619a      	str	r2, [r3, #24]
 8004992:	e002      	b.n	800499a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2200      	movs	r2, #0
 8004998:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d123      	bne.n	80049ea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049bc:	833b      	strh	r3, [r7, #24]
 80049be:	8b3b      	ldrh	r3, [r7, #24]
 80049c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049c4:	833b      	strh	r3, [r7, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	8b3b      	ldrh	r3, [r7, #24]
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01f      	beq.n	8004a34 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0e:	82fb      	strh	r3, [r7, #22]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	8afb      	ldrh	r3, [r7, #22]
 8004a20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a34:	8b7b      	ldrh	r3, [r7, #26]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8087 	beq.w	8004b4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6959      	ldr	r1, [r3, #20]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	891a      	ldrh	r2, [r3, #8]
 8004a48:	8b7b      	ldrh	r3, [r7, #26]
 8004a4a:	f005 fb6c 	bl	800a126 <USB_ReadPMA>
 8004a4e:	e07c      	b.n	8004b4a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	3306      	adds	r3, #6
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	8b7b      	ldrh	r3, [r7, #26]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d306      	bcc.n	8004a92 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	8b7b      	ldrh	r3, [r7, #26]
 8004a8a:	1ad2      	subs	r2, r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	619a      	str	r2, [r3, #24]
 8004a90:	e002      	b.n	8004a98 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d123      	bne.n	8004ae8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	83fb      	strh	r3, [r7, #30]
 8004abc:	8bfb      	ldrh	r3, [r7, #30]
 8004abe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ac2:	83fb      	strh	r3, [r7, #30]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	8bfb      	ldrh	r3, [r7, #30]
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11f      	bne.n	8004b32 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0c:	83bb      	strh	r3, [r7, #28]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	8bbb      	ldrh	r3, [r7, #28]
 8004b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b32:	8b7b      	ldrh	r3, [r7, #26]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6959      	ldr	r1, [r3, #20]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	895a      	ldrh	r2, [r3, #10]
 8004b44:	8b7b      	ldrh	r3, [r7, #26]
 8004b46:	f005 faee 	bl	800a126 <USB_ReadPMA>
    }
  }

  return count;
 8004b4a:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b0a4      	sub	sp, #144	@ 0x90
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 81dd 	beq.w	8004f28 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	3302      	adds	r3, #2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b96:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d907      	bls.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	619a      	str	r2, [r3, #24]
 8004bb4:	e002      	b.n	8004bbc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 80b9 	bne.w	8004d38 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d126      	bne.n	8004c1c <HAL_PCD_EP_DB_Transmit+0xc8>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be2:	4413      	add	r3, r2
 8004be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	011a      	lsls	r2, r3, #4
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bee:	4413      	add	r3, r2
 8004bf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	e01a      	b.n	8004c52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d116      	bne.n	8004c52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c38:	4413      	add	r3, r2
 8004c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	011a      	lsls	r2, r3, #4
 8004c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c44:	4413      	add	r3, r2
 8004c46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	2200      	movs	r2, #0
 8004c50:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d126      	bne.n	8004cae <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4413      	add	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	011a      	lsls	r2, r3, #4
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	801a      	strh	r2, [r3, #0]
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e017      	b.n	8004cde <HAL_PCD_EP_DB_Transmit+0x18a>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	785b      	ldrb	r3, [r3, #1]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d113      	bne.n	8004cde <HAL_PCD_EP_DB_Transmit+0x18a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	4413      	add	r3, r2
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	011a      	lsls	r2, r3, #4
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cd6:	623b      	str	r3, [r7, #32]
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f007 f866 	bl	800bdb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 82fc 	beq.w	80052ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d10:	82fb      	strh	r3, [r7, #22]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	8afb      	ldrh	r3, [r7, #22]
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
 8004d36:	e2da      	b.n	80052ee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d021      	beq.n	8004d86 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	f040 82ae 	bne.w	80052ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004da8:	441a      	add	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	6a1a      	ldr	r2, [r3, #32]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d30b      	bcc.n	8004dd2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dca:	1ad2      	subs	r2, r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	621a      	str	r2, [r3, #32]
 8004dd0:	e017      	b.n	8004e02 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d108      	bne.n	8004dec <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004dda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004dea:	e00a      	b.n	8004e02 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d165      	bne.n	8004ed6 <HAL_PCD_EP_DB_Transmit+0x382>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1e:	4413      	add	r3, r2
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	011a      	lsls	r2, r3, #4
 8004e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e46:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e48:	d91d      	bls.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x332>
 8004e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <HAL_PCD_EP_DB_Transmit+0x310>
 8004e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e60:	3b01      	subs	r3, #1
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	029b      	lsls	r3, r3, #10
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	4313      	orrs	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	e044      	b.n	8004f10 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x350>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	e035      	b.n	8004f10 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_PCD_EP_DB_Transmit+0x36a>
 8004eb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eba:	3301      	adds	r3, #1
 8004ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	029b      	lsls	r3, r3, #10
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e01c      	b.n	8004f10 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d118      	bne.n	8004f10 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef2:	4413      	add	r3, r2
 8004ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	011a      	lsls	r2, r3, #4
 8004efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004efe:	4413      	add	r3, r2
 8004f00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6959      	ldr	r1, [r3, #20]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	891a      	ldrh	r2, [r3, #8]
 8004f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f005 f8ba 	bl	800a09a <USB_WritePMA>
 8004f26:	e1e2      	b.n	80052ee <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3306      	adds	r3, #6
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f50:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	699a      	ldr	r2, [r3, #24]
 8004f58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d307      	bcc.n	8004f70 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f68:	1ad2      	subs	r2, r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	619a      	str	r2, [r3, #24]
 8004f6e:	e002      	b.n	8004f76 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2200      	movs	r2, #0
 8004f74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 80c0 	bne.w	8005100 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d126      	bne.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x482>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f9c:	4413      	add	r3, r2
 8004f9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	011a      	lsls	r2, r3, #4
 8004fa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fa8:	4413      	add	r3, r2
 8004faa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e01a      	b.n	800500c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d116      	bne.n	800500c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff2:	4413      	add	r3, r2
 8004ff4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	011a      	lsls	r2, r3, #4
 8004ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ffe:	4413      	add	r3, r2
 8005000:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005004:	663b      	str	r3, [r7, #96]	@ 0x60
 8005006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005008:	2200      	movs	r2, #0
 800500a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	677b      	str	r3, [r7, #116]	@ 0x74
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d12b      	bne.n	8005072 <HAL_PCD_EP_DB_Transmit+0x51e>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005028:	b29b      	uxth	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800502e:	4413      	add	r3, r2
 8005030:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	011a      	lsls	r2, r3, #4
 8005038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800503a:	4413      	add	r3, r2
 800503c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005044:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005050:	b29a      	uxth	r2, r3
 8005052:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005068:	b29a      	uxth	r2, r3
 800506a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	e017      	b.n	80050a2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d113      	bne.n	80050a2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005082:	b29b      	uxth	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005088:	4413      	add	r3, r2
 800508a:	677b      	str	r3, [r7, #116]	@ 0x74
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	011a      	lsls	r2, r3, #4
 8005092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005094:	4413      	add	r3, r2
 8005096:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800509a:	673b      	str	r3, [r7, #112]	@ 0x70
 800509c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800509e:	2200      	movs	r2, #0
 80050a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f006 fe84 	bl	800bdb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f040 811a 	bne.w	80052ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80050ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	8013      	strh	r3, [r2, #0]
 80050fe:	e0f6      	b.n	80052ee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d121      	bne.n	800514e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005124:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800513a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800513e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005154:	2b01      	cmp	r3, #1
 8005156:	f040 80ca 	bne.w	80052ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005162:	441a      	add	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005170:	441a      	add	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6a1a      	ldr	r2, [r3, #32]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	429a      	cmp	r2, r3
 8005180:	d30b      	bcc.n	800519a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005192:	1ad2      	subs	r2, r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	621a      	str	r2, [r3, #32]
 8005198:	e017      	b.n	80051ca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d108      	bne.n	80051b4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80051a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80051b2:	e00a      	b.n	80051ca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2200      	movs	r2, #0
 80051c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d165      	bne.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x750>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051ec:	4413      	add	r3, r2
 80051ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	011a      	lsls	r2, r3, #4
 80051f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051f8:	4413      	add	r3, r2
 80051fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800520a:	b29a      	uxth	r2, r3
 800520c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005214:	2b3e      	cmp	r3, #62	@ 0x3e
 8005216:	d91d      	bls.n	8005254 <HAL_PCD_EP_DB_Transmit+0x700>
 8005218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2b00      	cmp	r3, #0
 800522a:	d102      	bne.n	8005232 <HAL_PCD_EP_DB_Transmit+0x6de>
 800522c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800522e:	3b01      	subs	r3, #1
 8005230:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29a      	uxth	r2, r3
 8005238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800523a:	b29b      	uxth	r3, r3
 800523c:	029b      	lsls	r3, r3, #10
 800523e:	b29b      	uxth	r3, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524c:	b29a      	uxth	r2, r3
 800524e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	e041      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x784>
 8005254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <HAL_PCD_EP_DB_Transmit+0x71e>
 800525c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526a:	b29a      	uxth	r2, r3
 800526c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e032      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x784>
 8005272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	66bb      	str	r3, [r7, #104]	@ 0x68
 800527a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_PCD_EP_DB_Transmit+0x738>
 8005286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005288:	3301      	adds	r3, #1
 800528a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800528c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29a      	uxth	r2, r3
 8005292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005294:	b29b      	uxth	r3, r3
 8005296:	029b      	lsls	r3, r3, #10
 8005298:	b29b      	uxth	r3, r3
 800529a:	4313      	orrs	r3, r2
 800529c:	b29a      	uxth	r2, r3
 800529e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	e019      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x784>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d115      	bne.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x784>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ba:	4413      	add	r3, r2
 80052bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	011a      	lsls	r2, r3, #4
 80052c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c6:	4413      	add	r3, r2
 80052c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6959      	ldr	r1, [r3, #20]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	895a      	ldrh	r2, [r3, #10]
 80052e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f004 fed6 	bl	800a09a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005308:	82bb      	strh	r3, [r7, #20]
 800530a:	8abb      	ldrh	r3, [r7, #20]
 800530c:	f083 0310 	eor.w	r3, r3, #16
 8005310:	82bb      	strh	r3, [r7, #20]
 8005312:	8abb      	ldrh	r3, [r7, #20]
 8005314:	f083 0320 	eor.w	r3, r3, #32
 8005318:	82bb      	strh	r3, [r7, #20]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	441a      	add	r2, r3
 8005328:	8abb      	ldrh	r3, [r7, #20]
 800532a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800532e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800533a:	b29b      	uxth	r3, r3
 800533c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3790      	adds	r7, #144	@ 0x90
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	817b      	strh	r3, [r7, #10]
 8005356:	4613      	mov	r3, r2
 8005358:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005366:	897b      	ldrh	r3, [r7, #10]
 8005368:	f003 0207 	and.w	r2, r3, #7
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	3310      	adds	r3, #16
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e009      	b.n	8005392 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800537e:	897a      	ldrh	r2, [r7, #10]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005392:	893b      	ldrh	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2200      	movs	r2, #0
 800539c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	80da      	strh	r2, [r3, #6]
 80053a6:	e00b      	b.n	80053c0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2201      	movs	r2, #1
 80053ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e272      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8087 	beq.w	80054fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053ec:	4b92      	ldr	r3, [pc, #584]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 030c 	and.w	r3, r3, #12
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d00c      	beq.n	8005412 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 030c 	and.w	r3, r3, #12
 8005400:	2b08      	cmp	r3, #8
 8005402:	d112      	bne.n	800542a <HAL_RCC_OscConfig+0x5e>
 8005404:	4b8c      	ldr	r3, [pc, #560]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005410:	d10b      	bne.n	800542a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005412:	4b89      	ldr	r3, [pc, #548]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d06c      	beq.n	80054f8 <HAL_RCC_OscConfig+0x12c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d168      	bne.n	80054f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e24c      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005432:	d106      	bne.n	8005442 <HAL_RCC_OscConfig+0x76>
 8005434:	4b80      	ldr	r3, [pc, #512]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a7f      	ldr	r2, [pc, #508]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800543a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e02e      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x98>
 800544a:	4b7b      	ldr	r3, [pc, #492]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a7a      	ldr	r2, [pc, #488]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b78      	ldr	r3, [pc, #480]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a77      	ldr	r2, [pc, #476]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800545c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e01d      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800546c:	d10c      	bne.n	8005488 <HAL_RCC_OscConfig+0xbc>
 800546e:	4b72      	ldr	r3, [pc, #456]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a71      	ldr	r2, [pc, #452]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b6f      	ldr	r3, [pc, #444]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6e      	ldr	r2, [pc, #440]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e00b      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005488:	4b6b      	ldr	r3, [pc, #428]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a6a      	ldr	r2, [pc, #424]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b68      	ldr	r3, [pc, #416]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a67      	ldr	r2, [pc, #412]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800549e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fd f868 	bl	800257c <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd f864 	bl	800257c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	@ 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e200      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0xe4>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fd f854 	bl	800257c <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fd f850 	bl	800257c <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	@ 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e1ec      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ea:	4b53      	ldr	r3, [pc, #332]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x10c>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d063      	beq.n	80055ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005506:	4b4c      	ldr	r3, [pc, #304]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005512:	4b49      	ldr	r3, [pc, #292]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b08      	cmp	r3, #8
 800551c:	d11c      	bne.n	8005558 <HAL_RCC_OscConfig+0x18c>
 800551e:	4b46      	ldr	r3, [pc, #280]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	4b43      	ldr	r3, [pc, #268]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_RCC_OscConfig+0x176>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e1c0      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b3d      	ldr	r3, [pc, #244]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4939      	ldr	r1, [pc, #228]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	e03a      	b.n	80055ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d020      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005560:	4b36      	ldr	r3, [pc, #216]	@ (800563c <HAL_RCC_OscConfig+0x270>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005566:	f7fd f809 	bl	800257c <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556e:	f7fd f805 	bl	800257c <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e1a1      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005580:	4b2d      	ldr	r3, [pc, #180]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558c:	4b2a      	ldr	r3, [pc, #168]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4927      	ldr	r1, [pc, #156]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a2:	4b26      	ldr	r3, [pc, #152]	@ (800563c <HAL_RCC_OscConfig+0x270>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fc ffe8 	bl	800257c <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b0:	f7fc ffe4 	bl	800257c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e180      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d03a      	beq.n	8005650 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d019      	beq.n	8005616 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e2:	4b17      	ldr	r3, [pc, #92]	@ (8005640 <HAL_RCC_OscConfig+0x274>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e8:	f7fc ffc8 	bl	800257c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f0:	f7fc ffc4 	bl	800257c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e160      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005602:	4b0d      	ldr	r3, [pc, #52]	@ (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800560e:	2001      	movs	r0, #1
 8005610:	f000 faba 	bl	8005b88 <RCC_Delay>
 8005614:	e01c      	b.n	8005650 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005616:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <HAL_RCC_OscConfig+0x274>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561c:	f7fc ffae 	bl	800257c <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005622:	e00f      	b.n	8005644 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005624:	f7fc ffaa 	bl	800257c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d908      	bls.n	8005644 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e146      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	42420000 	.word	0x42420000
 8005640:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005644:	4b92      	ldr	r3, [pc, #584]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e9      	bne.n	8005624 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80a6 	beq.w	80057aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005662:	4b8b      	ldr	r3, [pc, #556]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10d      	bne.n	800568a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800566e:	4b88      	ldr	r3, [pc, #544]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	4a87      	ldr	r2, [pc, #540]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005678:	61d3      	str	r3, [r2, #28]
 800567a:	4b85      	ldr	r3, [pc, #532]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568a:	4b82      	ldr	r3, [pc, #520]	@ (8005894 <HAL_RCC_OscConfig+0x4c8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d118      	bne.n	80056c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005696:	4b7f      	ldr	r3, [pc, #508]	@ (8005894 <HAL_RCC_OscConfig+0x4c8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a7e      	ldr	r2, [pc, #504]	@ (8005894 <HAL_RCC_OscConfig+0x4c8>)
 800569c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a2:	f7fc ff6b 	bl	800257c <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056aa:	f7fc ff67 	bl	800257c <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b64      	cmp	r3, #100	@ 0x64
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e103      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056bc:	4b75      	ldr	r3, [pc, #468]	@ (8005894 <HAL_RCC_OscConfig+0x4c8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d106      	bne.n	80056de <HAL_RCC_OscConfig+0x312>
 80056d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	6213      	str	r3, [r2, #32]
 80056dc:	e02d      	b.n	800573a <HAL_RCC_OscConfig+0x36e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10c      	bne.n	8005700 <HAL_RCC_OscConfig+0x334>
 80056e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	4a69      	ldr	r2, [pc, #420]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	6213      	str	r3, [r2, #32]
 80056f2:	4b67      	ldr	r3, [pc, #412]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	4a66      	ldr	r2, [pc, #408]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	f023 0304 	bic.w	r3, r3, #4
 80056fc:	6213      	str	r3, [r2, #32]
 80056fe:	e01c      	b.n	800573a <HAL_RCC_OscConfig+0x36e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b05      	cmp	r3, #5
 8005706:	d10c      	bne.n	8005722 <HAL_RCC_OscConfig+0x356>
 8005708:	4b61      	ldr	r3, [pc, #388]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	4a60      	ldr	r2, [pc, #384]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	6213      	str	r3, [r2, #32]
 8005714:	4b5e      	ldr	r3, [pc, #376]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	4a5d      	ldr	r2, [pc, #372]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	6213      	str	r3, [r2, #32]
 8005720:	e00b      	b.n	800573a <HAL_RCC_OscConfig+0x36e>
 8005722:	4b5b      	ldr	r3, [pc, #364]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	4a5a      	ldr	r2, [pc, #360]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	6213      	str	r3, [r2, #32]
 800572e:	4b58      	ldr	r3, [pc, #352]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4a57      	ldr	r2, [pc, #348]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005734:	f023 0304 	bic.w	r3, r3, #4
 8005738:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d015      	beq.n	800576e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005742:	f7fc ff1b 	bl	800257c <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574a:	f7fc ff17 	bl	800257c <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e0b1      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005760:	4b4b      	ldr	r3, [pc, #300]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ee      	beq.n	800574a <HAL_RCC_OscConfig+0x37e>
 800576c:	e014      	b.n	8005798 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576e:	f7fc ff05 	bl	800257c <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fc ff01 	bl	800257c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e09b      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800578c:	4b40      	ldr	r3, [pc, #256]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ee      	bne.n	8005776 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800579e:	4b3c      	ldr	r3, [pc, #240]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8087 	beq.w	80058c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b4:	4b36      	ldr	r3, [pc, #216]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d061      	beq.n	8005884 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d146      	bne.n	8005856 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c8:	4b33      	ldr	r3, [pc, #204]	@ (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fc fed5 	bl	800257c <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fc fed1 	bl	800257c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e06d      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057e8:	4b29      	ldr	r3, [pc, #164]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fc:	d108      	bne.n	8005810 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057fe:	4b24      	ldr	r3, [pc, #144]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	4921      	ldr	r1, [pc, #132]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800580c:	4313      	orrs	r3, r2
 800580e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005810:	4b1f      	ldr	r3, [pc, #124]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a19      	ldr	r1, [r3, #32]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	430b      	orrs	r3, r1
 8005822:	491b      	ldr	r1, [pc, #108]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005824:	4313      	orrs	r3, r2
 8005826:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005828:	4b1b      	ldr	r3, [pc, #108]	@ (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fc fea5 	bl	800257c <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005836:	f7fc fea1 	bl	800257c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e03d      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005848:	4b11      	ldr	r3, [pc, #68]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x46a>
 8005854:	e035      	b.n	80058c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005856:	4b10      	ldr	r3, [pc, #64]	@ (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585c:	f7fc fe8e 	bl	800257c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005864:	f7fc fe8a 	bl	800257c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e026      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x498>
 8005882:	e01e      	b.n	80058c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d107      	bne.n	800589c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e019      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
 8005890:	40021000 	.word	0x40021000
 8005894:	40007000 	.word	0x40007000
 8005898:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <HAL_RCC_OscConfig+0x500>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d106      	bne.n	80058be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d001      	beq.n	80058c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40021000 	.word	0x40021000

080058d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0d0      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d910      	bls.n	8005914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b67      	ldr	r3, [pc, #412]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 0207 	bic.w	r2, r3, #7
 80058fa:	4965      	ldr	r1, [pc, #404]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	4313      	orrs	r3, r2
 8005900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b63      	ldr	r3, [pc, #396]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0b8      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800592c:	4b59      	ldr	r3, [pc, #356]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4a58      	ldr	r2, [pc, #352]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005936:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005944:	4b53      	ldr	r3, [pc, #332]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a52      	ldr	r2, [pc, #328]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 800594a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800594e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005950:	4b50      	ldr	r3, [pc, #320]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	494d      	ldr	r1, [pc, #308]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 800595e:	4313      	orrs	r3, r2
 8005960:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d040      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	4b47      	ldr	r3, [pc, #284]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d115      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e07f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598e:	4b41      	ldr	r3, [pc, #260]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e073      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e06b      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ae:	4b39      	ldr	r3, [pc, #228]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4936      	ldr	r1, [pc, #216]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c0:	f7fc fddc 	bl	800257c <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	e00a      	b.n	80059de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c8:	f7fc fdd8 	bl	800257c <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e053      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059de:	4b2d      	ldr	r3, [pc, #180]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 020c 	and.w	r2, r3, #12
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d1eb      	bne.n	80059c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059f0:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d210      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b24      	ldr	r3, [pc, #144]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 0207 	bic.w	r2, r3, #7
 8005a06:	4922      	ldr	r1, [pc, #136]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e032      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a2c:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4916      	ldr	r1, [pc, #88]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a4a:	4b12      	ldr	r3, [pc, #72]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	490e      	ldr	r1, [pc, #56]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a5e:	f000 f821 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005a62:	4602      	mov	r2, r0
 8005a64:	4b0b      	ldr	r3, [pc, #44]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	490a      	ldr	r1, [pc, #40]	@ (8005a98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a70:	5ccb      	ldrb	r3, [r1, r3]
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	4a09      	ldr	r2, [pc, #36]	@ (8005a9c <HAL_RCC_ClockConfig+0x1cc>)
 8005a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a7a:	4b09      	ldr	r3, [pc, #36]	@ (8005aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fc fd3a 	bl	80024f8 <HAL_InitTick>

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40022000 	.word	0x40022000
 8005a94:	40021000 	.word	0x40021000
 8005a98:	0800fe80 	.word	0x0800fe80
 8005a9c:	20000004 	.word	0x20000004
 8005aa0:	20000008 	.word	0x20000008

08005aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005abe:	4b1e      	ldr	r3, [pc, #120]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d002      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x30>
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d003      	beq.n	8005ada <HAL_RCC_GetSysClockFreq+0x36>
 8005ad2:	e027      	b.n	8005b24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ad4:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ad6:	613b      	str	r3, [r7, #16]
      break;
 8005ad8:	e027      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	0c9b      	lsrs	r3, r3, #18
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	4a17      	ldr	r2, [pc, #92]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ae4:	5cd3      	ldrb	r3, [r2, r3]
 8005ae6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d010      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005af2:	4b11      	ldr	r3, [pc, #68]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x94>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	0c5b      	lsrs	r3, r3, #17
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	4a11      	ldr	r2, [pc, #68]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005afe:	5cd3      	ldrb	r3, [r2, r3]
 8005b00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a0d      	ldr	r2, [pc, #52]	@ (8005b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005b06:	fb03 f202 	mul.w	r2, r3, r2
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e004      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a0c      	ldr	r2, [pc, #48]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
 8005b1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	613b      	str	r3, [r7, #16]
      break;
 8005b22:	e002      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b24:	4b05      	ldr	r3, [pc, #20]	@ (8005b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005b26:	613b      	str	r3, [r7, #16]
      break;
 8005b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b2a:	693b      	ldr	r3, [r7, #16]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	007a1200 	.word	0x007a1200
 8005b40:	0800fe98 	.word	0x0800fe98
 8005b44:	0800fea8 	.word	0x0800fea8
 8005b48:	003d0900 	.word	0x003d0900

08005b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b50:	4b02      	ldr	r3, [pc, #8]	@ (8005b5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b52:	681b      	ldr	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr
 8005b5c:	20000004 	.word	0x20000004

08005b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b64:	f7ff fff2 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	0adb      	lsrs	r3, r3, #11
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4903      	ldr	r1, [pc, #12]	@ (8005b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000
 8005b84:	0800fe90 	.word	0x0800fe90

08005b88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b90:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <RCC_Delay+0x34>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc0 <RCC_Delay+0x38>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0a5b      	lsrs	r3, r3, #9
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ba4:	bf00      	nop
  }
  while (Delay --);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	60fa      	str	r2, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f9      	bne.n	8005ba4 <RCC_Delay+0x1c>
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr
 8005bbc:	20000004 	.word	0x20000004
 8005bc0:	10624dd3 	.word	0x10624dd3

08005bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d07d      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005be0:	2300      	movs	r3, #0
 8005be2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be4:	4b4f      	ldr	r3, [pc, #316]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10d      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bfa:	61d3      	str	r3, [r2, #28]
 8005bfc:	4b49      	ldr	r3, [pc, #292]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0c:	4b46      	ldr	r3, [pc, #280]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d118      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c18:	4b43      	ldr	r3, [pc, #268]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a42      	ldr	r2, [pc, #264]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c24:	f7fc fcaa 	bl	800257c <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2a:	e008      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2c:	f7fc fca6 	bl	800257c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	@ 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e06d      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c4a:	4b36      	ldr	r3, [pc, #216]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02e      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d027      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c68:	4b2e      	ldr	r3, [pc, #184]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c72:	4b2e      	ldr	r3, [pc, #184]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c78:	4b2c      	ldr	r3, [pc, #176]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c7e:	4a29      	ldr	r2, [pc, #164]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d014      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8e:	f7fc fc75 	bl	800257c <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c94:	e00a      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c96:	f7fc fc71 	bl	800257c <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e036      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cac:	4b1d      	ldr	r3, [pc, #116]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0ee      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4917      	ldr	r1, [pc, #92]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d105      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd0:	4b14      	ldr	r3, [pc, #80]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	4a13      	ldr	r2, [pc, #76]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	490b      	ldr	r1, [pc, #44]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d06:	4b07      	ldr	r3, [pc, #28]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	4904      	ldr	r1, [pc, #16]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40007000 	.word	0x40007000
 8005d2c:	42420440 	.word	0x42420440

08005d30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	f200 808a 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d045      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d075      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005d66:	e082      	b.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005d68:	4b46      	ldr	r3, [pc, #280]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005d6e:	4b45      	ldr	r3, [pc, #276]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d07b      	beq.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	0c9b      	lsrs	r3, r3, #18
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	4a41      	ldr	r2, [pc, #260]	@ (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005d84:	5cd3      	ldrb	r3, [r2, r3]
 8005d86:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d92:	4b3c      	ldr	r3, [pc, #240]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	0c5b      	lsrs	r3, r3, #17
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	4a3b      	ldr	r2, [pc, #236]	@ (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005d9e:	5cd3      	ldrb	r3, [r2, r3]
 8005da0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005dac:	4a38      	ldr	r2, [pc, #224]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e004      	b.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4a34      	ldr	r2, [pc, #208]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dd4:	d102      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	61bb      	str	r3, [r7, #24]
      break;
 8005dda:	e04a      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	61bb      	str	r3, [r7, #24]
      break;
 8005dea:	e042      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005dec:	4b25      	ldr	r3, [pc, #148]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dfc:	d108      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005e08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e01f      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e1a:	d109      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005e1c:	4b19      	ldr	r3, [pc, #100]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005e28:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	e00f      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e3a:	d11c      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005e3c:	4b11      	ldr	r3, [pc, #68]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d016      	beq.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005e48:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005e4c:	61bb      	str	r3, [r7, #24]
      break;
 8005e4e:	e012      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005e50:	e011      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005e52:	f7ff fe85 	bl	8005b60 <HAL_RCC_GetPCLK2Freq>
 8005e56:	4602      	mov	r2, r0
 8005e58:	4b0a      	ldr	r3, [pc, #40]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	0b9b      	lsrs	r3, r3, #14
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	3301      	adds	r3, #1
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	61bb      	str	r3, [r7, #24]
      break;
 8005e6c:	e004      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e76:	bf00      	nop
    }
  }
  return (frequency);
 8005e78:	69bb      	ldr	r3, [r7, #24]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
 8005e88:	0800feac 	.word	0x0800feac
 8005e8c:	0800febc 	.word	0x0800febc
 8005e90:	007a1200 	.word	0x007a1200
 8005e94:	003d0900 	.word	0x003d0900
 8005e98:	aaaaaaab 	.word	0xaaaaaaab

08005e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e076      	b.n	8005f9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ebe:	d009      	beq.n	8005ed4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	61da      	str	r2, [r3, #28]
 8005ec6:	e005      	b.n	8005ed4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fc f86c 	bl	8001fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f58:	ea42 0103 	orr.w	r1, r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	0c1a      	lsrs	r2, r3, #16
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f002 0204 	and.w	r2, r2, #4
 8005f7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69da      	ldr	r2, [r3, #28]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d001      	beq.n	8005fc2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e097      	b.n	80060f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_Transmit_DMA+0x2a>
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e08f      	b.n	80060f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_SPI_Transmit_DMA+0x3c>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e088      	b.n	80060f2 <HAL_SPI_Transmit_DMA+0x14e>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2203      	movs	r2, #3
 8005fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800602e:	d10f      	bne.n	8006050 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800603e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800604e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006054:	4a29      	ldr	r2, [pc, #164]	@ (80060fc <HAL_SPI_Transmit_DMA+0x158>)
 8006056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800605c:	4a28      	ldr	r2, [pc, #160]	@ (8006100 <HAL_SPI_Transmit_DMA+0x15c>)
 800605e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006064:	4a27      	ldr	r2, [pc, #156]	@ (8006104 <HAL_SPI_Transmit_DMA+0x160>)
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800606c:	2200      	movs	r2, #0
 800606e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	4619      	mov	r1, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006086:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006088:	f7fd f898 	bl	80031bc <HAL_DMA_Start_IT>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006096:	f043 0210 	orr.w	r2, r3, #16
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e023      	b.n	80060f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b4:	2b40      	cmp	r3, #64	@ 0x40
 80060b6:	d007      	beq.n	80060c8 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060c6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0220 	orr.w	r2, r2, #32
 80060de:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0202 	orr.w	r2, r2, #2
 80060ee:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	0800639f 	.word	0x0800639f
 8006100:	080062f9 	.word	0x080062f9
 8006104:	080063bb 	.word	0x080063bb

08006108 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	099b      	lsrs	r3, r3, #6
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10f      	bne.n	800614c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	099b      	lsrs	r3, r3, #6
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
    return;
 800614a:	e0be      	b.n	80062ca <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <HAL_SPI_IRQHandler+0x66>
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	09db      	lsrs	r3, r3, #7
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
    return;
 800616c:	e0ad      	b.n	80062ca <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_SPI_IRQHandler+0x80>
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	099b      	lsrs	r3, r3, #6
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80a1 	beq.w	80062ca <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 809a 	beq.w	80062ca <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	099b      	lsrs	r3, r3, #6
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d023      	beq.n	80061ea <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d011      	beq.n	80061d2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b2:	f043 0204 	orr.w	r2, r3, #4
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	e00b      	b.n	80061ea <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	693b      	ldr	r3, [r7, #16]
        return;
 80061e8:	e06f      	b.n	80062ca <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d014      	beq.n	8006220 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fa:	f043 0201 	orr.w	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006224:	2b00      	cmp	r3, #0
 8006226:	d04f      	beq.n	80062c8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006236:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <HAL_SPI_IRQHandler+0x14c>
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d034      	beq.n	80062be <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0203 	bic.w	r2, r2, #3
 8006262:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d011      	beq.n	8006290 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006270:	4a17      	ldr	r2, [pc, #92]	@ (80062d0 <HAL_SPI_IRQHandler+0x1c8>)
 8006272:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006278:	4618      	mov	r0, r3
 800627a:	f7fc ffff 	bl	800327c <HAL_DMA_Abort_IT>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006288:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006294:	2b00      	cmp	r3, #0
 8006296:	d016      	beq.n	80062c6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800629c:	4a0c      	ldr	r2, [pc, #48]	@ (80062d0 <HAL_SPI_IRQHandler+0x1c8>)
 800629e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fc ffe9 	bl	800327c <HAL_DMA_Abort_IT>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80062bc:	e003      	b.n	80062c6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f811 	bl	80062e6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062c4:	e000      	b.n	80062c8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80062c6:	bf00      	nop
    return;
 80062c8:	bf00      	nop
  }
}
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	080063fb 	.word	0x080063fb

080062d4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006306:	f7fc f939 	bl	800257c <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b20      	cmp	r3, #32
 8006318:	d03b      	beq.n	8006392 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0220 	bic.w	r2, r2, #32
 8006328:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0202 	bic.w	r2, r2, #2
 8006338:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	2164      	movs	r1, #100	@ 0x64
 800633e:	6978      	ldr	r0, [r7, #20]
 8006340:	f000 f8f8 	bl	8006534 <SPI_EndRxTxTransaction>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2200      	movs	r2, #0
 8006378:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800638a:	6978      	ldr	r0, [r7, #20]
 800638c:	f7ff ffab 	bl	80062e6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006390:	e002      	b.n	8006398 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006392:	6978      	ldr	r0, [r7, #20]
 8006394:	f7fb f970 	bl	8001678 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff ff91 	bl	80062d4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0203 	bic.w	r2, r2, #3
 80063d6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063dc:	f043 0210 	orr.w	r2, r3, #16
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff ff7a 	bl	80062e6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006406:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7ff ff66 	bl	80062e6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006434:	f7fc f8a2 	bl	800257c <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	4413      	add	r3, r2
 8006442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006444:	f7fc f89a 	bl	800257c <HAL_GetTick>
 8006448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800644a:	4b39      	ldr	r3, [pc, #228]	@ (8006530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	015b      	lsls	r3, r3, #5
 8006450:	0d1b      	lsrs	r3, r3, #20
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	fb02 f303 	mul.w	r3, r2, r3
 8006458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800645a:	e054      	b.n	8006506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006462:	d050      	beq.n	8006506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006464:	f7fc f88a 	bl	800257c <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	429a      	cmp	r2, r3
 8006472:	d902      	bls.n	800647a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d13d      	bne.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006492:	d111      	bne.n	80064b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800649c:	d004      	beq.n	80064a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a6:	d107      	bne.n	80064b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c0:	d10f      	bne.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e017      	b.n	8006526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	3b01      	subs	r3, #1
 8006504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4013      	ands	r3, r2
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	429a      	cmp	r2, r3
 8006522:	d19b      	bne.n	800645c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000004 	.word	0x20000004

08006534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af02      	add	r7, sp, #8
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2201      	movs	r2, #1
 8006548:	2102      	movs	r1, #2
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7ff ff6a 	bl	8006424 <SPI_WaitFlagStateUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	f043 0220 	orr.w	r2, r3, #32
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e013      	b.n	800658e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	2180      	movs	r1, #128	@ 0x80
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff ff57 	bl	8006424 <SPI_WaitFlagStateUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e000      	b.n	800658e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e041      	b.n	800662c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d106      	bne.n	80065c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fb fdaf 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f000 fc4f 	bl	8006e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e041      	b.n	80066ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f839 	bl	80066d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f000 fc00 	bl	8006e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e041      	b.n	800677a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f839 	bl	8006782 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f000 fba8 	bl	8006e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d020      	beq.n	80067f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01b      	beq.n	80067f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0202 	mvn.w	r2, #2
 80067c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fa fd62 	bl	80012a8 <HAL_TIM_IC_CaptureCallback>
 80067e4:	e005      	b.n	80067f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fb2b 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fb31 	bl	8006e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d020      	beq.n	8006844 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01b      	beq.n	8006844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0204 	mvn.w	r2, #4
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fa fd3c 	bl	80012a8 <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fb05 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb0b 	bl	8006e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d020      	beq.n	8006890 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01b      	beq.n	8006890 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0208 	mvn.w	r2, #8
 8006860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2204      	movs	r2, #4
 8006866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fa fd16 	bl	80012a8 <HAL_TIM_IC_CaptureCallback>
 800687c:	e005      	b.n	800688a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fadf 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fae5 	bl	8006e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b00      	cmp	r3, #0
 8006898:	d020      	beq.n	80068dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01b      	beq.n	80068dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0210 	mvn.w	r2, #16
 80068ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2208      	movs	r2, #8
 80068b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fa fcf0 	bl	80012a8 <HAL_TIM_IC_CaptureCallback>
 80068c8:	e005      	b.n	80068d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fab9 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fabf 	bl	8006e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0201 	mvn.w	r2, #1
 80068f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fa fd5c 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00c      	beq.n	8006924 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006910:	2b00      	cmp	r3, #0
 8006912:	d007      	beq.n	8006924 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800691c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 f88d 	bl	8007a3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa8f 	bl	8006e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00c      	beq.n	800696c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0220 	mvn.w	r2, #32
 8006964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f860 	bl	8007a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_TIM_IC_ConfigChannel+0x1e>
 800698e:	2302      	movs	r3, #2
 8006990:	e088      	b.n	8006aa4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11b      	bne.n	80069d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80069b0:	f000 fcea 	bl	8007388 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 020c 	bic.w	r2, r2, #12
 80069c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6999      	ldr	r1, [r3, #24]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	619a      	str	r2, [r3, #24]
 80069d6:	e060      	b.n	8006a9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d11c      	bne.n	8006a18 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80069ee:	f000 fd53 	bl	8007498 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006a00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6999      	ldr	r1, [r3, #24]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	021a      	lsls	r2, r3, #8
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	619a      	str	r2, [r3, #24]
 8006a16:	e040      	b.n	8006a9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d11b      	bne.n	8006a56 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006a2e:	f000 fd9e 	bl	800756e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 020c 	bic.w	r2, r2, #12
 8006a40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69d9      	ldr	r1, [r3, #28]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	61da      	str	r2, [r3, #28]
 8006a54:	e021      	b.n	8006a9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b0c      	cmp	r3, #12
 8006a5a:	d11c      	bne.n	8006a96 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006a6c:	f000 fdba 	bl	80075e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69da      	ldr	r2, [r3, #28]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006a7e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69d9      	ldr	r1, [r3, #28]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	021a      	lsls	r2, r3, #8
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	61da      	str	r2, [r3, #28]
 8006a94:	e001      	b.n	8006a9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e0ae      	b.n	8006c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b0c      	cmp	r3, #12
 8006ad6:	f200 809f 	bhi.w	8006c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ada:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006b15 	.word	0x08006b15
 8006ae4:	08006c19 	.word	0x08006c19
 8006ae8:	08006c19 	.word	0x08006c19
 8006aec:	08006c19 	.word	0x08006c19
 8006af0:	08006b55 	.word	0x08006b55
 8006af4:	08006c19 	.word	0x08006c19
 8006af8:	08006c19 	.word	0x08006c19
 8006afc:	08006c19 	.word	0x08006c19
 8006b00:	08006b97 	.word	0x08006b97
 8006b04:	08006c19 	.word	0x08006c19
 8006b08:	08006c19 	.word	0x08006c19
 8006b0c:	08006c19 	.word	0x08006c19
 8006b10:	08006bd7 	.word	0x08006bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fa1a 	bl	8006f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0208 	orr.w	r2, r2, #8
 8006b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0204 	bic.w	r2, r2, #4
 8006b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6999      	ldr	r1, [r3, #24]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	619a      	str	r2, [r3, #24]
      break;
 8006b52:	e064      	b.n	8006c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fa60 	bl	8007020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6999      	ldr	r1, [r3, #24]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	021a      	lsls	r2, r3, #8
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	619a      	str	r2, [r3, #24]
      break;
 8006b94:	e043      	b.n	8006c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 faa9 	bl	80070f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0208 	orr.w	r2, r2, #8
 8006bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0204 	bic.w	r2, r2, #4
 8006bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69d9      	ldr	r1, [r3, #28]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	61da      	str	r2, [r3, #28]
      break;
 8006bd4:	e023      	b.n	8006c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 faf3 	bl	80071c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69d9      	ldr	r1, [r3, #28]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	021a      	lsls	r2, r3, #8
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	61da      	str	r2, [r3, #28]
      break;
 8006c16:	e002      	b.n	8006c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_TIM_ConfigClockSource+0x1c>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e0b4      	b.n	8006db6 <HAL_TIM_ConfigClockSource+0x186>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c84:	d03e      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0xd4>
 8006c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c8a:	f200 8087 	bhi.w	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c92:	f000 8086 	beq.w	8006da2 <HAL_TIM_ConfigClockSource+0x172>
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9a:	d87f      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006c9c:	2b70      	cmp	r3, #112	@ 0x70
 8006c9e:	d01a      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8006ca0:	2b70      	cmp	r3, #112	@ 0x70
 8006ca2:	d87b      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b60      	cmp	r3, #96	@ 0x60
 8006ca6:	d050      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x11a>
 8006ca8:	2b60      	cmp	r3, #96	@ 0x60
 8006caa:	d877      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006cac:	2b50      	cmp	r3, #80	@ 0x50
 8006cae:	d03c      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0xfa>
 8006cb0:	2b50      	cmp	r3, #80	@ 0x50
 8006cb2:	d873      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006cb4:	2b40      	cmp	r3, #64	@ 0x40
 8006cb6:	d058      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0x13a>
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	d86f      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b30      	cmp	r3, #48	@ 0x30
 8006cbe:	d064      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc0:	2b30      	cmp	r3, #48	@ 0x30
 8006cc2:	d86b      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d060      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d867      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d05c      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x15a>
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	d05a      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x15a>
 8006cd4:	e062      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ce6:	f000 fcd3 	bl	8007690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	609a      	str	r2, [r3, #8]
      break;
 8006d02:	e04f      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d14:	f000 fcbc 	bl	8007690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d26:	609a      	str	r2, [r3, #8]
      break;
 8006d28:	e03c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d36:	461a      	mov	r2, r3
 8006d38:	f000 fb80 	bl	800743c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2150      	movs	r1, #80	@ 0x50
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fc8a 	bl	800765c <TIM_ITRx_SetConfig>
      break;
 8006d48:	e02c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d56:	461a      	mov	r2, r3
 8006d58:	f000 fbda 	bl	8007510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2160      	movs	r1, #96	@ 0x60
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fc7a 	bl	800765c <TIM_ITRx_SetConfig>
      break;
 8006d68:	e01c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d76:	461a      	mov	r2, r3
 8006d78:	f000 fb60 	bl	800743c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2140      	movs	r1, #64	@ 0x40
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fc6a 	bl	800765c <TIM_ITRx_SetConfig>
      break;
 8006d88:	e00c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f000 fc61 	bl	800765c <TIM_ITRx_SetConfig>
      break;
 8006d9a:	e003      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e000      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e031      	b.n	8006e3a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fa3b 	bl	8007264 <TIM_SlaveTimer_SetConfig>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d009      	beq.n	8006e08 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e018      	b.n	8006e3a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e16:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e26:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bc80      	pop	{r7}
 8006e64:	4770      	bx	lr

08006e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8006f48 <TIM_Base_SetConfig+0xd0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00b      	beq.n	8006ea8 <TIM_Base_SetConfig+0x30>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e96:	d007      	beq.n	8006ea8 <TIM_Base_SetConfig+0x30>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006f4c <TIM_Base_SetConfig+0xd4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_Base_SetConfig+0x30>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8006f50 <TIM_Base_SetConfig+0xd8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d108      	bne.n	8006eba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a22      	ldr	r2, [pc, #136]	@ (8006f48 <TIM_Base_SetConfig+0xd0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00b      	beq.n	8006eda <TIM_Base_SetConfig+0x62>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec8:	d007      	beq.n	8006eda <TIM_Base_SetConfig+0x62>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f4c <TIM_Base_SetConfig+0xd4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d003      	beq.n	8006eda <TIM_Base_SetConfig+0x62>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8006f50 <TIM_Base_SetConfig+0xd8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a0d      	ldr	r2, [pc, #52]	@ (8006f48 <TIM_Base_SetConfig+0xd0>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d103      	bne.n	8006f20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f023 0201 	bic.w	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	611a      	str	r2, [r3, #16]
  }
}
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800

08006f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f023 0201 	bic.w	r2, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0303 	bic.w	r3, r3, #3
 8006f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f023 0302 	bic.w	r3, r3, #2
 8006f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a1c      	ldr	r2, [pc, #112]	@ (800701c <TIM_OC1_SetConfig+0xc8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d10c      	bne.n	8006fca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f023 0308 	bic.w	r3, r3, #8
 8006fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f023 0304 	bic.w	r3, r3, #4
 8006fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a13      	ldr	r2, [pc, #76]	@ (800701c <TIM_OC1_SetConfig+0xc8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d111      	bne.n	8006ff6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	621a      	str	r2, [r3, #32]
}
 8007010:	bf00      	nop
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00

08007020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f023 0210 	bic.w	r2, r3, #16
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800704e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f023 0320 	bic.w	r3, r3, #32
 800706a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a1d      	ldr	r2, [pc, #116]	@ (80070f0 <TIM_OC2_SetConfig+0xd0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d10d      	bne.n	800709c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800709a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a14      	ldr	r2, [pc, #80]	@ (80070f0 <TIM_OC2_SetConfig+0xd0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d113      	bne.n	80070cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	621a      	str	r2, [r3, #32]
}
 80070e6:	bf00      	nop
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr
 80070f0:	40012c00 	.word	0x40012c00

080070f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0303 	bic.w	r3, r3, #3
 800712a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800713c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a1d      	ldr	r2, [pc, #116]	@ (80071c4 <TIM_OC3_SetConfig+0xd0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d10d      	bne.n	800716e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800716c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a14      	ldr	r2, [pc, #80]	@ (80071c4 <TIM_OC3_SetConfig+0xd0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d113      	bne.n	800719e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800717c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	621a      	str	r2, [r3, #32]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40012c00 	.word	0x40012c00

080071c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	031b      	lsls	r3, r3, #12
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a0f      	ldr	r2, [pc, #60]	@ (8007260 <TIM_OC4_SetConfig+0x98>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d109      	bne.n	800723c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800722e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	019b      	lsls	r3, r3, #6
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr
 8007260:	40012c00 	.word	0x40012c00

08007264 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007280:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f023 0307 	bic.w	r3, r3, #7
 8007292:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b70      	cmp	r3, #112	@ 0x70
 80072ac:	d01a      	beq.n	80072e4 <TIM_SlaveTimer_SetConfig+0x80>
 80072ae:	2b70      	cmp	r3, #112	@ 0x70
 80072b0:	d860      	bhi.n	8007374 <TIM_SlaveTimer_SetConfig+0x110>
 80072b2:	2b60      	cmp	r3, #96	@ 0x60
 80072b4:	d054      	beq.n	8007360 <TIM_SlaveTimer_SetConfig+0xfc>
 80072b6:	2b60      	cmp	r3, #96	@ 0x60
 80072b8:	d85c      	bhi.n	8007374 <TIM_SlaveTimer_SetConfig+0x110>
 80072ba:	2b50      	cmp	r3, #80	@ 0x50
 80072bc:	d046      	beq.n	800734c <TIM_SlaveTimer_SetConfig+0xe8>
 80072be:	2b50      	cmp	r3, #80	@ 0x50
 80072c0:	d858      	bhi.n	8007374 <TIM_SlaveTimer_SetConfig+0x110>
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d019      	beq.n	80072fa <TIM_SlaveTimer_SetConfig+0x96>
 80072c6:	2b40      	cmp	r3, #64	@ 0x40
 80072c8:	d854      	bhi.n	8007374 <TIM_SlaveTimer_SetConfig+0x110>
 80072ca:	2b30      	cmp	r3, #48	@ 0x30
 80072cc:	d055      	beq.n	800737a <TIM_SlaveTimer_SetConfig+0x116>
 80072ce:	2b30      	cmp	r3, #48	@ 0x30
 80072d0:	d850      	bhi.n	8007374 <TIM_SlaveTimer_SetConfig+0x110>
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d051      	beq.n	800737a <TIM_SlaveTimer_SetConfig+0x116>
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d84c      	bhi.n	8007374 <TIM_SlaveTimer_SetConfig+0x110>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d04d      	beq.n	800737a <TIM_SlaveTimer_SetConfig+0x116>
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d04b      	beq.n	800737a <TIM_SlaveTimer_SetConfig+0x116>
 80072e2:	e047      	b.n	8007374 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80072f4:	f000 f9cc 	bl	8007690 <TIM_ETR_SetConfig>
      break;
 80072f8:	e040      	b.n	800737c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b05      	cmp	r3, #5
 8007300:	d101      	bne.n	8007306 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e03b      	b.n	800737e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800732c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	4313      	orrs	r3, r2
 8007338:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	621a      	str	r2, [r3, #32]
      break;
 800734a:	e017      	b.n	800737c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007358:	461a      	mov	r2, r3
 800735a:	f000 f86f 	bl	800743c <TIM_TI1_ConfigInputStage>
      break;
 800735e:	e00d      	b.n	800737c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800736c:	461a      	mov	r2, r3
 800736e:	f000 f8cf 	bl	8007510 <TIM_TI2_ConfigInputStage>
      break;
 8007372:	e003      	b.n	800737c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	75fb      	strb	r3, [r7, #23]
      break;
 8007378:	e000      	b.n	800737c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800737a:	bf00      	nop
  }

  return status;
 800737c:	7dfb      	ldrb	r3, [r7, #23]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f023 0201 	bic.w	r2, r3, #1
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007430 <TIM_TI1_SetConfig+0xa8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00b      	beq.n	80073ce <TIM_TI1_SetConfig+0x46>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073bc:	d007      	beq.n	80073ce <TIM_TI1_SetConfig+0x46>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007434 <TIM_TI1_SetConfig+0xac>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d003      	beq.n	80073ce <TIM_TI1_SetConfig+0x46>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007438 <TIM_TI1_SetConfig+0xb0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d101      	bne.n	80073d2 <TIM_TI1_SetConfig+0x4a>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <TIM_TI1_SetConfig+0x4c>
 80073d2:	2300      	movs	r3, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d008      	beq.n	80073ea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f023 0303 	bic.w	r3, r3, #3
 80073de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e003      	b.n	80073f2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f023 030a 	bic.w	r3, r3, #10
 800740c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f003 030a 	and.w	r3, r3, #10
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr
 8007430:	40012c00 	.word	0x40012c00
 8007434:	40000400 	.word	0x40000400
 8007438:	40000800 	.word	0x40000800

0800743c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	f023 0201 	bic.w	r2, r3, #1
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f023 030a 	bic.w	r3, r3, #10
 8007478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr

08007498 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	f023 0210 	bic.w	r2, r3, #16
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	031b      	lsls	r3, r3, #12
 80074dc:	b29b      	uxth	r3, r3
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr

08007510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	f023 0210 	bic.w	r2, r3, #16
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800753a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	031b      	lsls	r3, r3, #12
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800754c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	621a      	str	r2, [r3, #32]
}
 8007564:	bf00      	nop
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr

0800756e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800756e:	b480      	push	{r7}
 8007570:	b087      	sub	sp, #28
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f023 0303 	bic.w	r3, r3, #3
 800759a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007610:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007622:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	031b      	lsls	r3, r3, #12
 8007628:	b29b      	uxth	r3, r3
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4313      	orrs	r3, r2
 800762e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007636:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	031b      	lsls	r3, r3, #12
 800763c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	621a      	str	r2, [r3, #32]
}
 8007652:	bf00      	nop
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr

0800765c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007672:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	f043 0307 	orr.w	r3, r3, #7
 800767e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	609a      	str	r2, [r3, #8]
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	bc80      	pop	{r7}
 800768e:	4770      	bx	lr

08007690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	021a      	lsls	r2, r3, #8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	609a      	str	r2, [r3, #8]
}
 80076c4:	bf00      	nop
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr

080076ce <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b08a      	sub	sp, #40	@ 0x28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e09a      	b.n	8007818 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f892 	bl	8007820 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7ff fbb2 	bl	8006e78 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	6819      	ldr	r1, [r3, #0]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2203      	movs	r2, #3
 8007722:	f7ff fe31 	bl	8007388 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 020c 	bic.w	r2, r2, #12
 8007734:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6999      	ldr	r1, [r3, #24]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007756:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689a      	ldr	r2, [r3, #8]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007766:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007776:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0207 	bic.w	r2, r2, #7
 8007786:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0204 	orr.w	r2, r2, #4
 8007796:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007798:	2300      	movs	r3, #0
 800779a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800779c:	2300      	movs	r3, #0
 800779e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80077a0:	2370      	movs	r3, #112	@ 0x70
 80077a2:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80077a4:	2300      	movs	r3, #0
 80077a6:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f107 020c 	add.w	r2, r7, #12
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fc2d 	bl	8007020 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80077d4:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80077e4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3728      	adds	r7, #40	@ 0x28
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr
	...

08007834 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <HAL_TIMEx_PWMN_Start+0x24>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	bf14      	ite	ne
 8007850:	2301      	movne	r3, #1
 8007852:	2300      	moveq	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	e022      	b.n	800789e <HAL_TIMEx_PWMN_Start+0x6a>
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b04      	cmp	r3, #4
 800785c:	d109      	bne.n	8007872 <HAL_TIMEx_PWMN_Start+0x3e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	bf14      	ite	ne
 800786a:	2301      	movne	r3, #1
 800786c:	2300      	moveq	r3, #0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	e015      	b.n	800789e <HAL_TIMEx_PWMN_Start+0x6a>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b08      	cmp	r3, #8
 8007876:	d109      	bne.n	800788c <HAL_TIMEx_PWMN_Start+0x58>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e008      	b.n	800789e <HAL_TIMEx_PWMN_Start+0x6a>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	bf14      	ite	ne
 8007898:	2301      	movne	r3, #1
 800789a:	2300      	moveq	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e059      	b.n	800795a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <HAL_TIMEx_PWMN_Start+0x82>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078b4:	e013      	b.n	80078de <HAL_TIMEx_PWMN_Start+0xaa>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d104      	bne.n	80078c6 <HAL_TIMEx_PWMN_Start+0x92>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078c4:	e00b      	b.n	80078de <HAL_TIMEx_PWMN_Start+0xaa>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d104      	bne.n	80078d6 <HAL_TIMEx_PWMN_Start+0xa2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078d4:	e003      	b.n	80078de <HAL_TIMEx_PWMN_Start+0xaa>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2204      	movs	r2, #4
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f8b2 	bl	8007a50 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a18      	ldr	r2, [pc, #96]	@ (8007964 <HAL_TIMEx_PWMN_Start+0x130>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00e      	beq.n	8007924 <HAL_TIMEx_PWMN_Start+0xf0>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800790e:	d009      	beq.n	8007924 <HAL_TIMEx_PWMN_Start+0xf0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a14      	ldr	r2, [pc, #80]	@ (8007968 <HAL_TIMEx_PWMN_Start+0x134>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_TIMEx_PWMN_Start+0xf0>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a13      	ldr	r2, [pc, #76]	@ (800796c <HAL_TIMEx_PWMN_Start+0x138>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d111      	bne.n	8007948 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b06      	cmp	r3, #6
 8007934:	d010      	beq.n	8007958 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0201 	orr.w	r2, r2, #1
 8007944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007946:	e007      	b.n	8007958 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40012c00 	.word	0x40012c00
 8007968:	40000400 	.word	0x40000400
 800796c:	40000800 	.word	0x40000800

08007970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007984:	2302      	movs	r3, #2
 8007986:	e046      	b.n	8007a16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a16      	ldr	r2, [pc, #88]	@ (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00e      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d4:	d009      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a12      	ldr	r2, [pc, #72]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d004      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a10      	ldr	r2, [pc, #64]	@ (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d10c      	bne.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr
 8007a20:	40012c00 	.word	0x40012c00
 8007a24:	40000400 	.word	0x40000400
 8007a28:	40000800 	.word	0x40000800

08007a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr

08007a3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr

08007a50 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	2204      	movs	r2, #4
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	43db      	mvns	r3, r3
 8007a72:	401a      	ands	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a1a      	ldr	r2, [r3, #32]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	fa01 f303 	lsl.w	r3, r1, r3
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	621a      	str	r2, [r3, #32]
}
 8007a8e:	bf00      	nop
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr

08007a98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr

08007ab2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ac2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007ac6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ae6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007aea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	43db      	mvns	r3, r3
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4013      	ands	r3, r2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr

08007b12 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr

08007b2a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	4638      	mov	r0, r7
 8007b34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b09d      	sub	sp, #116	@ 0x74
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	78db      	ldrb	r3, [r3, #3]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d81f      	bhi.n	8007bd6 <USB_ActivateEndpoint+0x72>
 8007b96:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <USB_ActivateEndpoint+0x38>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bad 	.word	0x08007bad
 8007ba0:	08007bc9 	.word	0x08007bc9
 8007ba4:	08007bdf 	.word	0x08007bdf
 8007ba8:	08007bbb 	.word	0x08007bbb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007bac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007bb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007bb8:	e012      	b.n	8007be0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007bba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007bbe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007bc2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007bc6:	e00b      	b.n	8007be0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007bc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007bcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007bd0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007bd4:	e004      	b.n	8007be0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007bdc:	e000      	b.n	8007be0 <USB_ActivateEndpoint+0x7c>
      break;
 8007bde:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	7812      	ldrb	r2, [r2, #0]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	441a      	add	r2, r3
 8007c2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	7b1b      	ldrb	r3, [r3, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 8178 	bne.w	8007f40 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8084 	beq.w	8007d62 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	61bb      	str	r3, [r7, #24]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	461a      	mov	r2, r3
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	011a      	lsls	r2, r3, #4
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	88db      	ldrh	r3, [r3, #6]
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	827b      	strh	r3, [r7, #18]
 8007c9c:	8a7b      	ldrh	r3, [r7, #18]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d01b      	beq.n	8007cde <USB_ActivateEndpoint+0x17a>
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cbc:	823b      	strh	r3, [r7, #16]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	441a      	add	r2, r3
 8007cc8:	8a3b      	ldrh	r3, [r7, #16]
 8007cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	78db      	ldrb	r3, [r3, #3]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d020      	beq.n	8007d28 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cfc:	81bb      	strh	r3, [r7, #12]
 8007cfe:	89bb      	ldrh	r3, [r7, #12]
 8007d00:	f083 0320 	eor.w	r3, r3, #32
 8007d04:	81bb      	strh	r3, [r7, #12]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	441a      	add	r2, r3
 8007d10:	89bb      	ldrh	r3, [r7, #12]
 8007d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	8013      	strh	r3, [r2, #0]
 8007d26:	e2d5      	b.n	80082d4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d3e:	81fb      	strh	r3, [r7, #14]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	89fb      	ldrh	r3, [r7, #14]
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
 8007d60:	e2b8      	b.n	80082d4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	4413      	add	r3, r2
 8007d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	011a      	lsls	r2, r3, #4
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	88db      	ldrh	r3, [r3, #6]
 8007d8a:	085b      	lsrs	r3, r3, #1
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d94:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	4413      	add	r3, r2
 8007da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	011a      	lsls	r2, r3, #4
 8007db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db2:	4413      	add	r3, r2
 8007db4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dd0:	d91d      	bls.n	8007e0e <USB_ActivateEndpoint+0x2aa>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d102      	bne.n	8007dec <USB_ActivateEndpoint+0x288>
 8007de6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007de8:	3b01      	subs	r3, #1
 8007dea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	029b      	lsls	r3, r3, #10
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	e026      	b.n	8007e5c <USB_ActivateEndpoint+0x2f8>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <USB_ActivateEndpoint+0x2c8>
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	801a      	strh	r2, [r3, #0]
 8007e2a:	e017      	b.n	8007e5c <USB_ActivateEndpoint+0x2f8>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <USB_ActivateEndpoint+0x2e2>
 8007e40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e42:	3301      	adds	r3, #1
 8007e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	029b      	lsls	r3, r3, #10
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	4313      	orrs	r3, r2
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007e6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01b      	beq.n	8007eac <USB_ActivateEndpoint+0x348>
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e8a:	843b      	strh	r3, [r7, #32]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	441a      	add	r2, r3
 8007e96:	8c3b      	ldrh	r3, [r7, #32]
 8007e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d124      	bne.n	8007efe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eca:	83bb      	strh	r3, [r7, #28]
 8007ecc:	8bbb      	ldrh	r3, [r7, #28]
 8007ece:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ed2:	83bb      	strh	r3, [r7, #28]
 8007ed4:	8bbb      	ldrh	r3, [r7, #28]
 8007ed6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007eda:	83bb      	strh	r3, [r7, #28]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	8bbb      	ldrh	r3, [r7, #28]
 8007ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	8013      	strh	r3, [r2, #0]
 8007efc:	e1ea      	b.n	80082d4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f14:	83fb      	strh	r3, [r7, #30]
 8007f16:	8bfb      	ldrh	r3, [r7, #30]
 8007f18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f1c:	83fb      	strh	r3, [r7, #30]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	441a      	add	r2, r3
 8007f28:	8bfb      	ldrh	r3, [r7, #30]
 8007f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	8013      	strh	r3, [r2, #0]
 8007f3e:	e1c9      	b.n	80082d4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	78db      	ldrb	r3, [r3, #3]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d11e      	bne.n	8007f86 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f5e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	441a      	add	r2, r3
 8007f6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f78:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	8013      	strh	r3, [r2, #0]
 8007f84:	e01d      	b.n	8007fc2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	441a      	add	r2, r3
 8007faa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fd2:	4413      	add	r3, r2
 8007fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	011a      	lsls	r2, r3, #4
 8007fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	891b      	ldrh	r3, [r3, #8]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008000:	b29b      	uxth	r3, r3
 8008002:	461a      	mov	r2, r3
 8008004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008006:	4413      	add	r3, r2
 8008008:	657b      	str	r3, [r7, #84]	@ 0x54
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	011a      	lsls	r2, r3, #4
 8008010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008012:	4413      	add	r3, r2
 8008014:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008018:	653b      	str	r3, [r7, #80]	@ 0x50
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	895b      	ldrh	r3, [r3, #10]
 800801e:	085b      	lsrs	r3, r3, #1
 8008020:	b29b      	uxth	r3, r3
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008028:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 8093 	bne.w	800815a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008044:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <USB_ActivateEndpoint+0x524>
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008066:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	441a      	add	r2, r3
 8008072:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800807c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008084:	b29b      	uxth	r3, r3
 8008086:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008096:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <USB_ActivateEndpoint+0x574>
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	441a      	add	r2, r3
 80080c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80080c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80080f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80080f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80080f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80080f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80080fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80080fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800810c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811c:	b29b      	uxth	r3, r3
 800811e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008136:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	441a      	add	r2, r3
 8008142:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800814c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008154:	b29b      	uxth	r3, r3
 8008156:	8013      	strh	r3, [r2, #0]
 8008158:	e0bc      	b.n	80082d4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800816a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800816e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01d      	beq.n	80081b2 <USB_ActivateEndpoint+0x64e>
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800819e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80081c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80081c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d01d      	beq.n	800820a <USB_ActivateEndpoint+0x6a6>
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	441a      	add	r2, r3
 80081f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80081f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008202:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008206:	b29b      	uxth	r3, r3
 8008208:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	78db      	ldrb	r3, [r3, #3]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d024      	beq.n	800825c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008228:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800822c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008230:	f083 0320 	eor.w	r3, r3, #32
 8008234:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	441a      	add	r2, r3
 8008242:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800824a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800824e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008256:	b29b      	uxth	r3, r3
 8008258:	8013      	strh	r3, [r2, #0]
 800825a:	e01d      	b.n	8008298 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800826e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008272:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	441a      	add	r2, r3
 8008280:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800828c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008294:	b29b      	uxth	r3, r3
 8008296:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	441a      	add	r2, r3
 80082bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80082c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80082d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3774      	adds	r7, #116	@ 0x74
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b08d      	sub	sp, #52	@ 0x34
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	7b1b      	ldrb	r3, [r3, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 808e 	bne.w	8008414 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	785b      	ldrb	r3, [r3, #1]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d044      	beq.n	800838a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	81bb      	strh	r3, [r7, #12]
 800830e:	89bb      	ldrh	r3, [r7, #12]
 8008310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01b      	beq.n	8008350 <USB_DeactivateEndpoint+0x6c>
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	b29b      	uxth	r3, r3
 8008326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800832a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832e:	817b      	strh	r3, [r7, #10]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	441a      	add	r2, r3
 800833a:	897b      	ldrh	r3, [r7, #10]
 800833c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008348:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800834c:	b29b      	uxth	r3, r3
 800834e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	b29b      	uxth	r3, r3
 800835e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008366:	813b      	strh	r3, [r7, #8]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	441a      	add	r2, r3
 8008372:	893b      	ldrh	r3, [r7, #8]
 8008374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800837c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008384:	b29b      	uxth	r3, r3
 8008386:	8013      	strh	r3, [r2, #0]
 8008388:	e192      	b.n	80086b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	827b      	strh	r3, [r7, #18]
 8008398:	8a7b      	ldrh	r3, [r7, #18]
 800839a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01b      	beq.n	80083da <USB_DeactivateEndpoint+0xf6>
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b8:	823b      	strh	r3, [r7, #16]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	441a      	add	r2, r3
 80083c4:	8a3b      	ldrh	r3, [r7, #16]
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f0:	81fb      	strh	r3, [r7, #14]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	441a      	add	r2, r3
 80083fc:	89fb      	ldrh	r3, [r7, #14]
 80083fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800840a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800840e:	b29b      	uxth	r3, r3
 8008410:	8013      	strh	r3, [r2, #0]
 8008412:	e14d      	b.n	80086b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 80a5 	bne.w	8008568 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	843b      	strh	r3, [r7, #32]
 800842c:	8c3b      	ldrh	r3, [r7, #32]
 800842e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01b      	beq.n	800846e <USB_DeactivateEndpoint+0x18a>
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800844c:	83fb      	strh	r3, [r7, #30]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	441a      	add	r2, r3
 8008458:	8bfb      	ldrh	r3, [r7, #30]
 800845a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800845e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008462:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846a:	b29b      	uxth	r3, r3
 800846c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	83bb      	strh	r3, [r7, #28]
 800847c:	8bbb      	ldrh	r3, [r7, #28]
 800847e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01b      	beq.n	80084be <USB_DeactivateEndpoint+0x1da>
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849c:	837b      	strh	r3, [r7, #26]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	441a      	add	r2, r3
 80084a8:	8b7b      	ldrh	r3, [r7, #26]
 80084aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d4:	833b      	strh	r3, [r7, #24]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	441a      	add	r2, r3
 80084e0:	8b3b      	ldrh	r3, [r7, #24]
 80084e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800850c:	82fb      	strh	r3, [r7, #22]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	8afb      	ldrh	r3, [r7, #22]
 800851a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800852a:	b29b      	uxth	r3, r3
 800852c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	b29b      	uxth	r3, r3
 800853c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008544:	82bb      	strh	r3, [r7, #20]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	441a      	add	r2, r3
 8008550:	8abb      	ldrh	r3, [r7, #20]
 8008552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800855a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800855e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008562:	b29b      	uxth	r3, r3
 8008564:	8013      	strh	r3, [r2, #0]
 8008566:	e0a3      	b.n	80086b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008576:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01b      	beq.n	80085b8 <USB_DeactivateEndpoint+0x2d4>
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008596:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	441a      	add	r2, r3
 80085a2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80085a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80085c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80085c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01b      	beq.n	8008608 <USB_DeactivateEndpoint+0x324>
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	441a      	add	r2, r3
 80085f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80085f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008600:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008604:	b29b      	uxth	r3, r3
 8008606:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800861a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	441a      	add	r2, r3
 800862a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800862c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800863c:	b29b      	uxth	r3, r3
 800863e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	b29b      	uxth	r3, r3
 800864e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008656:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	441a      	add	r2, r3
 8008662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800866c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008674:	b29b      	uxth	r3, r3
 8008676:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800868a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800868e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	441a      	add	r2, r3
 800869a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800869c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3734      	adds	r7, #52	@ 0x34
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bc80      	pop	{r7}
 80086ba:	4770      	bx	lr

080086bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b0c2      	sub	sp, #264	@ 0x108
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ca:	6018      	str	r0, [r3, #0]
 80086cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	f040 86b7 	bne.w	8009456 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80086e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	699a      	ldr	r2, [r3, #24]
 80086f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	429a      	cmp	r2, r3
 8008702:	d908      	bls.n	8008716 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008714:	e007      	b.n	8008726 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	7b1b      	ldrb	r3, [r3, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d13a      	bne.n	80087ac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6959      	ldr	r1, [r3, #20]
 8008742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	88da      	ldrh	r2, [r3, #6]
 800874e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008752:	b29b      	uxth	r3, r3
 8008754:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008758:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800875c:	6800      	ldr	r0, [r0, #0]
 800875e:	f001 fc9c 	bl	800a09a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800877c:	b29b      	uxth	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	4413      	add	r3, r2
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	011a      	lsls	r2, r3, #4
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	4413      	add	r3, r2
 8008798:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	f000 be1f 	b.w	80093ea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80087ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	78db      	ldrb	r3, [r3, #3]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	f040 8462 	bne.w	8009082 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80087be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6a1a      	ldr	r2, [r3, #32]
 80087ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	f240 83df 	bls.w	8008f9a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80087dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008802:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800882c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008834:	b29b      	uxth	r3, r3
 8008836:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6a1a      	ldr	r2, [r3, #32]
 8008844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008848:	1ad2      	subs	r2, r2, r3
 800884a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800884e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800885a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 81c7 	beq.w	8008c0c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800887e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	633b      	str	r3, [r7, #48]	@ 0x30
 800888a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d177      	bne.n	800898a <USB_EPStartXfer+0x2ce>
 800889a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	4413      	add	r3, r2
 80088bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	011a      	lsls	r2, r3, #4
 80088cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ce:	4413      	add	r3, r2
 80088d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80088ec:	d921      	bls.n	8008932 <USB_EPStartXfer+0x276>
 80088ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fc:	f003 031f 	and.w	r3, r3, #31
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <USB_EPStartXfer+0x252>
 8008904:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008908:	3b01      	subs	r3, #1
 800890a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	b29a      	uxth	r2, r3
 8008914:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008918:	b29b      	uxth	r3, r3
 800891a:	029b      	lsls	r3, r3, #10
 800891c:	b29b      	uxth	r3, r3
 800891e:	4313      	orrs	r3, r2
 8008920:	b29b      	uxth	r3, r3
 8008922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800892a:	b29a      	uxth	r2, r3
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	e050      	b.n	80089d4 <USB_EPStartXfer+0x318>
 8008932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10a      	bne.n	8008950 <USB_EPStartXfer+0x294>
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008948:	b29a      	uxth	r2, r3
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	e041      	b.n	80089d4 <USB_EPStartXfer+0x318>
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800895a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <USB_EPStartXfer+0x2b4>
 8008966:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800896a:	3301      	adds	r3, #1
 800896c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29a      	uxth	r2, r3
 8008976:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800897a:	b29b      	uxth	r3, r3
 800897c:	029b      	lsls	r3, r3, #10
 800897e:	b29b      	uxth	r3, r3
 8008980:	4313      	orrs	r3, r2
 8008982:	b29a      	uxth	r2, r3
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	801a      	strh	r2, [r3, #0]
 8008988:	e024      	b.n	80089d4 <USB_EPStartXfer+0x318>
 800898a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d11c      	bne.n	80089d4 <USB_EPStartXfer+0x318>
 800899a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	461a      	mov	r2, r3
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	4413      	add	r3, r2
 80089b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80089b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	011a      	lsls	r2, r3, #4
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	4413      	add	r3, r2
 80089c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80089c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	895b      	ldrh	r3, [r3, #10]
 80089e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6959      	ldr	r1, [r3, #20]
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80089fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80089fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a02:	6800      	ldr	r0, [r0, #0]
 8008a04:	f001 fb49 	bl	800a09a <USB_WritePMA>
            ep->xfer_buff += len;
 8008a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695a      	ldr	r2, [r3, #20]
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a18:	441a      	add	r2, r3
 8008a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6a1a      	ldr	r2, [r3, #32]
 8008a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d90f      	bls.n	8008a62 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6a1a      	ldr	r2, [r3, #32]
 8008a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a52:	1ad2      	subs	r2, r2, r3
 8008a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	621a      	str	r2, [r3, #32]
 8008a60:	e00e      	b.n	8008a80 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d177      	bne.n	8008b80 <USB_EPStartXfer+0x4c4>
 8008a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	61bb      	str	r3, [r7, #24]
 8008a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	011a      	lsls	r2, r3, #4
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	801a      	strh	r2, [r3, #0]
 8008adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ae2:	d921      	bls.n	8008b28 <USB_EPStartXfer+0x46c>
 8008ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae8:	095b      	lsrs	r3, r3, #5
 8008aea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af2:	f003 031f 	and.w	r3, r3, #31
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <USB_EPStartXfer+0x448>
 8008afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008afe:	3b01      	subs	r3, #1
 8008b00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	029b      	lsls	r3, r3, #10
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	4313      	orrs	r3, r2
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	801a      	strh	r2, [r3, #0]
 8008b26:	e056      	b.n	8008bd6 <USB_EPStartXfer+0x51a>
 8008b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10a      	bne.n	8008b46 <USB_EPStartXfer+0x48a>
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	801a      	strh	r2, [r3, #0]
 8008b44:	e047      	b.n	8008bd6 <USB_EPStartXfer+0x51a>
 8008b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b4a:	085b      	lsrs	r3, r3, #1
 8008b4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d004      	beq.n	8008b66 <USB_EPStartXfer+0x4aa>
 8008b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b60:	3301      	adds	r3, #1
 8008b62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	029b      	lsls	r3, r3, #10
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	4313      	orrs	r3, r2
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e02a      	b.n	8008bd6 <USB_EPStartXfer+0x51a>
 8008b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d122      	bne.n	8008bd6 <USB_EPStartXfer+0x51a>
 8008b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	623b      	str	r3, [r7, #32]
 8008b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	623b      	str	r3, [r7, #32]
 8008bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	011a      	lsls	r2, r3, #4
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	891b      	ldrh	r3, [r3, #8]
 8008be2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6959      	ldr	r1, [r3, #20]
 8008bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008bfc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c04:	6800      	ldr	r0, [r0, #0]
 8008c06:	f001 fa48 	bl	800a09a <USB_WritePMA>
 8008c0a:	e3ee      	b.n	80093ea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d177      	bne.n	8008d0c <USB_EPStartXfer+0x650>
 8008c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c3c:	4413      	add	r3, r2
 8008c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	011a      	lsls	r2, r3, #4
 8008c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c50:	4413      	add	r3, r2
 8008c52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c66:	801a      	strh	r2, [r3, #0]
 8008c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c6e:	d921      	bls.n	8008cb4 <USB_EPStartXfer+0x5f8>
 8008c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c7e:	f003 031f 	and.w	r3, r3, #31
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d104      	bne.n	8008c90 <USB_EPStartXfer+0x5d4>
 8008c86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	029b      	lsls	r3, r3, #10
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb0:	801a      	strh	r2, [r3, #0]
 8008cb2:	e056      	b.n	8008d62 <USB_EPStartXfer+0x6a6>
 8008cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <USB_EPStartXfer+0x616>
 8008cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cce:	801a      	strh	r2, [r3, #0]
 8008cd0:	e047      	b.n	8008d62 <USB_EPStartXfer+0x6a6>
 8008cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd6:	085b      	lsrs	r3, r3, #1
 8008cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <USB_EPStartXfer+0x636>
 8008ce8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008cec:	3301      	adds	r3, #1
 8008cee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	029b      	lsls	r3, r3, #10
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d08:	801a      	strh	r2, [r3, #0]
 8008d0a:	e02a      	b.n	8008d62 <USB_EPStartXfer+0x6a6>
 8008d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d122      	bne.n	8008d62 <USB_EPStartXfer+0x6a6>
 8008d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d3c:	4413      	add	r3, r2
 8008d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	011a      	lsls	r2, r3, #4
 8008d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d50:	4413      	add	r3, r2
 8008d52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	891b      	ldrh	r3, [r3, #8]
 8008d6e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6959      	ldr	r1, [r3, #20]
 8008d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d88:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d8c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d90:	6800      	ldr	r0, [r0, #0]
 8008d92:	f001 f982 	bl	800a09a <USB_WritePMA>
            ep->xfer_buff += len;
 8008d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695a      	ldr	r2, [r3, #20]
 8008da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da6:	441a      	add	r2, r3
 8008da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6a1a      	ldr	r2, [r3, #32]
 8008dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d90f      	bls.n	8008df0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6a1a      	ldr	r2, [r3, #32]
 8008ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de0:	1ad2      	subs	r2, r2, r3
 8008de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	621a      	str	r2, [r3, #32]
 8008dee:	e00e      	b.n	8008e0e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d177      	bne.n	8008f1a <USB_EPStartXfer+0x85e>
 8008e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4a:	4413      	add	r3, r2
 8008e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	011a      	lsls	r2, r3, #4
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5e:	4413      	add	r3, r2
 8008e60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e74:	801a      	strh	r2, [r3, #0]
 8008e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e7c:	d921      	bls.n	8008ec2 <USB_EPStartXfer+0x806>
 8008e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e8c:	f003 031f 	and.w	r3, r3, #31
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <USB_EPStartXfer+0x7e2>
 8008e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	029b      	lsls	r3, r3, #10
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ebe:	801a      	strh	r2, [r3, #0]
 8008ec0:	e050      	b.n	8008f64 <USB_EPStartXfer+0x8a8>
 8008ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10a      	bne.n	8008ee0 <USB_EPStartXfer+0x824>
 8008eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	e041      	b.n	8008f64 <USB_EPStartXfer+0x8a8>
 8008ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee4:	085b      	lsrs	r3, r3, #1
 8008ee6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d004      	beq.n	8008f00 <USB_EPStartXfer+0x844>
 8008ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008efa:	3301      	adds	r3, #1
 8008efc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	029b      	lsls	r3, r3, #10
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	4313      	orrs	r3, r2
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f16:	801a      	strh	r2, [r3, #0]
 8008f18:	e024      	b.n	8008f64 <USB_EPStartXfer+0x8a8>
 8008f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d11c      	bne.n	8008f64 <USB_EPStartXfer+0x8a8>
 8008f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f3e:	4413      	add	r3, r2
 8008f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	011a      	lsls	r2, r3, #4
 8008f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f52:	4413      	add	r3, r2
 8008f54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	895b      	ldrh	r3, [r3, #10]
 8008f70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6959      	ldr	r1, [r3, #20]
 8008f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f92:	6800      	ldr	r0, [r0, #0]
 8008f94:	f001 f881 	bl	800a09a <USB_WritePMA>
 8008f98:	e227      	b.n	80093ea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fd0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	441a      	add	r2, r3
 8008fee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009002:	b29b      	uxth	r3, r3
 8009004:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009020:	b29b      	uxth	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009026:	4413      	add	r3, r2
 8009028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800902a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	011a      	lsls	r2, r3, #4
 8009038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800903a:	4413      	add	r3, r2
 800903c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009046:	b29a      	uxth	r2, r3
 8009048:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800904a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800904c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	891b      	ldrh	r3, [r3, #8]
 8009058:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800905c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6959      	ldr	r1, [r3, #20]
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906c:	b29b      	uxth	r3, r3
 800906e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009072:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009076:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	f001 f80d 	bl	800a09a <USB_WritePMA>
 8009080:	e1b3      	b.n	80093ea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6a1a      	ldr	r2, [r3, #32]
 800908e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009092:	1ad2      	subs	r2, r2, r3
 8009094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 80c6 	beq.w	8009254 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80090d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d177      	bne.n	80091d4 <USB_EPStartXfer+0xb18>
 80090e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090fe:	b29b      	uxth	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009104:	4413      	add	r3, r2
 8009106:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800910c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	011a      	lsls	r2, r3, #4
 8009116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009118:	4413      	add	r3, r2
 800911a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800911e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800912a:	b29a      	uxth	r2, r3
 800912c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800912e:	801a      	strh	r2, [r3, #0]
 8009130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009134:	2b3e      	cmp	r3, #62	@ 0x3e
 8009136:	d921      	bls.n	800917c <USB_EPStartXfer+0xac0>
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913c:	095b      	lsrs	r3, r3, #5
 800913e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009146:	f003 031f 	and.w	r3, r3, #31
 800914a:	2b00      	cmp	r3, #0
 800914c:	d104      	bne.n	8009158 <USB_EPStartXfer+0xa9c>
 800914e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009152:	3b01      	subs	r3, #1
 8009154:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	b29a      	uxth	r2, r3
 800915e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009162:	b29b      	uxth	r3, r3
 8009164:	029b      	lsls	r3, r3, #10
 8009166:	b29b      	uxth	r3, r3
 8009168:	4313      	orrs	r3, r2
 800916a:	b29b      	uxth	r3, r3
 800916c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009174:	b29a      	uxth	r2, r3
 8009176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009178:	801a      	strh	r2, [r3, #0]
 800917a:	e050      	b.n	800921e <USB_EPStartXfer+0xb62>
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <USB_EPStartXfer+0xade>
 8009184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	b29b      	uxth	r3, r3
 800918a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800918e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009192:	b29a      	uxth	r2, r3
 8009194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009196:	801a      	strh	r2, [r3, #0]
 8009198:	e041      	b.n	800921e <USB_EPStartXfer+0xb62>
 800919a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80091a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <USB_EPStartXfer+0xafe>
 80091b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80091b4:	3301      	adds	r3, #1
 80091b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80091ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29a      	uxth	r2, r3
 80091c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	029b      	lsls	r3, r3, #10
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	4313      	orrs	r3, r2
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091d0:	801a      	strh	r2, [r3, #0]
 80091d2:	e024      	b.n	800921e <USB_EPStartXfer+0xb62>
 80091d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d11c      	bne.n	800921e <USB_EPStartXfer+0xb62>
 80091e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	461a      	mov	r2, r3
 80091f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091f8:	4413      	add	r3, r2
 80091fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80091fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	011a      	lsls	r2, r3, #4
 800920a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800920c:	4413      	add	r3, r2
 800920e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009218:	b29a      	uxth	r2, r3
 800921a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800921c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800921e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	895b      	ldrh	r3, [r3, #10]
 800922a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800922e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6959      	ldr	r1, [r3, #20]
 800923a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923e:	b29b      	uxth	r3, r3
 8009240:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009244:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009248:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800924c:	6800      	ldr	r0, [r0, #0]
 800924e:	f000 ff24 	bl	800a09a <USB_WritePMA>
 8009252:	e0ca      	b.n	80093ea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d177      	bne.n	8009354 <USB_EPStartXfer+0xc98>
 8009264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800927e:	b29b      	uxth	r3, r3
 8009280:	461a      	mov	r2, r3
 8009282:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009284:	4413      	add	r3, r2
 8009286:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	011a      	lsls	r2, r3, #4
 8009296:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009298:	4413      	add	r3, r2
 800929a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800929e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80092b6:	d921      	bls.n	80092fc <USB_EPStartXfer+0xc40>
 80092b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092bc:	095b      	lsrs	r3, r3, #5
 80092be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80092c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c6:	f003 031f 	and.w	r3, r3, #31
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d104      	bne.n	80092d8 <USB_EPStartXfer+0xc1c>
 80092ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80092d2:	3b01      	subs	r3, #1
 80092d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80092d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b29a      	uxth	r2, r3
 80092de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	029b      	lsls	r3, r3, #10
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	4313      	orrs	r3, r2
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092f8:	801a      	strh	r2, [r3, #0]
 80092fa:	e05c      	b.n	80093b6 <USB_EPStartXfer+0xcfa>
 80092fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <USB_EPStartXfer+0xc5e>
 8009304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	b29b      	uxth	r3, r3
 800930a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800930e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009312:	b29a      	uxth	r2, r3
 8009314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	e04d      	b.n	80093b6 <USB_EPStartXfer+0xcfa>
 800931a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800931e:	085b      	lsrs	r3, r3, #1
 8009320:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d004      	beq.n	800933a <USB_EPStartXfer+0xc7e>
 8009330:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009334:	3301      	adds	r3, #1
 8009336:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800933a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29a      	uxth	r2, r3
 8009340:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009344:	b29b      	uxth	r3, r3
 8009346:	029b      	lsls	r3, r3, #10
 8009348:	b29b      	uxth	r3, r3
 800934a:	4313      	orrs	r3, r2
 800934c:	b29a      	uxth	r2, r3
 800934e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009350:	801a      	strh	r2, [r3, #0]
 8009352:	e030      	b.n	80093b6 <USB_EPStartXfer+0xcfa>
 8009354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d128      	bne.n	80093b6 <USB_EPStartXfer+0xcfa>
 8009364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009380:	b29b      	uxth	r3, r3
 8009382:	461a      	mov	r2, r3
 8009384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009388:	4413      	add	r3, r2
 800938a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800938e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	011a      	lsls	r2, r3, #4
 800939c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093a0:	4413      	add	r3, r2
 80093a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80093a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80093b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	891b      	ldrh	r3, [r3, #8]
 80093c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6959      	ldr	r1, [r3, #20]
 80093d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80093dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80093e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80093e4:	6800      	ldr	r0, [r0, #0]
 80093e6:	f000 fe58 	bl	800a09a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80093ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800940c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009410:	817b      	strh	r3, [r7, #10]
 8009412:	897b      	ldrh	r3, [r7, #10]
 8009414:	f083 0310 	eor.w	r3, r3, #16
 8009418:	817b      	strh	r3, [r7, #10]
 800941a:	897b      	ldrh	r3, [r7, #10]
 800941c:	f083 0320 	eor.w	r3, r3, #32
 8009420:	817b      	strh	r3, [r7, #10]
 8009422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	441a      	add	r2, r3
 800943c:	897b      	ldrh	r3, [r7, #10]
 800943e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800944a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800944e:	b29b      	uxth	r3, r3
 8009450:	8013      	strh	r3, [r2, #0]
 8009452:	f000 bcde 	b.w	8009e12 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	7b1b      	ldrb	r3, [r3, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 80bb 	bne.w	80095de <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800946c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	429a      	cmp	r2, r3
 8009482:	d917      	bls.n	80094b4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	699a      	ldr	r2, [r3, #24]
 80094a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a4:	1ad2      	subs	r2, r2, r3
 80094a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	619a      	str	r2, [r3, #24]
 80094b2:	e00e      	b.n	80094d2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80094b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80094c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2200      	movs	r2, #0
 80094d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80094d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094f6:	4413      	add	r3, r2
 80094f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	011a      	lsls	r2, r3, #4
 800950a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800950e:	4413      	add	r3, r2
 8009510:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009524:	b29a      	uxth	r2, r3
 8009526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009530:	2b3e      	cmp	r3, #62	@ 0x3e
 8009532:	d924      	bls.n	800957e <USB_EPStartXfer+0xec2>
 8009534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009538:	095b      	lsrs	r3, r3, #5
 800953a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800953e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009542:	f003 031f 	and.w	r3, r3, #31
 8009546:	2b00      	cmp	r3, #0
 8009548:	d104      	bne.n	8009554 <USB_EPStartXfer+0xe98>
 800954a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800954e:	3b01      	subs	r3, #1
 8009550:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009554:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29a      	uxth	r2, r3
 800955c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009560:	b29b      	uxth	r3, r3
 8009562:	029b      	lsls	r3, r3, #10
 8009564:	b29b      	uxth	r3, r3
 8009566:	4313      	orrs	r3, r2
 8009568:	b29b      	uxth	r3, r3
 800956a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800956e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009572:	b29a      	uxth	r2, r3
 8009574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	f000 bc10 	b.w	8009d9e <USB_EPStartXfer+0x16e2>
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10c      	bne.n	80095a0 <USB_EPStartXfer+0xee4>
 8009586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29b      	uxth	r3, r3
 800958e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009596:	b29a      	uxth	r2, r3
 8009598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800959c:	801a      	strh	r2, [r3, #0]
 800959e:	e3fe      	b.n	8009d9e <USB_EPStartXfer+0x16e2>
 80095a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a4:	085b      	lsrs	r3, r3, #1
 80095a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <USB_EPStartXfer+0xf04>
 80095b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80095ba:	3301      	adds	r3, #1
 80095bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	029b      	lsls	r3, r3, #10
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	4313      	orrs	r3, r2
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e3df      	b.n	8009d9e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80095de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	78db      	ldrb	r3, [r3, #3]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	f040 8218 	bne.w	8009a20 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80095f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f040 809d 	bne.w	800973c <USB_EPStartXfer+0x1080>
 8009602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009606:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800961e:	b29b      	uxth	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009626:	4413      	add	r3, r2
 8009628:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800962c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	011a      	lsls	r2, r3, #4
 800963a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800963e:	4413      	add	r3, r2
 8009640:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	b29b      	uxth	r3, r3
 8009650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009654:	b29a      	uxth	r2, r3
 8009656:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800965a:	801a      	strh	r2, [r3, #0]
 800965c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b3e      	cmp	r3, #62	@ 0x3e
 800966a:	d92b      	bls.n	80096c4 <USB_EPStartXfer+0x1008>
 800966c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	095b      	lsrs	r3, r3, #5
 800967a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800967e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f003 031f 	and.w	r3, r3, #31
 800968e:	2b00      	cmp	r3, #0
 8009690:	d104      	bne.n	800969c <USB_EPStartXfer+0xfe0>
 8009692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009696:	3b01      	subs	r3, #1
 8009698:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800969c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	029b      	lsls	r3, r3, #10
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	4313      	orrs	r3, r2
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096c0:	801a      	strh	r2, [r3, #0]
 80096c2:	e070      	b.n	80097a6 <USB_EPStartXfer+0x10ea>
 80096c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10c      	bne.n	80096ee <USB_EPStartXfer+0x1032>
 80096d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096ea:	801a      	strh	r2, [r3, #0]
 80096ec:	e05b      	b.n	80097a6 <USB_EPStartXfer+0x10ea>
 80096ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <USB_EPStartXfer+0x1062>
 8009714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009718:	3301      	adds	r3, #1
 800971a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800971e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	b29a      	uxth	r2, r3
 8009726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800972a:	b29b      	uxth	r3, r3
 800972c:	029b      	lsls	r3, r3, #10
 800972e:	b29b      	uxth	r3, r3
 8009730:	4313      	orrs	r3, r2
 8009732:	b29a      	uxth	r2, r3
 8009734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009738:	801a      	strh	r2, [r3, #0]
 800973a:	e034      	b.n	80097a6 <USB_EPStartXfer+0x10ea>
 800973c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	785b      	ldrb	r3, [r3, #1]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d12c      	bne.n	80097a6 <USB_EPStartXfer+0x10ea>
 800974c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800975a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009768:	b29b      	uxth	r3, r3
 800976a:	461a      	mov	r2, r3
 800976c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009770:	4413      	add	r3, r2
 8009772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	011a      	lsls	r2, r3, #4
 8009784:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009788:	4413      	add	r3, r2
 800978a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800978e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	b29a      	uxth	r2, r3
 80097a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80097a4:	801a      	strh	r2, [r3, #0]
 80097a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f040 809d 	bne.w	8009900 <USB_EPStartXfer+0x1244>
 80097c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097ea:	4413      	add	r3, r2
 80097ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	011a      	lsls	r2, r3, #4
 80097fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009802:	4413      	add	r3, r2
 8009804:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800980c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009818:	b29a      	uxth	r2, r3
 800981a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800981e:	801a      	strh	r2, [r3, #0]
 8009820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	2b3e      	cmp	r3, #62	@ 0x3e
 800982e:	d92b      	bls.n	8009888 <USB_EPStartXfer+0x11cc>
 8009830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	095b      	lsrs	r3, r3, #5
 800983e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	f003 031f 	and.w	r3, r3, #31
 8009852:	2b00      	cmp	r3, #0
 8009854:	d104      	bne.n	8009860 <USB_EPStartXfer+0x11a4>
 8009856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800985a:	3b01      	subs	r3, #1
 800985c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29a      	uxth	r2, r3
 8009868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800986c:	b29b      	uxth	r3, r3
 800986e:	029b      	lsls	r3, r3, #10
 8009870:	b29b      	uxth	r3, r3
 8009872:	4313      	orrs	r3, r2
 8009874:	b29b      	uxth	r3, r3
 8009876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800987a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800987e:	b29a      	uxth	r2, r3
 8009880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009884:	801a      	strh	r2, [r3, #0]
 8009886:	e069      	b.n	800995c <USB_EPStartXfer+0x12a0>
 8009888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800988c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10c      	bne.n	80098b2 <USB_EPStartXfer+0x11f6>
 8009898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	e054      	b.n	800995c <USB_EPStartXfer+0x12a0>
 80098b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	085b      	lsrs	r3, r3, #1
 80098c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <USB_EPStartXfer+0x1226>
 80098d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098dc:	3301      	adds	r3, #1
 80098de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	029b      	lsls	r3, r3, #10
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	4313      	orrs	r3, r2
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098fc:	801a      	strh	r2, [r3, #0]
 80098fe:	e02d      	b.n	800995c <USB_EPStartXfer+0x12a0>
 8009900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	785b      	ldrb	r3, [r3, #1]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d125      	bne.n	800995c <USB_EPStartXfer+0x12a0>
 8009910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800991e:	b29b      	uxth	r3, r3
 8009920:	461a      	mov	r2, r3
 8009922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009926:	4413      	add	r3, r2
 8009928:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800992c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	011a      	lsls	r2, r3, #4
 800993a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800993e:	4413      	add	r3, r2
 8009940:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009944:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800994c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	b29a      	uxth	r2, r3
 8009956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800995a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800995c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 8218 	beq.w	8009d9e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800996e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009972:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800998e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <USB_EPStartXfer+0x12ea>
 800999a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800999e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10d      	bne.n	80099c2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80099aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f040 81f5 	bne.w	8009d9e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80099b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 81ee 	bne.w	8009d9e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80099c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80099ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	441a      	add	r2, r3
 8009a06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	8013      	strh	r3, [r2, #0]
 8009a1e:	e1be      	b.n	8009d9e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	78db      	ldrb	r3, [r3, #3]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	f040 81b4 	bne.w	8009d9a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d917      	bls.n	8009a7e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	619a      	str	r2, [r3, #24]
 8009a7c:	e00e      	b.n	8009a9c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f040 8085 	bne.w	8009bb8 <USB_EPStartXfer+0x14fc>
 8009aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	011a      	lsls	r2, r3, #4
 8009ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009aea:	4413      	add	r3, r2
 8009aec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009af4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b06:	801a      	strh	r2, [r3, #0]
 8009b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b0e:	d923      	bls.n	8009b58 <USB_EPStartXfer+0x149c>
 8009b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b14:	095b      	lsrs	r3, r3, #5
 8009b16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1e:	f003 031f 	and.w	r3, r3, #31
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d104      	bne.n	8009b30 <USB_EPStartXfer+0x1474>
 8009b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	029b      	lsls	r3, r3, #10
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	4313      	orrs	r3, r2
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b54:	801a      	strh	r2, [r3, #0]
 8009b56:	e060      	b.n	8009c1a <USB_EPStartXfer+0x155e>
 8009b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10c      	bne.n	8009b7a <USB_EPStartXfer+0x14be>
 8009b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b76:	801a      	strh	r2, [r3, #0]
 8009b78:	e04f      	b.n	8009c1a <USB_EPStartXfer+0x155e>
 8009b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7e:	085b      	lsrs	r3, r3, #1
 8009b80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d004      	beq.n	8009b9a <USB_EPStartXfer+0x14de>
 8009b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b94:	3301      	adds	r3, #1
 8009b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	029b      	lsls	r3, r3, #10
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	4313      	orrs	r3, r2
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009bb4:	801a      	strh	r2, [r3, #0]
 8009bb6:	e030      	b.n	8009c1a <USB_EPStartXfer+0x155e>
 8009bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	785b      	ldrb	r3, [r3, #1]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d128      	bne.n	8009c1a <USB_EPStartXfer+0x155e>
 8009bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009bec:	4413      	add	r3, r2
 8009bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	011a      	lsls	r2, r3, #4
 8009c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c04:	4413      	add	r3, r2
 8009c06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f040 8085 	bne.w	8009d44 <USB_EPStartXfer+0x1688>
 8009c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009c5e:	4413      	add	r3, r2
 8009c60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	011a      	lsls	r2, r3, #4
 8009c72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009c76:	4413      	add	r3, r2
 8009c78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c98:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c9a:	d923      	bls.n	8009ce4 <USB_EPStartXfer+0x1628>
 8009c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca0:	095b      	lsrs	r3, r3, #5
 8009ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009caa:	f003 031f 	and.w	r3, r3, #31
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <USB_EPStartXfer+0x1600>
 8009cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	029b      	lsls	r3, r3, #10
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	e05c      	b.n	8009d9e <USB_EPStartXfer+0x16e2>
 8009ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10c      	bne.n	8009d06 <USB_EPStartXfer+0x164a>
 8009cec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d02:	801a      	strh	r2, [r3, #0]
 8009d04:	e04b      	b.n	8009d9e <USB_EPStartXfer+0x16e2>
 8009d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0a:	085b      	lsrs	r3, r3, #1
 8009d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d004      	beq.n	8009d26 <USB_EPStartXfer+0x166a>
 8009d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d20:	3301      	adds	r3, #1
 8009d22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	029b      	lsls	r3, r3, #10
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d40:	801a      	strh	r2, [r3, #0]
 8009d42:	e02c      	b.n	8009d9e <USB_EPStartXfer+0x16e2>
 8009d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d124      	bne.n	8009d9e <USB_EPStartXfer+0x16e2>
 8009d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	461a      	mov	r2, r3
 8009d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	011a      	lsls	r2, r3, #4
 8009d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009d82:	4413      	add	r3, r2
 8009d84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009d88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d96:	801a      	strh	r2, [r3, #0]
 8009d98:	e001      	b.n	8009d9e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e03a      	b.n	8009e14 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009da2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dc4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009dc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009dcc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009dd0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009dd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009dd8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009ddc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	441a      	add	r2, r3
 8009dfa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b085      	sub	sp, #20
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d020      	beq.n	8009e72 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e46:	81bb      	strh	r3, [r7, #12]
 8009e48:	89bb      	ldrh	r3, [r7, #12]
 8009e4a:	f083 0310 	eor.w	r3, r3, #16
 8009e4e:	81bb      	strh	r3, [r7, #12]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	441a      	add	r2, r3
 8009e5a:	89bb      	ldrh	r3, [r7, #12]
 8009e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	8013      	strh	r3, [r2, #0]
 8009e70:	e01f      	b.n	8009eb2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e88:	81fb      	strh	r3, [r7, #14]
 8009e8a:	89fb      	ldrh	r3, [r7, #14]
 8009e8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009e90:	81fb      	strh	r3, [r7, #14]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	441a      	add	r2, r3
 8009e9c:	89fb      	ldrh	r3, [r7, #14]
 8009e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bc80      	pop	{r7}
 8009ebc:	4770      	bx	lr

08009ebe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	7b1b      	ldrb	r3, [r3, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f040 809d 	bne.w	800a00c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	785b      	ldrb	r3, [r3, #1]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d04c      	beq.n	8009f74 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	823b      	strh	r3, [r7, #16]
 8009ee8:	8a3b      	ldrh	r3, [r7, #16]
 8009eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d01b      	beq.n	8009f2a <USB_EPClearStall+0x6c>
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f08:	81fb      	strh	r3, [r7, #14]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	441a      	add	r2, r3
 8009f14:	89fb      	ldrh	r3, [r7, #14]
 8009f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	78db      	ldrb	r3, [r3, #3]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d06c      	beq.n	800a00c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f48:	81bb      	strh	r3, [r7, #12]
 8009f4a:	89bb      	ldrh	r3, [r7, #12]
 8009f4c:	f083 0320 	eor.w	r3, r3, #32
 8009f50:	81bb      	strh	r3, [r7, #12]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	441a      	add	r2, r3
 8009f5c:	89bb      	ldrh	r3, [r7, #12]
 8009f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	8013      	strh	r3, [r2, #0]
 8009f72:	e04b      	b.n	800a00c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	82fb      	strh	r3, [r7, #22]
 8009f82:	8afb      	ldrh	r3, [r7, #22]
 8009f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d01b      	beq.n	8009fc4 <USB_EPClearStall+0x106>
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa2:	82bb      	strh	r3, [r7, #20]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	441a      	add	r2, r3
 8009fae:	8abb      	ldrh	r3, [r7, #20]
 8009fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fda:	827b      	strh	r3, [r7, #18]
 8009fdc:	8a7b      	ldrh	r3, [r7, #18]
 8009fde:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009fe2:	827b      	strh	r3, [r7, #18]
 8009fe4:	8a7b      	ldrh	r3, [r7, #18]
 8009fe6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009fea:	827b      	strh	r3, [r7, #18]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	441a      	add	r2, r3
 8009ff6:	8a7b      	ldrh	r3, [r7, #18]
 8009ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a008:	b29b      	uxth	r3, r3
 800a00a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	bc80      	pop	{r7}
 800a016:	4770      	bx	lr

0800a018 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d103      	bne.n	800a032 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2280      	movs	r2, #128	@ 0x80
 800a02e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	bc80      	pop	{r7}
 800a03c:	4770      	bx	lr

0800a03e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bc80      	pop	{r7}
 800a050:	4770      	bx	lr

0800a052 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr

0800a066 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a066:	b480      	push	{r7}
 800a068:	b085      	sub	sp, #20
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a074:	b29b      	uxth	r3, r3
 800a076:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a078:	68fb      	ldr	r3, [r7, #12]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	bc80      	pop	{r7}
 800a082:	4770      	bx	lr

0800a084 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	bc80      	pop	{r7}
 800a098:	4770      	bx	lr

0800a09a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b08b      	sub	sp, #44	@ 0x2c
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	80fb      	strh	r3, [r7, #6]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a0b0:	88bb      	ldrh	r3, [r7, #4]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	085b      	lsrs	r3, r3, #1
 800a0b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	005a      	lsls	r2, r3, #1
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a0cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0d2:	e01f      	b.n	800a114 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	b21b      	sxth	r3, r3
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	b21a      	sxth	r2, r3
 800a0e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	b21b      	sxth	r3, r3
 800a0ee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	8a7a      	ldrh	r2, [r7, #18]
 800a0f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	3302      	adds	r3, #2
 800a100:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	3301      	adds	r3, #1
 800a106:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	3301      	adds	r3, #1
 800a10c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a110:	3b01      	subs	r3, #1
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1dc      	bne.n	800a0d4 <USB_WritePMA+0x3a>
  }
}
 800a11a:	bf00      	nop
 800a11c:	bf00      	nop
 800a11e:	372c      	adds	r7, #44	@ 0x2c
 800a120:	46bd      	mov	sp, r7
 800a122:	bc80      	pop	{r7}
 800a124:	4770      	bx	lr

0800a126 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a126:	b480      	push	{r7}
 800a128:	b08b      	sub	sp, #44	@ 0x2c
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	4611      	mov	r1, r2
 800a132:	461a      	mov	r2, r3
 800a134:	460b      	mov	r3, r1
 800a136:	80fb      	strh	r3, [r7, #6]
 800a138:	4613      	mov	r3, r2
 800a13a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a13c:	88bb      	ldrh	r3, [r7, #4]
 800a13e:	085b      	lsrs	r3, r3, #1
 800a140:	b29b      	uxth	r3, r3
 800a142:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a14c:	88fb      	ldrh	r3, [r7, #6]
 800a14e:	005a      	lsls	r2, r3, #1
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a158:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a15e:	e01b      	b.n	800a198 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b29b      	uxth	r3, r3
 800a166:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	3302      	adds	r3, #2
 800a16c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	b2da      	uxtb	r2, r3
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	3301      	adds	r3, #1
 800a17a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	0a1b      	lsrs	r3, r3, #8
 800a180:	b2da      	uxtb	r2, r3
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	3301      	adds	r3, #1
 800a18a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	3302      	adds	r3, #2
 800a190:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	3b01      	subs	r3, #1
 800a196:	627b      	str	r3, [r7, #36]	@ 0x24
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e0      	bne.n	800a160 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a19e:	88bb      	ldrh	r3, [r7, #4]
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d007      	beq.n	800a1ba <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	701a      	strb	r2, [r3, #0]
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	372c      	adds	r7, #44	@ 0x2c
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	7c1b      	ldrb	r3, [r3, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d115      	bne.n	800a208 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	2181      	movs	r1, #129	@ 0x81
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 feca 	bl	800bf7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 fec0 	bl	800bf7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a206:	e012      	b.n	800a22e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a208:	2340      	movs	r3, #64	@ 0x40
 800a20a:	2202      	movs	r2, #2
 800a20c:	2181      	movs	r1, #129	@ 0x81
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 feb5 	bl	800bf7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a21a:	2340      	movs	r3, #64	@ 0x40
 800a21c:	2202      	movs	r2, #2
 800a21e:	2101      	movs	r1, #1
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f001 feac 	bl	800bf7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a22e:	2308      	movs	r3, #8
 800a230:	2203      	movs	r2, #3
 800a232:	2182      	movs	r1, #130	@ 0x82
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f001 fea2 	bl	800bf7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a240:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a244:	f001 ffc2 	bl	800c1cc <USBD_static_malloc>
 800a248:	4602      	mov	r2, r0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a256:	2b00      	cmp	r3, #0
 800a258:	d102      	bne.n	800a260 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a25a:	2301      	movs	r3, #1
 800a25c:	73fb      	strb	r3, [r7, #15]
 800a25e:	e026      	b.n	800a2ae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a266:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2200      	movs	r2, #0
 800a276:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	7c1b      	ldrb	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d109      	bne.n	800a29e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a294:	2101      	movs	r1, #1
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 ff61 	bl	800c15e <USBD_LL_PrepareReceive>
 800a29c:	e007      	b.n	800a2ae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2a4:	2340      	movs	r3, #64	@ 0x40
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 ff58 	bl	800c15e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a2c8:	2181      	movs	r1, #129	@ 0x81
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f001 fe7d 	bl	800bfca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 fe76 	bl	800bfca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a2e6:	2182      	movs	r1, #130	@ 0x82
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 fe6e 	bl	800bfca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00e      	beq.n	800a31c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 ff68 	bl	800c1e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b086      	sub	sp, #24
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a336:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d039      	beq.n	800a3c4 <USBD_CDC_Setup+0x9e>
 800a350:	2b20      	cmp	r3, #32
 800a352:	d17f      	bne.n	800a454 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	88db      	ldrh	r3, [r3, #6]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d029      	beq.n	800a3b0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	b25b      	sxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	da11      	bge.n	800a38a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a372:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	88d2      	ldrh	r2, [r2, #6]
 800a378:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a37a:	6939      	ldr	r1, [r7, #16]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	88db      	ldrh	r3, [r3, #6]
 800a380:	461a      	mov	r2, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f001 fa06 	bl	800b794 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a388:	e06b      	b.n	800a462 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	785a      	ldrb	r2, [r3, #1]
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	88db      	ldrh	r3, [r3, #6]
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3a0:	6939      	ldr	r1, [r7, #16]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	88db      	ldrh	r3, [r3, #6]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 fa21 	bl	800b7f0 <USBD_CtlPrepareRx>
      break;
 800a3ae:	e058      	b.n	800a462 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	7850      	ldrb	r0, [r2, #1]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	6839      	ldr	r1, [r7, #0]
 800a3c0:	4798      	blx	r3
      break;
 800a3c2:	e04e      	b.n	800a462 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	785b      	ldrb	r3, [r3, #1]
 800a3c8:	2b0b      	cmp	r3, #11
 800a3ca:	d02e      	beq.n	800a42a <USBD_CDC_Setup+0x104>
 800a3cc:	2b0b      	cmp	r3, #11
 800a3ce:	dc38      	bgt.n	800a442 <USBD_CDC_Setup+0x11c>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <USBD_CDC_Setup+0xb4>
 800a3d4:	2b0a      	cmp	r3, #10
 800a3d6:	d014      	beq.n	800a402 <USBD_CDC_Setup+0xdc>
 800a3d8:	e033      	b.n	800a442 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d107      	bne.n	800a3f4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a3e4:	f107 030c 	add.w	r3, r7, #12
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f001 f9d1 	bl	800b794 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3f2:	e02e      	b.n	800a452 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f001 f962 	bl	800b6c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	75fb      	strb	r3, [r7, #23]
          break;
 800a400:	e027      	b.n	800a452 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a408:	2b03      	cmp	r3, #3
 800a40a:	d107      	bne.n	800a41c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a40c:	f107 030f 	add.w	r3, r7, #15
 800a410:	2201      	movs	r2, #1
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f001 f9bd 	bl	800b794 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a41a:	e01a      	b.n	800a452 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f001 f94e 	bl	800b6c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a424:	2302      	movs	r3, #2
 800a426:	75fb      	strb	r3, [r7, #23]
          break;
 800a428:	e013      	b.n	800a452 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a430:	2b03      	cmp	r3, #3
 800a432:	d00d      	beq.n	800a450 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 f942 	bl	800b6c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a43c:	2302      	movs	r3, #2
 800a43e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a440:	e006      	b.n	800a450 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 f93b 	bl	800b6c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a44a:	2302      	movs	r3, #2
 800a44c:	75fb      	strb	r3, [r7, #23]
          break;
 800a44e:	e000      	b.n	800a452 <USBD_CDC_Setup+0x12c>
          break;
 800a450:	bf00      	nop
      }
      break;
 800a452:	e006      	b.n	800a462 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f001 f932 	bl	800b6c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a45c:	2302      	movs	r3, #2
 800a45e:	75fb      	strb	r3, [r7, #23]
      break;
 800a460:	bf00      	nop
  }

  return ret;
 800a462:	7dfb      	ldrb	r3, [r7, #23]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a47e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a486:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d03a      	beq.n	800a508 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a492:	78fa      	ldrb	r2, [r7, #3]
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	4613      	mov	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	440b      	add	r3, r1
 800a4a0:	331c      	adds	r3, #28
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d029      	beq.n	800a4fc <USBD_CDC_DataIn+0x90>
 800a4a8:	78fa      	ldrb	r2, [r7, #3]
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	440b      	add	r3, r1
 800a4b6:	331c      	adds	r3, #28
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	78f9      	ldrb	r1, [r7, #3]
 800a4bc:	68b8      	ldr	r0, [r7, #8]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	440b      	add	r3, r1
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	4403      	add	r3, r0
 800a4c8:	3320      	adds	r3, #32
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4d0:	fb01 f303 	mul.w	r3, r1, r3
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d110      	bne.n	800a4fc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a4da:	78fa      	ldrb	r2, [r7, #3]
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4413      	add	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	440b      	add	r3, r1
 800a4e8:	331c      	adds	r3, #28
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a4ee:	78f9      	ldrb	r1, [r7, #3]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 fe0f 	bl	800c118 <USBD_LL_Transmit>
 800a4fa:	e003      	b.n	800a504 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	e000      	b.n	800a50a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a508:	2302      	movs	r3, #2
  }
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	460b      	mov	r3, r1
 800a51c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a524:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	4619      	mov	r1, r3
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 fe3a 	bl	800c1a4 <USBD_LL_GetRxDataSize>
 800a530:	4602      	mov	r2, r0
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00d      	beq.n	800a55e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a556:	4611      	mov	r1, r2
 800a558:	4798      	blx	r3

    return USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	e000      	b.n	800a560 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a55e:	2302      	movs	r3, #2
  }
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a576:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d014      	beq.n	800a5ac <USBD_CDC_EP0_RxReady+0x44>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a588:	2bff      	cmp	r3, #255	@ 0xff
 800a58a:	d00f      	beq.n	800a5ac <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a59a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	22ff      	movs	r2, #255	@ 0xff
 800a5a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2243      	movs	r2, #67	@ 0x43
 800a5c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a5c6:	4b03      	ldr	r3, [pc, #12]	@ (800a5d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bc80      	pop	{r7}
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20000098 	.word	0x20000098

0800a5d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2243      	movs	r2, #67	@ 0x43
 800a5e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a5e6:	4b03      	ldr	r3, [pc, #12]	@ (800a5f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20000054 	.word	0x20000054

0800a5f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2243      	movs	r2, #67	@ 0x43
 800a604:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a606:	4b03      	ldr	r3, [pc, #12]	@ (800a614 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bc80      	pop	{r7}
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	200000dc 	.word	0x200000dc

0800a618 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	220a      	movs	r2, #10
 800a624:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a626:	4b03      	ldr	r3, [pc, #12]	@ (800a634 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc80      	pop	{r7}
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20000010 	.word	0x20000010

0800a638 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a642:	2302      	movs	r3, #2
 800a644:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d005      	beq.n	800a658 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	bc80      	pop	{r7}
 800a662:	4770      	bx	lr

0800a664 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	4613      	mov	r3, r2
 800a670:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a678:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a682:	88fa      	ldrh	r2, [r7, #6]
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	371c      	adds	r7, #28
 800a690:	46bd      	mov	sp, r7
 800a692:	bc80      	pop	{r7}
 800a694:	4770      	bx	lr

0800a696 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bc80      	pop	{r7}
 800a6ba:	4770      	bx	lr

0800a6bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d01c      	beq.n	800a710 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d115      	bne.n	800a70c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	2181      	movs	r1, #129	@ 0x81
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f001 fd08 	bl	800c118 <USBD_LL_Transmit>

      return USBD_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	e002      	b.n	800a712 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e000      	b.n	800a712 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a710:	2302      	movs	r3, #2
  }
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a728:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a730:	2b00      	cmp	r3, #0
 800a732:	d017      	beq.n	800a764 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	7c1b      	ldrb	r3, [r3, #16]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d109      	bne.n	800a750 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a742:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a746:	2101      	movs	r1, #1
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f001 fd08 	bl	800c15e <USBD_LL_PrepareReceive>
 800a74e:	e007      	b.n	800a760 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a756:	2340      	movs	r3, #64	@ 0x40
 800a758:	2101      	movs	r1, #1
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 fcff 	bl	800c15e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	e000      	b.n	800a766 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a764:	2302      	movs	r3, #2
  }
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	4613      	mov	r3, r2
 800a77a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a782:	2302      	movs	r3, #2
 800a784:	e01a      	b.n	800a7bc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	79fa      	ldrb	r2, [r7, #7]
 800a7b2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f001 fb6d 	bl	800be94 <USBD_LL_Init>

  return USBD_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d006      	beq.n	800a7e6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
 800a7e4:	e001      	b.n	800a7ea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bc80      	pop	{r7}
 800a7f4:	4770      	bx	lr

0800a7f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 fba2 	bl	800bf48 <USBD_LL_Start>

  return USBD_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr

0800a822 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	460b      	mov	r3, r1
 800a82c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a82e:	2302      	movs	r3, #2
 800a830:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00c      	beq.n	800a856 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	78fa      	ldrb	r2, [r7, #3]
 800a846:	4611      	mov	r1, r2
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	4798      	blx	r3
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a856:	7bfb      	ldrb	r3, [r7, #15]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	460b      	mov	r3, r1
 800a86a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	78fa      	ldrb	r2, [r7, #3]
 800a876:	4611      	mov	r1, r2
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	4798      	blx	r3

  return USBD_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 fed8 	bl	800b64e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a8ba:	f003 031f 	and.w	r3, r3, #31
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d016      	beq.n	800a8f0 <USBD_LL_SetupStage+0x6a>
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d81c      	bhi.n	800a900 <USBD_LL_SetupStage+0x7a>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d002      	beq.n	800a8d0 <USBD_LL_SetupStage+0x4a>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d008      	beq.n	800a8e0 <USBD_LL_SetupStage+0x5a>
 800a8ce:	e017      	b.n	800a900 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f9cb 	bl	800ac74 <USBD_StdDevReq>
      break;
 800a8de:	e01a      	b.n	800a916 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fa2d 	bl	800ad48 <USBD_StdItfReq>
      break;
 800a8ee:	e012      	b.n	800a916 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fa6d 	bl	800add8 <USBD_StdEPReq>
      break;
 800a8fe:	e00a      	b.n	800a916 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a906:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 fb7a 	bl	800c008 <USBD_LL_StallEP>
      break;
 800a914:	bf00      	nop
  }

  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	460b      	mov	r3, r1
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a92e:	7afb      	ldrb	r3, [r7, #11]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d14b      	bne.n	800a9cc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a93a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a942:	2b03      	cmp	r3, #3
 800a944:	d134      	bne.n	800a9b0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d919      	bls.n	800a986 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	1ad2      	subs	r2, r2, r3
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	68da      	ldr	r2, [r3, #12]
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a968:	429a      	cmp	r2, r3
 800a96a:	d203      	bcs.n	800a974 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a970:	b29b      	uxth	r3, r3
 800a972:	e002      	b.n	800a97a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a978:	b29b      	uxth	r3, r3
 800a97a:	461a      	mov	r2, r3
 800a97c:	6879      	ldr	r1, [r7, #4]
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f000 ff54 	bl	800b82c <USBD_CtlContinueRx>
 800a984:	e038      	b.n	800a9f8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d105      	bne.n	800a9a8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 ff51 	bl	800b850 <USBD_CtlSendStatus>
 800a9ae:	e023      	b.n	800a9f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a9b6:	2b05      	cmp	r3, #5
 800a9b8:	d11e      	bne.n	800a9f8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f001 fb1f 	bl	800c008 <USBD_LL_StallEP>
 800a9ca:	e015      	b.n	800a9f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00d      	beq.n	800a9f4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	d108      	bne.n	800a9f4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	7afa      	ldrb	r2, [r7, #11]
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	4798      	blx	r3
 800a9f2:	e001      	b.n	800a9f8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e000      	b.n	800a9fa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b086      	sub	sp, #24
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	607a      	str	r2, [r7, #4]
 800aa0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d17f      	bne.n	800ab16 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3314      	adds	r3, #20
 800aa1a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d15c      	bne.n	800aae0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	68da      	ldr	r2, [r3, #12]
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d915      	bls.n	800aa5e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	1ad2      	subs	r2, r2, r3
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	461a      	mov	r2, r3
 800aa48:	6879      	ldr	r1, [r7, #4]
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 febe 	bl	800b7cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa50:	2300      	movs	r3, #0
 800aa52:	2200      	movs	r2, #0
 800aa54:	2100      	movs	r1, #0
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f001 fb81 	bl	800c15e <USBD_LL_PrepareReceive>
 800aa5c:	e04e      	b.n	800aafc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	6912      	ldr	r2, [r2, #16]
 800aa66:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa6a:	fb01 f202 	mul.w	r2, r1, r2
 800aa6e:	1a9b      	subs	r3, r3, r2
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d11c      	bne.n	800aaae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d316      	bcc.n	800aaae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d20f      	bcs.n	800aaae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2100      	movs	r1, #0
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 fe9a 	bl	800b7cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f001 fb59 	bl	800c15e <USBD_LL_PrepareReceive>
 800aaac:	e026      	b.n	800aafc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d105      	bne.n	800aad0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800aad0:	2180      	movs	r1, #128	@ 0x80
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f001 fa98 	bl	800c008 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 fecc 	bl	800b876 <USBD_CtlReceiveStatus>
 800aade:	e00d      	b.n	800aafc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	d004      	beq.n	800aaf4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d103      	bne.n	800aafc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aaf4:	2180      	movs	r1, #128	@ 0x80
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f001 fa86 	bl	800c008 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d11d      	bne.n	800ab42 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fe81 	bl	800a80e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ab14:	e015      	b.n	800ab42 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00d      	beq.n	800ab3e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d108      	bne.n	800ab3e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	7afa      	ldrb	r2, [r7, #11]
 800ab36:	4611      	mov	r1, r2
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	4798      	blx	r3
 800ab3c:	e001      	b.n	800ab42 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab3e:	2302      	movs	r3, #2
 800ab40:	e000      	b.n	800ab44 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab54:	2340      	movs	r3, #64	@ 0x40
 800ab56:	2200      	movs	r2, #0
 800ab58:	2100      	movs	r1, #0
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 fa0f 	bl	800bf7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2240      	movs	r2, #64	@ 0x40
 800ab6c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab70:	2340      	movs	r3, #64	@ 0x40
 800ab72:	2200      	movs	r2, #0
 800ab74:	2180      	movs	r1, #128	@ 0x80
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f001 fa01 	bl	800bf7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2240      	movs	r2, #64	@ 0x40
 800ab86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abac:	2b00      	cmp	r3, #0
 800abae:	d009      	beq.n	800abc4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	6852      	ldr	r2, [r2, #4]
 800abbc:	b2d2      	uxtb	r2, r2
 800abbe:	4611      	mov	r1, r2
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3
  }

  return USBD_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	460b      	mov	r3, r1
 800abd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bc80      	pop	{r7}
 800abea:	4770      	bx	lr

0800abec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2204      	movs	r2, #4
 800ac04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bc80      	pop	{r7}
 800ac12:	4770      	bx	lr

0800ac14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d105      	bne.n	800ac32 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bc80      	pop	{r7}
 800ac3c:	4770      	bx	lr

0800ac3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d10b      	bne.n	800ac68 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d005      	beq.n	800ac68 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac8a:	2b40      	cmp	r3, #64	@ 0x40
 800ac8c:	d005      	beq.n	800ac9a <USBD_StdDevReq+0x26>
 800ac8e:	2b40      	cmp	r3, #64	@ 0x40
 800ac90:	d84f      	bhi.n	800ad32 <USBD_StdDevReq+0xbe>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <USBD_StdDevReq+0x36>
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	d14b      	bne.n	800ad32 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	4798      	blx	r3
      break;
 800aca8:	e048      	b.n	800ad3c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	785b      	ldrb	r3, [r3, #1]
 800acae:	2b09      	cmp	r3, #9
 800acb0:	d839      	bhi.n	800ad26 <USBD_StdDevReq+0xb2>
 800acb2:	a201      	add	r2, pc, #4	@ (adr r2, 800acb8 <USBD_StdDevReq+0x44>)
 800acb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb8:	0800ad09 	.word	0x0800ad09
 800acbc:	0800ad1d 	.word	0x0800ad1d
 800acc0:	0800ad27 	.word	0x0800ad27
 800acc4:	0800ad13 	.word	0x0800ad13
 800acc8:	0800ad27 	.word	0x0800ad27
 800accc:	0800aceb 	.word	0x0800aceb
 800acd0:	0800ace1 	.word	0x0800ace1
 800acd4:	0800ad27 	.word	0x0800ad27
 800acd8:	0800acff 	.word	0x0800acff
 800acdc:	0800acf5 	.word	0x0800acf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f9dc 	bl	800b0a0 <USBD_GetDescriptor>
          break;
 800ace8:	e022      	b.n	800ad30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fb3f 	bl	800b370 <USBD_SetAddress>
          break;
 800acf2:	e01d      	b.n	800ad30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fb7e 	bl	800b3f8 <USBD_SetConfig>
          break;
 800acfc:	e018      	b.n	800ad30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fc07 	bl	800b514 <USBD_GetConfig>
          break;
 800ad06:	e013      	b.n	800ad30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fc37 	bl	800b57e <USBD_GetStatus>
          break;
 800ad10:	e00e      	b.n	800ad30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad12:	6839      	ldr	r1, [r7, #0]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fc65 	bl	800b5e4 <USBD_SetFeature>
          break;
 800ad1a:	e009      	b.n	800ad30 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fc74 	bl	800b60c <USBD_ClrFeature>
          break;
 800ad24:	e004      	b.n	800ad30 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fcc9 	bl	800b6c0 <USBD_CtlError>
          break;
 800ad2e:	bf00      	nop
      }
      break;
 800ad30:	e004      	b.n	800ad3c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fcc3 	bl	800b6c0 <USBD_CtlError>
      break;
 800ad3a:	bf00      	nop
  }

  return ret;
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop

0800ad48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad5e:	2b40      	cmp	r3, #64	@ 0x40
 800ad60:	d005      	beq.n	800ad6e <USBD_StdItfReq+0x26>
 800ad62:	2b40      	cmp	r3, #64	@ 0x40
 800ad64:	d82e      	bhi.n	800adc4 <USBD_StdItfReq+0x7c>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <USBD_StdItfReq+0x26>
 800ad6a:	2b20      	cmp	r3, #32
 800ad6c:	d12a      	bne.n	800adc4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad74:	3b01      	subs	r3, #1
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d81d      	bhi.n	800adb6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	889b      	ldrh	r3, [r3, #4]
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d813      	bhi.n	800adac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	4798      	blx	r3
 800ad92:	4603      	mov	r3, r0
 800ad94:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	88db      	ldrh	r3, [r3, #6]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d110      	bne.n	800adc0 <USBD_StdItfReq+0x78>
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10d      	bne.n	800adc0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fd53 	bl	800b850 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800adaa:	e009      	b.n	800adc0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fc86 	bl	800b6c0 <USBD_CtlError>
          break;
 800adb4:	e004      	b.n	800adc0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800adb6:	6839      	ldr	r1, [r7, #0]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fc81 	bl	800b6c0 <USBD_CtlError>
          break;
 800adbe:	e000      	b.n	800adc2 <USBD_StdItfReq+0x7a>
          break;
 800adc0:	bf00      	nop
      }
      break;
 800adc2:	e004      	b.n	800adce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fc7a 	bl	800b6c0 <USBD_CtlError>
      break;
 800adcc:	bf00      	nop
  }

  return USBD_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	889b      	ldrh	r3, [r3, #4]
 800adea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adf4:	2b40      	cmp	r3, #64	@ 0x40
 800adf6:	d007      	beq.n	800ae08 <USBD_StdEPReq+0x30>
 800adf8:	2b40      	cmp	r3, #64	@ 0x40
 800adfa:	f200 8146 	bhi.w	800b08a <USBD_StdEPReq+0x2b2>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <USBD_StdEPReq+0x40>
 800ae02:	2b20      	cmp	r3, #32
 800ae04:	f040 8141 	bne.w	800b08a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	4798      	blx	r3
      break;
 800ae16:	e13d      	b.n	800b094 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae20:	2b20      	cmp	r3, #32
 800ae22:	d10a      	bne.n	800ae3a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	4798      	blx	r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
 800ae38:	e12d      	b.n	800b096 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	785b      	ldrb	r3, [r3, #1]
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d007      	beq.n	800ae52 <USBD_StdEPReq+0x7a>
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	f300 811b 	bgt.w	800b07e <USBD_StdEPReq+0x2a6>
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d072      	beq.n	800af32 <USBD_StdEPReq+0x15a>
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d03a      	beq.n	800aec6 <USBD_StdEPReq+0xee>
 800ae50:	e115      	b.n	800b07e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d002      	beq.n	800ae62 <USBD_StdEPReq+0x8a>
 800ae5c:	2b03      	cmp	r3, #3
 800ae5e:	d015      	beq.n	800ae8c <USBD_StdEPReq+0xb4>
 800ae60:	e02b      	b.n	800aeba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae62:	7bbb      	ldrb	r3, [r7, #14]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00c      	beq.n	800ae82 <USBD_StdEPReq+0xaa>
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	2b80      	cmp	r3, #128	@ 0x80
 800ae6c:	d009      	beq.n	800ae82 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 f8c8 	bl	800c008 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ae78:	2180      	movs	r1, #128	@ 0x80
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f001 f8c4 	bl	800c008 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae80:	e020      	b.n	800aec4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fc1b 	bl	800b6c0 <USBD_CtlError>
              break;
 800ae8a:	e01b      	b.n	800aec4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	885b      	ldrh	r3, [r3, #2]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10e      	bne.n	800aeb2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00b      	beq.n	800aeb2 <USBD_StdEPReq+0xda>
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	2b80      	cmp	r3, #128	@ 0x80
 800ae9e:	d008      	beq.n	800aeb2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	88db      	ldrh	r3, [r3, #6]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d104      	bne.n	800aeb2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 f8ab 	bl	800c008 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fccc 	bl	800b850 <USBD_CtlSendStatus>

              break;
 800aeb8:	e004      	b.n	800aec4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fbff 	bl	800b6c0 <USBD_CtlError>
              break;
 800aec2:	bf00      	nop
          }
          break;
 800aec4:	e0e0      	b.n	800b088 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d002      	beq.n	800aed6 <USBD_StdEPReq+0xfe>
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d015      	beq.n	800af00 <USBD_StdEPReq+0x128>
 800aed4:	e026      	b.n	800af24 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00c      	beq.n	800aef6 <USBD_StdEPReq+0x11e>
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	2b80      	cmp	r3, #128	@ 0x80
 800aee0:	d009      	beq.n	800aef6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 f88e 	bl	800c008 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aeec:	2180      	movs	r1, #128	@ 0x80
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f001 f88a 	bl	800c008 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aef4:	e01c      	b.n	800af30 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fbe1 	bl	800b6c0 <USBD_CtlError>
              break;
 800aefe:	e017      	b.n	800af30 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	885b      	ldrh	r3, [r3, #2]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d112      	bne.n	800af2e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800af12:	7bbb      	ldrb	r3, [r7, #14]
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 f895 	bl	800c046 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fc97 	bl	800b850 <USBD_CtlSendStatus>
              }
              break;
 800af22:	e004      	b.n	800af2e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fbca 	bl	800b6c0 <USBD_CtlError>
              break;
 800af2c:	e000      	b.n	800af30 <USBD_StdEPReq+0x158>
              break;
 800af2e:	bf00      	nop
          }
          break;
 800af30:	e0aa      	b.n	800b088 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d002      	beq.n	800af42 <USBD_StdEPReq+0x16a>
 800af3c:	2b03      	cmp	r3, #3
 800af3e:	d032      	beq.n	800afa6 <USBD_StdEPReq+0x1ce>
 800af40:	e097      	b.n	800b072 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d007      	beq.n	800af58 <USBD_StdEPReq+0x180>
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	2b80      	cmp	r3, #128	@ 0x80
 800af4c:	d004      	beq.n	800af58 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fbb5 	bl	800b6c0 <USBD_CtlError>
                break;
 800af56:	e091      	b.n	800b07c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	da0b      	bge.n	800af78 <USBD_StdEPReq+0x1a0>
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	3310      	adds	r3, #16
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	4413      	add	r3, r2
 800af74:	3304      	adds	r3, #4
 800af76:	e00b      	b.n	800af90 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af7e:	4613      	mov	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	4413      	add	r3, r2
 800af8e:	3304      	adds	r3, #4
 800af90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2202      	movs	r2, #2
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fbf8 	bl	800b794 <USBD_CtlSendData>
              break;
 800afa4:	e06a      	b.n	800b07c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800afa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	da11      	bge.n	800afd2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800afae:	7bbb      	ldrb	r3, [r7, #14]
 800afb0:	f003 020f 	and.w	r2, r3, #15
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	4613      	mov	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	440b      	add	r3, r1
 800afc0:	3318      	adds	r3, #24
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d117      	bne.n	800aff8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fb78 	bl	800b6c0 <USBD_CtlError>
                  break;
 800afd0:	e054      	b.n	800b07c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	f003 020f 	and.w	r2, r3, #15
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	440b      	add	r3, r1
 800afe4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d104      	bne.n	800aff8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fb65 	bl	800b6c0 <USBD_CtlError>
                  break;
 800aff6:	e041      	b.n	800b07c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800affc:	2b00      	cmp	r3, #0
 800affe:	da0b      	bge.n	800b018 <USBD_StdEPReq+0x240>
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b006:	4613      	mov	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	3310      	adds	r3, #16
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	4413      	add	r3, r2
 800b014:	3304      	adds	r3, #4
 800b016:	e00b      	b.n	800b030 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b01e:	4613      	mov	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	4413      	add	r3, r2
 800b02e:	3304      	adds	r3, #4
 800b030:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b032:	7bbb      	ldrb	r3, [r7, #14]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <USBD_StdEPReq+0x266>
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2b80      	cmp	r3, #128	@ 0x80
 800b03c:	d103      	bne.n	800b046 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2200      	movs	r2, #0
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	e00e      	b.n	800b064 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f001 f81a 	bl	800c084 <USBD_LL_IsStallEP>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2201      	movs	r2, #1
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	e002      	b.n	800b064 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2200      	movs	r2, #0
 800b062:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2202      	movs	r2, #2
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fb92 	bl	800b794 <USBD_CtlSendData>
              break;
 800b070:	e004      	b.n	800b07c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fb23 	bl	800b6c0 <USBD_CtlError>
              break;
 800b07a:	bf00      	nop
          }
          break;
 800b07c:	e004      	b.n	800b088 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fb1d 	bl	800b6c0 <USBD_CtlError>
          break;
 800b086:	bf00      	nop
      }
      break;
 800b088:	e004      	b.n	800b094 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fb17 	bl	800b6c0 <USBD_CtlError>
      break;
 800b092:	bf00      	nop
  }

  return ret;
 800b094:	7bfb      	ldrb	r3, [r7, #15]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
	...

0800b0a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	0a1b      	lsrs	r3, r3, #8
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	2b06      	cmp	r3, #6
 800b0c2:	f200 8128 	bhi.w	800b316 <USBD_GetDescriptor+0x276>
 800b0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0cc <USBD_GetDescriptor+0x2c>)
 800b0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0cc:	0800b0e9 	.word	0x0800b0e9
 800b0d0:	0800b101 	.word	0x0800b101
 800b0d4:	0800b141 	.word	0x0800b141
 800b0d8:	0800b317 	.word	0x0800b317
 800b0dc:	0800b317 	.word	0x0800b317
 800b0e0:	0800b2b7 	.word	0x0800b2b7
 800b0e4:	0800b2e3 	.word	0x0800b2e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	7c12      	ldrb	r2, [r2, #16]
 800b0f4:	f107 0108 	add.w	r1, r7, #8
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	60f8      	str	r0, [r7, #12]
      break;
 800b0fe:	e112      	b.n	800b326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7c1b      	ldrb	r3, [r3, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10d      	bne.n	800b124 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b110:	f107 0208 	add.w	r2, r7, #8
 800b114:	4610      	mov	r0, r2
 800b116:	4798      	blx	r3
 800b118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3301      	adds	r3, #1
 800b11e:	2202      	movs	r2, #2
 800b120:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b122:	e100      	b.n	800b326 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12c:	f107 0208 	add.w	r2, r7, #8
 800b130:	4610      	mov	r0, r2
 800b132:	4798      	blx	r3
 800b134:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3301      	adds	r3, #1
 800b13a:	2202      	movs	r2, #2
 800b13c:	701a      	strb	r2, [r3, #0]
      break;
 800b13e:	e0f2      	b.n	800b326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	885b      	ldrh	r3, [r3, #2]
 800b144:	b2db      	uxtb	r3, r3
 800b146:	2b05      	cmp	r3, #5
 800b148:	f200 80ac 	bhi.w	800b2a4 <USBD_GetDescriptor+0x204>
 800b14c:	a201      	add	r2, pc, #4	@ (adr r2, 800b154 <USBD_GetDescriptor+0xb4>)
 800b14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b152:	bf00      	nop
 800b154:	0800b16d 	.word	0x0800b16d
 800b158:	0800b1a1 	.word	0x0800b1a1
 800b15c:	0800b1d5 	.word	0x0800b1d5
 800b160:	0800b209 	.word	0x0800b209
 800b164:	0800b23d 	.word	0x0800b23d
 800b168:	0800b271 	.word	0x0800b271
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00b      	beq.n	800b190 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	7c12      	ldrb	r2, [r2, #16]
 800b184:	f107 0108 	add.w	r1, r7, #8
 800b188:	4610      	mov	r0, r2
 800b18a:	4798      	blx	r3
 800b18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b18e:	e091      	b.n	800b2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fa94 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b198:	7afb      	ldrb	r3, [r7, #11]
 800b19a:	3301      	adds	r3, #1
 800b19c:	72fb      	strb	r3, [r7, #11]
          break;
 800b19e:	e089      	b.n	800b2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00b      	beq.n	800b1c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	7c12      	ldrb	r2, [r2, #16]
 800b1b8:	f107 0108 	add.w	r1, r7, #8
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
 800b1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1c2:	e077      	b.n	800b2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa7a 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b1cc:	7afb      	ldrb	r3, [r7, #11]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1d2:	e06f      	b.n	800b2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00b      	beq.n	800b1f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	7c12      	ldrb	r2, [r2, #16]
 800b1ec:	f107 0108 	add.w	r1, r7, #8
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	4798      	blx	r3
 800b1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1f6:	e05d      	b.n	800b2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fa60 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b200:	7afb      	ldrb	r3, [r7, #11]
 800b202:	3301      	adds	r3, #1
 800b204:	72fb      	strb	r3, [r7, #11]
          break;
 800b206:	e055      	b.n	800b2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00b      	beq.n	800b22c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	7c12      	ldrb	r2, [r2, #16]
 800b220:	f107 0108 	add.w	r1, r7, #8
 800b224:	4610      	mov	r0, r2
 800b226:	4798      	blx	r3
 800b228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b22a:	e043      	b.n	800b2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fa46 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b234:	7afb      	ldrb	r3, [r7, #11]
 800b236:	3301      	adds	r3, #1
 800b238:	72fb      	strb	r3, [r7, #11]
          break;
 800b23a:	e03b      	b.n	800b2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00b      	beq.n	800b260 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	7c12      	ldrb	r2, [r2, #16]
 800b254:	f107 0108 	add.w	r1, r7, #8
 800b258:	4610      	mov	r0, r2
 800b25a:	4798      	blx	r3
 800b25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b25e:	e029      	b.n	800b2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa2c 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b268:	7afb      	ldrb	r3, [r7, #11]
 800b26a:	3301      	adds	r3, #1
 800b26c:	72fb      	strb	r3, [r7, #11]
          break;
 800b26e:	e021      	b.n	800b2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	7c12      	ldrb	r2, [r2, #16]
 800b288:	f107 0108 	add.w	r1, r7, #8
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b292:	e00f      	b.n	800b2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fa12 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b29c:	7afb      	ldrb	r3, [r7, #11]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2a2:	e007      	b.n	800b2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 fa0a 	bl	800b6c0 <USBD_CtlError>
          err++;
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b2b2:	e038      	b.n	800b326 <USBD_GetDescriptor+0x286>
 800b2b4:	e037      	b.n	800b326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	7c1b      	ldrb	r3, [r3, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d109      	bne.n	800b2d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c6:	f107 0208 	add.w	r2, r7, #8
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	4798      	blx	r3
 800b2ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2d0:	e029      	b.n	800b326 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f9f3 	bl	800b6c0 <USBD_CtlError>
        err++;
 800b2da:	7afb      	ldrb	r3, [r7, #11]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	72fb      	strb	r3, [r7, #11]
      break;
 800b2e0:	e021      	b.n	800b326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	7c1b      	ldrb	r3, [r3, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10d      	bne.n	800b306 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f2:	f107 0208 	add.w	r2, r7, #8
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	4798      	blx	r3
 800b2fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	3301      	adds	r3, #1
 800b300:	2207      	movs	r2, #7
 800b302:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b304:	e00f      	b.n	800b326 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f9d9 	bl	800b6c0 <USBD_CtlError>
        err++;
 800b30e:	7afb      	ldrb	r3, [r7, #11]
 800b310:	3301      	adds	r3, #1
 800b312:	72fb      	strb	r3, [r7, #11]
      break;
 800b314:	e007      	b.n	800b326 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f9d1 	bl	800b6c0 <USBD_CtlError>
      err++;
 800b31e:	7afb      	ldrb	r3, [r7, #11]
 800b320:	3301      	adds	r3, #1
 800b322:	72fb      	strb	r3, [r7, #11]
      break;
 800b324:	bf00      	nop
  }

  if (err != 0U)
 800b326:	7afb      	ldrb	r3, [r7, #11]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d11c      	bne.n	800b366 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b32c:	893b      	ldrh	r3, [r7, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d011      	beq.n	800b356 <USBD_GetDescriptor+0x2b6>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88db      	ldrh	r3, [r3, #6]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00d      	beq.n	800b356 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	88da      	ldrh	r2, [r3, #6]
 800b33e:	893b      	ldrh	r3, [r7, #8]
 800b340:	4293      	cmp	r3, r2
 800b342:	bf28      	it	cs
 800b344:	4613      	movcs	r3, r2
 800b346:	b29b      	uxth	r3, r3
 800b348:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b34a:	893b      	ldrh	r3, [r7, #8]
 800b34c:	461a      	mov	r2, r3
 800b34e:	68f9      	ldr	r1, [r7, #12]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fa1f 	bl	800b794 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	88db      	ldrh	r3, [r3, #6]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d104      	bne.n	800b368 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa76 	bl	800b850 <USBD_CtlSendStatus>
 800b364:	e000      	b.n	800b368 <USBD_GetDescriptor+0x2c8>
    return;
 800b366:	bf00      	nop
    }
  }
}
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop

0800b370 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	889b      	ldrh	r3, [r3, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d130      	bne.n	800b3e4 <USBD_SetAddress+0x74>
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	88db      	ldrh	r3, [r3, #6]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d12c      	bne.n	800b3e4 <USBD_SetAddress+0x74>
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	885b      	ldrh	r3, [r3, #2]
 800b38e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b390:	d828      	bhi.n	800b3e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	885b      	ldrh	r3, [r3, #2]
 800b396:	b2db      	uxtb	r3, r3
 800b398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b39c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d104      	bne.n	800b3b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f988 	bl	800b6c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b0:	e01d      	b.n	800b3ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	7bfa      	ldrb	r2, [r7, #15]
 800b3b6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fe8b 	bl	800c0da <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fa43 	bl	800b850 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d004      	beq.n	800b3da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3d8:	e009      	b.n	800b3ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e2:	e004      	b.n	800b3ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f96a 	bl	800b6c0 <USBD_CtlError>
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	885b      	ldrh	r3, [r3, #2]
 800b406:	b2da      	uxtb	r2, r3
 800b408:	4b41      	ldr	r3, [pc, #260]	@ (800b510 <USBD_SetConfig+0x118>)
 800b40a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b40c:	4b40      	ldr	r3, [pc, #256]	@ (800b510 <USBD_SetConfig+0x118>)
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d904      	bls.n	800b41e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f952 	bl	800b6c0 <USBD_CtlError>
 800b41c:	e075      	b.n	800b50a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b424:	2b02      	cmp	r3, #2
 800b426:	d002      	beq.n	800b42e <USBD_SetConfig+0x36>
 800b428:	2b03      	cmp	r3, #3
 800b42a:	d023      	beq.n	800b474 <USBD_SetConfig+0x7c>
 800b42c:	e062      	b.n	800b4f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b42e:	4b38      	ldr	r3, [pc, #224]	@ (800b510 <USBD_SetConfig+0x118>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01a      	beq.n	800b46c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b436:	4b36      	ldr	r3, [pc, #216]	@ (800b510 <USBD_SetConfig+0x118>)
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2203      	movs	r2, #3
 800b444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b448:	4b31      	ldr	r3, [pc, #196]	@ (800b510 <USBD_SetConfig+0x118>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7ff f9e7 	bl	800a822 <USBD_SetClassConfig>
 800b454:	4603      	mov	r3, r0
 800b456:	2b02      	cmp	r3, #2
 800b458:	d104      	bne.n	800b464 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f92f 	bl	800b6c0 <USBD_CtlError>
            return;
 800b462:	e052      	b.n	800b50a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f9f3 	bl	800b850 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b46a:	e04e      	b.n	800b50a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f9ef 	bl	800b850 <USBD_CtlSendStatus>
        break;
 800b472:	e04a      	b.n	800b50a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b474:	4b26      	ldr	r3, [pc, #152]	@ (800b510 <USBD_SetConfig+0x118>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d112      	bne.n	800b4a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2202      	movs	r2, #2
 800b480:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b484:	4b22      	ldr	r3, [pc, #136]	@ (800b510 <USBD_SetConfig+0x118>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b48e:	4b20      	ldr	r3, [pc, #128]	@ (800b510 <USBD_SetConfig+0x118>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff f9e3 	bl	800a860 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f9d8 	bl	800b850 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b4a0:	e033      	b.n	800b50a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b510 <USBD_SetConfig+0x118>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d01d      	beq.n	800b4ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff f9d1 	bl	800a860 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b4be:	4b14      	ldr	r3, [pc, #80]	@ (800b510 <USBD_SetConfig+0x118>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b4c8:	4b11      	ldr	r3, [pc, #68]	@ (800b510 <USBD_SetConfig+0x118>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff f9a7 	bl	800a822 <USBD_SetClassConfig>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d104      	bne.n	800b4e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f8ef 	bl	800b6c0 <USBD_CtlError>
            return;
 800b4e2:	e012      	b.n	800b50a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f9b3 	bl	800b850 <USBD_CtlSendStatus>
        break;
 800b4ea:	e00e      	b.n	800b50a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f9af 	bl	800b850 <USBD_CtlSendStatus>
        break;
 800b4f2:	e00a      	b.n	800b50a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f8e2 	bl	800b6c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b4fc:	4b04      	ldr	r3, [pc, #16]	@ (800b510 <USBD_SetConfig+0x118>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff f9ac 	bl	800a860 <USBD_ClrClassConfig>
        break;
 800b508:	bf00      	nop
    }
  }
}
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	20000588 	.word	0x20000588

0800b514 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	88db      	ldrh	r3, [r3, #6]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d004      	beq.n	800b530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f8c9 	bl	800b6c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b52e:	e022      	b.n	800b576 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b536:	2b02      	cmp	r3, #2
 800b538:	dc02      	bgt.n	800b540 <USBD_GetConfig+0x2c>
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	dc03      	bgt.n	800b546 <USBD_GetConfig+0x32>
 800b53e:	e015      	b.n	800b56c <USBD_GetConfig+0x58>
 800b540:	2b03      	cmp	r3, #3
 800b542:	d00b      	beq.n	800b55c <USBD_GetConfig+0x48>
 800b544:	e012      	b.n	800b56c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3308      	adds	r3, #8
 800b550:	2201      	movs	r2, #1
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f91d 	bl	800b794 <USBD_CtlSendData>
        break;
 800b55a:	e00c      	b.n	800b576 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3304      	adds	r3, #4
 800b560:	2201      	movs	r2, #1
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f915 	bl	800b794 <USBD_CtlSendData>
        break;
 800b56a:	e004      	b.n	800b576 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f8a6 	bl	800b6c0 <USBD_CtlError>
        break;
 800b574:	bf00      	nop
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b58e:	3b01      	subs	r3, #1
 800b590:	2b02      	cmp	r3, #2
 800b592:	d81e      	bhi.n	800b5d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	88db      	ldrh	r3, [r3, #6]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d004      	beq.n	800b5a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f88e 	bl	800b6c0 <USBD_CtlError>
        break;
 800b5a4:	e01a      	b.n	800b5dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	f043 0202 	orr.w	r2, r3, #2
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	330c      	adds	r3, #12
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f8e2 	bl	800b794 <USBD_CtlSendData>
      break;
 800b5d0:	e004      	b.n	800b5dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f873 	bl	800b6c0 <USBD_CtlError>
      break;
 800b5da:	bf00      	nop
  }
}
 800b5dc:	bf00      	nop
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	885b      	ldrh	r3, [r3, #2]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d106      	bne.n	800b604 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f926 	bl	800b850 <USBD_CtlSendStatus>
  }
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b61c:	3b01      	subs	r3, #1
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d80b      	bhi.n	800b63a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	885b      	ldrh	r3, [r3, #2]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d10c      	bne.n	800b644 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f90c 	bl	800b850 <USBD_CtlSendStatus>
      }
      break;
 800b638:	e004      	b.n	800b644 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f83f 	bl	800b6c0 <USBD_CtlError>
      break;
 800b642:	e000      	b.n	800b646 <USBD_ClrFeature+0x3a>
      break;
 800b644:	bf00      	nop
  }
}
 800b646:	bf00      	nop
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	781a      	ldrb	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	785a      	ldrb	r2, [r3, #1]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	3302      	adds	r3, #2
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	3303      	adds	r3, #3
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	021b      	lsls	r3, r3, #8
 800b678:	b29b      	uxth	r3, r3
 800b67a:	4413      	add	r3, r2
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	3304      	adds	r3, #4
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	461a      	mov	r2, r3
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	3305      	adds	r3, #5
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	021b      	lsls	r3, r3, #8
 800b692:	b29b      	uxth	r3, r3
 800b694:	4413      	add	r3, r2
 800b696:	b29a      	uxth	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	3306      	adds	r3, #6
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	3307      	adds	r3, #7
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	021b      	lsls	r3, r3, #8
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	4413      	add	r3, r2
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	80da      	strh	r2, [r3, #6]

}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bc80      	pop	{r7}
 800b6be:	4770      	bx	lr

0800b6c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b6ca:	2180      	movs	r1, #128	@ 0x80
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fc9b 	bl	800c008 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fc97 	bl	800c008 <USBD_LL_StallEP>
}
 800b6da:	bf00      	nop
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b086      	sub	sp, #24
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	60f8      	str	r0, [r7, #12]
 800b6ea:	60b9      	str	r1, [r7, #8]
 800b6ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d032      	beq.n	800b75e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 f834 	bl	800b766 <USBD_GetLen>
 800b6fe:	4603      	mov	r3, r0
 800b700:	3301      	adds	r3, #1
 800b702:	b29b      	uxth	r3, r3
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	b29a      	uxth	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	1c5a      	adds	r2, r3, #1
 800b710:	75fa      	strb	r2, [r7, #23]
 800b712:	461a      	mov	r2, r3
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	4413      	add	r3, r2
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	7812      	ldrb	r2, [r2, #0]
 800b71c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	75fa      	strb	r2, [r7, #23]
 800b724:	461a      	mov	r2, r3
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4413      	add	r3, r2
 800b72a:	2203      	movs	r2, #3
 800b72c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b72e:	e012      	b.n	800b756 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	60fa      	str	r2, [r7, #12]
 800b736:	7dfa      	ldrb	r2, [r7, #23]
 800b738:	1c51      	adds	r1, r2, #1
 800b73a:	75f9      	strb	r1, [r7, #23]
 800b73c:	4611      	mov	r1, r2
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	440a      	add	r2, r1
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b746:	7dfb      	ldrb	r3, [r7, #23]
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	75fa      	strb	r2, [r7, #23]
 800b74c:	461a      	mov	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	4413      	add	r3, r2
 800b752:	2200      	movs	r2, #0
 800b754:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e8      	bne.n	800b730 <USBD_GetString+0x4e>
    }
  }
}
 800b75e:	bf00      	nop
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b772:	e005      	b.n	800b780 <USBD_GetLen+0x1a>
  {
    len++;
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	3301      	adds	r3, #1
 800b778:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3301      	adds	r3, #1
 800b77e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1f5      	bne.n	800b774 <USBD_GetLen+0xe>
  }

  return len;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	bc80      	pop	{r7}
 800b792:	4770      	bx	lr

0800b794 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b7aa:	88fa      	ldrh	r2, [r7, #6]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b7b0:	88fa      	ldrh	r2, [r7, #6]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7b6:	88fb      	ldrh	r3, [r7, #6]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 fcab 	bl	800c118 <USBD_LL_Transmit>

  return USBD_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	2100      	movs	r1, #0
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 fc99 	bl	800c118 <USBD_LL_Transmit>

  return USBD_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2203      	movs	r2, #3
 800b802:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b806:	88fa      	ldrh	r2, [r7, #6]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b80e:	88fa      	ldrh	r2, [r7, #6]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b816:	88fb      	ldrh	r3, [r7, #6]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	2100      	movs	r1, #0
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 fc9e 	bl	800c15e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	4613      	mov	r3, r2
 800b838:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b83a:	88fb      	ldrh	r3, [r7, #6]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	2100      	movs	r1, #0
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 fc8c 	bl	800c15e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2204      	movs	r2, #4
 800b85c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b860:	2300      	movs	r3, #0
 800b862:	2200      	movs	r2, #0
 800b864:	2100      	movs	r1, #0
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fc56 	bl	800c118 <USBD_LL_Transmit>

  return USBD_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b082      	sub	sp, #8
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2205      	movs	r2, #5
 800b882:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b886:	2300      	movs	r3, #0
 800b888:	2200      	movs	r2, #0
 800b88a:	2100      	movs	r1, #0
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fc66 	bl	800c15e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4912      	ldr	r1, [pc, #72]	@ (800b8ec <MX_USB_DEVICE_Init+0x50>)
 800b8a4:	4812      	ldr	r0, [pc, #72]	@ (800b8f0 <MX_USB_DEVICE_Init+0x54>)
 800b8a6:	f7fe ff62 	bl	800a76e <USBD_Init>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b8b0:	f7f6 fb10 	bl	8001ed4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b8b4:	490f      	ldr	r1, [pc, #60]	@ (800b8f4 <MX_USB_DEVICE_Init+0x58>)
 800b8b6:	480e      	ldr	r0, [pc, #56]	@ (800b8f0 <MX_USB_DEVICE_Init+0x54>)
 800b8b8:	f7fe ff84 	bl	800a7c4 <USBD_RegisterClass>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b8c2:	f7f6 fb07 	bl	8001ed4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b8c6:	490c      	ldr	r1, [pc, #48]	@ (800b8f8 <MX_USB_DEVICE_Init+0x5c>)
 800b8c8:	4809      	ldr	r0, [pc, #36]	@ (800b8f0 <MX_USB_DEVICE_Init+0x54>)
 800b8ca:	f7fe feb5 	bl	800a638 <USBD_CDC_RegisterInterface>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b8d4:	f7f6 fafe 	bl	8001ed4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b8d8:	4805      	ldr	r0, [pc, #20]	@ (800b8f0 <MX_USB_DEVICE_Init+0x54>)
 800b8da:	f7fe ff8c 	bl	800a7f6 <USBD_Start>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b8e4:	f7f6 faf6 	bl	8001ed4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b8e8:	bf00      	nop
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	20000130 	.word	0x20000130
 800b8f0:	2000058c 	.word	0x2000058c
 800b8f4:	2000001c 	.word	0x2000001c
 800b8f8:	20000120 	.word	0x20000120

0800b8fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b900:	2200      	movs	r2, #0
 800b902:	4905      	ldr	r1, [pc, #20]	@ (800b918 <CDC_Init_FS+0x1c>)
 800b904:	4805      	ldr	r0, [pc, #20]	@ (800b91c <CDC_Init_FS+0x20>)
 800b906:	f7fe fead 	bl	800a664 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b90a:	4905      	ldr	r1, [pc, #20]	@ (800b920 <CDC_Init_FS+0x24>)
 800b90c:	4803      	ldr	r0, [pc, #12]	@ (800b91c <CDC_Init_FS+0x20>)
 800b90e:	f7fe fec2 	bl	800a696 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b912:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b914:	4618      	mov	r0, r3
 800b916:	bd80      	pop	{r7, pc}
 800b918:	20000c50 	.word	0x20000c50
 800b91c:	2000058c 	.word	0x2000058c
 800b920:	20000850 	.word	0x20000850

0800b924 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b928:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bc80      	pop	{r7}
 800b930:	4770      	bx	lr
	...

0800b934 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	71fb      	strb	r3, [r7, #7]
 800b940:	4613      	mov	r3, r2
 800b942:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b944:	79fb      	ldrb	r3, [r7, #7]
 800b946:	2b23      	cmp	r3, #35	@ 0x23
 800b948:	d84a      	bhi.n	800b9e0 <CDC_Control_FS+0xac>
 800b94a:	a201      	add	r2, pc, #4	@ (adr r2, 800b950 <CDC_Control_FS+0x1c>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b9e1 	.word	0x0800b9e1
 800b954:	0800b9e1 	.word	0x0800b9e1
 800b958:	0800b9e1 	.word	0x0800b9e1
 800b95c:	0800b9e1 	.word	0x0800b9e1
 800b960:	0800b9e1 	.word	0x0800b9e1
 800b964:	0800b9e1 	.word	0x0800b9e1
 800b968:	0800b9e1 	.word	0x0800b9e1
 800b96c:	0800b9e1 	.word	0x0800b9e1
 800b970:	0800b9e1 	.word	0x0800b9e1
 800b974:	0800b9e1 	.word	0x0800b9e1
 800b978:	0800b9e1 	.word	0x0800b9e1
 800b97c:	0800b9e1 	.word	0x0800b9e1
 800b980:	0800b9e1 	.word	0x0800b9e1
 800b984:	0800b9e1 	.word	0x0800b9e1
 800b988:	0800b9e1 	.word	0x0800b9e1
 800b98c:	0800b9e1 	.word	0x0800b9e1
 800b990:	0800b9e1 	.word	0x0800b9e1
 800b994:	0800b9e1 	.word	0x0800b9e1
 800b998:	0800b9e1 	.word	0x0800b9e1
 800b99c:	0800b9e1 	.word	0x0800b9e1
 800b9a0:	0800b9e1 	.word	0x0800b9e1
 800b9a4:	0800b9e1 	.word	0x0800b9e1
 800b9a8:	0800b9e1 	.word	0x0800b9e1
 800b9ac:	0800b9e1 	.word	0x0800b9e1
 800b9b0:	0800b9e1 	.word	0x0800b9e1
 800b9b4:	0800b9e1 	.word	0x0800b9e1
 800b9b8:	0800b9e1 	.word	0x0800b9e1
 800b9bc:	0800b9e1 	.word	0x0800b9e1
 800b9c0:	0800b9e1 	.word	0x0800b9e1
 800b9c4:	0800b9e1 	.word	0x0800b9e1
 800b9c8:	0800b9e1 	.word	0x0800b9e1
 800b9cc:	0800b9e1 	.word	0x0800b9e1
 800b9d0:	0800b9e1 	.word	0x0800b9e1
 800b9d4:	0800b9e1 	.word	0x0800b9e1
 800b9d8:	0800b9e1 	.word	0x0800b9e1
 800b9dc:	0800b9e1 	.word	0x0800b9e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b9e0:	bf00      	nop
  }

  return (USBD_OK);
 800b9e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop

0800b9f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b9fa:	6879      	ldr	r1, [r7, #4]
 800b9fc:	480a      	ldr	r0, [pc, #40]	@ (800ba28 <CDC_Receive_FS+0x38>)
 800b9fe:	f7fe fe4a 	bl	800a696 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba02:	4809      	ldr	r0, [pc, #36]	@ (800ba28 <CDC_Receive_FS+0x38>)
 800ba04:	f7fe fe89 	bl	800a71a <USBD_CDC_ReceivePacket>
  data_recieved += strlen(UserRxBufferFS);
 800ba08:	4808      	ldr	r0, [pc, #32]	@ (800ba2c <CDC_Receive_FS+0x3c>)
 800ba0a:	f7f4 fba1 	bl	8000150 <strlen>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	4b07      	ldr	r3, [pc, #28]	@ (800ba30 <CDC_Receive_FS+0x40>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	4413      	add	r3, r2
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	4b05      	ldr	r3, [pc, #20]	@ (800ba30 <CDC_Receive_FS+0x40>)
 800ba1c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800ba1e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	2000058c 	.word	0x2000058c
 800ba2c:	20000850 	.word	0x20000850
 800ba30:	20001050 	.word	0x20001050

0800ba34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ba44:	4b0d      	ldr	r3, [pc, #52]	@ (800ba7c <CDC_Transmit_FS+0x48>)
 800ba46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e00b      	b.n	800ba72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba5a:	887b      	ldrh	r3, [r7, #2]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	6879      	ldr	r1, [r7, #4]
 800ba60:	4806      	ldr	r0, [pc, #24]	@ (800ba7c <CDC_Transmit_FS+0x48>)
 800ba62:	f7fe fdff 	bl	800a664 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ba66:	4805      	ldr	r0, [pc, #20]	@ (800ba7c <CDC_Transmit_FS+0x48>)
 800ba68:	f7fe fe28 	bl	800a6bc <USBD_CDC_TransmitPacket>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	2000058c 	.word	0x2000058c

0800ba80 <CDC_data_recieved>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_data_recieved()
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
	return data_recieved;
 800ba84:	4b02      	ldr	r3, [pc, #8]	@ (800ba90 <CDC_data_recieved+0x10>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bc80      	pop	{r7}
 800ba8e:	4770      	bx	lr
 800ba90:	20001050 	.word	0x20001050

0800ba94 <CDC_Receive_data>:

uint8_t CDC_Receive_data(uint8_t* buf, size_t size)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
	if (data_recieved + 1 <= size) size = data_recieved + 1;
 800ba9e:	4b13      	ldr	r3, [pc, #76]	@ (800baec <CDC_Receive_data+0x58>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	461a      	mov	r2, r3
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d303      	bcc.n	800bab4 <CDC_Receive_data+0x20>
 800baac:	4b0f      	ldr	r3, [pc, #60]	@ (800baec <CDC_Receive_data+0x58>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	3301      	adds	r3, #1
 800bab2:	603b      	str	r3, [r7, #0]
	memset(buf, '\0', size);
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	2100      	movs	r1, #0
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f001 fb06 	bl	800d0ca <memset>
	memcpy(buf, UserRxBufferFS, size);
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	490b      	ldr	r1, [pc, #44]	@ (800baf0 <CDC_Receive_data+0x5c>)
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f001 fb8f 	bl	800d1e6 <memcpy>
	memset(UserRxBufferFS, '\0', data_recieved);
 800bac8:	4b08      	ldr	r3, [pc, #32]	@ (800baec <CDC_Receive_data+0x58>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
 800bace:	2100      	movs	r1, #0
 800bad0:	4807      	ldr	r0, [pc, #28]	@ (800baf0 <CDC_Receive_data+0x5c>)
 800bad2:	f001 fafa 	bl	800d0ca <memset>
	data_recieved = 0;
 800bad6:	4b05      	ldr	r3, [pc, #20]	@ (800baec <CDC_Receive_data+0x58>)
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
	return size - 1;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	3b01      	subs	r3, #1
 800bae2:	b2db      	uxtb	r3, r3
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20001050 	.word	0x20001050
 800baf0:	20000850 	.word	0x20000850

0800baf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	4603      	mov	r3, r0
 800bafc:	6039      	str	r1, [r7, #0]
 800bafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2212      	movs	r2, #18
 800bb04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb06:	4b03      	ldr	r3, [pc, #12]	@ (800bb14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bc80      	pop	{r7}
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	2000014c 	.word	0x2000014c

0800bb18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	6039      	str	r1, [r7, #0]
 800bb22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2204      	movs	r2, #4
 800bb28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb2a:	4b03      	ldr	r3, [pc, #12]	@ (800bb38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bc80      	pop	{r7}
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20000160 	.word	0x20000160

0800bb3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	6039      	str	r1, [r7, #0]
 800bb46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d105      	bne.n	800bb5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	4907      	ldr	r1, [pc, #28]	@ (800bb70 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb52:	4808      	ldr	r0, [pc, #32]	@ (800bb74 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb54:	f7ff fdc5 	bl	800b6e2 <USBD_GetString>
 800bb58:	e004      	b.n	800bb64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	4904      	ldr	r1, [pc, #16]	@ (800bb70 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb5e:	4805      	ldr	r0, [pc, #20]	@ (800bb74 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb60:	f7ff fdbf 	bl	800b6e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb64:	4b02      	ldr	r3, [pc, #8]	@ (800bb70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20001054 	.word	0x20001054
 800bb74:	0800fe38 	.word	0x0800fe38

0800bb78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	6039      	str	r1, [r7, #0]
 800bb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	4904      	ldr	r1, [pc, #16]	@ (800bb98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb88:	4804      	ldr	r0, [pc, #16]	@ (800bb9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb8a:	f7ff fdaa 	bl	800b6e2 <USBD_GetString>
  return USBD_StrDesc;
 800bb8e:	4b02      	ldr	r3, [pc, #8]	@ (800bb98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20001054 	.word	0x20001054
 800bb9c:	0800fe50 	.word	0x0800fe50

0800bba0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	6039      	str	r1, [r7, #0]
 800bbaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	221a      	movs	r2, #26
 800bbb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbb2:	f000 f843 	bl	800bc3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bbb6:	4b02      	ldr	r3, [pc, #8]	@ (800bbc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20000164 	.word	0x20000164

0800bbc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	6039      	str	r1, [r7, #0]
 800bbce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbd0:	79fb      	ldrb	r3, [r7, #7]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d105      	bne.n	800bbe2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	4907      	ldr	r1, [pc, #28]	@ (800bbf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbda:	4808      	ldr	r0, [pc, #32]	@ (800bbfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbdc:	f7ff fd81 	bl	800b6e2 <USBD_GetString>
 800bbe0:	e004      	b.n	800bbec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	4904      	ldr	r1, [pc, #16]	@ (800bbf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbe6:	4805      	ldr	r0, [pc, #20]	@ (800bbfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbe8:	f7ff fd7b 	bl	800b6e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbec:	4b02      	ldr	r3, [pc, #8]	@ (800bbf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20001054 	.word	0x20001054
 800bbfc:	0800fe64 	.word	0x0800fe64

0800bc00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	6039      	str	r1, [r7, #0]
 800bc0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d105      	bne.n	800bc1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	4907      	ldr	r1, [pc, #28]	@ (800bc34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc16:	4808      	ldr	r0, [pc, #32]	@ (800bc38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc18:	f7ff fd63 	bl	800b6e2 <USBD_GetString>
 800bc1c:	e004      	b.n	800bc28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	4904      	ldr	r1, [pc, #16]	@ (800bc34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc22:	4805      	ldr	r0, [pc, #20]	@ (800bc38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc24:	f7ff fd5d 	bl	800b6e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc28:	4b02      	ldr	r3, [pc, #8]	@ (800bc34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	20001054 	.word	0x20001054
 800bc38:	0800fe70 	.word	0x0800fe70

0800bc3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc42:	4b0f      	ldr	r3, [pc, #60]	@ (800bc80 <Get_SerialNum+0x44>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc48:	4b0e      	ldr	r3, [pc, #56]	@ (800bc84 <Get_SerialNum+0x48>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc88 <Get_SerialNum+0x4c>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4413      	add	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d009      	beq.n	800bc76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc62:	2208      	movs	r2, #8
 800bc64:	4909      	ldr	r1, [pc, #36]	@ (800bc8c <Get_SerialNum+0x50>)
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f000 f814 	bl	800bc94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc6c:	2204      	movs	r2, #4
 800bc6e:	4908      	ldr	r1, [pc, #32]	@ (800bc90 <Get_SerialNum+0x54>)
 800bc70:	68b8      	ldr	r0, [r7, #8]
 800bc72:	f000 f80f 	bl	800bc94 <IntToUnicode>
  }
}
 800bc76:	bf00      	nop
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	1ffff7e8 	.word	0x1ffff7e8
 800bc84:	1ffff7ec 	.word	0x1ffff7ec
 800bc88:	1ffff7f0 	.word	0x1ffff7f0
 800bc8c:	20000166 	.word	0x20000166
 800bc90:	20000176 	.word	0x20000176

0800bc94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bca6:	2300      	movs	r3, #0
 800bca8:	75fb      	strb	r3, [r7, #23]
 800bcaa:	e027      	b.n	800bcfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	0f1b      	lsrs	r3, r3, #28
 800bcb0:	2b09      	cmp	r3, #9
 800bcb2:	d80b      	bhi.n	800bccc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	0f1b      	lsrs	r3, r3, #28
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	440b      	add	r3, r1
 800bcc4:	3230      	adds	r2, #48	@ 0x30
 800bcc6:	b2d2      	uxtb	r2, r2
 800bcc8:	701a      	strb	r2, [r3, #0]
 800bcca:	e00a      	b.n	800bce2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	0f1b      	lsrs	r3, r3, #28
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	440b      	add	r3, r1
 800bcdc:	3237      	adds	r2, #55	@ 0x37
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	3301      	adds	r3, #1
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	75fb      	strb	r3, [r7, #23]
 800bcfc:	7dfa      	ldrb	r2, [r7, #23]
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d3d3      	bcc.n	800bcac <IntToUnicode+0x18>
  }
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop
 800bd08:	371c      	adds	r7, #28
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bc80      	pop	{r7}
 800bd0e:	4770      	bx	lr

0800bd10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a0d      	ldr	r2, [pc, #52]	@ (800bd54 <HAL_PCD_MspInit+0x44>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d113      	bne.n	800bd4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd22:	4b0d      	ldr	r3, [pc, #52]	@ (800bd58 <HAL_PCD_MspInit+0x48>)
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	4a0c      	ldr	r2, [pc, #48]	@ (800bd58 <HAL_PCD_MspInit+0x48>)
 800bd28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd2c:	61d3      	str	r3, [r2, #28]
 800bd2e:	4b0a      	ldr	r3, [pc, #40]	@ (800bd58 <HAL_PCD_MspInit+0x48>)
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	2014      	movs	r0, #20
 800bd40:	f7f7 f9ab 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bd44:	2014      	movs	r0, #20
 800bd46:	f7f7 f9c4 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bd4a:	bf00      	nop
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	40005c00 	.word	0x40005c00
 800bd58:	40021000 	.word	0x40021000

0800bd5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bd70:	4619      	mov	r1, r3
 800bd72:	4610      	mov	r0, r2
 800bd74:	f7fe fd87 	bl	800a886 <USBD_LL_SetupStage>
}
 800bd78:	bf00      	nop
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bd92:	78fa      	ldrb	r2, [r7, #3]
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	440b      	add	r3, r1
 800bda0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	78fb      	ldrb	r3, [r7, #3]
 800bda8:	4619      	mov	r1, r3
 800bdaa:	f7fe fdb9 	bl	800a920 <USBD_LL_DataOutStage>
}
 800bdae:	bf00      	nop
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b082      	sub	sp, #8
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bdc8:	78fa      	ldrb	r2, [r7, #3]
 800bdca:	6879      	ldr	r1, [r7, #4]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	440b      	add	r3, r1
 800bdd6:	3324      	adds	r3, #36	@ 0x24
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	78fb      	ldrb	r3, [r7, #3]
 800bddc:	4619      	mov	r1, r3
 800bdde:	f7fe fe10 	bl	800aa02 <USBD_LL_DataInStage>
}
 800bde2:	bf00      	nop
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b082      	sub	sp, #8
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fe ff20 	bl	800ac3e <USBD_LL_SOF>
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b084      	sub	sp, #16
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be0e:	2301      	movs	r3, #1
 800be10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	799b      	ldrb	r3, [r3, #6]
 800be16:	2b02      	cmp	r3, #2
 800be18:	d001      	beq.n	800be1e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be1a:	f7f6 f85b 	bl	8001ed4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be24:	7bfa      	ldrb	r2, [r7, #15]
 800be26:	4611      	mov	r1, r2
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe fed0 	bl	800abce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fe89 	bl	800ab4c <USBD_LL_Reset>
}
 800be3a:	bf00      	nop
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be52:	4618      	mov	r0, r3
 800be54:	f7fe feca 	bl	800abec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	7a9b      	ldrb	r3, [r3, #10]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be60:	4b04      	ldr	r3, [pc, #16]	@ (800be74 <HAL_PCD_SuspendCallback+0x30>)
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	4a03      	ldr	r2, [pc, #12]	@ (800be74 <HAL_PCD_SuspendCallback+0x30>)
 800be66:	f043 0306 	orr.w	r3, r3, #6
 800be6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be6c:	bf00      	nop
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	e000ed00 	.word	0xe000ed00

0800be78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe fec4 	bl	800ac14 <USBD_LL_Resume>
}
 800be8c:	bf00      	nop
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800be9c:	4a28      	ldr	r2, [pc, #160]	@ (800bf40 <USBD_LL_Init+0xac>)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a26      	ldr	r2, [pc, #152]	@ (800bf40 <USBD_LL_Init+0xac>)
 800bea8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800beac:	4b24      	ldr	r3, [pc, #144]	@ (800bf40 <USBD_LL_Init+0xac>)
 800beae:	4a25      	ldr	r2, [pc, #148]	@ (800bf44 <USBD_LL_Init+0xb0>)
 800beb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800beb2:	4b23      	ldr	r3, [pc, #140]	@ (800bf40 <USBD_LL_Init+0xac>)
 800beb4:	2208      	movs	r2, #8
 800beb6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800beb8:	4b21      	ldr	r3, [pc, #132]	@ (800bf40 <USBD_LL_Init+0xac>)
 800beba:	2202      	movs	r2, #2
 800bebc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bebe:	4b20      	ldr	r3, [pc, #128]	@ (800bf40 <USBD_LL_Init+0xac>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bec4:	4b1e      	ldr	r3, [pc, #120]	@ (800bf40 <USBD_LL_Init+0xac>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800beca:	4b1d      	ldr	r3, [pc, #116]	@ (800bf40 <USBD_LL_Init+0xac>)
 800becc:	2200      	movs	r2, #0
 800bece:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bed0:	481b      	ldr	r0, [pc, #108]	@ (800bf40 <USBD_LL_Init+0xac>)
 800bed2:	f7f7 fd1b 	bl	800390c <HAL_PCD_Init>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d001      	beq.n	800bee0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bedc:	f7f5 fffa 	bl	8001ed4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bee6:	2318      	movs	r3, #24
 800bee8:	2200      	movs	r2, #0
 800beea:	2100      	movs	r1, #0
 800beec:	f7f9 fa2c 	bl	8005348 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bef6:	2358      	movs	r3, #88	@ 0x58
 800bef8:	2200      	movs	r2, #0
 800befa:	2180      	movs	r1, #128	@ 0x80
 800befc:	f7f9 fa24 	bl	8005348 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf06:	23c0      	movs	r3, #192	@ 0xc0
 800bf08:	2200      	movs	r2, #0
 800bf0a:	2181      	movs	r1, #129	@ 0x81
 800bf0c:	f7f9 fa1c 	bl	8005348 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf16:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	f7f9 fa13 	bl	8005348 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	2182      	movs	r1, #130	@ 0x82
 800bf30:	f7f9 fa0a 	bl	8005348 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	20001254 	.word	0x20001254
 800bf44:	40005c00 	.word	0x40005c00

0800bf48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7f7 fdca 	bl	8003af8 <HAL_PCD_Start>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf68:	7bfb      	ldrb	r3, [r7, #15]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f94e 	bl	800c20c <USBD_Get_USB_Status>
 800bf70:	4603      	mov	r3, r0
 800bf72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	4608      	mov	r0, r1
 800bf88:	4611      	mov	r1, r2
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	70fb      	strb	r3, [r7, #3]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70bb      	strb	r3, [r7, #2]
 800bf94:	4613      	mov	r3, r2
 800bf96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bfa6:	78bb      	ldrb	r3, [r7, #2]
 800bfa8:	883a      	ldrh	r2, [r7, #0]
 800bfaa:	78f9      	ldrb	r1, [r7, #3]
 800bfac:	f7f7 ff1e 	bl	8003dec <HAL_PCD_EP_Open>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 f928 	bl	800c20c <USBD_Get_USB_Status>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bfe4:	78fa      	ldrb	r2, [r7, #3]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7f7 ff5c 	bl	8003ea6 <HAL_PCD_EP_Close>
 800bfee:	4603      	mov	r3, r0
 800bff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff2:	7bfb      	ldrb	r3, [r7, #15]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 f909 	bl	800c20c <USBD_Get_USB_Status>
 800bffa:	4603      	mov	r3, r0
 800bffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bffe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c022:	78fa      	ldrb	r2, [r7, #3]
 800c024:	4611      	mov	r1, r2
 800c026:	4618      	mov	r0, r3
 800c028:	f7f8 f804 	bl	8004034 <HAL_PCD_EP_SetStall>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	4618      	mov	r0, r3
 800c034:	f000 f8ea 	bl	800c20c <USBD_Get_USB_Status>
 800c038:	4603      	mov	r3, r0
 800c03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	460b      	mov	r3, r1
 800c050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c060:	78fa      	ldrb	r2, [r7, #3]
 800c062:	4611      	mov	r1, r2
 800c064:	4618      	mov	r0, r3
 800c066:	f7f8 f845 	bl	80040f4 <HAL_PCD_EP_ClrStall>
 800c06a:	4603      	mov	r3, r0
 800c06c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	4618      	mov	r0, r3
 800c072:	f000 f8cb 	bl	800c20c <USBD_Get_USB_Status>
 800c076:	4603      	mov	r3, r0
 800c078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c07a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c096:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	da0b      	bge.n	800c0b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c0a0:	78fb      	ldrb	r3, [r7, #3]
 800c0a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0a6:	68f9      	ldr	r1, [r7, #12]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	00db      	lsls	r3, r3, #3
 800c0b0:	440b      	add	r3, r1
 800c0b2:	3312      	adds	r3, #18
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	e00b      	b.n	800c0d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0be:	68f9      	ldr	r1, [r7, #12]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	440b      	add	r3, r1
 800c0ca:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c0ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bc80      	pop	{r7}
 800c0d8:	4770      	bx	lr

0800c0da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c0f4:	78fa      	ldrb	r2, [r7, #3]
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7f7 fe53 	bl	8003da4 <HAL_PCD_SetAddress>
 800c0fe:	4603      	mov	r3, r0
 800c100:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c102:	7bfb      	ldrb	r3, [r7, #15]
 800c104:	4618      	mov	r0, r3
 800c106:	f000 f881 	bl	800c20c <USBD_Get_USB_Status>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	607a      	str	r2, [r7, #4]
 800c122:	461a      	mov	r2, r3
 800c124:	460b      	mov	r3, r1
 800c126:	72fb      	strb	r3, [r7, #11]
 800c128:	4613      	mov	r3, r2
 800c12a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c13a:	893b      	ldrh	r3, [r7, #8]
 800c13c:	7af9      	ldrb	r1, [r7, #11]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	f7f7 ff41 	bl	8003fc6 <HAL_PCD_EP_Transmit>
 800c144:	4603      	mov	r3, r0
 800c146:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c148:	7dfb      	ldrb	r3, [r7, #23]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 f85e 	bl	800c20c <USBD_Get_USB_Status>
 800c150:	4603      	mov	r3, r0
 800c152:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c154:	7dbb      	ldrb	r3, [r7, #22]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b086      	sub	sp, #24
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	461a      	mov	r2, r3
 800c16a:	460b      	mov	r3, r1
 800c16c:	72fb      	strb	r3, [r7, #11]
 800c16e:	4613      	mov	r3, r2
 800c170:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c180:	893b      	ldrh	r3, [r7, #8]
 800c182:	7af9      	ldrb	r1, [r7, #11]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	f7f7 fed6 	bl	8003f36 <HAL_PCD_EP_Receive>
 800c18a:	4603      	mov	r3, r0
 800c18c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c18e:	7dfb      	ldrb	r3, [r7, #23]
 800c190:	4618      	mov	r0, r3
 800c192:	f000 f83b 	bl	800c20c <USBD_Get_USB_Status>
 800c196:	4603      	mov	r3, r0
 800c198:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c19a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3718      	adds	r7, #24
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1b6:	78fa      	ldrb	r2, [r7, #3]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f7 feec 	bl	8003f98 <HAL_PCD_EP_GetRxCount>
 800c1c0:	4603      	mov	r3, r0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1d4:	4b02      	ldr	r3, [pc, #8]	@ (800c1e0 <USBD_static_malloc+0x14>)
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bc80      	pop	{r7}
 800c1de:	4770      	bx	lr
 800c1e0:	2000152c 	.word	0x2000152c

0800c1e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]

}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bc80      	pop	{r7}
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c202:	bf00      	nop
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	bc80      	pop	{r7}
 800c20a:	4770      	bx	lr

0800c20c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	d817      	bhi.n	800c250 <USBD_Get_USB_Status+0x44>
 800c220:	a201      	add	r2, pc, #4	@ (adr r2, 800c228 <USBD_Get_USB_Status+0x1c>)
 800c222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c226:	bf00      	nop
 800c228:	0800c239 	.word	0x0800c239
 800c22c:	0800c23f 	.word	0x0800c23f
 800c230:	0800c245 	.word	0x0800c245
 800c234:	0800c24b 	.word	0x0800c24b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c238:	2300      	movs	r3, #0
 800c23a:	73fb      	strb	r3, [r7, #15]
    break;
 800c23c:	e00b      	b.n	800c256 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c23e:	2302      	movs	r3, #2
 800c240:	73fb      	strb	r3, [r7, #15]
    break;
 800c242:	e008      	b.n	800c256 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c244:	2301      	movs	r3, #1
 800c246:	73fb      	strb	r3, [r7, #15]
    break;
 800c248:	e005      	b.n	800c256 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c24a:	2302      	movs	r3, #2
 800c24c:	73fb      	strb	r3, [r7, #15]
    break;
 800c24e:	e002      	b.n	800c256 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c250:	2302      	movs	r3, #2
 800c252:	73fb      	strb	r3, [r7, #15]
    break;
 800c254:	bf00      	nop
  }
  return usb_status;
 800c256:	7bfb      	ldrb	r3, [r7, #15]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bc80      	pop	{r7}
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop

0800c264 <atof>:
 800c264:	2100      	movs	r1, #0
 800c266:	f000 bdfb 	b.w	800ce60 <strtod>

0800c26a <sulp>:
 800c26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c26e:	460f      	mov	r7, r1
 800c270:	4690      	mov	r8, r2
 800c272:	f001 ff7b 	bl	800e16c <__ulp>
 800c276:	4604      	mov	r4, r0
 800c278:	460d      	mov	r5, r1
 800c27a:	f1b8 0f00 	cmp.w	r8, #0
 800c27e:	d011      	beq.n	800c2a4 <sulp+0x3a>
 800c280:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c284:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c288:	2b00      	cmp	r3, #0
 800c28a:	dd0b      	ble.n	800c2a4 <sulp+0x3a>
 800c28c:	2400      	movs	r4, #0
 800c28e:	051b      	lsls	r3, r3, #20
 800c290:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c294:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c298:	4622      	mov	r2, r4
 800c29a:	462b      	mov	r3, r5
 800c29c:	f7f4 f91c 	bl	80004d8 <__aeabi_dmul>
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	460d      	mov	r5, r1
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ac:	0000      	movs	r0, r0
	...

0800c2b0 <_strtod_l>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	b09f      	sub	sp, #124	@ 0x7c
 800c2b6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c2be:	f04f 0a00 	mov.w	sl, #0
 800c2c2:	f04f 0b00 	mov.w	fp, #0
 800c2c6:	460a      	mov	r2, r1
 800c2c8:	9005      	str	r0, [sp, #20]
 800c2ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2cc:	7811      	ldrb	r1, [r2, #0]
 800c2ce:	292b      	cmp	r1, #43	@ 0x2b
 800c2d0:	d048      	beq.n	800c364 <_strtod_l+0xb4>
 800c2d2:	d836      	bhi.n	800c342 <_strtod_l+0x92>
 800c2d4:	290d      	cmp	r1, #13
 800c2d6:	d830      	bhi.n	800c33a <_strtod_l+0x8a>
 800c2d8:	2908      	cmp	r1, #8
 800c2da:	d830      	bhi.n	800c33e <_strtod_l+0x8e>
 800c2dc:	2900      	cmp	r1, #0
 800c2de:	d039      	beq.n	800c354 <_strtod_l+0xa4>
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c2e6:	782a      	ldrb	r2, [r5, #0]
 800c2e8:	2a30      	cmp	r2, #48	@ 0x30
 800c2ea:	f040 80b0 	bne.w	800c44e <_strtod_l+0x19e>
 800c2ee:	786a      	ldrb	r2, [r5, #1]
 800c2f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c2f4:	2a58      	cmp	r2, #88	@ 0x58
 800c2f6:	d16c      	bne.n	800c3d2 <_strtod_l+0x122>
 800c2f8:	9302      	str	r3, [sp, #8]
 800c2fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2fc:	4a8f      	ldr	r2, [pc, #572]	@ (800c53c <_strtod_l+0x28c>)
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	ab1a      	add	r3, sp, #104	@ 0x68
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	9805      	ldr	r0, [sp, #20]
 800c306:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c308:	a919      	add	r1, sp, #100	@ 0x64
 800c30a:	f001 f831 	bl	800d370 <__gethex>
 800c30e:	f010 060f 	ands.w	r6, r0, #15
 800c312:	4604      	mov	r4, r0
 800c314:	d005      	beq.n	800c322 <_strtod_l+0x72>
 800c316:	2e06      	cmp	r6, #6
 800c318:	d126      	bne.n	800c368 <_strtod_l+0xb8>
 800c31a:	2300      	movs	r3, #0
 800c31c:	3501      	adds	r5, #1
 800c31e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c320:	930e      	str	r3, [sp, #56]	@ 0x38
 800c322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c324:	2b00      	cmp	r3, #0
 800c326:	f040 8582 	bne.w	800ce2e <_strtod_l+0xb7e>
 800c32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c32c:	b1bb      	cbz	r3, 800c35e <_strtod_l+0xae>
 800c32e:	4650      	mov	r0, sl
 800c330:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c334:	b01f      	add	sp, #124	@ 0x7c
 800c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33a:	2920      	cmp	r1, #32
 800c33c:	d1d0      	bne.n	800c2e0 <_strtod_l+0x30>
 800c33e:	3201      	adds	r2, #1
 800c340:	e7c3      	b.n	800c2ca <_strtod_l+0x1a>
 800c342:	292d      	cmp	r1, #45	@ 0x2d
 800c344:	d1cc      	bne.n	800c2e0 <_strtod_l+0x30>
 800c346:	2101      	movs	r1, #1
 800c348:	910e      	str	r1, [sp, #56]	@ 0x38
 800c34a:	1c51      	adds	r1, r2, #1
 800c34c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c34e:	7852      	ldrb	r2, [r2, #1]
 800c350:	2a00      	cmp	r2, #0
 800c352:	d1c7      	bne.n	800c2e4 <_strtod_l+0x34>
 800c354:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c356:	9419      	str	r4, [sp, #100]	@ 0x64
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f040 8566 	bne.w	800ce2a <_strtod_l+0xb7a>
 800c35e:	4650      	mov	r0, sl
 800c360:	4659      	mov	r1, fp
 800c362:	e7e7      	b.n	800c334 <_strtod_l+0x84>
 800c364:	2100      	movs	r1, #0
 800c366:	e7ef      	b.n	800c348 <_strtod_l+0x98>
 800c368:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c36a:	b13a      	cbz	r2, 800c37c <_strtod_l+0xcc>
 800c36c:	2135      	movs	r1, #53	@ 0x35
 800c36e:	a81c      	add	r0, sp, #112	@ 0x70
 800c370:	f002 f808 	bl	800e384 <__copybits>
 800c374:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c376:	9805      	ldr	r0, [sp, #20]
 800c378:	f001 fbcc 	bl	800db14 <_Bfree>
 800c37c:	3e01      	subs	r6, #1
 800c37e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c380:	2e04      	cmp	r6, #4
 800c382:	d806      	bhi.n	800c392 <_strtod_l+0xe2>
 800c384:	e8df f006 	tbb	[pc, r6]
 800c388:	201d0314 	.word	0x201d0314
 800c38c:	14          	.byte	0x14
 800c38d:	00          	.byte	0x00
 800c38e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c392:	05e1      	lsls	r1, r4, #23
 800c394:	bf48      	it	mi
 800c396:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c39a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c39e:	0d1b      	lsrs	r3, r3, #20
 800c3a0:	051b      	lsls	r3, r3, #20
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1bd      	bne.n	800c322 <_strtod_l+0x72>
 800c3a6:	f000 fef1 	bl	800d18c <__errno>
 800c3aa:	2322      	movs	r3, #34	@ 0x22
 800c3ac:	6003      	str	r3, [r0, #0]
 800c3ae:	e7b8      	b.n	800c322 <_strtod_l+0x72>
 800c3b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c3b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c3b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c3bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c3c0:	e7e7      	b.n	800c392 <_strtod_l+0xe2>
 800c3c2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c540 <_strtod_l+0x290>
 800c3c6:	e7e4      	b.n	800c392 <_strtod_l+0xe2>
 800c3c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c3cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c3d0:	e7df      	b.n	800c392 <_strtod_l+0xe2>
 800c3d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3d4:	1c5a      	adds	r2, r3, #1
 800c3d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3d8:	785b      	ldrb	r3, [r3, #1]
 800c3da:	2b30      	cmp	r3, #48	@ 0x30
 800c3dc:	d0f9      	beq.n	800c3d2 <_strtod_l+0x122>
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d09f      	beq.n	800c322 <_strtod_l+0x72>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	2700      	movs	r7, #0
 800c3e6:	220a      	movs	r2, #10
 800c3e8:	46b9      	mov	r9, r7
 800c3ea:	9308      	str	r3, [sp, #32]
 800c3ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3ee:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c3f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3f2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c3f4:	7805      	ldrb	r5, [r0, #0]
 800c3f6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c3fa:	b2d9      	uxtb	r1, r3
 800c3fc:	2909      	cmp	r1, #9
 800c3fe:	d928      	bls.n	800c452 <_strtod_l+0x1a2>
 800c400:	2201      	movs	r2, #1
 800c402:	4950      	ldr	r1, [pc, #320]	@ (800c544 <_strtod_l+0x294>)
 800c404:	f000 fe69 	bl	800d0da <strncmp>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d032      	beq.n	800c472 <_strtod_l+0x1c2>
 800c40c:	2000      	movs	r0, #0
 800c40e:	462a      	mov	r2, r5
 800c410:	4603      	mov	r3, r0
 800c412:	464d      	mov	r5, r9
 800c414:	900a      	str	r0, [sp, #40]	@ 0x28
 800c416:	2a65      	cmp	r2, #101	@ 0x65
 800c418:	d001      	beq.n	800c41e <_strtod_l+0x16e>
 800c41a:	2a45      	cmp	r2, #69	@ 0x45
 800c41c:	d114      	bne.n	800c448 <_strtod_l+0x198>
 800c41e:	b91d      	cbnz	r5, 800c428 <_strtod_l+0x178>
 800c420:	9a08      	ldr	r2, [sp, #32]
 800c422:	4302      	orrs	r2, r0
 800c424:	d096      	beq.n	800c354 <_strtod_l+0xa4>
 800c426:	2500      	movs	r5, #0
 800c428:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c42a:	1c62      	adds	r2, r4, #1
 800c42c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c42e:	7862      	ldrb	r2, [r4, #1]
 800c430:	2a2b      	cmp	r2, #43	@ 0x2b
 800c432:	d07a      	beq.n	800c52a <_strtod_l+0x27a>
 800c434:	2a2d      	cmp	r2, #45	@ 0x2d
 800c436:	d07e      	beq.n	800c536 <_strtod_l+0x286>
 800c438:	f04f 0c00 	mov.w	ip, #0
 800c43c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c440:	2909      	cmp	r1, #9
 800c442:	f240 8085 	bls.w	800c550 <_strtod_l+0x2a0>
 800c446:	9419      	str	r4, [sp, #100]	@ 0x64
 800c448:	f04f 0800 	mov.w	r8, #0
 800c44c:	e0a5      	b.n	800c59a <_strtod_l+0x2ea>
 800c44e:	2300      	movs	r3, #0
 800c450:	e7c8      	b.n	800c3e4 <_strtod_l+0x134>
 800c452:	f1b9 0f08 	cmp.w	r9, #8
 800c456:	bfd8      	it	le
 800c458:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c45a:	f100 0001 	add.w	r0, r0, #1
 800c45e:	bfd6      	itet	le
 800c460:	fb02 3301 	mlale	r3, r2, r1, r3
 800c464:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c468:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c46a:	f109 0901 	add.w	r9, r9, #1
 800c46e:	9019      	str	r0, [sp, #100]	@ 0x64
 800c470:	e7bf      	b.n	800c3f2 <_strtod_l+0x142>
 800c472:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	9219      	str	r2, [sp, #100]	@ 0x64
 800c478:	785a      	ldrb	r2, [r3, #1]
 800c47a:	f1b9 0f00 	cmp.w	r9, #0
 800c47e:	d03b      	beq.n	800c4f8 <_strtod_l+0x248>
 800c480:	464d      	mov	r5, r9
 800c482:	900a      	str	r0, [sp, #40]	@ 0x28
 800c484:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c488:	2b09      	cmp	r3, #9
 800c48a:	d912      	bls.n	800c4b2 <_strtod_l+0x202>
 800c48c:	2301      	movs	r3, #1
 800c48e:	e7c2      	b.n	800c416 <_strtod_l+0x166>
 800c490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c492:	3001      	adds	r0, #1
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	9219      	str	r2, [sp, #100]	@ 0x64
 800c498:	785a      	ldrb	r2, [r3, #1]
 800c49a:	2a30      	cmp	r2, #48	@ 0x30
 800c49c:	d0f8      	beq.n	800c490 <_strtod_l+0x1e0>
 800c49e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c4a2:	2b08      	cmp	r3, #8
 800c4a4:	f200 84c8 	bhi.w	800ce38 <_strtod_l+0xb88>
 800c4a8:	900a      	str	r0, [sp, #40]	@ 0x28
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4b0:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4b2:	3a30      	subs	r2, #48	@ 0x30
 800c4b4:	f100 0301 	add.w	r3, r0, #1
 800c4b8:	d018      	beq.n	800c4ec <_strtod_l+0x23c>
 800c4ba:	462e      	mov	r6, r5
 800c4bc:	f04f 0e0a 	mov.w	lr, #10
 800c4c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4c2:	4419      	add	r1, r3
 800c4c4:	910a      	str	r1, [sp, #40]	@ 0x28
 800c4c6:	1c71      	adds	r1, r6, #1
 800c4c8:	eba1 0c05 	sub.w	ip, r1, r5
 800c4cc:	4563      	cmp	r3, ip
 800c4ce:	dc15      	bgt.n	800c4fc <_strtod_l+0x24c>
 800c4d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c4d4:	182b      	adds	r3, r5, r0
 800c4d6:	2b08      	cmp	r3, #8
 800c4d8:	f105 0501 	add.w	r5, r5, #1
 800c4dc:	4405      	add	r5, r0
 800c4de:	dc1a      	bgt.n	800c516 <_strtod_l+0x266>
 800c4e0:	230a      	movs	r3, #10
 800c4e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4e4:	fb03 2301 	mla	r3, r3, r1, r2
 800c4e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	1c51      	adds	r1, r2, #1
 800c4f2:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4f4:	7852      	ldrb	r2, [r2, #1]
 800c4f6:	e7c5      	b.n	800c484 <_strtod_l+0x1d4>
 800c4f8:	4648      	mov	r0, r9
 800c4fa:	e7ce      	b.n	800c49a <_strtod_l+0x1ea>
 800c4fc:	2e08      	cmp	r6, #8
 800c4fe:	dc05      	bgt.n	800c50c <_strtod_l+0x25c>
 800c500:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c502:	fb0e f606 	mul.w	r6, lr, r6
 800c506:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c508:	460e      	mov	r6, r1
 800c50a:	e7dc      	b.n	800c4c6 <_strtod_l+0x216>
 800c50c:	2910      	cmp	r1, #16
 800c50e:	bfd8      	it	le
 800c510:	fb0e f707 	mulle.w	r7, lr, r7
 800c514:	e7f8      	b.n	800c508 <_strtod_l+0x258>
 800c516:	2b0f      	cmp	r3, #15
 800c518:	bfdc      	itt	le
 800c51a:	230a      	movle	r3, #10
 800c51c:	fb03 2707 	mlale	r7, r3, r7, r2
 800c520:	e7e3      	b.n	800c4ea <_strtod_l+0x23a>
 800c522:	2300      	movs	r3, #0
 800c524:	930a      	str	r3, [sp, #40]	@ 0x28
 800c526:	2301      	movs	r3, #1
 800c528:	e77a      	b.n	800c420 <_strtod_l+0x170>
 800c52a:	f04f 0c00 	mov.w	ip, #0
 800c52e:	1ca2      	adds	r2, r4, #2
 800c530:	9219      	str	r2, [sp, #100]	@ 0x64
 800c532:	78a2      	ldrb	r2, [r4, #2]
 800c534:	e782      	b.n	800c43c <_strtod_l+0x18c>
 800c536:	f04f 0c01 	mov.w	ip, #1
 800c53a:	e7f8      	b.n	800c52e <_strtod_l+0x27e>
 800c53c:	0801009c 	.word	0x0801009c
 800c540:	7ff00000 	.word	0x7ff00000
 800c544:	0800febe 	.word	0x0800febe
 800c548:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c54a:	1c51      	adds	r1, r2, #1
 800c54c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c54e:	7852      	ldrb	r2, [r2, #1]
 800c550:	2a30      	cmp	r2, #48	@ 0x30
 800c552:	d0f9      	beq.n	800c548 <_strtod_l+0x298>
 800c554:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c558:	2908      	cmp	r1, #8
 800c55a:	f63f af75 	bhi.w	800c448 <_strtod_l+0x198>
 800c55e:	f04f 080a 	mov.w	r8, #10
 800c562:	3a30      	subs	r2, #48	@ 0x30
 800c564:	9209      	str	r2, [sp, #36]	@ 0x24
 800c566:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c568:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c56a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c56c:	1c56      	adds	r6, r2, #1
 800c56e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c570:	7852      	ldrb	r2, [r2, #1]
 800c572:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c576:	f1be 0f09 	cmp.w	lr, #9
 800c57a:	d939      	bls.n	800c5f0 <_strtod_l+0x340>
 800c57c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c57e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c582:	1a76      	subs	r6, r6, r1
 800c584:	2e08      	cmp	r6, #8
 800c586:	dc03      	bgt.n	800c590 <_strtod_l+0x2e0>
 800c588:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c58a:	4588      	cmp	r8, r1
 800c58c:	bfa8      	it	ge
 800c58e:	4688      	movge	r8, r1
 800c590:	f1bc 0f00 	cmp.w	ip, #0
 800c594:	d001      	beq.n	800c59a <_strtod_l+0x2ea>
 800c596:	f1c8 0800 	rsb	r8, r8, #0
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	d14e      	bne.n	800c63c <_strtod_l+0x38c>
 800c59e:	9908      	ldr	r1, [sp, #32]
 800c5a0:	4308      	orrs	r0, r1
 800c5a2:	f47f aebe 	bne.w	800c322 <_strtod_l+0x72>
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f47f aed4 	bne.w	800c354 <_strtod_l+0xa4>
 800c5ac:	2a69      	cmp	r2, #105	@ 0x69
 800c5ae:	d028      	beq.n	800c602 <_strtod_l+0x352>
 800c5b0:	dc25      	bgt.n	800c5fe <_strtod_l+0x34e>
 800c5b2:	2a49      	cmp	r2, #73	@ 0x49
 800c5b4:	d025      	beq.n	800c602 <_strtod_l+0x352>
 800c5b6:	2a4e      	cmp	r2, #78	@ 0x4e
 800c5b8:	f47f aecc 	bne.w	800c354 <_strtod_l+0xa4>
 800c5bc:	4999      	ldr	r1, [pc, #612]	@ (800c824 <_strtod_l+0x574>)
 800c5be:	a819      	add	r0, sp, #100	@ 0x64
 800c5c0:	f001 f8f8 	bl	800d7b4 <__match>
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	f43f aec5 	beq.w	800c354 <_strtod_l+0xa4>
 800c5ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	2b28      	cmp	r3, #40	@ 0x28
 800c5d0:	d12e      	bne.n	800c630 <_strtod_l+0x380>
 800c5d2:	4995      	ldr	r1, [pc, #596]	@ (800c828 <_strtod_l+0x578>)
 800c5d4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c5d6:	a819      	add	r0, sp, #100	@ 0x64
 800c5d8:	f001 f900 	bl	800d7dc <__hexnan>
 800c5dc:	2805      	cmp	r0, #5
 800c5de:	d127      	bne.n	800c630 <_strtod_l+0x380>
 800c5e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c5e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c5e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c5ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c5ee:	e698      	b.n	800c322 <_strtod_l+0x72>
 800c5f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5f2:	fb08 2101 	mla	r1, r8, r1, r2
 800c5f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c5fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5fc:	e7b5      	b.n	800c56a <_strtod_l+0x2ba>
 800c5fe:	2a6e      	cmp	r2, #110	@ 0x6e
 800c600:	e7da      	b.n	800c5b8 <_strtod_l+0x308>
 800c602:	498a      	ldr	r1, [pc, #552]	@ (800c82c <_strtod_l+0x57c>)
 800c604:	a819      	add	r0, sp, #100	@ 0x64
 800c606:	f001 f8d5 	bl	800d7b4 <__match>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	f43f aea2 	beq.w	800c354 <_strtod_l+0xa4>
 800c610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c612:	4987      	ldr	r1, [pc, #540]	@ (800c830 <_strtod_l+0x580>)
 800c614:	3b01      	subs	r3, #1
 800c616:	a819      	add	r0, sp, #100	@ 0x64
 800c618:	9319      	str	r3, [sp, #100]	@ 0x64
 800c61a:	f001 f8cb 	bl	800d7b4 <__match>
 800c61e:	b910      	cbnz	r0, 800c626 <_strtod_l+0x376>
 800c620:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c622:	3301      	adds	r3, #1
 800c624:	9319      	str	r3, [sp, #100]	@ 0x64
 800c626:	f04f 0a00 	mov.w	sl, #0
 800c62a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800c834 <_strtod_l+0x584>
 800c62e:	e678      	b.n	800c322 <_strtod_l+0x72>
 800c630:	4881      	ldr	r0, [pc, #516]	@ (800c838 <_strtod_l+0x588>)
 800c632:	f000 fde7 	bl	800d204 <nan>
 800c636:	4682      	mov	sl, r0
 800c638:	468b      	mov	fp, r1
 800c63a:	e672      	b.n	800c322 <_strtod_l+0x72>
 800c63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c63e:	f1b9 0f00 	cmp.w	r9, #0
 800c642:	bf08      	it	eq
 800c644:	46a9      	moveq	r9, r5
 800c646:	eba8 0303 	sub.w	r3, r8, r3
 800c64a:	2d10      	cmp	r5, #16
 800c64c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c64e:	462c      	mov	r4, r5
 800c650:	9309      	str	r3, [sp, #36]	@ 0x24
 800c652:	bfa8      	it	ge
 800c654:	2410      	movge	r4, #16
 800c656:	f7f3 fec5 	bl	80003e4 <__aeabi_ui2d>
 800c65a:	2d09      	cmp	r5, #9
 800c65c:	4682      	mov	sl, r0
 800c65e:	468b      	mov	fp, r1
 800c660:	dc11      	bgt.n	800c686 <_strtod_l+0x3d6>
 800c662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c664:	2b00      	cmp	r3, #0
 800c666:	f43f ae5c 	beq.w	800c322 <_strtod_l+0x72>
 800c66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66c:	dd76      	ble.n	800c75c <_strtod_l+0x4ac>
 800c66e:	2b16      	cmp	r3, #22
 800c670:	dc5d      	bgt.n	800c72e <_strtod_l+0x47e>
 800c672:	4972      	ldr	r1, [pc, #456]	@ (800c83c <_strtod_l+0x58c>)
 800c674:	4652      	mov	r2, sl
 800c676:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c67a:	465b      	mov	r3, fp
 800c67c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c680:	f7f3 ff2a 	bl	80004d8 <__aeabi_dmul>
 800c684:	e7d7      	b.n	800c636 <_strtod_l+0x386>
 800c686:	4b6d      	ldr	r3, [pc, #436]	@ (800c83c <_strtod_l+0x58c>)
 800c688:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c68c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c690:	f7f3 ff22 	bl	80004d8 <__aeabi_dmul>
 800c694:	4682      	mov	sl, r0
 800c696:	4638      	mov	r0, r7
 800c698:	468b      	mov	fp, r1
 800c69a:	f7f3 fea3 	bl	80003e4 <__aeabi_ui2d>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4650      	mov	r0, sl
 800c6a4:	4659      	mov	r1, fp
 800c6a6:	f7f3 fd61 	bl	800016c <__adddf3>
 800c6aa:	2d0f      	cmp	r5, #15
 800c6ac:	4682      	mov	sl, r0
 800c6ae:	468b      	mov	fp, r1
 800c6b0:	ddd7      	ble.n	800c662 <_strtod_l+0x3b2>
 800c6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b4:	1b2c      	subs	r4, r5, r4
 800c6b6:	441c      	add	r4, r3
 800c6b8:	2c00      	cmp	r4, #0
 800c6ba:	f340 8093 	ble.w	800c7e4 <_strtod_l+0x534>
 800c6be:	f014 030f 	ands.w	r3, r4, #15
 800c6c2:	d00a      	beq.n	800c6da <_strtod_l+0x42a>
 800c6c4:	495d      	ldr	r1, [pc, #372]	@ (800c83c <_strtod_l+0x58c>)
 800c6c6:	4652      	mov	r2, sl
 800c6c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d0:	465b      	mov	r3, fp
 800c6d2:	f7f3 ff01 	bl	80004d8 <__aeabi_dmul>
 800c6d6:	4682      	mov	sl, r0
 800c6d8:	468b      	mov	fp, r1
 800c6da:	f034 040f 	bics.w	r4, r4, #15
 800c6de:	d073      	beq.n	800c7c8 <_strtod_l+0x518>
 800c6e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c6e4:	dd49      	ble.n	800c77a <_strtod_l+0x4ca>
 800c6e6:	2400      	movs	r4, #0
 800c6e8:	46a0      	mov	r8, r4
 800c6ea:	46a1      	mov	r9, r4
 800c6ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c6ee:	2322      	movs	r3, #34	@ 0x22
 800c6f0:	f04f 0a00 	mov.w	sl, #0
 800c6f4:	9a05      	ldr	r2, [sp, #20]
 800c6f6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800c834 <_strtod_l+0x584>
 800c6fa:	6013      	str	r3, [r2, #0]
 800c6fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f43f ae0f 	beq.w	800c322 <_strtod_l+0x72>
 800c704:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c706:	9805      	ldr	r0, [sp, #20]
 800c708:	f001 fa04 	bl	800db14 <_Bfree>
 800c70c:	4649      	mov	r1, r9
 800c70e:	9805      	ldr	r0, [sp, #20]
 800c710:	f001 fa00 	bl	800db14 <_Bfree>
 800c714:	4641      	mov	r1, r8
 800c716:	9805      	ldr	r0, [sp, #20]
 800c718:	f001 f9fc 	bl	800db14 <_Bfree>
 800c71c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c71e:	9805      	ldr	r0, [sp, #20]
 800c720:	f001 f9f8 	bl	800db14 <_Bfree>
 800c724:	4621      	mov	r1, r4
 800c726:	9805      	ldr	r0, [sp, #20]
 800c728:	f001 f9f4 	bl	800db14 <_Bfree>
 800c72c:	e5f9      	b.n	800c322 <_strtod_l+0x72>
 800c72e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c730:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c734:	4293      	cmp	r3, r2
 800c736:	dbbc      	blt.n	800c6b2 <_strtod_l+0x402>
 800c738:	4c40      	ldr	r4, [pc, #256]	@ (800c83c <_strtod_l+0x58c>)
 800c73a:	f1c5 050f 	rsb	r5, r5, #15
 800c73e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c742:	4652      	mov	r2, sl
 800c744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c748:	465b      	mov	r3, fp
 800c74a:	f7f3 fec5 	bl	80004d8 <__aeabi_dmul>
 800c74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c750:	1b5d      	subs	r5, r3, r5
 800c752:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c756:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c75a:	e791      	b.n	800c680 <_strtod_l+0x3d0>
 800c75c:	3316      	adds	r3, #22
 800c75e:	dba8      	blt.n	800c6b2 <_strtod_l+0x402>
 800c760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c762:	4650      	mov	r0, sl
 800c764:	eba3 0808 	sub.w	r8, r3, r8
 800c768:	4b34      	ldr	r3, [pc, #208]	@ (800c83c <_strtod_l+0x58c>)
 800c76a:	4659      	mov	r1, fp
 800c76c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c770:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c774:	f7f3 ffda 	bl	800072c <__aeabi_ddiv>
 800c778:	e75d      	b.n	800c636 <_strtod_l+0x386>
 800c77a:	2300      	movs	r3, #0
 800c77c:	4650      	mov	r0, sl
 800c77e:	4659      	mov	r1, fp
 800c780:	461e      	mov	r6, r3
 800c782:	4f2f      	ldr	r7, [pc, #188]	@ (800c840 <_strtod_l+0x590>)
 800c784:	1124      	asrs	r4, r4, #4
 800c786:	2c01      	cmp	r4, #1
 800c788:	dc21      	bgt.n	800c7ce <_strtod_l+0x51e>
 800c78a:	b10b      	cbz	r3, 800c790 <_strtod_l+0x4e0>
 800c78c:	4682      	mov	sl, r0
 800c78e:	468b      	mov	fp, r1
 800c790:	492b      	ldr	r1, [pc, #172]	@ (800c840 <_strtod_l+0x590>)
 800c792:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c796:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c79a:	4652      	mov	r2, sl
 800c79c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a0:	465b      	mov	r3, fp
 800c7a2:	f7f3 fe99 	bl	80004d8 <__aeabi_dmul>
 800c7a6:	4b23      	ldr	r3, [pc, #140]	@ (800c834 <_strtod_l+0x584>)
 800c7a8:	460a      	mov	r2, r1
 800c7aa:	400b      	ands	r3, r1
 800c7ac:	4925      	ldr	r1, [pc, #148]	@ (800c844 <_strtod_l+0x594>)
 800c7ae:	4682      	mov	sl, r0
 800c7b0:	428b      	cmp	r3, r1
 800c7b2:	d898      	bhi.n	800c6e6 <_strtod_l+0x436>
 800c7b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c7b8:	428b      	cmp	r3, r1
 800c7ba:	bf86      	itte	hi
 800c7bc:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800c7c0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800c848 <_strtod_l+0x598>
 800c7c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	9308      	str	r3, [sp, #32]
 800c7cc:	e076      	b.n	800c8bc <_strtod_l+0x60c>
 800c7ce:	07e2      	lsls	r2, r4, #31
 800c7d0:	d504      	bpl.n	800c7dc <_strtod_l+0x52c>
 800c7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d6:	f7f3 fe7f 	bl	80004d8 <__aeabi_dmul>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	3601      	adds	r6, #1
 800c7de:	1064      	asrs	r4, r4, #1
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	e7d0      	b.n	800c786 <_strtod_l+0x4d6>
 800c7e4:	d0f0      	beq.n	800c7c8 <_strtod_l+0x518>
 800c7e6:	4264      	negs	r4, r4
 800c7e8:	f014 020f 	ands.w	r2, r4, #15
 800c7ec:	d00a      	beq.n	800c804 <_strtod_l+0x554>
 800c7ee:	4b13      	ldr	r3, [pc, #76]	@ (800c83c <_strtod_l+0x58c>)
 800c7f0:	4650      	mov	r0, sl
 800c7f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7f6:	4659      	mov	r1, fp
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f7f3 ff96 	bl	800072c <__aeabi_ddiv>
 800c800:	4682      	mov	sl, r0
 800c802:	468b      	mov	fp, r1
 800c804:	1124      	asrs	r4, r4, #4
 800c806:	d0df      	beq.n	800c7c8 <_strtod_l+0x518>
 800c808:	2c1f      	cmp	r4, #31
 800c80a:	dd1f      	ble.n	800c84c <_strtod_l+0x59c>
 800c80c:	2400      	movs	r4, #0
 800c80e:	46a0      	mov	r8, r4
 800c810:	46a1      	mov	r9, r4
 800c812:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c814:	2322      	movs	r3, #34	@ 0x22
 800c816:	9a05      	ldr	r2, [sp, #20]
 800c818:	f04f 0a00 	mov.w	sl, #0
 800c81c:	f04f 0b00 	mov.w	fp, #0
 800c820:	6013      	str	r3, [r2, #0]
 800c822:	e76b      	b.n	800c6fc <_strtod_l+0x44c>
 800c824:	0800fec3 	.word	0x0800fec3
 800c828:	08010088 	.word	0x08010088
 800c82c:	0800fec0 	.word	0x0800fec0
 800c830:	0800ffee 	.word	0x0800ffee
 800c834:	7ff00000 	.word	0x7ff00000
 800c838:	0800ffea 	.word	0x0800ffea
 800c83c:	08010110 	.word	0x08010110
 800c840:	080100e8 	.word	0x080100e8
 800c844:	7ca00000 	.word	0x7ca00000
 800c848:	7fefffff 	.word	0x7fefffff
 800c84c:	f014 0310 	ands.w	r3, r4, #16
 800c850:	bf18      	it	ne
 800c852:	236a      	movne	r3, #106	@ 0x6a
 800c854:	4650      	mov	r0, sl
 800c856:	9308      	str	r3, [sp, #32]
 800c858:	4659      	mov	r1, fp
 800c85a:	2300      	movs	r3, #0
 800c85c:	4e77      	ldr	r6, [pc, #476]	@ (800ca3c <_strtod_l+0x78c>)
 800c85e:	07e7      	lsls	r7, r4, #31
 800c860:	d504      	bpl.n	800c86c <_strtod_l+0x5bc>
 800c862:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c866:	f7f3 fe37 	bl	80004d8 <__aeabi_dmul>
 800c86a:	2301      	movs	r3, #1
 800c86c:	1064      	asrs	r4, r4, #1
 800c86e:	f106 0608 	add.w	r6, r6, #8
 800c872:	d1f4      	bne.n	800c85e <_strtod_l+0x5ae>
 800c874:	b10b      	cbz	r3, 800c87a <_strtod_l+0x5ca>
 800c876:	4682      	mov	sl, r0
 800c878:	468b      	mov	fp, r1
 800c87a:	9b08      	ldr	r3, [sp, #32]
 800c87c:	b1b3      	cbz	r3, 800c8ac <_strtod_l+0x5fc>
 800c87e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c882:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c886:	2b00      	cmp	r3, #0
 800c888:	4659      	mov	r1, fp
 800c88a:	dd0f      	ble.n	800c8ac <_strtod_l+0x5fc>
 800c88c:	2b1f      	cmp	r3, #31
 800c88e:	dd58      	ble.n	800c942 <_strtod_l+0x692>
 800c890:	2b34      	cmp	r3, #52	@ 0x34
 800c892:	bfd8      	it	le
 800c894:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800c898:	f04f 0a00 	mov.w	sl, #0
 800c89c:	bfcf      	iteee	gt
 800c89e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c8a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c8a6:	4093      	lslle	r3, r2
 800c8a8:	ea03 0b01 	andle.w	fp, r3, r1
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4650      	mov	r0, sl
 800c8b2:	4659      	mov	r1, fp
 800c8b4:	f7f4 f878 	bl	80009a8 <__aeabi_dcmpeq>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d1a7      	bne.n	800c80c <_strtod_l+0x55c>
 800c8bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8be:	464a      	mov	r2, r9
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c8c4:	462b      	mov	r3, r5
 800c8c6:	9805      	ldr	r0, [sp, #20]
 800c8c8:	f001 f98c 	bl	800dbe4 <__s2b>
 800c8cc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f43f af09 	beq.w	800c6e6 <_strtod_l+0x436>
 800c8d4:	2400      	movs	r4, #0
 800c8d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8da:	2a00      	cmp	r2, #0
 800c8dc:	eba3 0308 	sub.w	r3, r3, r8
 800c8e0:	bfa8      	it	ge
 800c8e2:	2300      	movge	r3, #0
 800c8e4:	46a0      	mov	r8, r4
 800c8e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c8e8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c8ec:	9316      	str	r3, [sp, #88]	@ 0x58
 800c8ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8f0:	9805      	ldr	r0, [sp, #20]
 800c8f2:	6859      	ldr	r1, [r3, #4]
 800c8f4:	f001 f8ce 	bl	800da94 <_Balloc>
 800c8f8:	4681      	mov	r9, r0
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	f43f aef7 	beq.w	800c6ee <_strtod_l+0x43e>
 800c900:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c902:	300c      	adds	r0, #12
 800c904:	691a      	ldr	r2, [r3, #16]
 800c906:	f103 010c 	add.w	r1, r3, #12
 800c90a:	3202      	adds	r2, #2
 800c90c:	0092      	lsls	r2, r2, #2
 800c90e:	f000 fc6a 	bl	800d1e6 <memcpy>
 800c912:	ab1c      	add	r3, sp, #112	@ 0x70
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	4652      	mov	r2, sl
 800c91c:	465b      	mov	r3, fp
 800c91e:	9805      	ldr	r0, [sp, #20]
 800c920:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c924:	f001 fc8a 	bl	800e23c <__d2b>
 800c928:	901a      	str	r0, [sp, #104]	@ 0x68
 800c92a:	2800      	cmp	r0, #0
 800c92c:	f43f aedf 	beq.w	800c6ee <_strtod_l+0x43e>
 800c930:	2101      	movs	r1, #1
 800c932:	9805      	ldr	r0, [sp, #20]
 800c934:	f001 f9ec 	bl	800dd10 <__i2b>
 800c938:	4680      	mov	r8, r0
 800c93a:	b948      	cbnz	r0, 800c950 <_strtod_l+0x6a0>
 800c93c:	f04f 0800 	mov.w	r8, #0
 800c940:	e6d5      	b.n	800c6ee <_strtod_l+0x43e>
 800c942:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c946:	fa02 f303 	lsl.w	r3, r2, r3
 800c94a:	ea03 0a0a 	and.w	sl, r3, sl
 800c94e:	e7ad      	b.n	800c8ac <_strtod_l+0x5fc>
 800c950:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c952:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c954:	2d00      	cmp	r5, #0
 800c956:	bfab      	itete	ge
 800c958:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c95a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c95c:	18ef      	addge	r7, r5, r3
 800c95e:	1b5e      	sublt	r6, r3, r5
 800c960:	9b08      	ldr	r3, [sp, #32]
 800c962:	bfa8      	it	ge
 800c964:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c966:	eba5 0503 	sub.w	r5, r5, r3
 800c96a:	4415      	add	r5, r2
 800c96c:	4b34      	ldr	r3, [pc, #208]	@ (800ca40 <_strtod_l+0x790>)
 800c96e:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800c972:	bfb8      	it	lt
 800c974:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c976:	429d      	cmp	r5, r3
 800c978:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c97c:	da50      	bge.n	800ca20 <_strtod_l+0x770>
 800c97e:	1b5b      	subs	r3, r3, r5
 800c980:	2b1f      	cmp	r3, #31
 800c982:	f04f 0101 	mov.w	r1, #1
 800c986:	eba2 0203 	sub.w	r2, r2, r3
 800c98a:	dc3d      	bgt.n	800ca08 <_strtod_l+0x758>
 800c98c:	fa01 f303 	lsl.w	r3, r1, r3
 800c990:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c992:	2300      	movs	r3, #0
 800c994:	9310      	str	r3, [sp, #64]	@ 0x40
 800c996:	18bd      	adds	r5, r7, r2
 800c998:	9b08      	ldr	r3, [sp, #32]
 800c99a:	42af      	cmp	r7, r5
 800c99c:	4416      	add	r6, r2
 800c99e:	441e      	add	r6, r3
 800c9a0:	463b      	mov	r3, r7
 800c9a2:	bfa8      	it	ge
 800c9a4:	462b      	movge	r3, r5
 800c9a6:	42b3      	cmp	r3, r6
 800c9a8:	bfa8      	it	ge
 800c9aa:	4633      	movge	r3, r6
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	bfc2      	ittt	gt
 800c9b0:	1aed      	subgt	r5, r5, r3
 800c9b2:	1af6      	subgt	r6, r6, r3
 800c9b4:	1aff      	subgt	r7, r7, r3
 800c9b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dd16      	ble.n	800c9ea <_strtod_l+0x73a>
 800c9bc:	4641      	mov	r1, r8
 800c9be:	461a      	mov	r2, r3
 800c9c0:	9805      	ldr	r0, [sp, #20]
 800c9c2:	f001 fa5d 	bl	800de80 <__pow5mult>
 800c9c6:	4680      	mov	r8, r0
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d0b7      	beq.n	800c93c <_strtod_l+0x68c>
 800c9cc:	4601      	mov	r1, r0
 800c9ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9d0:	9805      	ldr	r0, [sp, #20]
 800c9d2:	f001 f9b3 	bl	800dd3c <__multiply>
 800c9d6:	900a      	str	r0, [sp, #40]	@ 0x28
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f43f ae88 	beq.w	800c6ee <_strtod_l+0x43e>
 800c9de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9e0:	9805      	ldr	r0, [sp, #20]
 800c9e2:	f001 f897 	bl	800db14 <_Bfree>
 800c9e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9ea:	2d00      	cmp	r5, #0
 800c9ec:	dc1d      	bgt.n	800ca2a <_strtod_l+0x77a>
 800c9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	dd27      	ble.n	800ca44 <_strtod_l+0x794>
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c9f8:	9805      	ldr	r0, [sp, #20]
 800c9fa:	f001 fa41 	bl	800de80 <__pow5mult>
 800c9fe:	4681      	mov	r9, r0
 800ca00:	bb00      	cbnz	r0, 800ca44 <_strtod_l+0x794>
 800ca02:	f04f 0900 	mov.w	r9, #0
 800ca06:	e672      	b.n	800c6ee <_strtod_l+0x43e>
 800ca08:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ca0c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ca10:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ca14:	35e2      	adds	r5, #226	@ 0xe2
 800ca16:	fa01 f305 	lsl.w	r3, r1, r5
 800ca1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca1c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ca1e:	e7ba      	b.n	800c996 <_strtod_l+0x6e6>
 800ca20:	2300      	movs	r3, #0
 800ca22:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca24:	2301      	movs	r3, #1
 800ca26:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca28:	e7b5      	b.n	800c996 <_strtod_l+0x6e6>
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca2e:	9805      	ldr	r0, [sp, #20]
 800ca30:	f001 fa80 	bl	800df34 <__lshift>
 800ca34:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d1d9      	bne.n	800c9ee <_strtod_l+0x73e>
 800ca3a:	e658      	b.n	800c6ee <_strtod_l+0x43e>
 800ca3c:	080100b0 	.word	0x080100b0
 800ca40:	fffffc02 	.word	0xfffffc02
 800ca44:	2e00      	cmp	r6, #0
 800ca46:	dd07      	ble.n	800ca58 <_strtod_l+0x7a8>
 800ca48:	4649      	mov	r1, r9
 800ca4a:	4632      	mov	r2, r6
 800ca4c:	9805      	ldr	r0, [sp, #20]
 800ca4e:	f001 fa71 	bl	800df34 <__lshift>
 800ca52:	4681      	mov	r9, r0
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d0d4      	beq.n	800ca02 <_strtod_l+0x752>
 800ca58:	2f00      	cmp	r7, #0
 800ca5a:	dd08      	ble.n	800ca6e <_strtod_l+0x7be>
 800ca5c:	4641      	mov	r1, r8
 800ca5e:	463a      	mov	r2, r7
 800ca60:	9805      	ldr	r0, [sp, #20]
 800ca62:	f001 fa67 	bl	800df34 <__lshift>
 800ca66:	4680      	mov	r8, r0
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	f43f ae40 	beq.w	800c6ee <_strtod_l+0x43e>
 800ca6e:	464a      	mov	r2, r9
 800ca70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca72:	9805      	ldr	r0, [sp, #20]
 800ca74:	f001 fae6 	bl	800e044 <__mdiff>
 800ca78:	4604      	mov	r4, r0
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	f43f ae37 	beq.w	800c6ee <_strtod_l+0x43e>
 800ca80:	68c3      	ldr	r3, [r0, #12]
 800ca82:	4641      	mov	r1, r8
 800ca84:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca86:	2300      	movs	r3, #0
 800ca88:	60c3      	str	r3, [r0, #12]
 800ca8a:	f001 fabf 	bl	800e00c <__mcmp>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	da3d      	bge.n	800cb0e <_strtod_l+0x85e>
 800ca92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca94:	ea53 030a 	orrs.w	r3, r3, sl
 800ca98:	d163      	bne.n	800cb62 <_strtod_l+0x8b2>
 800ca9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d15f      	bne.n	800cb62 <_strtod_l+0x8b2>
 800caa2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800caa6:	0d1b      	lsrs	r3, r3, #20
 800caa8:	051b      	lsls	r3, r3, #20
 800caaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800caae:	d958      	bls.n	800cb62 <_strtod_l+0x8b2>
 800cab0:	6963      	ldr	r3, [r4, #20]
 800cab2:	b913      	cbnz	r3, 800caba <_strtod_l+0x80a>
 800cab4:	6923      	ldr	r3, [r4, #16]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	dd53      	ble.n	800cb62 <_strtod_l+0x8b2>
 800caba:	4621      	mov	r1, r4
 800cabc:	2201      	movs	r2, #1
 800cabe:	9805      	ldr	r0, [sp, #20]
 800cac0:	f001 fa38 	bl	800df34 <__lshift>
 800cac4:	4641      	mov	r1, r8
 800cac6:	4604      	mov	r4, r0
 800cac8:	f001 faa0 	bl	800e00c <__mcmp>
 800cacc:	2800      	cmp	r0, #0
 800cace:	dd48      	ble.n	800cb62 <_strtod_l+0x8b2>
 800cad0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cad4:	9a08      	ldr	r2, [sp, #32]
 800cad6:	0d1b      	lsrs	r3, r3, #20
 800cad8:	051b      	lsls	r3, r3, #20
 800cada:	2a00      	cmp	r2, #0
 800cadc:	d062      	beq.n	800cba4 <_strtod_l+0x8f4>
 800cade:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cae2:	d85f      	bhi.n	800cba4 <_strtod_l+0x8f4>
 800cae4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cae8:	f67f ae94 	bls.w	800c814 <_strtod_l+0x564>
 800caec:	4650      	mov	r0, sl
 800caee:	4659      	mov	r1, fp
 800caf0:	4ba3      	ldr	r3, [pc, #652]	@ (800cd80 <_strtod_l+0xad0>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	f7f3 fcf0 	bl	80004d8 <__aeabi_dmul>
 800caf8:	4ba2      	ldr	r3, [pc, #648]	@ (800cd84 <_strtod_l+0xad4>)
 800cafa:	4682      	mov	sl, r0
 800cafc:	400b      	ands	r3, r1
 800cafe:	468b      	mov	fp, r1
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f47f adff 	bne.w	800c704 <_strtod_l+0x454>
 800cb06:	2322      	movs	r3, #34	@ 0x22
 800cb08:	9a05      	ldr	r2, [sp, #20]
 800cb0a:	6013      	str	r3, [r2, #0]
 800cb0c:	e5fa      	b.n	800c704 <_strtod_l+0x454>
 800cb0e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cb12:	d165      	bne.n	800cbe0 <_strtod_l+0x930>
 800cb14:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cb16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb1a:	b35a      	cbz	r2, 800cb74 <_strtod_l+0x8c4>
 800cb1c:	4a9a      	ldr	r2, [pc, #616]	@ (800cd88 <_strtod_l+0xad8>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d12b      	bne.n	800cb7a <_strtod_l+0x8ca>
 800cb22:	9b08      	ldr	r3, [sp, #32]
 800cb24:	4651      	mov	r1, sl
 800cb26:	b303      	cbz	r3, 800cb6a <_strtod_l+0x8ba>
 800cb28:	465a      	mov	r2, fp
 800cb2a:	4b96      	ldr	r3, [pc, #600]	@ (800cd84 <_strtod_l+0xad4>)
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cb32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb36:	d81b      	bhi.n	800cb70 <_strtod_l+0x8c0>
 800cb38:	0d1b      	lsrs	r3, r3, #20
 800cb3a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb3e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb42:	4299      	cmp	r1, r3
 800cb44:	d119      	bne.n	800cb7a <_strtod_l+0x8ca>
 800cb46:	4b91      	ldr	r3, [pc, #580]	@ (800cd8c <_strtod_l+0xadc>)
 800cb48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d102      	bne.n	800cb54 <_strtod_l+0x8a4>
 800cb4e:	3101      	adds	r1, #1
 800cb50:	f43f adcd 	beq.w	800c6ee <_strtod_l+0x43e>
 800cb54:	f04f 0a00 	mov.w	sl, #0
 800cb58:	4b8a      	ldr	r3, [pc, #552]	@ (800cd84 <_strtod_l+0xad4>)
 800cb5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb5c:	401a      	ands	r2, r3
 800cb5e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cb62:	9b08      	ldr	r3, [sp, #32]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1c1      	bne.n	800caec <_strtod_l+0x83c>
 800cb68:	e5cc      	b.n	800c704 <_strtod_l+0x454>
 800cb6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb6e:	e7e8      	b.n	800cb42 <_strtod_l+0x892>
 800cb70:	4613      	mov	r3, r2
 800cb72:	e7e6      	b.n	800cb42 <_strtod_l+0x892>
 800cb74:	ea53 030a 	orrs.w	r3, r3, sl
 800cb78:	d0aa      	beq.n	800cad0 <_strtod_l+0x820>
 800cb7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb7c:	b1db      	cbz	r3, 800cbb6 <_strtod_l+0x906>
 800cb7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb80:	4213      	tst	r3, r2
 800cb82:	d0ee      	beq.n	800cb62 <_strtod_l+0x8b2>
 800cb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb86:	4650      	mov	r0, sl
 800cb88:	4659      	mov	r1, fp
 800cb8a:	9a08      	ldr	r2, [sp, #32]
 800cb8c:	b1bb      	cbz	r3, 800cbbe <_strtod_l+0x90e>
 800cb8e:	f7ff fb6c 	bl	800c26a <sulp>
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb9a:	f7f3 fae7 	bl	800016c <__adddf3>
 800cb9e:	4682      	mov	sl, r0
 800cba0:	468b      	mov	fp, r1
 800cba2:	e7de      	b.n	800cb62 <_strtod_l+0x8b2>
 800cba4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cba8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cbac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cbb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cbb4:	e7d5      	b.n	800cb62 <_strtod_l+0x8b2>
 800cbb6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cbb8:	ea13 0f0a 	tst.w	r3, sl
 800cbbc:	e7e1      	b.n	800cb82 <_strtod_l+0x8d2>
 800cbbe:	f7ff fb54 	bl	800c26a <sulp>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbca:	f7f3 facd 	bl	8000168 <__aeabi_dsub>
 800cbce:	2200      	movs	r2, #0
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4682      	mov	sl, r0
 800cbd4:	468b      	mov	fp, r1
 800cbd6:	f7f3 fee7 	bl	80009a8 <__aeabi_dcmpeq>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	d0c1      	beq.n	800cb62 <_strtod_l+0x8b2>
 800cbde:	e619      	b.n	800c814 <_strtod_l+0x564>
 800cbe0:	4641      	mov	r1, r8
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f001 fb82 	bl	800e2ec <__ratio>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cbee:	4606      	mov	r6, r0
 800cbf0:	460f      	mov	r7, r1
 800cbf2:	f7f3 feed 	bl	80009d0 <__aeabi_dcmple>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d06d      	beq.n	800ccd6 <_strtod_l+0xa26>
 800cbfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d178      	bne.n	800ccf2 <_strtod_l+0xa42>
 800cc00:	f1ba 0f00 	cmp.w	sl, #0
 800cc04:	d156      	bne.n	800ccb4 <_strtod_l+0xa04>
 800cc06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d158      	bne.n	800ccc2 <_strtod_l+0xa12>
 800cc10:	2200      	movs	r2, #0
 800cc12:	4630      	mov	r0, r6
 800cc14:	4639      	mov	r1, r7
 800cc16:	4b5e      	ldr	r3, [pc, #376]	@ (800cd90 <_strtod_l+0xae0>)
 800cc18:	f7f3 fed0 	bl	80009bc <__aeabi_dcmplt>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d157      	bne.n	800ccd0 <_strtod_l+0xa20>
 800cc20:	4630      	mov	r0, r6
 800cc22:	4639      	mov	r1, r7
 800cc24:	2200      	movs	r2, #0
 800cc26:	4b5b      	ldr	r3, [pc, #364]	@ (800cd94 <_strtod_l+0xae4>)
 800cc28:	f7f3 fc56 	bl	80004d8 <__aeabi_dmul>
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	460f      	mov	r7, r1
 800cc30:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cc34:	9606      	str	r6, [sp, #24]
 800cc36:	9307      	str	r3, [sp, #28]
 800cc38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc3c:	4d51      	ldr	r5, [pc, #324]	@ (800cd84 <_strtod_l+0xad4>)
 800cc3e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc44:	401d      	ands	r5, r3
 800cc46:	4b54      	ldr	r3, [pc, #336]	@ (800cd98 <_strtod_l+0xae8>)
 800cc48:	429d      	cmp	r5, r3
 800cc4a:	f040 80ab 	bne.w	800cda4 <_strtod_l+0xaf4>
 800cc4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc50:	4650      	mov	r0, sl
 800cc52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cc56:	4659      	mov	r1, fp
 800cc58:	f001 fa88 	bl	800e16c <__ulp>
 800cc5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc60:	f7f3 fc3a 	bl	80004d8 <__aeabi_dmul>
 800cc64:	4652      	mov	r2, sl
 800cc66:	465b      	mov	r3, fp
 800cc68:	f7f3 fa80 	bl	800016c <__adddf3>
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	4945      	ldr	r1, [pc, #276]	@ (800cd84 <_strtod_l+0xad4>)
 800cc70:	4a4a      	ldr	r2, [pc, #296]	@ (800cd9c <_strtod_l+0xaec>)
 800cc72:	4019      	ands	r1, r3
 800cc74:	4291      	cmp	r1, r2
 800cc76:	4682      	mov	sl, r0
 800cc78:	d942      	bls.n	800cd00 <_strtod_l+0xa50>
 800cc7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc7c:	4b43      	ldr	r3, [pc, #268]	@ (800cd8c <_strtod_l+0xadc>)
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d103      	bne.n	800cc8a <_strtod_l+0x9da>
 800cc82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc84:	3301      	adds	r3, #1
 800cc86:	f43f ad32 	beq.w	800c6ee <_strtod_l+0x43e>
 800cc8a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cc8e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800cd8c <_strtod_l+0xadc>
 800cc92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc94:	9805      	ldr	r0, [sp, #20]
 800cc96:	f000 ff3d 	bl	800db14 <_Bfree>
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	9805      	ldr	r0, [sp, #20]
 800cc9e:	f000 ff39 	bl	800db14 <_Bfree>
 800cca2:	4641      	mov	r1, r8
 800cca4:	9805      	ldr	r0, [sp, #20]
 800cca6:	f000 ff35 	bl	800db14 <_Bfree>
 800ccaa:	4621      	mov	r1, r4
 800ccac:	9805      	ldr	r0, [sp, #20]
 800ccae:	f000 ff31 	bl	800db14 <_Bfree>
 800ccb2:	e61c      	b.n	800c8ee <_strtod_l+0x63e>
 800ccb4:	f1ba 0f01 	cmp.w	sl, #1
 800ccb8:	d103      	bne.n	800ccc2 <_strtod_l+0xa12>
 800ccba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f43f ada9 	beq.w	800c814 <_strtod_l+0x564>
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	4b36      	ldr	r3, [pc, #216]	@ (800cda0 <_strtod_l+0xaf0>)
 800ccc6:	2600      	movs	r6, #0
 800ccc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cccc:	4f30      	ldr	r7, [pc, #192]	@ (800cd90 <_strtod_l+0xae0>)
 800ccce:	e7b3      	b.n	800cc38 <_strtod_l+0x988>
 800ccd0:	2600      	movs	r6, #0
 800ccd2:	4f30      	ldr	r7, [pc, #192]	@ (800cd94 <_strtod_l+0xae4>)
 800ccd4:	e7ac      	b.n	800cc30 <_strtod_l+0x980>
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	4639      	mov	r1, r7
 800ccda:	4b2e      	ldr	r3, [pc, #184]	@ (800cd94 <_strtod_l+0xae4>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f7f3 fbfb 	bl	80004d8 <__aeabi_dmul>
 800cce2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cce4:	4606      	mov	r6, r0
 800cce6:	460f      	mov	r7, r1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0a1      	beq.n	800cc30 <_strtod_l+0x980>
 800ccec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ccf0:	e7a2      	b.n	800cc38 <_strtod_l+0x988>
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	4b26      	ldr	r3, [pc, #152]	@ (800cd90 <_strtod_l+0xae0>)
 800ccf6:	4616      	mov	r6, r2
 800ccf8:	461f      	mov	r7, r3
 800ccfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ccfe:	e79b      	b.n	800cc38 <_strtod_l+0x988>
 800cd00:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cd04:	9b08      	ldr	r3, [sp, #32]
 800cd06:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1c1      	bne.n	800cc92 <_strtod_l+0x9e2>
 800cd0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd12:	0d1b      	lsrs	r3, r3, #20
 800cd14:	051b      	lsls	r3, r3, #20
 800cd16:	429d      	cmp	r5, r3
 800cd18:	d1bb      	bne.n	800cc92 <_strtod_l+0x9e2>
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	4639      	mov	r1, r7
 800cd1e:	f7f4 fa27 	bl	8001170 <__aeabi_d2lz>
 800cd22:	f7f3 fbab 	bl	800047c <__aeabi_l2d>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	4639      	mov	r1, r7
 800cd2e:	f7f3 fa1b 	bl	8000168 <__aeabi_dsub>
 800cd32:	460b      	mov	r3, r1
 800cd34:	4602      	mov	r2, r0
 800cd36:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cd3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cd3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd40:	ea46 060a 	orr.w	r6, r6, sl
 800cd44:	431e      	orrs	r6, r3
 800cd46:	d06a      	beq.n	800ce1e <_strtod_l+0xb6e>
 800cd48:	a309      	add	r3, pc, #36	@ (adr r3, 800cd70 <_strtod_l+0xac0>)
 800cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4e:	f7f3 fe35 	bl	80009bc <__aeabi_dcmplt>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	f47f acd6 	bne.w	800c704 <_strtod_l+0x454>
 800cd58:	a307      	add	r3, pc, #28	@ (adr r3, 800cd78 <_strtod_l+0xac8>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd62:	f7f3 fe49 	bl	80009f8 <__aeabi_dcmpgt>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d093      	beq.n	800cc92 <_strtod_l+0x9e2>
 800cd6a:	e4cb      	b.n	800c704 <_strtod_l+0x454>
 800cd6c:	f3af 8000 	nop.w
 800cd70:	94a03595 	.word	0x94a03595
 800cd74:	3fdfffff 	.word	0x3fdfffff
 800cd78:	35afe535 	.word	0x35afe535
 800cd7c:	3fe00000 	.word	0x3fe00000
 800cd80:	39500000 	.word	0x39500000
 800cd84:	7ff00000 	.word	0x7ff00000
 800cd88:	000fffff 	.word	0x000fffff
 800cd8c:	7fefffff 	.word	0x7fefffff
 800cd90:	3ff00000 	.word	0x3ff00000
 800cd94:	3fe00000 	.word	0x3fe00000
 800cd98:	7fe00000 	.word	0x7fe00000
 800cd9c:	7c9fffff 	.word	0x7c9fffff
 800cda0:	bff00000 	.word	0xbff00000
 800cda4:	9b08      	ldr	r3, [sp, #32]
 800cda6:	b323      	cbz	r3, 800cdf2 <_strtod_l+0xb42>
 800cda8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cdac:	d821      	bhi.n	800cdf2 <_strtod_l+0xb42>
 800cdae:	a328      	add	r3, pc, #160	@ (adr r3, 800ce50 <_strtod_l+0xba0>)
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	f7f3 fe0a 	bl	80009d0 <__aeabi_dcmple>
 800cdbc:	b1a0      	cbz	r0, 800cde8 <_strtod_l+0xb38>
 800cdbe:	4639      	mov	r1, r7
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f7f3 fe4b 	bl	8000a5c <__aeabi_d2uiz>
 800cdc6:	2801      	cmp	r0, #1
 800cdc8:	bf38      	it	cc
 800cdca:	2001      	movcc	r0, #1
 800cdcc:	f7f3 fb0a 	bl	80003e4 <__aeabi_ui2d>
 800cdd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	460f      	mov	r7, r1
 800cdd6:	b9fb      	cbnz	r3, 800ce18 <_strtod_l+0xb68>
 800cdd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cddc:	9014      	str	r0, [sp, #80]	@ 0x50
 800cdde:	9315      	str	r3, [sp, #84]	@ 0x54
 800cde0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cde4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cde8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cdea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cdee:	1b5b      	subs	r3, r3, r5
 800cdf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cdf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdf6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cdfa:	f001 f9b7 	bl	800e16c <__ulp>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	460b      	mov	r3, r1
 800ce02:	4650      	mov	r0, sl
 800ce04:	4659      	mov	r1, fp
 800ce06:	f7f3 fb67 	bl	80004d8 <__aeabi_dmul>
 800ce0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ce0e:	f7f3 f9ad 	bl	800016c <__adddf3>
 800ce12:	4682      	mov	sl, r0
 800ce14:	468b      	mov	fp, r1
 800ce16:	e775      	b.n	800cd04 <_strtod_l+0xa54>
 800ce18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ce1c:	e7e0      	b.n	800cde0 <_strtod_l+0xb30>
 800ce1e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce58 <_strtod_l+0xba8>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	f7f3 fdca 	bl	80009bc <__aeabi_dcmplt>
 800ce28:	e79d      	b.n	800cd66 <_strtod_l+0xab6>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ce2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce30:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	f7ff ba79 	b.w	800c32a <_strtod_l+0x7a>
 800ce38:	2a65      	cmp	r2, #101	@ 0x65
 800ce3a:	f43f ab72 	beq.w	800c522 <_strtod_l+0x272>
 800ce3e:	2a45      	cmp	r2, #69	@ 0x45
 800ce40:	f43f ab6f 	beq.w	800c522 <_strtod_l+0x272>
 800ce44:	2301      	movs	r3, #1
 800ce46:	f7ff bbaa 	b.w	800c59e <_strtod_l+0x2ee>
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w
 800ce50:	ffc00000 	.word	0xffc00000
 800ce54:	41dfffff 	.word	0x41dfffff
 800ce58:	94a03595 	.word	0x94a03595
 800ce5c:	3fcfffff 	.word	0x3fcfffff

0800ce60 <strtod>:
 800ce60:	460a      	mov	r2, r1
 800ce62:	4601      	mov	r1, r0
 800ce64:	4802      	ldr	r0, [pc, #8]	@ (800ce70 <strtod+0x10>)
 800ce66:	4b03      	ldr	r3, [pc, #12]	@ (800ce74 <strtod+0x14>)
 800ce68:	6800      	ldr	r0, [r0, #0]
 800ce6a:	f7ff ba21 	b.w	800c2b0 <_strtod_l>
 800ce6e:	bf00      	nop
 800ce70:	200002f8 	.word	0x200002f8
 800ce74:	2000018c 	.word	0x2000018c

0800ce78 <gcvt>:
 800ce78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce7a:	461c      	mov	r4, r3
 800ce7c:	4615      	mov	r5, r2
 800ce7e:	2300      	movs	r3, #0
 800ce80:	2200      	movs	r2, #0
 800ce82:	b085      	sub	sp, #20
 800ce84:	4606      	mov	r6, r0
 800ce86:	460f      	mov	r7, r1
 800ce88:	f7f3 fd98 	bl	80009bc <__aeabi_dcmplt>
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	b118      	cbz	r0, 800ce98 <gcvt+0x20>
 800ce90:	222d      	movs	r2, #45	@ 0x2d
 800ce92:	3d01      	subs	r5, #1
 800ce94:	f803 2b01 	strb.w	r2, [r3], #1
 800ce98:	2267      	movs	r2, #103	@ 0x67
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	e9cd 5300 	strd	r5, r3, [sp]
 800cea0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cea4:	4905      	ldr	r1, [pc, #20]	@ (800cebc <gcvt+0x44>)
 800cea6:	4632      	mov	r2, r6
 800cea8:	463b      	mov	r3, r7
 800ceaa:	6808      	ldr	r0, [r1, #0]
 800ceac:	f001 fb34 	bl	800e518 <_gcvt>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	bf18      	it	ne
 800ceb4:	4620      	movne	r0, r4
 800ceb6:	b005      	add	sp, #20
 800ceb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceba:	bf00      	nop
 800cebc:	200002f8 	.word	0x200002f8

0800cec0 <std>:
 800cec0:	2300      	movs	r3, #0
 800cec2:	b510      	push	{r4, lr}
 800cec4:	4604      	mov	r4, r0
 800cec6:	e9c0 3300 	strd	r3, r3, [r0]
 800ceca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cece:	6083      	str	r3, [r0, #8]
 800ced0:	8181      	strh	r1, [r0, #12]
 800ced2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ced4:	81c2      	strh	r2, [r0, #14]
 800ced6:	6183      	str	r3, [r0, #24]
 800ced8:	4619      	mov	r1, r3
 800ceda:	2208      	movs	r2, #8
 800cedc:	305c      	adds	r0, #92	@ 0x5c
 800cede:	f000 f8f4 	bl	800d0ca <memset>
 800cee2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf18 <std+0x58>)
 800cee4:	6224      	str	r4, [r4, #32]
 800cee6:	6263      	str	r3, [r4, #36]	@ 0x24
 800cee8:	4b0c      	ldr	r3, [pc, #48]	@ (800cf1c <std+0x5c>)
 800ceea:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ceec:	4b0c      	ldr	r3, [pc, #48]	@ (800cf20 <std+0x60>)
 800ceee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cef0:	4b0c      	ldr	r3, [pc, #48]	@ (800cf24 <std+0x64>)
 800cef2:	6323      	str	r3, [r4, #48]	@ 0x30
 800cef4:	4b0c      	ldr	r3, [pc, #48]	@ (800cf28 <std+0x68>)
 800cef6:	429c      	cmp	r4, r3
 800cef8:	d006      	beq.n	800cf08 <std+0x48>
 800cefa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cefe:	4294      	cmp	r4, r2
 800cf00:	d002      	beq.n	800cf08 <std+0x48>
 800cf02:	33d0      	adds	r3, #208	@ 0xd0
 800cf04:	429c      	cmp	r4, r3
 800cf06:	d105      	bne.n	800cf14 <std+0x54>
 800cf08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf10:	f000 b966 	b.w	800d1e0 <__retarget_lock_init_recursive>
 800cf14:	bd10      	pop	{r4, pc}
 800cf16:	bf00      	nop
 800cf18:	0800d045 	.word	0x0800d045
 800cf1c:	0800d067 	.word	0x0800d067
 800cf20:	0800d09f 	.word	0x0800d09f
 800cf24:	0800d0c3 	.word	0x0800d0c3
 800cf28:	2000174c 	.word	0x2000174c

0800cf2c <stdio_exit_handler>:
 800cf2c:	4a02      	ldr	r2, [pc, #8]	@ (800cf38 <stdio_exit_handler+0xc>)
 800cf2e:	4903      	ldr	r1, [pc, #12]	@ (800cf3c <stdio_exit_handler+0x10>)
 800cf30:	4803      	ldr	r0, [pc, #12]	@ (800cf40 <stdio_exit_handler+0x14>)
 800cf32:	f000 b869 	b.w	800d008 <_fwalk_sglue>
 800cf36:	bf00      	nop
 800cf38:	20000180 	.word	0x20000180
 800cf3c:	0800e7b9 	.word	0x0800e7b9
 800cf40:	200002fc 	.word	0x200002fc

0800cf44 <cleanup_stdio>:
 800cf44:	6841      	ldr	r1, [r0, #4]
 800cf46:	4b0c      	ldr	r3, [pc, #48]	@ (800cf78 <cleanup_stdio+0x34>)
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	4299      	cmp	r1, r3
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	d001      	beq.n	800cf54 <cleanup_stdio+0x10>
 800cf50:	f001 fc32 	bl	800e7b8 <_fflush_r>
 800cf54:	68a1      	ldr	r1, [r4, #8]
 800cf56:	4b09      	ldr	r3, [pc, #36]	@ (800cf7c <cleanup_stdio+0x38>)
 800cf58:	4299      	cmp	r1, r3
 800cf5a:	d002      	beq.n	800cf62 <cleanup_stdio+0x1e>
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f001 fc2b 	bl	800e7b8 <_fflush_r>
 800cf62:	68e1      	ldr	r1, [r4, #12]
 800cf64:	4b06      	ldr	r3, [pc, #24]	@ (800cf80 <cleanup_stdio+0x3c>)
 800cf66:	4299      	cmp	r1, r3
 800cf68:	d004      	beq.n	800cf74 <cleanup_stdio+0x30>
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf70:	f001 bc22 	b.w	800e7b8 <_fflush_r>
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	bf00      	nop
 800cf78:	2000174c 	.word	0x2000174c
 800cf7c:	200017b4 	.word	0x200017b4
 800cf80:	2000181c 	.word	0x2000181c

0800cf84 <global_stdio_init.part.0>:
 800cf84:	b510      	push	{r4, lr}
 800cf86:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb4 <global_stdio_init.part.0+0x30>)
 800cf88:	4c0b      	ldr	r4, [pc, #44]	@ (800cfb8 <global_stdio_init.part.0+0x34>)
 800cf8a:	4a0c      	ldr	r2, [pc, #48]	@ (800cfbc <global_stdio_init.part.0+0x38>)
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	601a      	str	r2, [r3, #0]
 800cf90:	2104      	movs	r1, #4
 800cf92:	2200      	movs	r2, #0
 800cf94:	f7ff ff94 	bl	800cec0 <std>
 800cf98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	2109      	movs	r1, #9
 800cfa0:	f7ff ff8e 	bl	800cec0 <std>
 800cfa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfae:	2112      	movs	r1, #18
 800cfb0:	f7ff bf86 	b.w	800cec0 <std>
 800cfb4:	20001884 	.word	0x20001884
 800cfb8:	2000174c 	.word	0x2000174c
 800cfbc:	0800cf2d 	.word	0x0800cf2d

0800cfc0 <__sfp_lock_acquire>:
 800cfc0:	4801      	ldr	r0, [pc, #4]	@ (800cfc8 <__sfp_lock_acquire+0x8>)
 800cfc2:	f000 b90e 	b.w	800d1e2 <__retarget_lock_acquire_recursive>
 800cfc6:	bf00      	nop
 800cfc8:	2000188d 	.word	0x2000188d

0800cfcc <__sfp_lock_release>:
 800cfcc:	4801      	ldr	r0, [pc, #4]	@ (800cfd4 <__sfp_lock_release+0x8>)
 800cfce:	f000 b909 	b.w	800d1e4 <__retarget_lock_release_recursive>
 800cfd2:	bf00      	nop
 800cfd4:	2000188d 	.word	0x2000188d

0800cfd8 <__sinit>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	4604      	mov	r4, r0
 800cfdc:	f7ff fff0 	bl	800cfc0 <__sfp_lock_acquire>
 800cfe0:	6a23      	ldr	r3, [r4, #32]
 800cfe2:	b11b      	cbz	r3, 800cfec <__sinit+0x14>
 800cfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe8:	f7ff bff0 	b.w	800cfcc <__sfp_lock_release>
 800cfec:	4b04      	ldr	r3, [pc, #16]	@ (800d000 <__sinit+0x28>)
 800cfee:	6223      	str	r3, [r4, #32]
 800cff0:	4b04      	ldr	r3, [pc, #16]	@ (800d004 <__sinit+0x2c>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1f5      	bne.n	800cfe4 <__sinit+0xc>
 800cff8:	f7ff ffc4 	bl	800cf84 <global_stdio_init.part.0>
 800cffc:	e7f2      	b.n	800cfe4 <__sinit+0xc>
 800cffe:	bf00      	nop
 800d000:	0800cf45 	.word	0x0800cf45
 800d004:	20001884 	.word	0x20001884

0800d008 <_fwalk_sglue>:
 800d008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d00c:	4607      	mov	r7, r0
 800d00e:	4688      	mov	r8, r1
 800d010:	4614      	mov	r4, r2
 800d012:	2600      	movs	r6, #0
 800d014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d018:	f1b9 0901 	subs.w	r9, r9, #1
 800d01c:	d505      	bpl.n	800d02a <_fwalk_sglue+0x22>
 800d01e:	6824      	ldr	r4, [r4, #0]
 800d020:	2c00      	cmp	r4, #0
 800d022:	d1f7      	bne.n	800d014 <_fwalk_sglue+0xc>
 800d024:	4630      	mov	r0, r6
 800d026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d02a:	89ab      	ldrh	r3, [r5, #12]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d907      	bls.n	800d040 <_fwalk_sglue+0x38>
 800d030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d034:	3301      	adds	r3, #1
 800d036:	d003      	beq.n	800d040 <_fwalk_sglue+0x38>
 800d038:	4629      	mov	r1, r5
 800d03a:	4638      	mov	r0, r7
 800d03c:	47c0      	blx	r8
 800d03e:	4306      	orrs	r6, r0
 800d040:	3568      	adds	r5, #104	@ 0x68
 800d042:	e7e9      	b.n	800d018 <_fwalk_sglue+0x10>

0800d044 <__sread>:
 800d044:	b510      	push	{r4, lr}
 800d046:	460c      	mov	r4, r1
 800d048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04c:	f000 f87a 	bl	800d144 <_read_r>
 800d050:	2800      	cmp	r0, #0
 800d052:	bfab      	itete	ge
 800d054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d056:	89a3      	ldrhlt	r3, [r4, #12]
 800d058:	181b      	addge	r3, r3, r0
 800d05a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d05e:	bfac      	ite	ge
 800d060:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d062:	81a3      	strhlt	r3, [r4, #12]
 800d064:	bd10      	pop	{r4, pc}

0800d066 <__swrite>:
 800d066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d06a:	461f      	mov	r7, r3
 800d06c:	898b      	ldrh	r3, [r1, #12]
 800d06e:	4605      	mov	r5, r0
 800d070:	05db      	lsls	r3, r3, #23
 800d072:	460c      	mov	r4, r1
 800d074:	4616      	mov	r6, r2
 800d076:	d505      	bpl.n	800d084 <__swrite+0x1e>
 800d078:	2302      	movs	r3, #2
 800d07a:	2200      	movs	r2, #0
 800d07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d080:	f000 f84e 	bl	800d120 <_lseek_r>
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	4632      	mov	r2, r6
 800d088:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d08c:	81a3      	strh	r3, [r4, #12]
 800d08e:	4628      	mov	r0, r5
 800d090:	463b      	mov	r3, r7
 800d092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d09a:	f000 b865 	b.w	800d168 <_write_r>

0800d09e <__sseek>:
 800d09e:	b510      	push	{r4, lr}
 800d0a0:	460c      	mov	r4, r1
 800d0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a6:	f000 f83b 	bl	800d120 <_lseek_r>
 800d0aa:	1c43      	adds	r3, r0, #1
 800d0ac:	89a3      	ldrh	r3, [r4, #12]
 800d0ae:	bf15      	itete	ne
 800d0b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0ba:	81a3      	strheq	r3, [r4, #12]
 800d0bc:	bf18      	it	ne
 800d0be:	81a3      	strhne	r3, [r4, #12]
 800d0c0:	bd10      	pop	{r4, pc}

0800d0c2 <__sclose>:
 800d0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c6:	f000 b81b 	b.w	800d100 <_close_r>

0800d0ca <memset>:
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	4402      	add	r2, r0
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d100      	bne.n	800d0d4 <memset+0xa>
 800d0d2:	4770      	bx	lr
 800d0d4:	f803 1b01 	strb.w	r1, [r3], #1
 800d0d8:	e7f9      	b.n	800d0ce <memset+0x4>

0800d0da <strncmp>:
 800d0da:	b510      	push	{r4, lr}
 800d0dc:	b16a      	cbz	r2, 800d0fa <strncmp+0x20>
 800d0de:	3901      	subs	r1, #1
 800d0e0:	1884      	adds	r4, r0, r2
 800d0e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d103      	bne.n	800d0f6 <strncmp+0x1c>
 800d0ee:	42a0      	cmp	r0, r4
 800d0f0:	d001      	beq.n	800d0f6 <strncmp+0x1c>
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	d1f5      	bne.n	800d0e2 <strncmp+0x8>
 800d0f6:	1ad0      	subs	r0, r2, r3
 800d0f8:	bd10      	pop	{r4, pc}
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	e7fc      	b.n	800d0f8 <strncmp+0x1e>
	...

0800d100 <_close_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	2300      	movs	r3, #0
 800d104:	4d05      	ldr	r5, [pc, #20]	@ (800d11c <_close_r+0x1c>)
 800d106:	4604      	mov	r4, r0
 800d108:	4608      	mov	r0, r1
 800d10a:	602b      	str	r3, [r5, #0]
 800d10c:	f7f5 f94b 	bl	80023a6 <_close>
 800d110:	1c43      	adds	r3, r0, #1
 800d112:	d102      	bne.n	800d11a <_close_r+0x1a>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	b103      	cbz	r3, 800d11a <_close_r+0x1a>
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	20001888 	.word	0x20001888

0800d120 <_lseek_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4604      	mov	r4, r0
 800d124:	4608      	mov	r0, r1
 800d126:	4611      	mov	r1, r2
 800d128:	2200      	movs	r2, #0
 800d12a:	4d05      	ldr	r5, [pc, #20]	@ (800d140 <_lseek_r+0x20>)
 800d12c:	602a      	str	r2, [r5, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	f7f5 f95d 	bl	80023ee <_lseek>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_lseek_r+0x1e>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_lseek_r+0x1e>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	20001888 	.word	0x20001888

0800d144 <_read_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4604      	mov	r4, r0
 800d148:	4608      	mov	r0, r1
 800d14a:	4611      	mov	r1, r2
 800d14c:	2200      	movs	r2, #0
 800d14e:	4d05      	ldr	r5, [pc, #20]	@ (800d164 <_read_r+0x20>)
 800d150:	602a      	str	r2, [r5, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	f7f5 f8ee 	bl	8002334 <_read>
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	d102      	bne.n	800d162 <_read_r+0x1e>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	b103      	cbz	r3, 800d162 <_read_r+0x1e>
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	20001888 	.word	0x20001888

0800d168 <_write_r>:
 800d168:	b538      	push	{r3, r4, r5, lr}
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	2200      	movs	r2, #0
 800d172:	4d05      	ldr	r5, [pc, #20]	@ (800d188 <_write_r+0x20>)
 800d174:	602a      	str	r2, [r5, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	f7f5 f8f9 	bl	800236e <_write>
 800d17c:	1c43      	adds	r3, r0, #1
 800d17e:	d102      	bne.n	800d186 <_write_r+0x1e>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	b103      	cbz	r3, 800d186 <_write_r+0x1e>
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	bd38      	pop	{r3, r4, r5, pc}
 800d188:	20001888 	.word	0x20001888

0800d18c <__errno>:
 800d18c:	4b01      	ldr	r3, [pc, #4]	@ (800d194 <__errno+0x8>)
 800d18e:	6818      	ldr	r0, [r3, #0]
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	200002f8 	.word	0x200002f8

0800d198 <__libc_init_array>:
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	2600      	movs	r6, #0
 800d19c:	4d0c      	ldr	r5, [pc, #48]	@ (800d1d0 <__libc_init_array+0x38>)
 800d19e:	4c0d      	ldr	r4, [pc, #52]	@ (800d1d4 <__libc_init_array+0x3c>)
 800d1a0:	1b64      	subs	r4, r4, r5
 800d1a2:	10a4      	asrs	r4, r4, #2
 800d1a4:	42a6      	cmp	r6, r4
 800d1a6:	d109      	bne.n	800d1bc <__libc_init_array+0x24>
 800d1a8:	f002 fe30 	bl	800fe0c <_init>
 800d1ac:	2600      	movs	r6, #0
 800d1ae:	4d0a      	ldr	r5, [pc, #40]	@ (800d1d8 <__libc_init_array+0x40>)
 800d1b0:	4c0a      	ldr	r4, [pc, #40]	@ (800d1dc <__libc_init_array+0x44>)
 800d1b2:	1b64      	subs	r4, r4, r5
 800d1b4:	10a4      	asrs	r4, r4, #2
 800d1b6:	42a6      	cmp	r6, r4
 800d1b8:	d105      	bne.n	800d1c6 <__libc_init_array+0x2e>
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1c0:	4798      	blx	r3
 800d1c2:	3601      	adds	r6, #1
 800d1c4:	e7ee      	b.n	800d1a4 <__libc_init_array+0xc>
 800d1c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ca:	4798      	blx	r3
 800d1cc:	3601      	adds	r6, #1
 800d1ce:	e7f2      	b.n	800d1b6 <__libc_init_array+0x1e>
 800d1d0:	080102e4 	.word	0x080102e4
 800d1d4:	080102e4 	.word	0x080102e4
 800d1d8:	080102e4 	.word	0x080102e4
 800d1dc:	080102e8 	.word	0x080102e8

0800d1e0 <__retarget_lock_init_recursive>:
 800d1e0:	4770      	bx	lr

0800d1e2 <__retarget_lock_acquire_recursive>:
 800d1e2:	4770      	bx	lr

0800d1e4 <__retarget_lock_release_recursive>:
 800d1e4:	4770      	bx	lr

0800d1e6 <memcpy>:
 800d1e6:	440a      	add	r2, r1
 800d1e8:	4291      	cmp	r1, r2
 800d1ea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1ee:	d100      	bne.n	800d1f2 <memcpy+0xc>
 800d1f0:	4770      	bx	lr
 800d1f2:	b510      	push	{r4, lr}
 800d1f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1f8:	4291      	cmp	r1, r2
 800d1fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1fe:	d1f9      	bne.n	800d1f4 <memcpy+0xe>
 800d200:	bd10      	pop	{r4, pc}
	...

0800d204 <nan>:
 800d204:	2000      	movs	r0, #0
 800d206:	4901      	ldr	r1, [pc, #4]	@ (800d20c <nan+0x8>)
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	7ff80000 	.word	0x7ff80000

0800d210 <_free_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4605      	mov	r5, r0
 800d214:	2900      	cmp	r1, #0
 800d216:	d040      	beq.n	800d29a <_free_r+0x8a>
 800d218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d21c:	1f0c      	subs	r4, r1, #4
 800d21e:	2b00      	cmp	r3, #0
 800d220:	bfb8      	it	lt
 800d222:	18e4      	addlt	r4, r4, r3
 800d224:	f000 fc2a 	bl	800da7c <__malloc_lock>
 800d228:	4a1c      	ldr	r2, [pc, #112]	@ (800d29c <_free_r+0x8c>)
 800d22a:	6813      	ldr	r3, [r2, #0]
 800d22c:	b933      	cbnz	r3, 800d23c <_free_r+0x2c>
 800d22e:	6063      	str	r3, [r4, #4]
 800d230:	6014      	str	r4, [r2, #0]
 800d232:	4628      	mov	r0, r5
 800d234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d238:	f000 bc26 	b.w	800da88 <__malloc_unlock>
 800d23c:	42a3      	cmp	r3, r4
 800d23e:	d908      	bls.n	800d252 <_free_r+0x42>
 800d240:	6820      	ldr	r0, [r4, #0]
 800d242:	1821      	adds	r1, r4, r0
 800d244:	428b      	cmp	r3, r1
 800d246:	bf01      	itttt	eq
 800d248:	6819      	ldreq	r1, [r3, #0]
 800d24a:	685b      	ldreq	r3, [r3, #4]
 800d24c:	1809      	addeq	r1, r1, r0
 800d24e:	6021      	streq	r1, [r4, #0]
 800d250:	e7ed      	b.n	800d22e <_free_r+0x1e>
 800d252:	461a      	mov	r2, r3
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	b10b      	cbz	r3, 800d25c <_free_r+0x4c>
 800d258:	42a3      	cmp	r3, r4
 800d25a:	d9fa      	bls.n	800d252 <_free_r+0x42>
 800d25c:	6811      	ldr	r1, [r2, #0]
 800d25e:	1850      	adds	r0, r2, r1
 800d260:	42a0      	cmp	r0, r4
 800d262:	d10b      	bne.n	800d27c <_free_r+0x6c>
 800d264:	6820      	ldr	r0, [r4, #0]
 800d266:	4401      	add	r1, r0
 800d268:	1850      	adds	r0, r2, r1
 800d26a:	4283      	cmp	r3, r0
 800d26c:	6011      	str	r1, [r2, #0]
 800d26e:	d1e0      	bne.n	800d232 <_free_r+0x22>
 800d270:	6818      	ldr	r0, [r3, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	4408      	add	r0, r1
 800d276:	6010      	str	r0, [r2, #0]
 800d278:	6053      	str	r3, [r2, #4]
 800d27a:	e7da      	b.n	800d232 <_free_r+0x22>
 800d27c:	d902      	bls.n	800d284 <_free_r+0x74>
 800d27e:	230c      	movs	r3, #12
 800d280:	602b      	str	r3, [r5, #0]
 800d282:	e7d6      	b.n	800d232 <_free_r+0x22>
 800d284:	6820      	ldr	r0, [r4, #0]
 800d286:	1821      	adds	r1, r4, r0
 800d288:	428b      	cmp	r3, r1
 800d28a:	bf01      	itttt	eq
 800d28c:	6819      	ldreq	r1, [r3, #0]
 800d28e:	685b      	ldreq	r3, [r3, #4]
 800d290:	1809      	addeq	r1, r1, r0
 800d292:	6021      	streq	r1, [r4, #0]
 800d294:	6063      	str	r3, [r4, #4]
 800d296:	6054      	str	r4, [r2, #4]
 800d298:	e7cb      	b.n	800d232 <_free_r+0x22>
 800d29a:	bd38      	pop	{r3, r4, r5, pc}
 800d29c:	20001894 	.word	0x20001894

0800d2a0 <rshift>:
 800d2a0:	6903      	ldr	r3, [r0, #16]
 800d2a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d2aa:	f100 0414 	add.w	r4, r0, #20
 800d2ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d2b2:	dd46      	ble.n	800d342 <rshift+0xa2>
 800d2b4:	f011 011f 	ands.w	r1, r1, #31
 800d2b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d2bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d2c0:	d10c      	bne.n	800d2dc <rshift+0x3c>
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	f100 0710 	add.w	r7, r0, #16
 800d2c8:	42b1      	cmp	r1, r6
 800d2ca:	d335      	bcc.n	800d338 <rshift+0x98>
 800d2cc:	1a9b      	subs	r3, r3, r2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	1eea      	subs	r2, r5, #3
 800d2d2:	4296      	cmp	r6, r2
 800d2d4:	bf38      	it	cc
 800d2d6:	2300      	movcc	r3, #0
 800d2d8:	4423      	add	r3, r4
 800d2da:	e015      	b.n	800d308 <rshift+0x68>
 800d2dc:	46a1      	mov	r9, r4
 800d2de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2e2:	f1c1 0820 	rsb	r8, r1, #32
 800d2e6:	40cf      	lsrs	r7, r1
 800d2e8:	f105 0e04 	add.w	lr, r5, #4
 800d2ec:	4576      	cmp	r6, lr
 800d2ee:	46f4      	mov	ip, lr
 800d2f0:	d816      	bhi.n	800d320 <rshift+0x80>
 800d2f2:	1a9a      	subs	r2, r3, r2
 800d2f4:	0092      	lsls	r2, r2, #2
 800d2f6:	3a04      	subs	r2, #4
 800d2f8:	3501      	adds	r5, #1
 800d2fa:	42ae      	cmp	r6, r5
 800d2fc:	bf38      	it	cc
 800d2fe:	2200      	movcc	r2, #0
 800d300:	18a3      	adds	r3, r4, r2
 800d302:	50a7      	str	r7, [r4, r2]
 800d304:	b107      	cbz	r7, 800d308 <rshift+0x68>
 800d306:	3304      	adds	r3, #4
 800d308:	42a3      	cmp	r3, r4
 800d30a:	eba3 0204 	sub.w	r2, r3, r4
 800d30e:	bf08      	it	eq
 800d310:	2300      	moveq	r3, #0
 800d312:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d316:	6102      	str	r2, [r0, #16]
 800d318:	bf08      	it	eq
 800d31a:	6143      	streq	r3, [r0, #20]
 800d31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d320:	f8dc c000 	ldr.w	ip, [ip]
 800d324:	fa0c fc08 	lsl.w	ip, ip, r8
 800d328:	ea4c 0707 	orr.w	r7, ip, r7
 800d32c:	f849 7b04 	str.w	r7, [r9], #4
 800d330:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d334:	40cf      	lsrs	r7, r1
 800d336:	e7d9      	b.n	800d2ec <rshift+0x4c>
 800d338:	f851 cb04 	ldr.w	ip, [r1], #4
 800d33c:	f847 cf04 	str.w	ip, [r7, #4]!
 800d340:	e7c2      	b.n	800d2c8 <rshift+0x28>
 800d342:	4623      	mov	r3, r4
 800d344:	e7e0      	b.n	800d308 <rshift+0x68>

0800d346 <__hexdig_fun>:
 800d346:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d34a:	2b09      	cmp	r3, #9
 800d34c:	d802      	bhi.n	800d354 <__hexdig_fun+0xe>
 800d34e:	3820      	subs	r0, #32
 800d350:	b2c0      	uxtb	r0, r0
 800d352:	4770      	bx	lr
 800d354:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d358:	2b05      	cmp	r3, #5
 800d35a:	d801      	bhi.n	800d360 <__hexdig_fun+0x1a>
 800d35c:	3847      	subs	r0, #71	@ 0x47
 800d35e:	e7f7      	b.n	800d350 <__hexdig_fun+0xa>
 800d360:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d364:	2b05      	cmp	r3, #5
 800d366:	d801      	bhi.n	800d36c <__hexdig_fun+0x26>
 800d368:	3827      	subs	r0, #39	@ 0x27
 800d36a:	e7f1      	b.n	800d350 <__hexdig_fun+0xa>
 800d36c:	2000      	movs	r0, #0
 800d36e:	4770      	bx	lr

0800d370 <__gethex>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	468a      	mov	sl, r1
 800d376:	4690      	mov	r8, r2
 800d378:	b085      	sub	sp, #20
 800d37a:	9302      	str	r3, [sp, #8]
 800d37c:	680b      	ldr	r3, [r1, #0]
 800d37e:	9001      	str	r0, [sp, #4]
 800d380:	1c9c      	adds	r4, r3, #2
 800d382:	46a1      	mov	r9, r4
 800d384:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d388:	2830      	cmp	r0, #48	@ 0x30
 800d38a:	d0fa      	beq.n	800d382 <__gethex+0x12>
 800d38c:	eba9 0303 	sub.w	r3, r9, r3
 800d390:	f1a3 0b02 	sub.w	fp, r3, #2
 800d394:	f7ff ffd7 	bl	800d346 <__hexdig_fun>
 800d398:	4605      	mov	r5, r0
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d168      	bne.n	800d470 <__gethex+0x100>
 800d39e:	2201      	movs	r2, #1
 800d3a0:	4648      	mov	r0, r9
 800d3a2:	499f      	ldr	r1, [pc, #636]	@ (800d620 <__gethex+0x2b0>)
 800d3a4:	f7ff fe99 	bl	800d0da <strncmp>
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d167      	bne.n	800d47e <__gethex+0x10e>
 800d3ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d3b2:	4626      	mov	r6, r4
 800d3b4:	f7ff ffc7 	bl	800d346 <__hexdig_fun>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d062      	beq.n	800d482 <__gethex+0x112>
 800d3bc:	4623      	mov	r3, r4
 800d3be:	7818      	ldrb	r0, [r3, #0]
 800d3c0:	4699      	mov	r9, r3
 800d3c2:	2830      	cmp	r0, #48	@ 0x30
 800d3c4:	f103 0301 	add.w	r3, r3, #1
 800d3c8:	d0f9      	beq.n	800d3be <__gethex+0x4e>
 800d3ca:	f7ff ffbc 	bl	800d346 <__hexdig_fun>
 800d3ce:	fab0 f580 	clz	r5, r0
 800d3d2:	f04f 0b01 	mov.w	fp, #1
 800d3d6:	096d      	lsrs	r5, r5, #5
 800d3d8:	464a      	mov	r2, r9
 800d3da:	4616      	mov	r6, r2
 800d3dc:	7830      	ldrb	r0, [r6, #0]
 800d3de:	3201      	adds	r2, #1
 800d3e0:	f7ff ffb1 	bl	800d346 <__hexdig_fun>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d1f8      	bne.n	800d3da <__gethex+0x6a>
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	498c      	ldr	r1, [pc, #560]	@ (800d620 <__gethex+0x2b0>)
 800d3ee:	f7ff fe74 	bl	800d0da <strncmp>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d13f      	bne.n	800d476 <__gethex+0x106>
 800d3f6:	b944      	cbnz	r4, 800d40a <__gethex+0x9a>
 800d3f8:	1c74      	adds	r4, r6, #1
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	4616      	mov	r6, r2
 800d3fe:	7830      	ldrb	r0, [r6, #0]
 800d400:	3201      	adds	r2, #1
 800d402:	f7ff ffa0 	bl	800d346 <__hexdig_fun>
 800d406:	2800      	cmp	r0, #0
 800d408:	d1f8      	bne.n	800d3fc <__gethex+0x8c>
 800d40a:	1ba4      	subs	r4, r4, r6
 800d40c:	00a7      	lsls	r7, r4, #2
 800d40e:	7833      	ldrb	r3, [r6, #0]
 800d410:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d414:	2b50      	cmp	r3, #80	@ 0x50
 800d416:	d13e      	bne.n	800d496 <__gethex+0x126>
 800d418:	7873      	ldrb	r3, [r6, #1]
 800d41a:	2b2b      	cmp	r3, #43	@ 0x2b
 800d41c:	d033      	beq.n	800d486 <__gethex+0x116>
 800d41e:	2b2d      	cmp	r3, #45	@ 0x2d
 800d420:	d034      	beq.n	800d48c <__gethex+0x11c>
 800d422:	2400      	movs	r4, #0
 800d424:	1c71      	adds	r1, r6, #1
 800d426:	7808      	ldrb	r0, [r1, #0]
 800d428:	f7ff ff8d 	bl	800d346 <__hexdig_fun>
 800d42c:	1e43      	subs	r3, r0, #1
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b18      	cmp	r3, #24
 800d432:	d830      	bhi.n	800d496 <__gethex+0x126>
 800d434:	f1a0 0210 	sub.w	r2, r0, #16
 800d438:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d43c:	f7ff ff83 	bl	800d346 <__hexdig_fun>
 800d440:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d444:	fa5f fc8c 	uxtb.w	ip, ip
 800d448:	f1bc 0f18 	cmp.w	ip, #24
 800d44c:	f04f 030a 	mov.w	r3, #10
 800d450:	d91e      	bls.n	800d490 <__gethex+0x120>
 800d452:	b104      	cbz	r4, 800d456 <__gethex+0xe6>
 800d454:	4252      	negs	r2, r2
 800d456:	4417      	add	r7, r2
 800d458:	f8ca 1000 	str.w	r1, [sl]
 800d45c:	b1ed      	cbz	r5, 800d49a <__gethex+0x12a>
 800d45e:	f1bb 0f00 	cmp.w	fp, #0
 800d462:	bf0c      	ite	eq
 800d464:	2506      	moveq	r5, #6
 800d466:	2500      	movne	r5, #0
 800d468:	4628      	mov	r0, r5
 800d46a:	b005      	add	sp, #20
 800d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d470:	2500      	movs	r5, #0
 800d472:	462c      	mov	r4, r5
 800d474:	e7b0      	b.n	800d3d8 <__gethex+0x68>
 800d476:	2c00      	cmp	r4, #0
 800d478:	d1c7      	bne.n	800d40a <__gethex+0x9a>
 800d47a:	4627      	mov	r7, r4
 800d47c:	e7c7      	b.n	800d40e <__gethex+0x9e>
 800d47e:	464e      	mov	r6, r9
 800d480:	462f      	mov	r7, r5
 800d482:	2501      	movs	r5, #1
 800d484:	e7c3      	b.n	800d40e <__gethex+0x9e>
 800d486:	2400      	movs	r4, #0
 800d488:	1cb1      	adds	r1, r6, #2
 800d48a:	e7cc      	b.n	800d426 <__gethex+0xb6>
 800d48c:	2401      	movs	r4, #1
 800d48e:	e7fb      	b.n	800d488 <__gethex+0x118>
 800d490:	fb03 0002 	mla	r0, r3, r2, r0
 800d494:	e7ce      	b.n	800d434 <__gethex+0xc4>
 800d496:	4631      	mov	r1, r6
 800d498:	e7de      	b.n	800d458 <__gethex+0xe8>
 800d49a:	4629      	mov	r1, r5
 800d49c:	eba6 0309 	sub.w	r3, r6, r9
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	2b07      	cmp	r3, #7
 800d4a4:	dc0a      	bgt.n	800d4bc <__gethex+0x14c>
 800d4a6:	9801      	ldr	r0, [sp, #4]
 800d4a8:	f000 faf4 	bl	800da94 <_Balloc>
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	b940      	cbnz	r0, 800d4c2 <__gethex+0x152>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	21e4      	movs	r1, #228	@ 0xe4
 800d4b4:	4b5b      	ldr	r3, [pc, #364]	@ (800d624 <__gethex+0x2b4>)
 800d4b6:	485c      	ldr	r0, [pc, #368]	@ (800d628 <__gethex+0x2b8>)
 800d4b8:	f001 f9be 	bl	800e838 <__assert_func>
 800d4bc:	3101      	adds	r1, #1
 800d4be:	105b      	asrs	r3, r3, #1
 800d4c0:	e7ef      	b.n	800d4a2 <__gethex+0x132>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	f100 0a14 	add.w	sl, r0, #20
 800d4c8:	4655      	mov	r5, sl
 800d4ca:	469b      	mov	fp, r3
 800d4cc:	45b1      	cmp	r9, r6
 800d4ce:	d337      	bcc.n	800d540 <__gethex+0x1d0>
 800d4d0:	f845 bb04 	str.w	fp, [r5], #4
 800d4d4:	eba5 050a 	sub.w	r5, r5, sl
 800d4d8:	10ad      	asrs	r5, r5, #2
 800d4da:	6125      	str	r5, [r4, #16]
 800d4dc:	4658      	mov	r0, fp
 800d4de:	f000 fbcb 	bl	800dc78 <__hi0bits>
 800d4e2:	016d      	lsls	r5, r5, #5
 800d4e4:	f8d8 6000 	ldr.w	r6, [r8]
 800d4e8:	1a2d      	subs	r5, r5, r0
 800d4ea:	42b5      	cmp	r5, r6
 800d4ec:	dd54      	ble.n	800d598 <__gethex+0x228>
 800d4ee:	1bad      	subs	r5, r5, r6
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 ff69 	bl	800e3ca <__any_on>
 800d4f8:	4681      	mov	r9, r0
 800d4fa:	b178      	cbz	r0, 800d51c <__gethex+0x1ac>
 800d4fc:	f04f 0901 	mov.w	r9, #1
 800d500:	1e6b      	subs	r3, r5, #1
 800d502:	1159      	asrs	r1, r3, #5
 800d504:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d508:	f003 021f 	and.w	r2, r3, #31
 800d50c:	fa09 f202 	lsl.w	r2, r9, r2
 800d510:	420a      	tst	r2, r1
 800d512:	d003      	beq.n	800d51c <__gethex+0x1ac>
 800d514:	454b      	cmp	r3, r9
 800d516:	dc36      	bgt.n	800d586 <__gethex+0x216>
 800d518:	f04f 0902 	mov.w	r9, #2
 800d51c:	4629      	mov	r1, r5
 800d51e:	4620      	mov	r0, r4
 800d520:	f7ff febe 	bl	800d2a0 <rshift>
 800d524:	442f      	add	r7, r5
 800d526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d52a:	42bb      	cmp	r3, r7
 800d52c:	da42      	bge.n	800d5b4 <__gethex+0x244>
 800d52e:	4621      	mov	r1, r4
 800d530:	9801      	ldr	r0, [sp, #4]
 800d532:	f000 faef 	bl	800db14 <_Bfree>
 800d536:	2300      	movs	r3, #0
 800d538:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d53a:	25a3      	movs	r5, #163	@ 0xa3
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	e793      	b.n	800d468 <__gethex+0xf8>
 800d540:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d544:	2a2e      	cmp	r2, #46	@ 0x2e
 800d546:	d012      	beq.n	800d56e <__gethex+0x1fe>
 800d548:	2b20      	cmp	r3, #32
 800d54a:	d104      	bne.n	800d556 <__gethex+0x1e6>
 800d54c:	f845 bb04 	str.w	fp, [r5], #4
 800d550:	f04f 0b00 	mov.w	fp, #0
 800d554:	465b      	mov	r3, fp
 800d556:	7830      	ldrb	r0, [r6, #0]
 800d558:	9303      	str	r3, [sp, #12]
 800d55a:	f7ff fef4 	bl	800d346 <__hexdig_fun>
 800d55e:	9b03      	ldr	r3, [sp, #12]
 800d560:	f000 000f 	and.w	r0, r0, #15
 800d564:	4098      	lsls	r0, r3
 800d566:	ea4b 0b00 	orr.w	fp, fp, r0
 800d56a:	3304      	adds	r3, #4
 800d56c:	e7ae      	b.n	800d4cc <__gethex+0x15c>
 800d56e:	45b1      	cmp	r9, r6
 800d570:	d8ea      	bhi.n	800d548 <__gethex+0x1d8>
 800d572:	2201      	movs	r2, #1
 800d574:	4630      	mov	r0, r6
 800d576:	492a      	ldr	r1, [pc, #168]	@ (800d620 <__gethex+0x2b0>)
 800d578:	9303      	str	r3, [sp, #12]
 800d57a:	f7ff fdae 	bl	800d0da <strncmp>
 800d57e:	9b03      	ldr	r3, [sp, #12]
 800d580:	2800      	cmp	r0, #0
 800d582:	d1e1      	bne.n	800d548 <__gethex+0x1d8>
 800d584:	e7a2      	b.n	800d4cc <__gethex+0x15c>
 800d586:	4620      	mov	r0, r4
 800d588:	1ea9      	subs	r1, r5, #2
 800d58a:	f000 ff1e 	bl	800e3ca <__any_on>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d0c2      	beq.n	800d518 <__gethex+0x1a8>
 800d592:	f04f 0903 	mov.w	r9, #3
 800d596:	e7c1      	b.n	800d51c <__gethex+0x1ac>
 800d598:	da09      	bge.n	800d5ae <__gethex+0x23e>
 800d59a:	1b75      	subs	r5, r6, r5
 800d59c:	4621      	mov	r1, r4
 800d59e:	462a      	mov	r2, r5
 800d5a0:	9801      	ldr	r0, [sp, #4]
 800d5a2:	f000 fcc7 	bl	800df34 <__lshift>
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	1b7f      	subs	r7, r7, r5
 800d5aa:	f100 0a14 	add.w	sl, r0, #20
 800d5ae:	f04f 0900 	mov.w	r9, #0
 800d5b2:	e7b8      	b.n	800d526 <__gethex+0x1b6>
 800d5b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d5b8:	42bd      	cmp	r5, r7
 800d5ba:	dd6f      	ble.n	800d69c <__gethex+0x32c>
 800d5bc:	1bed      	subs	r5, r5, r7
 800d5be:	42ae      	cmp	r6, r5
 800d5c0:	dc34      	bgt.n	800d62c <__gethex+0x2bc>
 800d5c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d022      	beq.n	800d610 <__gethex+0x2a0>
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	d024      	beq.n	800d618 <__gethex+0x2a8>
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d115      	bne.n	800d5fe <__gethex+0x28e>
 800d5d2:	42ae      	cmp	r6, r5
 800d5d4:	d113      	bne.n	800d5fe <__gethex+0x28e>
 800d5d6:	2e01      	cmp	r6, #1
 800d5d8:	d10b      	bne.n	800d5f2 <__gethex+0x282>
 800d5da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d5de:	9a02      	ldr	r2, [sp, #8]
 800d5e0:	2562      	movs	r5, #98	@ 0x62
 800d5e2:	6013      	str	r3, [r2, #0]
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	6123      	str	r3, [r4, #16]
 800d5e8:	f8ca 3000 	str.w	r3, [sl]
 800d5ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5ee:	601c      	str	r4, [r3, #0]
 800d5f0:	e73a      	b.n	800d468 <__gethex+0xf8>
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	1e71      	subs	r1, r6, #1
 800d5f6:	f000 fee8 	bl	800e3ca <__any_on>
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d1ed      	bne.n	800d5da <__gethex+0x26a>
 800d5fe:	4621      	mov	r1, r4
 800d600:	9801      	ldr	r0, [sp, #4]
 800d602:	f000 fa87 	bl	800db14 <_Bfree>
 800d606:	2300      	movs	r3, #0
 800d608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d60a:	2550      	movs	r5, #80	@ 0x50
 800d60c:	6013      	str	r3, [r2, #0]
 800d60e:	e72b      	b.n	800d468 <__gethex+0xf8>
 800d610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1f3      	bne.n	800d5fe <__gethex+0x28e>
 800d616:	e7e0      	b.n	800d5da <__gethex+0x26a>
 800d618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1dd      	bne.n	800d5da <__gethex+0x26a>
 800d61e:	e7ee      	b.n	800d5fe <__gethex+0x28e>
 800d620:	0800febe 	.word	0x0800febe
 800d624:	0800fece 	.word	0x0800fece
 800d628:	0800fedf 	.word	0x0800fedf
 800d62c:	1e6f      	subs	r7, r5, #1
 800d62e:	f1b9 0f00 	cmp.w	r9, #0
 800d632:	d130      	bne.n	800d696 <__gethex+0x326>
 800d634:	b127      	cbz	r7, 800d640 <__gethex+0x2d0>
 800d636:	4639      	mov	r1, r7
 800d638:	4620      	mov	r0, r4
 800d63a:	f000 fec6 	bl	800e3ca <__any_on>
 800d63e:	4681      	mov	r9, r0
 800d640:	2301      	movs	r3, #1
 800d642:	4629      	mov	r1, r5
 800d644:	1b76      	subs	r6, r6, r5
 800d646:	2502      	movs	r5, #2
 800d648:	117a      	asrs	r2, r7, #5
 800d64a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d64e:	f007 071f 	and.w	r7, r7, #31
 800d652:	40bb      	lsls	r3, r7
 800d654:	4213      	tst	r3, r2
 800d656:	4620      	mov	r0, r4
 800d658:	bf18      	it	ne
 800d65a:	f049 0902 	orrne.w	r9, r9, #2
 800d65e:	f7ff fe1f 	bl	800d2a0 <rshift>
 800d662:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d666:	f1b9 0f00 	cmp.w	r9, #0
 800d66a:	d047      	beq.n	800d6fc <__gethex+0x38c>
 800d66c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d670:	2b02      	cmp	r3, #2
 800d672:	d015      	beq.n	800d6a0 <__gethex+0x330>
 800d674:	2b03      	cmp	r3, #3
 800d676:	d017      	beq.n	800d6a8 <__gethex+0x338>
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d109      	bne.n	800d690 <__gethex+0x320>
 800d67c:	f019 0f02 	tst.w	r9, #2
 800d680:	d006      	beq.n	800d690 <__gethex+0x320>
 800d682:	f8da 3000 	ldr.w	r3, [sl]
 800d686:	ea49 0903 	orr.w	r9, r9, r3
 800d68a:	f019 0f01 	tst.w	r9, #1
 800d68e:	d10e      	bne.n	800d6ae <__gethex+0x33e>
 800d690:	f045 0510 	orr.w	r5, r5, #16
 800d694:	e032      	b.n	800d6fc <__gethex+0x38c>
 800d696:	f04f 0901 	mov.w	r9, #1
 800d69a:	e7d1      	b.n	800d640 <__gethex+0x2d0>
 800d69c:	2501      	movs	r5, #1
 800d69e:	e7e2      	b.n	800d666 <__gethex+0x2f6>
 800d6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6a2:	f1c3 0301 	rsb	r3, r3, #1
 800d6a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d0f0      	beq.n	800d690 <__gethex+0x320>
 800d6ae:	f04f 0c00 	mov.w	ip, #0
 800d6b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d6b6:	f104 0314 	add.w	r3, r4, #20
 800d6ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d6be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6c8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d6cc:	d01b      	beq.n	800d706 <__gethex+0x396>
 800d6ce:	3201      	adds	r2, #1
 800d6d0:	6002      	str	r2, [r0, #0]
 800d6d2:	2d02      	cmp	r5, #2
 800d6d4:	f104 0314 	add.w	r3, r4, #20
 800d6d8:	d13c      	bne.n	800d754 <__gethex+0x3e4>
 800d6da:	f8d8 2000 	ldr.w	r2, [r8]
 800d6de:	3a01      	subs	r2, #1
 800d6e0:	42b2      	cmp	r2, r6
 800d6e2:	d109      	bne.n	800d6f8 <__gethex+0x388>
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	1171      	asrs	r1, r6, #5
 800d6e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d6ec:	f006 061f 	and.w	r6, r6, #31
 800d6f0:	fa02 f606 	lsl.w	r6, r2, r6
 800d6f4:	421e      	tst	r6, r3
 800d6f6:	d13a      	bne.n	800d76e <__gethex+0x3fe>
 800d6f8:	f045 0520 	orr.w	r5, r5, #32
 800d6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6fe:	601c      	str	r4, [r3, #0]
 800d700:	9b02      	ldr	r3, [sp, #8]
 800d702:	601f      	str	r7, [r3, #0]
 800d704:	e6b0      	b.n	800d468 <__gethex+0xf8>
 800d706:	4299      	cmp	r1, r3
 800d708:	f843 cc04 	str.w	ip, [r3, #-4]
 800d70c:	d8d9      	bhi.n	800d6c2 <__gethex+0x352>
 800d70e:	68a3      	ldr	r3, [r4, #8]
 800d710:	459b      	cmp	fp, r3
 800d712:	db17      	blt.n	800d744 <__gethex+0x3d4>
 800d714:	6861      	ldr	r1, [r4, #4]
 800d716:	9801      	ldr	r0, [sp, #4]
 800d718:	3101      	adds	r1, #1
 800d71a:	f000 f9bb 	bl	800da94 <_Balloc>
 800d71e:	4681      	mov	r9, r0
 800d720:	b918      	cbnz	r0, 800d72a <__gethex+0x3ba>
 800d722:	4602      	mov	r2, r0
 800d724:	2184      	movs	r1, #132	@ 0x84
 800d726:	4b19      	ldr	r3, [pc, #100]	@ (800d78c <__gethex+0x41c>)
 800d728:	e6c5      	b.n	800d4b6 <__gethex+0x146>
 800d72a:	6922      	ldr	r2, [r4, #16]
 800d72c:	f104 010c 	add.w	r1, r4, #12
 800d730:	3202      	adds	r2, #2
 800d732:	0092      	lsls	r2, r2, #2
 800d734:	300c      	adds	r0, #12
 800d736:	f7ff fd56 	bl	800d1e6 <memcpy>
 800d73a:	4621      	mov	r1, r4
 800d73c:	9801      	ldr	r0, [sp, #4]
 800d73e:	f000 f9e9 	bl	800db14 <_Bfree>
 800d742:	464c      	mov	r4, r9
 800d744:	6923      	ldr	r3, [r4, #16]
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	6122      	str	r2, [r4, #16]
 800d74a:	2201      	movs	r2, #1
 800d74c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d750:	615a      	str	r2, [r3, #20]
 800d752:	e7be      	b.n	800d6d2 <__gethex+0x362>
 800d754:	6922      	ldr	r2, [r4, #16]
 800d756:	455a      	cmp	r2, fp
 800d758:	dd0b      	ble.n	800d772 <__gethex+0x402>
 800d75a:	2101      	movs	r1, #1
 800d75c:	4620      	mov	r0, r4
 800d75e:	f7ff fd9f 	bl	800d2a0 <rshift>
 800d762:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d766:	3701      	adds	r7, #1
 800d768:	42bb      	cmp	r3, r7
 800d76a:	f6ff aee0 	blt.w	800d52e <__gethex+0x1be>
 800d76e:	2501      	movs	r5, #1
 800d770:	e7c2      	b.n	800d6f8 <__gethex+0x388>
 800d772:	f016 061f 	ands.w	r6, r6, #31
 800d776:	d0fa      	beq.n	800d76e <__gethex+0x3fe>
 800d778:	4453      	add	r3, sl
 800d77a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d77e:	f000 fa7b 	bl	800dc78 <__hi0bits>
 800d782:	f1c6 0620 	rsb	r6, r6, #32
 800d786:	42b0      	cmp	r0, r6
 800d788:	dbe7      	blt.n	800d75a <__gethex+0x3ea>
 800d78a:	e7f0      	b.n	800d76e <__gethex+0x3fe>
 800d78c:	0800fece 	.word	0x0800fece

0800d790 <L_shift>:
 800d790:	f1c2 0208 	rsb	r2, r2, #8
 800d794:	0092      	lsls	r2, r2, #2
 800d796:	b570      	push	{r4, r5, r6, lr}
 800d798:	f1c2 0620 	rsb	r6, r2, #32
 800d79c:	6843      	ldr	r3, [r0, #4]
 800d79e:	6804      	ldr	r4, [r0, #0]
 800d7a0:	fa03 f506 	lsl.w	r5, r3, r6
 800d7a4:	432c      	orrs	r4, r5
 800d7a6:	40d3      	lsrs	r3, r2
 800d7a8:	6004      	str	r4, [r0, #0]
 800d7aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7ae:	4288      	cmp	r0, r1
 800d7b0:	d3f4      	bcc.n	800d79c <L_shift+0xc>
 800d7b2:	bd70      	pop	{r4, r5, r6, pc}

0800d7b4 <__match>:
 800d7b4:	b530      	push	{r4, r5, lr}
 800d7b6:	6803      	ldr	r3, [r0, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7be:	b914      	cbnz	r4, 800d7c6 <__match+0x12>
 800d7c0:	6003      	str	r3, [r0, #0]
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	bd30      	pop	{r4, r5, pc}
 800d7c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d7ce:	2d19      	cmp	r5, #25
 800d7d0:	bf98      	it	ls
 800d7d2:	3220      	addls	r2, #32
 800d7d4:	42a2      	cmp	r2, r4
 800d7d6:	d0f0      	beq.n	800d7ba <__match+0x6>
 800d7d8:	2000      	movs	r0, #0
 800d7da:	e7f3      	b.n	800d7c4 <__match+0x10>

0800d7dc <__hexnan>:
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	2500      	movs	r5, #0
 800d7e2:	680b      	ldr	r3, [r1, #0]
 800d7e4:	4682      	mov	sl, r0
 800d7e6:	115e      	asrs	r6, r3, #5
 800d7e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d7ec:	f013 031f 	ands.w	r3, r3, #31
 800d7f0:	bf18      	it	ne
 800d7f2:	3604      	addne	r6, #4
 800d7f4:	1f37      	subs	r7, r6, #4
 800d7f6:	4690      	mov	r8, r2
 800d7f8:	46b9      	mov	r9, r7
 800d7fa:	463c      	mov	r4, r7
 800d7fc:	46ab      	mov	fp, r5
 800d7fe:	b087      	sub	sp, #28
 800d800:	6801      	ldr	r1, [r0, #0]
 800d802:	9301      	str	r3, [sp, #4]
 800d804:	f846 5c04 	str.w	r5, [r6, #-4]
 800d808:	9502      	str	r5, [sp, #8]
 800d80a:	784a      	ldrb	r2, [r1, #1]
 800d80c:	1c4b      	adds	r3, r1, #1
 800d80e:	9303      	str	r3, [sp, #12]
 800d810:	b342      	cbz	r2, 800d864 <__hexnan+0x88>
 800d812:	4610      	mov	r0, r2
 800d814:	9105      	str	r1, [sp, #20]
 800d816:	9204      	str	r2, [sp, #16]
 800d818:	f7ff fd95 	bl	800d346 <__hexdig_fun>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d151      	bne.n	800d8c4 <__hexnan+0xe8>
 800d820:	9a04      	ldr	r2, [sp, #16]
 800d822:	9905      	ldr	r1, [sp, #20]
 800d824:	2a20      	cmp	r2, #32
 800d826:	d818      	bhi.n	800d85a <__hexnan+0x7e>
 800d828:	9b02      	ldr	r3, [sp, #8]
 800d82a:	459b      	cmp	fp, r3
 800d82c:	dd13      	ble.n	800d856 <__hexnan+0x7a>
 800d82e:	454c      	cmp	r4, r9
 800d830:	d206      	bcs.n	800d840 <__hexnan+0x64>
 800d832:	2d07      	cmp	r5, #7
 800d834:	dc04      	bgt.n	800d840 <__hexnan+0x64>
 800d836:	462a      	mov	r2, r5
 800d838:	4649      	mov	r1, r9
 800d83a:	4620      	mov	r0, r4
 800d83c:	f7ff ffa8 	bl	800d790 <L_shift>
 800d840:	4544      	cmp	r4, r8
 800d842:	d952      	bls.n	800d8ea <__hexnan+0x10e>
 800d844:	2300      	movs	r3, #0
 800d846:	f1a4 0904 	sub.w	r9, r4, #4
 800d84a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d84e:	461d      	mov	r5, r3
 800d850:	464c      	mov	r4, r9
 800d852:	f8cd b008 	str.w	fp, [sp, #8]
 800d856:	9903      	ldr	r1, [sp, #12]
 800d858:	e7d7      	b.n	800d80a <__hexnan+0x2e>
 800d85a:	2a29      	cmp	r2, #41	@ 0x29
 800d85c:	d157      	bne.n	800d90e <__hexnan+0x132>
 800d85e:	3102      	adds	r1, #2
 800d860:	f8ca 1000 	str.w	r1, [sl]
 800d864:	f1bb 0f00 	cmp.w	fp, #0
 800d868:	d051      	beq.n	800d90e <__hexnan+0x132>
 800d86a:	454c      	cmp	r4, r9
 800d86c:	d206      	bcs.n	800d87c <__hexnan+0xa0>
 800d86e:	2d07      	cmp	r5, #7
 800d870:	dc04      	bgt.n	800d87c <__hexnan+0xa0>
 800d872:	462a      	mov	r2, r5
 800d874:	4649      	mov	r1, r9
 800d876:	4620      	mov	r0, r4
 800d878:	f7ff ff8a 	bl	800d790 <L_shift>
 800d87c:	4544      	cmp	r4, r8
 800d87e:	d936      	bls.n	800d8ee <__hexnan+0x112>
 800d880:	4623      	mov	r3, r4
 800d882:	f1a8 0204 	sub.w	r2, r8, #4
 800d886:	f853 1b04 	ldr.w	r1, [r3], #4
 800d88a:	429f      	cmp	r7, r3
 800d88c:	f842 1f04 	str.w	r1, [r2, #4]!
 800d890:	d2f9      	bcs.n	800d886 <__hexnan+0xaa>
 800d892:	1b3b      	subs	r3, r7, r4
 800d894:	f023 0303 	bic.w	r3, r3, #3
 800d898:	3304      	adds	r3, #4
 800d89a:	3401      	adds	r4, #1
 800d89c:	3e03      	subs	r6, #3
 800d89e:	42b4      	cmp	r4, r6
 800d8a0:	bf88      	it	hi
 800d8a2:	2304      	movhi	r3, #4
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4443      	add	r3, r8
 800d8a8:	f843 2b04 	str.w	r2, [r3], #4
 800d8ac:	429f      	cmp	r7, r3
 800d8ae:	d2fb      	bcs.n	800d8a8 <__hexnan+0xcc>
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	b91b      	cbnz	r3, 800d8bc <__hexnan+0xe0>
 800d8b4:	4547      	cmp	r7, r8
 800d8b6:	d128      	bne.n	800d90a <__hexnan+0x12e>
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	2005      	movs	r0, #5
 800d8be:	b007      	add	sp, #28
 800d8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	2d08      	cmp	r5, #8
 800d8c8:	f10b 0b01 	add.w	fp, fp, #1
 800d8cc:	dd06      	ble.n	800d8dc <__hexnan+0x100>
 800d8ce:	4544      	cmp	r4, r8
 800d8d0:	d9c1      	bls.n	800d856 <__hexnan+0x7a>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	2501      	movs	r5, #1
 800d8d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8da:	3c04      	subs	r4, #4
 800d8dc:	6822      	ldr	r2, [r4, #0]
 800d8de:	f000 000f 	and.w	r0, r0, #15
 800d8e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d8e6:	6020      	str	r0, [r4, #0]
 800d8e8:	e7b5      	b.n	800d856 <__hexnan+0x7a>
 800d8ea:	2508      	movs	r5, #8
 800d8ec:	e7b3      	b.n	800d856 <__hexnan+0x7a>
 800d8ee:	9b01      	ldr	r3, [sp, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d0dd      	beq.n	800d8b0 <__hexnan+0xd4>
 800d8f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8f8:	f1c3 0320 	rsb	r3, r3, #32
 800d8fc:	40da      	lsrs	r2, r3
 800d8fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d902:	4013      	ands	r3, r2
 800d904:	f846 3c04 	str.w	r3, [r6, #-4]
 800d908:	e7d2      	b.n	800d8b0 <__hexnan+0xd4>
 800d90a:	3f04      	subs	r7, #4
 800d90c:	e7d0      	b.n	800d8b0 <__hexnan+0xd4>
 800d90e:	2004      	movs	r0, #4
 800d910:	e7d5      	b.n	800d8be <__hexnan+0xe2>
	...

0800d914 <sbrk_aligned>:
 800d914:	b570      	push	{r4, r5, r6, lr}
 800d916:	4e0f      	ldr	r6, [pc, #60]	@ (800d954 <sbrk_aligned+0x40>)
 800d918:	460c      	mov	r4, r1
 800d91a:	6831      	ldr	r1, [r6, #0]
 800d91c:	4605      	mov	r5, r0
 800d91e:	b911      	cbnz	r1, 800d926 <sbrk_aligned+0x12>
 800d920:	f000 ff72 	bl	800e808 <_sbrk_r>
 800d924:	6030      	str	r0, [r6, #0]
 800d926:	4621      	mov	r1, r4
 800d928:	4628      	mov	r0, r5
 800d92a:	f000 ff6d 	bl	800e808 <_sbrk_r>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	d103      	bne.n	800d93a <sbrk_aligned+0x26>
 800d932:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d936:	4620      	mov	r0, r4
 800d938:	bd70      	pop	{r4, r5, r6, pc}
 800d93a:	1cc4      	adds	r4, r0, #3
 800d93c:	f024 0403 	bic.w	r4, r4, #3
 800d940:	42a0      	cmp	r0, r4
 800d942:	d0f8      	beq.n	800d936 <sbrk_aligned+0x22>
 800d944:	1a21      	subs	r1, r4, r0
 800d946:	4628      	mov	r0, r5
 800d948:	f000 ff5e 	bl	800e808 <_sbrk_r>
 800d94c:	3001      	adds	r0, #1
 800d94e:	d1f2      	bne.n	800d936 <sbrk_aligned+0x22>
 800d950:	e7ef      	b.n	800d932 <sbrk_aligned+0x1e>
 800d952:	bf00      	nop
 800d954:	20001890 	.word	0x20001890

0800d958 <_malloc_r>:
 800d958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d95c:	1ccd      	adds	r5, r1, #3
 800d95e:	f025 0503 	bic.w	r5, r5, #3
 800d962:	3508      	adds	r5, #8
 800d964:	2d0c      	cmp	r5, #12
 800d966:	bf38      	it	cc
 800d968:	250c      	movcc	r5, #12
 800d96a:	2d00      	cmp	r5, #0
 800d96c:	4606      	mov	r6, r0
 800d96e:	db01      	blt.n	800d974 <_malloc_r+0x1c>
 800d970:	42a9      	cmp	r1, r5
 800d972:	d904      	bls.n	800d97e <_malloc_r+0x26>
 800d974:	230c      	movs	r3, #12
 800d976:	6033      	str	r3, [r6, #0]
 800d978:	2000      	movs	r0, #0
 800d97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d97e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da54 <_malloc_r+0xfc>
 800d982:	f000 f87b 	bl	800da7c <__malloc_lock>
 800d986:	f8d8 3000 	ldr.w	r3, [r8]
 800d98a:	461c      	mov	r4, r3
 800d98c:	bb44      	cbnz	r4, 800d9e0 <_malloc_r+0x88>
 800d98e:	4629      	mov	r1, r5
 800d990:	4630      	mov	r0, r6
 800d992:	f7ff ffbf 	bl	800d914 <sbrk_aligned>
 800d996:	1c43      	adds	r3, r0, #1
 800d998:	4604      	mov	r4, r0
 800d99a:	d158      	bne.n	800da4e <_malloc_r+0xf6>
 800d99c:	f8d8 4000 	ldr.w	r4, [r8]
 800d9a0:	4627      	mov	r7, r4
 800d9a2:	2f00      	cmp	r7, #0
 800d9a4:	d143      	bne.n	800da2e <_malloc_r+0xd6>
 800d9a6:	2c00      	cmp	r4, #0
 800d9a8:	d04b      	beq.n	800da42 <_malloc_r+0xea>
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	4639      	mov	r1, r7
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	eb04 0903 	add.w	r9, r4, r3
 800d9b4:	f000 ff28 	bl	800e808 <_sbrk_r>
 800d9b8:	4581      	cmp	r9, r0
 800d9ba:	d142      	bne.n	800da42 <_malloc_r+0xea>
 800d9bc:	6821      	ldr	r1, [r4, #0]
 800d9be:	4630      	mov	r0, r6
 800d9c0:	1a6d      	subs	r5, r5, r1
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	f7ff ffa6 	bl	800d914 <sbrk_aligned>
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	d03a      	beq.n	800da42 <_malloc_r+0xea>
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	442b      	add	r3, r5
 800d9d0:	6023      	str	r3, [r4, #0]
 800d9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d9d6:	685a      	ldr	r2, [r3, #4]
 800d9d8:	bb62      	cbnz	r2, 800da34 <_malloc_r+0xdc>
 800d9da:	f8c8 7000 	str.w	r7, [r8]
 800d9de:	e00f      	b.n	800da00 <_malloc_r+0xa8>
 800d9e0:	6822      	ldr	r2, [r4, #0]
 800d9e2:	1b52      	subs	r2, r2, r5
 800d9e4:	d420      	bmi.n	800da28 <_malloc_r+0xd0>
 800d9e6:	2a0b      	cmp	r2, #11
 800d9e8:	d917      	bls.n	800da1a <_malloc_r+0xc2>
 800d9ea:	1961      	adds	r1, r4, r5
 800d9ec:	42a3      	cmp	r3, r4
 800d9ee:	6025      	str	r5, [r4, #0]
 800d9f0:	bf18      	it	ne
 800d9f2:	6059      	strne	r1, [r3, #4]
 800d9f4:	6863      	ldr	r3, [r4, #4]
 800d9f6:	bf08      	it	eq
 800d9f8:	f8c8 1000 	streq.w	r1, [r8]
 800d9fc:	5162      	str	r2, [r4, r5]
 800d9fe:	604b      	str	r3, [r1, #4]
 800da00:	4630      	mov	r0, r6
 800da02:	f000 f841 	bl	800da88 <__malloc_unlock>
 800da06:	f104 000b 	add.w	r0, r4, #11
 800da0a:	1d23      	adds	r3, r4, #4
 800da0c:	f020 0007 	bic.w	r0, r0, #7
 800da10:	1ac2      	subs	r2, r0, r3
 800da12:	bf1c      	itt	ne
 800da14:	1a1b      	subne	r3, r3, r0
 800da16:	50a3      	strne	r3, [r4, r2]
 800da18:	e7af      	b.n	800d97a <_malloc_r+0x22>
 800da1a:	6862      	ldr	r2, [r4, #4]
 800da1c:	42a3      	cmp	r3, r4
 800da1e:	bf0c      	ite	eq
 800da20:	f8c8 2000 	streq.w	r2, [r8]
 800da24:	605a      	strne	r2, [r3, #4]
 800da26:	e7eb      	b.n	800da00 <_malloc_r+0xa8>
 800da28:	4623      	mov	r3, r4
 800da2a:	6864      	ldr	r4, [r4, #4]
 800da2c:	e7ae      	b.n	800d98c <_malloc_r+0x34>
 800da2e:	463c      	mov	r4, r7
 800da30:	687f      	ldr	r7, [r7, #4]
 800da32:	e7b6      	b.n	800d9a2 <_malloc_r+0x4a>
 800da34:	461a      	mov	r2, r3
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	42a3      	cmp	r3, r4
 800da3a:	d1fb      	bne.n	800da34 <_malloc_r+0xdc>
 800da3c:	2300      	movs	r3, #0
 800da3e:	6053      	str	r3, [r2, #4]
 800da40:	e7de      	b.n	800da00 <_malloc_r+0xa8>
 800da42:	230c      	movs	r3, #12
 800da44:	4630      	mov	r0, r6
 800da46:	6033      	str	r3, [r6, #0]
 800da48:	f000 f81e 	bl	800da88 <__malloc_unlock>
 800da4c:	e794      	b.n	800d978 <_malloc_r+0x20>
 800da4e:	6005      	str	r5, [r0, #0]
 800da50:	e7d6      	b.n	800da00 <_malloc_r+0xa8>
 800da52:	bf00      	nop
 800da54:	20001894 	.word	0x20001894

0800da58 <__ascii_mbtowc>:
 800da58:	b082      	sub	sp, #8
 800da5a:	b901      	cbnz	r1, 800da5e <__ascii_mbtowc+0x6>
 800da5c:	a901      	add	r1, sp, #4
 800da5e:	b142      	cbz	r2, 800da72 <__ascii_mbtowc+0x1a>
 800da60:	b14b      	cbz	r3, 800da76 <__ascii_mbtowc+0x1e>
 800da62:	7813      	ldrb	r3, [r2, #0]
 800da64:	600b      	str	r3, [r1, #0]
 800da66:	7812      	ldrb	r2, [r2, #0]
 800da68:	1e10      	subs	r0, r2, #0
 800da6a:	bf18      	it	ne
 800da6c:	2001      	movne	r0, #1
 800da6e:	b002      	add	sp, #8
 800da70:	4770      	bx	lr
 800da72:	4610      	mov	r0, r2
 800da74:	e7fb      	b.n	800da6e <__ascii_mbtowc+0x16>
 800da76:	f06f 0001 	mvn.w	r0, #1
 800da7a:	e7f8      	b.n	800da6e <__ascii_mbtowc+0x16>

0800da7c <__malloc_lock>:
 800da7c:	4801      	ldr	r0, [pc, #4]	@ (800da84 <__malloc_lock+0x8>)
 800da7e:	f7ff bbb0 	b.w	800d1e2 <__retarget_lock_acquire_recursive>
 800da82:	bf00      	nop
 800da84:	2000188c 	.word	0x2000188c

0800da88 <__malloc_unlock>:
 800da88:	4801      	ldr	r0, [pc, #4]	@ (800da90 <__malloc_unlock+0x8>)
 800da8a:	f7ff bbab 	b.w	800d1e4 <__retarget_lock_release_recursive>
 800da8e:	bf00      	nop
 800da90:	2000188c 	.word	0x2000188c

0800da94 <_Balloc>:
 800da94:	b570      	push	{r4, r5, r6, lr}
 800da96:	69c6      	ldr	r6, [r0, #28]
 800da98:	4604      	mov	r4, r0
 800da9a:	460d      	mov	r5, r1
 800da9c:	b976      	cbnz	r6, 800dabc <_Balloc+0x28>
 800da9e:	2010      	movs	r0, #16
 800daa0:	f001 fd5a 	bl	800f558 <malloc>
 800daa4:	4602      	mov	r2, r0
 800daa6:	61e0      	str	r0, [r4, #28]
 800daa8:	b920      	cbnz	r0, 800dab4 <_Balloc+0x20>
 800daaa:	216b      	movs	r1, #107	@ 0x6b
 800daac:	4b17      	ldr	r3, [pc, #92]	@ (800db0c <_Balloc+0x78>)
 800daae:	4818      	ldr	r0, [pc, #96]	@ (800db10 <_Balloc+0x7c>)
 800dab0:	f000 fec2 	bl	800e838 <__assert_func>
 800dab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dab8:	6006      	str	r6, [r0, #0]
 800daba:	60c6      	str	r6, [r0, #12]
 800dabc:	69e6      	ldr	r6, [r4, #28]
 800dabe:	68f3      	ldr	r3, [r6, #12]
 800dac0:	b183      	cbz	r3, 800dae4 <_Balloc+0x50>
 800dac2:	69e3      	ldr	r3, [r4, #28]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800daca:	b9b8      	cbnz	r0, 800dafc <_Balloc+0x68>
 800dacc:	2101      	movs	r1, #1
 800dace:	fa01 f605 	lsl.w	r6, r1, r5
 800dad2:	1d72      	adds	r2, r6, #5
 800dad4:	4620      	mov	r0, r4
 800dad6:	0092      	lsls	r2, r2, #2
 800dad8:	f000 fecc 	bl	800e874 <_calloc_r>
 800dadc:	b160      	cbz	r0, 800daf8 <_Balloc+0x64>
 800dade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dae2:	e00e      	b.n	800db02 <_Balloc+0x6e>
 800dae4:	2221      	movs	r2, #33	@ 0x21
 800dae6:	2104      	movs	r1, #4
 800dae8:	4620      	mov	r0, r4
 800daea:	f000 fec3 	bl	800e874 <_calloc_r>
 800daee:	69e3      	ldr	r3, [r4, #28]
 800daf0:	60f0      	str	r0, [r6, #12]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1e4      	bne.n	800dac2 <_Balloc+0x2e>
 800daf8:	2000      	movs	r0, #0
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	6802      	ldr	r2, [r0, #0]
 800dafe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db02:	2300      	movs	r3, #0
 800db04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db08:	e7f7      	b.n	800dafa <_Balloc+0x66>
 800db0a:	bf00      	nop
 800db0c:	0800ff3f 	.word	0x0800ff3f
 800db10:	0800ff56 	.word	0x0800ff56

0800db14 <_Bfree>:
 800db14:	b570      	push	{r4, r5, r6, lr}
 800db16:	69c6      	ldr	r6, [r0, #28]
 800db18:	4605      	mov	r5, r0
 800db1a:	460c      	mov	r4, r1
 800db1c:	b976      	cbnz	r6, 800db3c <_Bfree+0x28>
 800db1e:	2010      	movs	r0, #16
 800db20:	f001 fd1a 	bl	800f558 <malloc>
 800db24:	4602      	mov	r2, r0
 800db26:	61e8      	str	r0, [r5, #28]
 800db28:	b920      	cbnz	r0, 800db34 <_Bfree+0x20>
 800db2a:	218f      	movs	r1, #143	@ 0x8f
 800db2c:	4b08      	ldr	r3, [pc, #32]	@ (800db50 <_Bfree+0x3c>)
 800db2e:	4809      	ldr	r0, [pc, #36]	@ (800db54 <_Bfree+0x40>)
 800db30:	f000 fe82 	bl	800e838 <__assert_func>
 800db34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db38:	6006      	str	r6, [r0, #0]
 800db3a:	60c6      	str	r6, [r0, #12]
 800db3c:	b13c      	cbz	r4, 800db4e <_Bfree+0x3a>
 800db3e:	69eb      	ldr	r3, [r5, #28]
 800db40:	6862      	ldr	r2, [r4, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db48:	6021      	str	r1, [r4, #0]
 800db4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db4e:	bd70      	pop	{r4, r5, r6, pc}
 800db50:	0800ff3f 	.word	0x0800ff3f
 800db54:	0800ff56 	.word	0x0800ff56

0800db58 <__multadd>:
 800db58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db5c:	4607      	mov	r7, r0
 800db5e:	460c      	mov	r4, r1
 800db60:	461e      	mov	r6, r3
 800db62:	2000      	movs	r0, #0
 800db64:	690d      	ldr	r5, [r1, #16]
 800db66:	f101 0c14 	add.w	ip, r1, #20
 800db6a:	f8dc 3000 	ldr.w	r3, [ip]
 800db6e:	3001      	adds	r0, #1
 800db70:	b299      	uxth	r1, r3
 800db72:	fb02 6101 	mla	r1, r2, r1, r6
 800db76:	0c1e      	lsrs	r6, r3, #16
 800db78:	0c0b      	lsrs	r3, r1, #16
 800db7a:	fb02 3306 	mla	r3, r2, r6, r3
 800db7e:	b289      	uxth	r1, r1
 800db80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db84:	4285      	cmp	r5, r0
 800db86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db8a:	f84c 1b04 	str.w	r1, [ip], #4
 800db8e:	dcec      	bgt.n	800db6a <__multadd+0x12>
 800db90:	b30e      	cbz	r6, 800dbd6 <__multadd+0x7e>
 800db92:	68a3      	ldr	r3, [r4, #8]
 800db94:	42ab      	cmp	r3, r5
 800db96:	dc19      	bgt.n	800dbcc <__multadd+0x74>
 800db98:	6861      	ldr	r1, [r4, #4]
 800db9a:	4638      	mov	r0, r7
 800db9c:	3101      	adds	r1, #1
 800db9e:	f7ff ff79 	bl	800da94 <_Balloc>
 800dba2:	4680      	mov	r8, r0
 800dba4:	b928      	cbnz	r0, 800dbb2 <__multadd+0x5a>
 800dba6:	4602      	mov	r2, r0
 800dba8:	21ba      	movs	r1, #186	@ 0xba
 800dbaa:	4b0c      	ldr	r3, [pc, #48]	@ (800dbdc <__multadd+0x84>)
 800dbac:	480c      	ldr	r0, [pc, #48]	@ (800dbe0 <__multadd+0x88>)
 800dbae:	f000 fe43 	bl	800e838 <__assert_func>
 800dbb2:	6922      	ldr	r2, [r4, #16]
 800dbb4:	f104 010c 	add.w	r1, r4, #12
 800dbb8:	3202      	adds	r2, #2
 800dbba:	0092      	lsls	r2, r2, #2
 800dbbc:	300c      	adds	r0, #12
 800dbbe:	f7ff fb12 	bl	800d1e6 <memcpy>
 800dbc2:	4621      	mov	r1, r4
 800dbc4:	4638      	mov	r0, r7
 800dbc6:	f7ff ffa5 	bl	800db14 <_Bfree>
 800dbca:	4644      	mov	r4, r8
 800dbcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbd0:	3501      	adds	r5, #1
 800dbd2:	615e      	str	r6, [r3, #20]
 800dbd4:	6125      	str	r5, [r4, #16]
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbdc:	0800fece 	.word	0x0800fece
 800dbe0:	0800ff56 	.word	0x0800ff56

0800dbe4 <__s2b>:
 800dbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbe8:	4615      	mov	r5, r2
 800dbea:	2209      	movs	r2, #9
 800dbec:	461f      	mov	r7, r3
 800dbee:	3308      	adds	r3, #8
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	db09      	blt.n	800dc14 <__s2b+0x30>
 800dc00:	4630      	mov	r0, r6
 800dc02:	f7ff ff47 	bl	800da94 <_Balloc>
 800dc06:	b940      	cbnz	r0, 800dc1a <__s2b+0x36>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	21d3      	movs	r1, #211	@ 0xd3
 800dc0c:	4b18      	ldr	r3, [pc, #96]	@ (800dc70 <__s2b+0x8c>)
 800dc0e:	4819      	ldr	r0, [pc, #100]	@ (800dc74 <__s2b+0x90>)
 800dc10:	f000 fe12 	bl	800e838 <__assert_func>
 800dc14:	0052      	lsls	r2, r2, #1
 800dc16:	3101      	adds	r1, #1
 800dc18:	e7f0      	b.n	800dbfc <__s2b+0x18>
 800dc1a:	9b08      	ldr	r3, [sp, #32]
 800dc1c:	2d09      	cmp	r5, #9
 800dc1e:	6143      	str	r3, [r0, #20]
 800dc20:	f04f 0301 	mov.w	r3, #1
 800dc24:	6103      	str	r3, [r0, #16]
 800dc26:	dd16      	ble.n	800dc56 <__s2b+0x72>
 800dc28:	f104 0909 	add.w	r9, r4, #9
 800dc2c:	46c8      	mov	r8, r9
 800dc2e:	442c      	add	r4, r5
 800dc30:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dc34:	4601      	mov	r1, r0
 800dc36:	220a      	movs	r2, #10
 800dc38:	4630      	mov	r0, r6
 800dc3a:	3b30      	subs	r3, #48	@ 0x30
 800dc3c:	f7ff ff8c 	bl	800db58 <__multadd>
 800dc40:	45a0      	cmp	r8, r4
 800dc42:	d1f5      	bne.n	800dc30 <__s2b+0x4c>
 800dc44:	f1a5 0408 	sub.w	r4, r5, #8
 800dc48:	444c      	add	r4, r9
 800dc4a:	1b2d      	subs	r5, r5, r4
 800dc4c:	1963      	adds	r3, r4, r5
 800dc4e:	42bb      	cmp	r3, r7
 800dc50:	db04      	blt.n	800dc5c <__s2b+0x78>
 800dc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc56:	2509      	movs	r5, #9
 800dc58:	340a      	adds	r4, #10
 800dc5a:	e7f6      	b.n	800dc4a <__s2b+0x66>
 800dc5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc60:	4601      	mov	r1, r0
 800dc62:	220a      	movs	r2, #10
 800dc64:	4630      	mov	r0, r6
 800dc66:	3b30      	subs	r3, #48	@ 0x30
 800dc68:	f7ff ff76 	bl	800db58 <__multadd>
 800dc6c:	e7ee      	b.n	800dc4c <__s2b+0x68>
 800dc6e:	bf00      	nop
 800dc70:	0800fece 	.word	0x0800fece
 800dc74:	0800ff56 	.word	0x0800ff56

0800dc78 <__hi0bits>:
 800dc78:	4603      	mov	r3, r0
 800dc7a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc7e:	bf3a      	itte	cc
 800dc80:	0403      	lslcc	r3, r0, #16
 800dc82:	2010      	movcc	r0, #16
 800dc84:	2000      	movcs	r0, #0
 800dc86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc8a:	bf3c      	itt	cc
 800dc8c:	021b      	lslcc	r3, r3, #8
 800dc8e:	3008      	addcc	r0, #8
 800dc90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc94:	bf3c      	itt	cc
 800dc96:	011b      	lslcc	r3, r3, #4
 800dc98:	3004      	addcc	r0, #4
 800dc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc9e:	bf3c      	itt	cc
 800dca0:	009b      	lslcc	r3, r3, #2
 800dca2:	3002      	addcc	r0, #2
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	db05      	blt.n	800dcb4 <__hi0bits+0x3c>
 800dca8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dcac:	f100 0001 	add.w	r0, r0, #1
 800dcb0:	bf08      	it	eq
 800dcb2:	2020      	moveq	r0, #32
 800dcb4:	4770      	bx	lr

0800dcb6 <__lo0bits>:
 800dcb6:	6803      	ldr	r3, [r0, #0]
 800dcb8:	4602      	mov	r2, r0
 800dcba:	f013 0007 	ands.w	r0, r3, #7
 800dcbe:	d00b      	beq.n	800dcd8 <__lo0bits+0x22>
 800dcc0:	07d9      	lsls	r1, r3, #31
 800dcc2:	d421      	bmi.n	800dd08 <__lo0bits+0x52>
 800dcc4:	0798      	lsls	r0, r3, #30
 800dcc6:	bf49      	itett	mi
 800dcc8:	085b      	lsrmi	r3, r3, #1
 800dcca:	089b      	lsrpl	r3, r3, #2
 800dccc:	2001      	movmi	r0, #1
 800dcce:	6013      	strmi	r3, [r2, #0]
 800dcd0:	bf5c      	itt	pl
 800dcd2:	2002      	movpl	r0, #2
 800dcd4:	6013      	strpl	r3, [r2, #0]
 800dcd6:	4770      	bx	lr
 800dcd8:	b299      	uxth	r1, r3
 800dcda:	b909      	cbnz	r1, 800dce0 <__lo0bits+0x2a>
 800dcdc:	2010      	movs	r0, #16
 800dcde:	0c1b      	lsrs	r3, r3, #16
 800dce0:	b2d9      	uxtb	r1, r3
 800dce2:	b909      	cbnz	r1, 800dce8 <__lo0bits+0x32>
 800dce4:	3008      	adds	r0, #8
 800dce6:	0a1b      	lsrs	r3, r3, #8
 800dce8:	0719      	lsls	r1, r3, #28
 800dcea:	bf04      	itt	eq
 800dcec:	091b      	lsreq	r3, r3, #4
 800dcee:	3004      	addeq	r0, #4
 800dcf0:	0799      	lsls	r1, r3, #30
 800dcf2:	bf04      	itt	eq
 800dcf4:	089b      	lsreq	r3, r3, #2
 800dcf6:	3002      	addeq	r0, #2
 800dcf8:	07d9      	lsls	r1, r3, #31
 800dcfa:	d403      	bmi.n	800dd04 <__lo0bits+0x4e>
 800dcfc:	085b      	lsrs	r3, r3, #1
 800dcfe:	f100 0001 	add.w	r0, r0, #1
 800dd02:	d003      	beq.n	800dd0c <__lo0bits+0x56>
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	4770      	bx	lr
 800dd08:	2000      	movs	r0, #0
 800dd0a:	4770      	bx	lr
 800dd0c:	2020      	movs	r0, #32
 800dd0e:	4770      	bx	lr

0800dd10 <__i2b>:
 800dd10:	b510      	push	{r4, lr}
 800dd12:	460c      	mov	r4, r1
 800dd14:	2101      	movs	r1, #1
 800dd16:	f7ff febd 	bl	800da94 <_Balloc>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	b928      	cbnz	r0, 800dd2a <__i2b+0x1a>
 800dd1e:	f240 1145 	movw	r1, #325	@ 0x145
 800dd22:	4b04      	ldr	r3, [pc, #16]	@ (800dd34 <__i2b+0x24>)
 800dd24:	4804      	ldr	r0, [pc, #16]	@ (800dd38 <__i2b+0x28>)
 800dd26:	f000 fd87 	bl	800e838 <__assert_func>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	6144      	str	r4, [r0, #20]
 800dd2e:	6103      	str	r3, [r0, #16]
 800dd30:	bd10      	pop	{r4, pc}
 800dd32:	bf00      	nop
 800dd34:	0800fece 	.word	0x0800fece
 800dd38:	0800ff56 	.word	0x0800ff56

0800dd3c <__multiply>:
 800dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd40:	4617      	mov	r7, r2
 800dd42:	690a      	ldr	r2, [r1, #16]
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	4689      	mov	r9, r1
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	bfa2      	ittt	ge
 800dd4c:	463b      	movge	r3, r7
 800dd4e:	460f      	movge	r7, r1
 800dd50:	4699      	movge	r9, r3
 800dd52:	693d      	ldr	r5, [r7, #16]
 800dd54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	6879      	ldr	r1, [r7, #4]
 800dd5c:	eb05 060a 	add.w	r6, r5, sl
 800dd60:	42b3      	cmp	r3, r6
 800dd62:	b085      	sub	sp, #20
 800dd64:	bfb8      	it	lt
 800dd66:	3101      	addlt	r1, #1
 800dd68:	f7ff fe94 	bl	800da94 <_Balloc>
 800dd6c:	b930      	cbnz	r0, 800dd7c <__multiply+0x40>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd74:	4b40      	ldr	r3, [pc, #256]	@ (800de78 <__multiply+0x13c>)
 800dd76:	4841      	ldr	r0, [pc, #260]	@ (800de7c <__multiply+0x140>)
 800dd78:	f000 fd5e 	bl	800e838 <__assert_func>
 800dd7c:	f100 0414 	add.w	r4, r0, #20
 800dd80:	4623      	mov	r3, r4
 800dd82:	2200      	movs	r2, #0
 800dd84:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dd88:	4573      	cmp	r3, lr
 800dd8a:	d320      	bcc.n	800ddce <__multiply+0x92>
 800dd8c:	f107 0814 	add.w	r8, r7, #20
 800dd90:	f109 0114 	add.w	r1, r9, #20
 800dd94:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dd98:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dd9c:	9302      	str	r3, [sp, #8]
 800dd9e:	1beb      	subs	r3, r5, r7
 800dda0:	3b15      	subs	r3, #21
 800dda2:	f023 0303 	bic.w	r3, r3, #3
 800dda6:	3304      	adds	r3, #4
 800dda8:	3715      	adds	r7, #21
 800ddaa:	42bd      	cmp	r5, r7
 800ddac:	bf38      	it	cc
 800ddae:	2304      	movcc	r3, #4
 800ddb0:	9301      	str	r3, [sp, #4]
 800ddb2:	9b02      	ldr	r3, [sp, #8]
 800ddb4:	9103      	str	r1, [sp, #12]
 800ddb6:	428b      	cmp	r3, r1
 800ddb8:	d80c      	bhi.n	800ddd4 <__multiply+0x98>
 800ddba:	2e00      	cmp	r6, #0
 800ddbc:	dd03      	ble.n	800ddc6 <__multiply+0x8a>
 800ddbe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d055      	beq.n	800de72 <__multiply+0x136>
 800ddc6:	6106      	str	r6, [r0, #16]
 800ddc8:	b005      	add	sp, #20
 800ddca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddce:	f843 2b04 	str.w	r2, [r3], #4
 800ddd2:	e7d9      	b.n	800dd88 <__multiply+0x4c>
 800ddd4:	f8b1 a000 	ldrh.w	sl, [r1]
 800ddd8:	f1ba 0f00 	cmp.w	sl, #0
 800dddc:	d01f      	beq.n	800de1e <__multiply+0xe2>
 800ddde:	46c4      	mov	ip, r8
 800dde0:	46a1      	mov	r9, r4
 800dde2:	2700      	movs	r7, #0
 800dde4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dde8:	f8d9 3000 	ldr.w	r3, [r9]
 800ddec:	fa1f fb82 	uxth.w	fp, r2
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddf6:	443b      	add	r3, r7
 800ddf8:	f8d9 7000 	ldr.w	r7, [r9]
 800ddfc:	0c12      	lsrs	r2, r2, #16
 800ddfe:	0c3f      	lsrs	r7, r7, #16
 800de00:	fb0a 7202 	mla	r2, sl, r2, r7
 800de04:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800de08:	b29b      	uxth	r3, r3
 800de0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de0e:	4565      	cmp	r5, ip
 800de10:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800de14:	f849 3b04 	str.w	r3, [r9], #4
 800de18:	d8e4      	bhi.n	800dde4 <__multiply+0xa8>
 800de1a:	9b01      	ldr	r3, [sp, #4]
 800de1c:	50e7      	str	r7, [r4, r3]
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	3104      	adds	r1, #4
 800de22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800de26:	f1b9 0f00 	cmp.w	r9, #0
 800de2a:	d020      	beq.n	800de6e <__multiply+0x132>
 800de2c:	4647      	mov	r7, r8
 800de2e:	46a4      	mov	ip, r4
 800de30:	f04f 0a00 	mov.w	sl, #0
 800de34:	6823      	ldr	r3, [r4, #0]
 800de36:	f8b7 b000 	ldrh.w	fp, [r7]
 800de3a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800de3e:	b29b      	uxth	r3, r3
 800de40:	fb09 220b 	mla	r2, r9, fp, r2
 800de44:	4452      	add	r2, sl
 800de46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de4a:	f84c 3b04 	str.w	r3, [ip], #4
 800de4e:	f857 3b04 	ldr.w	r3, [r7], #4
 800de52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de56:	f8bc 3000 	ldrh.w	r3, [ip]
 800de5a:	42bd      	cmp	r5, r7
 800de5c:	fb09 330a 	mla	r3, r9, sl, r3
 800de60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800de64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de68:	d8e5      	bhi.n	800de36 <__multiply+0xfa>
 800de6a:	9a01      	ldr	r2, [sp, #4]
 800de6c:	50a3      	str	r3, [r4, r2]
 800de6e:	3404      	adds	r4, #4
 800de70:	e79f      	b.n	800ddb2 <__multiply+0x76>
 800de72:	3e01      	subs	r6, #1
 800de74:	e7a1      	b.n	800ddba <__multiply+0x7e>
 800de76:	bf00      	nop
 800de78:	0800fece 	.word	0x0800fece
 800de7c:	0800ff56 	.word	0x0800ff56

0800de80 <__pow5mult>:
 800de80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de84:	4615      	mov	r5, r2
 800de86:	f012 0203 	ands.w	r2, r2, #3
 800de8a:	4607      	mov	r7, r0
 800de8c:	460e      	mov	r6, r1
 800de8e:	d007      	beq.n	800dea0 <__pow5mult+0x20>
 800de90:	4c25      	ldr	r4, [pc, #148]	@ (800df28 <__pow5mult+0xa8>)
 800de92:	3a01      	subs	r2, #1
 800de94:	2300      	movs	r3, #0
 800de96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de9a:	f7ff fe5d 	bl	800db58 <__multadd>
 800de9e:	4606      	mov	r6, r0
 800dea0:	10ad      	asrs	r5, r5, #2
 800dea2:	d03d      	beq.n	800df20 <__pow5mult+0xa0>
 800dea4:	69fc      	ldr	r4, [r7, #28]
 800dea6:	b97c      	cbnz	r4, 800dec8 <__pow5mult+0x48>
 800dea8:	2010      	movs	r0, #16
 800deaa:	f001 fb55 	bl	800f558 <malloc>
 800deae:	4602      	mov	r2, r0
 800deb0:	61f8      	str	r0, [r7, #28]
 800deb2:	b928      	cbnz	r0, 800dec0 <__pow5mult+0x40>
 800deb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800deb8:	4b1c      	ldr	r3, [pc, #112]	@ (800df2c <__pow5mult+0xac>)
 800deba:	481d      	ldr	r0, [pc, #116]	@ (800df30 <__pow5mult+0xb0>)
 800debc:	f000 fcbc 	bl	800e838 <__assert_func>
 800dec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dec4:	6004      	str	r4, [r0, #0]
 800dec6:	60c4      	str	r4, [r0, #12]
 800dec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800decc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ded0:	b94c      	cbnz	r4, 800dee6 <__pow5mult+0x66>
 800ded2:	f240 2171 	movw	r1, #625	@ 0x271
 800ded6:	4638      	mov	r0, r7
 800ded8:	f7ff ff1a 	bl	800dd10 <__i2b>
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	f8c8 0008 	str.w	r0, [r8, #8]
 800dee4:	6003      	str	r3, [r0, #0]
 800dee6:	f04f 0900 	mov.w	r9, #0
 800deea:	07eb      	lsls	r3, r5, #31
 800deec:	d50a      	bpl.n	800df04 <__pow5mult+0x84>
 800deee:	4631      	mov	r1, r6
 800def0:	4622      	mov	r2, r4
 800def2:	4638      	mov	r0, r7
 800def4:	f7ff ff22 	bl	800dd3c <__multiply>
 800def8:	4680      	mov	r8, r0
 800defa:	4631      	mov	r1, r6
 800defc:	4638      	mov	r0, r7
 800defe:	f7ff fe09 	bl	800db14 <_Bfree>
 800df02:	4646      	mov	r6, r8
 800df04:	106d      	asrs	r5, r5, #1
 800df06:	d00b      	beq.n	800df20 <__pow5mult+0xa0>
 800df08:	6820      	ldr	r0, [r4, #0]
 800df0a:	b938      	cbnz	r0, 800df1c <__pow5mult+0x9c>
 800df0c:	4622      	mov	r2, r4
 800df0e:	4621      	mov	r1, r4
 800df10:	4638      	mov	r0, r7
 800df12:	f7ff ff13 	bl	800dd3c <__multiply>
 800df16:	6020      	str	r0, [r4, #0]
 800df18:	f8c0 9000 	str.w	r9, [r0]
 800df1c:	4604      	mov	r4, r0
 800df1e:	e7e4      	b.n	800deea <__pow5mult+0x6a>
 800df20:	4630      	mov	r0, r6
 800df22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df26:	bf00      	nop
 800df28:	080100d8 	.word	0x080100d8
 800df2c:	0800ff3f 	.word	0x0800ff3f
 800df30:	0800ff56 	.word	0x0800ff56

0800df34 <__lshift>:
 800df34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df38:	460c      	mov	r4, r1
 800df3a:	4607      	mov	r7, r0
 800df3c:	4691      	mov	r9, r2
 800df3e:	6923      	ldr	r3, [r4, #16]
 800df40:	6849      	ldr	r1, [r1, #4]
 800df42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df4c:	f108 0601 	add.w	r6, r8, #1
 800df50:	42b3      	cmp	r3, r6
 800df52:	db0b      	blt.n	800df6c <__lshift+0x38>
 800df54:	4638      	mov	r0, r7
 800df56:	f7ff fd9d 	bl	800da94 <_Balloc>
 800df5a:	4605      	mov	r5, r0
 800df5c:	b948      	cbnz	r0, 800df72 <__lshift+0x3e>
 800df5e:	4602      	mov	r2, r0
 800df60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df64:	4b27      	ldr	r3, [pc, #156]	@ (800e004 <__lshift+0xd0>)
 800df66:	4828      	ldr	r0, [pc, #160]	@ (800e008 <__lshift+0xd4>)
 800df68:	f000 fc66 	bl	800e838 <__assert_func>
 800df6c:	3101      	adds	r1, #1
 800df6e:	005b      	lsls	r3, r3, #1
 800df70:	e7ee      	b.n	800df50 <__lshift+0x1c>
 800df72:	2300      	movs	r3, #0
 800df74:	f100 0114 	add.w	r1, r0, #20
 800df78:	f100 0210 	add.w	r2, r0, #16
 800df7c:	4618      	mov	r0, r3
 800df7e:	4553      	cmp	r3, sl
 800df80:	db33      	blt.n	800dfea <__lshift+0xb6>
 800df82:	6920      	ldr	r0, [r4, #16]
 800df84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df88:	f104 0314 	add.w	r3, r4, #20
 800df8c:	f019 091f 	ands.w	r9, r9, #31
 800df90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df98:	d02b      	beq.n	800dff2 <__lshift+0xbe>
 800df9a:	468a      	mov	sl, r1
 800df9c:	2200      	movs	r2, #0
 800df9e:	f1c9 0e20 	rsb	lr, r9, #32
 800dfa2:	6818      	ldr	r0, [r3, #0]
 800dfa4:	fa00 f009 	lsl.w	r0, r0, r9
 800dfa8:	4310      	orrs	r0, r2
 800dfaa:	f84a 0b04 	str.w	r0, [sl], #4
 800dfae:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb2:	459c      	cmp	ip, r3
 800dfb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dfb8:	d8f3      	bhi.n	800dfa2 <__lshift+0x6e>
 800dfba:	ebac 0304 	sub.w	r3, ip, r4
 800dfbe:	3b15      	subs	r3, #21
 800dfc0:	f023 0303 	bic.w	r3, r3, #3
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	f104 0015 	add.w	r0, r4, #21
 800dfca:	4560      	cmp	r0, ip
 800dfcc:	bf88      	it	hi
 800dfce:	2304      	movhi	r3, #4
 800dfd0:	50ca      	str	r2, [r1, r3]
 800dfd2:	b10a      	cbz	r2, 800dfd8 <__lshift+0xa4>
 800dfd4:	f108 0602 	add.w	r6, r8, #2
 800dfd8:	3e01      	subs	r6, #1
 800dfda:	4638      	mov	r0, r7
 800dfdc:	4621      	mov	r1, r4
 800dfde:	612e      	str	r6, [r5, #16]
 800dfe0:	f7ff fd98 	bl	800db14 <_Bfree>
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfea:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfee:	3301      	adds	r3, #1
 800dff0:	e7c5      	b.n	800df7e <__lshift+0x4a>
 800dff2:	3904      	subs	r1, #4
 800dff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dff8:	459c      	cmp	ip, r3
 800dffa:	f841 2f04 	str.w	r2, [r1, #4]!
 800dffe:	d8f9      	bhi.n	800dff4 <__lshift+0xc0>
 800e000:	e7ea      	b.n	800dfd8 <__lshift+0xa4>
 800e002:	bf00      	nop
 800e004:	0800fece 	.word	0x0800fece
 800e008:	0800ff56 	.word	0x0800ff56

0800e00c <__mcmp>:
 800e00c:	4603      	mov	r3, r0
 800e00e:	690a      	ldr	r2, [r1, #16]
 800e010:	6900      	ldr	r0, [r0, #16]
 800e012:	b530      	push	{r4, r5, lr}
 800e014:	1a80      	subs	r0, r0, r2
 800e016:	d10e      	bne.n	800e036 <__mcmp+0x2a>
 800e018:	3314      	adds	r3, #20
 800e01a:	3114      	adds	r1, #20
 800e01c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e02c:	4295      	cmp	r5, r2
 800e02e:	d003      	beq.n	800e038 <__mcmp+0x2c>
 800e030:	d205      	bcs.n	800e03e <__mcmp+0x32>
 800e032:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e036:	bd30      	pop	{r4, r5, pc}
 800e038:	42a3      	cmp	r3, r4
 800e03a:	d3f3      	bcc.n	800e024 <__mcmp+0x18>
 800e03c:	e7fb      	b.n	800e036 <__mcmp+0x2a>
 800e03e:	2001      	movs	r0, #1
 800e040:	e7f9      	b.n	800e036 <__mcmp+0x2a>
	...

0800e044 <__mdiff>:
 800e044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e048:	4689      	mov	r9, r1
 800e04a:	4606      	mov	r6, r0
 800e04c:	4611      	mov	r1, r2
 800e04e:	4648      	mov	r0, r9
 800e050:	4614      	mov	r4, r2
 800e052:	f7ff ffdb 	bl	800e00c <__mcmp>
 800e056:	1e05      	subs	r5, r0, #0
 800e058:	d112      	bne.n	800e080 <__mdiff+0x3c>
 800e05a:	4629      	mov	r1, r5
 800e05c:	4630      	mov	r0, r6
 800e05e:	f7ff fd19 	bl	800da94 <_Balloc>
 800e062:	4602      	mov	r2, r0
 800e064:	b928      	cbnz	r0, 800e072 <__mdiff+0x2e>
 800e066:	f240 2137 	movw	r1, #567	@ 0x237
 800e06a:	4b3e      	ldr	r3, [pc, #248]	@ (800e164 <__mdiff+0x120>)
 800e06c:	483e      	ldr	r0, [pc, #248]	@ (800e168 <__mdiff+0x124>)
 800e06e:	f000 fbe3 	bl	800e838 <__assert_func>
 800e072:	2301      	movs	r3, #1
 800e074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e078:	4610      	mov	r0, r2
 800e07a:	b003      	add	sp, #12
 800e07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e080:	bfbc      	itt	lt
 800e082:	464b      	movlt	r3, r9
 800e084:	46a1      	movlt	r9, r4
 800e086:	4630      	mov	r0, r6
 800e088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e08c:	bfba      	itte	lt
 800e08e:	461c      	movlt	r4, r3
 800e090:	2501      	movlt	r5, #1
 800e092:	2500      	movge	r5, #0
 800e094:	f7ff fcfe 	bl	800da94 <_Balloc>
 800e098:	4602      	mov	r2, r0
 800e09a:	b918      	cbnz	r0, 800e0a4 <__mdiff+0x60>
 800e09c:	f240 2145 	movw	r1, #581	@ 0x245
 800e0a0:	4b30      	ldr	r3, [pc, #192]	@ (800e164 <__mdiff+0x120>)
 800e0a2:	e7e3      	b.n	800e06c <__mdiff+0x28>
 800e0a4:	f100 0b14 	add.w	fp, r0, #20
 800e0a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e0ac:	f109 0310 	add.w	r3, r9, #16
 800e0b0:	60c5      	str	r5, [r0, #12]
 800e0b2:	f04f 0c00 	mov.w	ip, #0
 800e0b6:	f109 0514 	add.w	r5, r9, #20
 800e0ba:	46d9      	mov	r9, fp
 800e0bc:	6926      	ldr	r6, [r4, #16]
 800e0be:	f104 0e14 	add.w	lr, r4, #20
 800e0c2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e0c6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e0ca:	9301      	str	r3, [sp, #4]
 800e0cc:	9b01      	ldr	r3, [sp, #4]
 800e0ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e0d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e0d6:	b281      	uxth	r1, r0
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	fa1f f38a 	uxth.w	r3, sl
 800e0de:	1a5b      	subs	r3, r3, r1
 800e0e0:	0c00      	lsrs	r0, r0, #16
 800e0e2:	4463      	add	r3, ip
 800e0e4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0e8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e0f2:	4576      	cmp	r6, lr
 800e0f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e0f8:	f849 3b04 	str.w	r3, [r9], #4
 800e0fc:	d8e6      	bhi.n	800e0cc <__mdiff+0x88>
 800e0fe:	1b33      	subs	r3, r6, r4
 800e100:	3b15      	subs	r3, #21
 800e102:	f023 0303 	bic.w	r3, r3, #3
 800e106:	3415      	adds	r4, #21
 800e108:	3304      	adds	r3, #4
 800e10a:	42a6      	cmp	r6, r4
 800e10c:	bf38      	it	cc
 800e10e:	2304      	movcc	r3, #4
 800e110:	441d      	add	r5, r3
 800e112:	445b      	add	r3, fp
 800e114:	461e      	mov	r6, r3
 800e116:	462c      	mov	r4, r5
 800e118:	4544      	cmp	r4, r8
 800e11a:	d30e      	bcc.n	800e13a <__mdiff+0xf6>
 800e11c:	f108 0103 	add.w	r1, r8, #3
 800e120:	1b49      	subs	r1, r1, r5
 800e122:	f021 0103 	bic.w	r1, r1, #3
 800e126:	3d03      	subs	r5, #3
 800e128:	45a8      	cmp	r8, r5
 800e12a:	bf38      	it	cc
 800e12c:	2100      	movcc	r1, #0
 800e12e:	440b      	add	r3, r1
 800e130:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e134:	b199      	cbz	r1, 800e15e <__mdiff+0x11a>
 800e136:	6117      	str	r7, [r2, #16]
 800e138:	e79e      	b.n	800e078 <__mdiff+0x34>
 800e13a:	46e6      	mov	lr, ip
 800e13c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e140:	fa1f fc81 	uxth.w	ip, r1
 800e144:	44f4      	add	ip, lr
 800e146:	0c08      	lsrs	r0, r1, #16
 800e148:	4471      	add	r1, lr
 800e14a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e14e:	b289      	uxth	r1, r1
 800e150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e154:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e158:	f846 1b04 	str.w	r1, [r6], #4
 800e15c:	e7dc      	b.n	800e118 <__mdiff+0xd4>
 800e15e:	3f01      	subs	r7, #1
 800e160:	e7e6      	b.n	800e130 <__mdiff+0xec>
 800e162:	bf00      	nop
 800e164:	0800fece 	.word	0x0800fece
 800e168:	0800ff56 	.word	0x0800ff56

0800e16c <__ulp>:
 800e16c:	4b0e      	ldr	r3, [pc, #56]	@ (800e1a8 <__ulp+0x3c>)
 800e16e:	400b      	ands	r3, r1
 800e170:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e174:	2b00      	cmp	r3, #0
 800e176:	dc08      	bgt.n	800e18a <__ulp+0x1e>
 800e178:	425b      	negs	r3, r3
 800e17a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e17e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e182:	da04      	bge.n	800e18e <__ulp+0x22>
 800e184:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e188:	4113      	asrs	r3, r2
 800e18a:	2200      	movs	r2, #0
 800e18c:	e008      	b.n	800e1a0 <__ulp+0x34>
 800e18e:	f1a2 0314 	sub.w	r3, r2, #20
 800e192:	2b1e      	cmp	r3, #30
 800e194:	bfd6      	itet	le
 800e196:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e19a:	2201      	movgt	r2, #1
 800e19c:	40da      	lsrle	r2, r3
 800e19e:	2300      	movs	r3, #0
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	4610      	mov	r0, r2
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	7ff00000 	.word	0x7ff00000

0800e1ac <__b2d>:
 800e1ac:	6902      	ldr	r2, [r0, #16]
 800e1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b0:	f100 0614 	add.w	r6, r0, #20
 800e1b4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800e1b8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800e1bc:	4f1e      	ldr	r7, [pc, #120]	@ (800e238 <__b2d+0x8c>)
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f7ff fd5a 	bl	800dc78 <__hi0bits>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	f1c0 0020 	rsb	r0, r0, #32
 800e1ca:	2b0a      	cmp	r3, #10
 800e1cc:	f1a2 0504 	sub.w	r5, r2, #4
 800e1d0:	6008      	str	r0, [r1, #0]
 800e1d2:	dc12      	bgt.n	800e1fa <__b2d+0x4e>
 800e1d4:	42ae      	cmp	r6, r5
 800e1d6:	bf2c      	ite	cs
 800e1d8:	2200      	movcs	r2, #0
 800e1da:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800e1de:	f1c3 0c0b 	rsb	ip, r3, #11
 800e1e2:	3315      	adds	r3, #21
 800e1e4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800e1e8:	fa04 f303 	lsl.w	r3, r4, r3
 800e1ec:	fa22 f20c 	lsr.w	r2, r2, ip
 800e1f0:	ea4e 0107 	orr.w	r1, lr, r7
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1fa:	42ae      	cmp	r6, r5
 800e1fc:	bf36      	itet	cc
 800e1fe:	f1a2 0508 	subcc.w	r5, r2, #8
 800e202:	2200      	movcs	r2, #0
 800e204:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800e208:	3b0b      	subs	r3, #11
 800e20a:	d012      	beq.n	800e232 <__b2d+0x86>
 800e20c:	f1c3 0720 	rsb	r7, r3, #32
 800e210:	fa22 f107 	lsr.w	r1, r2, r7
 800e214:	409c      	lsls	r4, r3
 800e216:	430c      	orrs	r4, r1
 800e218:	42b5      	cmp	r5, r6
 800e21a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800e21e:	bf94      	ite	ls
 800e220:	2400      	movls	r4, #0
 800e222:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800e226:	409a      	lsls	r2, r3
 800e228:	40fc      	lsrs	r4, r7
 800e22a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800e22e:	4322      	orrs	r2, r4
 800e230:	e7e1      	b.n	800e1f6 <__b2d+0x4a>
 800e232:	ea44 0107 	orr.w	r1, r4, r7
 800e236:	e7de      	b.n	800e1f6 <__b2d+0x4a>
 800e238:	3ff00000 	.word	0x3ff00000

0800e23c <__d2b>:
 800e23c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800e240:	2101      	movs	r1, #1
 800e242:	4690      	mov	r8, r2
 800e244:	4699      	mov	r9, r3
 800e246:	9e08      	ldr	r6, [sp, #32]
 800e248:	f7ff fc24 	bl	800da94 <_Balloc>
 800e24c:	4604      	mov	r4, r0
 800e24e:	b930      	cbnz	r0, 800e25e <__d2b+0x22>
 800e250:	4602      	mov	r2, r0
 800e252:	f240 310f 	movw	r1, #783	@ 0x30f
 800e256:	4b23      	ldr	r3, [pc, #140]	@ (800e2e4 <__d2b+0xa8>)
 800e258:	4823      	ldr	r0, [pc, #140]	@ (800e2e8 <__d2b+0xac>)
 800e25a:	f000 faed 	bl	800e838 <__assert_func>
 800e25e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e262:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e266:	b10d      	cbz	r5, 800e26c <__d2b+0x30>
 800e268:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	f1b8 0300 	subs.w	r3, r8, #0
 800e272:	d024      	beq.n	800e2be <__d2b+0x82>
 800e274:	4668      	mov	r0, sp
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	f7ff fd1d 	bl	800dcb6 <__lo0bits>
 800e27c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e280:	b1d8      	cbz	r0, 800e2ba <__d2b+0x7e>
 800e282:	f1c0 0320 	rsb	r3, r0, #32
 800e286:	fa02 f303 	lsl.w	r3, r2, r3
 800e28a:	430b      	orrs	r3, r1
 800e28c:	40c2      	lsrs	r2, r0
 800e28e:	6163      	str	r3, [r4, #20]
 800e290:	9201      	str	r2, [sp, #4]
 800e292:	9b01      	ldr	r3, [sp, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	bf0c      	ite	eq
 800e298:	2201      	moveq	r2, #1
 800e29a:	2202      	movne	r2, #2
 800e29c:	61a3      	str	r3, [r4, #24]
 800e29e:	6122      	str	r2, [r4, #16]
 800e2a0:	b1ad      	cbz	r5, 800e2ce <__d2b+0x92>
 800e2a2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e2a6:	4405      	add	r5, r0
 800e2a8:	6035      	str	r5, [r6, #0]
 800e2aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2b0:	6018      	str	r0, [r3, #0]
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	b002      	add	sp, #8
 800e2b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e2ba:	6161      	str	r1, [r4, #20]
 800e2bc:	e7e9      	b.n	800e292 <__d2b+0x56>
 800e2be:	a801      	add	r0, sp, #4
 800e2c0:	f7ff fcf9 	bl	800dcb6 <__lo0bits>
 800e2c4:	9b01      	ldr	r3, [sp, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	6163      	str	r3, [r4, #20]
 800e2ca:	3020      	adds	r0, #32
 800e2cc:	e7e7      	b.n	800e29e <__d2b+0x62>
 800e2ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e2d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2d6:	6030      	str	r0, [r6, #0]
 800e2d8:	6918      	ldr	r0, [r3, #16]
 800e2da:	f7ff fccd 	bl	800dc78 <__hi0bits>
 800e2de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2e2:	e7e4      	b.n	800e2ae <__d2b+0x72>
 800e2e4:	0800fece 	.word	0x0800fece
 800e2e8:	0800ff56 	.word	0x0800ff56

0800e2ec <__ratio>:
 800e2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f0:	b085      	sub	sp, #20
 800e2f2:	e9cd 1000 	strd	r1, r0, [sp]
 800e2f6:	a902      	add	r1, sp, #8
 800e2f8:	f7ff ff58 	bl	800e1ac <__b2d>
 800e2fc:	468b      	mov	fp, r1
 800e2fe:	4606      	mov	r6, r0
 800e300:	460f      	mov	r7, r1
 800e302:	9800      	ldr	r0, [sp, #0]
 800e304:	a903      	add	r1, sp, #12
 800e306:	f7ff ff51 	bl	800e1ac <__b2d>
 800e30a:	460d      	mov	r5, r1
 800e30c:	9b01      	ldr	r3, [sp, #4]
 800e30e:	4689      	mov	r9, r1
 800e310:	6919      	ldr	r1, [r3, #16]
 800e312:	9b00      	ldr	r3, [sp, #0]
 800e314:	4604      	mov	r4, r0
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	4630      	mov	r0, r6
 800e31a:	1ac9      	subs	r1, r1, r3
 800e31c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e320:	1a9b      	subs	r3, r3, r2
 800e322:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e326:	2b00      	cmp	r3, #0
 800e328:	bfcd      	iteet	gt
 800e32a:	463a      	movgt	r2, r7
 800e32c:	462a      	movle	r2, r5
 800e32e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e332:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e336:	bfd8      	it	le
 800e338:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e33c:	464b      	mov	r3, r9
 800e33e:	4622      	mov	r2, r4
 800e340:	4659      	mov	r1, fp
 800e342:	f7f2 f9f3 	bl	800072c <__aeabi_ddiv>
 800e346:	b005      	add	sp, #20
 800e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e34c <_mprec_log10>:
 800e34c:	2817      	cmp	r0, #23
 800e34e:	b5d0      	push	{r4, r6, r7, lr}
 800e350:	4604      	mov	r4, r0
 800e352:	dc05      	bgt.n	800e360 <_mprec_log10+0x14>
 800e354:	4b08      	ldr	r3, [pc, #32]	@ (800e378 <_mprec_log10+0x2c>)
 800e356:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800e35a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e35e:	bdd0      	pop	{r4, r6, r7, pc}
 800e360:	2000      	movs	r0, #0
 800e362:	2600      	movs	r6, #0
 800e364:	4905      	ldr	r1, [pc, #20]	@ (800e37c <_mprec_log10+0x30>)
 800e366:	4f06      	ldr	r7, [pc, #24]	@ (800e380 <_mprec_log10+0x34>)
 800e368:	4632      	mov	r2, r6
 800e36a:	463b      	mov	r3, r7
 800e36c:	f7f2 f8b4 	bl	80004d8 <__aeabi_dmul>
 800e370:	3c01      	subs	r4, #1
 800e372:	d1f9      	bne.n	800e368 <_mprec_log10+0x1c>
 800e374:	e7f3      	b.n	800e35e <_mprec_log10+0x12>
 800e376:	bf00      	nop
 800e378:	08010110 	.word	0x08010110
 800e37c:	3ff00000 	.word	0x3ff00000
 800e380:	40240000 	.word	0x40240000

0800e384 <__copybits>:
 800e384:	3901      	subs	r1, #1
 800e386:	b570      	push	{r4, r5, r6, lr}
 800e388:	1149      	asrs	r1, r1, #5
 800e38a:	6914      	ldr	r4, [r2, #16]
 800e38c:	3101      	adds	r1, #1
 800e38e:	f102 0314 	add.w	r3, r2, #20
 800e392:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e396:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e39a:	1f05      	subs	r5, r0, #4
 800e39c:	42a3      	cmp	r3, r4
 800e39e:	d30c      	bcc.n	800e3ba <__copybits+0x36>
 800e3a0:	1aa3      	subs	r3, r4, r2
 800e3a2:	3b11      	subs	r3, #17
 800e3a4:	f023 0303 	bic.w	r3, r3, #3
 800e3a8:	3211      	adds	r2, #17
 800e3aa:	42a2      	cmp	r2, r4
 800e3ac:	bf88      	it	hi
 800e3ae:	2300      	movhi	r3, #0
 800e3b0:	4418      	add	r0, r3
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	4288      	cmp	r0, r1
 800e3b6:	d305      	bcc.n	800e3c4 <__copybits+0x40>
 800e3b8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800e3be:	f845 6f04 	str.w	r6, [r5, #4]!
 800e3c2:	e7eb      	b.n	800e39c <__copybits+0x18>
 800e3c4:	f840 3b04 	str.w	r3, [r0], #4
 800e3c8:	e7f4      	b.n	800e3b4 <__copybits+0x30>

0800e3ca <__any_on>:
 800e3ca:	f100 0214 	add.w	r2, r0, #20
 800e3ce:	6900      	ldr	r0, [r0, #16]
 800e3d0:	114b      	asrs	r3, r1, #5
 800e3d2:	4298      	cmp	r0, r3
 800e3d4:	b510      	push	{r4, lr}
 800e3d6:	db11      	blt.n	800e3fc <__any_on+0x32>
 800e3d8:	dd0a      	ble.n	800e3f0 <__any_on+0x26>
 800e3da:	f011 011f 	ands.w	r1, r1, #31
 800e3de:	d007      	beq.n	800e3f0 <__any_on+0x26>
 800e3e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e3e4:	fa24 f001 	lsr.w	r0, r4, r1
 800e3e8:	fa00 f101 	lsl.w	r1, r0, r1
 800e3ec:	428c      	cmp	r4, r1
 800e3ee:	d10b      	bne.n	800e408 <__any_on+0x3e>
 800e3f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d803      	bhi.n	800e400 <__any_on+0x36>
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	bd10      	pop	{r4, pc}
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	e7f7      	b.n	800e3f0 <__any_on+0x26>
 800e400:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e404:	2900      	cmp	r1, #0
 800e406:	d0f5      	beq.n	800e3f4 <__any_on+0x2a>
 800e408:	2001      	movs	r0, #1
 800e40a:	e7f6      	b.n	800e3fa <__any_on+0x30>

0800e40c <__ascii_wctomb>:
 800e40c:	4603      	mov	r3, r0
 800e40e:	4608      	mov	r0, r1
 800e410:	b141      	cbz	r1, 800e424 <__ascii_wctomb+0x18>
 800e412:	2aff      	cmp	r2, #255	@ 0xff
 800e414:	d904      	bls.n	800e420 <__ascii_wctomb+0x14>
 800e416:	228a      	movs	r2, #138	@ 0x8a
 800e418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	4770      	bx	lr
 800e420:	2001      	movs	r0, #1
 800e422:	700a      	strb	r2, [r1, #0]
 800e424:	4770      	bx	lr

0800e426 <print_e>:
 800e426:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e428:	b08b      	sub	sp, #44	@ 0x2c
 800e42a:	460d      	mov	r5, r1
 800e42c:	a908      	add	r1, sp, #32
 800e42e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e430:	9104      	str	r1, [sp, #16]
 800e432:	a907      	add	r1, sp, #28
 800e434:	9103      	str	r1, [sp, #12]
 800e436:	a909      	add	r1, sp, #36	@ 0x24
 800e438:	9102      	str	r1, [sp, #8]
 800e43a:	1c71      	adds	r1, r6, #1
 800e43c:	9101      	str	r1, [sp, #4]
 800e43e:	2102      	movs	r1, #2
 800e440:	9100      	str	r1, [sp, #0]
 800e442:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 800e446:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800e448:	f000 fab2 	bl	800e9b0 <_dtoa_r>
 800e44c:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e452:	4601      	mov	r1, r0
 800e454:	429a      	cmp	r2, r3
 800e456:	d104      	bne.n	800e462 <print_e+0x3c>
 800e458:	4628      	mov	r0, r5
 800e45a:	f000 f9e5 	bl	800e828 <strcpy>
 800e45e:	b00b      	add	sp, #44	@ 0x2c
 800e460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e462:	462b      	mov	r3, r5
 800e464:	7800      	ldrb	r0, [r0, #0]
 800e466:	2e00      	cmp	r6, #0
 800e468:	f803 0b01 	strb.w	r0, [r3], #1
 800e46c:	bfc8      	it	gt
 800e46e:	2401      	movgt	r4, #1
 800e470:	202e      	movs	r0, #46	@ 0x2e
 800e472:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800e476:	b10d      	cbz	r5, 800e47c <print_e+0x56>
 800e478:	2e00      	cmp	r6, #0
 800e47a:	dc29      	bgt.n	800e4d0 <print_e+0xaa>
 800e47c:	2f67      	cmp	r7, #103	@ 0x67
 800e47e:	d038      	beq.n	800e4f2 <print_e+0xcc>
 800e480:	2f47      	cmp	r7, #71	@ 0x47
 800e482:	d038      	beq.n	800e4f6 <print_e+0xd0>
 800e484:	212e      	movs	r1, #46	@ 0x2e
 800e486:	2030      	movs	r0, #48	@ 0x30
 800e488:	2e00      	cmp	r6, #0
 800e48a:	dc2a      	bgt.n	800e4e2 <print_e+0xbc>
 800e48c:	1e51      	subs	r1, r2, #1
 800e48e:	2900      	cmp	r1, #0
 800e490:	bfa8      	it	ge
 800e492:	222b      	movge	r2, #43	@ 0x2b
 800e494:	9109      	str	r1, [sp, #36]	@ 0x24
 800e496:	bfbd      	ittte	lt
 800e498:	212d      	movlt	r1, #45	@ 0x2d
 800e49a:	f1c2 0201 	rsblt	r2, r2, #1
 800e49e:	9209      	strlt	r2, [sp, #36]	@ 0x24
 800e4a0:	705a      	strbge	r2, [r3, #1]
 800e4a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4a4:	bfb8      	it	lt
 800e4a6:	7059      	strblt	r1, [r3, #1]
 800e4a8:	2a63      	cmp	r2, #99	@ 0x63
 800e4aa:	701f      	strb	r7, [r3, #0]
 800e4ac:	dc25      	bgt.n	800e4fa <print_e+0xd4>
 800e4ae:	1c98      	adds	r0, r3, #2
 800e4b0:	220a      	movs	r2, #10
 800e4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4b4:	fb93 f2f2 	sdiv	r2, r3, r2
 800e4b8:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800e4bc:	7001      	strb	r1, [r0, #0]
 800e4be:	f06f 0109 	mvn.w	r1, #9
 800e4c2:	fb01 3302 	mla	r3, r1, r2, r3
 800e4c6:	3330      	adds	r3, #48	@ 0x30
 800e4c8:	7043      	strb	r3, [r0, #1]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	7083      	strb	r3, [r0, #2]
 800e4ce:	e7c6      	b.n	800e45e <print_e+0x38>
 800e4d0:	b10c      	cbz	r4, 800e4d6 <print_e+0xb0>
 800e4d2:	f803 0b01 	strb.w	r0, [r3], #1
 800e4d6:	780c      	ldrb	r4, [r1, #0]
 800e4d8:	3e01      	subs	r6, #1
 800e4da:	f803 4b01 	strb.w	r4, [r3], #1
 800e4de:	2400      	movs	r4, #0
 800e4e0:	e7c7      	b.n	800e472 <print_e+0x4c>
 800e4e2:	b10c      	cbz	r4, 800e4e8 <print_e+0xc2>
 800e4e4:	f803 1b01 	strb.w	r1, [r3], #1
 800e4e8:	2400      	movs	r4, #0
 800e4ea:	f803 0b01 	strb.w	r0, [r3], #1
 800e4ee:	3e01      	subs	r6, #1
 800e4f0:	e7ca      	b.n	800e488 <print_e+0x62>
 800e4f2:	2765      	movs	r7, #101	@ 0x65
 800e4f4:	e7ca      	b.n	800e48c <print_e+0x66>
 800e4f6:	2745      	movs	r7, #69	@ 0x45
 800e4f8:	e7c8      	b.n	800e48c <print_e+0x66>
 800e4fa:	2164      	movs	r1, #100	@ 0x64
 800e4fc:	fb92 f1f1 	sdiv	r1, r2, r1
 800e500:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 800e504:	1cd8      	adds	r0, r3, #3
 800e506:	709c      	strb	r4, [r3, #2]
 800e508:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800e50c:	fb03 2201 	mla	r2, r3, r1, r2
 800e510:	9209      	str	r2, [sp, #36]	@ 0x24
 800e512:	e7cd      	b.n	800e4b0 <print_e+0x8a>
 800e514:	0000      	movs	r0, r0
	...

0800e518 <_gcvt>:
 800e518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e51c:	4614      	mov	r4, r2
 800e51e:	461d      	mov	r5, r3
 800e520:	b08a      	sub	sp, #40	@ 0x28
 800e522:	2200      	movs	r2, #0
 800e524:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	@ 0x48
 800e528:	2300      	movs	r3, #0
 800e52a:	4681      	mov	r9, r0
 800e52c:	4629      	mov	r1, r5
 800e52e:	4620      	mov	r0, r4
 800e530:	f7f2 fa44 	bl	80009bc <__aeabi_dcmplt>
 800e534:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e536:	4682      	mov	sl, r0
 800e538:	2200      	movs	r2, #0
 800e53a:	2300      	movs	r3, #0
 800e53c:	b1c0      	cbz	r0, 800e570 <_gcvt+0x58>
 800e53e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800e542:	461d      	mov	r5, r3
 800e544:	a35a      	add	r3, pc, #360	@ (adr r3, 800e6b0 <_gcvt+0x198>)
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	4620      	mov	r0, r4
 800e54c:	4629      	mov	r1, r5
 800e54e:	f7f2 fa3f 	bl	80009d0 <__aeabi_dcmple>
 800e552:	b1d8      	cbz	r0, 800e58c <_gcvt+0x74>
 800e554:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e558:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	9000      	str	r0, [sp, #0]
 800e560:	4622      	mov	r2, r4
 800e562:	462b      	mov	r3, r5
 800e564:	4631      	mov	r1, r6
 800e566:	4648      	mov	r0, r9
 800e568:	9702      	str	r7, [sp, #8]
 800e56a:	f7ff ff5c 	bl	800e426 <print_e>
 800e56e:	e009      	b.n	800e584 <_gcvt+0x6c>
 800e570:	4620      	mov	r0, r4
 800e572:	4629      	mov	r1, r5
 800e574:	f7f2 fa18 	bl	80009a8 <__aeabi_dcmpeq>
 800e578:	2800      	cmp	r0, #0
 800e57a:	d0e3      	beq.n	800e544 <_gcvt+0x2c>
 800e57c:	2330      	movs	r3, #48	@ 0x30
 800e57e:	f886 a001 	strb.w	sl, [r6, #1]
 800e582:	7033      	strb	r3, [r6, #0]
 800e584:	4630      	mov	r0, r6
 800e586:	b00a      	add	sp, #40	@ 0x28
 800e588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e58c:	4640      	mov	r0, r8
 800e58e:	f7ff fedd 	bl	800e34c <_mprec_log10>
 800e592:	4622      	mov	r2, r4
 800e594:	462b      	mov	r3, r5
 800e596:	f7f2 fa1b 	bl	80009d0 <__aeabi_dcmple>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d1da      	bne.n	800e554 <_gcvt+0x3c>
 800e59e:	ab09      	add	r3, sp, #36	@ 0x24
 800e5a0:	9304      	str	r3, [sp, #16]
 800e5a2:	ab08      	add	r3, sp, #32
 800e5a4:	9303      	str	r3, [sp, #12]
 800e5a6:	ab07      	add	r3, sp, #28
 800e5a8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	4622      	mov	r2, r4
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	4648      	mov	r0, r9
 800e5b4:	462b      	mov	r3, r5
 800e5b6:	f000 f9fb 	bl	800e9b0 <_dtoa_r>
 800e5ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5be:	9a07      	ldr	r2, [sp, #28]
 800e5c0:	4601      	mov	r1, r0
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d045      	beq.n	800e652 <_gcvt+0x13a>
 800e5c6:	4633      	mov	r3, r6
 800e5c8:	460c      	mov	r4, r1
 800e5ca:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e5ce:	9a07      	ldr	r2, [sp, #28]
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d142      	bne.n	800e65a <_gcvt+0x142>
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800e5da:	eb06 0008 	add.w	r0, r6, r8
 800e5de:	1ac0      	subs	r0, r0, r3
 800e5e0:	2a00      	cmp	r2, #0
 800e5e2:	4615      	mov	r5, r2
 800e5e4:	dc45      	bgt.n	800e672 <_gcvt+0x15a>
 800e5e6:	b101      	cbz	r1, 800e5ea <_gcvt+0xd2>
 800e5e8:	9207      	str	r2, [sp, #28]
 800e5ea:	b90f      	cbnz	r7, 800e5f0 <_gcvt+0xd8>
 800e5ec:	7822      	ldrb	r2, [r4, #0]
 800e5ee:	b36a      	cbz	r2, 800e64c <_gcvt+0x134>
 800e5f0:	42b3      	cmp	r3, r6
 800e5f2:	bf04      	itt	eq
 800e5f4:	2230      	moveq	r2, #48	@ 0x30
 800e5f6:	f803 2b01 	strbeq.w	r2, [r3], #1
 800e5fa:	222e      	movs	r2, #46	@ 0x2e
 800e5fc:	f04f 0e00 	mov.w	lr, #0
 800e600:	701a      	strb	r2, [r3, #0]
 800e602:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800e606:	461a      	mov	r2, r3
 800e608:	9907      	ldr	r1, [sp, #28]
 800e60a:	1acd      	subs	r5, r1, r3
 800e60c:	42d5      	cmn	r5, r2
 800e60e:	d438      	bmi.n	800e682 <_gcvt+0x16a>
 800e610:	2900      	cmp	r1, #0
 800e612:	bfcc      	ite	gt
 800e614:	f04f 0c00 	movgt.w	ip, #0
 800e618:	f04f 0c01 	movle.w	ip, #1
 800e61c:	424a      	negs	r2, r1
 800e61e:	f1bc 0f00 	cmp.w	ip, #0
 800e622:	bf14      	ite	ne
 800e624:	4615      	movne	r5, r2
 800e626:	2500      	moveq	r5, #0
 800e628:	3501      	adds	r5, #1
 800e62a:	442b      	add	r3, r5
 800e62c:	f1be 0f00 	cmp.w	lr, #0
 800e630:	d005      	beq.n	800e63e <_gcvt+0x126>
 800e632:	f1bc 0f00 	cmp.w	ip, #0
 800e636:	bf08      	it	eq
 800e638:	2200      	moveq	r2, #0
 800e63a:	440a      	add	r2, r1
 800e63c:	9207      	str	r2, [sp, #28]
 800e63e:	1e62      	subs	r2, r4, #1
 800e640:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e644:	b109      	cbz	r1, 800e64a <_gcvt+0x132>
 800e646:	2800      	cmp	r0, #0
 800e648:	dc20      	bgt.n	800e68c <_gcvt+0x174>
 800e64a:	bb67      	cbnz	r7, 800e6a6 <_gcvt+0x18e>
 800e64c:	2200      	movs	r2, #0
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	e798      	b.n	800e584 <_gcvt+0x6c>
 800e652:	4630      	mov	r0, r6
 800e654:	f000 f8e8 	bl	800e828 <strcpy>
 800e658:	e794      	b.n	800e584 <_gcvt+0x6c>
 800e65a:	2a00      	cmp	r2, #0
 800e65c:	ddba      	ble.n	800e5d4 <_gcvt+0xbc>
 800e65e:	3a01      	subs	r2, #1
 800e660:	f803 0b01 	strb.w	r0, [r3], #1
 800e664:	9207      	str	r2, [sp, #28]
 800e666:	e7af      	b.n	800e5c8 <_gcvt+0xb0>
 800e668:	2101      	movs	r1, #1
 800e66a:	f803 cb01 	strb.w	ip, [r3], #1
 800e66e:	3801      	subs	r0, #1
 800e670:	e7b6      	b.n	800e5e0 <_gcvt+0xc8>
 800e672:	2800      	cmp	r0, #0
 800e674:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 800e678:	dcf6      	bgt.n	800e668 <_gcvt+0x150>
 800e67a:	2900      	cmp	r1, #0
 800e67c:	d0b5      	beq.n	800e5ea <_gcvt+0xd2>
 800e67e:	9507      	str	r5, [sp, #28]
 800e680:	e7b3      	b.n	800e5ea <_gcvt+0xd2>
 800e682:	f04f 0e01 	mov.w	lr, #1
 800e686:	f802 cf01 	strb.w	ip, [r2, #1]!
 800e68a:	e7bf      	b.n	800e60c <_gcvt+0xf4>
 800e68c:	f803 1b01 	strb.w	r1, [r3], #1
 800e690:	3801      	subs	r0, #1
 800e692:	e7d5      	b.n	800e640 <_gcvt+0x128>
 800e694:	f802 5b01 	strb.w	r5, [r2], #1
 800e698:	1aa1      	subs	r1, r4, r2
 800e69a:	2900      	cmp	r1, #0
 800e69c:	dcfa      	bgt.n	800e694 <_gcvt+0x17c>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	bfa8      	it	ge
 800e6a2:	181b      	addge	r3, r3, r0
 800e6a4:	e7d2      	b.n	800e64c <_gcvt+0x134>
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	2530      	movs	r5, #48	@ 0x30
 800e6aa:	181c      	adds	r4, r3, r0
 800e6ac:	e7f4      	b.n	800e698 <_gcvt+0x180>
 800e6ae:	bf00      	nop
 800e6b0:	eb1c432d 	.word	0xeb1c432d
 800e6b4:	3f1a36e2 	.word	0x3f1a36e2

0800e6b8 <__sflush_r>:
 800e6b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6be:	0716      	lsls	r6, r2, #28
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	d454      	bmi.n	800e770 <__sflush_r+0xb8>
 800e6c6:	684b      	ldr	r3, [r1, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dc02      	bgt.n	800e6d2 <__sflush_r+0x1a>
 800e6cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	dd48      	ble.n	800e764 <__sflush_r+0xac>
 800e6d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6d4:	2e00      	cmp	r6, #0
 800e6d6:	d045      	beq.n	800e764 <__sflush_r+0xac>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e6de:	682f      	ldr	r7, [r5, #0]
 800e6e0:	6a21      	ldr	r1, [r4, #32]
 800e6e2:	602b      	str	r3, [r5, #0]
 800e6e4:	d030      	beq.n	800e748 <__sflush_r+0x90>
 800e6e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	0759      	lsls	r1, r3, #29
 800e6ec:	d505      	bpl.n	800e6fa <__sflush_r+0x42>
 800e6ee:	6863      	ldr	r3, [r4, #4]
 800e6f0:	1ad2      	subs	r2, r2, r3
 800e6f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e6f4:	b10b      	cbz	r3, 800e6fa <__sflush_r+0x42>
 800e6f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6f8:	1ad2      	subs	r2, r2, r3
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e700:	6a21      	ldr	r1, [r4, #32]
 800e702:	47b0      	blx	r6
 800e704:	1c43      	adds	r3, r0, #1
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	d106      	bne.n	800e718 <__sflush_r+0x60>
 800e70a:	6829      	ldr	r1, [r5, #0]
 800e70c:	291d      	cmp	r1, #29
 800e70e:	d82b      	bhi.n	800e768 <__sflush_r+0xb0>
 800e710:	4a28      	ldr	r2, [pc, #160]	@ (800e7b4 <__sflush_r+0xfc>)
 800e712:	40ca      	lsrs	r2, r1
 800e714:	07d6      	lsls	r6, r2, #31
 800e716:	d527      	bpl.n	800e768 <__sflush_r+0xb0>
 800e718:	2200      	movs	r2, #0
 800e71a:	6062      	str	r2, [r4, #4]
 800e71c:	6922      	ldr	r2, [r4, #16]
 800e71e:	04d9      	lsls	r1, r3, #19
 800e720:	6022      	str	r2, [r4, #0]
 800e722:	d504      	bpl.n	800e72e <__sflush_r+0x76>
 800e724:	1c42      	adds	r2, r0, #1
 800e726:	d101      	bne.n	800e72c <__sflush_r+0x74>
 800e728:	682b      	ldr	r3, [r5, #0]
 800e72a:	b903      	cbnz	r3, 800e72e <__sflush_r+0x76>
 800e72c:	6560      	str	r0, [r4, #84]	@ 0x54
 800e72e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e730:	602f      	str	r7, [r5, #0]
 800e732:	b1b9      	cbz	r1, 800e764 <__sflush_r+0xac>
 800e734:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e738:	4299      	cmp	r1, r3
 800e73a:	d002      	beq.n	800e742 <__sflush_r+0x8a>
 800e73c:	4628      	mov	r0, r5
 800e73e:	f7fe fd67 	bl	800d210 <_free_r>
 800e742:	2300      	movs	r3, #0
 800e744:	6363      	str	r3, [r4, #52]	@ 0x34
 800e746:	e00d      	b.n	800e764 <__sflush_r+0xac>
 800e748:	2301      	movs	r3, #1
 800e74a:	4628      	mov	r0, r5
 800e74c:	47b0      	blx	r6
 800e74e:	4602      	mov	r2, r0
 800e750:	1c50      	adds	r0, r2, #1
 800e752:	d1c9      	bne.n	800e6e8 <__sflush_r+0x30>
 800e754:	682b      	ldr	r3, [r5, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d0c6      	beq.n	800e6e8 <__sflush_r+0x30>
 800e75a:	2b1d      	cmp	r3, #29
 800e75c:	d001      	beq.n	800e762 <__sflush_r+0xaa>
 800e75e:	2b16      	cmp	r3, #22
 800e760:	d11d      	bne.n	800e79e <__sflush_r+0xe6>
 800e762:	602f      	str	r7, [r5, #0]
 800e764:	2000      	movs	r0, #0
 800e766:	e021      	b.n	800e7ac <__sflush_r+0xf4>
 800e768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e76c:	b21b      	sxth	r3, r3
 800e76e:	e01a      	b.n	800e7a6 <__sflush_r+0xee>
 800e770:	690f      	ldr	r7, [r1, #16]
 800e772:	2f00      	cmp	r7, #0
 800e774:	d0f6      	beq.n	800e764 <__sflush_r+0xac>
 800e776:	0793      	lsls	r3, r2, #30
 800e778:	bf18      	it	ne
 800e77a:	2300      	movne	r3, #0
 800e77c:	680e      	ldr	r6, [r1, #0]
 800e77e:	bf08      	it	eq
 800e780:	694b      	ldreq	r3, [r1, #20]
 800e782:	1bf6      	subs	r6, r6, r7
 800e784:	600f      	str	r7, [r1, #0]
 800e786:	608b      	str	r3, [r1, #8]
 800e788:	2e00      	cmp	r6, #0
 800e78a:	ddeb      	ble.n	800e764 <__sflush_r+0xac>
 800e78c:	4633      	mov	r3, r6
 800e78e:	463a      	mov	r2, r7
 800e790:	4628      	mov	r0, r5
 800e792:	6a21      	ldr	r1, [r4, #32]
 800e794:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e798:	47e0      	blx	ip
 800e79a:	2800      	cmp	r0, #0
 800e79c:	dc07      	bgt.n	800e7ae <__sflush_r+0xf6>
 800e79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7aa:	81a3      	strh	r3, [r4, #12]
 800e7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7ae:	4407      	add	r7, r0
 800e7b0:	1a36      	subs	r6, r6, r0
 800e7b2:	e7e9      	b.n	800e788 <__sflush_r+0xd0>
 800e7b4:	20400001 	.word	0x20400001

0800e7b8 <_fflush_r>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	690b      	ldr	r3, [r1, #16]
 800e7bc:	4605      	mov	r5, r0
 800e7be:	460c      	mov	r4, r1
 800e7c0:	b913      	cbnz	r3, 800e7c8 <_fflush_r+0x10>
 800e7c2:	2500      	movs	r5, #0
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	bd38      	pop	{r3, r4, r5, pc}
 800e7c8:	b118      	cbz	r0, 800e7d2 <_fflush_r+0x1a>
 800e7ca:	6a03      	ldr	r3, [r0, #32]
 800e7cc:	b90b      	cbnz	r3, 800e7d2 <_fflush_r+0x1a>
 800e7ce:	f7fe fc03 	bl	800cfd8 <__sinit>
 800e7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d0f3      	beq.n	800e7c2 <_fflush_r+0xa>
 800e7da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7dc:	07d0      	lsls	r0, r2, #31
 800e7de:	d404      	bmi.n	800e7ea <_fflush_r+0x32>
 800e7e0:	0599      	lsls	r1, r3, #22
 800e7e2:	d402      	bmi.n	800e7ea <_fflush_r+0x32>
 800e7e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7e6:	f7fe fcfc 	bl	800d1e2 <__retarget_lock_acquire_recursive>
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	4621      	mov	r1, r4
 800e7ee:	f7ff ff63 	bl	800e6b8 <__sflush_r>
 800e7f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7f4:	4605      	mov	r5, r0
 800e7f6:	07da      	lsls	r2, r3, #31
 800e7f8:	d4e4      	bmi.n	800e7c4 <_fflush_r+0xc>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	059b      	lsls	r3, r3, #22
 800e7fe:	d4e1      	bmi.n	800e7c4 <_fflush_r+0xc>
 800e800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e802:	f7fe fcef 	bl	800d1e4 <__retarget_lock_release_recursive>
 800e806:	e7dd      	b.n	800e7c4 <_fflush_r+0xc>

0800e808 <_sbrk_r>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	2300      	movs	r3, #0
 800e80c:	4d05      	ldr	r5, [pc, #20]	@ (800e824 <_sbrk_r+0x1c>)
 800e80e:	4604      	mov	r4, r0
 800e810:	4608      	mov	r0, r1
 800e812:	602b      	str	r3, [r5, #0]
 800e814:	f7f3 fdf8 	bl	8002408 <_sbrk>
 800e818:	1c43      	adds	r3, r0, #1
 800e81a:	d102      	bne.n	800e822 <_sbrk_r+0x1a>
 800e81c:	682b      	ldr	r3, [r5, #0]
 800e81e:	b103      	cbz	r3, 800e822 <_sbrk_r+0x1a>
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	bd38      	pop	{r3, r4, r5, pc}
 800e824:	20001888 	.word	0x20001888

0800e828 <strcpy>:
 800e828:	4603      	mov	r3, r0
 800e82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e82e:	f803 2b01 	strb.w	r2, [r3], #1
 800e832:	2a00      	cmp	r2, #0
 800e834:	d1f9      	bne.n	800e82a <strcpy+0x2>
 800e836:	4770      	bx	lr

0800e838 <__assert_func>:
 800e838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e83a:	4614      	mov	r4, r2
 800e83c:	461a      	mov	r2, r3
 800e83e:	4b09      	ldr	r3, [pc, #36]	@ (800e864 <__assert_func+0x2c>)
 800e840:	4605      	mov	r5, r0
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	68d8      	ldr	r0, [r3, #12]
 800e846:	b14c      	cbz	r4, 800e85c <__assert_func+0x24>
 800e848:	4b07      	ldr	r3, [pc, #28]	@ (800e868 <__assert_func+0x30>)
 800e84a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e84e:	9100      	str	r1, [sp, #0]
 800e850:	462b      	mov	r3, r5
 800e852:	4906      	ldr	r1, [pc, #24]	@ (800e86c <__assert_func+0x34>)
 800e854:	f000 fe88 	bl	800f568 <fiprintf>
 800e858:	f000 fe98 	bl	800f58c <abort>
 800e85c:	4b04      	ldr	r3, [pc, #16]	@ (800e870 <__assert_func+0x38>)
 800e85e:	461c      	mov	r4, r3
 800e860:	e7f3      	b.n	800e84a <__assert_func+0x12>
 800e862:	bf00      	nop
 800e864:	200002f8 	.word	0x200002f8
 800e868:	0800ffaf 	.word	0x0800ffaf
 800e86c:	0800ffbc 	.word	0x0800ffbc
 800e870:	0800ffea 	.word	0x0800ffea

0800e874 <_calloc_r>:
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	fba1 5402 	umull	r5, r4, r1, r2
 800e87a:	b934      	cbnz	r4, 800e88a <_calloc_r+0x16>
 800e87c:	4629      	mov	r1, r5
 800e87e:	f7ff f86b 	bl	800d958 <_malloc_r>
 800e882:	4606      	mov	r6, r0
 800e884:	b928      	cbnz	r0, 800e892 <_calloc_r+0x1e>
 800e886:	4630      	mov	r0, r6
 800e888:	bd70      	pop	{r4, r5, r6, pc}
 800e88a:	220c      	movs	r2, #12
 800e88c:	2600      	movs	r6, #0
 800e88e:	6002      	str	r2, [r0, #0]
 800e890:	e7f9      	b.n	800e886 <_calloc_r+0x12>
 800e892:	462a      	mov	r2, r5
 800e894:	4621      	mov	r1, r4
 800e896:	f7fe fc18 	bl	800d0ca <memset>
 800e89a:	e7f4      	b.n	800e886 <_calloc_r+0x12>

0800e89c <quorem>:
 800e89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a0:	6903      	ldr	r3, [r0, #16]
 800e8a2:	690c      	ldr	r4, [r1, #16]
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	42a3      	cmp	r3, r4
 800e8a8:	db7e      	blt.n	800e9a8 <quorem+0x10c>
 800e8aa:	3c01      	subs	r4, #1
 800e8ac:	00a3      	lsls	r3, r4, #2
 800e8ae:	f100 0514 	add.w	r5, r0, #20
 800e8b2:	f101 0814 	add.w	r8, r1, #20
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8bc:	9301      	str	r3, [sp, #4]
 800e8be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e8c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800e8ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e8d2:	d32e      	bcc.n	800e932 <quorem+0x96>
 800e8d4:	f04f 0a00 	mov.w	sl, #0
 800e8d8:	46c4      	mov	ip, r8
 800e8da:	46ae      	mov	lr, r5
 800e8dc:	46d3      	mov	fp, sl
 800e8de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e8e2:	b298      	uxth	r0, r3
 800e8e4:	fb06 a000 	mla	r0, r6, r0, sl
 800e8e8:	0c1b      	lsrs	r3, r3, #16
 800e8ea:	0c02      	lsrs	r2, r0, #16
 800e8ec:	fb06 2303 	mla	r3, r6, r3, r2
 800e8f0:	f8de 2000 	ldr.w	r2, [lr]
 800e8f4:	b280      	uxth	r0, r0
 800e8f6:	b292      	uxth	r2, r2
 800e8f8:	1a12      	subs	r2, r2, r0
 800e8fa:	445a      	add	r2, fp
 800e8fc:	f8de 0000 	ldr.w	r0, [lr]
 800e900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e904:	b29b      	uxth	r3, r3
 800e906:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e90a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e90e:	b292      	uxth	r2, r2
 800e910:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e914:	45e1      	cmp	r9, ip
 800e916:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e91a:	f84e 2b04 	str.w	r2, [lr], #4
 800e91e:	d2de      	bcs.n	800e8de <quorem+0x42>
 800e920:	9b00      	ldr	r3, [sp, #0]
 800e922:	58eb      	ldr	r3, [r5, r3]
 800e924:	b92b      	cbnz	r3, 800e932 <quorem+0x96>
 800e926:	9b01      	ldr	r3, [sp, #4]
 800e928:	3b04      	subs	r3, #4
 800e92a:	429d      	cmp	r5, r3
 800e92c:	461a      	mov	r2, r3
 800e92e:	d32f      	bcc.n	800e990 <quorem+0xf4>
 800e930:	613c      	str	r4, [r7, #16]
 800e932:	4638      	mov	r0, r7
 800e934:	f7ff fb6a 	bl	800e00c <__mcmp>
 800e938:	2800      	cmp	r0, #0
 800e93a:	db25      	blt.n	800e988 <quorem+0xec>
 800e93c:	4629      	mov	r1, r5
 800e93e:	2000      	movs	r0, #0
 800e940:	f858 2b04 	ldr.w	r2, [r8], #4
 800e944:	f8d1 c000 	ldr.w	ip, [r1]
 800e948:	fa1f fe82 	uxth.w	lr, r2
 800e94c:	fa1f f38c 	uxth.w	r3, ip
 800e950:	eba3 030e 	sub.w	r3, r3, lr
 800e954:	4403      	add	r3, r0
 800e956:	0c12      	lsrs	r2, r2, #16
 800e958:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e95c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e960:	b29b      	uxth	r3, r3
 800e962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e966:	45c1      	cmp	r9, r8
 800e968:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e96c:	f841 3b04 	str.w	r3, [r1], #4
 800e970:	d2e6      	bcs.n	800e940 <quorem+0xa4>
 800e972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e97a:	b922      	cbnz	r2, 800e986 <quorem+0xea>
 800e97c:	3b04      	subs	r3, #4
 800e97e:	429d      	cmp	r5, r3
 800e980:	461a      	mov	r2, r3
 800e982:	d30b      	bcc.n	800e99c <quorem+0x100>
 800e984:	613c      	str	r4, [r7, #16]
 800e986:	3601      	adds	r6, #1
 800e988:	4630      	mov	r0, r6
 800e98a:	b003      	add	sp, #12
 800e98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e990:	6812      	ldr	r2, [r2, #0]
 800e992:	3b04      	subs	r3, #4
 800e994:	2a00      	cmp	r2, #0
 800e996:	d1cb      	bne.n	800e930 <quorem+0x94>
 800e998:	3c01      	subs	r4, #1
 800e99a:	e7c6      	b.n	800e92a <quorem+0x8e>
 800e99c:	6812      	ldr	r2, [r2, #0]
 800e99e:	3b04      	subs	r3, #4
 800e9a0:	2a00      	cmp	r2, #0
 800e9a2:	d1ef      	bne.n	800e984 <quorem+0xe8>
 800e9a4:	3c01      	subs	r4, #1
 800e9a6:	e7ea      	b.n	800e97e <quorem+0xe2>
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	e7ee      	b.n	800e98a <quorem+0xee>
 800e9ac:	0000      	movs	r0, r0
	...

0800e9b0 <_dtoa_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	4614      	mov	r4, r2
 800e9b6:	461d      	mov	r5, r3
 800e9b8:	69c7      	ldr	r7, [r0, #28]
 800e9ba:	b097      	sub	sp, #92	@ 0x5c
 800e9bc:	4681      	mov	r9, r0
 800e9be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e9c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e9c4:	b97f      	cbnz	r7, 800e9e6 <_dtoa_r+0x36>
 800e9c6:	2010      	movs	r0, #16
 800e9c8:	f000 fdc6 	bl	800f558 <malloc>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	f8c9 001c 	str.w	r0, [r9, #28]
 800e9d2:	b920      	cbnz	r0, 800e9de <_dtoa_r+0x2e>
 800e9d4:	21ef      	movs	r1, #239	@ 0xef
 800e9d6:	4bac      	ldr	r3, [pc, #688]	@ (800ec88 <_dtoa_r+0x2d8>)
 800e9d8:	48ac      	ldr	r0, [pc, #688]	@ (800ec8c <_dtoa_r+0x2dc>)
 800e9da:	f7ff ff2d 	bl	800e838 <__assert_func>
 800e9de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e9e2:	6007      	str	r7, [r0, #0]
 800e9e4:	60c7      	str	r7, [r0, #12]
 800e9e6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e9ea:	6819      	ldr	r1, [r3, #0]
 800e9ec:	b159      	cbz	r1, 800ea06 <_dtoa_r+0x56>
 800e9ee:	685a      	ldr	r2, [r3, #4]
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	4093      	lsls	r3, r2
 800e9f4:	604a      	str	r2, [r1, #4]
 800e9f6:	608b      	str	r3, [r1, #8]
 800e9f8:	4648      	mov	r0, r9
 800e9fa:	f7ff f88b 	bl	800db14 <_Bfree>
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	1e2b      	subs	r3, r5, #0
 800ea08:	bfaf      	iteee	ge
 800ea0a:	2300      	movge	r3, #0
 800ea0c:	2201      	movlt	r2, #1
 800ea0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ea12:	9307      	strlt	r3, [sp, #28]
 800ea14:	bfa8      	it	ge
 800ea16:	6033      	strge	r3, [r6, #0]
 800ea18:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800ea1c:	4b9c      	ldr	r3, [pc, #624]	@ (800ec90 <_dtoa_r+0x2e0>)
 800ea1e:	bfb8      	it	lt
 800ea20:	6032      	strlt	r2, [r6, #0]
 800ea22:	ea33 0308 	bics.w	r3, r3, r8
 800ea26:	d112      	bne.n	800ea4e <_dtoa_r+0x9e>
 800ea28:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ea2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ea34:	4323      	orrs	r3, r4
 800ea36:	f000 855e 	beq.w	800f4f6 <_dtoa_r+0xb46>
 800ea3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ea3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ec94 <_dtoa_r+0x2e4>
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f000 8560 	beq.w	800f506 <_dtoa_r+0xb56>
 800ea46:	f10a 0303 	add.w	r3, sl, #3
 800ea4a:	f000 bd5a 	b.w	800f502 <_dtoa_r+0xb52>
 800ea4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ea56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	f7f1 ffa3 	bl	80009a8 <__aeabi_dcmpeq>
 800ea62:	4607      	mov	r7, r0
 800ea64:	b158      	cbz	r0, 800ea7e <_dtoa_r+0xce>
 800ea66:	2301      	movs	r3, #1
 800ea68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ea6a:	6013      	str	r3, [r2, #0]
 800ea6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ea6e:	b113      	cbz	r3, 800ea76 <_dtoa_r+0xc6>
 800ea70:	4b89      	ldr	r3, [pc, #548]	@ (800ec98 <_dtoa_r+0x2e8>)
 800ea72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ea74:	6013      	str	r3, [r2, #0]
 800ea76:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800ec9c <_dtoa_r+0x2ec>
 800ea7a:	f000 bd44 	b.w	800f506 <_dtoa_r+0xb56>
 800ea7e:	ab14      	add	r3, sp, #80	@ 0x50
 800ea80:	9301      	str	r3, [sp, #4]
 800ea82:	ab15      	add	r3, sp, #84	@ 0x54
 800ea84:	9300      	str	r3, [sp, #0]
 800ea86:	4648      	mov	r0, r9
 800ea88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ea8c:	f7ff fbd6 	bl	800e23c <__d2b>
 800ea90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ea94:	9003      	str	r0, [sp, #12]
 800ea96:	2e00      	cmp	r6, #0
 800ea98:	d078      	beq.n	800eb8c <_dtoa_r+0x1dc>
 800ea9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eaa0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800eaa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eaa8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800eaac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800eab0:	9712      	str	r7, [sp, #72]	@ 0x48
 800eab2:	4619      	mov	r1, r3
 800eab4:	2200      	movs	r2, #0
 800eab6:	4b7a      	ldr	r3, [pc, #488]	@ (800eca0 <_dtoa_r+0x2f0>)
 800eab8:	f7f1 fb56 	bl	8000168 <__aeabi_dsub>
 800eabc:	a36c      	add	r3, pc, #432	@ (adr r3, 800ec70 <_dtoa_r+0x2c0>)
 800eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac2:	f7f1 fd09 	bl	80004d8 <__aeabi_dmul>
 800eac6:	a36c      	add	r3, pc, #432	@ (adr r3, 800ec78 <_dtoa_r+0x2c8>)
 800eac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eacc:	f7f1 fb4e 	bl	800016c <__adddf3>
 800ead0:	4604      	mov	r4, r0
 800ead2:	4630      	mov	r0, r6
 800ead4:	460d      	mov	r5, r1
 800ead6:	f7f1 fc95 	bl	8000404 <__aeabi_i2d>
 800eada:	a369      	add	r3, pc, #420	@ (adr r3, 800ec80 <_dtoa_r+0x2d0>)
 800eadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae0:	f7f1 fcfa 	bl	80004d8 <__aeabi_dmul>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	4620      	mov	r0, r4
 800eaea:	4629      	mov	r1, r5
 800eaec:	f7f1 fb3e 	bl	800016c <__adddf3>
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	460d      	mov	r5, r1
 800eaf4:	f7f1 ff8a 	bl	8000a0c <__aeabi_d2iz>
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4607      	mov	r7, r0
 800eafc:	2300      	movs	r3, #0
 800eafe:	4620      	mov	r0, r4
 800eb00:	4629      	mov	r1, r5
 800eb02:	f7f1 ff5b 	bl	80009bc <__aeabi_dcmplt>
 800eb06:	b140      	cbz	r0, 800eb1a <_dtoa_r+0x16a>
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f7f1 fc7b 	bl	8000404 <__aeabi_i2d>
 800eb0e:	4622      	mov	r2, r4
 800eb10:	462b      	mov	r3, r5
 800eb12:	f7f1 ff49 	bl	80009a8 <__aeabi_dcmpeq>
 800eb16:	b900      	cbnz	r0, 800eb1a <_dtoa_r+0x16a>
 800eb18:	3f01      	subs	r7, #1
 800eb1a:	2f16      	cmp	r7, #22
 800eb1c:	d854      	bhi.n	800ebc8 <_dtoa_r+0x218>
 800eb1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb22:	4b60      	ldr	r3, [pc, #384]	@ (800eca4 <_dtoa_r+0x2f4>)
 800eb24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2c:	f7f1 ff46 	bl	80009bc <__aeabi_dcmplt>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d04b      	beq.n	800ebcc <_dtoa_r+0x21c>
 800eb34:	2300      	movs	r3, #0
 800eb36:	3f01      	subs	r7, #1
 800eb38:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb3c:	1b9b      	subs	r3, r3, r6
 800eb3e:	1e5a      	subs	r2, r3, #1
 800eb40:	bf49      	itett	mi
 800eb42:	f1c3 0301 	rsbmi	r3, r3, #1
 800eb46:	2300      	movpl	r3, #0
 800eb48:	9304      	strmi	r3, [sp, #16]
 800eb4a:	2300      	movmi	r3, #0
 800eb4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb4e:	bf54      	ite	pl
 800eb50:	9304      	strpl	r3, [sp, #16]
 800eb52:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800eb54:	2f00      	cmp	r7, #0
 800eb56:	db3b      	blt.n	800ebd0 <_dtoa_r+0x220>
 800eb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb5a:	970e      	str	r7, [sp, #56]	@ 0x38
 800eb5c:	443b      	add	r3, r7
 800eb5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb60:	2300      	movs	r3, #0
 800eb62:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eb66:	2b09      	cmp	r3, #9
 800eb68:	d865      	bhi.n	800ec36 <_dtoa_r+0x286>
 800eb6a:	2b05      	cmp	r3, #5
 800eb6c:	bfc4      	itt	gt
 800eb6e:	3b04      	subgt	r3, #4
 800eb70:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800eb72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eb74:	bfc8      	it	gt
 800eb76:	2400      	movgt	r4, #0
 800eb78:	f1a3 0302 	sub.w	r3, r3, #2
 800eb7c:	bfd8      	it	le
 800eb7e:	2401      	movle	r4, #1
 800eb80:	2b03      	cmp	r3, #3
 800eb82:	d864      	bhi.n	800ec4e <_dtoa_r+0x29e>
 800eb84:	e8df f003 	tbb	[pc, r3]
 800eb88:	2c385553 	.word	0x2c385553
 800eb8c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800eb90:	441e      	add	r6, r3
 800eb92:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eb96:	2b20      	cmp	r3, #32
 800eb98:	bfc1      	itttt	gt
 800eb9a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eb9e:	fa08 f803 	lslgt.w	r8, r8, r3
 800eba2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eba6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ebaa:	bfd6      	itet	le
 800ebac:	f1c3 0320 	rsble	r3, r3, #32
 800ebb0:	ea48 0003 	orrgt.w	r0, r8, r3
 800ebb4:	fa04 f003 	lslle.w	r0, r4, r3
 800ebb8:	f7f1 fc14 	bl	80003e4 <__aeabi_ui2d>
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ebc2:	3e01      	subs	r6, #1
 800ebc4:	9212      	str	r2, [sp, #72]	@ 0x48
 800ebc6:	e774      	b.n	800eab2 <_dtoa_r+0x102>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	e7b5      	b.n	800eb38 <_dtoa_r+0x188>
 800ebcc:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ebce:	e7b4      	b.n	800eb3a <_dtoa_r+0x18a>
 800ebd0:	9b04      	ldr	r3, [sp, #16]
 800ebd2:	1bdb      	subs	r3, r3, r7
 800ebd4:	9304      	str	r3, [sp, #16]
 800ebd6:	427b      	negs	r3, r7
 800ebd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebda:	2300      	movs	r3, #0
 800ebdc:	930e      	str	r3, [sp, #56]	@ 0x38
 800ebde:	e7c1      	b.n	800eb64 <_dtoa_r+0x1b4>
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ebe6:	eb07 0b03 	add.w	fp, r7, r3
 800ebea:	f10b 0301 	add.w	r3, fp, #1
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	9308      	str	r3, [sp, #32]
 800ebf2:	bfb8      	it	lt
 800ebf4:	2301      	movlt	r3, #1
 800ebf6:	e006      	b.n	800ec06 <_dtoa_r+0x256>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	dd28      	ble.n	800ec54 <_dtoa_r+0x2a4>
 800ec02:	469b      	mov	fp, r3
 800ec04:	9308      	str	r3, [sp, #32]
 800ec06:	2100      	movs	r1, #0
 800ec08:	2204      	movs	r2, #4
 800ec0a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ec0e:	f102 0514 	add.w	r5, r2, #20
 800ec12:	429d      	cmp	r5, r3
 800ec14:	d926      	bls.n	800ec64 <_dtoa_r+0x2b4>
 800ec16:	6041      	str	r1, [r0, #4]
 800ec18:	4648      	mov	r0, r9
 800ec1a:	f7fe ff3b 	bl	800da94 <_Balloc>
 800ec1e:	4682      	mov	sl, r0
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d143      	bne.n	800ecac <_dtoa_r+0x2fc>
 800ec24:	4602      	mov	r2, r0
 800ec26:	f240 11af 	movw	r1, #431	@ 0x1af
 800ec2a:	4b1f      	ldr	r3, [pc, #124]	@ (800eca8 <_dtoa_r+0x2f8>)
 800ec2c:	e6d4      	b.n	800e9d8 <_dtoa_r+0x28>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e7e3      	b.n	800ebfa <_dtoa_r+0x24a>
 800ec32:	2300      	movs	r3, #0
 800ec34:	e7d5      	b.n	800ebe2 <_dtoa_r+0x232>
 800ec36:	2401      	movs	r4, #1
 800ec38:	2300      	movs	r3, #0
 800ec3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ec3c:	9320      	str	r3, [sp, #128]	@ 0x80
 800ec3e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ec42:	2200      	movs	r2, #0
 800ec44:	2312      	movs	r3, #18
 800ec46:	f8cd b020 	str.w	fp, [sp, #32]
 800ec4a:	9221      	str	r2, [sp, #132]	@ 0x84
 800ec4c:	e7db      	b.n	800ec06 <_dtoa_r+0x256>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec52:	e7f4      	b.n	800ec3e <_dtoa_r+0x28e>
 800ec54:	f04f 0b01 	mov.w	fp, #1
 800ec58:	465b      	mov	r3, fp
 800ec5a:	f8cd b020 	str.w	fp, [sp, #32]
 800ec5e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800ec62:	e7d0      	b.n	800ec06 <_dtoa_r+0x256>
 800ec64:	3101      	adds	r1, #1
 800ec66:	0052      	lsls	r2, r2, #1
 800ec68:	e7d1      	b.n	800ec0e <_dtoa_r+0x25e>
 800ec6a:	bf00      	nop
 800ec6c:	f3af 8000 	nop.w
 800ec70:	636f4361 	.word	0x636f4361
 800ec74:	3fd287a7 	.word	0x3fd287a7
 800ec78:	8b60c8b3 	.word	0x8b60c8b3
 800ec7c:	3fc68a28 	.word	0x3fc68a28
 800ec80:	509f79fb 	.word	0x509f79fb
 800ec84:	3fd34413 	.word	0x3fd34413
 800ec88:	0800ff3f 	.word	0x0800ff3f
 800ec8c:	0800fffa 	.word	0x0800fffa
 800ec90:	7ff00000 	.word	0x7ff00000
 800ec94:	0800fff4 	.word	0x0800fff4
 800ec98:	0800fff9 	.word	0x0800fff9
 800ec9c:	0800fff8 	.word	0x0800fff8
 800eca0:	3ff80000 	.word	0x3ff80000
 800eca4:	08010110 	.word	0x08010110
 800eca8:	0800fece 	.word	0x0800fece
 800ecac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ecb0:	6018      	str	r0, [r3, #0]
 800ecb2:	9b08      	ldr	r3, [sp, #32]
 800ecb4:	2b0e      	cmp	r3, #14
 800ecb6:	f200 80a1 	bhi.w	800edfc <_dtoa_r+0x44c>
 800ecba:	2c00      	cmp	r4, #0
 800ecbc:	f000 809e 	beq.w	800edfc <_dtoa_r+0x44c>
 800ecc0:	2f00      	cmp	r7, #0
 800ecc2:	dd33      	ble.n	800ed2c <_dtoa_r+0x37c>
 800ecc4:	4b9c      	ldr	r3, [pc, #624]	@ (800ef38 <_dtoa_r+0x588>)
 800ecc6:	f007 020f 	and.w	r2, r7, #15
 800ecca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecce:	05f8      	lsls	r0, r7, #23
 800ecd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ecd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800ecd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ecdc:	d516      	bpl.n	800ed0c <_dtoa_r+0x35c>
 800ecde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ece2:	4b96      	ldr	r3, [pc, #600]	@ (800ef3c <_dtoa_r+0x58c>)
 800ece4:	2603      	movs	r6, #3
 800ece6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ecea:	f7f1 fd1f 	bl	800072c <__aeabi_ddiv>
 800ecee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ecf2:	f004 040f 	and.w	r4, r4, #15
 800ecf6:	4d91      	ldr	r5, [pc, #580]	@ (800ef3c <_dtoa_r+0x58c>)
 800ecf8:	b954      	cbnz	r4, 800ed10 <_dtoa_r+0x360>
 800ecfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ecfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed02:	f7f1 fd13 	bl	800072c <__aeabi_ddiv>
 800ed06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed0a:	e028      	b.n	800ed5e <_dtoa_r+0x3ae>
 800ed0c:	2602      	movs	r6, #2
 800ed0e:	e7f2      	b.n	800ecf6 <_dtoa_r+0x346>
 800ed10:	07e1      	lsls	r1, r4, #31
 800ed12:	d508      	bpl.n	800ed26 <_dtoa_r+0x376>
 800ed14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ed18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed1c:	f7f1 fbdc 	bl	80004d8 <__aeabi_dmul>
 800ed20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ed24:	3601      	adds	r6, #1
 800ed26:	1064      	asrs	r4, r4, #1
 800ed28:	3508      	adds	r5, #8
 800ed2a:	e7e5      	b.n	800ecf8 <_dtoa_r+0x348>
 800ed2c:	f000 80af 	beq.w	800ee8e <_dtoa_r+0x4de>
 800ed30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed34:	427c      	negs	r4, r7
 800ed36:	4b80      	ldr	r3, [pc, #512]	@ (800ef38 <_dtoa_r+0x588>)
 800ed38:	f004 020f 	and.w	r2, r4, #15
 800ed3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	f7f1 fbc8 	bl	80004d8 <__aeabi_dmul>
 800ed48:	2602      	movs	r6, #2
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed50:	4d7a      	ldr	r5, [pc, #488]	@ (800ef3c <_dtoa_r+0x58c>)
 800ed52:	1124      	asrs	r4, r4, #4
 800ed54:	2c00      	cmp	r4, #0
 800ed56:	f040 808f 	bne.w	800ee78 <_dtoa_r+0x4c8>
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1d3      	bne.n	800ed06 <_dtoa_r+0x356>
 800ed5e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ed62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f000 8094 	beq.w	800ee92 <_dtoa_r+0x4e2>
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	4629      	mov	r1, r5
 800ed70:	4b73      	ldr	r3, [pc, #460]	@ (800ef40 <_dtoa_r+0x590>)
 800ed72:	f7f1 fe23 	bl	80009bc <__aeabi_dcmplt>
 800ed76:	2800      	cmp	r0, #0
 800ed78:	f000 808b 	beq.w	800ee92 <_dtoa_r+0x4e2>
 800ed7c:	9b08      	ldr	r3, [sp, #32]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f000 8087 	beq.w	800ee92 <_dtoa_r+0x4e2>
 800ed84:	f1bb 0f00 	cmp.w	fp, #0
 800ed88:	dd34      	ble.n	800edf4 <_dtoa_r+0x444>
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	4629      	mov	r1, r5
 800ed90:	4b6c      	ldr	r3, [pc, #432]	@ (800ef44 <_dtoa_r+0x594>)
 800ed92:	f7f1 fba1 	bl	80004d8 <__aeabi_dmul>
 800ed96:	465c      	mov	r4, fp
 800ed98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed9c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800eda0:	3601      	adds	r6, #1
 800eda2:	4630      	mov	r0, r6
 800eda4:	f7f1 fb2e 	bl	8000404 <__aeabi_i2d>
 800eda8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edac:	f7f1 fb94 	bl	80004d8 <__aeabi_dmul>
 800edb0:	2200      	movs	r2, #0
 800edb2:	4b65      	ldr	r3, [pc, #404]	@ (800ef48 <_dtoa_r+0x598>)
 800edb4:	f7f1 f9da 	bl	800016c <__adddf3>
 800edb8:	4605      	mov	r5, r0
 800edba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800edbe:	2c00      	cmp	r4, #0
 800edc0:	d16a      	bne.n	800ee98 <_dtoa_r+0x4e8>
 800edc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edc6:	2200      	movs	r2, #0
 800edc8:	4b60      	ldr	r3, [pc, #384]	@ (800ef4c <_dtoa_r+0x59c>)
 800edca:	f7f1 f9cd 	bl	8000168 <__aeabi_dsub>
 800edce:	4602      	mov	r2, r0
 800edd0:	460b      	mov	r3, r1
 800edd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800edd6:	462a      	mov	r2, r5
 800edd8:	4633      	mov	r3, r6
 800edda:	f7f1 fe0d 	bl	80009f8 <__aeabi_dcmpgt>
 800edde:	2800      	cmp	r0, #0
 800ede0:	f040 8298 	bne.w	800f314 <_dtoa_r+0x964>
 800ede4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ede8:	462a      	mov	r2, r5
 800edea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800edee:	f7f1 fde5 	bl	80009bc <__aeabi_dcmplt>
 800edf2:	bb38      	cbnz	r0, 800ee44 <_dtoa_r+0x494>
 800edf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800edf8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800edfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f2c0 8157 	blt.w	800f0b2 <_dtoa_r+0x702>
 800ee04:	2f0e      	cmp	r7, #14
 800ee06:	f300 8154 	bgt.w	800f0b2 <_dtoa_r+0x702>
 800ee0a:	4b4b      	ldr	r3, [pc, #300]	@ (800ef38 <_dtoa_r+0x588>)
 800ee0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee10:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ee14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ee18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f280 80e5 	bge.w	800efea <_dtoa_r+0x63a>
 800ee20:	9b08      	ldr	r3, [sp, #32]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f300 80e1 	bgt.w	800efea <_dtoa_r+0x63a>
 800ee28:	d10c      	bne.n	800ee44 <_dtoa_r+0x494>
 800ee2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	4b46      	ldr	r3, [pc, #280]	@ (800ef4c <_dtoa_r+0x59c>)
 800ee32:	f7f1 fb51 	bl	80004d8 <__aeabi_dmul>
 800ee36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee3a:	f7f1 fdd3 	bl	80009e4 <__aeabi_dcmpge>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	f000 8266 	beq.w	800f310 <_dtoa_r+0x960>
 800ee44:	2400      	movs	r4, #0
 800ee46:	4625      	mov	r5, r4
 800ee48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ee4a:	4656      	mov	r6, sl
 800ee4c:	ea6f 0803 	mvn.w	r8, r3
 800ee50:	2700      	movs	r7, #0
 800ee52:	4621      	mov	r1, r4
 800ee54:	4648      	mov	r0, r9
 800ee56:	f7fe fe5d 	bl	800db14 <_Bfree>
 800ee5a:	2d00      	cmp	r5, #0
 800ee5c:	f000 80bd 	beq.w	800efda <_dtoa_r+0x62a>
 800ee60:	b12f      	cbz	r7, 800ee6e <_dtoa_r+0x4be>
 800ee62:	42af      	cmp	r7, r5
 800ee64:	d003      	beq.n	800ee6e <_dtoa_r+0x4be>
 800ee66:	4639      	mov	r1, r7
 800ee68:	4648      	mov	r0, r9
 800ee6a:	f7fe fe53 	bl	800db14 <_Bfree>
 800ee6e:	4629      	mov	r1, r5
 800ee70:	4648      	mov	r0, r9
 800ee72:	f7fe fe4f 	bl	800db14 <_Bfree>
 800ee76:	e0b0      	b.n	800efda <_dtoa_r+0x62a>
 800ee78:	07e2      	lsls	r2, r4, #31
 800ee7a:	d505      	bpl.n	800ee88 <_dtoa_r+0x4d8>
 800ee7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee80:	f7f1 fb2a 	bl	80004d8 <__aeabi_dmul>
 800ee84:	2301      	movs	r3, #1
 800ee86:	3601      	adds	r6, #1
 800ee88:	1064      	asrs	r4, r4, #1
 800ee8a:	3508      	adds	r5, #8
 800ee8c:	e762      	b.n	800ed54 <_dtoa_r+0x3a4>
 800ee8e:	2602      	movs	r6, #2
 800ee90:	e765      	b.n	800ed5e <_dtoa_r+0x3ae>
 800ee92:	46b8      	mov	r8, r7
 800ee94:	9c08      	ldr	r4, [sp, #32]
 800ee96:	e784      	b.n	800eda2 <_dtoa_r+0x3f2>
 800ee98:	4b27      	ldr	r3, [pc, #156]	@ (800ef38 <_dtoa_r+0x588>)
 800ee9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eea4:	4454      	add	r4, sl
 800eea6:	2900      	cmp	r1, #0
 800eea8:	d054      	beq.n	800ef54 <_dtoa_r+0x5a4>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	4928      	ldr	r1, [pc, #160]	@ (800ef50 <_dtoa_r+0x5a0>)
 800eeae:	f7f1 fc3d 	bl	800072c <__aeabi_ddiv>
 800eeb2:	4633      	mov	r3, r6
 800eeb4:	462a      	mov	r2, r5
 800eeb6:	f7f1 f957 	bl	8000168 <__aeabi_dsub>
 800eeba:	4656      	mov	r6, sl
 800eebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eec4:	f7f1 fda2 	bl	8000a0c <__aeabi_d2iz>
 800eec8:	4605      	mov	r5, r0
 800eeca:	f7f1 fa9b 	bl	8000404 <__aeabi_i2d>
 800eece:	4602      	mov	r2, r0
 800eed0:	460b      	mov	r3, r1
 800eed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eed6:	f7f1 f947 	bl	8000168 <__aeabi_dsub>
 800eeda:	4602      	mov	r2, r0
 800eedc:	460b      	mov	r3, r1
 800eede:	3530      	adds	r5, #48	@ 0x30
 800eee0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eee8:	f806 5b01 	strb.w	r5, [r6], #1
 800eeec:	f7f1 fd66 	bl	80009bc <__aeabi_dcmplt>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d172      	bne.n	800efda <_dtoa_r+0x62a>
 800eef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eef8:	2000      	movs	r0, #0
 800eefa:	4911      	ldr	r1, [pc, #68]	@ (800ef40 <_dtoa_r+0x590>)
 800eefc:	f7f1 f934 	bl	8000168 <__aeabi_dsub>
 800ef00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ef04:	f7f1 fd5a 	bl	80009bc <__aeabi_dcmplt>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	f040 80b4 	bne.w	800f076 <_dtoa_r+0x6c6>
 800ef0e:	42a6      	cmp	r6, r4
 800ef10:	f43f af70 	beq.w	800edf4 <_dtoa_r+0x444>
 800ef14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ef18:	2200      	movs	r2, #0
 800ef1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ef44 <_dtoa_r+0x594>)
 800ef1c:	f7f1 fadc 	bl	80004d8 <__aeabi_dmul>
 800ef20:	2200      	movs	r2, #0
 800ef22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ef26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef2a:	4b06      	ldr	r3, [pc, #24]	@ (800ef44 <_dtoa_r+0x594>)
 800ef2c:	f7f1 fad4 	bl	80004d8 <__aeabi_dmul>
 800ef30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ef34:	e7c4      	b.n	800eec0 <_dtoa_r+0x510>
 800ef36:	bf00      	nop
 800ef38:	08010110 	.word	0x08010110
 800ef3c:	080100e8 	.word	0x080100e8
 800ef40:	3ff00000 	.word	0x3ff00000
 800ef44:	40240000 	.word	0x40240000
 800ef48:	401c0000 	.word	0x401c0000
 800ef4c:	40140000 	.word	0x40140000
 800ef50:	3fe00000 	.word	0x3fe00000
 800ef54:	4631      	mov	r1, r6
 800ef56:	4628      	mov	r0, r5
 800ef58:	f7f1 fabe 	bl	80004d8 <__aeabi_dmul>
 800ef5c:	4656      	mov	r6, sl
 800ef5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ef62:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ef64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef68:	f7f1 fd50 	bl	8000a0c <__aeabi_d2iz>
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	f7f1 fa49 	bl	8000404 <__aeabi_i2d>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef7a:	f7f1 f8f5 	bl	8000168 <__aeabi_dsub>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	3530      	adds	r5, #48	@ 0x30
 800ef84:	f806 5b01 	strb.w	r5, [r6], #1
 800ef88:	42a6      	cmp	r6, r4
 800ef8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef8e:	f04f 0200 	mov.w	r2, #0
 800ef92:	d124      	bne.n	800efde <_dtoa_r+0x62e>
 800ef94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ef98:	4bae      	ldr	r3, [pc, #696]	@ (800f254 <_dtoa_r+0x8a4>)
 800ef9a:	f7f1 f8e7 	bl	800016c <__adddf3>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	460b      	mov	r3, r1
 800efa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efa6:	f7f1 fd27 	bl	80009f8 <__aeabi_dcmpgt>
 800efaa:	2800      	cmp	r0, #0
 800efac:	d163      	bne.n	800f076 <_dtoa_r+0x6c6>
 800efae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800efb2:	2000      	movs	r0, #0
 800efb4:	49a7      	ldr	r1, [pc, #668]	@ (800f254 <_dtoa_r+0x8a4>)
 800efb6:	f7f1 f8d7 	bl	8000168 <__aeabi_dsub>
 800efba:	4602      	mov	r2, r0
 800efbc:	460b      	mov	r3, r1
 800efbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efc2:	f7f1 fcfb 	bl	80009bc <__aeabi_dcmplt>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	f43f af14 	beq.w	800edf4 <_dtoa_r+0x444>
 800efcc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800efce:	1e73      	subs	r3, r6, #1
 800efd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800efd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800efd6:	2b30      	cmp	r3, #48	@ 0x30
 800efd8:	d0f8      	beq.n	800efcc <_dtoa_r+0x61c>
 800efda:	4647      	mov	r7, r8
 800efdc:	e03b      	b.n	800f056 <_dtoa_r+0x6a6>
 800efde:	4b9e      	ldr	r3, [pc, #632]	@ (800f258 <_dtoa_r+0x8a8>)
 800efe0:	f7f1 fa7a 	bl	80004d8 <__aeabi_dmul>
 800efe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800efe8:	e7bc      	b.n	800ef64 <_dtoa_r+0x5b4>
 800efea:	4656      	mov	r6, sl
 800efec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800eff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eff4:	4620      	mov	r0, r4
 800eff6:	4629      	mov	r1, r5
 800eff8:	f7f1 fb98 	bl	800072c <__aeabi_ddiv>
 800effc:	f7f1 fd06 	bl	8000a0c <__aeabi_d2iz>
 800f000:	4680      	mov	r8, r0
 800f002:	f7f1 f9ff 	bl	8000404 <__aeabi_i2d>
 800f006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f00a:	f7f1 fa65 	bl	80004d8 <__aeabi_dmul>
 800f00e:	4602      	mov	r2, r0
 800f010:	460b      	mov	r3, r1
 800f012:	4620      	mov	r0, r4
 800f014:	4629      	mov	r1, r5
 800f016:	f7f1 f8a7 	bl	8000168 <__aeabi_dsub>
 800f01a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f01e:	9d08      	ldr	r5, [sp, #32]
 800f020:	f806 4b01 	strb.w	r4, [r6], #1
 800f024:	eba6 040a 	sub.w	r4, r6, sl
 800f028:	42a5      	cmp	r5, r4
 800f02a:	4602      	mov	r2, r0
 800f02c:	460b      	mov	r3, r1
 800f02e:	d133      	bne.n	800f098 <_dtoa_r+0x6e8>
 800f030:	f7f1 f89c 	bl	800016c <__adddf3>
 800f034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f038:	4604      	mov	r4, r0
 800f03a:	460d      	mov	r5, r1
 800f03c:	f7f1 fcdc 	bl	80009f8 <__aeabi_dcmpgt>
 800f040:	b9c0      	cbnz	r0, 800f074 <_dtoa_r+0x6c4>
 800f042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f046:	4620      	mov	r0, r4
 800f048:	4629      	mov	r1, r5
 800f04a:	f7f1 fcad 	bl	80009a8 <__aeabi_dcmpeq>
 800f04e:	b110      	cbz	r0, 800f056 <_dtoa_r+0x6a6>
 800f050:	f018 0f01 	tst.w	r8, #1
 800f054:	d10e      	bne.n	800f074 <_dtoa_r+0x6c4>
 800f056:	4648      	mov	r0, r9
 800f058:	9903      	ldr	r1, [sp, #12]
 800f05a:	f7fe fd5b 	bl	800db14 <_Bfree>
 800f05e:	2300      	movs	r3, #0
 800f060:	7033      	strb	r3, [r6, #0]
 800f062:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f064:	3701      	adds	r7, #1
 800f066:	601f      	str	r7, [r3, #0]
 800f068:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f000 824b 	beq.w	800f506 <_dtoa_r+0xb56>
 800f070:	601e      	str	r6, [r3, #0]
 800f072:	e248      	b.n	800f506 <_dtoa_r+0xb56>
 800f074:	46b8      	mov	r8, r7
 800f076:	4633      	mov	r3, r6
 800f078:	461e      	mov	r6, r3
 800f07a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f07e:	2a39      	cmp	r2, #57	@ 0x39
 800f080:	d106      	bne.n	800f090 <_dtoa_r+0x6e0>
 800f082:	459a      	cmp	sl, r3
 800f084:	d1f8      	bne.n	800f078 <_dtoa_r+0x6c8>
 800f086:	2230      	movs	r2, #48	@ 0x30
 800f088:	f108 0801 	add.w	r8, r8, #1
 800f08c:	f88a 2000 	strb.w	r2, [sl]
 800f090:	781a      	ldrb	r2, [r3, #0]
 800f092:	3201      	adds	r2, #1
 800f094:	701a      	strb	r2, [r3, #0]
 800f096:	e7a0      	b.n	800efda <_dtoa_r+0x62a>
 800f098:	2200      	movs	r2, #0
 800f09a:	4b6f      	ldr	r3, [pc, #444]	@ (800f258 <_dtoa_r+0x8a8>)
 800f09c:	f7f1 fa1c 	bl	80004d8 <__aeabi_dmul>
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	460d      	mov	r5, r1
 800f0a8:	f7f1 fc7e 	bl	80009a8 <__aeabi_dcmpeq>
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d09f      	beq.n	800eff0 <_dtoa_r+0x640>
 800f0b0:	e7d1      	b.n	800f056 <_dtoa_r+0x6a6>
 800f0b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f0b4:	2a00      	cmp	r2, #0
 800f0b6:	f000 80ea 	beq.w	800f28e <_dtoa_r+0x8de>
 800f0ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f0bc:	2a01      	cmp	r2, #1
 800f0be:	f300 80cd 	bgt.w	800f25c <_dtoa_r+0x8ac>
 800f0c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f0c4:	2a00      	cmp	r2, #0
 800f0c6:	f000 80c1 	beq.w	800f24c <_dtoa_r+0x89c>
 800f0ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f0ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f0d0:	9e04      	ldr	r6, [sp, #16]
 800f0d2:	9a04      	ldr	r2, [sp, #16]
 800f0d4:	2101      	movs	r1, #1
 800f0d6:	441a      	add	r2, r3
 800f0d8:	9204      	str	r2, [sp, #16]
 800f0da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0dc:	4648      	mov	r0, r9
 800f0de:	441a      	add	r2, r3
 800f0e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0e2:	f7fe fe15 	bl	800dd10 <__i2b>
 800f0e6:	4605      	mov	r5, r0
 800f0e8:	b166      	cbz	r6, 800f104 <_dtoa_r+0x754>
 800f0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	dd09      	ble.n	800f104 <_dtoa_r+0x754>
 800f0f0:	42b3      	cmp	r3, r6
 800f0f2:	bfa8      	it	ge
 800f0f4:	4633      	movge	r3, r6
 800f0f6:	9a04      	ldr	r2, [sp, #16]
 800f0f8:	1af6      	subs	r6, r6, r3
 800f0fa:	1ad2      	subs	r2, r2, r3
 800f0fc:	9204      	str	r2, [sp, #16]
 800f0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f100:	1ad3      	subs	r3, r2, r3
 800f102:	9309      	str	r3, [sp, #36]	@ 0x24
 800f104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f106:	b30b      	cbz	r3, 800f14c <_dtoa_r+0x79c>
 800f108:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f000 80c6 	beq.w	800f29c <_dtoa_r+0x8ec>
 800f110:	2c00      	cmp	r4, #0
 800f112:	f000 80c0 	beq.w	800f296 <_dtoa_r+0x8e6>
 800f116:	4629      	mov	r1, r5
 800f118:	4622      	mov	r2, r4
 800f11a:	4648      	mov	r0, r9
 800f11c:	f7fe feb0 	bl	800de80 <__pow5mult>
 800f120:	9a03      	ldr	r2, [sp, #12]
 800f122:	4601      	mov	r1, r0
 800f124:	4605      	mov	r5, r0
 800f126:	4648      	mov	r0, r9
 800f128:	f7fe fe08 	bl	800dd3c <__multiply>
 800f12c:	9903      	ldr	r1, [sp, #12]
 800f12e:	4680      	mov	r8, r0
 800f130:	4648      	mov	r0, r9
 800f132:	f7fe fcef 	bl	800db14 <_Bfree>
 800f136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f138:	1b1b      	subs	r3, r3, r4
 800f13a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f13c:	f000 80b1 	beq.w	800f2a2 <_dtoa_r+0x8f2>
 800f140:	4641      	mov	r1, r8
 800f142:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f144:	4648      	mov	r0, r9
 800f146:	f7fe fe9b 	bl	800de80 <__pow5mult>
 800f14a:	9003      	str	r0, [sp, #12]
 800f14c:	2101      	movs	r1, #1
 800f14e:	4648      	mov	r0, r9
 800f150:	f7fe fdde 	bl	800dd10 <__i2b>
 800f154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f156:	4604      	mov	r4, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	f000 81d8 	beq.w	800f50e <_dtoa_r+0xb5e>
 800f15e:	461a      	mov	r2, r3
 800f160:	4601      	mov	r1, r0
 800f162:	4648      	mov	r0, r9
 800f164:	f7fe fe8c 	bl	800de80 <__pow5mult>
 800f168:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f16a:	4604      	mov	r4, r0
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	f300 809f 	bgt.w	800f2b0 <_dtoa_r+0x900>
 800f172:	9b06      	ldr	r3, [sp, #24]
 800f174:	2b00      	cmp	r3, #0
 800f176:	f040 8097 	bne.w	800f2a8 <_dtoa_r+0x8f8>
 800f17a:	9b07      	ldr	r3, [sp, #28]
 800f17c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f180:	2b00      	cmp	r3, #0
 800f182:	f040 8093 	bne.w	800f2ac <_dtoa_r+0x8fc>
 800f186:	9b07      	ldr	r3, [sp, #28]
 800f188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f18c:	0d1b      	lsrs	r3, r3, #20
 800f18e:	051b      	lsls	r3, r3, #20
 800f190:	b133      	cbz	r3, 800f1a0 <_dtoa_r+0x7f0>
 800f192:	9b04      	ldr	r3, [sp, #16]
 800f194:	3301      	adds	r3, #1
 800f196:	9304      	str	r3, [sp, #16]
 800f198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f19a:	3301      	adds	r3, #1
 800f19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f19e:	2301      	movs	r3, #1
 800f1a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	f000 81b8 	beq.w	800f51a <_dtoa_r+0xb6a>
 800f1aa:	6923      	ldr	r3, [r4, #16]
 800f1ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1b0:	6918      	ldr	r0, [r3, #16]
 800f1b2:	f7fe fd61 	bl	800dc78 <__hi0bits>
 800f1b6:	f1c0 0020 	rsb	r0, r0, #32
 800f1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1bc:	4418      	add	r0, r3
 800f1be:	f010 001f 	ands.w	r0, r0, #31
 800f1c2:	f000 8082 	beq.w	800f2ca <_dtoa_r+0x91a>
 800f1c6:	f1c0 0320 	rsb	r3, r0, #32
 800f1ca:	2b04      	cmp	r3, #4
 800f1cc:	dd73      	ble.n	800f2b6 <_dtoa_r+0x906>
 800f1ce:	9b04      	ldr	r3, [sp, #16]
 800f1d0:	f1c0 001c 	rsb	r0, r0, #28
 800f1d4:	4403      	add	r3, r0
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1da:	4406      	add	r6, r0
 800f1dc:	4403      	add	r3, r0
 800f1de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1e0:	9b04      	ldr	r3, [sp, #16]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	dd05      	ble.n	800f1f2 <_dtoa_r+0x842>
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	4648      	mov	r0, r9
 800f1ea:	9903      	ldr	r1, [sp, #12]
 800f1ec:	f7fe fea2 	bl	800df34 <__lshift>
 800f1f0:	9003      	str	r0, [sp, #12]
 800f1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	dd05      	ble.n	800f204 <_dtoa_r+0x854>
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	4648      	mov	r0, r9
 800f1fe:	f7fe fe99 	bl	800df34 <__lshift>
 800f202:	4604      	mov	r4, r0
 800f204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f206:	2b00      	cmp	r3, #0
 800f208:	d061      	beq.n	800f2ce <_dtoa_r+0x91e>
 800f20a:	4621      	mov	r1, r4
 800f20c:	9803      	ldr	r0, [sp, #12]
 800f20e:	f7fe fefd 	bl	800e00c <__mcmp>
 800f212:	2800      	cmp	r0, #0
 800f214:	da5b      	bge.n	800f2ce <_dtoa_r+0x91e>
 800f216:	2300      	movs	r3, #0
 800f218:	220a      	movs	r2, #10
 800f21a:	4648      	mov	r0, r9
 800f21c:	9903      	ldr	r1, [sp, #12]
 800f21e:	f7fe fc9b 	bl	800db58 <__multadd>
 800f222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f224:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800f228:	9003      	str	r0, [sp, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f000 8177 	beq.w	800f51e <_dtoa_r+0xb6e>
 800f230:	4629      	mov	r1, r5
 800f232:	2300      	movs	r3, #0
 800f234:	220a      	movs	r2, #10
 800f236:	4648      	mov	r0, r9
 800f238:	f7fe fc8e 	bl	800db58 <__multadd>
 800f23c:	f1bb 0f00 	cmp.w	fp, #0
 800f240:	4605      	mov	r5, r0
 800f242:	dc6f      	bgt.n	800f324 <_dtoa_r+0x974>
 800f244:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f246:	2b02      	cmp	r3, #2
 800f248:	dc49      	bgt.n	800f2de <_dtoa_r+0x92e>
 800f24a:	e06b      	b.n	800f324 <_dtoa_r+0x974>
 800f24c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f24e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f252:	e73c      	b.n	800f0ce <_dtoa_r+0x71e>
 800f254:	3fe00000 	.word	0x3fe00000
 800f258:	40240000 	.word	0x40240000
 800f25c:	9b08      	ldr	r3, [sp, #32]
 800f25e:	1e5c      	subs	r4, r3, #1
 800f260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f262:	42a3      	cmp	r3, r4
 800f264:	db09      	blt.n	800f27a <_dtoa_r+0x8ca>
 800f266:	1b1c      	subs	r4, r3, r4
 800f268:	9b08      	ldr	r3, [sp, #32]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f6bf af30 	bge.w	800f0d0 <_dtoa_r+0x720>
 800f270:	9b04      	ldr	r3, [sp, #16]
 800f272:	9a08      	ldr	r2, [sp, #32]
 800f274:	1a9e      	subs	r6, r3, r2
 800f276:	2300      	movs	r3, #0
 800f278:	e72b      	b.n	800f0d2 <_dtoa_r+0x722>
 800f27a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f27c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f27e:	1ae3      	subs	r3, r4, r3
 800f280:	441a      	add	r2, r3
 800f282:	940a      	str	r4, [sp, #40]	@ 0x28
 800f284:	9e04      	ldr	r6, [sp, #16]
 800f286:	2400      	movs	r4, #0
 800f288:	9b08      	ldr	r3, [sp, #32]
 800f28a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f28c:	e721      	b.n	800f0d2 <_dtoa_r+0x722>
 800f28e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f290:	9e04      	ldr	r6, [sp, #16]
 800f292:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f294:	e728      	b.n	800f0e8 <_dtoa_r+0x738>
 800f296:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f29a:	e751      	b.n	800f140 <_dtoa_r+0x790>
 800f29c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f29e:	9903      	ldr	r1, [sp, #12]
 800f2a0:	e750      	b.n	800f144 <_dtoa_r+0x794>
 800f2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2a6:	e751      	b.n	800f14c <_dtoa_r+0x79c>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	e779      	b.n	800f1a0 <_dtoa_r+0x7f0>
 800f2ac:	9b06      	ldr	r3, [sp, #24]
 800f2ae:	e777      	b.n	800f1a0 <_dtoa_r+0x7f0>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2b4:	e779      	b.n	800f1aa <_dtoa_r+0x7fa>
 800f2b6:	d093      	beq.n	800f1e0 <_dtoa_r+0x830>
 800f2b8:	9a04      	ldr	r2, [sp, #16]
 800f2ba:	331c      	adds	r3, #28
 800f2bc:	441a      	add	r2, r3
 800f2be:	9204      	str	r2, [sp, #16]
 800f2c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2c2:	441e      	add	r6, r3
 800f2c4:	441a      	add	r2, r3
 800f2c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2c8:	e78a      	b.n	800f1e0 <_dtoa_r+0x830>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	e7f4      	b.n	800f2b8 <_dtoa_r+0x908>
 800f2ce:	9b08      	ldr	r3, [sp, #32]
 800f2d0:	46b8      	mov	r8, r7
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	dc20      	bgt.n	800f318 <_dtoa_r+0x968>
 800f2d6:	469b      	mov	fp, r3
 800f2d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	dd1e      	ble.n	800f31c <_dtoa_r+0x96c>
 800f2de:	f1bb 0f00 	cmp.w	fp, #0
 800f2e2:	f47f adb1 	bne.w	800ee48 <_dtoa_r+0x498>
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	465b      	mov	r3, fp
 800f2ea:	2205      	movs	r2, #5
 800f2ec:	4648      	mov	r0, r9
 800f2ee:	f7fe fc33 	bl	800db58 <__multadd>
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	9803      	ldr	r0, [sp, #12]
 800f2f8:	f7fe fe88 	bl	800e00c <__mcmp>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	f77f ada3 	ble.w	800ee48 <_dtoa_r+0x498>
 800f302:	4656      	mov	r6, sl
 800f304:	2331      	movs	r3, #49	@ 0x31
 800f306:	f108 0801 	add.w	r8, r8, #1
 800f30a:	f806 3b01 	strb.w	r3, [r6], #1
 800f30e:	e59f      	b.n	800ee50 <_dtoa_r+0x4a0>
 800f310:	46b8      	mov	r8, r7
 800f312:	9c08      	ldr	r4, [sp, #32]
 800f314:	4625      	mov	r5, r4
 800f316:	e7f4      	b.n	800f302 <_dtoa_r+0x952>
 800f318:	f8dd b020 	ldr.w	fp, [sp, #32]
 800f31c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f000 8101 	beq.w	800f526 <_dtoa_r+0xb76>
 800f324:	2e00      	cmp	r6, #0
 800f326:	dd05      	ble.n	800f334 <_dtoa_r+0x984>
 800f328:	4629      	mov	r1, r5
 800f32a:	4632      	mov	r2, r6
 800f32c:	4648      	mov	r0, r9
 800f32e:	f7fe fe01 	bl	800df34 <__lshift>
 800f332:	4605      	mov	r5, r0
 800f334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f336:	2b00      	cmp	r3, #0
 800f338:	d05c      	beq.n	800f3f4 <_dtoa_r+0xa44>
 800f33a:	4648      	mov	r0, r9
 800f33c:	6869      	ldr	r1, [r5, #4]
 800f33e:	f7fe fba9 	bl	800da94 <_Balloc>
 800f342:	4606      	mov	r6, r0
 800f344:	b928      	cbnz	r0, 800f352 <_dtoa_r+0x9a2>
 800f346:	4602      	mov	r2, r0
 800f348:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f34c:	4b80      	ldr	r3, [pc, #512]	@ (800f550 <_dtoa_r+0xba0>)
 800f34e:	f7ff bb43 	b.w	800e9d8 <_dtoa_r+0x28>
 800f352:	692a      	ldr	r2, [r5, #16]
 800f354:	f105 010c 	add.w	r1, r5, #12
 800f358:	3202      	adds	r2, #2
 800f35a:	0092      	lsls	r2, r2, #2
 800f35c:	300c      	adds	r0, #12
 800f35e:	f7fd ff42 	bl	800d1e6 <memcpy>
 800f362:	2201      	movs	r2, #1
 800f364:	4631      	mov	r1, r6
 800f366:	4648      	mov	r0, r9
 800f368:	f7fe fde4 	bl	800df34 <__lshift>
 800f36c:	462f      	mov	r7, r5
 800f36e:	4605      	mov	r5, r0
 800f370:	f10a 0301 	add.w	r3, sl, #1
 800f374:	9304      	str	r3, [sp, #16]
 800f376:	eb0a 030b 	add.w	r3, sl, fp
 800f37a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f37c:	9b06      	ldr	r3, [sp, #24]
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	9309      	str	r3, [sp, #36]	@ 0x24
 800f384:	9b04      	ldr	r3, [sp, #16]
 800f386:	4621      	mov	r1, r4
 800f388:	9803      	ldr	r0, [sp, #12]
 800f38a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800f38e:	f7ff fa85 	bl	800e89c <quorem>
 800f392:	4603      	mov	r3, r0
 800f394:	4639      	mov	r1, r7
 800f396:	3330      	adds	r3, #48	@ 0x30
 800f398:	9006      	str	r0, [sp, #24]
 800f39a:	9803      	ldr	r0, [sp, #12]
 800f39c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f39e:	f7fe fe35 	bl	800e00c <__mcmp>
 800f3a2:	462a      	mov	r2, r5
 800f3a4:	9008      	str	r0, [sp, #32]
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	4648      	mov	r0, r9
 800f3aa:	f7fe fe4b 	bl	800e044 <__mdiff>
 800f3ae:	68c2      	ldr	r2, [r0, #12]
 800f3b0:	4606      	mov	r6, r0
 800f3b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3b4:	bb02      	cbnz	r2, 800f3f8 <_dtoa_r+0xa48>
 800f3b6:	4601      	mov	r1, r0
 800f3b8:	9803      	ldr	r0, [sp, #12]
 800f3ba:	f7fe fe27 	bl	800e00c <__mcmp>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3c2:	4631      	mov	r1, r6
 800f3c4:	4648      	mov	r0, r9
 800f3c6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800f3ca:	f7fe fba3 	bl	800db14 <_Bfree>
 800f3ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f3d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f3d2:	9e04      	ldr	r6, [sp, #16]
 800f3d4:	ea42 0103 	orr.w	r1, r2, r3
 800f3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3da:	4319      	orrs	r1, r3
 800f3dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3de:	d10d      	bne.n	800f3fc <_dtoa_r+0xa4c>
 800f3e0:	2b39      	cmp	r3, #57	@ 0x39
 800f3e2:	d027      	beq.n	800f434 <_dtoa_r+0xa84>
 800f3e4:	9a08      	ldr	r2, [sp, #32]
 800f3e6:	2a00      	cmp	r2, #0
 800f3e8:	dd01      	ble.n	800f3ee <_dtoa_r+0xa3e>
 800f3ea:	9b06      	ldr	r3, [sp, #24]
 800f3ec:	3331      	adds	r3, #49	@ 0x31
 800f3ee:	f88b 3000 	strb.w	r3, [fp]
 800f3f2:	e52e      	b.n	800ee52 <_dtoa_r+0x4a2>
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	e7b9      	b.n	800f36c <_dtoa_r+0x9bc>
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	e7e2      	b.n	800f3c2 <_dtoa_r+0xa12>
 800f3fc:	9908      	ldr	r1, [sp, #32]
 800f3fe:	2900      	cmp	r1, #0
 800f400:	db04      	blt.n	800f40c <_dtoa_r+0xa5c>
 800f402:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800f404:	4301      	orrs	r1, r0
 800f406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f408:	4301      	orrs	r1, r0
 800f40a:	d120      	bne.n	800f44e <_dtoa_r+0xa9e>
 800f40c:	2a00      	cmp	r2, #0
 800f40e:	ddee      	ble.n	800f3ee <_dtoa_r+0xa3e>
 800f410:	2201      	movs	r2, #1
 800f412:	9903      	ldr	r1, [sp, #12]
 800f414:	4648      	mov	r0, r9
 800f416:	9304      	str	r3, [sp, #16]
 800f418:	f7fe fd8c 	bl	800df34 <__lshift>
 800f41c:	4621      	mov	r1, r4
 800f41e:	9003      	str	r0, [sp, #12]
 800f420:	f7fe fdf4 	bl	800e00c <__mcmp>
 800f424:	2800      	cmp	r0, #0
 800f426:	9b04      	ldr	r3, [sp, #16]
 800f428:	dc02      	bgt.n	800f430 <_dtoa_r+0xa80>
 800f42a:	d1e0      	bne.n	800f3ee <_dtoa_r+0xa3e>
 800f42c:	07da      	lsls	r2, r3, #31
 800f42e:	d5de      	bpl.n	800f3ee <_dtoa_r+0xa3e>
 800f430:	2b39      	cmp	r3, #57	@ 0x39
 800f432:	d1da      	bne.n	800f3ea <_dtoa_r+0xa3a>
 800f434:	2339      	movs	r3, #57	@ 0x39
 800f436:	f88b 3000 	strb.w	r3, [fp]
 800f43a:	4633      	mov	r3, r6
 800f43c:	461e      	mov	r6, r3
 800f43e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f442:	3b01      	subs	r3, #1
 800f444:	2a39      	cmp	r2, #57	@ 0x39
 800f446:	d04e      	beq.n	800f4e6 <_dtoa_r+0xb36>
 800f448:	3201      	adds	r2, #1
 800f44a:	701a      	strb	r2, [r3, #0]
 800f44c:	e501      	b.n	800ee52 <_dtoa_r+0x4a2>
 800f44e:	2a00      	cmp	r2, #0
 800f450:	dd03      	ble.n	800f45a <_dtoa_r+0xaaa>
 800f452:	2b39      	cmp	r3, #57	@ 0x39
 800f454:	d0ee      	beq.n	800f434 <_dtoa_r+0xa84>
 800f456:	3301      	adds	r3, #1
 800f458:	e7c9      	b.n	800f3ee <_dtoa_r+0xa3e>
 800f45a:	9a04      	ldr	r2, [sp, #16]
 800f45c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f45e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f462:	428a      	cmp	r2, r1
 800f464:	d028      	beq.n	800f4b8 <_dtoa_r+0xb08>
 800f466:	2300      	movs	r3, #0
 800f468:	220a      	movs	r2, #10
 800f46a:	9903      	ldr	r1, [sp, #12]
 800f46c:	4648      	mov	r0, r9
 800f46e:	f7fe fb73 	bl	800db58 <__multadd>
 800f472:	42af      	cmp	r7, r5
 800f474:	9003      	str	r0, [sp, #12]
 800f476:	f04f 0300 	mov.w	r3, #0
 800f47a:	f04f 020a 	mov.w	r2, #10
 800f47e:	4639      	mov	r1, r7
 800f480:	4648      	mov	r0, r9
 800f482:	d107      	bne.n	800f494 <_dtoa_r+0xae4>
 800f484:	f7fe fb68 	bl	800db58 <__multadd>
 800f488:	4607      	mov	r7, r0
 800f48a:	4605      	mov	r5, r0
 800f48c:	9b04      	ldr	r3, [sp, #16]
 800f48e:	3301      	adds	r3, #1
 800f490:	9304      	str	r3, [sp, #16]
 800f492:	e777      	b.n	800f384 <_dtoa_r+0x9d4>
 800f494:	f7fe fb60 	bl	800db58 <__multadd>
 800f498:	4629      	mov	r1, r5
 800f49a:	4607      	mov	r7, r0
 800f49c:	2300      	movs	r3, #0
 800f49e:	220a      	movs	r2, #10
 800f4a0:	4648      	mov	r0, r9
 800f4a2:	f7fe fb59 	bl	800db58 <__multadd>
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	e7f0      	b.n	800f48c <_dtoa_r+0xadc>
 800f4aa:	f1bb 0f00 	cmp.w	fp, #0
 800f4ae:	bfcc      	ite	gt
 800f4b0:	465e      	movgt	r6, fp
 800f4b2:	2601      	movle	r6, #1
 800f4b4:	2700      	movs	r7, #0
 800f4b6:	4456      	add	r6, sl
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	9903      	ldr	r1, [sp, #12]
 800f4bc:	4648      	mov	r0, r9
 800f4be:	9304      	str	r3, [sp, #16]
 800f4c0:	f7fe fd38 	bl	800df34 <__lshift>
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	9003      	str	r0, [sp, #12]
 800f4c8:	f7fe fda0 	bl	800e00c <__mcmp>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	dcb4      	bgt.n	800f43a <_dtoa_r+0xa8a>
 800f4d0:	d102      	bne.n	800f4d8 <_dtoa_r+0xb28>
 800f4d2:	9b04      	ldr	r3, [sp, #16]
 800f4d4:	07db      	lsls	r3, r3, #31
 800f4d6:	d4b0      	bmi.n	800f43a <_dtoa_r+0xa8a>
 800f4d8:	4633      	mov	r3, r6
 800f4da:	461e      	mov	r6, r3
 800f4dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4e0:	2a30      	cmp	r2, #48	@ 0x30
 800f4e2:	d0fa      	beq.n	800f4da <_dtoa_r+0xb2a>
 800f4e4:	e4b5      	b.n	800ee52 <_dtoa_r+0x4a2>
 800f4e6:	459a      	cmp	sl, r3
 800f4e8:	d1a8      	bne.n	800f43c <_dtoa_r+0xa8c>
 800f4ea:	2331      	movs	r3, #49	@ 0x31
 800f4ec:	f108 0801 	add.w	r8, r8, #1
 800f4f0:	f88a 3000 	strb.w	r3, [sl]
 800f4f4:	e4ad      	b.n	800ee52 <_dtoa_r+0x4a2>
 800f4f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f4f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f554 <_dtoa_r+0xba4>
 800f4fc:	b11b      	cbz	r3, 800f506 <_dtoa_r+0xb56>
 800f4fe:	f10a 0308 	add.w	r3, sl, #8
 800f502:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f504:	6013      	str	r3, [r2, #0]
 800f506:	4650      	mov	r0, sl
 800f508:	b017      	add	sp, #92	@ 0x5c
 800f50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f50e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f510:	2b01      	cmp	r3, #1
 800f512:	f77f ae2e 	ble.w	800f172 <_dtoa_r+0x7c2>
 800f516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f518:	930a      	str	r3, [sp, #40]	@ 0x28
 800f51a:	2001      	movs	r0, #1
 800f51c:	e64d      	b.n	800f1ba <_dtoa_r+0x80a>
 800f51e:	f1bb 0f00 	cmp.w	fp, #0
 800f522:	f77f aed9 	ble.w	800f2d8 <_dtoa_r+0x928>
 800f526:	4656      	mov	r6, sl
 800f528:	4621      	mov	r1, r4
 800f52a:	9803      	ldr	r0, [sp, #12]
 800f52c:	f7ff f9b6 	bl	800e89c <quorem>
 800f530:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f534:	f806 3b01 	strb.w	r3, [r6], #1
 800f538:	eba6 020a 	sub.w	r2, r6, sl
 800f53c:	4593      	cmp	fp, r2
 800f53e:	ddb4      	ble.n	800f4aa <_dtoa_r+0xafa>
 800f540:	2300      	movs	r3, #0
 800f542:	220a      	movs	r2, #10
 800f544:	4648      	mov	r0, r9
 800f546:	9903      	ldr	r1, [sp, #12]
 800f548:	f7fe fb06 	bl	800db58 <__multadd>
 800f54c:	9003      	str	r0, [sp, #12]
 800f54e:	e7eb      	b.n	800f528 <_dtoa_r+0xb78>
 800f550:	0800fece 	.word	0x0800fece
 800f554:	0800ffeb 	.word	0x0800ffeb

0800f558 <malloc>:
 800f558:	4b02      	ldr	r3, [pc, #8]	@ (800f564 <malloc+0xc>)
 800f55a:	4601      	mov	r1, r0
 800f55c:	6818      	ldr	r0, [r3, #0]
 800f55e:	f7fe b9fb 	b.w	800d958 <_malloc_r>
 800f562:	bf00      	nop
 800f564:	200002f8 	.word	0x200002f8

0800f568 <fiprintf>:
 800f568:	b40e      	push	{r1, r2, r3}
 800f56a:	b503      	push	{r0, r1, lr}
 800f56c:	4601      	mov	r1, r0
 800f56e:	ab03      	add	r3, sp, #12
 800f570:	4805      	ldr	r0, [pc, #20]	@ (800f588 <fiprintf+0x20>)
 800f572:	f853 2b04 	ldr.w	r2, [r3], #4
 800f576:	6800      	ldr	r0, [r0, #0]
 800f578:	9301      	str	r3, [sp, #4]
 800f57a:	f000 f835 	bl	800f5e8 <_vfiprintf_r>
 800f57e:	b002      	add	sp, #8
 800f580:	f85d eb04 	ldr.w	lr, [sp], #4
 800f584:	b003      	add	sp, #12
 800f586:	4770      	bx	lr
 800f588:	200002f8 	.word	0x200002f8

0800f58c <abort>:
 800f58c:	2006      	movs	r0, #6
 800f58e:	b508      	push	{r3, lr}
 800f590:	f000 fb8e 	bl	800fcb0 <raise>
 800f594:	2001      	movs	r0, #1
 800f596:	f7f2 fec2 	bl	800231e <_exit>

0800f59a <__sfputc_r>:
 800f59a:	6893      	ldr	r3, [r2, #8]
 800f59c:	b410      	push	{r4}
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	6093      	str	r3, [r2, #8]
 800f5a4:	da07      	bge.n	800f5b6 <__sfputc_r+0x1c>
 800f5a6:	6994      	ldr	r4, [r2, #24]
 800f5a8:	42a3      	cmp	r3, r4
 800f5aa:	db01      	blt.n	800f5b0 <__sfputc_r+0x16>
 800f5ac:	290a      	cmp	r1, #10
 800f5ae:	d102      	bne.n	800f5b6 <__sfputc_r+0x1c>
 800f5b0:	bc10      	pop	{r4}
 800f5b2:	f000 bac1 	b.w	800fb38 <__swbuf_r>
 800f5b6:	6813      	ldr	r3, [r2, #0]
 800f5b8:	1c58      	adds	r0, r3, #1
 800f5ba:	6010      	str	r0, [r2, #0]
 800f5bc:	7019      	strb	r1, [r3, #0]
 800f5be:	4608      	mov	r0, r1
 800f5c0:	bc10      	pop	{r4}
 800f5c2:	4770      	bx	lr

0800f5c4 <__sfputs_r>:
 800f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	460f      	mov	r7, r1
 800f5ca:	4614      	mov	r4, r2
 800f5cc:	18d5      	adds	r5, r2, r3
 800f5ce:	42ac      	cmp	r4, r5
 800f5d0:	d101      	bne.n	800f5d6 <__sfputs_r+0x12>
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	e007      	b.n	800f5e6 <__sfputs_r+0x22>
 800f5d6:	463a      	mov	r2, r7
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5de:	f7ff ffdc 	bl	800f59a <__sfputc_r>
 800f5e2:	1c43      	adds	r3, r0, #1
 800f5e4:	d1f3      	bne.n	800f5ce <__sfputs_r+0xa>
 800f5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f5e8 <_vfiprintf_r>:
 800f5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ec:	460d      	mov	r5, r1
 800f5ee:	4614      	mov	r4, r2
 800f5f0:	4698      	mov	r8, r3
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	b09d      	sub	sp, #116	@ 0x74
 800f5f6:	b118      	cbz	r0, 800f600 <_vfiprintf_r+0x18>
 800f5f8:	6a03      	ldr	r3, [r0, #32]
 800f5fa:	b90b      	cbnz	r3, 800f600 <_vfiprintf_r+0x18>
 800f5fc:	f7fd fcec 	bl	800cfd8 <__sinit>
 800f600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f602:	07d9      	lsls	r1, r3, #31
 800f604:	d405      	bmi.n	800f612 <_vfiprintf_r+0x2a>
 800f606:	89ab      	ldrh	r3, [r5, #12]
 800f608:	059a      	lsls	r2, r3, #22
 800f60a:	d402      	bmi.n	800f612 <_vfiprintf_r+0x2a>
 800f60c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f60e:	f7fd fde8 	bl	800d1e2 <__retarget_lock_acquire_recursive>
 800f612:	89ab      	ldrh	r3, [r5, #12]
 800f614:	071b      	lsls	r3, r3, #28
 800f616:	d501      	bpl.n	800f61c <_vfiprintf_r+0x34>
 800f618:	692b      	ldr	r3, [r5, #16]
 800f61a:	b99b      	cbnz	r3, 800f644 <_vfiprintf_r+0x5c>
 800f61c:	4629      	mov	r1, r5
 800f61e:	4630      	mov	r0, r6
 800f620:	f000 fac8 	bl	800fbb4 <__swsetup_r>
 800f624:	b170      	cbz	r0, 800f644 <_vfiprintf_r+0x5c>
 800f626:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f628:	07dc      	lsls	r4, r3, #31
 800f62a:	d504      	bpl.n	800f636 <_vfiprintf_r+0x4e>
 800f62c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f630:	b01d      	add	sp, #116	@ 0x74
 800f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f636:	89ab      	ldrh	r3, [r5, #12]
 800f638:	0598      	lsls	r0, r3, #22
 800f63a:	d4f7      	bmi.n	800f62c <_vfiprintf_r+0x44>
 800f63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f63e:	f7fd fdd1 	bl	800d1e4 <__retarget_lock_release_recursive>
 800f642:	e7f3      	b.n	800f62c <_vfiprintf_r+0x44>
 800f644:	2300      	movs	r3, #0
 800f646:	9309      	str	r3, [sp, #36]	@ 0x24
 800f648:	2320      	movs	r3, #32
 800f64a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f64e:	2330      	movs	r3, #48	@ 0x30
 800f650:	f04f 0901 	mov.w	r9, #1
 800f654:	f8cd 800c 	str.w	r8, [sp, #12]
 800f658:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800f804 <_vfiprintf_r+0x21c>
 800f65c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f660:	4623      	mov	r3, r4
 800f662:	469a      	mov	sl, r3
 800f664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f668:	b10a      	cbz	r2, 800f66e <_vfiprintf_r+0x86>
 800f66a:	2a25      	cmp	r2, #37	@ 0x25
 800f66c:	d1f9      	bne.n	800f662 <_vfiprintf_r+0x7a>
 800f66e:	ebba 0b04 	subs.w	fp, sl, r4
 800f672:	d00b      	beq.n	800f68c <_vfiprintf_r+0xa4>
 800f674:	465b      	mov	r3, fp
 800f676:	4622      	mov	r2, r4
 800f678:	4629      	mov	r1, r5
 800f67a:	4630      	mov	r0, r6
 800f67c:	f7ff ffa2 	bl	800f5c4 <__sfputs_r>
 800f680:	3001      	adds	r0, #1
 800f682:	f000 80a7 	beq.w	800f7d4 <_vfiprintf_r+0x1ec>
 800f686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f688:	445a      	add	r2, fp
 800f68a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f68c:	f89a 3000 	ldrb.w	r3, [sl]
 800f690:	2b00      	cmp	r3, #0
 800f692:	f000 809f 	beq.w	800f7d4 <_vfiprintf_r+0x1ec>
 800f696:	2300      	movs	r3, #0
 800f698:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f69c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6a0:	f10a 0a01 	add.w	sl, sl, #1
 800f6a4:	9304      	str	r3, [sp, #16]
 800f6a6:	9307      	str	r3, [sp, #28]
 800f6a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6ae:	4654      	mov	r4, sl
 800f6b0:	2205      	movs	r2, #5
 800f6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6b6:	4853      	ldr	r0, [pc, #332]	@ (800f804 <_vfiprintf_r+0x21c>)
 800f6b8:	f000 fb16 	bl	800fce8 <memchr>
 800f6bc:	9a04      	ldr	r2, [sp, #16]
 800f6be:	b9d8      	cbnz	r0, 800f6f8 <_vfiprintf_r+0x110>
 800f6c0:	06d1      	lsls	r1, r2, #27
 800f6c2:	bf44      	itt	mi
 800f6c4:	2320      	movmi	r3, #32
 800f6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6ca:	0713      	lsls	r3, r2, #28
 800f6cc:	bf44      	itt	mi
 800f6ce:	232b      	movmi	r3, #43	@ 0x2b
 800f6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6da:	d015      	beq.n	800f708 <_vfiprintf_r+0x120>
 800f6dc:	4654      	mov	r4, sl
 800f6de:	2000      	movs	r0, #0
 800f6e0:	f04f 0c0a 	mov.w	ip, #10
 800f6e4:	9a07      	ldr	r2, [sp, #28]
 800f6e6:	4621      	mov	r1, r4
 800f6e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6ec:	3b30      	subs	r3, #48	@ 0x30
 800f6ee:	2b09      	cmp	r3, #9
 800f6f0:	d94b      	bls.n	800f78a <_vfiprintf_r+0x1a2>
 800f6f2:	b1b0      	cbz	r0, 800f722 <_vfiprintf_r+0x13a>
 800f6f4:	9207      	str	r2, [sp, #28]
 800f6f6:	e014      	b.n	800f722 <_vfiprintf_r+0x13a>
 800f6f8:	eba0 0308 	sub.w	r3, r0, r8
 800f6fc:	fa09 f303 	lsl.w	r3, r9, r3
 800f700:	4313      	orrs	r3, r2
 800f702:	46a2      	mov	sl, r4
 800f704:	9304      	str	r3, [sp, #16]
 800f706:	e7d2      	b.n	800f6ae <_vfiprintf_r+0xc6>
 800f708:	9b03      	ldr	r3, [sp, #12]
 800f70a:	1d19      	adds	r1, r3, #4
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	9103      	str	r1, [sp, #12]
 800f710:	2b00      	cmp	r3, #0
 800f712:	bfbb      	ittet	lt
 800f714:	425b      	neglt	r3, r3
 800f716:	f042 0202 	orrlt.w	r2, r2, #2
 800f71a:	9307      	strge	r3, [sp, #28]
 800f71c:	9307      	strlt	r3, [sp, #28]
 800f71e:	bfb8      	it	lt
 800f720:	9204      	strlt	r2, [sp, #16]
 800f722:	7823      	ldrb	r3, [r4, #0]
 800f724:	2b2e      	cmp	r3, #46	@ 0x2e
 800f726:	d10a      	bne.n	800f73e <_vfiprintf_r+0x156>
 800f728:	7863      	ldrb	r3, [r4, #1]
 800f72a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f72c:	d132      	bne.n	800f794 <_vfiprintf_r+0x1ac>
 800f72e:	9b03      	ldr	r3, [sp, #12]
 800f730:	3402      	adds	r4, #2
 800f732:	1d1a      	adds	r2, r3, #4
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	9203      	str	r2, [sp, #12]
 800f738:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f73c:	9305      	str	r3, [sp, #20]
 800f73e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f808 <_vfiprintf_r+0x220>
 800f742:	2203      	movs	r2, #3
 800f744:	4650      	mov	r0, sl
 800f746:	7821      	ldrb	r1, [r4, #0]
 800f748:	f000 face 	bl	800fce8 <memchr>
 800f74c:	b138      	cbz	r0, 800f75e <_vfiprintf_r+0x176>
 800f74e:	2240      	movs	r2, #64	@ 0x40
 800f750:	9b04      	ldr	r3, [sp, #16]
 800f752:	eba0 000a 	sub.w	r0, r0, sl
 800f756:	4082      	lsls	r2, r0
 800f758:	4313      	orrs	r3, r2
 800f75a:	3401      	adds	r4, #1
 800f75c:	9304      	str	r3, [sp, #16]
 800f75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f762:	2206      	movs	r2, #6
 800f764:	4829      	ldr	r0, [pc, #164]	@ (800f80c <_vfiprintf_r+0x224>)
 800f766:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f76a:	f000 fabd 	bl	800fce8 <memchr>
 800f76e:	2800      	cmp	r0, #0
 800f770:	d03f      	beq.n	800f7f2 <_vfiprintf_r+0x20a>
 800f772:	4b27      	ldr	r3, [pc, #156]	@ (800f810 <_vfiprintf_r+0x228>)
 800f774:	bb1b      	cbnz	r3, 800f7be <_vfiprintf_r+0x1d6>
 800f776:	9b03      	ldr	r3, [sp, #12]
 800f778:	3307      	adds	r3, #7
 800f77a:	f023 0307 	bic.w	r3, r3, #7
 800f77e:	3308      	adds	r3, #8
 800f780:	9303      	str	r3, [sp, #12]
 800f782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f784:	443b      	add	r3, r7
 800f786:	9309      	str	r3, [sp, #36]	@ 0x24
 800f788:	e76a      	b.n	800f660 <_vfiprintf_r+0x78>
 800f78a:	460c      	mov	r4, r1
 800f78c:	2001      	movs	r0, #1
 800f78e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f792:	e7a8      	b.n	800f6e6 <_vfiprintf_r+0xfe>
 800f794:	2300      	movs	r3, #0
 800f796:	f04f 0c0a 	mov.w	ip, #10
 800f79a:	4619      	mov	r1, r3
 800f79c:	3401      	adds	r4, #1
 800f79e:	9305      	str	r3, [sp, #20]
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7a6:	3a30      	subs	r2, #48	@ 0x30
 800f7a8:	2a09      	cmp	r2, #9
 800f7aa:	d903      	bls.n	800f7b4 <_vfiprintf_r+0x1cc>
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d0c6      	beq.n	800f73e <_vfiprintf_r+0x156>
 800f7b0:	9105      	str	r1, [sp, #20]
 800f7b2:	e7c4      	b.n	800f73e <_vfiprintf_r+0x156>
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7bc:	e7f0      	b.n	800f7a0 <_vfiprintf_r+0x1b8>
 800f7be:	ab03      	add	r3, sp, #12
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	462a      	mov	r2, r5
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	4b13      	ldr	r3, [pc, #76]	@ (800f814 <_vfiprintf_r+0x22c>)
 800f7c8:	a904      	add	r1, sp, #16
 800f7ca:	f3af 8000 	nop.w
 800f7ce:	4607      	mov	r7, r0
 800f7d0:	1c78      	adds	r0, r7, #1
 800f7d2:	d1d6      	bne.n	800f782 <_vfiprintf_r+0x19a>
 800f7d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7d6:	07d9      	lsls	r1, r3, #31
 800f7d8:	d405      	bmi.n	800f7e6 <_vfiprintf_r+0x1fe>
 800f7da:	89ab      	ldrh	r3, [r5, #12]
 800f7dc:	059a      	lsls	r2, r3, #22
 800f7de:	d402      	bmi.n	800f7e6 <_vfiprintf_r+0x1fe>
 800f7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7e2:	f7fd fcff 	bl	800d1e4 <__retarget_lock_release_recursive>
 800f7e6:	89ab      	ldrh	r3, [r5, #12]
 800f7e8:	065b      	lsls	r3, r3, #25
 800f7ea:	f53f af1f 	bmi.w	800f62c <_vfiprintf_r+0x44>
 800f7ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7f0:	e71e      	b.n	800f630 <_vfiprintf_r+0x48>
 800f7f2:	ab03      	add	r3, sp, #12
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	462a      	mov	r2, r5
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	4b06      	ldr	r3, [pc, #24]	@ (800f814 <_vfiprintf_r+0x22c>)
 800f7fc:	a904      	add	r1, sp, #16
 800f7fe:	f000 f87d 	bl	800f8fc <_printf_i>
 800f802:	e7e4      	b.n	800f7ce <_vfiprintf_r+0x1e6>
 800f804:	08010052 	.word	0x08010052
 800f808:	08010058 	.word	0x08010058
 800f80c:	0801005c 	.word	0x0801005c
 800f810:	00000000 	.word	0x00000000
 800f814:	0800f5c5 	.word	0x0800f5c5

0800f818 <_printf_common>:
 800f818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f81c:	4616      	mov	r6, r2
 800f81e:	4698      	mov	r8, r3
 800f820:	688a      	ldr	r2, [r1, #8]
 800f822:	690b      	ldr	r3, [r1, #16]
 800f824:	4607      	mov	r7, r0
 800f826:	4293      	cmp	r3, r2
 800f828:	bfb8      	it	lt
 800f82a:	4613      	movlt	r3, r2
 800f82c:	6033      	str	r3, [r6, #0]
 800f82e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f832:	460c      	mov	r4, r1
 800f834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f838:	b10a      	cbz	r2, 800f83e <_printf_common+0x26>
 800f83a:	3301      	adds	r3, #1
 800f83c:	6033      	str	r3, [r6, #0]
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	0699      	lsls	r1, r3, #26
 800f842:	bf42      	ittt	mi
 800f844:	6833      	ldrmi	r3, [r6, #0]
 800f846:	3302      	addmi	r3, #2
 800f848:	6033      	strmi	r3, [r6, #0]
 800f84a:	6825      	ldr	r5, [r4, #0]
 800f84c:	f015 0506 	ands.w	r5, r5, #6
 800f850:	d106      	bne.n	800f860 <_printf_common+0x48>
 800f852:	f104 0a19 	add.w	sl, r4, #25
 800f856:	68e3      	ldr	r3, [r4, #12]
 800f858:	6832      	ldr	r2, [r6, #0]
 800f85a:	1a9b      	subs	r3, r3, r2
 800f85c:	42ab      	cmp	r3, r5
 800f85e:	dc2b      	bgt.n	800f8b8 <_printf_common+0xa0>
 800f860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f864:	6822      	ldr	r2, [r4, #0]
 800f866:	3b00      	subs	r3, #0
 800f868:	bf18      	it	ne
 800f86a:	2301      	movne	r3, #1
 800f86c:	0692      	lsls	r2, r2, #26
 800f86e:	d430      	bmi.n	800f8d2 <_printf_common+0xba>
 800f870:	4641      	mov	r1, r8
 800f872:	4638      	mov	r0, r7
 800f874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f878:	47c8      	blx	r9
 800f87a:	3001      	adds	r0, #1
 800f87c:	d023      	beq.n	800f8c6 <_printf_common+0xae>
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	6922      	ldr	r2, [r4, #16]
 800f882:	f003 0306 	and.w	r3, r3, #6
 800f886:	2b04      	cmp	r3, #4
 800f888:	bf14      	ite	ne
 800f88a:	2500      	movne	r5, #0
 800f88c:	6833      	ldreq	r3, [r6, #0]
 800f88e:	f04f 0600 	mov.w	r6, #0
 800f892:	bf08      	it	eq
 800f894:	68e5      	ldreq	r5, [r4, #12]
 800f896:	f104 041a 	add.w	r4, r4, #26
 800f89a:	bf08      	it	eq
 800f89c:	1aed      	subeq	r5, r5, r3
 800f89e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f8a2:	bf08      	it	eq
 800f8a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	bfc4      	itt	gt
 800f8ac:	1a9b      	subgt	r3, r3, r2
 800f8ae:	18ed      	addgt	r5, r5, r3
 800f8b0:	42b5      	cmp	r5, r6
 800f8b2:	d11a      	bne.n	800f8ea <_printf_common+0xd2>
 800f8b4:	2000      	movs	r0, #0
 800f8b6:	e008      	b.n	800f8ca <_printf_common+0xb2>
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	4652      	mov	r2, sl
 800f8bc:	4641      	mov	r1, r8
 800f8be:	4638      	mov	r0, r7
 800f8c0:	47c8      	blx	r9
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	d103      	bne.n	800f8ce <_printf_common+0xb6>
 800f8c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ce:	3501      	adds	r5, #1
 800f8d0:	e7c1      	b.n	800f856 <_printf_common+0x3e>
 800f8d2:	2030      	movs	r0, #48	@ 0x30
 800f8d4:	18e1      	adds	r1, r4, r3
 800f8d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f8da:	1c5a      	adds	r2, r3, #1
 800f8dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f8e0:	4422      	add	r2, r4
 800f8e2:	3302      	adds	r3, #2
 800f8e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f8e8:	e7c2      	b.n	800f870 <_printf_common+0x58>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	4641      	mov	r1, r8
 800f8f0:	4638      	mov	r0, r7
 800f8f2:	47c8      	blx	r9
 800f8f4:	3001      	adds	r0, #1
 800f8f6:	d0e6      	beq.n	800f8c6 <_printf_common+0xae>
 800f8f8:	3601      	adds	r6, #1
 800f8fa:	e7d9      	b.n	800f8b0 <_printf_common+0x98>

0800f8fc <_printf_i>:
 800f8fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f900:	7e0f      	ldrb	r7, [r1, #24]
 800f902:	4691      	mov	r9, r2
 800f904:	2f78      	cmp	r7, #120	@ 0x78
 800f906:	4680      	mov	r8, r0
 800f908:	460c      	mov	r4, r1
 800f90a:	469a      	mov	sl, r3
 800f90c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f90e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f912:	d807      	bhi.n	800f924 <_printf_i+0x28>
 800f914:	2f62      	cmp	r7, #98	@ 0x62
 800f916:	d80a      	bhi.n	800f92e <_printf_i+0x32>
 800f918:	2f00      	cmp	r7, #0
 800f91a:	f000 80d1 	beq.w	800fac0 <_printf_i+0x1c4>
 800f91e:	2f58      	cmp	r7, #88	@ 0x58
 800f920:	f000 80b8 	beq.w	800fa94 <_printf_i+0x198>
 800f924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f92c:	e03a      	b.n	800f9a4 <_printf_i+0xa8>
 800f92e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f932:	2b15      	cmp	r3, #21
 800f934:	d8f6      	bhi.n	800f924 <_printf_i+0x28>
 800f936:	a101      	add	r1, pc, #4	@ (adr r1, 800f93c <_printf_i+0x40>)
 800f938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f93c:	0800f995 	.word	0x0800f995
 800f940:	0800f9a9 	.word	0x0800f9a9
 800f944:	0800f925 	.word	0x0800f925
 800f948:	0800f925 	.word	0x0800f925
 800f94c:	0800f925 	.word	0x0800f925
 800f950:	0800f925 	.word	0x0800f925
 800f954:	0800f9a9 	.word	0x0800f9a9
 800f958:	0800f925 	.word	0x0800f925
 800f95c:	0800f925 	.word	0x0800f925
 800f960:	0800f925 	.word	0x0800f925
 800f964:	0800f925 	.word	0x0800f925
 800f968:	0800faa7 	.word	0x0800faa7
 800f96c:	0800f9d3 	.word	0x0800f9d3
 800f970:	0800fa61 	.word	0x0800fa61
 800f974:	0800f925 	.word	0x0800f925
 800f978:	0800f925 	.word	0x0800f925
 800f97c:	0800fac9 	.word	0x0800fac9
 800f980:	0800f925 	.word	0x0800f925
 800f984:	0800f9d3 	.word	0x0800f9d3
 800f988:	0800f925 	.word	0x0800f925
 800f98c:	0800f925 	.word	0x0800f925
 800f990:	0800fa69 	.word	0x0800fa69
 800f994:	6833      	ldr	r3, [r6, #0]
 800f996:	1d1a      	adds	r2, r3, #4
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	6032      	str	r2, [r6, #0]
 800f99c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f9a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	e09c      	b.n	800fae2 <_printf_i+0x1e6>
 800f9a8:	6833      	ldr	r3, [r6, #0]
 800f9aa:	6820      	ldr	r0, [r4, #0]
 800f9ac:	1d19      	adds	r1, r3, #4
 800f9ae:	6031      	str	r1, [r6, #0]
 800f9b0:	0606      	lsls	r6, r0, #24
 800f9b2:	d501      	bpl.n	800f9b8 <_printf_i+0xbc>
 800f9b4:	681d      	ldr	r5, [r3, #0]
 800f9b6:	e003      	b.n	800f9c0 <_printf_i+0xc4>
 800f9b8:	0645      	lsls	r5, r0, #25
 800f9ba:	d5fb      	bpl.n	800f9b4 <_printf_i+0xb8>
 800f9bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f9c0:	2d00      	cmp	r5, #0
 800f9c2:	da03      	bge.n	800f9cc <_printf_i+0xd0>
 800f9c4:	232d      	movs	r3, #45	@ 0x2d
 800f9c6:	426d      	negs	r5, r5
 800f9c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9cc:	230a      	movs	r3, #10
 800f9ce:	4858      	ldr	r0, [pc, #352]	@ (800fb30 <_printf_i+0x234>)
 800f9d0:	e011      	b.n	800f9f6 <_printf_i+0xfa>
 800f9d2:	6821      	ldr	r1, [r4, #0]
 800f9d4:	6833      	ldr	r3, [r6, #0]
 800f9d6:	0608      	lsls	r0, r1, #24
 800f9d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f9dc:	d402      	bmi.n	800f9e4 <_printf_i+0xe8>
 800f9de:	0649      	lsls	r1, r1, #25
 800f9e0:	bf48      	it	mi
 800f9e2:	b2ad      	uxthmi	r5, r5
 800f9e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f9e6:	6033      	str	r3, [r6, #0]
 800f9e8:	bf14      	ite	ne
 800f9ea:	230a      	movne	r3, #10
 800f9ec:	2308      	moveq	r3, #8
 800f9ee:	4850      	ldr	r0, [pc, #320]	@ (800fb30 <_printf_i+0x234>)
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f9f6:	6866      	ldr	r6, [r4, #4]
 800f9f8:	2e00      	cmp	r6, #0
 800f9fa:	60a6      	str	r6, [r4, #8]
 800f9fc:	db05      	blt.n	800fa0a <_printf_i+0x10e>
 800f9fe:	6821      	ldr	r1, [r4, #0]
 800fa00:	432e      	orrs	r6, r5
 800fa02:	f021 0104 	bic.w	r1, r1, #4
 800fa06:	6021      	str	r1, [r4, #0]
 800fa08:	d04b      	beq.n	800faa2 <_printf_i+0x1a6>
 800fa0a:	4616      	mov	r6, r2
 800fa0c:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa10:	fb03 5711 	mls	r7, r3, r1, r5
 800fa14:	5dc7      	ldrb	r7, [r0, r7]
 800fa16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa1a:	462f      	mov	r7, r5
 800fa1c:	42bb      	cmp	r3, r7
 800fa1e:	460d      	mov	r5, r1
 800fa20:	d9f4      	bls.n	800fa0c <_printf_i+0x110>
 800fa22:	2b08      	cmp	r3, #8
 800fa24:	d10b      	bne.n	800fa3e <_printf_i+0x142>
 800fa26:	6823      	ldr	r3, [r4, #0]
 800fa28:	07df      	lsls	r7, r3, #31
 800fa2a:	d508      	bpl.n	800fa3e <_printf_i+0x142>
 800fa2c:	6923      	ldr	r3, [r4, #16]
 800fa2e:	6861      	ldr	r1, [r4, #4]
 800fa30:	4299      	cmp	r1, r3
 800fa32:	bfde      	ittt	le
 800fa34:	2330      	movle	r3, #48	@ 0x30
 800fa36:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fa3e:	1b92      	subs	r2, r2, r6
 800fa40:	6122      	str	r2, [r4, #16]
 800fa42:	464b      	mov	r3, r9
 800fa44:	4621      	mov	r1, r4
 800fa46:	4640      	mov	r0, r8
 800fa48:	f8cd a000 	str.w	sl, [sp]
 800fa4c:	aa03      	add	r2, sp, #12
 800fa4e:	f7ff fee3 	bl	800f818 <_printf_common>
 800fa52:	3001      	adds	r0, #1
 800fa54:	d14a      	bne.n	800faec <_printf_i+0x1f0>
 800fa56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa5a:	b004      	add	sp, #16
 800fa5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa60:	6823      	ldr	r3, [r4, #0]
 800fa62:	f043 0320 	orr.w	r3, r3, #32
 800fa66:	6023      	str	r3, [r4, #0]
 800fa68:	2778      	movs	r7, #120	@ 0x78
 800fa6a:	4832      	ldr	r0, [pc, #200]	@ (800fb34 <_printf_i+0x238>)
 800fa6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fa70:	6823      	ldr	r3, [r4, #0]
 800fa72:	6831      	ldr	r1, [r6, #0]
 800fa74:	061f      	lsls	r7, r3, #24
 800fa76:	f851 5b04 	ldr.w	r5, [r1], #4
 800fa7a:	d402      	bmi.n	800fa82 <_printf_i+0x186>
 800fa7c:	065f      	lsls	r7, r3, #25
 800fa7e:	bf48      	it	mi
 800fa80:	b2ad      	uxthmi	r5, r5
 800fa82:	6031      	str	r1, [r6, #0]
 800fa84:	07d9      	lsls	r1, r3, #31
 800fa86:	bf44      	itt	mi
 800fa88:	f043 0320 	orrmi.w	r3, r3, #32
 800fa8c:	6023      	strmi	r3, [r4, #0]
 800fa8e:	b11d      	cbz	r5, 800fa98 <_printf_i+0x19c>
 800fa90:	2310      	movs	r3, #16
 800fa92:	e7ad      	b.n	800f9f0 <_printf_i+0xf4>
 800fa94:	4826      	ldr	r0, [pc, #152]	@ (800fb30 <_printf_i+0x234>)
 800fa96:	e7e9      	b.n	800fa6c <_printf_i+0x170>
 800fa98:	6823      	ldr	r3, [r4, #0]
 800fa9a:	f023 0320 	bic.w	r3, r3, #32
 800fa9e:	6023      	str	r3, [r4, #0]
 800faa0:	e7f6      	b.n	800fa90 <_printf_i+0x194>
 800faa2:	4616      	mov	r6, r2
 800faa4:	e7bd      	b.n	800fa22 <_printf_i+0x126>
 800faa6:	6833      	ldr	r3, [r6, #0]
 800faa8:	6825      	ldr	r5, [r4, #0]
 800faaa:	1d18      	adds	r0, r3, #4
 800faac:	6961      	ldr	r1, [r4, #20]
 800faae:	6030      	str	r0, [r6, #0]
 800fab0:	062e      	lsls	r6, r5, #24
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	d501      	bpl.n	800faba <_printf_i+0x1be>
 800fab6:	6019      	str	r1, [r3, #0]
 800fab8:	e002      	b.n	800fac0 <_printf_i+0x1c4>
 800faba:	0668      	lsls	r0, r5, #25
 800fabc:	d5fb      	bpl.n	800fab6 <_printf_i+0x1ba>
 800fabe:	8019      	strh	r1, [r3, #0]
 800fac0:	2300      	movs	r3, #0
 800fac2:	4616      	mov	r6, r2
 800fac4:	6123      	str	r3, [r4, #16]
 800fac6:	e7bc      	b.n	800fa42 <_printf_i+0x146>
 800fac8:	6833      	ldr	r3, [r6, #0]
 800faca:	2100      	movs	r1, #0
 800facc:	1d1a      	adds	r2, r3, #4
 800face:	6032      	str	r2, [r6, #0]
 800fad0:	681e      	ldr	r6, [r3, #0]
 800fad2:	6862      	ldr	r2, [r4, #4]
 800fad4:	4630      	mov	r0, r6
 800fad6:	f000 f907 	bl	800fce8 <memchr>
 800fada:	b108      	cbz	r0, 800fae0 <_printf_i+0x1e4>
 800fadc:	1b80      	subs	r0, r0, r6
 800fade:	6060      	str	r0, [r4, #4]
 800fae0:	6863      	ldr	r3, [r4, #4]
 800fae2:	6123      	str	r3, [r4, #16]
 800fae4:	2300      	movs	r3, #0
 800fae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800faea:	e7aa      	b.n	800fa42 <_printf_i+0x146>
 800faec:	4632      	mov	r2, r6
 800faee:	4649      	mov	r1, r9
 800faf0:	4640      	mov	r0, r8
 800faf2:	6923      	ldr	r3, [r4, #16]
 800faf4:	47d0      	blx	sl
 800faf6:	3001      	adds	r0, #1
 800faf8:	d0ad      	beq.n	800fa56 <_printf_i+0x15a>
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	079b      	lsls	r3, r3, #30
 800fafe:	d413      	bmi.n	800fb28 <_printf_i+0x22c>
 800fb00:	68e0      	ldr	r0, [r4, #12]
 800fb02:	9b03      	ldr	r3, [sp, #12]
 800fb04:	4298      	cmp	r0, r3
 800fb06:	bfb8      	it	lt
 800fb08:	4618      	movlt	r0, r3
 800fb0a:	e7a6      	b.n	800fa5a <_printf_i+0x15e>
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	4632      	mov	r2, r6
 800fb10:	4649      	mov	r1, r9
 800fb12:	4640      	mov	r0, r8
 800fb14:	47d0      	blx	sl
 800fb16:	3001      	adds	r0, #1
 800fb18:	d09d      	beq.n	800fa56 <_printf_i+0x15a>
 800fb1a:	3501      	adds	r5, #1
 800fb1c:	68e3      	ldr	r3, [r4, #12]
 800fb1e:	9903      	ldr	r1, [sp, #12]
 800fb20:	1a5b      	subs	r3, r3, r1
 800fb22:	42ab      	cmp	r3, r5
 800fb24:	dcf2      	bgt.n	800fb0c <_printf_i+0x210>
 800fb26:	e7eb      	b.n	800fb00 <_printf_i+0x204>
 800fb28:	2500      	movs	r5, #0
 800fb2a:	f104 0619 	add.w	r6, r4, #25
 800fb2e:	e7f5      	b.n	800fb1c <_printf_i+0x220>
 800fb30:	08010063 	.word	0x08010063
 800fb34:	08010074 	.word	0x08010074

0800fb38 <__swbuf_r>:
 800fb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3a:	460e      	mov	r6, r1
 800fb3c:	4614      	mov	r4, r2
 800fb3e:	4605      	mov	r5, r0
 800fb40:	b118      	cbz	r0, 800fb4a <__swbuf_r+0x12>
 800fb42:	6a03      	ldr	r3, [r0, #32]
 800fb44:	b90b      	cbnz	r3, 800fb4a <__swbuf_r+0x12>
 800fb46:	f7fd fa47 	bl	800cfd8 <__sinit>
 800fb4a:	69a3      	ldr	r3, [r4, #24]
 800fb4c:	60a3      	str	r3, [r4, #8]
 800fb4e:	89a3      	ldrh	r3, [r4, #12]
 800fb50:	071a      	lsls	r2, r3, #28
 800fb52:	d501      	bpl.n	800fb58 <__swbuf_r+0x20>
 800fb54:	6923      	ldr	r3, [r4, #16]
 800fb56:	b943      	cbnz	r3, 800fb6a <__swbuf_r+0x32>
 800fb58:	4621      	mov	r1, r4
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	f000 f82a 	bl	800fbb4 <__swsetup_r>
 800fb60:	b118      	cbz	r0, 800fb6a <__swbuf_r+0x32>
 800fb62:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fb66:	4638      	mov	r0, r7
 800fb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb6a:	6823      	ldr	r3, [r4, #0]
 800fb6c:	6922      	ldr	r2, [r4, #16]
 800fb6e:	b2f6      	uxtb	r6, r6
 800fb70:	1a98      	subs	r0, r3, r2
 800fb72:	6963      	ldr	r3, [r4, #20]
 800fb74:	4637      	mov	r7, r6
 800fb76:	4283      	cmp	r3, r0
 800fb78:	dc05      	bgt.n	800fb86 <__swbuf_r+0x4e>
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	f7fe fe1b 	bl	800e7b8 <_fflush_r>
 800fb82:	2800      	cmp	r0, #0
 800fb84:	d1ed      	bne.n	800fb62 <__swbuf_r+0x2a>
 800fb86:	68a3      	ldr	r3, [r4, #8]
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	60a3      	str	r3, [r4, #8]
 800fb8c:	6823      	ldr	r3, [r4, #0]
 800fb8e:	1c5a      	adds	r2, r3, #1
 800fb90:	6022      	str	r2, [r4, #0]
 800fb92:	701e      	strb	r6, [r3, #0]
 800fb94:	6962      	ldr	r2, [r4, #20]
 800fb96:	1c43      	adds	r3, r0, #1
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d004      	beq.n	800fba6 <__swbuf_r+0x6e>
 800fb9c:	89a3      	ldrh	r3, [r4, #12]
 800fb9e:	07db      	lsls	r3, r3, #31
 800fba0:	d5e1      	bpl.n	800fb66 <__swbuf_r+0x2e>
 800fba2:	2e0a      	cmp	r6, #10
 800fba4:	d1df      	bne.n	800fb66 <__swbuf_r+0x2e>
 800fba6:	4621      	mov	r1, r4
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f7fe fe05 	bl	800e7b8 <_fflush_r>
 800fbae:	2800      	cmp	r0, #0
 800fbb0:	d0d9      	beq.n	800fb66 <__swbuf_r+0x2e>
 800fbb2:	e7d6      	b.n	800fb62 <__swbuf_r+0x2a>

0800fbb4 <__swsetup_r>:
 800fbb4:	b538      	push	{r3, r4, r5, lr}
 800fbb6:	4b29      	ldr	r3, [pc, #164]	@ (800fc5c <__swsetup_r+0xa8>)
 800fbb8:	4605      	mov	r5, r0
 800fbba:	6818      	ldr	r0, [r3, #0]
 800fbbc:	460c      	mov	r4, r1
 800fbbe:	b118      	cbz	r0, 800fbc8 <__swsetup_r+0x14>
 800fbc0:	6a03      	ldr	r3, [r0, #32]
 800fbc2:	b90b      	cbnz	r3, 800fbc8 <__swsetup_r+0x14>
 800fbc4:	f7fd fa08 	bl	800cfd8 <__sinit>
 800fbc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbcc:	0719      	lsls	r1, r3, #28
 800fbce:	d422      	bmi.n	800fc16 <__swsetup_r+0x62>
 800fbd0:	06da      	lsls	r2, r3, #27
 800fbd2:	d407      	bmi.n	800fbe4 <__swsetup_r+0x30>
 800fbd4:	2209      	movs	r2, #9
 800fbd6:	602a      	str	r2, [r5, #0]
 800fbd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbe0:	81a3      	strh	r3, [r4, #12]
 800fbe2:	e033      	b.n	800fc4c <__swsetup_r+0x98>
 800fbe4:	0758      	lsls	r0, r3, #29
 800fbe6:	d512      	bpl.n	800fc0e <__swsetup_r+0x5a>
 800fbe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbea:	b141      	cbz	r1, 800fbfe <__swsetup_r+0x4a>
 800fbec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fbf0:	4299      	cmp	r1, r3
 800fbf2:	d002      	beq.n	800fbfa <__swsetup_r+0x46>
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	f7fd fb0b 	bl	800d210 <_free_r>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbfe:	89a3      	ldrh	r3, [r4, #12]
 800fc00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fc04:	81a3      	strh	r3, [r4, #12]
 800fc06:	2300      	movs	r3, #0
 800fc08:	6063      	str	r3, [r4, #4]
 800fc0a:	6923      	ldr	r3, [r4, #16]
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	89a3      	ldrh	r3, [r4, #12]
 800fc10:	f043 0308 	orr.w	r3, r3, #8
 800fc14:	81a3      	strh	r3, [r4, #12]
 800fc16:	6923      	ldr	r3, [r4, #16]
 800fc18:	b94b      	cbnz	r3, 800fc2e <__swsetup_r+0x7a>
 800fc1a:	89a3      	ldrh	r3, [r4, #12]
 800fc1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fc20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc24:	d003      	beq.n	800fc2e <__swsetup_r+0x7a>
 800fc26:	4621      	mov	r1, r4
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f000 f890 	bl	800fd4e <__smakebuf_r>
 800fc2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc32:	f013 0201 	ands.w	r2, r3, #1
 800fc36:	d00a      	beq.n	800fc4e <__swsetup_r+0x9a>
 800fc38:	2200      	movs	r2, #0
 800fc3a:	60a2      	str	r2, [r4, #8]
 800fc3c:	6962      	ldr	r2, [r4, #20]
 800fc3e:	4252      	negs	r2, r2
 800fc40:	61a2      	str	r2, [r4, #24]
 800fc42:	6922      	ldr	r2, [r4, #16]
 800fc44:	b942      	cbnz	r2, 800fc58 <__swsetup_r+0xa4>
 800fc46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fc4a:	d1c5      	bne.n	800fbd8 <__swsetup_r+0x24>
 800fc4c:	bd38      	pop	{r3, r4, r5, pc}
 800fc4e:	0799      	lsls	r1, r3, #30
 800fc50:	bf58      	it	pl
 800fc52:	6962      	ldrpl	r2, [r4, #20]
 800fc54:	60a2      	str	r2, [r4, #8]
 800fc56:	e7f4      	b.n	800fc42 <__swsetup_r+0x8e>
 800fc58:	2000      	movs	r0, #0
 800fc5a:	e7f7      	b.n	800fc4c <__swsetup_r+0x98>
 800fc5c:	200002f8 	.word	0x200002f8

0800fc60 <_raise_r>:
 800fc60:	291f      	cmp	r1, #31
 800fc62:	b538      	push	{r3, r4, r5, lr}
 800fc64:	4605      	mov	r5, r0
 800fc66:	460c      	mov	r4, r1
 800fc68:	d904      	bls.n	800fc74 <_raise_r+0x14>
 800fc6a:	2316      	movs	r3, #22
 800fc6c:	6003      	str	r3, [r0, #0]
 800fc6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc72:	bd38      	pop	{r3, r4, r5, pc}
 800fc74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc76:	b112      	cbz	r2, 800fc7e <_raise_r+0x1e>
 800fc78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc7c:	b94b      	cbnz	r3, 800fc92 <_raise_r+0x32>
 800fc7e:	4628      	mov	r0, r5
 800fc80:	f000 f830 	bl	800fce4 <_getpid_r>
 800fc84:	4622      	mov	r2, r4
 800fc86:	4601      	mov	r1, r0
 800fc88:	4628      	mov	r0, r5
 800fc8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc8e:	f000 b817 	b.w	800fcc0 <_kill_r>
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	d00a      	beq.n	800fcac <_raise_r+0x4c>
 800fc96:	1c59      	adds	r1, r3, #1
 800fc98:	d103      	bne.n	800fca2 <_raise_r+0x42>
 800fc9a:	2316      	movs	r3, #22
 800fc9c:	6003      	str	r3, [r0, #0]
 800fc9e:	2001      	movs	r0, #1
 800fca0:	e7e7      	b.n	800fc72 <_raise_r+0x12>
 800fca2:	2100      	movs	r1, #0
 800fca4:	4620      	mov	r0, r4
 800fca6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fcaa:	4798      	blx	r3
 800fcac:	2000      	movs	r0, #0
 800fcae:	e7e0      	b.n	800fc72 <_raise_r+0x12>

0800fcb0 <raise>:
 800fcb0:	4b02      	ldr	r3, [pc, #8]	@ (800fcbc <raise+0xc>)
 800fcb2:	4601      	mov	r1, r0
 800fcb4:	6818      	ldr	r0, [r3, #0]
 800fcb6:	f7ff bfd3 	b.w	800fc60 <_raise_r>
 800fcba:	bf00      	nop
 800fcbc:	200002f8 	.word	0x200002f8

0800fcc0 <_kill_r>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	4d06      	ldr	r5, [pc, #24]	@ (800fce0 <_kill_r+0x20>)
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	4608      	mov	r0, r1
 800fcca:	4611      	mov	r1, r2
 800fccc:	602b      	str	r3, [r5, #0]
 800fcce:	f7f2 fb16 	bl	80022fe <_kill>
 800fcd2:	1c43      	adds	r3, r0, #1
 800fcd4:	d102      	bne.n	800fcdc <_kill_r+0x1c>
 800fcd6:	682b      	ldr	r3, [r5, #0]
 800fcd8:	b103      	cbz	r3, 800fcdc <_kill_r+0x1c>
 800fcda:	6023      	str	r3, [r4, #0]
 800fcdc:	bd38      	pop	{r3, r4, r5, pc}
 800fcde:	bf00      	nop
 800fce0:	20001888 	.word	0x20001888

0800fce4 <_getpid_r>:
 800fce4:	f7f2 bb04 	b.w	80022f0 <_getpid>

0800fce8 <memchr>:
 800fce8:	4603      	mov	r3, r0
 800fcea:	b510      	push	{r4, lr}
 800fcec:	b2c9      	uxtb	r1, r1
 800fcee:	4402      	add	r2, r0
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	d101      	bne.n	800fcfa <memchr+0x12>
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	e003      	b.n	800fd02 <memchr+0x1a>
 800fcfa:	7804      	ldrb	r4, [r0, #0]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	428c      	cmp	r4, r1
 800fd00:	d1f6      	bne.n	800fcf0 <memchr+0x8>
 800fd02:	bd10      	pop	{r4, pc}

0800fd04 <__swhatbuf_r>:
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	460c      	mov	r4, r1
 800fd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd0c:	4615      	mov	r5, r2
 800fd0e:	2900      	cmp	r1, #0
 800fd10:	461e      	mov	r6, r3
 800fd12:	b096      	sub	sp, #88	@ 0x58
 800fd14:	da0c      	bge.n	800fd30 <__swhatbuf_r+0x2c>
 800fd16:	89a3      	ldrh	r3, [r4, #12]
 800fd18:	2100      	movs	r1, #0
 800fd1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd1e:	bf14      	ite	ne
 800fd20:	2340      	movne	r3, #64	@ 0x40
 800fd22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd26:	2000      	movs	r0, #0
 800fd28:	6031      	str	r1, [r6, #0]
 800fd2a:	602b      	str	r3, [r5, #0]
 800fd2c:	b016      	add	sp, #88	@ 0x58
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	466a      	mov	r2, sp
 800fd32:	f000 f849 	bl	800fdc8 <_fstat_r>
 800fd36:	2800      	cmp	r0, #0
 800fd38:	dbed      	blt.n	800fd16 <__swhatbuf_r+0x12>
 800fd3a:	9901      	ldr	r1, [sp, #4]
 800fd3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd44:	4259      	negs	r1, r3
 800fd46:	4159      	adcs	r1, r3
 800fd48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd4c:	e7eb      	b.n	800fd26 <__swhatbuf_r+0x22>

0800fd4e <__smakebuf_r>:
 800fd4e:	898b      	ldrh	r3, [r1, #12]
 800fd50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd52:	079d      	lsls	r5, r3, #30
 800fd54:	4606      	mov	r6, r0
 800fd56:	460c      	mov	r4, r1
 800fd58:	d507      	bpl.n	800fd6a <__smakebuf_r+0x1c>
 800fd5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd5e:	6023      	str	r3, [r4, #0]
 800fd60:	6123      	str	r3, [r4, #16]
 800fd62:	2301      	movs	r3, #1
 800fd64:	6163      	str	r3, [r4, #20]
 800fd66:	b003      	add	sp, #12
 800fd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd6a:	466a      	mov	r2, sp
 800fd6c:	ab01      	add	r3, sp, #4
 800fd6e:	f7ff ffc9 	bl	800fd04 <__swhatbuf_r>
 800fd72:	9f00      	ldr	r7, [sp, #0]
 800fd74:	4605      	mov	r5, r0
 800fd76:	4639      	mov	r1, r7
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7fd fded 	bl	800d958 <_malloc_r>
 800fd7e:	b948      	cbnz	r0, 800fd94 <__smakebuf_r+0x46>
 800fd80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd84:	059a      	lsls	r2, r3, #22
 800fd86:	d4ee      	bmi.n	800fd66 <__smakebuf_r+0x18>
 800fd88:	f023 0303 	bic.w	r3, r3, #3
 800fd8c:	f043 0302 	orr.w	r3, r3, #2
 800fd90:	81a3      	strh	r3, [r4, #12]
 800fd92:	e7e2      	b.n	800fd5a <__smakebuf_r+0xc>
 800fd94:	89a3      	ldrh	r3, [r4, #12]
 800fd96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd9e:	81a3      	strh	r3, [r4, #12]
 800fda0:	9b01      	ldr	r3, [sp, #4]
 800fda2:	6020      	str	r0, [r4, #0]
 800fda4:	b15b      	cbz	r3, 800fdbe <__smakebuf_r+0x70>
 800fda6:	4630      	mov	r0, r6
 800fda8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdac:	f000 f81e 	bl	800fdec <_isatty_r>
 800fdb0:	b128      	cbz	r0, 800fdbe <__smakebuf_r+0x70>
 800fdb2:	89a3      	ldrh	r3, [r4, #12]
 800fdb4:	f023 0303 	bic.w	r3, r3, #3
 800fdb8:	f043 0301 	orr.w	r3, r3, #1
 800fdbc:	81a3      	strh	r3, [r4, #12]
 800fdbe:	89a3      	ldrh	r3, [r4, #12]
 800fdc0:	431d      	orrs	r5, r3
 800fdc2:	81a5      	strh	r5, [r4, #12]
 800fdc4:	e7cf      	b.n	800fd66 <__smakebuf_r+0x18>
	...

0800fdc8 <_fstat_r>:
 800fdc8:	b538      	push	{r3, r4, r5, lr}
 800fdca:	2300      	movs	r3, #0
 800fdcc:	4d06      	ldr	r5, [pc, #24]	@ (800fde8 <_fstat_r+0x20>)
 800fdce:	4604      	mov	r4, r0
 800fdd0:	4608      	mov	r0, r1
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	602b      	str	r3, [r5, #0]
 800fdd6:	f7f2 faf1 	bl	80023bc <_fstat>
 800fdda:	1c43      	adds	r3, r0, #1
 800fddc:	d102      	bne.n	800fde4 <_fstat_r+0x1c>
 800fdde:	682b      	ldr	r3, [r5, #0]
 800fde0:	b103      	cbz	r3, 800fde4 <_fstat_r+0x1c>
 800fde2:	6023      	str	r3, [r4, #0]
 800fde4:	bd38      	pop	{r3, r4, r5, pc}
 800fde6:	bf00      	nop
 800fde8:	20001888 	.word	0x20001888

0800fdec <_isatty_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	2300      	movs	r3, #0
 800fdf0:	4d05      	ldr	r5, [pc, #20]	@ (800fe08 <_isatty_r+0x1c>)
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	4608      	mov	r0, r1
 800fdf6:	602b      	str	r3, [r5, #0]
 800fdf8:	f7f2 faef 	bl	80023da <_isatty>
 800fdfc:	1c43      	adds	r3, r0, #1
 800fdfe:	d102      	bne.n	800fe06 <_isatty_r+0x1a>
 800fe00:	682b      	ldr	r3, [r5, #0]
 800fe02:	b103      	cbz	r3, 800fe06 <_isatty_r+0x1a>
 800fe04:	6023      	str	r3, [r4, #0]
 800fe06:	bd38      	pop	{r3, r4, r5, pc}
 800fe08:	20001888 	.word	0x20001888

0800fe0c <_init>:
 800fe0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0e:	bf00      	nop
 800fe10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe12:	bc08      	pop	{r3}
 800fe14:	469e      	mov	lr, r3
 800fe16:	4770      	bx	lr

0800fe18 <_fini>:
 800fe18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1a:	bf00      	nop
 800fe1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe1e:	bc08      	pop	{r3}
 800fe20:	469e      	mov	lr, r3
 800fe22:	4770      	bx	lr
