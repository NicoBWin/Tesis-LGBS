
Tesis_LGBS_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800b8e0  0800b8e0  0000c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b94c  0800b94c  0000d17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b94c  0800b94c  0000c94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b954  0800b954  0000d17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b954  0800b954  0000c954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b958  0800b958  0000c958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800b95c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  2000017c  0800bad8  0000d17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001578  0800bad8  0000d578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187e2  00000000  00000000  0000d1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004216  00000000  00000000  00025987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00029ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c8  00000000  00000000  0002b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4cc  00000000  00000000  0002c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb00  00000000  00000000  00048744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096fcc  00000000  00000000  00064244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d28  00000000  00000000  000fb254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00100f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000017c 	.word	0x2000017c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b8c8 	.word	0x0800b8c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000180 	.word	0x20000180
 800014c:	0800b8c8 	.word	0x0800b8c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2iz>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d215      	bcs.n	8000762 <__aeabi_d2iz+0x36>
 8000736:	d511      	bpl.n	800075c <__aeabi_d2iz+0x30>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d912      	bls.n	8000768 <__aeabi_d2iz+0x3c>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000752:	fa23 f002 	lsr.w	r0, r3, r2
 8000756:	bf18      	it	ne
 8000758:	4240      	negne	r0, r0
 800075a:	4770      	bx	lr
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	4770      	bx	lr
 8000762:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000766:	d105      	bne.n	8000774 <__aeabi_d2iz+0x48>
 8000768:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800076c:	bf08      	it	eq
 800076e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <__aeabi_frsub>:
 800077c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000780:	e002      	b.n	8000788 <__addsf3>
 8000782:	bf00      	nop

08000784 <__aeabi_fsub>:
 8000784:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000788 <__addsf3>:
 8000788:	0042      	lsls	r2, r0, #1
 800078a:	bf1f      	itttt	ne
 800078c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000790:	ea92 0f03 	teqne	r2, r3
 8000794:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000798:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800079c:	d06a      	beq.n	8000874 <__addsf3+0xec>
 800079e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007a6:	bfc1      	itttt	gt
 80007a8:	18d2      	addgt	r2, r2, r3
 80007aa:	4041      	eorgt	r1, r0
 80007ac:	4048      	eorgt	r0, r1
 80007ae:	4041      	eorgt	r1, r0
 80007b0:	bfb8      	it	lt
 80007b2:	425b      	neglt	r3, r3
 80007b4:	2b19      	cmp	r3, #25
 80007b6:	bf88      	it	hi
 80007b8:	4770      	bxhi	lr
 80007ba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007c2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007d2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007d6:	bf18      	it	ne
 80007d8:	4249      	negne	r1, r1
 80007da:	ea92 0f03 	teq	r2, r3
 80007de:	d03f      	beq.n	8000860 <__addsf3+0xd8>
 80007e0:	f1a2 0201 	sub.w	r2, r2, #1
 80007e4:	fa41 fc03 	asr.w	ip, r1, r3
 80007e8:	eb10 000c 	adds.w	r0, r0, ip
 80007ec:	f1c3 0320 	rsb	r3, r3, #32
 80007f0:	fa01 f103 	lsl.w	r1, r1, r3
 80007f4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007f8:	d502      	bpl.n	8000800 <__addsf3+0x78>
 80007fa:	4249      	negs	r1, r1
 80007fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000800:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000804:	d313      	bcc.n	800082e <__addsf3+0xa6>
 8000806:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800080a:	d306      	bcc.n	800081a <__addsf3+0x92>
 800080c:	0840      	lsrs	r0, r0, #1
 800080e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000812:	f102 0201 	add.w	r2, r2, #1
 8000816:	2afe      	cmp	r2, #254	@ 0xfe
 8000818:	d251      	bcs.n	80008be <__addsf3+0x136>
 800081a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800081e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000822:	bf08      	it	eq
 8000824:	f020 0001 	biceq.w	r0, r0, #1
 8000828:	ea40 0003 	orr.w	r0, r0, r3
 800082c:	4770      	bx	lr
 800082e:	0049      	lsls	r1, r1, #1
 8000830:	eb40 0000 	adc.w	r0, r0, r0
 8000834:	3a01      	subs	r2, #1
 8000836:	bf28      	it	cs
 8000838:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800083c:	d2ed      	bcs.n	800081a <__addsf3+0x92>
 800083e:	fab0 fc80 	clz	ip, r0
 8000842:	f1ac 0c08 	sub.w	ip, ip, #8
 8000846:	ebb2 020c 	subs.w	r2, r2, ip
 800084a:	fa00 f00c 	lsl.w	r0, r0, ip
 800084e:	bfaa      	itet	ge
 8000850:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000854:	4252      	neglt	r2, r2
 8000856:	4318      	orrge	r0, r3
 8000858:	bfbc      	itt	lt
 800085a:	40d0      	lsrlt	r0, r2
 800085c:	4318      	orrlt	r0, r3
 800085e:	4770      	bx	lr
 8000860:	f092 0f00 	teq	r2, #0
 8000864:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000868:	bf06      	itte	eq
 800086a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800086e:	3201      	addeq	r2, #1
 8000870:	3b01      	subne	r3, #1
 8000872:	e7b5      	b.n	80007e0 <__addsf3+0x58>
 8000874:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000878:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800087c:	bf18      	it	ne
 800087e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000882:	d021      	beq.n	80008c8 <__addsf3+0x140>
 8000884:	ea92 0f03 	teq	r2, r3
 8000888:	d004      	beq.n	8000894 <__addsf3+0x10c>
 800088a:	f092 0f00 	teq	r2, #0
 800088e:	bf08      	it	eq
 8000890:	4608      	moveq	r0, r1
 8000892:	4770      	bx	lr
 8000894:	ea90 0f01 	teq	r0, r1
 8000898:	bf1c      	itt	ne
 800089a:	2000      	movne	r0, #0
 800089c:	4770      	bxne	lr
 800089e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008a2:	d104      	bne.n	80008ae <__addsf3+0x126>
 80008a4:	0040      	lsls	r0, r0, #1
 80008a6:	bf28      	it	cs
 80008a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008ac:	4770      	bx	lr
 80008ae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008b2:	bf3c      	itt	cc
 80008b4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008b8:	4770      	bxcc	lr
 80008ba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008be:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008c2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008c6:	4770      	bx	lr
 80008c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008cc:	bf16      	itet	ne
 80008ce:	4608      	movne	r0, r1
 80008d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008d4:	4601      	movne	r1, r0
 80008d6:	0242      	lsls	r2, r0, #9
 80008d8:	bf06      	itte	eq
 80008da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008de:	ea90 0f01 	teqeq	r0, r1
 80008e2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008e6:	4770      	bx	lr

080008e8 <__aeabi_ui2f>:
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	e004      	b.n	80008f8 <__aeabi_i2f+0x8>
 80008ee:	bf00      	nop

080008f0 <__aeabi_i2f>:
 80008f0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008f4:	bf48      	it	mi
 80008f6:	4240      	negmi	r0, r0
 80008f8:	ea5f 0c00 	movs.w	ip, r0
 80008fc:	bf08      	it	eq
 80008fe:	4770      	bxeq	lr
 8000900:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000904:	4601      	mov	r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	e01c      	b.n	8000946 <__aeabi_l2f+0x2a>

0800090c <__aeabi_ul2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	e00a      	b.n	8000930 <__aeabi_l2f+0x14>
 800091a:	bf00      	nop

0800091c <__aeabi_l2f>:
 800091c:	ea50 0201 	orrs.w	r2, r0, r1
 8000920:	bf08      	it	eq
 8000922:	4770      	bxeq	lr
 8000924:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000928:	d502      	bpl.n	8000930 <__aeabi_l2f+0x14>
 800092a:	4240      	negs	r0, r0
 800092c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000930:	ea5f 0c01 	movs.w	ip, r1
 8000934:	bf02      	ittt	eq
 8000936:	4684      	moveq	ip, r0
 8000938:	4601      	moveq	r1, r0
 800093a:	2000      	moveq	r0, #0
 800093c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000940:	bf08      	it	eq
 8000942:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000946:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800094a:	fabc f28c 	clz	r2, ip
 800094e:	3a08      	subs	r2, #8
 8000950:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000954:	db10      	blt.n	8000978 <__aeabi_l2f+0x5c>
 8000956:	fa01 fc02 	lsl.w	ip, r1, r2
 800095a:	4463      	add	r3, ip
 800095c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000968:	fa20 f202 	lsr.w	r2, r0, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	f020 0001 	biceq.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	f102 0220 	add.w	r2, r2, #32
 800097c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000980:	f1c2 0220 	rsb	r2, r2, #32
 8000984:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000988:	fa21 f202 	lsr.w	r2, r1, r2
 800098c:	eb43 0002 	adc.w	r0, r3, r2
 8000990:	bf08      	it	eq
 8000992:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000996:	4770      	bx	lr

08000998 <__aeabi_fmul>:
 8000998:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800099c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009a0:	bf1e      	ittt	ne
 80009a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009a6:	ea92 0f0c 	teqne	r2, ip
 80009aa:	ea93 0f0c 	teqne	r3, ip
 80009ae:	d06f      	beq.n	8000a90 <__aeabi_fmul+0xf8>
 80009b0:	441a      	add	r2, r3
 80009b2:	ea80 0c01 	eor.w	ip, r0, r1
 80009b6:	0240      	lsls	r0, r0, #9
 80009b8:	bf18      	it	ne
 80009ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009be:	d01e      	beq.n	80009fe <__aeabi_fmul+0x66>
 80009c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009cc:	fba0 3101 	umull	r3, r1, r0, r1
 80009d0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009d4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009d8:	bf3e      	ittt	cc
 80009da:	0049      	lslcc	r1, r1, #1
 80009dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009e0:	005b      	lslcc	r3, r3, #1
 80009e2:	ea40 0001 	orr.w	r0, r0, r1
 80009e6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009ea:	2afd      	cmp	r2, #253	@ 0xfd
 80009ec:	d81d      	bhi.n	8000a2a <__aeabi_fmul+0x92>
 80009ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f6:	bf08      	it	eq
 80009f8:	f020 0001 	biceq.w	r0, r0, #1
 80009fc:	4770      	bx	lr
 80009fe:	f090 0f00 	teq	r0, #0
 8000a02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a06:	bf08      	it	eq
 8000a08:	0249      	lsleq	r1, r1, #9
 8000a0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a12:	3a7f      	subs	r2, #127	@ 0x7f
 8000a14:	bfc2      	ittt	gt
 8000a16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a1e:	4770      	bxgt	lr
 8000a20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	dc5d      	bgt.n	8000ae8 <__aeabi_fmul+0x150>
 8000a2c:	f112 0f19 	cmn.w	r2, #25
 8000a30:	bfdc      	itt	le
 8000a32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a36:	4770      	bxle	lr
 8000a38:	f1c2 0200 	rsb	r2, r2, #0
 8000a3c:	0041      	lsls	r1, r0, #1
 8000a3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a42:	f1c2 0220 	rsb	r2, r2, #32
 8000a46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a4e:	f140 0000 	adc.w	r0, r0, #0
 8000a52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a56:	bf08      	it	eq
 8000a58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a5c:	4770      	bx	lr
 8000a5e:	f092 0f00 	teq	r2, #0
 8000a62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a66:	bf02      	ittt	eq
 8000a68:	0040      	lsleq	r0, r0, #1
 8000a6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a6e:	3a01      	subeq	r2, #1
 8000a70:	d0f9      	beq.n	8000a66 <__aeabi_fmul+0xce>
 8000a72:	ea40 000c 	orr.w	r0, r0, ip
 8000a76:	f093 0f00 	teq	r3, #0
 8000a7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a7e:	bf02      	ittt	eq
 8000a80:	0049      	lsleq	r1, r1, #1
 8000a82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a86:	3b01      	subeq	r3, #1
 8000a88:	d0f9      	beq.n	8000a7e <__aeabi_fmul+0xe6>
 8000a8a:	ea41 010c 	orr.w	r1, r1, ip
 8000a8e:	e78f      	b.n	80009b0 <__aeabi_fmul+0x18>
 8000a90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a94:	ea92 0f0c 	teq	r2, ip
 8000a98:	bf18      	it	ne
 8000a9a:	ea93 0f0c 	teqne	r3, ip
 8000a9e:	d00a      	beq.n	8000ab6 <__aeabi_fmul+0x11e>
 8000aa0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000aa4:	bf18      	it	ne
 8000aa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000aaa:	d1d8      	bne.n	8000a5e <__aeabi_fmul+0xc6>
 8000aac:	ea80 0001 	eor.w	r0, r0, r1
 8000ab0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f090 0f00 	teq	r0, #0
 8000aba:	bf17      	itett	ne
 8000abc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	f091 0f00 	teqne	r1, #0
 8000ac6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000aca:	d014      	beq.n	8000af6 <__aeabi_fmul+0x15e>
 8000acc:	ea92 0f0c 	teq	r2, ip
 8000ad0:	d101      	bne.n	8000ad6 <__aeabi_fmul+0x13e>
 8000ad2:	0242      	lsls	r2, r0, #9
 8000ad4:	d10f      	bne.n	8000af6 <__aeabi_fmul+0x15e>
 8000ad6:	ea93 0f0c 	teq	r3, ip
 8000ada:	d103      	bne.n	8000ae4 <__aeabi_fmul+0x14c>
 8000adc:	024b      	lsls	r3, r1, #9
 8000ade:	bf18      	it	ne
 8000ae0:	4608      	movne	r0, r1
 8000ae2:	d108      	bne.n	8000af6 <__aeabi_fmul+0x15e>
 8000ae4:	ea80 0001 	eor.w	r0, r0, r1
 8000ae8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af4:	4770      	bx	lr
 8000af6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000afa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_fdiv>:
 8000b00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b08:	bf1e      	ittt	ne
 8000b0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b0e:	ea92 0f0c 	teqne	r2, ip
 8000b12:	ea93 0f0c 	teqne	r3, ip
 8000b16:	d069      	beq.n	8000bec <__aeabi_fdiv+0xec>
 8000b18:	eba2 0203 	sub.w	r2, r2, r3
 8000b1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b20:	0249      	lsls	r1, r1, #9
 8000b22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b26:	d037      	beq.n	8000b98 <__aeabi_fdiv+0x98>
 8000b28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	bf38      	it	cc
 8000b3c:	005b      	lslcc	r3, r3, #1
 8000b3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b46:	428b      	cmp	r3, r1
 8000b48:	bf24      	itt	cs
 8000b4a:	1a5b      	subcs	r3, r3, r1
 8000b4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b54:	bf24      	itt	cs
 8000b56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b62:	bf24      	itt	cs
 8000b64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b70:	bf24      	itt	cs
 8000b72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	bf18      	it	ne
 8000b7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b82:	d1e0      	bne.n	8000b46 <__aeabi_fdiv+0x46>
 8000b84:	2afd      	cmp	r2, #253	@ 0xfd
 8000b86:	f63f af50 	bhi.w	8000a2a <__aeabi_fmul+0x92>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ba0:	327f      	adds	r2, #127	@ 0x7f
 8000ba2:	bfc2      	ittt	gt
 8000ba4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ba8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bac:	4770      	bxgt	lr
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	3a01      	subs	r2, #1
 8000bb8:	e737      	b.n	8000a2a <__aeabi_fmul+0x92>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bc2:	bf02      	ittt	eq
 8000bc4:	0040      	lsleq	r0, r0, #1
 8000bc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bca:	3a01      	subeq	r2, #1
 8000bcc:	d0f9      	beq.n	8000bc2 <__aeabi_fdiv+0xc2>
 8000bce:	ea40 000c 	orr.w	r0, r0, ip
 8000bd2:	f093 0f00 	teq	r3, #0
 8000bd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bda:	bf02      	ittt	eq
 8000bdc:	0049      	lsleq	r1, r1, #1
 8000bde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000be2:	3b01      	subeq	r3, #1
 8000be4:	d0f9      	beq.n	8000bda <__aeabi_fdiv+0xda>
 8000be6:	ea41 010c 	orr.w	r1, r1, ip
 8000bea:	e795      	b.n	8000b18 <__aeabi_fdiv+0x18>
 8000bec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bf0:	ea92 0f0c 	teq	r2, ip
 8000bf4:	d108      	bne.n	8000c08 <__aeabi_fdiv+0x108>
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	f47f af7d 	bne.w	8000af6 <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	f47f af70 	bne.w	8000ae4 <__aeabi_fmul+0x14c>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e776      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c08:	ea93 0f0c 	teq	r3, ip
 8000c0c:	d104      	bne.n	8000c18 <__aeabi_fdiv+0x118>
 8000c0e:	024b      	lsls	r3, r1, #9
 8000c10:	f43f af4c 	beq.w	8000aac <__aeabi_fmul+0x114>
 8000c14:	4608      	mov	r0, r1
 8000c16:	e76e      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c18:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c1c:	bf18      	it	ne
 8000c1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c22:	d1ca      	bne.n	8000bba <__aeabi_fdiv+0xba>
 8000c24:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c28:	f47f af5c 	bne.w	8000ae4 <__aeabi_fmul+0x14c>
 8000c2c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c30:	f47f af3c 	bne.w	8000aac <__aeabi_fmul+0x114>
 8000c34:	e75f      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c36:	bf00      	nop

08000c38 <__gesf2>:
 8000c38:	f04f 3cff 	mov.w	ip, #4294967295
 8000c3c:	e006      	b.n	8000c4c <__cmpsf2+0x4>
 8000c3e:	bf00      	nop

08000c40 <__lesf2>:
 8000c40:	f04f 0c01 	mov.w	ip, #1
 8000c44:	e002      	b.n	8000c4c <__cmpsf2+0x4>
 8000c46:	bf00      	nop

08000c48 <__cmpsf2>:
 8000c48:	f04f 0c01 	mov.w	ip, #1
 8000c4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	bf18      	it	ne
 8000c5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c62:	d011      	beq.n	8000c88 <__cmpsf2+0x40>
 8000c64:	b001      	add	sp, #4
 8000c66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c6a:	bf18      	it	ne
 8000c6c:	ea90 0f01 	teqne	r0, r1
 8000c70:	bf58      	it	pl
 8000c72:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c76:	bf88      	it	hi
 8000c78:	17c8      	asrhi	r0, r1, #31
 8000c7a:	bf38      	it	cc
 8000c7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c80:	bf18      	it	ne
 8000c82:	f040 0001 	orrne.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c8c:	d102      	bne.n	8000c94 <__cmpsf2+0x4c>
 8000c8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c92:	d105      	bne.n	8000ca0 <__cmpsf2+0x58>
 8000c94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c98:	d1e4      	bne.n	8000c64 <__cmpsf2+0x1c>
 8000c9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c9e:	d0e1      	beq.n	8000c64 <__cmpsf2+0x1c>
 8000ca0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_cfrcmple>:
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4608      	mov	r0, r1
 8000cac:	4661      	mov	r1, ip
 8000cae:	e7ff      	b.n	8000cb0 <__aeabi_cfcmpeq>

08000cb0 <__aeabi_cfcmpeq>:
 8000cb0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cb2:	f7ff ffc9 	bl	8000c48 <__cmpsf2>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	bf48      	it	mi
 8000cba:	f110 0f00 	cmnmi.w	r0, #0
 8000cbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cc0 <__aeabi_fcmpeq>:
 8000cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc4:	f7ff fff4 	bl	8000cb0 <__aeabi_cfcmpeq>
 8000cc8:	bf0c      	ite	eq
 8000cca:	2001      	moveq	r0, #1
 8000ccc:	2000      	movne	r0, #0
 8000cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_fcmplt>:
 8000cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd8:	f7ff ffea 	bl	8000cb0 <__aeabi_cfcmpeq>
 8000cdc:	bf34      	ite	cc
 8000cde:	2001      	movcc	r0, #1
 8000ce0:	2000      	movcs	r0, #0
 8000ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_fcmple>:
 8000ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cec:	f7ff ffe0 	bl	8000cb0 <__aeabi_cfcmpeq>
 8000cf0:	bf94      	ite	ls
 8000cf2:	2001      	movls	r0, #1
 8000cf4:	2000      	movhi	r0, #0
 8000cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfa:	bf00      	nop

08000cfc <__aeabi_fcmpge>:
 8000cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d00:	f7ff ffd2 	bl	8000ca8 <__aeabi_cfrcmple>
 8000d04:	bf94      	ite	ls
 8000d06:	2001      	movls	r0, #1
 8000d08:	2000      	movhi	r0, #0
 8000d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0e:	bf00      	nop

08000d10 <__aeabi_fcmpgt>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff ffc8 	bl	8000ca8 <__aeabi_cfrcmple>
 8000d18:	bf34      	ite	cc
 8000d1a:	2001      	movcc	r0, #1
 8000d1c:	2000      	movcs	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_f2iz>:
 8000d24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d28:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d2c:	d30f      	bcc.n	8000d4e <__aeabi_f2iz+0x2a>
 8000d2e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d36:	d90d      	bls.n	8000d54 <__aeabi_f2iz+0x30>
 8000d38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d40:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d44:	fa23 f002 	lsr.w	r0, r3, r2
 8000d48:	bf18      	it	ne
 8000d4a:	4240      	negne	r0, r0
 8000d4c:	4770      	bx	lr
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	4770      	bx	lr
 8000d54:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d58:	d101      	bne.n	8000d5e <__aeabi_f2iz+0x3a>
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	d105      	bne.n	8000d6a <__aeabi_f2iz+0x46>
 8000d5e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr

08000d70 <HAL_TIM_IC_CaptureCallback>:
	float res = 27.7778e3f/(float)(last_mot_speed_count);
	return res;
}
// Input compare
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	// current is in the order of 500 per amp
	/*
	 * In principle an error arround 1k cnts should increase the current by less than an amp to soften the current ramp.
	 * ESTO SALIO A OJO, NO HAY MATEMATICA
	 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	483b      	ldr	r0, [pc, #236]	@ (8000e68 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000d7c:	f002 fbde 	bl	800353c <HAL_GPIO_TogglePin>
	mot_speed_count += htim->Instance->CCR1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d86:	4b39      	ldr	r3, [pc, #228]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a37      	ldr	r2, [pc, #220]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000d8e:	6013      	str	r3, [r2, #0]

	err = mot_speed_setpoint - mot_speed_count;
 8000d90:	4b37      	ldr	r3, [pc, #220]	@ (8000e70 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b35      	ldr	r3, [pc, #212]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000d9e:	601a      	str	r2, [r3, #0]

	p = Kp * err;
 8000da0:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc57 	bl	8000658 <__aeabi_i2d>
 8000daa:	a32b      	add	r3, pc, #172	@ (adr r3, 8000e58 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff f9d6 	bl	8000160 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fcb6 	bl	800072c <__aeabi_d2iz>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e78 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000dc4:	6013      	str	r3, [r2, #0]
	aux_i = i + Ki * err ;
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fc44 	bl	8000658 <__aeabi_i2d>
 8000dd0:	4604      	mov	r4, r0
 8000dd2:	460d      	mov	r5, r1
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fc3d 	bl	8000658 <__aeabi_i2d>
 8000dde:	a320      	add	r3, pc, #128	@ (adr r3, 8000e60 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de4:	f7ff f9bc 	bl	8000160 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4620      	mov	r0, r4
 8000dee:	4629      	mov	r1, r5
 8000df0:	f7ff fae6 	bl	80003c0 <__adddf3>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f7ff fc96 	bl	800072c <__aeabi_d2iz>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a1f      	ldr	r2, [pc, #124]	@ (8000e80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e04:	6013      	str	r3, [r2, #0]
	i = abs(aux_i) < SATURATION_INT ? aux_i : i;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f513 6fba 	cmn.w	r3, #1488	@ 0x5d0
 8000e0e:	dd07      	ble.n	8000e20 <HAL_TIM_IC_CaptureCallback+0xb0>
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f5b3 6fba 	cmp.w	r3, #1488	@ 0x5d0
 8000e18:	da02      	bge.n	8000e20 <HAL_TIM_IC_CaptureCallback+0xb0>
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	e001      	b.n	8000e24 <HAL_TIM_IC_CaptureCallback+0xb4>
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a15      	ldr	r2, [pc, #84]	@ (8000e7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e26:	6013      	str	r3, [r2, #0]

	out_pi = p + i;
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e34:	6013      	str	r3, [r2, #0]
	set_I_int(out_pi);
 8000e36:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f86d 	bl	8000f1c <set_I_int>
	last_mot_speed_count = mot_speed_count;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e48:	6013      	str	r3, [r2, #0]
	mot_speed_count = 0;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bdb0      	pop	{r4, r5, r7, pc}
 8000e58:	33333333 	.word	0x33333333
 8000e5c:	3fd33333 	.word	0x3fd33333
 8000e60:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e64:	3f50624d 	.word	0x3f50624d
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	20000198 	.word	0x20000198
 8000e70:	200001a0 	.word	0x200001a0
 8000e74:	200001a4 	.word	0x200001a4
 8000e78:	200001a8 	.word	0x200001a8
 8000e7c:	200001ac 	.word	0x200001ac
 8000e80:	200001b0 	.word	0x200001b0
 8000e84:	200001b4 	.word	0x200001b4
 8000e88:	2000019c 	.word	0x2000019c

08000e8c <HAL_TIM_PeriodElapsedCallback>:

// Overflow
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000e94:	2101      	movs	r1, #1
 8000e96:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000e98:	f002 fb50 	bl	800353c <HAL_GPIO_TogglePin>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <set_I_float>:
uint16_t get_I_int()
{
	return i_ref_int - i_offset;
}
void set_I_float(float i)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if (i > MAX_CURR || i < 0.0)
 8000eb0:	4916      	ldr	r1, [pc, #88]	@ (8000f0c <set_I_float+0x64>)
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff2c 	bl	8000d10 <__aeabi_fcmpgt>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d107      	bne.n	8000ece <set_I_float+0x26>
 8000ebe:	f04f 0100 	mov.w	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff06 	bl	8000cd4 <__aeabi_fcmplt>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <set_I_float+0x2a>
	{
		i = MAX_CURR;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <set_I_float+0x64>)
 8000ed0:	607b      	str	r3, [r7, #4]
	}
	i_ref_int = i * SENS_SENSITIVITY + i_offset;
 8000ed2:	490f      	ldr	r1, [pc, #60]	@ (8000f10 <set_I_float+0x68>)
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fd5f 	bl	8000998 <__aeabi_fmul>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461c      	mov	r4, r3
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <set_I_float+0x6c>)
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fd03 	bl	80008f0 <__aeabi_i2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4619      	mov	r1, r3
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fc4a 	bl	8000788 <__addsf3>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff14 	bl	8000d24 <__aeabi_f2iz>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <set_I_float+0x70>)
 8000f02:	801a      	strh	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	40400000 	.word	0x40400000
 8000f10:	43f80000 	.word	0x43f80000
 8000f14:	200001bc 	.word	0x200001bc
 8000f18:	200001ba 	.word	0x200001ba

08000f1c <set_I_int>:

void set_I_int(uint16_t i)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
	i_ref_int = i > SENS_SENSITIVITY * MAX_CURR ? max_curr : i + i_offset;
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	f5b3 6fba 	cmp.w	r3, #1488	@ 0x5d0
 8000f2c:	d808      	bhi.n	8000f40 <set_I_int+0x24>
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <set_I_int+0x38>)
 8000f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4413      	add	r3, r2
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	e002      	b.n	8000f46 <set_I_int+0x2a>
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <set_I_int+0x3c>)
 8000f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <set_I_int+0x40>)
 8000f48:	8013      	strh	r3, [r2, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	200001bc 	.word	0x200001bc
 8000f58:	200001be 	.word	0x200001be
 8000f5c:	200001ba 	.word	0x200001ba

08000f60 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 ffdf 	bl	8001f2c <HAL_ADC_GetValue>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000f74:	801a      	strh	r2, [r3, #0]
	if (!calibrated)
 8000f76:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <HAL_ADC_ConvCpltCallback+0xcc>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d01d      	beq.n	8000fc0 <HAL_ADC_ConvCpltCallback+0x60>
	{
		i_offset = adc_value;
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000f86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f8a:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000f8c:	801a      	strh	r2, [r3, #0]
		max_curr = MAX_CURR * SENS_SENSITIVITY + i_offset;
 8000f8e:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fb5f 	bl	8000658 <__aeabi_i2d>
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000fa0:	f7ff fa0e 	bl	80003c0 <__adddf3>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fbbe 	bl	800072c <__aeabi_d2iz>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000fb6:	801a      	strh	r2, [r3, #0]
		calibrated = true;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <HAL_ADC_ConvCpltCallback+0xcc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e02f      	b.n	8001020 <HAL_ADC_ConvCpltCallback+0xc0>
	}
	else
	{
		if (i_ref_int == i_offset)
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d10a      	bne.n	8000fe6 <HAL_ADC_ConvCpltCallback+0x86>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	481a      	ldr	r0, [pc, #104]	@ (8001040 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fd6:	f002 fa99 	bl	800350c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4818      	ldr	r0, [pc, #96]	@ (8001040 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fe0:	f002 fa94 	bl	800350c <HAL_GPIO_WritePin>
			return;
 8000fe4:	e01c      	b.n	8001020 <HAL_ADC_ConvCpltCallback+0xc0>
		}
		if (adc_value > i_ref_int)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dd0a      	ble.n	800100c <HAL_ADC_ConvCpltCallback+0xac>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4811      	ldr	r0, [pc, #68]	@ (8001040 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000ffc:	f002 fa86 	bl	800350c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	480e      	ldr	r0, [pc, #56]	@ (8001040 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001006:	f002 fa81 	bl	800350c <HAL_GPIO_WritePin>
 800100a:	e009      	b.n	8001020 <HAL_ADC_ConvCpltCallback+0xc0>
		}
		else
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2102      	movs	r1, #2
 8001010:	480b      	ldr	r0, [pc, #44]	@ (8001040 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001012:	f002 fa7b 	bl	800350c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2101      	movs	r1, #1
 800101a:	4809      	ldr	r0, [pc, #36]	@ (8001040 <HAL_ADC_ConvCpltCallback+0xe0>)
 800101c:	f002 fa76 	bl	800350c <HAL_GPIO_WritePin>
		}
	}
}
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001b8 	.word	0x200001b8
 800102c:	200001c0 	.word	0x200001c0
 8001030:	200001bc 	.word	0x200001bc
 8001034:	40974000 	.word	0x40974000
 8001038:	200001be 	.word	0x200001be
 800103c:	200001ba 	.word	0x200001ba
 8001040:	40010800 	.word	0x40010800

08001044 <command_I>:
#include "usbd_cdc_if.h"

#include "stdio.h"
#include "string.h"

void command_I(uint8_t *buff){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	static float i;
	i = (uint32_t) buff / 4095.0f;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fc4a 	bl	80008e8 <__aeabi_ui2f>
 8001054:	4603      	mov	r3, r0
 8001056:	4908      	ldr	r1, [pc, #32]	@ (8001078 <command_I+0x34>)
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fd51 	bl	8000b00 <__aeabi_fdiv>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <command_I+0x38>)
 8001064:	601a      	str	r2, [r3, #0]
	set_I_float(i);
 8001066:	4b05      	ldr	r3, [pc, #20]	@ (800107c <command_I+0x38>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff1c 	bl	8000ea8 <set_I_float>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	457ff000 	.word	0x457ff000
 800107c:	200001c4 	.word	0x200001c4

08001080 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f000 fe17 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f843 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 facf 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 8001092:	f000 faaf 	bl	80015f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8001096:	f000 f90f 	bl	80012b8 <MX_SPI1_Init>
  MX_ADC1_Init();
 800109a:	f000 f899 	bl	80011d0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800109e:	f000 f9a9 	bl	80013f4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80010a2:	f009 ff61 	bl	800af68 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80010a6:	f000 f939 	bl	800131c <MX_TIM1_Init>
  MX_TIM4_Init();
 80010aa:	f000 fa17 	bl	80014dc <MX_TIM4_Init>
  MX_CAN_Init();
 80010ae:	f000 f8cd 	bl	800124c <MX_CAN_Init>

  uint8_t pedalCommand[MSG_SIZE];

  // curr_control_init(&hadc1, &htim3);
  // init_LUT_comms(&hspi1);
  HAL_TIMEx_HallSensor_Start_IT(&htim1);
 80010b2:	4814      	ldr	r0, [pc, #80]	@ (8001104 <main+0x84>)
 80010b4:	f005 ff9c 	bl	8006ff0 <HAL_TIMEx_HallSensor_Start_IT>
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <main+0x88>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <main+0x88>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0202 	orr.w	r2, r2, #2
 80010c6:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim4);
 80010c8:	480f      	ldr	r0, [pc, #60]	@ (8001108 <main+0x88>)
 80010ca:	f004 fe1b 	bl	8005d04 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0)
 80010ce:	2100      	movs	r1, #0
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <main+0x8c>)
 80010d2:	f001 fb5d 	bl	8002790 <HAL_CAN_GetRxFifoFillLevel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f8      	beq.n	80010ce <main+0x4e>
	  {
		  //Leemos el dato de CAN y lo guardamos en el command
		  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, pedalCommand);
 80010dc:	463b      	mov	r3, r7
 80010de:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <main+0x90>)
 80010e0:	2100      	movs	r1, #0
 80010e2:	480a      	ldr	r0, [pc, #40]	@ (800110c <main+0x8c>)
 80010e4:	f001 fa33 	bl	800254e <HAL_CAN_GetRxMessage>
		  uint8_t command = pedalCommand[0];
 80010e8:	783b      	ldrb	r3, [r7, #0]
 80010ea:	73fb      	strb	r3, [r7, #15]
		  uint8_t* data = &pedalCommand[1];
 80010ec:	463b      	mov	r3, r7
 80010ee:	3301      	adds	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]

		  switch (command)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b49      	cmp	r3, #73	@ 0x49
 80010f6:	d1ea      	bne.n	80010ce <main+0x4e>
		  {
		  	  case 'I':
		  		  command_I(data);
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f7ff ffa3 	bl	8001044 <command_I>
		  		  break;
 80010fe:	bf00      	nop
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0)
 8001100:	e7e5      	b.n	80010ce <main+0x4e>
 8001102:	bf00      	nop
 8001104:	200002bc 	.word	0x200002bc
 8001108:	2000034c 	.word	0x2000034c
 800110c:	200001f8 	.word	0x200001f8
 8001110:	20000394 	.word	0x20000394

08001114 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	@ 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111e:	2228      	movs	r2, #40	@ 0x28
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00a fba4 	bl	800b870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001152:	2301      	movs	r3, #1
 8001154:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800115e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001160:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001164:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116a:	4618      	mov	r0, r3
 800116c:	f003 ff60 	bl	8005030 <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001176:	f000 fad5 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800117a:	230f      	movs	r3, #15
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800118a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2102      	movs	r1, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f004 f9cc 	bl	8005534 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011a2:	f000 fabf 	bl	8001724 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80011a6:	2312      	movs	r3, #18
 80011a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fb18 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80011c2:	f000 faaf 	bl	8001724 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3750      	adds	r7, #80	@ 0x50
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_ADC1_Init+0x74>)
 80011e2:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <MX_ADC1_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_ADC1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_ADC1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_ADC1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_ADC1_Init+0x74>)
 80011fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <MX_ADC1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_ADC1_Init+0x74>)
 8001208:	2201      	movs	r2, #1
 800120a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_ADC1_Init+0x74>)
 800120e:	f000 fdb5 	bl	8001d7c <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 fa84 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_6;
 800121c:	2306      	movs	r3, #6
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2301      	movs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_ADC1_Init+0x74>)
 800122e:	f000 ff51 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001238:	f000 fa74 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001c8 	.word	0x200001c8
 8001248:	40012400 	.word	0x40012400

0800124c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <MX_CAN_Init+0x64>)
 8001252:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <MX_CAN_Init+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <MX_CAN_Init+0x64>)
 8001258:	2210      	movs	r2, #16
 800125a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <MX_CAN_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001262:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <MX_CAN_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_CAN_Init+0x64>)
 800126a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800126e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <MX_CAN_Init+0x64>)
 8001272:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001276:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <MX_CAN_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_CAN_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <MX_CAN_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_CAN_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <MX_CAN_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_CAN_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <MX_CAN_Init+0x64>)
 800129e:	f001 f85b 	bl	8002358 <HAL_CAN_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012a8:	f000 fa3c 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200001f8 	.word	0x200001f8
 80012b4:	40006400 	.word	0x40006400

080012b8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012be:	4a16      	ldr	r2, [pc, #88]	@ (8001318 <MX_SPI1_Init+0x60>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_SPI1_Init+0x5c>)
 80012fc:	220a      	movs	r2, #10
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <MX_SPI1_Init+0x5c>)
 8001302:	f004 fb29 	bl	8005958 <HAL_SPI_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 800130c:	f000 fa0a 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000220 	.word	0x20000220
 8001318:	40013000 	.word	0x40013000

0800131c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001346:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <MX_TIM1_Init+0xd0>)
 8001348:	4a29      	ldr	r2, [pc, #164]	@ (80013f0 <MX_TIM1_Init+0xd4>)
 800134a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440;
 800134c:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <MX_TIM1_Init+0xd0>)
 800134e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <MX_TIM1_Init+0xd0>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <MX_TIM1_Init+0xd0>)
 800135c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <MX_TIM1_Init+0xd0>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_TIM1_Init+0xd0>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_TIM1_Init+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001374:	481d      	ldr	r0, [pc, #116]	@ (80013ec <MX_TIM1_Init+0xd0>)
 8001376:	f004 fc76 	bl	8005c66 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001380:	f000 f9d0 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001388:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4619      	mov	r1, r3
 8001390:	4816      	ldr	r0, [pc, #88]	@ (80013ec <MX_TIM1_Init+0xd0>)
 8001392:	f005 f807 	bl	80063a4 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800139c:	f000 f9c2 	bl	8001724 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 7;
 80013a8:	2307      	movs	r3, #7
 80013aa:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_TIM1_Init+0xd0>)
 80013b8:	f005 fd67 	bl	8006e8a <HAL_TIMEx_HallSensor_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80013c2:	f000 f9af 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80013c6:	2350      	movs	r3, #80	@ 0x50
 80013c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	@ (80013ec <MX_TIM1_Init+0xd0>)
 80013d4:	f005 fe86 	bl	80070e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80013de:	f000 f9a1 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	@ 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200002bc 	.word	0x200002bc
 80013f0:	40012c00 	.word	0x40012c00

080013f4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	@ 0x38
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 8001426:	4a2c      	ldr	r2, [pc, #176]	@ (80014d8 <MX_TIM3_Init+0xe4>)
 8001428:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 720;
 8001436:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 8001438:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 800143c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144a:	4822      	ldr	r0, [pc, #136]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 800144c:	f004 fc0b 	bl	8005c66 <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001456:	f000 f965 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001460:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001464:	4619      	mov	r1, r3
 8001466:	481b      	ldr	r0, [pc, #108]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 8001468:	f004 ff9c 	bl	80063a4 <HAL_TIM_ConfigClockSource>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001472:	f000 f957 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001476:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 8001478:	f004 fc96 	bl	8005da8 <HAL_TIM_PWM_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001482:	f000 f94f 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001486:	2320      	movs	r3, #32
 8001488:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	4619      	mov	r1, r3
 8001494:	480f      	ldr	r0, [pc, #60]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 8001496:	f005 fe25 	bl	80070e4 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014a0:	f000 f940 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a4:	2360      	movs	r3, #96	@ 0x60
 80014a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 180;
 80014a8:	23b4      	movs	r3, #180	@ 0xb4
 80014aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <MX_TIM3_Init+0xe0>)
 80014bc:	f004 feb0 	bl	8006220 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014c6:	f000 f92d 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80014ca:	bf00      	nop
 80014cc:	3738      	adds	r7, #56	@ 0x38
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000304 	.word	0x20000304
 80014d8:	40000400 	.word	0x40000400

080014dc <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b090      	sub	sp, #64	@ 0x40
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <MX_TIM4_Init+0x110>)
 8001518:	4a35      	ldr	r2, [pc, #212]	@ (80015f0 <MX_TIM4_Init+0x114>)
 800151a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 800151c:	4b33      	ldr	r3, [pc, #204]	@ (80015ec <MX_TIM4_Init+0x110>)
 800151e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001522:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <MX_TIM4_Init+0x110>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800152a:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <MX_TIM4_Init+0x110>)
 800152c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001530:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001532:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <MX_TIM4_Init+0x110>)
 8001534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001538:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <MX_TIM4_Init+0x110>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001540:	482a      	ldr	r0, [pc, #168]	@ (80015ec <MX_TIM4_Init+0x110>)
 8001542:	f004 fb90 	bl	8005c66 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800154c:	f000 f8ea 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800155a:	4619      	mov	r1, r3
 800155c:	4823      	ldr	r0, [pc, #140]	@ (80015ec <MX_TIM4_Init+0x110>)
 800155e:	f004 ff21 	bl	80063a4 <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001568:	f000 f8dc 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800156c:	481f      	ldr	r0, [pc, #124]	@ (80015ec <MX_TIM4_Init+0x110>)
 800156e:	f004 fc73 	bl	8005e58 <HAL_TIM_IC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001578:	f000 f8d4 	bl	8001724 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800157c:	2304      	movs	r3, #4
 800157e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001580:	2340      	movs	r3, #64	@ 0x40
 8001582:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4817      	ldr	r0, [pc, #92]	@ (80015ec <MX_TIM4_Init+0x110>)
 8001590:	f004 ffcf 	bl	8006532 <HAL_TIM_SlaveConfigSynchro>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800159a:	f000 f8c3 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	480f      	ldr	r0, [pc, #60]	@ (80015ec <MX_TIM4_Init+0x110>)
 80015ae:	f005 fd99 	bl	80070e4 <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80015b8:	f000 f8b4 	bl	8001724 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 80015c0:	2303      	movs	r3, #3
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	@ (80015ec <MX_TIM4_Init+0x110>)
 80015d4:	f004 fd88 	bl	80060e8 <HAL_TIM_IC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 80015de:	f000 f8a1 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 80015e2:	bf00      	nop
 80015e4:	3740      	adds	r7, #64	@ 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000034c 	.word	0x2000034c
 80015f0:	40000800 	.word	0x40000800

080015f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_DMA_Init+0x38>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <MX_DMA_Init+0x38>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6153      	str	r3, [r2, #20]
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_DMA_Init+0x38>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200d      	movs	r0, #13
 8001618:	f001 fbe5 	bl	8002de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800161c:	200d      	movs	r0, #13
 800161e:	f001 fbfe 	bl	8002e1e <HAL_NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001644:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <MX_GPIO_Init+0xe8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a33      	ldr	r2, [pc, #204]	@ (8001718 <MX_GPIO_Init+0xe8>)
 800164a:	f043 0320 	orr.w	r3, r3, #32
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b31      	ldr	r3, [pc, #196]	@ (8001718 <MX_GPIO_Init+0xe8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <MX_GPIO_Init+0xe8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a2d      	ldr	r2, [pc, #180]	@ (8001718 <MX_GPIO_Init+0xe8>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <MX_GPIO_Init+0xe8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <MX_GPIO_Init+0xe8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a27      	ldr	r2, [pc, #156]	@ (8001718 <MX_GPIO_Init+0xe8>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <MX_GPIO_Init+0xe8>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	210f      	movs	r1, #15
 8001690:	4822      	ldr	r0, [pc, #136]	@ (800171c <MX_GPIO_Init+0xec>)
 8001692:	f001 ff3b 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2103      	movs	r1, #3
 800169a:	4821      	ldr	r0, [pc, #132]	@ (8001720 <MX_GPIO_Init+0xf0>)
 800169c:	f001 ff36 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a0:	2301      	movs	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	4819      	ldr	r0, [pc, #100]	@ (800171c <MX_GPIO_Init+0xec>)
 80016b8:	f001 fda4 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 80016bc:	230e      	movs	r3, #14
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	4812      	ldr	r0, [pc, #72]	@ (800171c <MX_GPIO_Init+0xec>)
 80016d4:	f001 fd96 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80016d8:	2303      	movs	r3, #3
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <MX_GPIO_Init+0xf0>)
 80016f0:	f001 fd88 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_9;
 80016f4:	f44f 4372 	mov.w	r3, #61952	@ 0xf200
 80016f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_GPIO_Init+0xf0>)
 800170a:	f001 fd7b 	bl	8003204 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	40010800 	.word	0x40010800
 8001720:	40010c00 	.word	0x40010c00

08001724 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <Error_Handler+0x8>

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_MspInit+0x5c>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a14      	ldr	r2, [pc, #80]	@ (800178c <HAL_MspInit+0x5c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_MspInit+0x5c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_MspInit+0x5c>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_MspInit+0x5c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_MspInit+0x5c>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
   */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_MspInit+0x60>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <HAL_MspInit+0x60>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40021000 	.word	0x40021000
 8001790:	40010000 	.word	0x40010000

08001794 <HAL_ADC_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if (hadc->Instance == ADC1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <HAL_ADC_MspInit+0x7c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d129      	bne.n	8001808 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017b4:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e4:	2340      	movs	r3, #64	@ 0x40
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e8:	2303      	movs	r3, #3
 80017ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	4809      	ldr	r0, [pc, #36]	@ (8001818 <HAL_ADC_MspInit+0x84>)
 80017f4:	f001 fd06 	bl	8003204 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2012      	movs	r0, #18
 80017fe:	f001 faf2 	bl	8002de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001802:	2012      	movs	r0, #18
 8001804:	f001 fb0b 	bl	8002e1e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001808:	bf00      	nop
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40012400 	.word	0x40012400
 8001814:	40021000 	.word	0x40021000
 8001818:	40010800 	.word	0x40010800

0800181c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <HAL_CAN_MspInit+0xc0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d14b      	bne.n	80018d4 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800183c:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <HAL_CAN_MspInit+0xc4>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	4a27      	ldr	r2, [pc, #156]	@ (80018e0 <HAL_CAN_MspInit+0xc4>)
 8001842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001846:	61d3      	str	r3, [r2, #28]
 8001848:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <HAL_CAN_MspInit+0xc4>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <HAL_CAN_MspInit+0xc4>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <HAL_CAN_MspInit+0xc4>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <HAL_CAN_MspInit+0xc4>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800186c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4818      	ldr	r0, [pc, #96]	@ (80018e4 <HAL_CAN_MspInit+0xc8>)
 8001882:	f001 fcbf 	bl	8003204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4812      	ldr	r0, [pc, #72]	@ (80018e4 <HAL_CAN_MspInit+0xc8>)
 800189c:	f001 fcb2 	bl	8003204 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_CAN_MspInit+0xcc>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_CAN_MspInit+0xcc>)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2100      	movs	r1, #0
 80018c8:	2014      	movs	r0, #20
 80018ca:	f001 fa8c 	bl	8002de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80018ce:	2014      	movs	r0, #20
 80018d0:	f001 faa5 	bl	8002e1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	@ 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40006400 	.word	0x40006400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	40010000 	.word	0x40010000

080018ec <HAL_SPI_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if (hspi->Instance == SPI1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a47      	ldr	r2, [pc, #284]	@ (8001a24 <HAL_SPI_MspInit+0x138>)
 8001908:	4293      	cmp	r3, r2
 800190a:	f040 8087 	bne.w	8001a1c <HAL_SPI_MspInit+0x130>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190e:	4b46      	ldr	r3, [pc, #280]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a45      	ldr	r2, [pc, #276]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 8001914:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b40      	ldr	r3, [pc, #256]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6193      	str	r3, [r2, #24]
 8001932:	4b3d      	ldr	r3, [pc, #244]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a39      	ldr	r2, [pc, #228]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <HAL_SPI_MspInit+0x13c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800195a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4830      	ldr	r0, [pc, #192]	@ (8001a2c <HAL_SPI_MspInit+0x140>)
 800196c:	f001 fc4a 	bl	8003204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001970:	2308      	movs	r3, #8
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	482b      	ldr	r0, [pc, #172]	@ (8001a30 <HAL_SPI_MspInit+0x144>)
 8001984:	f001 fc3e 	bl	8003204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001988:	2330      	movs	r3, #48	@ 0x30
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4825      	ldr	r0, [pc, #148]	@ (8001a30 <HAL_SPI_MspInit+0x144>)
 800199c:	f001 fc32 	bl	8003204 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_SPI_MspInit+0x148>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <HAL_SPI_MspInit+0x148>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80019bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019be:	4a1f      	ldr	r2, [pc, #124]	@ (8001a3c <HAL_SPI_MspInit+0x150>)
 80019c0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019c4:	2210      	movs	r2, #16
 80019c6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_DISABLE;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019da:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019dc:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019e6:	2220      	movs	r2, #32
 80019e8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019f0:	4811      	ldr	r0, [pc, #68]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 80019f2:	f001 fa2f 	bl	8002e54 <HAL_DMA_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 80019fc:	f7ff fe92 	bl	8001724 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, hdma_spi1_tx);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 8001a04:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a06:	4a0c      	ldr	r2, [pc, #48]	@ (8001a38 <HAL_SPI_MspInit+0x14c>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2023      	movs	r0, #35	@ 0x23
 8001a12:	f001 f9e8 	bl	8002de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a16:	2023      	movs	r0, #35	@ 0x23
 8001a18:	f001 fa01 	bl	8002e1e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	@ 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40013000 	.word	0x40013000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	40010000 	.word	0x40010000
 8001a38:	20000278 	.word	0x20000278
 8001a3c:	40020030 	.word	0x40020030

08001a40 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
  if (htim_base->Instance == TIM1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a40      	ldr	r2, [pc, #256]	@ (8001b5c <HAL_TIM_Base_MspInit+0x11c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d13d      	bne.n	8001adc <HAL_TIM_Base_MspInit+0x9c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a60:	4b3f      	ldr	r3, [pc, #252]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a3e      	ldr	r2, [pc, #248]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001a66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a38      	ldr	r2, [pc, #224]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b36      	ldr	r3, [pc, #216]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8001a90:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0320 	add.w	r3, r7, #32
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	482f      	ldr	r0, [pc, #188]	@ (8001b64 <HAL_TIM_Base_MspInit+0x124>)
 8001aa6:	f001 fbad 	bl	8003204 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2019      	movs	r0, #25
 8001ab0:	f001 f999 	bl	8002de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ab4:	2019      	movs	r0, #25
 8001ab6:	f001 f9b2 	bl	8002e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201a      	movs	r0, #26
 8001ac0:	f001 f991 	bl	8002de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ac4:	201a      	movs	r0, #26
 8001ac6:	f001 f9aa 	bl	8002e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	201b      	movs	r0, #27
 8001ad0:	f001 f989 	bl	8002de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ad4:	201b      	movs	r0, #27
 8001ad6:	f001 f9a2 	bl	8002e1e <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ada:	e03a      	b.n	8001b52 <HAL_TIM_Base_MspInit+0x112>
  else if (htim_base->Instance == TIM3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <HAL_TIM_Base_MspInit+0x128>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10c      	bne.n	8001b00 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	61d3      	str	r3, [r2, #28]
 8001af2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
}
 8001afe:	e028      	b.n	8001b52 <HAL_TIM_Base_MspInit+0x112>
  else if (htim_base->Instance == TIM4)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_TIM_Base_MspInit+0x12c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d123      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_TIM_Base_MspInit+0x120>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b3a:	2340      	movs	r3, #64	@ 0x40
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4808      	ldr	r0, [pc, #32]	@ (8001b70 <HAL_TIM_Base_MspInit+0x130>)
 8001b4e:	f001 fb59 	bl	8003204 <HAL_GPIO_Init>
}
 8001b52:	bf00      	nop
 8001b54:	3730      	adds	r7, #48	@ 0x30
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010800 	.word	0x40010800
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	40010c00 	.word	0x40010c00

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <NMI_Handler+0x4>

08001b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc4:	f000 f8be 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <DMA1_Channel3_IRQHandler+0x10>)
 8001bd2:	f001 fa11 	bl	8002ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000278 	.word	0x20000278

08001be0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <ADC1_2_IRQHandler+0x10>)
 8001be6:	f000 f9ad 	bl	8001f44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200001c8 	.word	0x200001c8

08001bf4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001bf8:	4803      	ldr	r0, [pc, #12]	@ (8001c08 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8001bfa:	f000 fdf0 	bl	80027de <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bfe:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8001c00:	f001 fdd1 	bl	80037a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200001f8 	.word	0x200001f8
 8001c0c:	20001080 	.word	0x20001080

08001c10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <TIM1_UP_IRQHandler+0x10>)
 8001c16:	f004 f977 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200002bc 	.word	0x200002bc

08001c24 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001c2a:	f004 f96d 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200002bc 	.word	0x200002bc

08001c38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <TIM1_CC_IRQHandler+0x10>)
 8001c3e:	f004 f963 	bl	8005f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002bc 	.word	0x200002bc

08001c4c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <SPI1_IRQHandler+0x10>)
 8001c52:	f003 ff05 	bl	8005a60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000220 	.word	0x20000220

08001c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c6c:	f7ff fff8 	bl	8001c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c70:	480b      	ldr	r0, [pc, #44]	@ (8001ca0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c72:	490c      	ldr	r1, [pc, #48]	@ (8001ca4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a09      	ldr	r2, [pc, #36]	@ (8001cac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c88:	4c09      	ldr	r4, [pc, #36]	@ (8001cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f009 fdf3 	bl	800b880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c9a:	f7ff f9f1 	bl	8001080 <main>
  bx lr
 8001c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001ca8:	0800b95c 	.word	0x0800b95c
  ldr r2, =_sbss
 8001cac:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001cb0:	20001578 	.word	0x20001578

08001cb4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <CAN1_RX1_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <HAL_Init+0x28>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	@ (8001ce0 <HAL_Init+0x28>)
 8001cc2:	f043 0310 	orr.w	r3, r3, #16
 8001cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f001 f881 	bl	8002dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f000 f808 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff fd2c 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_InitTick+0x54>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0x58>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 f899 	bl	8002e3a <HAL_SYSTICK_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00e      	b.n	8001d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d80a      	bhi.n	8001d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f001 f861 	bl	8002de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4a06      	ldr	r2, [pc, #24]	@ (8001d40 <HAL_InitTick+0x5c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000004 	.word	0x20000004

08001d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_IncTick+0x1c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_IncTick+0x20>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a03      	ldr	r2, [pc, #12]	@ (8001d64 <HAL_IncTick+0x20>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	20000008 	.word	0x20000008
 8001d64:	200003b0 	.word	0x200003b0

08001d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b02      	ldr	r3, [pc, #8]	@ (8001d78 <HAL_GetTick+0x10>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	200003b0 	.word	0x200003b0

08001d7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0be      	b.n	8001f1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fcea 	bl	8001794 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fa7f 	bl	80022c4 <ADC_ConversionStop_Disable>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 8099 	bne.w	8001f0a <HAL_ADC_Init+0x18e>
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 8095 	bne.w	8001f0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001de8:	f023 0302 	bic.w	r3, r3, #2
 8001dec:	f043 0202 	orr.w	r2, r3, #2
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dfc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7b1b      	ldrb	r3, [r3, #12]
 8001e02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e14:	d003      	beq.n	8001e1e <HAL_ADC_Init+0xa2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_ADC_Init+0xa8>
 8001e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e22:	e000      	b.n	8001e26 <HAL_ADC_Init+0xaa>
 8001e24:	2300      	movs	r3, #0
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7d1b      	ldrb	r3, [r3, #20]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d119      	bne.n	8001e68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7b1b      	ldrb	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	035a      	lsls	r2, r3, #13
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e00b      	b.n	8001e68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b28      	ldr	r3, [pc, #160]	@ (8001f24 <HAL_ADC_Init+0x1a8>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e98:	d003      	beq.n	8001ea2 <HAL_ADC_Init+0x126>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d104      	bne.n	8001eac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	051b      	lsls	r3, r3, #20
 8001eaa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4b18      	ldr	r3, [pc, #96]	@ (8001f28 <HAL_ADC_Init+0x1ac>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d10b      	bne.n	8001ee8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	f023 0303 	bic.w	r3, r3, #3
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee6:	e018      	b.n	8001f1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	f023 0312 	bic.w	r3, r3, #18
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f08:	e007      	b.n	8001f1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	f043 0210 	orr.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	ffe1f7fd 	.word	0xffe1f7fd
 8001f28:	ff1f0efe 	.word	0xff1f0efe

08001f2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d03e      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d039      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f92:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f96:	d11d      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d119      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0220 	bic.w	r2, r2, #32
 8001fae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7fe ffc3 	bl	8000f60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f06f 0212 	mvn.w	r2, #18
 8001fe2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d04d      	beq.n	800208a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d048      	beq.n	800208a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002008:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800201a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800201e:	d012      	beq.n	8002046 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800202a:	2b00      	cmp	r3, #0
 800202c:	d125      	bne.n	800207a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002038:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800203c:	d11d      	bne.n	800207a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d119      	bne.n	800207a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002054:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f963 	bl	8002346 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 020c 	mvn.w	r2, #12
 8002088:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d012      	beq.n	80020ba <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f809 	bl	80020c2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0201 	mvn.w	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x20>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e0dc      	b.n	80022ae <HAL_ADC_ConfigChannel+0x1da>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b06      	cmp	r3, #6
 8002102:	d81c      	bhi.n	800213e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b05      	subs	r3, #5
 8002116:	221f      	movs	r2, #31
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	4019      	ands	r1, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b05      	subs	r3, #5
 8002130:	fa00 f203 	lsl.w	r2, r0, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34
 800213c:	e03c      	b.n	80021b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d81c      	bhi.n	8002180 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b23      	subs	r3, #35	@ 0x23
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	4019      	ands	r1, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b23      	subs	r3, #35	@ 0x23
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	631a      	str	r2, [r3, #48]	@ 0x30
 800217e:	e01b      	b.n	80021b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3b41      	subs	r3, #65	@ 0x41
 8002192:	221f      	movs	r2, #31
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	4019      	ands	r1, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b41      	subs	r3, #65	@ 0x41
 80021ac:	fa00 f203 	lsl.w	r2, r0, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b09      	cmp	r3, #9
 80021be:	d91c      	bls.n	80021fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68d9      	ldr	r1, [r3, #12]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3b1e      	subs	r3, #30
 80021d2:	2207      	movs	r2, #7
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	4019      	ands	r1, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6898      	ldr	r0, [r3, #8]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	e019      	b.n	800222e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6919      	ldr	r1, [r3, #16]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	2207      	movs	r2, #7
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	4019      	ands	r1, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6898      	ldr	r0, [r3, #8]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	fa00 f203 	lsl.w	r2, r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b10      	cmp	r3, #16
 8002234:	d003      	beq.n	800223e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800223a:	2b11      	cmp	r3, #17
 800223c:	d132      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d125      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d126      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002264:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b10      	cmp	r3, #16
 800226c:	d11a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226e:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9a      	lsrs	r2, r3, #18
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002284:	e002      	b.n	800228c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3b01      	subs	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x1b2>
 8002292:	e007      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40012400 	.word	0x40012400
 80022bc:	20000000 	.word	0x20000000
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d12e      	bne.n	800233c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ee:	f7ff fd3b 	bl	8001d68 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f4:	e01b      	b.n	800232e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022f6:	f7ff fd37 	bl	8001d68 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d914      	bls.n	800232e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10d      	bne.n	800232e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e007      	b.n	800233e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d0dc      	beq.n	80022f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0ed      	b.n	8002546 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fa50 	bl	800181c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7ff fcec 	bl	8001d68 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002392:	e012      	b.n	80023ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002394:	f7ff fce8 	bl	8001d68 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d90b      	bls.n	80023ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0c5      	b.n	8002546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0e5      	beq.n	8002394 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0202 	bic.w	r2, r2, #2
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7ff fcc6 	bl	8001d68 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023de:	e012      	b.n	8002406 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e0:	f7ff fcc2 	bl	8001d68 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d90b      	bls.n	8002406 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2205      	movs	r2, #5
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e09f      	b.n	8002546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e5      	bne.n	80023e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e1b      	ldrb	r3, [r3, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d108      	bne.n	800242e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7e5b      	ldrb	r3, [r3, #25]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e007      	b.n	8002468 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7e9b      	ldrb	r3, [r3, #26]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0220 	bic.w	r2, r2, #32
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7edb      	ldrb	r3, [r3, #27]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0210 	bic.w	r2, r2, #16
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e007      	b.n	80024bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0210 	orr.w	r2, r2, #16
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7f1b      	ldrb	r3, [r3, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0208 	orr.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7f5b      	ldrb	r3, [r3, #29]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0204 	orr.w	r2, r2, #4
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e007      	b.n	8002510 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0204 	bic.w	r2, r2, #4
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	ea42 0103 	orr.w	r1, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	1e5a      	subs	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800254e:	b480      	push	{r7}
 8002550:	b087      	sub	sp, #28
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002562:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d003      	beq.n	8002572 <HAL_CAN_GetRxMessage+0x24>
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b02      	cmp	r3, #2
 800256e:	f040 8103 	bne.w	8002778 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10e      	bne.n	8002596 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d116      	bne.n	80025b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0f7      	b.n	8002786 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0e8      	b.n	8002786 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	331b      	adds	r3, #27
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	4413      	add	r3, r2
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0204 	and.w	r2, r3, #4
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10c      	bne.n	80025ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	331b      	adds	r3, #27
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	4413      	add	r3, r2
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0d5b      	lsrs	r3, r3, #21
 80025e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e00b      	b.n	8002604 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	331b      	adds	r3, #27
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4413      	add	r3, r2
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	08db      	lsrs	r3, r3, #3
 80025fc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	331b      	adds	r3, #27
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	4413      	add	r3, r2
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0202 	and.w	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	331b      	adds	r3, #27
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	3304      	adds	r3, #4
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2208      	movs	r2, #8
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	e00b      	b.n	8002652 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	331b      	adds	r3, #27
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	3304      	adds	r3, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	331b      	adds	r3, #27
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	4413      	add	r3, r2
 800265e:	3304      	adds	r3, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	b2da      	uxtb	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	331b      	adds	r3, #27
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	4413      	add	r3, r2
 8002676:	3304      	adds	r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0c1b      	lsrs	r3, r3, #16
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4413      	add	r3, r2
 800268c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0a1a      	lsrs	r2, r3, #8
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	3301      	adds	r3, #1
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0c1a      	lsrs	r2, r3, #16
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	3302      	adds	r3, #2
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e1a      	lsrs	r2, r3, #24
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	3303      	adds	r3, #3
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	3304      	adds	r3, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	4413      	add	r3, r2
 8002708:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0a1a      	lsrs	r2, r3, #8
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3305      	adds	r3, #5
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	4413      	add	r3, r2
 8002722:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0c1a      	lsrs	r2, r3, #16
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	3306      	adds	r3, #6
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e1a      	lsrs	r2, r3, #24
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	3307      	adds	r3, #7
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	e007      	b.n	8002774 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e006      	b.n	8002786 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d002      	beq.n	80027b2 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d10f      	bne.n	80027d2 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e005      	b.n	80027d2 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80027d2:	68fb      	ldr	r3, [r7, #12]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b08a      	sub	sp, #40	@ 0x28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d07c      	beq.n	800291e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f983 	bl	8002b4c <HAL_CAN_TxMailbox0CompleteCallback>
 8002846:	e016      	b.n	8002876 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
 800285a:	e00c      	b.n	8002876 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
 800286e:	e002      	b.n	8002876 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f986 	bl	8002b82 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d024      	beq.n	80028ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f962 	bl	8002b5e <HAL_CAN_TxMailbox1CompleteCallback>
 800289a:	e016      	b.n	80028ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ae:	e00c      	b.n	80028ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	e002      	b.n	80028ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f965 	bl	8002b94 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d024      	beq.n	800291e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f941 	bl	8002b70 <HAL_CAN_TxMailbox2CompleteCallback>
 80028ee:	e016      	b.n	800291e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
 8002902:	e00c      	b.n	800291e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
 8002916:	e002      	b.n	800291e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f944 	bl	8002ba6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00c      	beq.n	8002942 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2210      	movs	r2, #16
 8002940:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2208      	movs	r2, #8
 800295c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f933 	bl	8002bca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f91b 	bl	8002bb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00c      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2210      	movs	r2, #16
 80029a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2208      	movs	r2, #8
 80029c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f913 	bl	8002bee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8fb 	bl	8002bdc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2210      	movs	r2, #16
 8002a00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8fc 	bl	8002c00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2208      	movs	r2, #8
 8002a22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f8f4 	bl	8002c12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d07b      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d072      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d043      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03e      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aac:	2b60      	cmp	r3, #96	@ 0x60
 8002aae:	d02b      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x32a>
 8002ab0:	2b60      	cmp	r3, #96	@ 0x60
 8002ab2:	d82e      	bhi.n	8002b12 <HAL_CAN_IRQHandler+0x334>
 8002ab4:	2b50      	cmp	r3, #80	@ 0x50
 8002ab6:	d022      	beq.n	8002afe <HAL_CAN_IRQHandler+0x320>
 8002ab8:	2b50      	cmp	r3, #80	@ 0x50
 8002aba:	d82a      	bhi.n	8002b12 <HAL_CAN_IRQHandler+0x334>
 8002abc:	2b40      	cmp	r3, #64	@ 0x40
 8002abe:	d019      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x316>
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d826      	bhi.n	8002b12 <HAL_CAN_IRQHandler+0x334>
 8002ac4:	2b30      	cmp	r3, #48	@ 0x30
 8002ac6:	d010      	beq.n	8002aea <HAL_CAN_IRQHandler+0x30c>
 8002ac8:	2b30      	cmp	r3, #48	@ 0x30
 8002aca:	d822      	bhi.n	8002b12 <HAL_CAN_IRQHandler+0x334>
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d002      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x2f8>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d005      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ad4:	e01d      	b.n	8002b12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ade:	e019      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	f043 0310 	orr.w	r3, r3, #16
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ae8:	e014      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002af2:	e00f      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002afc:	e00a      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b06:	e005      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b10:	e000      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002b22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f870 	bl	8002c24 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	@ 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
	...

08002c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6a:	4a04      	ldr	r2, [pc, #16]	@ (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	60d3      	str	r3, [r2, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c84:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <__NVIC_GetPriorityGrouping+0x18>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0307 	and.w	r3, r3, #7
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db0b      	blt.n	8002cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4906      	ldr	r1, [pc, #24]	@ (8002cd0 <__NVIC_EnableIRQ+0x34>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	@ (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
         );
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	@ 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d9c:	d301      	bcc.n	8002da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e00f      	b.n	8002dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <SysTick_Config+0x40>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002daa:	210f      	movs	r1, #15
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	f7ff ff90 	bl	8002cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <SysTick_Config+0x40>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dba:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <SysTick_Config+0x40>)
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	e000e010 	.word	0xe000e010

08002dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff2d 	bl	8002c38 <__NVIC_SetPriorityGrouping>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df8:	f7ff ff42 	bl	8002c80 <__NVIC_GetPriorityGrouping>
 8002dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f7ff ff90 	bl	8002d28 <NVIC_EncodePriority>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff5f 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002e16:	bf00      	nop
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff35 	bl	8002c9c <__NVIC_EnableIRQ>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff ffa2 	bl	8002d8c <SysTick_Config>
 8002e48:	4603      	mov	r3, r0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e043      	b.n	8002ef2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <HAL_DMA_Init+0xa8>)
 8002e72:	4413      	add	r3, r2
 8002e74:	4a22      	ldr	r2, [pc, #136]	@ (8002f00 <HAL_DMA_Init+0xac>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	009a      	lsls	r2, r3, #2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1f      	ldr	r2, [pc, #124]	@ (8002f04 <HAL_DMA_Init+0xb0>)
 8002e86:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e9e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ea2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	bffdfff8 	.word	0xbffdfff8
 8002f00:	cccccccd 	.word	0xcccccccd
 8002f04:	40020000 	.word	0x40020000

08002f08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d005      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2204      	movs	r2, #4
 8002f24:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e051      	b.n	8002fd0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 020e 	bic.w	r2, r2, #14
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	@ (8002fdc <HAL_DMA_Abort_IT+0xd4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d029      	beq.n	8002faa <HAL_DMA_Abort_IT+0xa2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	@ (8002fe0 <HAL_DMA_Abort_IT+0xd8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x9e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <HAL_DMA_Abort_IT+0xdc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01a      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x98>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe8 <HAL_DMA_Abort_IT+0xe0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d012      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x92>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <HAL_DMA_Abort_IT+0xe4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00a      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x8c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <HAL_DMA_Abort_IT+0xe8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d102      	bne.n	8002f8e <HAL_DMA_Abort_IT+0x86>
 8002f88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f8c:	e00e      	b.n	8002fac <HAL_DMA_Abort_IT+0xa4>
 8002f8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f92:	e00b      	b.n	8002fac <HAL_DMA_Abort_IT+0xa4>
 8002f94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f98:	e008      	b.n	8002fac <HAL_DMA_Abort_IT+0xa4>
 8002f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f9e:	e005      	b.n	8002fac <HAL_DMA_Abort_IT+0xa4>
 8002fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fa4:	e002      	b.n	8002fac <HAL_DMA_Abort_IT+0xa4>
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	e000      	b.n	8002fac <HAL_DMA_Abort_IT+0xa4>
 8002faa:	2301      	movs	r3, #1
 8002fac:	4a11      	ldr	r2, [pc, #68]	@ (8002ff4 <HAL_DMA_Abort_IT+0xec>)
 8002fae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
    } 
  }
  return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40020008 	.word	0x40020008
 8002fe0:	4002001c 	.word	0x4002001c
 8002fe4:	40020030 	.word	0x40020030
 8002fe8:	40020044 	.word	0x40020044
 8002fec:	40020058 	.word	0x40020058
 8002ff0:	4002006c 	.word	0x4002006c
 8002ff4:	40020000 	.word	0x40020000

08002ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	2204      	movs	r2, #4
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d04f      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xc8>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d04a      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a66      	ldr	r2, [pc, #408]	@ (80031e8 <HAL_DMA_IRQHandler+0x1f0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d029      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xae>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a65      	ldr	r2, [pc, #404]	@ (80031ec <HAL_DMA_IRQHandler+0x1f4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_IRQHandler+0xaa>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a63      	ldr	r2, [pc, #396]	@ (80031f0 <HAL_DMA_IRQHandler+0x1f8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01a      	beq.n	800309c <HAL_DMA_IRQHandler+0xa4>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a62      	ldr	r2, [pc, #392]	@ (80031f4 <HAL_DMA_IRQHandler+0x1fc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d012      	beq.n	8003096 <HAL_DMA_IRQHandler+0x9e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a60      	ldr	r2, [pc, #384]	@ (80031f8 <HAL_DMA_IRQHandler+0x200>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00a      	beq.n	8003090 <HAL_DMA_IRQHandler+0x98>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a5f      	ldr	r2, [pc, #380]	@ (80031fc <HAL_DMA_IRQHandler+0x204>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d102      	bne.n	800308a <HAL_DMA_IRQHandler+0x92>
 8003084:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003088:	e00e      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 800308a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800308e:	e00b      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 8003090:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003094:	e008      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 8003096:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800309a:	e005      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 800309c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030a0:	e002      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 80030a2:	2340      	movs	r3, #64	@ 0x40
 80030a4:	e000      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 80030a6:	2304      	movs	r3, #4
 80030a8:	4a55      	ldr	r2, [pc, #340]	@ (8003200 <HAL_DMA_IRQHandler+0x208>)
 80030aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8094 	beq.w	80031de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030be:	e08e      	b.n	80031de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	2202      	movs	r2, #2
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d056      	beq.n	800317e <HAL_DMA_IRQHandler+0x186>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d051      	beq.n	800317e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 020a 	bic.w	r2, r2, #10
 80030f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a38      	ldr	r2, [pc, #224]	@ (80031e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d029      	beq.n	800315e <HAL_DMA_IRQHandler+0x166>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a37      	ldr	r2, [pc, #220]	@ (80031ec <HAL_DMA_IRQHandler+0x1f4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_IRQHandler+0x162>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a35      	ldr	r2, [pc, #212]	@ (80031f0 <HAL_DMA_IRQHandler+0x1f8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01a      	beq.n	8003154 <HAL_DMA_IRQHandler+0x15c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a34      	ldr	r2, [pc, #208]	@ (80031f4 <HAL_DMA_IRQHandler+0x1fc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d012      	beq.n	800314e <HAL_DMA_IRQHandler+0x156>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a32      	ldr	r2, [pc, #200]	@ (80031f8 <HAL_DMA_IRQHandler+0x200>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00a      	beq.n	8003148 <HAL_DMA_IRQHandler+0x150>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a31      	ldr	r2, [pc, #196]	@ (80031fc <HAL_DMA_IRQHandler+0x204>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d102      	bne.n	8003142 <HAL_DMA_IRQHandler+0x14a>
 800313c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003140:	e00e      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 8003142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003146:	e00b      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 8003148:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800314c:	e008      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 800314e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003152:	e005      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 8003154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003158:	e002      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 800315a:	2320      	movs	r3, #32
 800315c:	e000      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 800315e:	2302      	movs	r3, #2
 8003160:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <HAL_DMA_IRQHandler+0x208>)
 8003162:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d034      	beq.n	80031de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800317c:	e02f      	b.n	80031de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	2208      	movs	r2, #8
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d028      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x1e8>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 020e 	bic.w	r2, r2, #14
 80031a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
    }
  }
  return;
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
}
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40020008 	.word	0x40020008
 80031ec:	4002001c 	.word	0x4002001c
 80031f0:	40020030 	.word	0x40020030
 80031f4:	40020044 	.word	0x40020044
 80031f8:	40020058 	.word	0x40020058
 80031fc:	4002006c 	.word	0x4002006c
 8003200:	40020000 	.word	0x40020000

08003204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003204:	b480      	push	{r7}
 8003206:	b08b      	sub	sp, #44	@ 0x2c
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003212:	2300      	movs	r3, #0
 8003214:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003216:	e169      	b.n	80034ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003218:	2201      	movs	r2, #1
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	429a      	cmp	r2, r3
 8003232:	f040 8158 	bne.w	80034e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a9a      	ldr	r2, [pc, #616]	@ (80034a4 <HAL_GPIO_Init+0x2a0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d05e      	beq.n	80032fe <HAL_GPIO_Init+0xfa>
 8003240:	4a98      	ldr	r2, [pc, #608]	@ (80034a4 <HAL_GPIO_Init+0x2a0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d875      	bhi.n	8003332 <HAL_GPIO_Init+0x12e>
 8003246:	4a98      	ldr	r2, [pc, #608]	@ (80034a8 <HAL_GPIO_Init+0x2a4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d058      	beq.n	80032fe <HAL_GPIO_Init+0xfa>
 800324c:	4a96      	ldr	r2, [pc, #600]	@ (80034a8 <HAL_GPIO_Init+0x2a4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d86f      	bhi.n	8003332 <HAL_GPIO_Init+0x12e>
 8003252:	4a96      	ldr	r2, [pc, #600]	@ (80034ac <HAL_GPIO_Init+0x2a8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d052      	beq.n	80032fe <HAL_GPIO_Init+0xfa>
 8003258:	4a94      	ldr	r2, [pc, #592]	@ (80034ac <HAL_GPIO_Init+0x2a8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d869      	bhi.n	8003332 <HAL_GPIO_Init+0x12e>
 800325e:	4a94      	ldr	r2, [pc, #592]	@ (80034b0 <HAL_GPIO_Init+0x2ac>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d04c      	beq.n	80032fe <HAL_GPIO_Init+0xfa>
 8003264:	4a92      	ldr	r2, [pc, #584]	@ (80034b0 <HAL_GPIO_Init+0x2ac>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d863      	bhi.n	8003332 <HAL_GPIO_Init+0x12e>
 800326a:	4a92      	ldr	r2, [pc, #584]	@ (80034b4 <HAL_GPIO_Init+0x2b0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d046      	beq.n	80032fe <HAL_GPIO_Init+0xfa>
 8003270:	4a90      	ldr	r2, [pc, #576]	@ (80034b4 <HAL_GPIO_Init+0x2b0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d85d      	bhi.n	8003332 <HAL_GPIO_Init+0x12e>
 8003276:	2b12      	cmp	r3, #18
 8003278:	d82a      	bhi.n	80032d0 <HAL_GPIO_Init+0xcc>
 800327a:	2b12      	cmp	r3, #18
 800327c:	d859      	bhi.n	8003332 <HAL_GPIO_Init+0x12e>
 800327e:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <HAL_GPIO_Init+0x80>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	080032ff 	.word	0x080032ff
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032eb 	.word	0x080032eb
 8003290:	0800332d 	.word	0x0800332d
 8003294:	08003333 	.word	0x08003333
 8003298:	08003333 	.word	0x08003333
 800329c:	08003333 	.word	0x08003333
 80032a0:	08003333 	.word	0x08003333
 80032a4:	08003333 	.word	0x08003333
 80032a8:	08003333 	.word	0x08003333
 80032ac:	08003333 	.word	0x08003333
 80032b0:	08003333 	.word	0x08003333
 80032b4:	08003333 	.word	0x08003333
 80032b8:	08003333 	.word	0x08003333
 80032bc:	08003333 	.word	0x08003333
 80032c0:	08003333 	.word	0x08003333
 80032c4:	08003333 	.word	0x08003333
 80032c8:	080032e1 	.word	0x080032e1
 80032cc:	080032f5 	.word	0x080032f5
 80032d0:	4a79      	ldr	r2, [pc, #484]	@ (80034b8 <HAL_GPIO_Init+0x2b4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032d6:	e02c      	b.n	8003332 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	623b      	str	r3, [r7, #32]
          break;
 80032de:	e029      	b.n	8003334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	3304      	adds	r3, #4
 80032e6:	623b      	str	r3, [r7, #32]
          break;
 80032e8:	e024      	b.n	8003334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	3308      	adds	r3, #8
 80032f0:	623b      	str	r3, [r7, #32]
          break;
 80032f2:	e01f      	b.n	8003334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	330c      	adds	r3, #12
 80032fa:	623b      	str	r3, [r7, #32]
          break;
 80032fc:	e01a      	b.n	8003334 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003306:	2304      	movs	r3, #4
 8003308:	623b      	str	r3, [r7, #32]
          break;
 800330a:	e013      	b.n	8003334 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003314:	2308      	movs	r3, #8
 8003316:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	611a      	str	r2, [r3, #16]
          break;
 800331e:	e009      	b.n	8003334 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003320:	2308      	movs	r3, #8
 8003322:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	615a      	str	r2, [r3, #20]
          break;
 800332a:	e003      	b.n	8003334 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
          break;
 8003330:	e000      	b.n	8003334 <HAL_GPIO_Init+0x130>
          break;
 8003332:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2bff      	cmp	r3, #255	@ 0xff
 8003338:	d801      	bhi.n	800333e <HAL_GPIO_Init+0x13a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	e001      	b.n	8003342 <HAL_GPIO_Init+0x13e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2bff      	cmp	r3, #255	@ 0xff
 8003348:	d802      	bhi.n	8003350 <HAL_GPIO_Init+0x14c>
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	e002      	b.n	8003356 <HAL_GPIO_Init+0x152>
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	3b08      	subs	r3, #8
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	210f      	movs	r1, #15
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	401a      	ands	r2, r3
 8003368:	6a39      	ldr	r1, [r7, #32]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	431a      	orrs	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80b1 	beq.w	80034e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003384:	4b4d      	ldr	r3, [pc, #308]	@ (80034bc <HAL_GPIO_Init+0x2b8>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4a4c      	ldr	r2, [pc, #304]	@ (80034bc <HAL_GPIO_Init+0x2b8>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6193      	str	r3, [r2, #24]
 8003390:	4b4a      	ldr	r3, [pc, #296]	@ (80034bc <HAL_GPIO_Init+0x2b8>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800339c:	4a48      	ldr	r2, [pc, #288]	@ (80034c0 <HAL_GPIO_Init+0x2bc>)
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	3302      	adds	r3, #2
 80033a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	220f      	movs	r2, #15
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a40      	ldr	r2, [pc, #256]	@ (80034c4 <HAL_GPIO_Init+0x2c0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_GPIO_Init+0x1ec>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3f      	ldr	r2, [pc, #252]	@ (80034c8 <HAL_GPIO_Init+0x2c4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00d      	beq.n	80033ec <HAL_GPIO_Init+0x1e8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3e      	ldr	r2, [pc, #248]	@ (80034cc <HAL_GPIO_Init+0x2c8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <HAL_GPIO_Init+0x1e4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3d      	ldr	r2, [pc, #244]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <HAL_GPIO_Init+0x1e0>
 80033e0:	2303      	movs	r3, #3
 80033e2:	e006      	b.n	80033f2 <HAL_GPIO_Init+0x1ee>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e004      	b.n	80033f2 <HAL_GPIO_Init+0x1ee>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e002      	b.n	80033f2 <HAL_GPIO_Init+0x1ee>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_GPIO_Init+0x1ee>
 80033f0:	2300      	movs	r3, #0
 80033f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f4:	f002 0203 	and.w	r2, r2, #3
 80033f8:	0092      	lsls	r2, r2, #2
 80033fa:	4093      	lsls	r3, r2
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003402:	492f      	ldr	r1, [pc, #188]	@ (80034c0 <HAL_GPIO_Init+0x2bc>)
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d006      	beq.n	800342a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800341c:	4b2d      	ldr	r3, [pc, #180]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	492c      	ldr	r1, [pc, #176]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]
 8003428:	e006      	b.n	8003438 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800342a:	4b2a      	ldr	r3, [pc, #168]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	43db      	mvns	r3, r3
 8003432:	4928      	ldr	r1, [pc, #160]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003434:	4013      	ands	r3, r2
 8003436:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d006      	beq.n	8003452 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003444:	4b23      	ldr	r3, [pc, #140]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	4922      	ldr	r1, [pc, #136]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	60cb      	str	r3, [r1, #12]
 8003450:	e006      	b.n	8003460 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003452:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	43db      	mvns	r3, r3
 800345a:	491e      	ldr	r1, [pc, #120]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 800345c:	4013      	ands	r3, r2
 800345e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800346c:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4918      	ldr	r1, [pc, #96]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	e006      	b.n	8003488 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800347a:	4b16      	ldr	r3, [pc, #88]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	43db      	mvns	r3, r3
 8003482:	4914      	ldr	r1, [pc, #80]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003484:	4013      	ands	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d021      	beq.n	80034d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003494:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	490e      	ldr	r1, [pc, #56]	@ (80034d4 <HAL_GPIO_Init+0x2d0>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]
 80034a0:	e021      	b.n	80034e6 <HAL_GPIO_Init+0x2e2>
 80034a2:	bf00      	nop
 80034a4:	10320000 	.word	0x10320000
 80034a8:	10310000 	.word	0x10310000
 80034ac:	10220000 	.word	0x10220000
 80034b0:	10210000 	.word	0x10210000
 80034b4:	10120000 	.word	0x10120000
 80034b8:	10110000 	.word	0x10110000
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40010800 	.word	0x40010800
 80034c8:	40010c00 	.word	0x40010c00
 80034cc:	40011000 	.word	0x40011000
 80034d0:	40011400 	.word	0x40011400
 80034d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_GPIO_Init+0x304>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	43db      	mvns	r3, r3
 80034e0:	4909      	ldr	r1, [pc, #36]	@ (8003508 <HAL_GPIO_Init+0x304>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	3301      	adds	r3, #1
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f47f ae8e 	bne.w	8003218 <HAL_GPIO_Init+0x14>
  }
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	372c      	adds	r7, #44	@ 0x2c
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40010400 	.word	0x40010400

0800350c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
 8003518:	4613      	mov	r3, r2
 800351a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800351c:	787b      	ldrb	r3, [r7, #1]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003528:	e003      	b.n	8003532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800352a:	887b      	ldrh	r3, [r7, #2]
 800352c:	041a      	lsls	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4013      	ands	r3, r2
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43d9      	mvns	r1, r3
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	400b      	ands	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0e8      	b.n	8003752 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f007 fec1 	bl	800b31c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2203      	movs	r2, #3
 800359e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fe2c 	bl	800720a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035bc:	f003 fe02 	bl	80071c4 <USB_CoreInit>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0bf      	b.n	8003752 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 fe30 	bl	800723e <USB_SetCurrentMode>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b0      	b.n	8003752 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e03e      	b.n	8003674 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	3311      	adds	r3, #17
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3310      	adds	r3, #16
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	3313      	adds	r3, #19
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	3320      	adds	r3, #32
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	3324      	adds	r3, #36	@ 0x24
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	3301      	adds	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	791b      	ldrb	r3, [r3, #4]
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	429a      	cmp	r2, r3
 800367c:	d3bb      	bcc.n	80035f6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e044      	b.n	800370e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	440b      	add	r3, r1
 8003692:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	440b      	add	r3, r1
 8003700:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	3301      	adds	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	791b      	ldrb	r3, [r3, #4]
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	429a      	cmp	r2, r3
 8003716:	d3b5      	bcc.n	8003684 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003722:	f003 fd98 	bl	8007256 <USB_DevInit>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e00c      	b.n	8003752 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f006 f817 	bl	800977e <USB_DevDisconnect>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_PCD_Start+0x16>
 800376c:	2302      	movs	r3, #2
 800376e:	e016      	b.n	800379e <HAL_PCD_Start+0x44>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f003 fd2e 	bl	80071de <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003782:	2101      	movs	r1, #1
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f008 f83c 	bl	800b802 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f005 ffeb 	bl	800976a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b088      	sub	sp, #32
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f005 ffed 	bl	8009792 <USB_ReadInterrupts>
 80037b8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fb1a 	bl	8003dfe <PCD_EP_ISR_Handler>

    return;
 80037ca:	e119      	b.n	8003a00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e8:	b292      	uxth	r2, r2
 80037ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f007 fe0f 	bl	800b412 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037f4:	2100      	movs	r1, #0
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f905 	bl	8003a06 <HAL_PCD_SetAddress>

    return;
 80037fc:	e100      	b.n	8003a00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00c      	beq.n	8003822 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800381a:	b292      	uxth	r2, r2
 800381c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003820:	e0ee      	b.n	8003a00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00c      	beq.n	8003846 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800383e:	b292      	uxth	r2, r2
 8003840:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003844:	e0dc      	b.n	8003a00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d027      	beq.n	80038a0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0204 	bic.w	r2, r2, #4
 8003862:	b292      	uxth	r2, r2
 8003864:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003870:	b29a      	uxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0208 	bic.w	r2, r2, #8
 800387a:	b292      	uxth	r2, r2
 800387c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f007 fdff 	bl	800b484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003898:	b292      	uxth	r2, r2
 800389a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800389e:	e0af      	b.n	8003a00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8083 	beq.w	80039b2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e010      	b.n	80038d4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	7ffb      	ldrb	r3, [r7, #31]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	8812      	ldrh	r2, [r2, #0]
 80038c2:	b292      	uxth	r2, r2
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	3320      	adds	r3, #32
 80038c8:	443b      	add	r3, r7
 80038ca:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80038ce:	7ffb      	ldrb	r3, [r7, #31]
 80038d0:	3301      	adds	r3, #1
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	7ffb      	ldrb	r3, [r7, #31]
 80038d6:	2b07      	cmp	r3, #7
 80038d8:	d9eb      	bls.n	80038b2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	b292      	uxth	r2, r2
 80038ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	b292      	uxth	r2, r2
 8003906:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800390a:	bf00      	nop
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003914:	b29b      	uxth	r3, r3
 8003916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f6      	beq.n	800390c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003930:	b292      	uxth	r2, r2
 8003932:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e00f      	b.n	800395c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800393c:	7ffb      	ldrb	r3, [r7, #31]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	4611      	mov	r1, r2
 8003944:	7ffa      	ldrb	r2, [r7, #31]
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	440a      	add	r2, r1
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	3320      	adds	r3, #32
 800394e:	443b      	add	r3, r7
 8003950:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003954:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003956:	7ffb      	ldrb	r3, [r7, #31]
 8003958:	3301      	adds	r3, #1
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	7ffb      	ldrb	r3, [r7, #31]
 800395e:	2b07      	cmp	r3, #7
 8003960:	d9ec      	bls.n	800393c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800396a:	b29a      	uxth	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0208 	orr.w	r2, r2, #8
 8003974:	b292      	uxth	r2, r2
 8003976:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800398c:	b292      	uxth	r2, r2
 800398e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0204 	orr.w	r2, r2, #4
 80039a4:	b292      	uxth	r2, r2
 80039a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f007 fd50 	bl	800b450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039b0:	e026      	b.n	8003a00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00f      	beq.n	80039dc <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039ce:	b292      	uxth	r2, r2
 80039d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f007 fd0e 	bl	800b3f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039da:	e011      	b.n	8003a00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039f8:	b292      	uxth	r2, r2
 80039fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039fe:	bf00      	nop
  }
}
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_PCD_SetAddress+0x1a>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e012      	b.n	8003a46 <HAL_PCD_SetAddress+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f005 fe84 	bl	8009744 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	4608      	mov	r0, r1
 8003a58:	4611      	mov	r1, r2
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	70fb      	strb	r3, [r7, #3]
 8003a60:	460b      	mov	r3, r1
 8003a62:	803b      	strh	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	da0e      	bge.n	8003a92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	3310      	adds	r3, #16
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	705a      	strb	r2, [r3, #1]
 8003a90:	e00e      	b.n	8003ab0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 0207 	and.w	r2, r3, #7
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003abc:	883a      	ldrh	r2, [r7, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	78ba      	ldrb	r2, [r7, #2]
 8003ac6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ac8:	78bb      	ldrb	r3, [r7, #2]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d102      	bne.n	8003ad4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_PCD_EP_Open+0x94>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e00e      	b.n	8003b00 <HAL_PCD_EP_Open+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68f9      	ldr	r1, [r7, #12]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f003 fbcd 	bl	8007290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003afe:	7afb      	ldrb	r3, [r7, #11]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	da0e      	bge.n	8003b3a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	f003 0207 	and.w	r2, r3, #7
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	3310      	adds	r3, #16
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	705a      	strb	r2, [r3, #1]
 8003b38:	e00e      	b.n	8003b58 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 0207 	and.w	r2, r3, #7
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_PCD_EP_Close+0x6a>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e00e      	b.n	8003b90 <HAL_PCD_EP_Close+0x88>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 ff45 	bl	8007a10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
 8003baa:	f003 0207 	and.w	r2, r3, #7
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 f8fc 	bl	8007de8 <USB_EPStartXfer>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	f003 0207 	and.w	r2, r3, #7
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	440b      	add	r3, r1
 8003c18:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003c1c:	681b      	ldr	r3, [r3, #0]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	460b      	mov	r3, r1
 8003c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c38:	7afb      	ldrb	r3, [r7, #11]
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	3310      	adds	r3, #16
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2201      	movs	r2, #1
 8003c72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 f8ae 	bl	8007de8 <USB_EPStartXfer>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	7912      	ldrb	r2, [r2, #4]
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e04c      	b.n	8003d4e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	da0e      	bge.n	8003cda <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 0207 	and.w	r2, r3, #7
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	3310      	adds	r3, #16
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	705a      	strb	r2, [r3, #1]
 8003cd8:	e00c      	b.n	8003cf4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_PCD_EP_SetStall+0x7e>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e01c      	b.n	8003d4e <HAL_PCD_EP_SetStall+0xb8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f005 fc11 	bl	800954a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d108      	bne.n	8003d44 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f005 fd36 	bl	80097b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	7912      	ldrb	r2, [r2, #4]
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e040      	b.n	8003df6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	da0e      	bge.n	8003d9a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 0207 	and.w	r2, r3, #7
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	3310      	adds	r3, #16
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	705a      	strb	r2, [r3, #1]
 8003d98:	e00e      	b.n	8003db8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f003 0207 	and.w	r2, r3, #7
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_PCD_EP_ClrStall+0x82>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e00e      	b.n	8003df6 <HAL_PCD_EP_ClrStall+0xa0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68f9      	ldr	r1, [r7, #12]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f005 fbff 	bl	80095ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b096      	sub	sp, #88	@ 0x58
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e06:	e3bb      	b.n	8004580 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e10:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003e22:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 8175 	bne.w	8004116 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d14e      	bne.n	8003ed6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e48:	81fb      	strh	r3, [r7, #14]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3310      	adds	r3, #16
 8003e60:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	3302      	adds	r3, #2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	441a      	add	r2, r3
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f007 fa8f 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7b5b      	ldrb	r3, [r3, #13]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8368 	beq.w	8004580 <PCD_EP_ISR_Handler+0x782>
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 8363 	bne.w	8004580 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7b5b      	ldrb	r3, [r3, #13]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	735a      	strb	r2, [r3, #13]
 8003ed4:	e354      	b.n	8004580 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003edc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ee8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d034      	beq.n	8003f5e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	3306      	adds	r3, #6
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f30:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f005 fc8d 	bl	8009852 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f44:	4013      	ands	r3, r2
 8003f46:	823b      	strh	r3, [r7, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	8a3a      	ldrh	r2, [r7, #16]
 8003f4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f52:	b292      	uxth	r2, r2
 8003f54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f007 fa06 	bl	800b368 <HAL_PCD_SetupStageCallback>
 8003f5c:	e310      	b.n	8004580 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f5e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f280 830c 	bge.w	8004580 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f74:	4013      	ands	r3, r2
 8003f76:	83fb      	strh	r3, [r7, #30]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	8bfa      	ldrh	r2, [r7, #30]
 8003f7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f82:	b292      	uxth	r2, r2
 8003f84:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	3306      	adds	r3, #6
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d019      	beq.n	8003fee <PCD_EP_ISR_Handler+0x1f0>
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d015      	beq.n	8003fee <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc8:	6959      	ldr	r1, [r3, #20]
 8003fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fcc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f005 fc3d 	bl	8009852 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	441a      	add	r2, r3
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f007 f9cf 	bl	800b38c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ff8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 82bd 	bne.w	8004580 <PCD_EP_ISR_Handler+0x782>
 8004006:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800400a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800400e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004012:	f000 82b5 	beq.w	8004580 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004024:	b29b      	uxth	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	4413      	add	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004040:	b29a      	uxth	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b3e      	cmp	r3, #62	@ 0x3e
 800404c:	d91d      	bls.n	800408a <PCD_EP_ISR_Handler+0x28c>
 800404e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	647b      	str	r3, [r7, #68]	@ 0x44
 8004056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <PCD_EP_ISR_Handler+0x26a>
 8004062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004064:	3b01      	subs	r3, #1
 8004066:	647b      	str	r3, [r7, #68]	@ 0x44
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29a      	uxth	r2, r3
 800406e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004070:	b29b      	uxth	r3, r3
 8004072:	029b      	lsls	r3, r3, #10
 8004074:	b29b      	uxth	r3, r3
 8004076:	4313      	orrs	r3, r2
 8004078:	b29b      	uxth	r3, r3
 800407a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004082:	b29a      	uxth	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	801a      	strh	r2, [r3, #0]
 8004088:	e026      	b.n	80040d8 <PCD_EP_ISR_Handler+0x2da>
 800408a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <PCD_EP_ISR_Handler+0x2aa>
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	e017      	b.n	80040d8 <PCD_EP_ISR_Handler+0x2da>
 80040a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80040b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <PCD_EP_ISR_Handler+0x2c4>
 80040bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040be:	3301      	adds	r3, #1
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	029b      	lsls	r3, r3, #10
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e8:	827b      	strh	r3, [r7, #18]
 80040ea:	8a7b      	ldrh	r3, [r7, #18]
 80040ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80040f0:	827b      	strh	r3, [r7, #18]
 80040f2:	8a7b      	ldrh	r3, [r7, #18]
 80040f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040f8:	827b      	strh	r3, [r7, #18]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	8a7b      	ldrh	r3, [r7, #18]
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800410c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]
 8004114:	e234      	b.n	8004580 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800412a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800412e:	2b00      	cmp	r3, #0
 8004130:	f280 80fc 	bge.w	800432c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29a      	uxth	r2, r3
 8004146:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800414a:	4013      	ands	r3, r2
 800414c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004162:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004166:	b292      	uxth	r2, r2
 8004168:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800416a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004182:	7b1b      	ldrb	r3, [r3, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d125      	bne.n	80041d4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004190:	b29b      	uxth	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	3306      	adds	r3, #6
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80041b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8092 	beq.w	80042e2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c4:	6959      	ldr	r1, [r3, #20]
 80041c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c8:	88da      	ldrh	r2, [r3, #6]
 80041ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041ce:	f005 fb40 	bl	8009852 <USB_ReadPMA>
 80041d2:	e086      	b.n	80042e2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80041d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d6:	78db      	ldrb	r3, [r3, #3]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d10a      	bne.n	80041f2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80041dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041e0:	461a      	mov	r2, r3
 80041e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f9d9 	bl	800459c <HAL_PCD_EP_DB_Receive>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80041f0:	e077      	b.n	80042e2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800422e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d024      	beq.n	800429a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004258:	b29b      	uxth	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	3302      	adds	r3, #2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004278:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800427c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02e      	beq.n	80042e2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428a:	6959      	ldr	r1, [r3, #20]
 800428c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428e:	891a      	ldrh	r2, [r3, #8]
 8004290:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004294:	f005 fadd 	bl	8009852 <USB_ReadPMA>
 8004298:	e023      	b.n	80042e2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	3306      	adds	r3, #6
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80042c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d4:	6959      	ldr	r1, [r3, #20]
 80042d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d8:	895a      	ldrh	r2, [r3, #10]
 80042da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042de:	f005 fab8 	bl	8009852 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042ea:	441a      	add	r2, r3
 80042ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042f8:	441a      	add	r2, r3
 80042fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <PCD_EP_ISR_Handler+0x514>
 8004306:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800430a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d206      	bcs.n	8004320 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f007 f837 	bl	800b38c <HAL_PCD_DataOutStageCallback>
 800431e:	e005      	b.n	800432c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004326:	4618      	mov	r0, r3
 8004328:	f003 fd5e 	bl	8007de8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800432c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8123 	beq.w	8004580 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800433a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	3310      	adds	r3, #16
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004368:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800437e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004386:	b29b      	uxth	r3, r3
 8004388:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800438a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438c:	78db      	ldrb	r3, [r3, #3]
 800438e:	2b01      	cmp	r3, #1
 8004390:	f040 80a2 	bne.w	80044d8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004396:	2200      	movs	r2, #0
 8004398:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800439a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439c:	7b1b      	ldrb	r3, [r3, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8093 	beq.w	80044ca <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d046      	beq.n	800443e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b2:	785b      	ldrb	r3, [r3, #1]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d126      	bne.n	8004406 <PCD_EP_ISR_Handler+0x608>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	461a      	mov	r2, r3
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	4413      	add	r3, r2
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	011a      	lsls	r2, r3, #4
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	4413      	add	r3, r2
 80043da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fe:	b29a      	uxth	r2, r3
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	e061      	b.n	80044ca <PCD_EP_ISR_Handler+0x6cc>
 8004406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d15d      	bne.n	80044ca <PCD_EP_ISR_Handler+0x6cc>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800441c:	b29b      	uxth	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004422:	4413      	add	r3, r2
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	011a      	lsls	r2, r3, #4
 800442c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442e:	4413      	add	r3, r2
 8004430:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004438:	2200      	movs	r2, #0
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	e045      	b.n	80044ca <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d126      	bne.n	800449a <PCD_EP_ISR_Handler+0x69c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	637b      	str	r3, [r7, #52]	@ 0x34
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004460:	4413      	add	r3, r2
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
 8004464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	011a      	lsls	r2, r3, #4
 800446a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446c:	4413      	add	r3, r2
 800446e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004472:	633b      	str	r3, [r7, #48]	@ 0x30
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447e:	b29a      	uxth	r2, r3
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800448e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004492:	b29a      	uxth	r2, r3
 8004494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	e017      	b.n	80044ca <PCD_EP_ISR_Handler+0x6cc>
 800449a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d113      	bne.n	80044ca <PCD_EP_ISR_Handler+0x6cc>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b0:	4413      	add	r3, r2
 80044b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	011a      	lsls	r2, r3, #4
 80044ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044bc:	4413      	add	r3, r2
 80044be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c6:	2200      	movs	r2, #0
 80044c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f006 ff76 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
 80044d6:	e053      	b.n	8004580 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80044d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d146      	bne.n	8004572 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	3302      	adds	r3, #2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004518:	429a      	cmp	r2, r3
 800451a:	d907      	bls.n	800452c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800451c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004524:	1ad2      	subs	r2, r2, r3
 8004526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004528:	619a      	str	r2, [r3, #24]
 800452a:	e002      	b.n	8004532 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800452c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452e:	2200      	movs	r2, #0
 8004530:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800453a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f006 ff3e 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
 8004546:	e01b      	b.n	8004580 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004550:	441a      	add	r2, r3
 8004552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004554:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800455e:	441a      	add	r2, r3
 8004560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004562:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800456a:	4618      	mov	r0, r3
 800456c:	f003 fc3c 	bl	8007de8 <USB_EPStartXfer>
 8004570:	e006      	b.n	8004580 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004572:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004576:	461a      	mov	r2, r3
 8004578:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f91b 	bl	80047b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004588:	b29b      	uxth	r3, r3
 800458a:	b21b      	sxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	f6ff ac3b 	blt.w	8003e08 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3758      	adds	r7, #88	@ 0x58
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d07e      	beq.n	80046b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045bc:	b29b      	uxth	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	3302      	adds	r3, #2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	8b7b      	ldrh	r3, [r7, #26]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d306      	bcc.n	80045f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	699a      	ldr	r2, [r3, #24]
 80045ec:	8b7b      	ldrh	r3, [r7, #26]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	619a      	str	r2, [r3, #24]
 80045f4:	e002      	b.n	80045fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d123      	bne.n	800464c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800461a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461e:	833b      	strh	r3, [r7, #24]
 8004620:	8b3b      	ldrh	r3, [r7, #24]
 8004622:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004626:	833b      	strh	r3, [r7, #24]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	8b3b      	ldrh	r3, [r7, #24]
 8004638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800463c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004648:	b29b      	uxth	r3, r3
 800464a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01f      	beq.n	8004696 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004670:	82fb      	strh	r3, [r7, #22]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	8afb      	ldrh	r3, [r7, #22]
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800468a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800468e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004696:	8b7b      	ldrh	r3, [r7, #26]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8087 	beq.w	80047ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6959      	ldr	r1, [r3, #20]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	891a      	ldrh	r2, [r3, #8]
 80046aa:	8b7b      	ldrh	r3, [r7, #26]
 80046ac:	f005 f8d1 	bl	8009852 <USB_ReadPMA>
 80046b0:	e07c      	b.n	80047ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	3306      	adds	r3, #6
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	8b7b      	ldrh	r3, [r7, #26]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d306      	bcc.n	80046f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	8b7b      	ldrh	r3, [r7, #26]
 80046ec:	1ad2      	subs	r2, r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	619a      	str	r2, [r3, #24]
 80046f2:	e002      	b.n	80046fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d123      	bne.n	800474a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471c:	83fb      	strh	r3, [r7, #30]
 800471e:	8bfb      	ldrh	r3, [r7, #30]
 8004720:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004724:	83fb      	strh	r3, [r7, #30]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	8bfb      	ldrh	r3, [r7, #30]
 8004736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800473a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11f      	bne.n	8004794 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800476a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476e:	83bb      	strh	r3, [r7, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	8bbb      	ldrh	r3, [r7, #28]
 8004780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800478c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004790:	b29b      	uxth	r3, r3
 8004792:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004794:	8b7b      	ldrh	r3, [r7, #26]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6959      	ldr	r1, [r3, #20]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	895a      	ldrh	r2, [r3, #10]
 80047a6:	8b7b      	ldrh	r3, [r7, #26]
 80047a8:	f005 f853 	bl	8009852 <USB_ReadPMA>
    }
  }

  return count;
 80047ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b0a4      	sub	sp, #144	@ 0x90
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	4613      	mov	r3, r2
 80047c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 81dd 	beq.w	8004b8a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d8:	b29b      	uxth	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	3302      	adds	r3, #2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004804:	429a      	cmp	r2, r3
 8004806:	d907      	bls.n	8004818 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004810:	1ad2      	subs	r2, r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	619a      	str	r2, [r3, #24]
 8004816:	e002      	b.n	800481e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 80b9 	bne.w	800499a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d126      	bne.n	800487e <HAL_PCD_EP_DB_Transmit+0xc8>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004844:	4413      	add	r3, r2
 8004846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	011a      	lsls	r2, r3, #4
 800484e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004850:	4413      	add	r3, r2
 8004852:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004856:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004862:	b29a      	uxth	r2, r3
 8004864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004876:	b29a      	uxth	r2, r3
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	801a      	strh	r2, [r3, #0]
 800487c:	e01a      	b.n	80048b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d116      	bne.n	80048b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	637b      	str	r3, [r7, #52]	@ 0x34
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004894:	b29b      	uxth	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489a:	4413      	add	r3, r2
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	011a      	lsls	r2, r3, #4
 80048a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b0:	2200      	movs	r2, #0
 80048b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	785b      	ldrb	r3, [r3, #1]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d126      	bne.n	8004910 <HAL_PCD_EP_DB_Transmit+0x15a>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	011a      	lsls	r2, r3, #4
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004908:	b29a      	uxth	r2, r3
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	e017      	b.n	8004940 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	785b      	ldrb	r3, [r3, #1]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d113      	bne.n	8004940 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	4413      	add	r3, r2
 8004928:	627b      	str	r3, [r7, #36]	@ 0x24
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	011a      	lsls	r2, r3, #4
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	4413      	add	r3, r2
 8004934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	2200      	movs	r2, #0
 800493e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	4619      	mov	r1, r3
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f006 fd3b 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 82fc 	beq.w	8004f50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	82fb      	strh	r3, [r7, #22]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800498c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]
 8004998:	e2da      	b.n	8004f50 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d021      	beq.n	80049e8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049be:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	441a      	add	r2, r3
 80049d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80049d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f040 82ae 	bne.w	8004f50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049fc:	441a      	add	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a0a:	441a      	add	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6a1a      	ldr	r2, [r3, #32]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d30b      	bcc.n	8004a34 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a2c:	1ad2      	subs	r2, r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	621a      	str	r2, [r3, #32]
 8004a32:	e017      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d108      	bne.n	8004a4e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004a3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a4c:	e00a      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2200      	movs	r2, #0
 8004a62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d165      	bne.n	8004b38 <HAL_PCD_EP_DB_Transmit+0x382>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a80:	4413      	add	r3, r2
 8004a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	011a      	lsls	r2, r3, #4
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004aaa:	d91d      	bls.n	8004ae8 <HAL_PCD_EP_DB_Transmit+0x332>
 8004aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <HAL_PCD_EP_DB_Transmit+0x310>
 8004ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	029b      	lsls	r3, r3, #10
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	e044      	b.n	8004b72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_PCD_EP_DB_Transmit+0x350>
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e035      	b.n	8004b72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	e01c      	b.n	8004b72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d118      	bne.n	8004b72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b54:	4413      	add	r3, r2
 8004b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	011a      	lsls	r2, r3, #4
 8004b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b60:	4413      	add	r3, r2
 8004b62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b66:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6959      	ldr	r1, [r3, #20]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	891a      	ldrh	r2, [r3, #8]
 8004b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f004 fe1f 	bl	80097c6 <USB_WritePMA>
 8004b88:	e1e2      	b.n	8004f50 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3306      	adds	r3, #6
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d307      	bcc.n	8004bd2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	619a      	str	r2, [r3, #24]
 8004bd0:	e002      	b.n	8004bd8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 80c0 	bne.w	8004d62 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d126      	bne.n	8004c38 <HAL_PCD_EP_DB_Transmit+0x482>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bfe:	4413      	add	r3, r2
 8004c00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	011a      	lsls	r2, r3, #4
 8004c08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c20:	801a      	strh	r2, [r3, #0]
 8004c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c34:	801a      	strh	r2, [r3, #0]
 8004c36:	e01a      	b.n	8004c6e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d116      	bne.n	8004c6e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c54:	4413      	add	r3, r2
 8004c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	011a      	lsls	r2, r3, #4
 8004c5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c60:	4413      	add	r3, r2
 8004c62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d12b      	bne.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c90:	4413      	add	r3, r2
 8004c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	011a      	lsls	r2, r3, #4
 8004c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ca2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ca6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	e017      	b.n	8004d04 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d113      	bne.n	8004d04 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cea:	4413      	add	r3, r2
 8004cec:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	011a      	lsls	r2, r3, #4
 8004cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d00:	2200      	movs	r2, #0
 8004d02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f006 fb59 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 811a 	bne.w	8004f50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d36:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]
 8004d60:	e0f6      	b.n	8004f50 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d121      	bne.n	8004db0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	441a      	add	r2, r3
 8004d98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	f040 80ca 	bne.w	8004f50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dd2:	441a      	add	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d30b      	bcc.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	621a      	str	r2, [r3, #32]
 8004dfa:	e017      	b.n	8004e2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d108      	bne.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004e04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004e14:	e00a      	b.n	8004e2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d165      	bne.n	8004f06 <HAL_PCD_EP_DB_Transmit+0x750>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e4e:	4413      	add	r3, r2
 8004e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	011a      	lsls	r2, r3, #4
 8004e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e76:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e78:	d91d      	bls.n	8004eb6 <HAL_PCD_EP_DB_Transmit+0x700>
 8004e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d102      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004e8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e90:	3b01      	subs	r3, #1
 8004e92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	029b      	lsls	r3, r3, #10
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	e041      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x784>
 8004eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004ebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	e032      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x784>
 8004ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_PCD_EP_DB_Transmit+0x738>
 8004ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eea:	3301      	adds	r3, #1
 8004eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	029b      	lsls	r3, r3, #10
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	4313      	orrs	r3, r2
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f02:	801a      	strh	r2, [r3, #0]
 8004f04:	e019      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x784>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d115      	bne.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x784>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f1c:	4413      	add	r3, r2
 8004f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	011a      	lsls	r2, r3, #4
 8004f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f38:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6959      	ldr	r1, [r3, #20]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	895a      	ldrh	r2, [r3, #10]
 8004f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f004 fc3b 	bl	80097c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f6a:	82bb      	strh	r3, [r7, #20]
 8004f6c:	8abb      	ldrh	r3, [r7, #20]
 8004f6e:	f083 0310 	eor.w	r3, r3, #16
 8004f72:	82bb      	strh	r3, [r7, #20]
 8004f74:	8abb      	ldrh	r3, [r7, #20]
 8004f76:	f083 0320 	eor.w	r3, r3, #32
 8004f7a:	82bb      	strh	r3, [r7, #20]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	441a      	add	r2, r3
 8004f8a:	8abb      	ldrh	r3, [r7, #20]
 8004f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3790      	adds	r7, #144	@ 0x90
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	817b      	strh	r3, [r7, #10]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004fbc:	897b      	ldrh	r3, [r7, #10]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc8:	897b      	ldrh	r3, [r7, #10]
 8004fca:	f003 0207 	and.w	r2, r3, #7
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e009      	b.n	8004ff4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fe0:	897a      	ldrh	r2, [r7, #10]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ff4:	893b      	ldrh	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d107      	bne.n	800500a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	b29a      	uxth	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	80da      	strh	r2, [r3, #6]
 8005008:	e00b      	b.n	8005022 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2201      	movs	r2, #1
 800500e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	b29a      	uxth	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	b29a      	uxth	r2, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
	...

08005030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e272      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8087 	beq.w	800515e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005050:	4b92      	ldr	r3, [pc, #584]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b04      	cmp	r3, #4
 800505a:	d00c      	beq.n	8005076 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800505c:	4b8f      	ldr	r3, [pc, #572]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	d112      	bne.n	800508e <HAL_RCC_OscConfig+0x5e>
 8005068:	4b8c      	ldr	r3, [pc, #560]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005074:	d10b      	bne.n	800508e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005076:	4b89      	ldr	r3, [pc, #548]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d06c      	beq.n	800515c <HAL_RCC_OscConfig+0x12c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d168      	bne.n	800515c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e24c      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005096:	d106      	bne.n	80050a6 <HAL_RCC_OscConfig+0x76>
 8005098:	4b80      	ldr	r3, [pc, #512]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a7f      	ldr	r2, [pc, #508]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 800509e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e02e      	b.n	8005104 <HAL_RCC_OscConfig+0xd4>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x98>
 80050ae:	4b7b      	ldr	r3, [pc, #492]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7a      	ldr	r2, [pc, #488]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4b78      	ldr	r3, [pc, #480]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a77      	ldr	r2, [pc, #476]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e01d      	b.n	8005104 <HAL_RCC_OscConfig+0xd4>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0xbc>
 80050d2:	4b72      	ldr	r3, [pc, #456]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a71      	ldr	r2, [pc, #452]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b6f      	ldr	r3, [pc, #444]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6e      	ldr	r2, [pc, #440]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xd4>
 80050ec:	4b6b      	ldr	r3, [pc, #428]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6a      	ldr	r2, [pc, #424]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b68      	ldr	r3, [pc, #416]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a67      	ldr	r2, [pc, #412]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005102:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fc fe2c 	bl	8001d68 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005114:	f7fc fe28 	bl	8001d68 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	@ 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e200      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	4b5d      	ldr	r3, [pc, #372]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0xe4>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fc fe18 	bl	8001d68 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800513c:	f7fc fe14 	bl	8001d68 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	@ 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e1ec      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	4b53      	ldr	r3, [pc, #332]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x10c>
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d063      	beq.n	8005232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800516a:	4b4c      	ldr	r3, [pc, #304]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005176:	4b49      	ldr	r3, [pc, #292]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b08      	cmp	r3, #8
 8005180:	d11c      	bne.n	80051bc <HAL_RCC_OscConfig+0x18c>
 8005182:	4b46      	ldr	r3, [pc, #280]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518e:	4b43      	ldr	r3, [pc, #268]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_RCC_OscConfig+0x176>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1c0      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b3d      	ldr	r3, [pc, #244]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4939      	ldr	r1, [pc, #228]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ba:	e03a      	b.n	8005232 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c4:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ca:	f7fc fdcd 	bl	8001d68 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d2:	f7fc fdc9 	bl	8001d68 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1a1      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	4b2d      	ldr	r3, [pc, #180]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f0:	4b2a      	ldr	r3, [pc, #168]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4927      	ldr	r1, [pc, #156]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005206:	4b26      	ldr	r3, [pc, #152]	@ (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fc fdac 	bl	8001d68 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005214:	f7fc fda8 	bl	8001d68 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e180      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d03a      	beq.n	80052b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d019      	beq.n	800527a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b17      	ldr	r3, [pc, #92]	@ (80052a4 <HAL_RCC_OscConfig+0x274>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524c:	f7fc fd8c 	bl	8001d68 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005254:	f7fc fd88 	bl	8001d68 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e160      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <HAL_RCC_OscConfig+0x26c>)
 8005268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005272:	2001      	movs	r0, #1
 8005274:	f000 fa9c 	bl	80057b0 <RCC_Delay>
 8005278:	e01c      	b.n	80052b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800527a:	4b0a      	ldr	r3, [pc, #40]	@ (80052a4 <HAL_RCC_OscConfig+0x274>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005280:	f7fc fd72 	bl	8001d68 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005286:	e00f      	b.n	80052a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005288:	f7fc fd6e 	bl	8001d68 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d908      	bls.n	80052a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e146      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000
 80052a0:	42420000 	.word	0x42420000
 80052a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a8:	4b92      	ldr	r3, [pc, #584]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e9      	bne.n	8005288 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80a6 	beq.w	800540e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c6:	4b8b      	ldr	r3, [pc, #556]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d2:	4b88      	ldr	r3, [pc, #544]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	4a87      	ldr	r2, [pc, #540]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	61d3      	str	r3, [r2, #28]
 80052de:	4b85      	ldr	r3, [pc, #532]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ee:	4b82      	ldr	r3, [pc, #520]	@ (80054f8 <HAL_RCC_OscConfig+0x4c8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d118      	bne.n	800532c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052fa:	4b7f      	ldr	r3, [pc, #508]	@ (80054f8 <HAL_RCC_OscConfig+0x4c8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a7e      	ldr	r2, [pc, #504]	@ (80054f8 <HAL_RCC_OscConfig+0x4c8>)
 8005300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005306:	f7fc fd2f 	bl	8001d68 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530e:	f7fc fd2b 	bl	8001d68 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b64      	cmp	r3, #100	@ 0x64
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e103      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	4b75      	ldr	r3, [pc, #468]	@ (80054f8 <HAL_RCC_OscConfig+0x4c8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d106      	bne.n	8005342 <HAL_RCC_OscConfig+0x312>
 8005334:	4b6f      	ldr	r3, [pc, #444]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	4a6e      	ldr	r2, [pc, #440]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6213      	str	r3, [r2, #32]
 8005340:	e02d      	b.n	800539e <HAL_RCC_OscConfig+0x36e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x334>
 800534a:	4b6a      	ldr	r3, [pc, #424]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	4a69      	ldr	r2, [pc, #420]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	6213      	str	r3, [r2, #32]
 8005356:	4b67      	ldr	r3, [pc, #412]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	4a66      	ldr	r2, [pc, #408]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800535c:	f023 0304 	bic.w	r3, r3, #4
 8005360:	6213      	str	r3, [r2, #32]
 8005362:	e01c      	b.n	800539e <HAL_RCC_OscConfig+0x36e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b05      	cmp	r3, #5
 800536a:	d10c      	bne.n	8005386 <HAL_RCC_OscConfig+0x356>
 800536c:	4b61      	ldr	r3, [pc, #388]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	4a60      	ldr	r2, [pc, #384]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005372:	f043 0304 	orr.w	r3, r3, #4
 8005376:	6213      	str	r3, [r2, #32]
 8005378:	4b5e      	ldr	r3, [pc, #376]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	4a5d      	ldr	r2, [pc, #372]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	6213      	str	r3, [r2, #32]
 8005384:	e00b      	b.n	800539e <HAL_RCC_OscConfig+0x36e>
 8005386:	4b5b      	ldr	r3, [pc, #364]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	4a5a      	ldr	r2, [pc, #360]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800538c:	f023 0301 	bic.w	r3, r3, #1
 8005390:	6213      	str	r3, [r2, #32]
 8005392:	4b58      	ldr	r3, [pc, #352]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	4a57      	ldr	r2, [pc, #348]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005398:	f023 0304 	bic.w	r3, r3, #4
 800539c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d015      	beq.n	80053d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a6:	f7fc fcdf 	bl	8001d68 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ac:	e00a      	b.n	80053c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f7fc fcdb 	bl	8001d68 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053bc:	4293      	cmp	r3, r2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e0b1      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c4:	4b4b      	ldr	r3, [pc, #300]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0ee      	beq.n	80053ae <HAL_RCC_OscConfig+0x37e>
 80053d0:	e014      	b.n	80053fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d2:	f7fc fcc9 	bl	8001d68 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fc fcc5 	bl	8001d68 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e09b      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f0:	4b40      	ldr	r3, [pc, #256]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1ee      	bne.n	80053da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005402:	4b3c      	ldr	r3, [pc, #240]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	4a3b      	ldr	r2, [pc, #236]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800540c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8087 	beq.w	8005526 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005418:	4b36      	ldr	r3, [pc, #216]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 030c 	and.w	r3, r3, #12
 8005420:	2b08      	cmp	r3, #8
 8005422:	d061      	beq.n	80054e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d146      	bne.n	80054ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542c:	4b33      	ldr	r3, [pc, #204]	@ (80054fc <HAL_RCC_OscConfig+0x4cc>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005432:	f7fc fc99 	bl	8001d68 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543a:	f7fc fc95 	bl	8001d68 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e06d      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800544c:	4b29      	ldr	r3, [pc, #164]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005460:	d108      	bne.n	8005474 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005462:	4b24      	ldr	r3, [pc, #144]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	4921      	ldr	r1, [pc, #132]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005470:	4313      	orrs	r3, r2
 8005472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005474:	4b1f      	ldr	r3, [pc, #124]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a19      	ldr	r1, [r3, #32]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	430b      	orrs	r3, r1
 8005486:	491b      	ldr	r1, [pc, #108]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548c:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <HAL_RCC_OscConfig+0x4cc>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005492:	f7fc fc69 	bl	8001d68 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549a:	f7fc fc65 	bl	8001d68 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e03d      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054ac:	4b11      	ldr	r3, [pc, #68]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x46a>
 80054b8:	e035      	b.n	8005526 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	4b10      	ldr	r3, [pc, #64]	@ (80054fc <HAL_RCC_OscConfig+0x4cc>)
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fc fc52 	bl	8001d68 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fc fc4e 	bl	8001d68 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e026      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054da:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <HAL_RCC_OscConfig+0x4c4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x498>
 80054e6:	e01e      	b.n	8005526 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e019      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40007000 	.word	0x40007000
 80054fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <HAL_RCC_OscConfig+0x500>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	429a      	cmp	r2, r3
 8005512:	d106      	bne.n	8005522 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d001      	beq.n	8005526 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40021000 	.word	0x40021000

08005534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0d0      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b6a      	ldr	r3, [pc, #424]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b67      	ldr	r3, [pc, #412]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	4965      	ldr	r1, [pc, #404]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b63      	ldr	r3, [pc, #396]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0b8      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d020      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005590:	4b59      	ldr	r3, [pc, #356]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4a58      	ldr	r2, [pc, #352]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005596:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800559a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a8:	4b53      	ldr	r3, [pc, #332]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a52      	ldr	r2, [pc, #328]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b4:	4b50      	ldr	r3, [pc, #320]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	494d      	ldr	r1, [pc, #308]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d040      	beq.n	8005654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055da:	4b47      	ldr	r3, [pc, #284]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d115      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e07f      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f2:	4b41      	ldr	r3, [pc, #260]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e073      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	4b3d      	ldr	r3, [pc, #244]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06b      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4936      	ldr	r1, [pc, #216]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005620:	4313      	orrs	r3, r2
 8005622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005624:	f7fc fba0 	bl	8001d68 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7fc fb9c 	bl	8001d68 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e053      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b2d      	ldr	r3, [pc, #180]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b27      	ldr	r3, [pc, #156]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d210      	bcs.n	8005684 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b24      	ldr	r3, [pc, #144]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 0207 	bic.w	r2, r3, #7
 800566a:	4922      	ldr	r1, [pc, #136]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b20      	ldr	r3, [pc, #128]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e032      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005690:	4b19      	ldr	r3, [pc, #100]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4916      	ldr	r1, [pc, #88]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056ae:	4b12      	ldr	r3, [pc, #72]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	490e      	ldr	r1, [pc, #56]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056c2:	f000 f821 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	490a      	ldr	r1, [pc, #40]	@ (80056fc <HAL_RCC_ClockConfig+0x1c8>)
 80056d4:	5ccb      	ldrb	r3, [r1, r3]
 80056d6:	fa22 f303 	lsr.w	r3, r2, r3
 80056da:	4a09      	ldr	r2, [pc, #36]	@ (8005700 <HAL_RCC_ClockConfig+0x1cc>)
 80056dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056de:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <HAL_RCC_ClockConfig+0x1d0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fc fafe 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40021000 	.word	0x40021000
 80056fc:	0800b928 	.word	0x0800b928
 8005700:	20000000 	.word	0x20000000
 8005704:	20000004 	.word	0x20000004

08005708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	2300      	movs	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005722:	4b1e      	ldr	r3, [pc, #120]	@ (800579c <HAL_RCC_GetSysClockFreq+0x94>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b04      	cmp	r3, #4
 8005730:	d002      	beq.n	8005738 <HAL_RCC_GetSysClockFreq+0x30>
 8005732:	2b08      	cmp	r3, #8
 8005734:	d003      	beq.n	800573e <HAL_RCC_GetSysClockFreq+0x36>
 8005736:	e027      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005738:	4b19      	ldr	r3, [pc, #100]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800573a:	613b      	str	r3, [r7, #16]
      break;
 800573c:	e027      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	0c9b      	lsrs	r3, r3, #18
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	4a17      	ldr	r2, [pc, #92]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005748:	5cd3      	ldrb	r3, [r2, r3]
 800574a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d010      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005756:	4b11      	ldr	r3, [pc, #68]	@ (800579c <HAL_RCC_GetSysClockFreq+0x94>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	0c5b      	lsrs	r3, r3, #17
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	4a11      	ldr	r2, [pc, #68]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005762:	5cd3      	ldrb	r3, [r2, r3]
 8005764:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a0d      	ldr	r2, [pc, #52]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800576a:	fb03 f202 	mul.w	r2, r3, r2
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	e004      	b.n	8005782 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0c      	ldr	r2, [pc, #48]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	613b      	str	r3, [r7, #16]
      break;
 8005786:	e002      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800578a:	613b      	str	r3, [r7, #16]
      break;
 800578c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578e:	693b      	ldr	r3, [r7, #16]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	007a1200 	.word	0x007a1200
 80057a4:	0800b938 	.word	0x0800b938
 80057a8:	0800b948 	.word	0x0800b948
 80057ac:	003d0900 	.word	0x003d0900

080057b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057b8:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <RCC_Delay+0x34>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0a      	ldr	r2, [pc, #40]	@ (80057e8 <RCC_Delay+0x38>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	0a5b      	lsrs	r3, r3, #9
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057cc:	bf00      	nop
  }
  while (Delay --);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	1e5a      	subs	r2, r3, #1
 80057d2:	60fa      	str	r2, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f9      	bne.n	80057cc <RCC_Delay+0x1c>
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	20000000 	.word	0x20000000
 80057e8:	10624dd3 	.word	0x10624dd3

080057ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d07d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005808:	2300      	movs	r3, #0
 800580a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800580c:	4b4f      	ldr	r3, [pc, #316]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10d      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005818:	4b4c      	ldr	r3, [pc, #304]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	4a4b      	ldr	r2, [pc, #300]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005822:	61d3      	str	r3, [r2, #28]
 8005824:	4b49      	ldr	r3, [pc, #292]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005830:	2301      	movs	r3, #1
 8005832:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005834:	4b46      	ldr	r3, [pc, #280]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d118      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005840:	4b43      	ldr	r3, [pc, #268]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a42      	ldr	r2, [pc, #264]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584c:	f7fc fa8c 	bl	8001d68 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005852:	e008      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005854:	f7fc fa88 	bl	8001d68 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	@ 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e06d      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005866:	4b3a      	ldr	r3, [pc, #232]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005872:	4b36      	ldr	r3, [pc, #216]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02e      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	429a      	cmp	r2, r3
 800588e:	d027      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005890:	4b2e      	ldr	r3, [pc, #184]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005898:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800589a:	4b2e      	ldr	r3, [pc, #184]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058a6:	4a29      	ldr	r2, [pc, #164]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d014      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b6:	f7fc fa57 	bl	8001d68 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058bc:	e00a      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fc fa53 	bl	8001d68 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e036      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d4:	4b1d      	ldr	r3, [pc, #116]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0ee      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e0:	4b1a      	ldr	r3, [pc, #104]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	4917      	ldr	r1, [pc, #92]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d105      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f8:	4b14      	ldr	r3, [pc, #80]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	4a13      	ldr	r2, [pc, #76]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005902:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005910:	4b0e      	ldr	r3, [pc, #56]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	490b      	ldr	r1, [pc, #44]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591e:	4313      	orrs	r3, r2
 8005920:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800592e:	4b07      	ldr	r3, [pc, #28]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	4904      	ldr	r1, [pc, #16]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593c:	4313      	orrs	r3, r2
 800593e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40021000 	.word	0x40021000
 8005950:	40007000 	.word	0x40007000
 8005954:	42420440 	.word	0x42420440

08005958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e076      	b.n	8005a58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	2b00      	cmp	r3, #0
 8005970:	d108      	bne.n	8005984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800597a:	d009      	beq.n	8005990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	61da      	str	r2, [r3, #28]
 8005982:	e005      	b.n	8005990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb ff9e 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a14:	ea42 0103 	orr.w	r1, r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	0c1a      	lsrs	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f002 0204 	and.w	r2, r2, #4
 8005a36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10f      	bne.n	8005aa4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	099b      	lsrs	r3, r3, #6
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d004      	beq.n	8005aa4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
    return;
 8005aa2:	e0be      	b.n	8005c22 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <HAL_SPI_IRQHandler+0x66>
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	09db      	lsrs	r3, r3, #7
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d004      	beq.n	8005ac6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
    return;
 8005ac4:	e0ad      	b.n	8005c22 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_SPI_IRQHandler+0x80>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	099b      	lsrs	r3, r3, #6
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80a1 	beq.w	8005c22 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 809a 	beq.w	8005c22 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	099b      	lsrs	r3, r3, #6
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d023      	beq.n	8005b42 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d011      	beq.n	8005b2a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0a:	f043 0204 	orr.w	r2, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	e00b      	b.n	8005b42 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	693b      	ldr	r3, [r7, #16]
        return;
 8005b40:	e06f      	b.n	8005c22 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d014      	beq.n	8005b78 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d04f      	beq.n	8005c20 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <HAL_SPI_IRQHandler+0x14c>
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d034      	beq.n	8005c16 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0203 	bic.w	r2, r2, #3
 8005bba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d011      	beq.n	8005be8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bc8:	4a17      	ldr	r2, [pc, #92]	@ (8005c28 <HAL_SPI_IRQHandler+0x1c8>)
 8005bca:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fd f999 	bl	8002f08 <HAL_DMA_Abort_IT>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d016      	beq.n	8005c1e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8005c28 <HAL_SPI_IRQHandler+0x1c8>)
 8005bf6:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fd f983 	bl	8002f08 <HAL_DMA_Abort_IT>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005c14:	e003      	b.n	8005c1e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f808 	bl	8005c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c1c:	e000      	b.n	8005c20 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005c1e:	bf00      	nop
    return;
 8005c20:	bf00      	nop
  }
}
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08005c3f 	.word	0x08005c3f

08005c2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff ffe7 	bl	8005c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c5e:	bf00      	nop
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e041      	b.n	8005cfc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fb fed7 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f000 fca1 	bl	80065ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d001      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e03a      	b.n	8005d92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <HAL_TIM_Base_Start_IT+0x98>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x58>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d46:	d009      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x58>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a14      	ldr	r2, [pc, #80]	@ (8005da0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x58>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a13      	ldr	r2, [pc, #76]	@ (8005da4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d111      	bne.n	8005d80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b06      	cmp	r3, #6
 8005d6c:	d010      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	e007      	b.n	8005d90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800

08005da8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e041      	b.n	8005e3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f839 	bl	8005e46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f000 fc00 	bl	80065ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e041      	b.n	8005eee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f839 	bl	8005ef6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f000 fba8 	bl	80065ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d020      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01b      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0202 	mvn.w	r2, #2
 8005f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fa ff0c 	bl	8000d70 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb2b 	bl	80065b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fb31 	bl	80065c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d020      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01b      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0204 	mvn.w	r2, #4
 8005f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fa fee6 	bl	8000d70 <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fb05 	bl	80065b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fb0b 	bl	80065c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d020      	beq.n	8006004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0208 	mvn.w	r2, #8
 8005fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2204      	movs	r2, #4
 8005fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fa fec0 	bl	8000d70 <HAL_TIM_IC_CaptureCallback>
 8005ff0:	e005      	b.n	8005ffe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fadf 	bl	80065b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fae5 	bl	80065c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	d020      	beq.n	8006050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0210 	mvn.w	r2, #16
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2208      	movs	r2, #8
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fa fe9a 	bl	8000d70 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fab9 	bl	80065b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fabf 	bl	80065c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00c      	beq.n	8006074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d007      	beq.n	8006074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0201 	mvn.w	r2, #1
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fa ff0c 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 f88d 	bl	80071b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00c      	beq.n	80060bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa8f 	bl	80065da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00c      	beq.n	80060e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0220 	mvn.w	r2, #32
 80060d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 f860 	bl	80071a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006102:	2302      	movs	r3, #2
 8006104:	e088      	b.n	8006218 <HAL_TIM_IC_ConfigChannel+0x130>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11b      	bne.n	800614c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006124:	f000 fcea 	bl	8006afc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 020c 	bic.w	r2, r2, #12
 8006136:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6999      	ldr	r1, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
 800614a:	e060      	b.n	800620e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b04      	cmp	r3, #4
 8006150:	d11c      	bne.n	800618c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006162:	f000 fd53 	bl	8006c0c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006174:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6999      	ldr	r1, [r3, #24]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	021a      	lsls	r2, r3, #8
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	619a      	str	r2, [r3, #24]
 800618a:	e040      	b.n	800620e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b08      	cmp	r3, #8
 8006190:	d11b      	bne.n	80061ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80061a2:	f000 fd9e 	bl	8006ce2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 020c 	bic.w	r2, r2, #12
 80061b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69d9      	ldr	r1, [r3, #28]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	61da      	str	r2, [r3, #28]
 80061c8:	e021      	b.n	800620e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	d11c      	bne.n	800620a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80061e0:	f000 fdba 	bl	8006d58 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69da      	ldr	r2, [r3, #28]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80061f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69d9      	ldr	r1, [r3, #28]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	61da      	str	r2, [r3, #28]
 8006208:	e001      	b.n	800620e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800623a:	2302      	movs	r3, #2
 800623c:	e0ae      	b.n	800639c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b0c      	cmp	r3, #12
 800624a:	f200 809f 	bhi.w	800638c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800624e:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	08006289 	.word	0x08006289
 8006258:	0800638d 	.word	0x0800638d
 800625c:	0800638d 	.word	0x0800638d
 8006260:	0800638d 	.word	0x0800638d
 8006264:	080062c9 	.word	0x080062c9
 8006268:	0800638d 	.word	0x0800638d
 800626c:	0800638d 	.word	0x0800638d
 8006270:	0800638d 	.word	0x0800638d
 8006274:	0800630b 	.word	0x0800630b
 8006278:	0800638d 	.word	0x0800638d
 800627c:	0800638d 	.word	0x0800638d
 8006280:	0800638d 	.word	0x0800638d
 8006284:	0800634b 	.word	0x0800634b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fa1a 	bl	80066c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0208 	orr.w	r2, r2, #8
 80062a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0204 	bic.w	r2, r2, #4
 80062b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6999      	ldr	r1, [r3, #24]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	619a      	str	r2, [r3, #24]
      break;
 80062c6:	e064      	b.n	8006392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fa60 	bl	8006794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6999      	ldr	r1, [r3, #24]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	619a      	str	r2, [r3, #24]
      break;
 8006308:	e043      	b.n	8006392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 faa9 	bl	8006868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0208 	orr.w	r2, r2, #8
 8006324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0204 	bic.w	r2, r2, #4
 8006334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69d9      	ldr	r1, [r3, #28]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	61da      	str	r2, [r3, #28]
      break;
 8006348:	e023      	b.n	8006392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	4618      	mov	r0, r3
 8006352:	f000 faf3 	bl	800693c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69d9      	ldr	r1, [r3, #28]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	021a      	lsls	r2, r3, #8
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	61da      	str	r2, [r3, #28]
      break;
 800638a:	e002      	b.n	8006392 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
      break;
 8006390:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_TIM_ConfigClockSource+0x1c>
 80063bc:	2302      	movs	r3, #2
 80063be:	e0b4      	b.n	800652a <HAL_TIM_ConfigClockSource+0x186>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f8:	d03e      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0xd4>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fe:	f200 8087 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x16c>
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006406:	f000 8086 	beq.w	8006516 <HAL_TIM_ConfigClockSource+0x172>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800640e:	d87f      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x16c>
 8006410:	2b70      	cmp	r3, #112	@ 0x70
 8006412:	d01a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0xa6>
 8006414:	2b70      	cmp	r3, #112	@ 0x70
 8006416:	d87b      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x16c>
 8006418:	2b60      	cmp	r3, #96	@ 0x60
 800641a:	d050      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x11a>
 800641c:	2b60      	cmp	r3, #96	@ 0x60
 800641e:	d877      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x16c>
 8006420:	2b50      	cmp	r3, #80	@ 0x50
 8006422:	d03c      	beq.n	800649e <HAL_TIM_ConfigClockSource+0xfa>
 8006424:	2b50      	cmp	r3, #80	@ 0x50
 8006426:	d873      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x16c>
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	d058      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x13a>
 800642c:	2b40      	cmp	r3, #64	@ 0x40
 800642e:	d86f      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x16c>
 8006430:	2b30      	cmp	r3, #48	@ 0x30
 8006432:	d064      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x15a>
 8006434:	2b30      	cmp	r3, #48	@ 0x30
 8006436:	d86b      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x16c>
 8006438:	2b20      	cmp	r3, #32
 800643a:	d060      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x15a>
 800643c:	2b20      	cmp	r3, #32
 800643e:	d867      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x16c>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d05c      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x15a>
 8006444:	2b10      	cmp	r3, #16
 8006446:	d05a      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x15a>
 8006448:	e062      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800645a:	f000 fcd3 	bl	8006e04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800646c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	609a      	str	r2, [r3, #8]
      break;
 8006476:	e04f      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006488:	f000 fcbc 	bl	8006e04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800649a:	609a      	str	r2, [r3, #8]
      break;
 800649c:	e03c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fb80 	bl	8006bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2150      	movs	r1, #80	@ 0x50
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fc8a 	bl	8006dd0 <TIM_ITRx_SetConfig>
      break;
 80064bc:	e02c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 fbda 	bl	8006c84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2160      	movs	r1, #96	@ 0x60
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fc7a 	bl	8006dd0 <TIM_ITRx_SetConfig>
      break;
 80064dc:	e01c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ea:	461a      	mov	r2, r3
 80064ec:	f000 fb60 	bl	8006bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2140      	movs	r1, #64	@ 0x40
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fc6a 	bl	8006dd0 <TIM_ITRx_SetConfig>
      break;
 80064fc:	e00c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 fc61 	bl	8006dd0 <TIM_ITRx_SetConfig>
      break;
 800650e:	e003      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
      break;
 8006514:	e000      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_TIM_SlaveConfigSynchro+0x18>
 8006546:	2302      	movs	r3, #2
 8006548:	e031      	b.n	80065ae <HAL_TIM_SlaveConfigSynchro+0x7c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa3b 	bl	80069d8 <TIM_SlaveTimer_SetConfig>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e018      	b.n	80065ae <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800658a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800659a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr

080065da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr

080065ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a2f      	ldr	r2, [pc, #188]	@ (80066bc <TIM_Base_SetConfig+0xd0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00b      	beq.n	800661c <TIM_Base_SetConfig+0x30>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660a:	d007      	beq.n	800661c <TIM_Base_SetConfig+0x30>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a2c      	ldr	r2, [pc, #176]	@ (80066c0 <TIM_Base_SetConfig+0xd4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0x30>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a2b      	ldr	r2, [pc, #172]	@ (80066c4 <TIM_Base_SetConfig+0xd8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d108      	bne.n	800662e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a22      	ldr	r2, [pc, #136]	@ (80066bc <TIM_Base_SetConfig+0xd0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00b      	beq.n	800664e <TIM_Base_SetConfig+0x62>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663c:	d007      	beq.n	800664e <TIM_Base_SetConfig+0x62>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a1f      	ldr	r2, [pc, #124]	@ (80066c0 <TIM_Base_SetConfig+0xd4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_Base_SetConfig+0x62>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a1e      	ldr	r2, [pc, #120]	@ (80066c4 <TIM_Base_SetConfig+0xd8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d108      	bne.n	8006660 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a0d      	ldr	r2, [pc, #52]	@ (80066bc <TIM_Base_SetConfig+0xd0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d103      	bne.n	8006694 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]
  }
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40000400 	.word	0x40000400
 80066c4:	40000800 	.word	0x40000800

080066c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f023 0201 	bic.w	r2, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f023 0302 	bic.w	r3, r3, #2
 8006710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a1c      	ldr	r2, [pc, #112]	@ (8006790 <TIM_OC1_SetConfig+0xc8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d10c      	bne.n	800673e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f023 0308 	bic.w	r3, r3, #8
 800672a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f023 0304 	bic.w	r3, r3, #4
 800673c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a13      	ldr	r2, [pc, #76]	@ (8006790 <TIM_OC1_SetConfig+0xc8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d111      	bne.n	800676a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800674c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	621a      	str	r2, [r3, #32]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40012c00 	.word	0x40012c00

08006794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 0210 	bic.w	r2, r3, #16
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 0320 	bic.w	r3, r3, #32
 80067de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006864 <TIM_OC2_SetConfig+0xd0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d10d      	bne.n	8006810 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800680e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a14      	ldr	r2, [pc, #80]	@ (8006864 <TIM_OC2_SetConfig+0xd0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d113      	bne.n	8006840 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800681e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr
 8006864:	40012c00 	.word	0x40012c00

08006868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006938 <TIM_OC3_SetConfig+0xd0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d10d      	bne.n	80068e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a14      	ldr	r2, [pc, #80]	@ (8006938 <TIM_OC3_SetConfig+0xd0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d113      	bne.n	8006912 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	621a      	str	r2, [r3, #32]
}
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	bc80      	pop	{r7}
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40012c00 	.word	0x40012c00

0800693c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800696a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	031b      	lsls	r3, r3, #12
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a0f      	ldr	r2, [pc, #60]	@ (80069d4 <TIM_OC4_SetConfig+0x98>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d109      	bne.n	80069b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	019b      	lsls	r3, r3, #6
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr
 80069d4:	40012c00 	.word	0x40012c00

080069d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f023 0307 	bic.w	r3, r3, #7
 8006a06:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b70      	cmp	r3, #112	@ 0x70
 8006a20:	d01a      	beq.n	8006a58 <TIM_SlaveTimer_SetConfig+0x80>
 8006a22:	2b70      	cmp	r3, #112	@ 0x70
 8006a24:	d860      	bhi.n	8006ae8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a26:	2b60      	cmp	r3, #96	@ 0x60
 8006a28:	d054      	beq.n	8006ad4 <TIM_SlaveTimer_SetConfig+0xfc>
 8006a2a:	2b60      	cmp	r3, #96	@ 0x60
 8006a2c:	d85c      	bhi.n	8006ae8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a2e:	2b50      	cmp	r3, #80	@ 0x50
 8006a30:	d046      	beq.n	8006ac0 <TIM_SlaveTimer_SetConfig+0xe8>
 8006a32:	2b50      	cmp	r3, #80	@ 0x50
 8006a34:	d858      	bhi.n	8006ae8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a36:	2b40      	cmp	r3, #64	@ 0x40
 8006a38:	d019      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x96>
 8006a3a:	2b40      	cmp	r3, #64	@ 0x40
 8006a3c:	d854      	bhi.n	8006ae8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a3e:	2b30      	cmp	r3, #48	@ 0x30
 8006a40:	d055      	beq.n	8006aee <TIM_SlaveTimer_SetConfig+0x116>
 8006a42:	2b30      	cmp	r3, #48	@ 0x30
 8006a44:	d850      	bhi.n	8006ae8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d051      	beq.n	8006aee <TIM_SlaveTimer_SetConfig+0x116>
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d84c      	bhi.n	8006ae8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d04d      	beq.n	8006aee <TIM_SlaveTimer_SetConfig+0x116>
 8006a52:	2b10      	cmp	r3, #16
 8006a54:	d04b      	beq.n	8006aee <TIM_SlaveTimer_SetConfig+0x116>
 8006a56:	e047      	b.n	8006ae8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006a68:	f000 f9cc 	bl	8006e04 <TIM_ETR_SetConfig>
      break;
 8006a6c:	e040      	b.n	8006af0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b05      	cmp	r3, #5
 8006a74:	d101      	bne.n	8006a7a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e03b      	b.n	8006af2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0201 	bic.w	r2, r2, #1
 8006a90:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aa0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	621a      	str	r2, [r3, #32]
      break;
 8006abe:	e017      	b.n	8006af0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006acc:	461a      	mov	r2, r3
 8006ace:	f000 f86f 	bl	8006bb0 <TIM_TI1_ConfigInputStage>
      break;
 8006ad2:	e00d      	b.n	8006af0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f000 f8cf 	bl	8006c84 <TIM_TI2_ConfigInputStage>
      break;
 8006ae6:	e003      	b.n	8006af0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]
      break;
 8006aec:	e000      	b.n	8006af0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006aee:	bf00      	nop
  }

  return status;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f023 0201 	bic.w	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba4 <TIM_TI1_SetConfig+0xa8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <TIM_TI1_SetConfig+0x46>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b30:	d007      	beq.n	8006b42 <TIM_TI1_SetConfig+0x46>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba8 <TIM_TI1_SetConfig+0xac>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_TI1_SetConfig+0x46>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bac <TIM_TI1_SetConfig+0xb0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d101      	bne.n	8006b46 <TIM_TI1_SetConfig+0x4a>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <TIM_TI1_SetConfig+0x4c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e003      	b.n	8006b66 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f023 030a 	bic.w	r3, r3, #10
 8006b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f003 030a 	and.w	r3, r3, #10
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800

08006bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f023 0201 	bic.w	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f023 030a 	bic.w	r3, r3, #10
 8006bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	f023 0210 	bic.w	r2, r3, #16
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	031b      	lsls	r3, r3, #12
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f023 0210 	bic.w	r2, r3, #16
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	031b      	lsls	r3, r3, #12
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	621a      	str	r2, [r3, #32]
}
 8006cd8:	bf00      	nop
 8006cda:	371c      	adds	r7, #28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f023 0303 	bic.w	r3, r3, #3
 8006d0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d1e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d32:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	021b      	lsls	r3, r3, #8
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	031b      	lsls	r3, r3, #12
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006daa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	031b      	lsls	r3, r3, #12
 8006db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f043 0307 	orr.w	r3, r3, #7
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	609a      	str	r2, [r3, #8]
}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	021a      	lsls	r2, r3, #8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	2201      	movs	r2, #1
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a1a      	ldr	r2, [r3, #32]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	43db      	mvns	r3, r3
 8006e64:	401a      	ands	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1a      	ldr	r2, [r3, #32]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	621a      	str	r2, [r3, #32]
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b08a      	sub	sp, #40	@ 0x28
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e09a      	b.n	8006fd4 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f892 	bl	8006fdc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7ff fb8e 	bl	80065ec <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6818      	ldr	r0, [r3, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6819      	ldr	r1, [r3, #0]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2203      	movs	r2, #3
 8006ede:	f7ff fe0d 	bl	8006afc <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	699a      	ldr	r2, [r3, #24]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 020c 	bic.w	r2, r2, #12
 8006ef0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6999      	ldr	r1, [r3, #24]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006f12:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006f22:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f32:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0207 	bic.w	r2, r2, #7
 8006f42:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0204 	orr.w	r2, r2, #4
 8006f52:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006f5c:	2370      	movs	r3, #112	@ 0x70
 8006f5e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006f60:	2300      	movs	r3, #0
 8006f62:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f107 020c 	add.w	r2, r7, #12
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fc09 	bl	8006794 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006f90:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006fa0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3728      	adds	r7, #40	@ 0x28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr
	...

08006ff0 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ffe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007006:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800700e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007016:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d108      	bne.n	8007030 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d105      	bne.n	8007030 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007024:	7b7b      	ldrb	r3, [r7, #13]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d102      	bne.n	8007030 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800702a:	7b3b      	ldrb	r3, [r7, #12]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d001      	beq.n	8007034 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e04d      	b.n	80070d0 <HAL_TIMEx_HallSensor_Start_IT+0xe0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0202 	orr.w	r2, r2, #2
 8007062:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2201      	movs	r2, #1
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fee8 	bl	8006e42 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a18      	ldr	r2, [pc, #96]	@ (80070d8 <HAL_TIMEx_HallSensor_Start_IT+0xe8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007084:	d009      	beq.n	800709a <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a14      	ldr	r2, [pc, #80]	@ (80070dc <HAL_TIMEx_HallSensor_Start_IT+0xec>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a12      	ldr	r2, [pc, #72]	@ (80070e0 <HAL_TIMEx_HallSensor_Start_IT+0xf0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d111      	bne.n	80070be <HAL_TIMEx_HallSensor_Start_IT+0xce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b06      	cmp	r3, #6
 80070aa:	d010      	beq.n	80070ce <HAL_TIMEx_HallSensor_Start_IT+0xde>
    {
      __HAL_TIM_ENABLE(htim);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0201 	orr.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070bc:	e007      	b.n	80070ce <HAL_TIMEx_HallSensor_Start_IT+0xde>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0201 	orr.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40000400 	.word	0x40000400
 80070e0:	40000800 	.word	0x40000800

080070e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e046      	b.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a16      	ldr	r2, [pc, #88]	@ (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00e      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007148:	d009      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a12      	ldr	r2, [pc, #72]	@ (8007198 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a10      	ldr	r2, [pc, #64]	@ (800719c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10c      	bne.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4313      	orrs	r3, r2
 800716e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	40012c00 	.word	0x40012c00
 8007198:	40000400 	.word	0x40000400
 800719c:	40000800 	.word	0x40000800

080071a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr

080071c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	4638      	mov	r0, r7
 80071ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr

080071de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80071ee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80071f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr

0800720a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007212:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007216:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	b29b      	uxth	r3, r3
 8007224:	43db      	mvns	r3, r3
 8007226:	b29b      	uxth	r3, r3
 8007228:	4013      	ands	r3, r2
 800722a:	b29a      	uxth	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr

08007256 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	4638      	mov	r0, r7
 8007260:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007290:	b480      	push	{r7}
 8007292:	b09d      	sub	sp, #116	@ 0x74
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80072b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072b6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	78db      	ldrb	r3, [r3, #3]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d81f      	bhi.n	8007302 <USB_ActivateEndpoint+0x72>
 80072c2:	a201      	add	r2, pc, #4	@ (adr r2, 80072c8 <USB_ActivateEndpoint+0x38>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	0800730b 	.word	0x0800730b
 80072d4:	080072e7 	.word	0x080072e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80072d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80072dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80072e4:	e012      	b.n	800730c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80072e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80072ea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80072ee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80072f2:	e00b      	b.n	800730c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80072f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80072f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007300:	e004      	b.n	800730c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007308:	e000      	b.n	800730c <USB_ActivateEndpoint+0x7c>
      break;
 800730a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	441a      	add	r2, r3
 8007316:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800731a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800731e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800732a:	b29b      	uxth	r3, r3
 800732c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007344:	b29b      	uxth	r3, r3
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	4313      	orrs	r3, r2
 800734c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800735e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800736a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800736e:	b29b      	uxth	r3, r3
 8007370:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	7b1b      	ldrb	r3, [r3, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f040 8178 	bne.w	800766c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8084 	beq.w	800748e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007390:	b29b      	uxth	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	4413      	add	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	011a      	lsls	r2, r3, #4
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	88db      	ldrh	r3, [r3, #6]
 80073ae:	085b      	lsrs	r3, r3, #1
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	827b      	strh	r3, [r7, #18]
 80073c8:	8a7b      	ldrh	r3, [r7, #18]
 80073ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01b      	beq.n	800740a <USB_ActivateEndpoint+0x17a>
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e8:	823b      	strh	r3, [r7, #16]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	441a      	add	r2, r3
 80073f4:	8a3b      	ldrh	r3, [r7, #16]
 80073f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007402:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007406:	b29b      	uxth	r3, r3
 8007408:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	78db      	ldrb	r3, [r3, #3]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d020      	beq.n	8007454 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007428:	81bb      	strh	r3, [r7, #12]
 800742a:	89bb      	ldrh	r3, [r7, #12]
 800742c:	f083 0320 	eor.w	r3, r3, #32
 8007430:	81bb      	strh	r3, [r7, #12]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	89bb      	ldrh	r3, [r7, #12]
 800743e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800744a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]
 8007452:	e2d5      	b.n	8007a00 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29b      	uxth	r3, r3
 8007462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800746a:	81fb      	strh	r3, [r7, #14]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	441a      	add	r2, r3
 8007476:	89fb      	ldrh	r3, [r7, #14]
 8007478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800747c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007488:	b29b      	uxth	r3, r3
 800748a:	8013      	strh	r3, [r2, #0]
 800748c:	e2b8      	b.n	8007a00 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	633b      	str	r3, [r7, #48]	@ 0x30
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007498:	b29b      	uxth	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	4413      	add	r3, r2
 80074a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	011a      	lsls	r2, r3, #4
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80074b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	88db      	ldrh	r3, [r3, #6]
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	4413      	add	r3, r2
 80074d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	011a      	lsls	r2, r3, #4
 80074dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074de:	4413      	add	r3, r2
 80074e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80074fc:	d91d      	bls.n	800753a <USB_ActivateEndpoint+0x2aa>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <USB_ActivateEndpoint+0x288>
 8007512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007514:	3b01      	subs	r3, #1
 8007516:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29a      	uxth	r2, r3
 800751e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007520:	b29b      	uxth	r3, r3
 8007522:	029b      	lsls	r3, r3, #10
 8007524:	b29b      	uxth	r3, r3
 8007526:	4313      	orrs	r3, r2
 8007528:	b29b      	uxth	r3, r3
 800752a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007532:	b29a      	uxth	r2, r3
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	e026      	b.n	8007588 <USB_ActivateEndpoint+0x2f8>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <USB_ActivateEndpoint+0x2c8>
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007550:	b29a      	uxth	r2, r3
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	801a      	strh	r2, [r3, #0]
 8007556:	e017      	b.n	8007588 <USB_ActivateEndpoint+0x2f8>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <USB_ActivateEndpoint+0x2e2>
 800756c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800756e:	3301      	adds	r3, #1
 8007570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29a      	uxth	r2, r3
 8007578:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800757a:	b29b      	uxth	r3, r3
 800757c:	029b      	lsls	r3, r3, #10
 800757e:	b29b      	uxth	r3, r3
 8007580:	4313      	orrs	r3, r2
 8007582:	b29a      	uxth	r2, r3
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007596:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01b      	beq.n	80075d8 <USB_ActivateEndpoint+0x348>
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b6:	843b      	strh	r3, [r7, #32]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	441a      	add	r2, r3
 80075c2:	8c3b      	ldrh	r3, [r7, #32]
 80075c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d124      	bne.n	800762a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f6:	83bb      	strh	r3, [r7, #28]
 80075f8:	8bbb      	ldrh	r3, [r7, #28]
 80075fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80075fe:	83bb      	strh	r3, [r7, #28]
 8007600:	8bbb      	ldrh	r3, [r7, #28]
 8007602:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007606:	83bb      	strh	r3, [r7, #28]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	441a      	add	r2, r3
 8007612:	8bbb      	ldrh	r3, [r7, #28]
 8007614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800761c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007624:	b29b      	uxth	r3, r3
 8007626:	8013      	strh	r3, [r2, #0]
 8007628:	e1ea      	b.n	8007a00 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800763c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007640:	83fb      	strh	r3, [r7, #30]
 8007642:	8bfb      	ldrh	r3, [r7, #30]
 8007644:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007648:	83fb      	strh	r3, [r7, #30]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	441a      	add	r2, r3
 8007654:	8bfb      	ldrh	r3, [r7, #30]
 8007656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800765a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800765e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007666:	b29b      	uxth	r3, r3
 8007668:	8013      	strh	r3, [r2, #0]
 800766a:	e1c9      	b.n	8007a00 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	78db      	ldrb	r3, [r3, #3]
 8007670:	2b02      	cmp	r3, #2
 8007672:	d11e      	bne.n	80076b2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	441a      	add	r2, r3
 8007698:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800769c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076a4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80076a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	8013      	strh	r3, [r2, #0]
 80076b0:	e01d      	b.n	80076ee <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80076c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076c8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80076da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076fe:	4413      	add	r3, r2
 8007700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	011a      	lsls	r2, r3, #4
 8007708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800770a:	4413      	add	r3, r2
 800770c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007710:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	891b      	ldrh	r3, [r3, #8]
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	b29b      	uxth	r3, r3
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	b29a      	uxth	r2, r3
 800771e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	657b      	str	r3, [r7, #84]	@ 0x54
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007732:	4413      	add	r3, r2
 8007734:	657b      	str	r3, [r7, #84]	@ 0x54
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	011a      	lsls	r2, r3, #4
 800773c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773e:	4413      	add	r3, r2
 8007740:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007744:	653b      	str	r3, [r7, #80]	@ 0x50
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	895b      	ldrh	r3, [r3, #10]
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	b29b      	uxth	r3, r3
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007754:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 8093 	bne.w	8007886 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007770:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01b      	beq.n	80077b4 <USB_ActivateEndpoint+0x524>
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800778e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007792:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	441a      	add	r2, r3
 800779e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80077a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80077c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80077c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01b      	beq.n	8007804 <USB_ActivateEndpoint+0x574>
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	441a      	add	r2, r3
 80077ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80077f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007800:	b29b      	uxth	r3, r3
 8007802:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800781c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800781e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007822:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007824:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007826:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800782a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	441a      	add	r2, r3
 8007836:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800783c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007848:	b29b      	uxth	r3, r3
 800784a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	b29b      	uxth	r3, r3
 800785a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800785e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007862:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	441a      	add	r2, r3
 800786e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800787c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007880:	b29b      	uxth	r3, r3
 8007882:	8013      	strh	r3, [r2, #0]
 8007884:	e0bc      	b.n	8007a00 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007896:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800789a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01d      	beq.n	80078de <USB_ActivateEndpoint+0x64e>
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	441a      	add	r2, r3
 80078c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80078ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078da:	b29b      	uxth	r3, r3
 80078dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80078ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80078f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01d      	beq.n	8007936 <USB_ActivateEndpoint+0x6a6>
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800790c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007910:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	441a      	add	r2, r3
 800791e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800792a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800792e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007932:	b29b      	uxth	r3, r3
 8007934:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d024      	beq.n	8007988 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007954:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007958:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800795c:	f083 0320 	eor.w	r3, r3, #32
 8007960:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	441a      	add	r2, r3
 800796e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800797e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007982:	b29b      	uxth	r3, r3
 8007984:	8013      	strh	r3, [r2, #0]
 8007986:	e01d      	b.n	80079c4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800799a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800799e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	441a      	add	r2, r3
 80079ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80079b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80079ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007a00:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3774      	adds	r7, #116	@ 0x74
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop

08007a10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b08d      	sub	sp, #52	@ 0x34
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	7b1b      	ldrb	r3, [r3, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 808e 	bne.w	8007b40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d044      	beq.n	8007ab6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	81bb      	strh	r3, [r7, #12]
 8007a3a:	89bb      	ldrh	r3, [r7, #12]
 8007a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01b      	beq.n	8007a7c <USB_DeactivateEndpoint+0x6c>
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a5a:	817b      	strh	r3, [r7, #10]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	441a      	add	r2, r3
 8007a66:	897b      	ldrh	r3, [r7, #10]
 8007a68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a92:	813b      	strh	r3, [r7, #8]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	441a      	add	r2, r3
 8007a9e:	893b      	ldrh	r3, [r7, #8]
 8007aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	8013      	strh	r3, [r2, #0]
 8007ab4:	e192      	b.n	8007ddc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	827b      	strh	r3, [r7, #18]
 8007ac4:	8a7b      	ldrh	r3, [r7, #18]
 8007ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d01b      	beq.n	8007b06 <USB_DeactivateEndpoint+0xf6>
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae4:	823b      	strh	r3, [r7, #16]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	441a      	add	r2, r3
 8007af0:	8a3b      	ldrh	r3, [r7, #16]
 8007af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007afa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b1c:	81fb      	strh	r3, [r7, #14]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	441a      	add	r2, r3
 8007b28:	89fb      	ldrh	r3, [r7, #14]
 8007b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	8013      	strh	r3, [r2, #0]
 8007b3e:	e14d      	b.n	8007ddc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	785b      	ldrb	r3, [r3, #1]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f040 80a5 	bne.w	8007c94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	843b      	strh	r3, [r7, #32]
 8007b58:	8c3b      	ldrh	r3, [r7, #32]
 8007b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01b      	beq.n	8007b9a <USB_DeactivateEndpoint+0x18a>
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b78:	83fb      	strh	r3, [r7, #30]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	441a      	add	r2, r3
 8007b84:	8bfb      	ldrh	r3, [r7, #30]
 8007b86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	83bb      	strh	r3, [r7, #28]
 8007ba8:	8bbb      	ldrh	r3, [r7, #28]
 8007baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01b      	beq.n	8007bea <USB_DeactivateEndpoint+0x1da>
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc8:	837b      	strh	r3, [r7, #26]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	8b7b      	ldrh	r3, [r7, #26]
 8007bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007be2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c00:	833b      	strh	r3, [r7, #24]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	441a      	add	r2, r3
 8007c0c:	8b3b      	ldrh	r3, [r7, #24]
 8007c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c38:	82fb      	strh	r3, [r7, #22]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	441a      	add	r2, r3
 8007c44:	8afb      	ldrh	r3, [r7, #22]
 8007c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c70:	82bb      	strh	r3, [r7, #20]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	441a      	add	r2, r3
 8007c7c:	8abb      	ldrh	r3, [r7, #20]
 8007c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	8013      	strh	r3, [r2, #0]
 8007c92:	e0a3      	b.n	8007ddc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007ca2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01b      	beq.n	8007ce4 <USB_DeactivateEndpoint+0x2d4>
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	441a      	add	r2, r3
 8007cce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007cf2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01b      	beq.n	8007d34 <USB_DeactivateEndpoint+0x324>
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d12:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	441a      	add	r2, r3
 8007d1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	441a      	add	r2, r3
 8007d56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d82:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	441a      	add	r2, r3
 8007d8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dba:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3734      	adds	r7, #52	@ 0x34
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b0c2      	sub	sp, #264	@ 0x108
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007df6:	6018      	str	r0, [r3, #0]
 8007df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e00:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	f040 86b7 	bne.w	8008b82 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	699a      	ldr	r2, [r3, #24]
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d908      	bls.n	8007e42 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e40:	e007      	b.n	8007e52 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	7b1b      	ldrb	r3, [r3, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d13a      	bne.n	8007ed8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6959      	ldr	r1, [r3, #20]
 8007e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	88da      	ldrh	r2, [r3, #6]
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e88:	6800      	ldr	r0, [r0, #0]
 8007e8a:	f001 fc9c 	bl	80097c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	4413      	add	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	011a      	lsls	r2, r3, #4
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	f000 be1f 	b.w	8008b16 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	78db      	ldrb	r3, [r3, #3]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	f040 8462 	bne.w	80087ae <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6a1a      	ldr	r2, [r3, #32]
 8007ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	f240 83df 	bls.w	80086c6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	441a      	add	r2, r3
 8007f4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f58:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6a1a      	ldr	r2, [r3, #32]
 8007f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f74:	1ad2      	subs	r2, r2, r3
 8007f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 81c7 	beq.w	8008338 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d177      	bne.n	80080b6 <USB_EPStartXfer+0x2ce>
 8007fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	4413      	add	r3, r2
 8007fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	011a      	lsls	r2, r3, #4
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800800c:	b29a      	uxth	r2, r3
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008016:	2b3e      	cmp	r3, #62	@ 0x3e
 8008018:	d921      	bls.n	800805e <USB_EPStartXfer+0x276>
 800801a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	2b00      	cmp	r3, #0
 800802e:	d104      	bne.n	800803a <USB_EPStartXfer+0x252>
 8008030:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008034:	3b01      	subs	r3, #1
 8008036:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29a      	uxth	r2, r3
 8008040:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008044:	b29b      	uxth	r3, r3
 8008046:	029b      	lsls	r3, r3, #10
 8008048:	b29b      	uxth	r3, r3
 800804a:	4313      	orrs	r3, r2
 800804c:	b29b      	uxth	r3, r3
 800804e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008056:	b29a      	uxth	r2, r3
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	e050      	b.n	8008100 <USB_EPStartXfer+0x318>
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10a      	bne.n	800807c <USB_EPStartXfer+0x294>
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	b29b      	uxth	r3, r3
 800806c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008074:	b29a      	uxth	r2, r3
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e041      	b.n	8008100 <USB_EPStartXfer+0x318>
 800807c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008080:	085b      	lsrs	r3, r3, #1
 8008082:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d004      	beq.n	800809c <USB_EPStartXfer+0x2b4>
 8008092:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008096:	3301      	adds	r3, #1
 8008098:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	029b      	lsls	r3, r3, #10
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	801a      	strh	r2, [r3, #0]
 80080b4:	e024      	b.n	8008100 <USB_EPStartXfer+0x318>
 80080b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d11c      	bne.n	8008100 <USB_EPStartXfer+0x318>
 80080c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	4413      	add	r3, r2
 80080dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80080de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	011a      	lsls	r2, r3, #4
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	4413      	add	r3, r2
 80080f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	895b      	ldrh	r3, [r3, #10]
 800810c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6959      	ldr	r1, [r3, #20]
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008120:	b29b      	uxth	r3, r3
 8008122:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008126:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800812a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	f001 fb49 	bl	80097c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	695a      	ldr	r2, [r3, #20]
 8008140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008144:	441a      	add	r2, r3
 8008146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6a1a      	ldr	r2, [r3, #32]
 800815e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d90f      	bls.n	800818e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800816e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6a1a      	ldr	r2, [r3, #32]
 800817a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	621a      	str	r2, [r3, #32]
 800818c:	e00e      	b.n	80081ac <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800818e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800819e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2200      	movs	r2, #0
 80081aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80081ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d177      	bne.n	80082ac <USB_EPStartXfer+0x4c4>
 80081bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	61bb      	str	r3, [r7, #24]
 80081c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	4413      	add	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]
 80081e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	011a      	lsls	r2, r3, #4
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	4413      	add	r3, r2
 80081f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008202:	b29a      	uxth	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	801a      	strh	r2, [r3, #0]
 8008208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820c:	2b3e      	cmp	r3, #62	@ 0x3e
 800820e:	d921      	bls.n	8008254 <USB_EPStartXfer+0x46c>
 8008210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008214:	095b      	lsrs	r3, r3, #5
 8008216:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800821a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	2b00      	cmp	r3, #0
 8008224:	d104      	bne.n	8008230 <USB_EPStartXfer+0x448>
 8008226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800822a:	3b01      	subs	r3, #1
 800822c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800823a:	b29b      	uxth	r3, r3
 800823c:	029b      	lsls	r3, r3, #10
 800823e:	b29b      	uxth	r3, r3
 8008240:	4313      	orrs	r3, r2
 8008242:	b29b      	uxth	r3, r3
 8008244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824c:	b29a      	uxth	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	e056      	b.n	8008302 <USB_EPStartXfer+0x51a>
 8008254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <USB_EPStartXfer+0x48a>
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	b29b      	uxth	r3, r3
 8008262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826a:	b29a      	uxth	r2, r3
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	e047      	b.n	8008302 <USB_EPStartXfer+0x51a>
 8008272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800827c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <USB_EPStartXfer+0x4aa>
 8008288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800828c:	3301      	adds	r3, #1
 800828e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29a      	uxth	r2, r3
 8008298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	4313      	orrs	r3, r2
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	e02a      	b.n	8008302 <USB_EPStartXfer+0x51a>
 80082ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d122      	bne.n	8008302 <USB_EPStartXfer+0x51a>
 80082bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	623b      	str	r3, [r7, #32]
 80082c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	4413      	add	r3, r2
 80082de:	623b      	str	r3, [r7, #32]
 80082e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	011a      	lsls	r2, r3, #4
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	4413      	add	r3, r2
 80082f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082f6:	61fb      	str	r3, [r7, #28]
 80082f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	891b      	ldrh	r3, [r3, #8]
 800830e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6959      	ldr	r1, [r3, #20]
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008322:	b29b      	uxth	r3, r3
 8008324:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008328:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800832c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008330:	6800      	ldr	r0, [r0, #0]
 8008332:	f001 fa48 	bl	80097c6 <USB_WritePMA>
 8008336:	e3ee      	b.n	8008b16 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d177      	bne.n	8008438 <USB_EPStartXfer+0x650>
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008362:	b29b      	uxth	r3, r3
 8008364:	461a      	mov	r2, r3
 8008366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008368:	4413      	add	r3, r2
 800836a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	011a      	lsls	r2, r3, #4
 800837a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800837c:	4413      	add	r3, r2
 800837e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008382:	647b      	str	r3, [r7, #68]	@ 0x44
 8008384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	b29b      	uxth	r3, r3
 800838a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800838e:	b29a      	uxth	r2, r3
 8008390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008392:	801a      	strh	r2, [r3, #0]
 8008394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008398:	2b3e      	cmp	r3, #62	@ 0x3e
 800839a:	d921      	bls.n	80083e0 <USB_EPStartXfer+0x5f8>
 800839c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80083a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083aa:	f003 031f 	and.w	r3, r3, #31
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d104      	bne.n	80083bc <USB_EPStartXfer+0x5d4>
 80083b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80083b6:	3b01      	subs	r3, #1
 80083b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80083bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	029b      	lsls	r3, r3, #10
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	4313      	orrs	r3, r2
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d8:	b29a      	uxth	r2, r3
 80083da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	e056      	b.n	800848e <USB_EPStartXfer+0x6a6>
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <USB_EPStartXfer+0x616>
 80083e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083fa:	801a      	strh	r2, [r3, #0]
 80083fc:	e047      	b.n	800848e <USB_EPStartXfer+0x6a6>
 80083fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <USB_EPStartXfer+0x636>
 8008414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008418:	3301      	adds	r3, #1
 800841a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800841e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	b29a      	uxth	r2, r3
 8008424:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008428:	b29b      	uxth	r3, r3
 800842a:	029b      	lsls	r3, r3, #10
 800842c:	b29b      	uxth	r3, r3
 800842e:	4313      	orrs	r3, r2
 8008430:	b29a      	uxth	r2, r3
 8008432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	e02a      	b.n	800848e <USB_EPStartXfer+0x6a6>
 8008438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d122      	bne.n	800848e <USB_EPStartXfer+0x6a6>
 8008448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	653b      	str	r3, [r7, #80]	@ 0x50
 8008454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008462:	b29b      	uxth	r3, r3
 8008464:	461a      	mov	r2, r3
 8008466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008468:	4413      	add	r3, r2
 800846a:	653b      	str	r3, [r7, #80]	@ 0x50
 800846c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	011a      	lsls	r2, r3, #4
 800847a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800847c:	4413      	add	r3, r2
 800847e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008488:	b29a      	uxth	r2, r3
 800848a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800848c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800848e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	891b      	ldrh	r3, [r3, #8]
 800849a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800849e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6959      	ldr	r1, [r3, #20]
 80084aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084bc:	6800      	ldr	r0, [r0, #0]
 80084be:	f001 f982 	bl	80097c6 <USB_WritePMA>
            ep->xfer_buff += len;
 80084c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695a      	ldr	r2, [r3, #20]
 80084ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d2:	441a      	add	r2, r3
 80084d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6a1a      	ldr	r2, [r3, #32]
 80084ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d90f      	bls.n	800851c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80084fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6a1a      	ldr	r2, [r3, #32]
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850c:	1ad2      	subs	r2, r2, r3
 800850e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	621a      	str	r2, [r3, #32]
 800851a:	e00e      	b.n	800853a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800851c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800852c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2200      	movs	r2, #0
 8008538:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800853a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	643b      	str	r3, [r7, #64]	@ 0x40
 8008546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d177      	bne.n	8008646 <USB_EPStartXfer+0x85e>
 8008556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008570:	b29b      	uxth	r3, r3
 8008572:	461a      	mov	r2, r3
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	4413      	add	r3, r2
 8008578:	63bb      	str	r3, [r7, #56]	@ 0x38
 800857a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	011a      	lsls	r2, r3, #4
 8008588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858a:	4413      	add	r3, r2
 800858c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008590:	637b      	str	r3, [r7, #52]	@ 0x34
 8008592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800859c:	b29a      	uxth	r2, r3
 800859e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a0:	801a      	strh	r2, [r3, #0]
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80085a8:	d921      	bls.n	80085ee <USB_EPStartXfer+0x806>
 80085aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80085b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b8:	f003 031f 	and.w	r3, r3, #31
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <USB_EPStartXfer+0x7e2>
 80085c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c4:	3b01      	subs	r3, #1
 80085c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80085ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	029b      	lsls	r3, r3, #10
 80085d8:	b29b      	uxth	r3, r3
 80085da:	4313      	orrs	r3, r2
 80085dc:	b29b      	uxth	r3, r3
 80085de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ea:	801a      	strh	r2, [r3, #0]
 80085ec:	e050      	b.n	8008690 <USB_EPStartXfer+0x8a8>
 80085ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <USB_EPStartXfer+0x824>
 80085f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008604:	b29a      	uxth	r2, r3
 8008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008608:	801a      	strh	r2, [r3, #0]
 800860a:	e041      	b.n	8008690 <USB_EPStartXfer+0x8a8>
 800860c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <USB_EPStartXfer+0x844>
 8008622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008626:	3301      	adds	r3, #1
 8008628:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800862c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b29a      	uxth	r2, r3
 8008632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008636:	b29b      	uxth	r3, r3
 8008638:	029b      	lsls	r3, r3, #10
 800863a:	b29b      	uxth	r3, r3
 800863c:	4313      	orrs	r3, r2
 800863e:	b29a      	uxth	r2, r3
 8008640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008642:	801a      	strh	r2, [r3, #0]
 8008644:	e024      	b.n	8008690 <USB_EPStartXfer+0x8a8>
 8008646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	785b      	ldrb	r3, [r3, #1]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d11c      	bne.n	8008690 <USB_EPStartXfer+0x8a8>
 8008656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008664:	b29b      	uxth	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800866a:	4413      	add	r3, r2
 800866c:	643b      	str	r3, [r7, #64]	@ 0x40
 800866e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	011a      	lsls	r2, r3, #4
 800867c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800867e:	4413      	add	r3, r2
 8008680:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868a:	b29a      	uxth	r2, r3
 800868c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800868e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	895b      	ldrh	r3, [r3, #10]
 800869c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6959      	ldr	r1, [r3, #20]
 80086ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80086ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	f001 f881 	bl	80097c6 <USB_WritePMA>
 80086c4:	e227      	b.n	8008b16 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80086c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80086d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80086f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086fc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	441a      	add	r2, r3
 800871a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800871e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800872a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800872e:	b29b      	uxth	r3, r3
 8008730:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800873e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800874c:	b29b      	uxth	r3, r3
 800874e:	461a      	mov	r2, r3
 8008750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008752:	4413      	add	r3, r2
 8008754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	011a      	lsls	r2, r3, #4
 8008764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008766:	4413      	add	r3, r2
 8008768:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800876c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800876e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008772:	b29a      	uxth	r2, r3
 8008774:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008776:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	891b      	ldrh	r3, [r3, #8]
 8008784:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6959      	ldr	r1, [r3, #20]
 8008794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008798:	b29b      	uxth	r3, r3
 800879a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800879e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80087a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80087a6:	6800      	ldr	r0, [r0, #0]
 80087a8:	f001 f80d 	bl	80097c6 <USB_WritePMA>
 80087ac:	e1b3      	b.n	8008b16 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80087ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6a1a      	ldr	r2, [r3, #32]
 80087ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80c6 	beq.w	8008980 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8008800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d177      	bne.n	8008900 <USB_EPStartXfer+0xb18>
 8008810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800881c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800882a:	b29b      	uxth	r3, r3
 800882c:	461a      	mov	r2, r3
 800882e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008830:	4413      	add	r3, r2
 8008832:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	011a      	lsls	r2, r3, #4
 8008842:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008844:	4413      	add	r3, r2
 8008846:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800884a:	667b      	str	r3, [r7, #100]	@ 0x64
 800884c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008856:	b29a      	uxth	r2, r3
 8008858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008860:	2b3e      	cmp	r3, #62	@ 0x3e
 8008862:	d921      	bls.n	80088a8 <USB_EPStartXfer+0xac0>
 8008864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008868:	095b      	lsrs	r3, r3, #5
 800886a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800886e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008872:	f003 031f 	and.w	r3, r3, #31
 8008876:	2b00      	cmp	r3, #0
 8008878:	d104      	bne.n	8008884 <USB_EPStartXfer+0xa9c>
 800887a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800887e:	3b01      	subs	r3, #1
 8008880:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008884:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29a      	uxth	r2, r3
 800888a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800888e:	b29b      	uxth	r3, r3
 8008890:	029b      	lsls	r3, r3, #10
 8008892:	b29b      	uxth	r3, r3
 8008894:	4313      	orrs	r3, r2
 8008896:	b29b      	uxth	r3, r3
 8008898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088a4:	801a      	strh	r2, [r3, #0]
 80088a6:	e050      	b.n	800894a <USB_EPStartXfer+0xb62>
 80088a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <USB_EPStartXfer+0xade>
 80088b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088be:	b29a      	uxth	r2, r3
 80088c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088c2:	801a      	strh	r2, [r3, #0]
 80088c4:	e041      	b.n	800894a <USB_EPStartXfer+0xb62>
 80088c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ca:	085b      	lsrs	r3, r3, #1
 80088cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80088d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <USB_EPStartXfer+0xafe>
 80088dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80088e0:	3301      	adds	r3, #1
 80088e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80088e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	029b      	lsls	r3, r3, #10
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4313      	orrs	r3, r2
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088fc:	801a      	strh	r2, [r3, #0]
 80088fe:	e024      	b.n	800894a <USB_EPStartXfer+0xb62>
 8008900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d11c      	bne.n	800894a <USB_EPStartXfer+0xb62>
 8008910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800891e:	b29b      	uxth	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008924:	4413      	add	r3, r2
 8008926:	673b      	str	r3, [r7, #112]	@ 0x70
 8008928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	011a      	lsls	r2, r3, #4
 8008936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008938:	4413      	add	r3, r2
 800893a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800893e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008944:	b29a      	uxth	r2, r3
 8008946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008948:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800894a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800894e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	895b      	ldrh	r3, [r3, #10]
 8008956:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800895a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6959      	ldr	r1, [r3, #20]
 8008966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800896a:	b29b      	uxth	r3, r3
 800896c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008970:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008974:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008978:	6800      	ldr	r0, [r0, #0]
 800897a:	f000 ff24 	bl	80097c6 <USB_WritePMA>
 800897e:	e0ca      	b.n	8008b16 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d177      	bne.n	8008a80 <USB_EPStartXfer+0xc98>
 8008990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800899c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089b0:	4413      	add	r3, r2
 80089b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	011a      	lsls	r2, r3, #4
 80089c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089c4:	4413      	add	r3, r2
 80089c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80089ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089da:	801a      	strh	r2, [r3, #0]
 80089dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80089e2:	d921      	bls.n	8008a28 <USB_EPStartXfer+0xc40>
 80089e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e8:	095b      	lsrs	r3, r3, #5
 80089ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80089ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f2:	f003 031f 	and.w	r3, r3, #31
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d104      	bne.n	8008a04 <USB_EPStartXfer+0xc1c>
 80089fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80089fe:	3b01      	subs	r3, #1
 8008a00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	029b      	lsls	r3, r3, #10
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	4313      	orrs	r3, r2
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a24:	801a      	strh	r2, [r3, #0]
 8008a26:	e05c      	b.n	8008ae2 <USB_EPStartXfer+0xcfa>
 8008a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10a      	bne.n	8008a46 <USB_EPStartXfer+0xc5e>
 8008a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	e04d      	b.n	8008ae2 <USB_EPStartXfer+0xcfa>
 8008a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <USB_EPStartXfer+0xc7e>
 8008a5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a60:	3301      	adds	r3, #1
 8008a62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	029b      	lsls	r3, r3, #10
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	4313      	orrs	r3, r2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a7c:	801a      	strh	r2, [r3, #0]
 8008a7e:	e030      	b.n	8008ae2 <USB_EPStartXfer+0xcfa>
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d128      	bne.n	8008ae2 <USB_EPStartXfer+0xcfa>
 8008a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	011a      	lsls	r2, r3, #4
 8008ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008acc:	4413      	add	r3, r2
 8008ace:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008ad2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ae0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	891b      	ldrh	r3, [r3, #8]
 8008aee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6959      	ldr	r1, [r3, #20]
 8008afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b08:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b0c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b10:	6800      	ldr	r0, [r0, #0]
 8008b12:	f000 fe58 	bl	80097c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b3c:	817b      	strh	r3, [r7, #10]
 8008b3e:	897b      	ldrh	r3, [r7, #10]
 8008b40:	f083 0310 	eor.w	r3, r3, #16
 8008b44:	817b      	strh	r3, [r7, #10]
 8008b46:	897b      	ldrh	r3, [r7, #10]
 8008b48:	f083 0320 	eor.w	r3, r3, #32
 8008b4c:	817b      	strh	r3, [r7, #10]
 8008b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	441a      	add	r2, r3
 8008b68:	897b      	ldrh	r3, [r7, #10]
 8008b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	8013      	strh	r3, [r2, #0]
 8008b7e:	f000 bcde 	b.w	800953e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	7b1b      	ldrb	r3, [r3, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 80bb 	bne.w	8008d0a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	699a      	ldr	r2, [r3, #24]
 8008ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d917      	bls.n	8008be0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	699a      	ldr	r2, [r3, #24]
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd0:	1ad2      	subs	r2, r2, r3
 8008bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	619a      	str	r2, [r3, #24]
 8008bde:	e00e      	b.n	8008bfe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c22:	4413      	add	r3, r2
 8008c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	011a      	lsls	r2, r3, #4
 8008c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c5e:	d924      	bls.n	8008caa <USB_EPStartXfer+0xec2>
 8008c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6e:	f003 031f 	and.w	r3, r3, #31
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <USB_EPStartXfer+0xe98>
 8008c76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	029b      	lsls	r3, r3, #10
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4313      	orrs	r3, r2
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	f000 bc10 	b.w	80094ca <USB_EPStartXfer+0x16e2>
 8008caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10c      	bne.n	8008ccc <USB_EPStartXfer+0xee4>
 8008cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cc8:	801a      	strh	r2, [r3, #0]
 8008cca:	e3fe      	b.n	80094ca <USB_EPStartXfer+0x16e2>
 8008ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd0:	085b      	lsrs	r3, r3, #1
 8008cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <USB_EPStartXfer+0xf04>
 8008ce2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	029b      	lsls	r3, r3, #10
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d06:	801a      	strh	r2, [r3, #0]
 8008d08:	e3df      	b.n	80094ca <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	78db      	ldrb	r3, [r3, #3]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	f040 8218 	bne.w	800914c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f040 809d 	bne.w	8008e68 <USB_EPStartXfer+0x1080>
 8008d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d52:	4413      	add	r3, r2
 8008d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	011a      	lsls	r2, r3, #4
 8008d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d86:	801a      	strh	r2, [r3, #0]
 8008d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d96:	d92b      	bls.n	8008df0 <USB_EPStartXfer+0x1008>
 8008d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	095b      	lsrs	r3, r3, #5
 8008da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 031f 	and.w	r3, r3, #31
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <USB_EPStartXfer+0xfe0>
 8008dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	029b      	lsls	r3, r3, #10
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008dec:	801a      	strh	r2, [r3, #0]
 8008dee:	e070      	b.n	8008ed2 <USB_EPStartXfer+0x10ea>
 8008df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10c      	bne.n	8008e1a <USB_EPStartXfer+0x1032>
 8008e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e16:	801a      	strh	r2, [r3, #0]
 8008e18:	e05b      	b.n	8008ed2 <USB_EPStartXfer+0x10ea>
 8008e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	085b      	lsrs	r3, r3, #1
 8008e28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <USB_EPStartXfer+0x1062>
 8008e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e44:	3301      	adds	r3, #1
 8008e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	029b      	lsls	r3, r3, #10
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e64:	801a      	strh	r2, [r3, #0]
 8008e66:	e034      	b.n	8008ed2 <USB_EPStartXfer+0x10ea>
 8008e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d12c      	bne.n	8008ed2 <USB_EPStartXfer+0x10ea>
 8008e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	011a      	lsls	r2, r3, #4
 8008eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008ed0:	801a      	strh	r2, [r3, #0]
 8008ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f040 809d 	bne.w	800902c <USB_EPStartXfer+0x1244>
 8008ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f16:	4413      	add	r3, r2
 8008f18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	011a      	lsls	r2, r3, #4
 8008f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f2e:	4413      	add	r3, r2
 8008f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f4a:	801a      	strh	r2, [r3, #0]
 8008f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f5a:	d92b      	bls.n	8008fb4 <USB_EPStartXfer+0x11cc>
 8008f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	095b      	lsrs	r3, r3, #5
 8008f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	f003 031f 	and.w	r3, r3, #31
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <USB_EPStartXfer+0x11a4>
 8008f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f86:	3b01      	subs	r3, #1
 8008f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	029b      	lsls	r3, r3, #10
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fb0:	801a      	strh	r2, [r3, #0]
 8008fb2:	e069      	b.n	8009088 <USB_EPStartXfer+0x12a0>
 8008fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10c      	bne.n	8008fde <USB_EPStartXfer+0x11f6>
 8008fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fda:	801a      	strh	r2, [r3, #0]
 8008fdc:	e054      	b.n	8009088 <USB_EPStartXfer+0x12a0>
 8008fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d004      	beq.n	800900e <USB_EPStartXfer+0x1226>
 8009004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009008:	3301      	adds	r3, #1
 800900a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800900e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29a      	uxth	r2, r3
 8009016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800901a:	b29b      	uxth	r3, r3
 800901c:	029b      	lsls	r3, r3, #10
 800901e:	b29b      	uxth	r3, r3
 8009020:	4313      	orrs	r3, r2
 8009022:	b29a      	uxth	r2, r3
 8009024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009028:	801a      	strh	r2, [r3, #0]
 800902a:	e02d      	b.n	8009088 <USB_EPStartXfer+0x12a0>
 800902c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	785b      	ldrb	r3, [r3, #1]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d125      	bne.n	8009088 <USB_EPStartXfer+0x12a0>
 800903c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009040:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800904a:	b29b      	uxth	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009052:	4413      	add	r3, r2
 8009054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	011a      	lsls	r2, r3, #4
 8009066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800906a:	4413      	add	r3, r2
 800906c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009070:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	b29a      	uxth	r2, r3
 8009082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009086:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69db      	ldr	r3, [r3, #28]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8218 	beq.w	80094ca <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800909a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800909e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80090ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80090be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <USB_EPStartXfer+0x12ea>
 80090c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80090ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10d      	bne.n	80090ee <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80090d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80090d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f040 81f5 	bne.w	80094ca <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80090e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80090e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f040 81ee 	bne.w	80094ca <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80090ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009114:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800911c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	441a      	add	r2, r3
 8009132:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800913a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800913e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009142:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009146:	b29b      	uxth	r3, r3
 8009148:	8013      	strh	r3, [r2, #0]
 800914a:	e1be      	b.n	80094ca <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800914c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	78db      	ldrb	r3, [r3, #3]
 8009158:	2b01      	cmp	r3, #1
 800915a:	f040 81b4 	bne.w	80094c6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800915e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	699a      	ldr	r2, [r3, #24]
 800916a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800916e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	429a      	cmp	r2, r3
 8009178:	d917      	bls.n	80091aa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800917a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800918a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699a      	ldr	r2, [r3, #24]
 8009196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800919a:	1ad2      	subs	r2, r2, r3
 800919c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	619a      	str	r2, [r3, #24]
 80091a8:	e00e      	b.n	80091c8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80091aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80091ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2200      	movs	r2, #0
 80091c6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80091c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 8085 	bne.w	80092e4 <USB_EPStartXfer+0x14fc>
 80091da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80091fe:	4413      	add	r3, r2
 8009200:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	011a      	lsls	r2, r3, #4
 8009212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009216:	4413      	add	r3, r2
 8009218:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800921c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009220:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800922c:	b29a      	uxth	r2, r3
 800922e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009238:	2b3e      	cmp	r3, #62	@ 0x3e
 800923a:	d923      	bls.n	8009284 <USB_EPStartXfer+0x149c>
 800923c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009240:	095b      	lsrs	r3, r3, #5
 8009242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	2b00      	cmp	r3, #0
 8009250:	d104      	bne.n	800925c <USB_EPStartXfer+0x1474>
 8009252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009256:	3b01      	subs	r3, #1
 8009258:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800925c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	b29a      	uxth	r2, r3
 8009264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009268:	b29b      	uxth	r3, r3
 800926a:	029b      	lsls	r3, r3, #10
 800926c:	b29b      	uxth	r3, r3
 800926e:	4313      	orrs	r3, r2
 8009270:	b29b      	uxth	r3, r3
 8009272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927a:	b29a      	uxth	r2, r3
 800927c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009280:	801a      	strh	r2, [r3, #0]
 8009282:	e060      	b.n	8009346 <USB_EPStartXfer+0x155e>
 8009284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10c      	bne.n	80092a6 <USB_EPStartXfer+0x14be>
 800928c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800929c:	b29a      	uxth	r2, r3
 800929e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092a2:	801a      	strh	r2, [r3, #0]
 80092a4:	e04f      	b.n	8009346 <USB_EPStartXfer+0x155e>
 80092a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092aa:	085b      	lsrs	r3, r3, #1
 80092ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <USB_EPStartXfer+0x14de>
 80092bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092c0:	3301      	adds	r3, #1
 80092c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	029b      	lsls	r3, r3, #10
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	4313      	orrs	r3, r2
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092e0:	801a      	strh	r2, [r3, #0]
 80092e2:	e030      	b.n	8009346 <USB_EPStartXfer+0x155e>
 80092e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d128      	bne.n	8009346 <USB_EPStartXfer+0x155e>
 80092f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009310:	b29b      	uxth	r3, r3
 8009312:	461a      	mov	r2, r3
 8009314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009318:	4413      	add	r3, r2
 800931a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800931e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	011a      	lsls	r2, r3, #4
 800932c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009330:	4413      	add	r3, r2
 8009332:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009336:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800933a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800933e:	b29a      	uxth	r2, r3
 8009340:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009344:	801a      	strh	r2, [r3, #0]
 8009346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f040 8085 	bne.w	8009470 <USB_EPStartXfer+0x1688>
 8009366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800936a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009382:	b29b      	uxth	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800938a:	4413      	add	r3, r2
 800938c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	011a      	lsls	r2, r3, #4
 800939e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80093a2:	4413      	add	r3, r2
 80093a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80093a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80093c6:	d923      	bls.n	8009410 <USB_EPStartXfer+0x1628>
 80093c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093cc:	095b      	lsrs	r3, r3, #5
 80093ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d104      	bne.n	80093e8 <USB_EPStartXfer+0x1600>
 80093de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093e2:	3b01      	subs	r3, #1
 80093e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	029b      	lsls	r3, r3, #10
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	4313      	orrs	r3, r2
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009406:	b29a      	uxth	r2, r3
 8009408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800940c:	801a      	strh	r2, [r3, #0]
 800940e:	e05c      	b.n	80094ca <USB_EPStartXfer+0x16e2>
 8009410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10c      	bne.n	8009432 <USB_EPStartXfer+0x164a>
 8009418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29b      	uxth	r3, r3
 8009420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	e04b      	b.n	80094ca <USB_EPStartXfer+0x16e2>
 8009432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800943c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <USB_EPStartXfer+0x166a>
 8009448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800944c:	3301      	adds	r3, #1
 800944e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	b29a      	uxth	r2, r3
 800945a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800945e:	b29b      	uxth	r3, r3
 8009460:	029b      	lsls	r3, r3, #10
 8009462:	b29b      	uxth	r3, r3
 8009464:	4313      	orrs	r3, r2
 8009466:	b29a      	uxth	r2, r3
 8009468:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800946c:	801a      	strh	r2, [r3, #0]
 800946e:	e02c      	b.n	80094ca <USB_EPStartXfer+0x16e2>
 8009470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	785b      	ldrb	r3, [r3, #1]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d124      	bne.n	80094ca <USB_EPStartXfer+0x16e2>
 8009480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800948e:	b29b      	uxth	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009496:	4413      	add	r3, r2
 8009498:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800949c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	011a      	lsls	r2, r3, #4
 80094aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80094ae:	4413      	add	r3, r2
 80094b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80094b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094bc:	b29a      	uxth	r2, r3
 80094be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094c2:	801a      	strh	r2, [r3, #0]
 80094c4:	e001      	b.n	80094ca <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e03a      	b.n	8009540 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80094f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80094f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80094fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009500:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009504:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009508:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800950c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009510:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	441a      	add	r2, r3
 8009526:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800952a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800952e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800953a:	b29b      	uxth	r3, r3
 800953c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800954a:	b480      	push	{r7}
 800954c:	b085      	sub	sp, #20
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d020      	beq.n	800959e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	b29b      	uxth	r3, r3
 800956a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800956e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009572:	81bb      	strh	r3, [r7, #12]
 8009574:	89bb      	ldrh	r3, [r7, #12]
 8009576:	f083 0310 	eor.w	r3, r3, #16
 800957a:	81bb      	strh	r3, [r7, #12]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	441a      	add	r2, r3
 8009586:	89bb      	ldrh	r3, [r7, #12]
 8009588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800958c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009598:	b29b      	uxth	r3, r3
 800959a:	8013      	strh	r3, [r2, #0]
 800959c:	e01f      	b.n	80095de <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095b4:	81fb      	strh	r3, [r7, #14]
 80095b6:	89fb      	ldrh	r3, [r7, #14]
 80095b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80095bc:	81fb      	strh	r3, [r7, #14]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	441a      	add	r2, r3
 80095c8:	89fb      	ldrh	r3, [r7, #14]
 80095ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095da:	b29b      	uxth	r3, r3
 80095dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bc80      	pop	{r7}
 80095e8:	4770      	bx	lr

080095ea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b087      	sub	sp, #28
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	7b1b      	ldrb	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f040 809d 	bne.w	8009738 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	785b      	ldrb	r3, [r3, #1]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d04c      	beq.n	80096a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	823b      	strh	r3, [r7, #16]
 8009614:	8a3b      	ldrh	r3, [r7, #16]
 8009616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d01b      	beq.n	8009656 <USB_EPClearStall+0x6c>
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	b29b      	uxth	r3, r3
 800962c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009634:	81fb      	strh	r3, [r7, #14]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	441a      	add	r2, r3
 8009640:	89fb      	ldrh	r3, [r7, #14]
 8009642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800964a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800964e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009652:	b29b      	uxth	r3, r3
 8009654:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	78db      	ldrb	r3, [r3, #3]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d06c      	beq.n	8009738 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	b29b      	uxth	r3, r3
 800966c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009674:	81bb      	strh	r3, [r7, #12]
 8009676:	89bb      	ldrh	r3, [r7, #12]
 8009678:	f083 0320 	eor.w	r3, r3, #32
 800967c:	81bb      	strh	r3, [r7, #12]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	441a      	add	r2, r3
 8009688:	89bb      	ldrh	r3, [r7, #12]
 800968a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800968e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969a:	b29b      	uxth	r3, r3
 800969c:	8013      	strh	r3, [r2, #0]
 800969e:	e04b      	b.n	8009738 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	82fb      	strh	r3, [r7, #22]
 80096ae:	8afb      	ldrh	r3, [r7, #22]
 80096b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01b      	beq.n	80096f0 <USB_EPClearStall+0x106>
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ce:	82bb      	strh	r3, [r7, #20]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	441a      	add	r2, r3
 80096da:	8abb      	ldrh	r3, [r7, #20]
 80096dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80096e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009706:	827b      	strh	r3, [r7, #18]
 8009708:	8a7b      	ldrh	r3, [r7, #18]
 800970a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800970e:	827b      	strh	r3, [r7, #18]
 8009710:	8a7b      	ldrh	r3, [r7, #18]
 8009712:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009716:	827b      	strh	r3, [r7, #18]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	441a      	add	r2, r3
 8009722:	8a7b      	ldrh	r3, [r7, #18]
 8009724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800972c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009734:	b29b      	uxth	r3, r3
 8009736:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr

08009744 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2280      	movs	r2, #128	@ 0x80
 800975a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	bc80      	pop	{r7}
 8009768:	4770      	bx	lr

0800976a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bc80      	pop	{r7}
 800977c:	4770      	bx	lr

0800977e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	bc80      	pop	{r7}
 8009790:	4770      	bx	lr

08009792 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bc80      	pop	{r7}
 80097ae:	4770      	bx	lr

080097b0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr

080097c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b08b      	sub	sp, #44	@ 0x2c
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	4611      	mov	r1, r2
 80097d2:	461a      	mov	r2, r3
 80097d4:	460b      	mov	r3, r1
 80097d6:	80fb      	strh	r3, [r7, #6]
 80097d8:	4613      	mov	r3, r2
 80097da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80097dc:	88bb      	ldrh	r3, [r7, #4]
 80097de:	3301      	adds	r3, #1
 80097e0:	085b      	lsrs	r3, r3, #1
 80097e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80097ec:	88fb      	ldrh	r3, [r7, #6]
 80097ee:	005a      	lsls	r2, r3, #1
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80097fe:	e01f      	b.n	8009840 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	3301      	adds	r3, #1
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	b21b      	sxth	r3, r3
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	b21a      	sxth	r2, r3
 8009812:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009816:	4313      	orrs	r3, r2
 8009818:	b21b      	sxth	r3, r3
 800981a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	8a7a      	ldrh	r2, [r7, #18]
 8009820:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	3302      	adds	r3, #2
 8009826:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	3302      	adds	r3, #2
 800982c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	3301      	adds	r3, #1
 8009832:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983c:	3b01      	subs	r3, #1
 800983e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1dc      	bne.n	8009800 <USB_WritePMA+0x3a>
  }
}
 8009846:	bf00      	nop
 8009848:	bf00      	nop
 800984a:	372c      	adds	r7, #44	@ 0x2c
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr

08009852 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009852:	b480      	push	{r7}
 8009854:	b08b      	sub	sp, #44	@ 0x2c
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	4611      	mov	r1, r2
 800985e:	461a      	mov	r2, r3
 8009860:	460b      	mov	r3, r1
 8009862:	80fb      	strh	r3, [r7, #6]
 8009864:	4613      	mov	r3, r2
 8009866:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009868:	88bb      	ldrh	r3, [r7, #4]
 800986a:	085b      	lsrs	r3, r3, #1
 800986c:	b29b      	uxth	r3, r3
 800986e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	005a      	lsls	r2, r3, #1
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009884:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24
 800988a:	e01b      	b.n	80098c4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	b29b      	uxth	r3, r3
 8009892:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	3302      	adds	r3, #2
 8009898:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	3301      	adds	r3, #1
 80098a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	0a1b      	lsrs	r3, r3, #8
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	3301      	adds	r3, #1
 80098b6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	3302      	adds	r3, #2
 80098bc:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	3b01      	subs	r3, #1
 80098c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e0      	bne.n	800988c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80098ca:	88bb      	ldrh	r3, [r7, #4]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d007      	beq.n	80098e6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	701a      	strb	r2, [r3, #0]
  }
}
 80098e6:	bf00      	nop
 80098e8:	372c      	adds	r7, #44	@ 0x2c
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bc80      	pop	{r7}
 80098ee:	4770      	bx	lr

080098f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	7c1b      	ldrb	r3, [r3, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d115      	bne.n	8009934 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800990c:	2202      	movs	r2, #2
 800990e:	2181      	movs	r1, #129	@ 0x81
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f001 fe3a 	bl	800b58a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800991c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009920:	2202      	movs	r2, #2
 8009922:	2101      	movs	r1, #1
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f001 fe30 	bl	800b58a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009932:	e012      	b.n	800995a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009934:	2340      	movs	r3, #64	@ 0x40
 8009936:	2202      	movs	r2, #2
 8009938:	2181      	movs	r1, #129	@ 0x81
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f001 fe25 	bl	800b58a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009946:	2340      	movs	r3, #64	@ 0x40
 8009948:	2202      	movs	r2, #2
 800994a:	2101      	movs	r1, #1
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 fe1c 	bl	800b58a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800995a:	2308      	movs	r3, #8
 800995c:	2203      	movs	r2, #3
 800995e:	2182      	movs	r1, #130	@ 0x82
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 fe12 	bl	800b58a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800996c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009970:	f001 ff32 	bl	800b7d8 <USBD_static_malloc>
 8009974:	4602      	mov	r2, r0
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009982:	2b00      	cmp	r3, #0
 8009984:	d102      	bne.n	800998c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009986:	2301      	movs	r3, #1
 8009988:	73fb      	strb	r3, [r7, #15]
 800998a:	e026      	b.n	80099da <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009992:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	7c1b      	ldrb	r3, [r3, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d109      	bne.n	80099ca <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099c0:	2101      	movs	r1, #1
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 fed1 	bl	800b76a <USBD_LL_PrepareReceive>
 80099c8:	e007      	b.n	80099da <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099d0:	2340      	movs	r3, #64	@ 0x40
 80099d2:	2101      	movs	r1, #1
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 fec8 	bl	800b76a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80099f4:	2181      	movs	r1, #129	@ 0x81
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 fded 	bl	800b5d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009a02:	2101      	movs	r1, #1
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f001 fde6 	bl	800b5d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009a12:	2182      	movs	r1, #130	@ 0x82
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 fdde 	bl	800b5d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00e      	beq.n	8009a48 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f001 fed8 	bl	800b7f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b086      	sub	sp, #24
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a62:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d039      	beq.n	8009af0 <USBD_CDC_Setup+0x9e>
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d17f      	bne.n	8009b80 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	88db      	ldrh	r3, [r3, #6]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d029      	beq.n	8009adc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	b25b      	sxtb	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da11      	bge.n	8009ab6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009a9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	88d2      	ldrh	r2, [r2, #6]
 8009aa4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009aa6:	6939      	ldr	r1, [r7, #16]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	88db      	ldrh	r3, [r3, #6]
 8009aac:	461a      	mov	r2, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 f9d6 	bl	800ae60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009ab4:	e06b      	b.n	8009b8e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	785a      	ldrb	r2, [r3, #1]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	88db      	ldrh	r3, [r3, #6]
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009acc:	6939      	ldr	r1, [r7, #16]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	88db      	ldrh	r3, [r3, #6]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 f9f1 	bl	800aebc <USBD_CtlPrepareRx>
      break;
 8009ada:	e058      	b.n	8009b8e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	7850      	ldrb	r0, [r2, #1]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	4798      	blx	r3
      break;
 8009aee:	e04e      	b.n	8009b8e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	785b      	ldrb	r3, [r3, #1]
 8009af4:	2b0b      	cmp	r3, #11
 8009af6:	d02e      	beq.n	8009b56 <USBD_CDC_Setup+0x104>
 8009af8:	2b0b      	cmp	r3, #11
 8009afa:	dc38      	bgt.n	8009b6e <USBD_CDC_Setup+0x11c>
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <USBD_CDC_Setup+0xb4>
 8009b00:	2b0a      	cmp	r3, #10
 8009b02:	d014      	beq.n	8009b2e <USBD_CDC_Setup+0xdc>
 8009b04:	e033      	b.n	8009b6e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d107      	bne.n	8009b20 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009b10:	f107 030c 	add.w	r3, r7, #12
 8009b14:	2202      	movs	r2, #2
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 f9a1 	bl	800ae60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b1e:	e02e      	b.n	8009b7e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 f932 	bl	800ad8c <USBD_CtlError>
            ret = USBD_FAIL;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	75fb      	strb	r3, [r7, #23]
          break;
 8009b2c:	e027      	b.n	8009b7e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d107      	bne.n	8009b48 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b38:	f107 030f 	add.w	r3, r7, #15
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f98d 	bl	800ae60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b46:	e01a      	b.n	8009b7e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 f91e 	bl	800ad8c <USBD_CtlError>
            ret = USBD_FAIL;
 8009b50:	2302      	movs	r3, #2
 8009b52:	75fb      	strb	r3, [r7, #23]
          break;
 8009b54:	e013      	b.n	8009b7e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d00d      	beq.n	8009b7c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f001 f912 	bl	800ad8c <USBD_CtlError>
            ret = USBD_FAIL;
 8009b68:	2302      	movs	r3, #2
 8009b6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b6c:	e006      	b.n	8009b7c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 f90b 	bl	800ad8c <USBD_CtlError>
          ret = USBD_FAIL;
 8009b76:	2302      	movs	r3, #2
 8009b78:	75fb      	strb	r3, [r7, #23]
          break;
 8009b7a:	e000      	b.n	8009b7e <USBD_CDC_Setup+0x12c>
          break;
 8009b7c:	bf00      	nop
      }
      break;
 8009b7e:	e006      	b.n	8009b8e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 f902 	bl	800ad8c <USBD_CtlError>
      ret = USBD_FAIL;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b8c:	bf00      	nop
  }

  return ret;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009baa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bb2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d03a      	beq.n	8009c34 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009bbe:	78fa      	ldrb	r2, [r7, #3]
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	331c      	adds	r3, #28
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d029      	beq.n	8009c28 <USBD_CDC_DataIn+0x90>
 8009bd4:	78fa      	ldrb	r2, [r7, #3]
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	331c      	adds	r3, #28
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	78f9      	ldrb	r1, [r7, #3]
 8009be8:	68b8      	ldr	r0, [r7, #8]
 8009bea:	460b      	mov	r3, r1
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	440b      	add	r3, r1
 8009bf0:	00db      	lsls	r3, r3, #3
 8009bf2:	4403      	add	r3, r0
 8009bf4:	3320      	adds	r3, #32
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009bfc:	fb01 f303 	mul.w	r3, r1, r3
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d110      	bne.n	8009c28 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	440b      	add	r3, r1
 8009c14:	331c      	adds	r3, #28
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c1a:	78f9      	ldrb	r1, [r7, #3]
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2200      	movs	r2, #0
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f001 fd7f 	bl	800b724 <USBD_LL_Transmit>
 8009c26:	e003      	b.n	8009c30 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	e000      	b.n	8009c36 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009c34:	2302      	movs	r3, #2
  }
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	460b      	mov	r3, r1
 8009c48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c52:	78fb      	ldrb	r3, [r7, #3]
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 fdaa 	bl	800b7b0 <USBD_LL_GetRxDataSize>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00d      	beq.n	8009c8a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009c82:	4611      	mov	r1, r2
 8009c84:	4798      	blx	r3

    return USBD_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e000      	b.n	8009c8c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009c8a:	2302      	movs	r3, #2
  }
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d014      	beq.n	8009cd8 <USBD_CDC_EP0_RxReady+0x44>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009cb4:	2bff      	cmp	r3, #255	@ 0xff
 8009cb6:	d00f      	beq.n	8009cd8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009cc6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009cce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	22ff      	movs	r2, #255	@ 0xff
 8009cd4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2243      	movs	r2, #67	@ 0x43
 8009cf0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009cf2:	4b03      	ldr	r3, [pc, #12]	@ (8009d00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bc80      	pop	{r7}
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	20000094 	.word	0x20000094

08009d04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2243      	movs	r2, #67	@ 0x43
 8009d10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009d12:	4b03      	ldr	r3, [pc, #12]	@ (8009d20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bc80      	pop	{r7}
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	20000050 	.word	0x20000050

08009d24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2243      	movs	r2, #67	@ 0x43
 8009d30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009d32:	4b03      	ldr	r3, [pc, #12]	@ (8009d40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bc80      	pop	{r7}
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	200000d8 	.word	0x200000d8

08009d44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	220a      	movs	r2, #10
 8009d50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009d52:	4b03      	ldr	r3, [pc, #12]	@ (8009d60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bc80      	pop	{r7}
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	2000000c 	.word	0x2000000c

08009d64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bc80      	pop	{r7}
 8009d8e:	4770      	bx	lr

08009d90 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009da4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009dae:	88fa      	ldrh	r2, [r7, #6]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	371c      	adds	r7, #28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bc80      	pop	{r7}
 8009dc0:	4770      	bx	lr

08009dc2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dd2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bc80      	pop	{r7}
 8009de6:	4770      	bx	lr

08009de8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d017      	beq.n	8009e32 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7c1b      	ldrb	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d109      	bne.n	8009e1e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e14:	2101      	movs	r1, #1
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 fca7 	bl	800b76a <USBD_LL_PrepareReceive>
 8009e1c:	e007      	b.n	8009e2e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e24:	2340      	movs	r3, #64	@ 0x40
 8009e26:	2101      	movs	r1, #1
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 fc9e 	bl	800b76a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e000      	b.n	8009e34 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009e32:	2302      	movs	r3, #2
  }
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009e50:	2302      	movs	r3, #2
 8009e52:	e01a      	b.n	8009e8a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	79fa      	ldrb	r2, [r7, #7]
 8009e80:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f001 fb0c 	bl	800b4a0 <USBD_LL_Init>

  return USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b085      	sub	sp, #20
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d006      	beq.n	8009eb4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
 8009eb2:	e001      	b.n	8009eb8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bc80      	pop	{r7}
 8009ec2:	4770      	bx	lr

08009ec4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 fb41 	bl	800b554 <USBD_LL_Start>

  return USBD_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bc80      	pop	{r7}
 8009eee:	4770      	bx	lr

08009ef0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009efc:	2302      	movs	r3, #2
 8009efe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00c      	beq.n	8009f24 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	4611      	mov	r1, r2
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	4798      	blx	r3
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	78fa      	ldrb	r2, [r7, #3]
 8009f44:	4611      	mov	r1, r2
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	4798      	blx	r3

  return USBD_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fed7 	bl	800ad1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d016      	beq.n	8009fbe <USBD_LL_SetupStage+0x6a>
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d81c      	bhi.n	8009fce <USBD_LL_SetupStage+0x7a>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <USBD_LL_SetupStage+0x4a>
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d008      	beq.n	8009fae <USBD_LL_SetupStage+0x5a>
 8009f9c:	e017      	b.n	8009fce <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9ca 	bl	800a340 <USBD_StdDevReq>
      break;
 8009fac:	e01a      	b.n	8009fe4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fa2c 	bl	800a414 <USBD_StdItfReq>
      break;
 8009fbc:	e012      	b.n	8009fe4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa6c 	bl	800a4a4 <USBD_StdEPReq>
      break;
 8009fcc:	e00a      	b.n	8009fe4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009fd4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f001 fb19 	bl	800b614 <USBD_LL_StallEP>
      break;
 8009fe2:	bf00      	nop
  }

  return USBD_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b086      	sub	sp, #24
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009ffc:	7afb      	ldrb	r3, [r7, #11]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d14b      	bne.n	800a09a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a008:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a010:	2b03      	cmp	r3, #3
 800a012:	d134      	bne.n	800a07e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d919      	bls.n	800a054 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	1ad2      	subs	r2, r2, r3
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	68da      	ldr	r2, [r3, #12]
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a036:	429a      	cmp	r2, r3
 800a038:	d203      	bcs.n	800a042 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a03e:	b29b      	uxth	r3, r3
 800a040:	e002      	b.n	800a048 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a046:	b29b      	uxth	r3, r3
 800a048:	461a      	mov	r2, r3
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 ff53 	bl	800aef8 <USBD_CtlContinueRx>
 800a052:	e038      	b.n	800a0c6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00a      	beq.n	800a076 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a066:	2b03      	cmp	r3, #3
 800a068:	d105      	bne.n	800a076 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 ff50 	bl	800af1c <USBD_CtlSendStatus>
 800a07c:	e023      	b.n	800a0c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a084:	2b05      	cmp	r3, #5
 800a086:	d11e      	bne.n	800a0c6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a090:	2100      	movs	r1, #0
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f001 fabe 	bl	800b614 <USBD_LL_StallEP>
 800a098:	e015      	b.n	800a0c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00d      	beq.n	800a0c2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d108      	bne.n	800a0c2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	7afa      	ldrb	r2, [r7, #11]
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	4798      	blx	r3
 800a0c0:	e001      	b.n	800a0c6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e000      	b.n	800a0c8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a0de:	7afb      	ldrb	r3, [r7, #11]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d17f      	bne.n	800a1e4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d15c      	bne.n	800a1ae <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d915      	bls.n	800a12c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	1ad2      	subs	r2, r2, r3
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	b29b      	uxth	r3, r3
 800a114:	461a      	mov	r2, r3
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 febd 	bl	800ae98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a11e:	2300      	movs	r3, #0
 800a120:	2200      	movs	r2, #0
 800a122:	2100      	movs	r1, #0
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f001 fb20 	bl	800b76a <USBD_LL_PrepareReceive>
 800a12a:	e04e      	b.n	800a1ca <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	6912      	ldr	r2, [r2, #16]
 800a134:	fbb3 f1f2 	udiv	r1, r3, r2
 800a138:	fb01 f202 	mul.w	r2, r1, r2
 800a13c:	1a9b      	subs	r3, r3, r2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d11c      	bne.n	800a17c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d316      	bcc.n	800a17c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a158:	429a      	cmp	r2, r3
 800a15a:	d20f      	bcs.n	800a17c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a15c:	2200      	movs	r2, #0
 800a15e:	2100      	movs	r1, #0
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 fe99 	bl	800ae98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a16e:	2300      	movs	r3, #0
 800a170:	2200      	movs	r2, #0
 800a172:	2100      	movs	r1, #0
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f001 faf8 	bl	800b76a <USBD_LL_PrepareReceive>
 800a17a:	e026      	b.n	800a1ca <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00a      	beq.n	800a19e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d105      	bne.n	800a19e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a19e:	2180      	movs	r1, #128	@ 0x80
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f001 fa37 	bl	800b614 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 fecb 	bl	800af42 <USBD_CtlReceiveStatus>
 800a1ac:	e00d      	b.n	800a1ca <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d004      	beq.n	800a1c2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d103      	bne.n	800a1ca <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a1c2:	2180      	movs	r1, #128	@ 0x80
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f001 fa25 	bl	800b614 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d11d      	bne.n	800a210 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff fe81 	bl	8009edc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a1e2:	e015      	b.n	800a210 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00d      	beq.n	800a20c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d108      	bne.n	800a20c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	7afa      	ldrb	r2, [r7, #11]
 800a204:	4611      	mov	r1, r2
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	4798      	blx	r3
 800a20a:	e001      	b.n	800a210 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a20c:	2302      	movs	r3, #2
 800a20e:	e000      	b.n	800a212 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a222:	2340      	movs	r3, #64	@ 0x40
 800a224:	2200      	movs	r2, #0
 800a226:	2100      	movs	r1, #0
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 f9ae 	bl	800b58a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2240      	movs	r2, #64	@ 0x40
 800a23a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a23e:	2340      	movs	r3, #64	@ 0x40
 800a240:	2200      	movs	r2, #0
 800a242:	2180      	movs	r1, #128	@ 0x80
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f001 f9a0 	bl	800b58a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2240      	movs	r2, #64	@ 0x40
 800a254:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d009      	beq.n	800a292 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	6852      	ldr	r2, [r2, #4]
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	4611      	mov	r1, r2
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
  }

  return USBD_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	78fa      	ldrb	r2, [r7, #3]
 800a2ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bc80      	pop	{r7}
 800a2b8:	4770      	bx	lr

0800a2ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bc80      	pop	{r7}
 800a2e0:	4770      	bx	lr

0800a2e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d105      	bne.n	800a300 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	bc80      	pop	{r7}
 800a30a:	4770      	bx	lr

0800a30c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d10b      	bne.n	800a336 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d005      	beq.n	800a336 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a356:	2b40      	cmp	r3, #64	@ 0x40
 800a358:	d005      	beq.n	800a366 <USBD_StdDevReq+0x26>
 800a35a:	2b40      	cmp	r3, #64	@ 0x40
 800a35c:	d84f      	bhi.n	800a3fe <USBD_StdDevReq+0xbe>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d009      	beq.n	800a376 <USBD_StdDevReq+0x36>
 800a362:	2b20      	cmp	r3, #32
 800a364:	d14b      	bne.n	800a3fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	4798      	blx	r3
      break;
 800a374:	e048      	b.n	800a408 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	d839      	bhi.n	800a3f2 <USBD_StdDevReq+0xb2>
 800a37e:	a201      	add	r2, pc, #4	@ (adr r2, 800a384 <USBD_StdDevReq+0x44>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a3d5 	.word	0x0800a3d5
 800a388:	0800a3e9 	.word	0x0800a3e9
 800a38c:	0800a3f3 	.word	0x0800a3f3
 800a390:	0800a3df 	.word	0x0800a3df
 800a394:	0800a3f3 	.word	0x0800a3f3
 800a398:	0800a3b7 	.word	0x0800a3b7
 800a39c:	0800a3ad 	.word	0x0800a3ad
 800a3a0:	0800a3f3 	.word	0x0800a3f3
 800a3a4:	0800a3cb 	.word	0x0800a3cb
 800a3a8:	0800a3c1 	.word	0x0800a3c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f9dc 	bl	800a76c <USBD_GetDescriptor>
          break;
 800a3b4:	e022      	b.n	800a3fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fb3f 	bl	800aa3c <USBD_SetAddress>
          break;
 800a3be:	e01d      	b.n	800a3fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fb7e 	bl	800aac4 <USBD_SetConfig>
          break;
 800a3c8:	e018      	b.n	800a3fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fc07 	bl	800abe0 <USBD_GetConfig>
          break;
 800a3d2:	e013      	b.n	800a3fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fc37 	bl	800ac4a <USBD_GetStatus>
          break;
 800a3dc:	e00e      	b.n	800a3fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fc65 	bl	800acb0 <USBD_SetFeature>
          break;
 800a3e6:	e009      	b.n	800a3fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fc74 	bl	800acd8 <USBD_ClrFeature>
          break;
 800a3f0:	e004      	b.n	800a3fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fcc9 	bl	800ad8c <USBD_CtlError>
          break;
 800a3fa:	bf00      	nop
      }
      break;
 800a3fc:	e004      	b.n	800a408 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fcc3 	bl	800ad8c <USBD_CtlError>
      break;
 800a406:	bf00      	nop
  }

  return ret;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop

0800a414 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a42a:	2b40      	cmp	r3, #64	@ 0x40
 800a42c:	d005      	beq.n	800a43a <USBD_StdItfReq+0x26>
 800a42e:	2b40      	cmp	r3, #64	@ 0x40
 800a430:	d82e      	bhi.n	800a490 <USBD_StdItfReq+0x7c>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <USBD_StdItfReq+0x26>
 800a436:	2b20      	cmp	r3, #32
 800a438:	d12a      	bne.n	800a490 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a440:	3b01      	subs	r3, #1
 800a442:	2b02      	cmp	r3, #2
 800a444:	d81d      	bhi.n	800a482 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	889b      	ldrh	r3, [r3, #4]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d813      	bhi.n	800a478 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	88db      	ldrh	r3, [r3, #6]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d110      	bne.n	800a48c <USBD_StdItfReq+0x78>
 800a46a:	7bfb      	ldrb	r3, [r7, #15]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10d      	bne.n	800a48c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fd53 	bl	800af1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a476:	e009      	b.n	800a48c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fc86 	bl	800ad8c <USBD_CtlError>
          break;
 800a480:	e004      	b.n	800a48c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fc81 	bl	800ad8c <USBD_CtlError>
          break;
 800a48a:	e000      	b.n	800a48e <USBD_StdItfReq+0x7a>
          break;
 800a48c:	bf00      	nop
      }
      break;
 800a48e:	e004      	b.n	800a49a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fc7a 	bl	800ad8c <USBD_CtlError>
      break;
 800a498:	bf00      	nop
  }

  return USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	889b      	ldrh	r3, [r3, #4]
 800a4b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4c0:	2b40      	cmp	r3, #64	@ 0x40
 800a4c2:	d007      	beq.n	800a4d4 <USBD_StdEPReq+0x30>
 800a4c4:	2b40      	cmp	r3, #64	@ 0x40
 800a4c6:	f200 8146 	bhi.w	800a756 <USBD_StdEPReq+0x2b2>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <USBD_StdEPReq+0x40>
 800a4ce:	2b20      	cmp	r3, #32
 800a4d0:	f040 8141 	bne.w	800a756 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4798      	blx	r3
      break;
 800a4e2:	e13d      	b.n	800a760 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4ec:	2b20      	cmp	r3, #32
 800a4ee:	d10a      	bne.n	800a506 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	4798      	blx	r3
 800a4fe:	4603      	mov	r3, r0
 800a500:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	e12d      	b.n	800a762 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d007      	beq.n	800a51e <USBD_StdEPReq+0x7a>
 800a50e:	2b03      	cmp	r3, #3
 800a510:	f300 811b 	bgt.w	800a74a <USBD_StdEPReq+0x2a6>
 800a514:	2b00      	cmp	r3, #0
 800a516:	d072      	beq.n	800a5fe <USBD_StdEPReq+0x15a>
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d03a      	beq.n	800a592 <USBD_StdEPReq+0xee>
 800a51c:	e115      	b.n	800a74a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a524:	2b02      	cmp	r3, #2
 800a526:	d002      	beq.n	800a52e <USBD_StdEPReq+0x8a>
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d015      	beq.n	800a558 <USBD_StdEPReq+0xb4>
 800a52c:	e02b      	b.n	800a586 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00c      	beq.n	800a54e <USBD_StdEPReq+0xaa>
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	2b80      	cmp	r3, #128	@ 0x80
 800a538:	d009      	beq.n	800a54e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	4619      	mov	r1, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f001 f868 	bl	800b614 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a544:	2180      	movs	r1, #128	@ 0x80
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f001 f864 	bl	800b614 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a54c:	e020      	b.n	800a590 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fc1b 	bl	800ad8c <USBD_CtlError>
              break;
 800a556:	e01b      	b.n	800a590 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	885b      	ldrh	r3, [r3, #2]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10e      	bne.n	800a57e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a560:	7bbb      	ldrb	r3, [r7, #14]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00b      	beq.n	800a57e <USBD_StdEPReq+0xda>
 800a566:	7bbb      	ldrb	r3, [r7, #14]
 800a568:	2b80      	cmp	r3, #128	@ 0x80
 800a56a:	d008      	beq.n	800a57e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	88db      	ldrh	r3, [r3, #6]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d104      	bne.n	800a57e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a574:	7bbb      	ldrb	r3, [r7, #14]
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 f84b 	bl	800b614 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fccc 	bl	800af1c <USBD_CtlSendStatus>

              break;
 800a584:	e004      	b.n	800a590 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fbff 	bl	800ad8c <USBD_CtlError>
              break;
 800a58e:	bf00      	nop
          }
          break;
 800a590:	e0e0      	b.n	800a754 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d002      	beq.n	800a5a2 <USBD_StdEPReq+0xfe>
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d015      	beq.n	800a5cc <USBD_StdEPReq+0x128>
 800a5a0:	e026      	b.n	800a5f0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00c      	beq.n	800a5c2 <USBD_StdEPReq+0x11e>
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	2b80      	cmp	r3, #128	@ 0x80
 800a5ac:	d009      	beq.n	800a5c2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 f82e 	bl	800b614 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a5b8:	2180      	movs	r1, #128	@ 0x80
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f001 f82a 	bl	800b614 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5c0:	e01c      	b.n	800a5fc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fbe1 	bl	800ad8c <USBD_CtlError>
              break;
 800a5ca:	e017      	b.n	800a5fc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	885b      	ldrh	r3, [r3, #2]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d112      	bne.n	800a5fa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 f835 	bl	800b652 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fc97 	bl	800af1c <USBD_CtlSendStatus>
              }
              break;
 800a5ee:	e004      	b.n	800a5fa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fbca 	bl	800ad8c <USBD_CtlError>
              break;
 800a5f8:	e000      	b.n	800a5fc <USBD_StdEPReq+0x158>
              break;
 800a5fa:	bf00      	nop
          }
          break;
 800a5fc:	e0aa      	b.n	800a754 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a604:	2b02      	cmp	r3, #2
 800a606:	d002      	beq.n	800a60e <USBD_StdEPReq+0x16a>
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d032      	beq.n	800a672 <USBD_StdEPReq+0x1ce>
 800a60c:	e097      	b.n	800a73e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a60e:	7bbb      	ldrb	r3, [r7, #14]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d007      	beq.n	800a624 <USBD_StdEPReq+0x180>
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	2b80      	cmp	r3, #128	@ 0x80
 800a618:	d004      	beq.n	800a624 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fbb5 	bl	800ad8c <USBD_CtlError>
                break;
 800a622:	e091      	b.n	800a748 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	da0b      	bge.n	800a644 <USBD_StdEPReq+0x1a0>
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a632:	4613      	mov	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	3310      	adds	r3, #16
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4413      	add	r3, r2
 800a640:	3304      	adds	r3, #4
 800a642:	e00b      	b.n	800a65c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	4413      	add	r3, r2
 800a65a:	3304      	adds	r3, #4
 800a65c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2202      	movs	r2, #2
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fbf8 	bl	800ae60 <USBD_CtlSendData>
              break;
 800a670:	e06a      	b.n	800a748 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a676:	2b00      	cmp	r3, #0
 800a678:	da11      	bge.n	800a69e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
 800a67c:	f003 020f 	and.w	r2, r3, #15
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	3318      	adds	r3, #24
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d117      	bne.n	800a6c4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fb78 	bl	800ad8c <USBD_CtlError>
                  break;
 800a69c:	e054      	b.n	800a748 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	f003 020f 	and.w	r2, r3, #15
 800a6a4:	6879      	ldr	r1, [r7, #4]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	440b      	add	r3, r1
 800a6b0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d104      	bne.n	800a6c4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fb65 	bl	800ad8c <USBD_CtlError>
                  break;
 800a6c2:	e041      	b.n	800a748 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da0b      	bge.n	800a6e4 <USBD_StdEPReq+0x240>
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	3310      	adds	r3, #16
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	4413      	add	r3, r2
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	e00b      	b.n	800a6fc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <USBD_StdEPReq+0x266>
 800a704:	7bbb      	ldrb	r3, [r7, #14]
 800a706:	2b80      	cmp	r3, #128	@ 0x80
 800a708:	d103      	bne.n	800a712 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e00e      	b.n	800a730 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 ffba 	bl	800b690 <USBD_LL_IsStallEP>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2201      	movs	r2, #1
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	e002      	b.n	800a730 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2200      	movs	r2, #0
 800a72e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2202      	movs	r2, #2
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fb92 	bl	800ae60 <USBD_CtlSendData>
              break;
 800a73c:	e004      	b.n	800a748 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fb23 	bl	800ad8c <USBD_CtlError>
              break;
 800a746:	bf00      	nop
          }
          break;
 800a748:	e004      	b.n	800a754 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fb1d 	bl	800ad8c <USBD_CtlError>
          break;
 800a752:	bf00      	nop
      }
      break;
 800a754:	e004      	b.n	800a760 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fb17 	bl	800ad8c <USBD_CtlError>
      break;
 800a75e:	bf00      	nop
  }

  return ret;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	885b      	ldrh	r3, [r3, #2]
 800a786:	0a1b      	lsrs	r3, r3, #8
 800a788:	b29b      	uxth	r3, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	2b06      	cmp	r3, #6
 800a78e:	f200 8128 	bhi.w	800a9e2 <USBD_GetDescriptor+0x276>
 800a792:	a201      	add	r2, pc, #4	@ (adr r2, 800a798 <USBD_GetDescriptor+0x2c>)
 800a794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a798:	0800a7b5 	.word	0x0800a7b5
 800a79c:	0800a7cd 	.word	0x0800a7cd
 800a7a0:	0800a80d 	.word	0x0800a80d
 800a7a4:	0800a9e3 	.word	0x0800a9e3
 800a7a8:	0800a9e3 	.word	0x0800a9e3
 800a7ac:	0800a983 	.word	0x0800a983
 800a7b0:	0800a9af 	.word	0x0800a9af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	7c12      	ldrb	r2, [r2, #16]
 800a7c0:	f107 0108 	add.w	r1, r7, #8
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	4798      	blx	r3
 800a7c8:	60f8      	str	r0, [r7, #12]
      break;
 800a7ca:	e112      	b.n	800a9f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	7c1b      	ldrb	r3, [r3, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10d      	bne.n	800a7f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7dc:	f107 0208 	add.w	r2, r7, #8
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7ee:	e100      	b.n	800a9f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f8:	f107 0208 	add.w	r2, r7, #8
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	4798      	blx	r3
 800a800:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3301      	adds	r3, #1
 800a806:	2202      	movs	r2, #2
 800a808:	701a      	strb	r2, [r3, #0]
      break;
 800a80a:	e0f2      	b.n	800a9f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	885b      	ldrh	r3, [r3, #2]
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b05      	cmp	r3, #5
 800a814:	f200 80ac 	bhi.w	800a970 <USBD_GetDescriptor+0x204>
 800a818:	a201      	add	r2, pc, #4	@ (adr r2, 800a820 <USBD_GetDescriptor+0xb4>)
 800a81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81e:	bf00      	nop
 800a820:	0800a839 	.word	0x0800a839
 800a824:	0800a86d 	.word	0x0800a86d
 800a828:	0800a8a1 	.word	0x0800a8a1
 800a82c:	0800a8d5 	.word	0x0800a8d5
 800a830:	0800a909 	.word	0x0800a909
 800a834:	0800a93d 	.word	0x0800a93d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00b      	beq.n	800a85c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	7c12      	ldrb	r2, [r2, #16]
 800a850:	f107 0108 	add.w	r1, r7, #8
 800a854:	4610      	mov	r0, r2
 800a856:	4798      	blx	r3
 800a858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a85a:	e091      	b.n	800a980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a85c:	6839      	ldr	r1, [r7, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fa94 	bl	800ad8c <USBD_CtlError>
            err++;
 800a864:	7afb      	ldrb	r3, [r7, #11]
 800a866:	3301      	adds	r3, #1
 800a868:	72fb      	strb	r3, [r7, #11]
          break;
 800a86a:	e089      	b.n	800a980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00b      	beq.n	800a890 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	7c12      	ldrb	r2, [r2, #16]
 800a884:	f107 0108 	add.w	r1, r7, #8
 800a888:	4610      	mov	r0, r2
 800a88a:	4798      	blx	r3
 800a88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a88e:	e077      	b.n	800a980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa7a 	bl	800ad8c <USBD_CtlError>
            err++;
 800a898:	7afb      	ldrb	r3, [r7, #11]
 800a89a:	3301      	adds	r3, #1
 800a89c:	72fb      	strb	r3, [r7, #11]
          break;
 800a89e:	e06f      	b.n	800a980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00b      	beq.n	800a8c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	7c12      	ldrb	r2, [r2, #16]
 800a8b8:	f107 0108 	add.w	r1, r7, #8
 800a8bc:	4610      	mov	r0, r2
 800a8be:	4798      	blx	r3
 800a8c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8c2:	e05d      	b.n	800a980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fa60 	bl	800ad8c <USBD_CtlError>
            err++;
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8d2:	e055      	b.n	800a980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00b      	beq.n	800a8f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	7c12      	ldrb	r2, [r2, #16]
 800a8ec:	f107 0108 	add.w	r1, r7, #8
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4798      	blx	r3
 800a8f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8f6:	e043      	b.n	800a980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fa46 	bl	800ad8c <USBD_CtlError>
            err++;
 800a900:	7afb      	ldrb	r3, [r7, #11]
 800a902:	3301      	adds	r3, #1
 800a904:	72fb      	strb	r3, [r7, #11]
          break;
 800a906:	e03b      	b.n	800a980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00b      	beq.n	800a92c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	7c12      	ldrb	r2, [r2, #16]
 800a920:	f107 0108 	add.w	r1, r7, #8
 800a924:	4610      	mov	r0, r2
 800a926:	4798      	blx	r3
 800a928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a92a:	e029      	b.n	800a980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa2c 	bl	800ad8c <USBD_CtlError>
            err++;
 800a934:	7afb      	ldrb	r3, [r7, #11]
 800a936:	3301      	adds	r3, #1
 800a938:	72fb      	strb	r3, [r7, #11]
          break;
 800a93a:	e021      	b.n	800a980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00b      	beq.n	800a960 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	7c12      	ldrb	r2, [r2, #16]
 800a954:	f107 0108 	add.w	r1, r7, #8
 800a958:	4610      	mov	r0, r2
 800a95a:	4798      	blx	r3
 800a95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a95e:	e00f      	b.n	800a980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fa12 	bl	800ad8c <USBD_CtlError>
            err++;
 800a968:	7afb      	ldrb	r3, [r7, #11]
 800a96a:	3301      	adds	r3, #1
 800a96c:	72fb      	strb	r3, [r7, #11]
          break;
 800a96e:	e007      	b.n	800a980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa0a 	bl	800ad8c <USBD_CtlError>
          err++;
 800a978:	7afb      	ldrb	r3, [r7, #11]
 800a97a:	3301      	adds	r3, #1
 800a97c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a97e:	e038      	b.n	800a9f2 <USBD_GetDescriptor+0x286>
 800a980:	e037      	b.n	800a9f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7c1b      	ldrb	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d109      	bne.n	800a99e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a992:	f107 0208 	add.w	r2, r7, #8
 800a996:	4610      	mov	r0, r2
 800a998:	4798      	blx	r3
 800a99a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a99c:	e029      	b.n	800a9f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f9f3 	bl	800ad8c <USBD_CtlError>
        err++;
 800a9a6:	7afb      	ldrb	r3, [r7, #11]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a9ac:	e021      	b.n	800a9f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	7c1b      	ldrb	r3, [r3, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10d      	bne.n	800a9d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9be:	f107 0208 	add.w	r2, r7, #8
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4798      	blx	r3
 800a9c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	2207      	movs	r2, #7
 800a9ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9d0:	e00f      	b.n	800a9f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f9d9 	bl	800ad8c <USBD_CtlError>
        err++;
 800a9da:	7afb      	ldrb	r3, [r7, #11]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	72fb      	strb	r3, [r7, #11]
      break;
 800a9e0:	e007      	b.n	800a9f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f9d1 	bl	800ad8c <USBD_CtlError>
      err++;
 800a9ea:	7afb      	ldrb	r3, [r7, #11]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a9f0:	bf00      	nop
  }

  if (err != 0U)
 800a9f2:	7afb      	ldrb	r3, [r7, #11]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d11c      	bne.n	800aa32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a9f8:	893b      	ldrh	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d011      	beq.n	800aa22 <USBD_GetDescriptor+0x2b6>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	88db      	ldrh	r3, [r3, #6]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00d      	beq.n	800aa22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	88da      	ldrh	r2, [r3, #6]
 800aa0a:	893b      	ldrh	r3, [r7, #8]
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	bf28      	it	cs
 800aa10:	4613      	movcs	r3, r2
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa16:	893b      	ldrh	r3, [r7, #8]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	68f9      	ldr	r1, [r7, #12]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fa1f 	bl	800ae60 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	88db      	ldrh	r3, [r3, #6]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d104      	bne.n	800aa34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fa76 	bl	800af1c <USBD_CtlSendStatus>
 800aa30:	e000      	b.n	800aa34 <USBD_GetDescriptor+0x2c8>
    return;
 800aa32:	bf00      	nop
    }
  }
}
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop

0800aa3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	889b      	ldrh	r3, [r3, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d130      	bne.n	800aab0 <USBD_SetAddress+0x74>
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	88db      	ldrh	r3, [r3, #6]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d12c      	bne.n	800aab0 <USBD_SetAddress+0x74>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	885b      	ldrh	r3, [r3, #2]
 800aa5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa5c:	d828      	bhi.n	800aab0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	885b      	ldrh	r3, [r3, #2]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	d104      	bne.n	800aa7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f988 	bl	800ad8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa7c:	e01d      	b.n	800aaba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	7bfa      	ldrb	r2, [r7, #15]
 800aa82:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fe2b 	bl	800b6e6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fa43 	bl	800af1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d004      	beq.n	800aaa6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa4:	e009      	b.n	800aaba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaae:	e004      	b.n	800aaba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f96a 	bl	800ad8c <USBD_CtlError>
  }
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	885b      	ldrh	r3, [r3, #2]
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	4b41      	ldr	r3, [pc, #260]	@ (800abdc <USBD_SetConfig+0x118>)
 800aad6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aad8:	4b40      	ldr	r3, [pc, #256]	@ (800abdc <USBD_SetConfig+0x118>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d904      	bls.n	800aaea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f952 	bl	800ad8c <USBD_CtlError>
 800aae8:	e075      	b.n	800abd6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d002      	beq.n	800aafa <USBD_SetConfig+0x36>
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d023      	beq.n	800ab40 <USBD_SetConfig+0x7c>
 800aaf8:	e062      	b.n	800abc0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aafa:	4b38      	ldr	r3, [pc, #224]	@ (800abdc <USBD_SetConfig+0x118>)
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01a      	beq.n	800ab38 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ab02:	4b36      	ldr	r3, [pc, #216]	@ (800abdc <USBD_SetConfig+0x118>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2203      	movs	r2, #3
 800ab10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab14:	4b31      	ldr	r3, [pc, #196]	@ (800abdc <USBD_SetConfig+0x118>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff f9e8 	bl	8009ef0 <USBD_SetClassConfig>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d104      	bne.n	800ab30 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f92f 	bl	800ad8c <USBD_CtlError>
            return;
 800ab2e:	e052      	b.n	800abd6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f9f3 	bl	800af1c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ab36:	e04e      	b.n	800abd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f9ef 	bl	800af1c <USBD_CtlSendStatus>
        break;
 800ab3e:	e04a      	b.n	800abd6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ab40:	4b26      	ldr	r3, [pc, #152]	@ (800abdc <USBD_SetConfig+0x118>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d112      	bne.n	800ab6e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800ab50:	4b22      	ldr	r3, [pc, #136]	@ (800abdc <USBD_SetConfig+0x118>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ab5a:	4b20      	ldr	r3, [pc, #128]	@ (800abdc <USBD_SetConfig+0x118>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff f9e4 	bl	8009f2e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f9d8 	bl	800af1c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ab6c:	e033      	b.n	800abd6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ab6e:	4b1b      	ldr	r3, [pc, #108]	@ (800abdc <USBD_SetConfig+0x118>)
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	461a      	mov	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d01d      	beq.n	800abb8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff f9d2 	bl	8009f2e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ab8a:	4b14      	ldr	r3, [pc, #80]	@ (800abdc <USBD_SetConfig+0x118>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab94:	4b11      	ldr	r3, [pc, #68]	@ (800abdc <USBD_SetConfig+0x118>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7ff f9a8 	bl	8009ef0 <USBD_SetClassConfig>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d104      	bne.n	800abb0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f8ef 	bl	800ad8c <USBD_CtlError>
            return;
 800abae:	e012      	b.n	800abd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f9b3 	bl	800af1c <USBD_CtlSendStatus>
        break;
 800abb6:	e00e      	b.n	800abd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f9af 	bl	800af1c <USBD_CtlSendStatus>
        break;
 800abbe:	e00a      	b.n	800abd6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f8e2 	bl	800ad8c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800abc8:	4b04      	ldr	r3, [pc, #16]	@ (800abdc <USBD_SetConfig+0x118>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	4619      	mov	r1, r3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff f9ad 	bl	8009f2e <USBD_ClrClassConfig>
        break;
 800abd4:	bf00      	nop
    }
  }
}
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	200003b4 	.word	0x200003b4

0800abe0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	88db      	ldrh	r3, [r3, #6]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d004      	beq.n	800abfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f8c9 	bl	800ad8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abfa:	e022      	b.n	800ac42 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	dc02      	bgt.n	800ac0c <USBD_GetConfig+0x2c>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dc03      	bgt.n	800ac12 <USBD_GetConfig+0x32>
 800ac0a:	e015      	b.n	800ac38 <USBD_GetConfig+0x58>
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d00b      	beq.n	800ac28 <USBD_GetConfig+0x48>
 800ac10:	e012      	b.n	800ac38 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f91d 	bl	800ae60 <USBD_CtlSendData>
        break;
 800ac26:	e00c      	b.n	800ac42 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f915 	bl	800ae60 <USBD_CtlSendData>
        break;
 800ac36:	e004      	b.n	800ac42 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f8a6 	bl	800ad8c <USBD_CtlError>
        break;
 800ac40:	bf00      	nop
}
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d81e      	bhi.n	800ac9e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	88db      	ldrh	r3, [r3, #6]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d004      	beq.n	800ac72 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f88e 	bl	800ad8c <USBD_CtlError>
        break;
 800ac70:	e01a      	b.n	800aca8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d005      	beq.n	800ac8e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f043 0202 	orr.w	r2, r3, #2
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	330c      	adds	r3, #12
 800ac92:	2202      	movs	r2, #2
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f8e2 	bl	800ae60 <USBD_CtlSendData>
      break;
 800ac9c:	e004      	b.n	800aca8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f873 	bl	800ad8c <USBD_CtlError>
      break;
 800aca6:	bf00      	nop
  }
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	885b      	ldrh	r3, [r3, #2]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d106      	bne.n	800acd0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f926 	bl	800af1c <USBD_CtlSendStatus>
  }
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ace8:	3b01      	subs	r3, #1
 800acea:	2b02      	cmp	r3, #2
 800acec:	d80b      	bhi.n	800ad06 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	885b      	ldrh	r3, [r3, #2]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d10c      	bne.n	800ad10 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f90c 	bl	800af1c <USBD_CtlSendStatus>
      }
      break;
 800ad04:	e004      	b.n	800ad10 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f83f 	bl	800ad8c <USBD_CtlError>
      break;
 800ad0e:	e000      	b.n	800ad12 <USBD_ClrFeature+0x3a>
      break;
 800ad10:	bf00      	nop
  }
}
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b083      	sub	sp, #12
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781a      	ldrb	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	785a      	ldrb	r2, [r3, #1]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	3302      	adds	r3, #2
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	3303      	adds	r3, #3
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	4413      	add	r3, r2
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	3304      	adds	r3, #4
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	461a      	mov	r2, r3
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	3305      	adds	r3, #5
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	021b      	lsls	r3, r3, #8
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	4413      	add	r3, r2
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	3306      	adds	r3, #6
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	3307      	adds	r3, #7
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	4413      	add	r3, r2
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	80da      	strh	r2, [r3, #6]

}
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bc80      	pop	{r7}
 800ad8a:	4770      	bx	lr

0800ad8c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ad96:	2180      	movs	r1, #128	@ 0x80
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fc3b 	bl	800b614 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ad9e:	2100      	movs	r1, #0
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fc37 	bl	800b614 <USBD_LL_StallEP>
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b086      	sub	sp, #24
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800adba:	2300      	movs	r3, #0
 800adbc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d032      	beq.n	800ae2a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f834 	bl	800ae32 <USBD_GetLen>
 800adca:	4603      	mov	r3, r0
 800adcc:	3301      	adds	r3, #1
 800adce:	b29b      	uxth	r3, r3
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	75fa      	strb	r2, [r7, #23]
 800adde:	461a      	mov	r2, r3
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	4413      	add	r3, r2
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	7812      	ldrb	r2, [r2, #0]
 800ade8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800adea:	7dfb      	ldrb	r3, [r7, #23]
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	75fa      	strb	r2, [r7, #23]
 800adf0:	461a      	mov	r2, r3
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	4413      	add	r3, r2
 800adf6:	2203      	movs	r2, #3
 800adf8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800adfa:	e012      	b.n	800ae22 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	60fa      	str	r2, [r7, #12]
 800ae02:	7dfa      	ldrb	r2, [r7, #23]
 800ae04:	1c51      	adds	r1, r2, #1
 800ae06:	75f9      	strb	r1, [r7, #23]
 800ae08:	4611      	mov	r1, r2
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	440a      	add	r2, r1
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	75fa      	strb	r2, [r7, #23]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	2200      	movs	r2, #0
 800ae20:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e8      	bne.n	800adfc <USBD_GetString+0x4e>
    }
  }
}
 800ae2a:	bf00      	nop
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ae3e:	e005      	b.n	800ae4c <USBD_GetLen+0x1a>
  {
    len++;
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	3301      	adds	r3, #1
 800ae44:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1f5      	bne.n	800ae40 <USBD_GetLen+0xe>
  }

  return len;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bc80      	pop	{r7}
 800ae5e:	4770      	bx	lr

0800ae60 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ae76:	88fa      	ldrh	r2, [r7, #6]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ae7c:	88fa      	ldrh	r2, [r7, #6]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae82:	88fb      	ldrh	r3, [r7, #6]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	2100      	movs	r1, #0
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 fc4b 	bl	800b724 <USBD_LL_Transmit>

  return USBD_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	4613      	mov	r3, r2
 800aea4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aea6:	88fb      	ldrh	r3, [r7, #6]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	2100      	movs	r1, #0
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 fc39 	bl	800b724 <USBD_LL_Transmit>

  return USBD_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	4613      	mov	r3, r2
 800aec8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2203      	movs	r2, #3
 800aece:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aed2:	88fa      	ldrh	r2, [r7, #6]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aeda:	88fa      	ldrh	r2, [r7, #6]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aee2:	88fb      	ldrh	r3, [r7, #6]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	2100      	movs	r1, #0
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 fc3e 	bl	800b76a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4613      	mov	r3, r2
 800af04:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af06:	88fb      	ldrh	r3, [r7, #6]
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	2100      	movs	r1, #0
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 fc2c 	bl	800b76a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2204      	movs	r2, #4
 800af28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af2c:	2300      	movs	r3, #0
 800af2e:	2200      	movs	r2, #0
 800af30:	2100      	movs	r1, #0
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fbf6 	bl	800b724 <USBD_LL_Transmit>

  return USBD_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b082      	sub	sp, #8
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2205      	movs	r2, #5
 800af4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af52:	2300      	movs	r3, #0
 800af54:	2200      	movs	r2, #0
 800af56:	2100      	movs	r1, #0
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fc06 	bl	800b76a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af6c:	2200      	movs	r2, #0
 800af6e:	4912      	ldr	r1, [pc, #72]	@ (800afb8 <MX_USB_DEVICE_Init+0x50>)
 800af70:	4812      	ldr	r0, [pc, #72]	@ (800afbc <MX_USB_DEVICE_Init+0x54>)
 800af72:	f7fe ff63 	bl	8009e3c <USBD_Init>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af7c:	f7f6 fbd2 	bl	8001724 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af80:	490f      	ldr	r1, [pc, #60]	@ (800afc0 <MX_USB_DEVICE_Init+0x58>)
 800af82:	480e      	ldr	r0, [pc, #56]	@ (800afbc <MX_USB_DEVICE_Init+0x54>)
 800af84:	f7fe ff85 	bl	8009e92 <USBD_RegisterClass>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af8e:	f7f6 fbc9 	bl	8001724 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af92:	490c      	ldr	r1, [pc, #48]	@ (800afc4 <MX_USB_DEVICE_Init+0x5c>)
 800af94:	4809      	ldr	r0, [pc, #36]	@ (800afbc <MX_USB_DEVICE_Init+0x54>)
 800af96:	f7fe fee5 	bl	8009d64 <USBD_CDC_RegisterInterface>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800afa0:	f7f6 fbc0 	bl	8001724 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afa4:	4805      	ldr	r0, [pc, #20]	@ (800afbc <MX_USB_DEVICE_Init+0x54>)
 800afa6:	f7fe ff8d 	bl	8009ec4 <USBD_Start>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800afb0:	f7f6 fbb8 	bl	8001724 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afb4:	bf00      	nop
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	2000012c 	.word	0x2000012c
 800afbc:	200003b8 	.word	0x200003b8
 800afc0:	20000018 	.word	0x20000018
 800afc4:	2000011c 	.word	0x2000011c

0800afc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afcc:	2200      	movs	r2, #0
 800afce:	4905      	ldr	r1, [pc, #20]	@ (800afe4 <CDC_Init_FS+0x1c>)
 800afd0:	4805      	ldr	r0, [pc, #20]	@ (800afe8 <CDC_Init_FS+0x20>)
 800afd2:	f7fe fedd 	bl	8009d90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afd6:	4905      	ldr	r1, [pc, #20]	@ (800afec <CDC_Init_FS+0x24>)
 800afd8:	4803      	ldr	r0, [pc, #12]	@ (800afe8 <CDC_Init_FS+0x20>)
 800afda:	f7fe fef2 	bl	8009dc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800afde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20000a7c 	.word	0x20000a7c
 800afe8:	200003b8 	.word	0x200003b8
 800afec:	2000067c 	.word	0x2000067c

0800aff0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aff4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	46bd      	mov	sp, r7
 800affa:	bc80      	pop	{r7}
 800affc:	4770      	bx	lr
	...

0800b000 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	6039      	str	r1, [r7, #0]
 800b00a:	71fb      	strb	r3, [r7, #7]
 800b00c:	4613      	mov	r3, r2
 800b00e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	2b23      	cmp	r3, #35	@ 0x23
 800b014:	d84a      	bhi.n	800b0ac <CDC_Control_FS+0xac>
 800b016:	a201      	add	r2, pc, #4	@ (adr r2, 800b01c <CDC_Control_FS+0x1c>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b0ad 	.word	0x0800b0ad
 800b020:	0800b0ad 	.word	0x0800b0ad
 800b024:	0800b0ad 	.word	0x0800b0ad
 800b028:	0800b0ad 	.word	0x0800b0ad
 800b02c:	0800b0ad 	.word	0x0800b0ad
 800b030:	0800b0ad 	.word	0x0800b0ad
 800b034:	0800b0ad 	.word	0x0800b0ad
 800b038:	0800b0ad 	.word	0x0800b0ad
 800b03c:	0800b0ad 	.word	0x0800b0ad
 800b040:	0800b0ad 	.word	0x0800b0ad
 800b044:	0800b0ad 	.word	0x0800b0ad
 800b048:	0800b0ad 	.word	0x0800b0ad
 800b04c:	0800b0ad 	.word	0x0800b0ad
 800b050:	0800b0ad 	.word	0x0800b0ad
 800b054:	0800b0ad 	.word	0x0800b0ad
 800b058:	0800b0ad 	.word	0x0800b0ad
 800b05c:	0800b0ad 	.word	0x0800b0ad
 800b060:	0800b0ad 	.word	0x0800b0ad
 800b064:	0800b0ad 	.word	0x0800b0ad
 800b068:	0800b0ad 	.word	0x0800b0ad
 800b06c:	0800b0ad 	.word	0x0800b0ad
 800b070:	0800b0ad 	.word	0x0800b0ad
 800b074:	0800b0ad 	.word	0x0800b0ad
 800b078:	0800b0ad 	.word	0x0800b0ad
 800b07c:	0800b0ad 	.word	0x0800b0ad
 800b080:	0800b0ad 	.word	0x0800b0ad
 800b084:	0800b0ad 	.word	0x0800b0ad
 800b088:	0800b0ad 	.word	0x0800b0ad
 800b08c:	0800b0ad 	.word	0x0800b0ad
 800b090:	0800b0ad 	.word	0x0800b0ad
 800b094:	0800b0ad 	.word	0x0800b0ad
 800b098:	0800b0ad 	.word	0x0800b0ad
 800b09c:	0800b0ad 	.word	0x0800b0ad
 800b0a0:	0800b0ad 	.word	0x0800b0ad
 800b0a4:	0800b0ad 	.word	0x0800b0ad
 800b0a8:	0800b0ad 	.word	0x0800b0ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0ac:	bf00      	nop
  }

  return (USBD_OK);
 800b0ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bc80      	pop	{r7}
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop

0800b0bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0c6:	6879      	ldr	r1, [r7, #4]
 800b0c8:	480a      	ldr	r0, [pc, #40]	@ (800b0f4 <CDC_Receive_FS+0x38>)
 800b0ca:	f7fe fe7a 	bl	8009dc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0ce:	4809      	ldr	r0, [pc, #36]	@ (800b0f4 <CDC_Receive_FS+0x38>)
 800b0d0:	f7fe fe8a 	bl	8009de8 <USBD_CDC_ReceivePacket>
  data_recieved += strlen(UserRxBufferFS);
 800b0d4:	4808      	ldr	r0, [pc, #32]	@ (800b0f8 <CDC_Receive_FS+0x3c>)
 800b0d6:	f7f5 f83b 	bl	8000150 <strlen>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	4b07      	ldr	r3, [pc, #28]	@ (800b0fc <CDC_Receive_FS+0x40>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	4b05      	ldr	r3, [pc, #20]	@ (800b0fc <CDC_Receive_FS+0x40>)
 800b0e8:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800b0ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	200003b8 	.word	0x200003b8
 800b0f8:	2000067c 	.word	0x2000067c
 800b0fc:	20000e7c 	.word	0x20000e7c

0800b100 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2212      	movs	r2, #18
 800b110:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b112:	4b03      	ldr	r3, [pc, #12]	@ (800b120 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	bc80      	pop	{r7}
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	20000148 	.word	0x20000148

0800b124 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2204      	movs	r2, #4
 800b134:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b136:	4b03      	ldr	r3, [pc, #12]	@ (800b144 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bc80      	pop	{r7}
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	2000015c 	.word	0x2000015c

0800b148 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	4603      	mov	r3, r0
 800b150:	6039      	str	r1, [r7, #0]
 800b152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d105      	bne.n	800b166 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	4907      	ldr	r1, [pc, #28]	@ (800b17c <USBD_FS_ProductStrDescriptor+0x34>)
 800b15e:	4808      	ldr	r0, [pc, #32]	@ (800b180 <USBD_FS_ProductStrDescriptor+0x38>)
 800b160:	f7ff fe25 	bl	800adae <USBD_GetString>
 800b164:	e004      	b.n	800b170 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	4904      	ldr	r1, [pc, #16]	@ (800b17c <USBD_FS_ProductStrDescriptor+0x34>)
 800b16a:	4805      	ldr	r0, [pc, #20]	@ (800b180 <USBD_FS_ProductStrDescriptor+0x38>)
 800b16c:	f7ff fe1f 	bl	800adae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b170:	4b02      	ldr	r3, [pc, #8]	@ (800b17c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20000e80 	.word	0x20000e80
 800b180:	0800b8e0 	.word	0x0800b8e0

0800b184 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	6039      	str	r1, [r7, #0]
 800b18e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	4904      	ldr	r1, [pc, #16]	@ (800b1a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b194:	4804      	ldr	r0, [pc, #16]	@ (800b1a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b196:	f7ff fe0a 	bl	800adae <USBD_GetString>
  return USBD_StrDesc;
 800b19a:	4b02      	ldr	r3, [pc, #8]	@ (800b1a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20000e80 	.word	0x20000e80
 800b1a8:	0800b8f8 	.word	0x0800b8f8

0800b1ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	221a      	movs	r2, #26
 800b1bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1be:	f000 f843 	bl	800b248 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1c2:	4b02      	ldr	r3, [pc, #8]	@ (800b1cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20000160 	.word	0x20000160

0800b1d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	6039      	str	r1, [r7, #0]
 800b1da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d105      	bne.n	800b1ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	4907      	ldr	r1, [pc, #28]	@ (800b204 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1e6:	4808      	ldr	r0, [pc, #32]	@ (800b208 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1e8:	f7ff fde1 	bl	800adae <USBD_GetString>
 800b1ec:	e004      	b.n	800b1f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	4904      	ldr	r1, [pc, #16]	@ (800b204 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1f2:	4805      	ldr	r0, [pc, #20]	@ (800b208 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1f4:	f7ff fddb 	bl	800adae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1f8:	4b02      	ldr	r3, [pc, #8]	@ (800b204 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000e80 	.word	0x20000e80
 800b208:	0800b90c 	.word	0x0800b90c

0800b20c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	6039      	str	r1, [r7, #0]
 800b216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b218:	79fb      	ldrb	r3, [r7, #7]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d105      	bne.n	800b22a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	4907      	ldr	r1, [pc, #28]	@ (800b240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b222:	4808      	ldr	r0, [pc, #32]	@ (800b244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b224:	f7ff fdc3 	bl	800adae <USBD_GetString>
 800b228:	e004      	b.n	800b234 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	4904      	ldr	r1, [pc, #16]	@ (800b240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b22e:	4805      	ldr	r0, [pc, #20]	@ (800b244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b230:	f7ff fdbd 	bl	800adae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b234:	4b02      	ldr	r3, [pc, #8]	@ (800b240 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000e80 	.word	0x20000e80
 800b244:	0800b918 	.word	0x0800b918

0800b248 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b24e:	4b0f      	ldr	r3, [pc, #60]	@ (800b28c <Get_SerialNum+0x44>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b254:	4b0e      	ldr	r3, [pc, #56]	@ (800b290 <Get_SerialNum+0x48>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b25a:	4b0e      	ldr	r3, [pc, #56]	@ (800b294 <Get_SerialNum+0x4c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4413      	add	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d009      	beq.n	800b282 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b26e:	2208      	movs	r2, #8
 800b270:	4909      	ldr	r1, [pc, #36]	@ (800b298 <Get_SerialNum+0x50>)
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 f814 	bl	800b2a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b278:	2204      	movs	r2, #4
 800b27a:	4908      	ldr	r1, [pc, #32]	@ (800b29c <Get_SerialNum+0x54>)
 800b27c:	68b8      	ldr	r0, [r7, #8]
 800b27e:	f000 f80f 	bl	800b2a0 <IntToUnicode>
  }
}
 800b282:	bf00      	nop
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	1ffff7e8 	.word	0x1ffff7e8
 800b290:	1ffff7ec 	.word	0x1ffff7ec
 800b294:	1ffff7f0 	.word	0x1ffff7f0
 800b298:	20000162 	.word	0x20000162
 800b29c:	20000172 	.word	0x20000172

0800b2a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75fb      	strb	r3, [r7, #23]
 800b2b6:	e027      	b.n	800b308 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	0f1b      	lsrs	r3, r3, #28
 800b2bc:	2b09      	cmp	r3, #9
 800b2be:	d80b      	bhi.n	800b2d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	0f1b      	lsrs	r3, r3, #28
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	440b      	add	r3, r1
 800b2d0:	3230      	adds	r2, #48	@ 0x30
 800b2d2:	b2d2      	uxtb	r2, r2
 800b2d4:	701a      	strb	r2, [r3, #0]
 800b2d6:	e00a      	b.n	800b2ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	0f1b      	lsrs	r3, r3, #28
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	440b      	add	r3, r1
 800b2e8:	3237      	adds	r2, #55	@ 0x37
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	011b      	lsls	r3, r3, #4
 800b2f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	2200      	movs	r2, #0
 800b300:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b302:	7dfb      	ldrb	r3, [r7, #23]
 800b304:	3301      	adds	r3, #1
 800b306:	75fb      	strb	r3, [r7, #23]
 800b308:	7dfa      	ldrb	r2, [r7, #23]
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d3d3      	bcc.n	800b2b8 <IntToUnicode+0x18>
  }
}
 800b310:	bf00      	nop
 800b312:	bf00      	nop
 800b314:	371c      	adds	r7, #28
 800b316:	46bd      	mov	sp, r7
 800b318:	bc80      	pop	{r7}
 800b31a:	4770      	bx	lr

0800b31c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a0d      	ldr	r2, [pc, #52]	@ (800b360 <HAL_PCD_MspInit+0x44>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d113      	bne.n	800b356 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b32e:	4b0d      	ldr	r3, [pc, #52]	@ (800b364 <HAL_PCD_MspInit+0x48>)
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	4a0c      	ldr	r2, [pc, #48]	@ (800b364 <HAL_PCD_MspInit+0x48>)
 800b334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b338:	61d3      	str	r3, [r2, #28]
 800b33a:	4b0a      	ldr	r3, [pc, #40]	@ (800b364 <HAL_PCD_MspInit+0x48>)
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b346:	2200      	movs	r2, #0
 800b348:	2100      	movs	r1, #0
 800b34a:	2014      	movs	r0, #20
 800b34c:	f7f7 fd4b 	bl	8002de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b350:	2014      	movs	r0, #20
 800b352:	f7f7 fd64 	bl	8002e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b356:	bf00      	nop
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	40005c00 	.word	0x40005c00
 800b364:	40021000 	.word	0x40021000

0800b368 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b37c:	4619      	mov	r1, r3
 800b37e:	4610      	mov	r0, r2
 800b380:	f7fe fde8 	bl	8009f54 <USBD_LL_SetupStage>
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b39e:	78fa      	ldrb	r2, [r7, #3]
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	00db      	lsls	r3, r3, #3
 800b3aa:	440b      	add	r3, r1
 800b3ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	78fb      	ldrb	r3, [r7, #3]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	f7fe fe1a 	bl	8009fee <USBD_LL_DataOutStage>
}
 800b3ba:	bf00      	nop
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b3d4:	78fa      	ldrb	r2, [r7, #3]
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	440b      	add	r3, r1
 800b3e2:	3324      	adds	r3, #36	@ 0x24
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	78fb      	ldrb	r3, [r7, #3]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	f7fe fe71 	bl	800a0d0 <USBD_LL_DataInStage>
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe ff81 	bl	800a30c <USBD_LL_SOF>
}
 800b40a:	bf00      	nop
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b41a:	2301      	movs	r3, #1
 800b41c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	799b      	ldrb	r3, [r3, #6]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d001      	beq.n	800b42a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b426:	f7f6 f97d 	bl	8001724 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b430:	7bfa      	ldrb	r2, [r7, #15]
 800b432:	4611      	mov	r1, r2
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe ff31 	bl	800a29c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b440:	4618      	mov	r0, r3
 800b442:	f7fe feea 	bl	800a21a <USBD_LL_Reset>
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe ff2b 	bl	800a2ba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	7a9b      	ldrb	r3, [r3, #10]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b46c:	4b04      	ldr	r3, [pc, #16]	@ (800b480 <HAL_PCD_SuspendCallback+0x30>)
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	4a03      	ldr	r2, [pc, #12]	@ (800b480 <HAL_PCD_SuspendCallback+0x30>)
 800b472:	f043 0306 	orr.w	r3, r3, #6
 800b476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b478:	bf00      	nop
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	e000ed00 	.word	0xe000ed00

0800b484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe ff25 	bl	800a2e2 <USBD_LL_Resume>
}
 800b498:	bf00      	nop
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b4a8:	4a28      	ldr	r2, [pc, #160]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a26      	ldr	r2, [pc, #152]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4b4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b4b8:	4b24      	ldr	r3, [pc, #144]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4ba:	4a25      	ldr	r2, [pc, #148]	@ (800b550 <USBD_LL_Init+0xb0>)
 800b4bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b4be:	4b23      	ldr	r3, [pc, #140]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b4c4:	4b21      	ldr	r3, [pc, #132]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b4ca:	4b20      	ldr	r3, [pc, #128]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b4d0:	4b1e      	ldr	r3, [pc, #120]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b4d6:	4b1d      	ldr	r3, [pc, #116]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b4dc:	481b      	ldr	r0, [pc, #108]	@ (800b54c <USBD_LL_Init+0xac>)
 800b4de:	f7f8 f846 	bl	800356e <HAL_PCD_Init>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b4e8:	f7f6 f91c 	bl	8001724 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b4f2:	2318      	movs	r3, #24
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	f7f9 fd57 	bl	8004faa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b502:	2358      	movs	r3, #88	@ 0x58
 800b504:	2200      	movs	r2, #0
 800b506:	2180      	movs	r1, #128	@ 0x80
 800b508:	f7f9 fd4f 	bl	8004faa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b512:	23c0      	movs	r3, #192	@ 0xc0
 800b514:	2200      	movs	r2, #0
 800b516:	2181      	movs	r1, #129	@ 0x81
 800b518:	f7f9 fd47 	bl	8004faa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b522:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b526:	2200      	movs	r2, #0
 800b528:	2101      	movs	r1, #1
 800b52a:	f7f9 fd3e 	bl	8004faa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b538:	2200      	movs	r2, #0
 800b53a:	2182      	movs	r1, #130	@ 0x82
 800b53c:	f7f9 fd35 	bl	8004faa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20001080 	.word	0x20001080
 800b550:	40005c00 	.word	0x40005c00

0800b554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7f8 f8f5 	bl	800375a <HAL_PCD_Start>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	4618      	mov	r0, r3
 800b578:	f000 f94e 	bl	800b818 <USBD_Get_USB_Status>
 800b57c:	4603      	mov	r3, r0
 800b57e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b580:	7bbb      	ldrb	r3, [r7, #14]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	4608      	mov	r0, r1
 800b594:	4611      	mov	r1, r2
 800b596:	461a      	mov	r2, r3
 800b598:	4603      	mov	r3, r0
 800b59a:	70fb      	strb	r3, [r7, #3]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70bb      	strb	r3, [r7, #2]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b5b2:	78bb      	ldrb	r3, [r7, #2]
 800b5b4:	883a      	ldrh	r2, [r7, #0]
 800b5b6:	78f9      	ldrb	r1, [r7, #3]
 800b5b8:	f7f8 fa49 	bl	8003a4e <HAL_PCD_EP_Open>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 f928 	bl	800b818 <USBD_Get_USB_Status>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7f8 fa87 	bl	8003b08 <HAL_PCD_EP_Close>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	4618      	mov	r0, r3
 800b602:	f000 f909 	bl	800b818 <USBD_Get_USB_Status>
 800b606:	4603      	mov	r3, r0
 800b608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	4611      	mov	r1, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f7f8 fb2f 	bl	8003c96 <HAL_PCD_EP_SetStall>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 f8ea 	bl	800b818 <USBD_Get_USB_Status>
 800b644:	4603      	mov	r3, r0
 800b646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b648:	7bbb      	ldrb	r3, [r7, #14]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b66c:	78fa      	ldrb	r2, [r7, #3]
 800b66e:	4611      	mov	r1, r2
 800b670:	4618      	mov	r0, r3
 800b672:	f7f8 fb70 	bl	8003d56 <HAL_PCD_EP_ClrStall>
 800b676:	4603      	mov	r3, r0
 800b678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 f8cb 	bl	800b818 <USBD_Get_USB_Status>
 800b682:	4603      	mov	r3, r0
 800b684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b686:	7bbb      	ldrb	r3, [r7, #14]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b6a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b6a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	da0b      	bge.n	800b6c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6ac:	78fb      	ldrb	r3, [r7, #3]
 800b6ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6b2:	68f9      	ldr	r1, [r7, #12]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	4413      	add	r3, r2
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	440b      	add	r3, r1
 800b6be:	3312      	adds	r3, #18
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	e00b      	b.n	800b6dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b6c4:	78fb      	ldrb	r3, [r7, #3]
 800b6c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6ca:	68f9      	ldr	r1, [r7, #12]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	00db      	lsls	r3, r3, #3
 800b6d4:	440b      	add	r3, r1
 800b6d6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b6da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bc80      	pop	{r7}
 800b6e4:	4770      	bx	lr

0800b6e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b700:	78fa      	ldrb	r2, [r7, #3]
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f7f8 f97e 	bl	8003a06 <HAL_PCD_SetAddress>
 800b70a:	4603      	mov	r3, r0
 800b70c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
 800b710:	4618      	mov	r0, r3
 800b712:	f000 f881 	bl	800b818 <USBD_Get_USB_Status>
 800b716:	4603      	mov	r3, r0
 800b718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	607a      	str	r2, [r7, #4]
 800b72e:	461a      	mov	r2, r3
 800b730:	460b      	mov	r3, r1
 800b732:	72fb      	strb	r3, [r7, #11]
 800b734:	4613      	mov	r3, r2
 800b736:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b746:	893b      	ldrh	r3, [r7, #8]
 800b748:	7af9      	ldrb	r1, [r7, #11]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	f7f8 fa6c 	bl	8003c28 <HAL_PCD_EP_Transmit>
 800b750:	4603      	mov	r3, r0
 800b752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	4618      	mov	r0, r3
 800b758:	f000 f85e 	bl	800b818 <USBD_Get_USB_Status>
 800b75c:	4603      	mov	r3, r0
 800b75e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b760:	7dbb      	ldrb	r3, [r7, #22]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b086      	sub	sp, #24
 800b76e:	af00      	add	r7, sp, #0
 800b770:	60f8      	str	r0, [r7, #12]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	461a      	mov	r2, r3
 800b776:	460b      	mov	r3, r1
 800b778:	72fb      	strb	r3, [r7, #11]
 800b77a:	4613      	mov	r3, r2
 800b77c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b78c:	893b      	ldrh	r3, [r7, #8]
 800b78e:	7af9      	ldrb	r1, [r7, #11]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	f7f8 fa01 	bl	8003b98 <HAL_PCD_EP_Receive>
 800b796:	4603      	mov	r3, r0
 800b798:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b79a:	7dfb      	ldrb	r3, [r7, #23]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 f83b 	bl	800b818 <USBD_Get_USB_Status>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b7c2:	78fa      	ldrb	r2, [r7, #3]
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7f8 fa17 	bl	8003bfa <HAL_PCD_EP_GetRxCount>
 800b7cc:	4603      	mov	r3, r0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b7e0:	4b02      	ldr	r3, [pc, #8]	@ (800b7ec <USBD_static_malloc+0x14>)
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	4770      	bx	lr
 800b7ec:	20001358 	.word	0x20001358

0800b7f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]

}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bc80      	pop	{r7}
 800b800:	4770      	bx	lr

0800b802 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	460b      	mov	r3, r1
 800b80c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	bc80      	pop	{r7}
 800b816:	4770      	bx	lr

0800b818 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b826:	79fb      	ldrb	r3, [r7, #7]
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d817      	bhi.n	800b85c <USBD_Get_USB_Status+0x44>
 800b82c:	a201      	add	r2, pc, #4	@ (adr r2, 800b834 <USBD_Get_USB_Status+0x1c>)
 800b82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b832:	bf00      	nop
 800b834:	0800b845 	.word	0x0800b845
 800b838:	0800b84b 	.word	0x0800b84b
 800b83c:	0800b851 	.word	0x0800b851
 800b840:	0800b857 	.word	0x0800b857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	73fb      	strb	r3, [r7, #15]
    break;
 800b848:	e00b      	b.n	800b862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b84a:	2302      	movs	r3, #2
 800b84c:	73fb      	strb	r3, [r7, #15]
    break;
 800b84e:	e008      	b.n	800b862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b850:	2301      	movs	r3, #1
 800b852:	73fb      	strb	r3, [r7, #15]
    break;
 800b854:	e005      	b.n	800b862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b856:	2302      	movs	r3, #2
 800b858:	73fb      	strb	r3, [r7, #15]
    break;
 800b85a:	e002      	b.n	800b862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b85c:	2302      	movs	r3, #2
 800b85e:	73fb      	strb	r3, [r7, #15]
    break;
 800b860:	bf00      	nop
  }
  return usb_status;
 800b862:	7bfb      	ldrb	r3, [r7, #15]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3714      	adds	r7, #20
 800b868:	46bd      	mov	sp, r7
 800b86a:	bc80      	pop	{r7}
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop

0800b870 <memset>:
 800b870:	4603      	mov	r3, r0
 800b872:	4402      	add	r2, r0
 800b874:	4293      	cmp	r3, r2
 800b876:	d100      	bne.n	800b87a <memset+0xa>
 800b878:	4770      	bx	lr
 800b87a:	f803 1b01 	strb.w	r1, [r3], #1
 800b87e:	e7f9      	b.n	800b874 <memset+0x4>

0800b880 <__libc_init_array>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	2600      	movs	r6, #0
 800b884:	4d0c      	ldr	r5, [pc, #48]	@ (800b8b8 <__libc_init_array+0x38>)
 800b886:	4c0d      	ldr	r4, [pc, #52]	@ (800b8bc <__libc_init_array+0x3c>)
 800b888:	1b64      	subs	r4, r4, r5
 800b88a:	10a4      	asrs	r4, r4, #2
 800b88c:	42a6      	cmp	r6, r4
 800b88e:	d109      	bne.n	800b8a4 <__libc_init_array+0x24>
 800b890:	f000 f81a 	bl	800b8c8 <_init>
 800b894:	2600      	movs	r6, #0
 800b896:	4d0a      	ldr	r5, [pc, #40]	@ (800b8c0 <__libc_init_array+0x40>)
 800b898:	4c0a      	ldr	r4, [pc, #40]	@ (800b8c4 <__libc_init_array+0x44>)
 800b89a:	1b64      	subs	r4, r4, r5
 800b89c:	10a4      	asrs	r4, r4, #2
 800b89e:	42a6      	cmp	r6, r4
 800b8a0:	d105      	bne.n	800b8ae <__libc_init_array+0x2e>
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8a8:	4798      	blx	r3
 800b8aa:	3601      	adds	r6, #1
 800b8ac:	e7ee      	b.n	800b88c <__libc_init_array+0xc>
 800b8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b2:	4798      	blx	r3
 800b8b4:	3601      	adds	r6, #1
 800b8b6:	e7f2      	b.n	800b89e <__libc_init_array+0x1e>
 800b8b8:	0800b954 	.word	0x0800b954
 800b8bc:	0800b954 	.word	0x0800b954
 800b8c0:	0800b954 	.word	0x0800b954
 800b8c4:	0800b958 	.word	0x0800b958

0800b8c8 <_init>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr

0800b8d4 <_fini>:
 800b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d6:	bf00      	nop
 800b8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8da:	bc08      	pop	{r3}
 800b8dc:	469e      	mov	lr, r3
 800b8de:	4770      	bx	lr
