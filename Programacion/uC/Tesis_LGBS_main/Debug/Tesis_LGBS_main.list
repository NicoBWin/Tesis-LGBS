
Tesis_LGBS_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f314  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800f428  0800f428  00010428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8c4  0800f8c4  00011344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f8c4  0800f8c4  000108c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8cc  0800f8cc  00011344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8cc  0800f8cc  000108cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f8d0  0800f8d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800f8d4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001550  20000344  0800fc18  00011344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001894  0800fc18  00011894  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017712  00000000  00000000  0001136d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004282  00000000  00000000  00028a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0002cd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001056  00000000  00000000  0002e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbc4  00000000  00000000  0002f2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197cc  00000000  00000000  0004beaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966c1  00000000  00000000  00065676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbd37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d04  00000000  00000000  000fbd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00102a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f40c 	.word	0x0800f40c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800f40c 	.word	0x0800f40c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	2300      	movs	r3, #0
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	f7ff fc1f 	bl	80009bc <__aeabi_dcmplt>
 800117e:	b928      	cbnz	r0, 800118c <__aeabi_d2lz+0x1c>
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001188:	f000 b80a 	b.w	80011a0 <__aeabi_d2ulz>
 800118c:	4620      	mov	r0, r4
 800118e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001192:	f000 f805 	bl	80011a0 <__aeabi_d2ulz>
 8001196:	4240      	negs	r0, r0
 8001198:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	bf00      	nop

080011a0 <__aeabi_d2ulz>:
 80011a0:	b5d0      	push	{r4, r6, r7, lr}
 80011a2:	2200      	movs	r2, #0
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <__aeabi_d2ulz+0x34>)
 80011a6:	4606      	mov	r6, r0
 80011a8:	460f      	mov	r7, r1
 80011aa:	f7ff f995 	bl	80004d8 <__aeabi_dmul>
 80011ae:	f7ff fc55 	bl	8000a5c <__aeabi_d2uiz>
 80011b2:	4604      	mov	r4, r0
 80011b4:	f7ff f916 	bl	80003e4 <__aeabi_ui2d>
 80011b8:	2200      	movs	r2, #0
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <__aeabi_d2ulz+0x38>)
 80011bc:	f7ff f98c 	bl	80004d8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4630      	mov	r0, r6
 80011c6:	4639      	mov	r1, r7
 80011c8:	f7fe ffce 	bl	8000168 <__aeabi_dsub>
 80011cc:	f7ff fc46 	bl	8000a5c <__aeabi_d2uiz>
 80011d0:	4621      	mov	r1, r4
 80011d2:	bdd0      	pop	{r4, r6, r7, pc}
 80011d4:	3df00000 	.word	0x3df00000
 80011d8:	41f00000 	.word	0x41f00000

080011dc <set_speed>:
#include "BLDCcontrol.h"
uint32_t mot_speed_count = 0;
uint32_t last_mot_speed_count = 0;
uint32_t mot_speed_setpoint = 0;
void set_speed(float value)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	mot_speed_setpoint = (value*18*18000)/60;
 80011e4:	490c      	ldr	r1, [pc, #48]	@ (8001218 <set_speed+0x3c>)
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdb6 	bl	8000d58 <__aeabi_fmul>
 80011ec:	4603      	mov	r3, r0
 80011ee:	490b      	ldr	r1, [pc, #44]	@ (800121c <set_speed+0x40>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fdb1 	bl	8000d58 <__aeabi_fmul>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4909      	ldr	r1, [pc, #36]	@ (8001220 <set_speed+0x44>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fe60 	bl	8000ec0 <__aeabi_fdiv>
 8001200:	4603      	mov	r3, r0
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff94 	bl	8001130 <__aeabi_f2uiz>
 8001208:	4603      	mov	r3, r0
 800120a:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <set_speed+0x48>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	41900000 	.word	0x41900000
 800121c:	468ca000 	.word	0x468ca000
 8001220:	42700000 	.word	0x42700000
 8001224:	20000368 	.word	0x20000368

08001228 <get_speed>:

float get_speed(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	return mot_speed_setpoint*60.0f/18.0f/18000.0f;
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <get_speed+0x34>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd39 	bl	8000ca8 <__aeabi_ui2f>
 8001236:	4603      	mov	r3, r0
 8001238:	4909      	ldr	r1, [pc, #36]	@ (8001260 <get_speed+0x38>)
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fd8c 	bl	8000d58 <__aeabi_fmul>
 8001240:	4603      	mov	r3, r0
 8001242:	4908      	ldr	r1, [pc, #32]	@ (8001264 <get_speed+0x3c>)
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fe3b 	bl	8000ec0 <__aeabi_fdiv>
 800124a:	4603      	mov	r3, r0
 800124c:	4906      	ldr	r1, [pc, #24]	@ (8001268 <get_speed+0x40>)
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fe36 	bl	8000ec0 <__aeabi_fdiv>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000368 	.word	0x20000368
 8001260:	42700000 	.word	0x42700000
 8001264:	41900000 	.word	0x41900000
 8001268:	468ca000 	.word	0x468ca000

0800126c <get_speed_meas>:

float get_speed_meas(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	float res = (float)(last_mot_speed_count)/18000.0f;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <get_speed_meas+0x28>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd16 	bl	8000ca8 <__aeabi_ui2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4906      	ldr	r1, [pc, #24]	@ (8001298 <get_speed_meas+0x2c>)
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe1d 	bl	8000ec0 <__aeabi_fdiv>
 8001286:	4603      	mov	r3, r0
 8001288:	607b      	str	r3, [r7, #4]
	return res;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000364 	.word	0x20000364
 8001298:	468ca000 	.word	0x468ca000
 800129c:	00000000 	.word	0x00000000

080012a0 <HAL_TIMEx_CommutCallback>:
// Input compare
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	// current is in the order of 500 per amp
	/*
	 * In principle an error arround 1k cnts should increase the current by less than an amp to soften the current ramp.
	 * ESTO SALIO A OJO, NO HAY MATEMATICA
	 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80012a8:	2102      	movs	r1, #2
 80012aa:	483b      	ldr	r0, [pc, #236]	@ (8001398 <HAL_TIMEx_CommutCallback+0xf8>)
 80012ac:	f002 f8ae 	bl	800340c <HAL_GPIO_TogglePin>
	mot_speed_count += htim->Instance->CCR1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <HAL_TIMEx_CommutCallback+0xfc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a37      	ldr	r2, [pc, #220]	@ (800139c <HAL_TIMEx_CommutCallback+0xfc>)
 80012be:	6013      	str	r3, [r2, #0]

	err = mot_speed_setpoint - mot_speed_count;
 80012c0:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <HAL_TIMEx_CommutCallback+0x100>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b35      	ldr	r3, [pc, #212]	@ (800139c <HAL_TIMEx_CommutCallback+0xfc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b35      	ldr	r3, [pc, #212]	@ (80013a4 <HAL_TIMEx_CommutCallback+0x104>)
 80012ce:	601a      	str	r2, [r3, #0]

	p = Kp * err;
 80012d0:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <HAL_TIMEx_CommutCallback+0x104>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f895 	bl	8000404 <__aeabi_i2d>
 80012da:	a32b      	add	r3, pc, #172	@ (adr r3, 8001388 <HAL_TIMEx_CommutCallback+0xe8>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff f8fa 	bl	80004d8 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fb8e 	bl	8000a0c <__aeabi_d2iz>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a2d      	ldr	r2, [pc, #180]	@ (80013a8 <HAL_TIMEx_CommutCallback+0x108>)
 80012f4:	6013      	str	r3, [r2, #0]
	aux_i = i + Ki * err ;
 80012f6:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <HAL_TIMEx_CommutCallback+0x10c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f882 	bl	8000404 <__aeabi_i2d>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <HAL_TIMEx_CommutCallback+0x104>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f87b 	bl	8000404 <__aeabi_i2d>
 800130e:	a320      	add	r3, pc, #128	@ (adr r3, 8001390 <HAL_TIMEx_CommutCallback+0xf0>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff f8e0 	bl	80004d8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe ff24 	bl	800016c <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fb6e 	bl	8000a0c <__aeabi_d2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	4a1f      	ldr	r2, [pc, #124]	@ (80013b0 <HAL_TIMEx_CommutCallback+0x110>)
 8001334:	6013      	str	r3, [r2, #0]
	i = abs(aux_i) < SATURATION_INT ? aux_i : i;
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <HAL_TIMEx_CommutCallback+0x110>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f513 6fba 	cmn.w	r3, #1488	@ 0x5d0
 800133e:	dd07      	ble.n	8001350 <HAL_TIMEx_CommutCallback+0xb0>
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_TIMEx_CommutCallback+0x110>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f5b3 6fba 	cmp.w	r3, #1488	@ 0x5d0
 8001348:	da02      	bge.n	8001350 <HAL_TIMEx_CommutCallback+0xb0>
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <HAL_TIMEx_CommutCallback+0x110>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e001      	b.n	8001354 <HAL_TIMEx_CommutCallback+0xb4>
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_TIMEx_CommutCallback+0x10c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a15      	ldr	r2, [pc, #84]	@ (80013ac <HAL_TIMEx_CommutCallback+0x10c>)
 8001356:	6013      	str	r3, [r2, #0]

	out_pi = p + i;
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <HAL_TIMEx_CommutCallback+0x108>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <HAL_TIMEx_CommutCallback+0x10c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4413      	add	r3, r2
 8001362:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <HAL_TIMEx_CommutCallback+0x114>)
 8001364:	6013      	str	r3, [r2, #0]
	set_I_int(out_pi);
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <HAL_TIMEx_CommutCallback+0x114>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f8a9 	bl	80014c4 <set_I_int>
	last_mot_speed_count = mot_speed_count;
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_TIMEx_CommutCallback+0xfc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <HAL_TIMEx_CommutCallback+0x118>)
 8001378:	6013      	str	r3, [r2, #0]
	mot_speed_count = 0;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <HAL_TIMEx_CommutCallback+0xfc>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	33333333 	.word	0x33333333
 800138c:	3fd33333 	.word	0x3fd33333
 8001390:	d2f1a9fc 	.word	0xd2f1a9fc
 8001394:	3f50624d 	.word	0x3f50624d
 8001398:	40010c00 	.word	0x40010c00
 800139c:	20000360 	.word	0x20000360
 80013a0:	20000368 	.word	0x20000368
 80013a4:	2000036c 	.word	0x2000036c
 80013a8:	20000370 	.word	0x20000370
 80013ac:	20000374 	.word	0x20000374
 80013b0:	20000378 	.word	0x20000378
 80013b4:	2000037c 	.word	0x2000037c
 80013b8:	20000364 	.word	0x20000364

080013bc <HAL_TIM_TriggerCallback>:

// Overflow
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	mot_speed_count += 65536;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_TIM_TriggerCallback+0x20>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80013cc:	4a03      	ldr	r2, [pc, #12]	@ (80013dc <HAL_TIM_TriggerCallback+0x20>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000360 	.word	0x20000360

080013e0 <get_I_meas>:


}

float get_I_meas()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	return (float)(adc_value-i_offset)/(float)SENS_SENSITIVITY;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <get_I_meas+0x2c>)
 80013e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <get_I_meas+0x30>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fc5b 	bl	8000cb0 <__aeabi_i2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4905      	ldr	r1, [pc, #20]	@ (8001414 <get_I_meas+0x34>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fd5e 	bl	8000ec0 <__aeabi_fdiv>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000380 	.word	0x20000380
 8001410:	20000384 	.word	0x20000384
 8001414:	43f80000 	.word	0x43f80000

08001418 <get_I_float>:

float get_I_float()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	return (float)(i_ref_int-i_offset)/(float)SENS_SENSITIVITY;
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <get_I_float+0x2c>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	461a      	mov	r2, r3
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <get_I_float+0x30>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fc3f 	bl	8000cb0 <__aeabi_i2f>
 8001432:	4603      	mov	r3, r0
 8001434:	4905      	ldr	r1, [pc, #20]	@ (800144c <get_I_float+0x34>)
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fd42 	bl	8000ec0 <__aeabi_fdiv>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000382 	.word	0x20000382
 8001448:	20000384 	.word	0x20000384
 800144c:	43f80000 	.word	0x43f80000

08001450 <set_I_float>:
uint16_t get_I_int()
{
	return i_ref_int - i_offset;
}
void set_I_float(float i)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if (i > MAX_CURR || i < 0.0)
 8001458:	4916      	ldr	r1, [pc, #88]	@ (80014b4 <set_I_float+0x64>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fe38 	bl	80010d0 <__aeabi_fcmpgt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d107      	bne.n	8001476 <set_I_float+0x26>
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fe12 	bl	8001094 <__aeabi_fcmplt>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <set_I_float+0x2a>
	{
		i = MAX_CURR;
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <set_I_float+0x64>)
 8001478:	607b      	str	r3, [r7, #4]
	}
	i_ref_int = i * SENS_SENSITIVITY + i_offset;
 800147a:	490f      	ldr	r1, [pc, #60]	@ (80014b8 <set_I_float+0x68>)
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fc6b 	bl	8000d58 <__aeabi_fmul>
 8001482:	4603      	mov	r3, r0
 8001484:	461c      	mov	r4, r3
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <set_I_float+0x6c>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc0f 	bl	8000cb0 <__aeabi_i2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4619      	mov	r1, r3
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff fb56 	bl	8000b48 <__addsf3>
 800149c:	4603      	mov	r3, r0
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fe20 	bl	80010e4 <__aeabi_f2iz>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <set_I_float+0x70>)
 80014aa:	801a      	strh	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	40400000 	.word	0x40400000
 80014b8:	43f80000 	.word	0x43f80000
 80014bc:	20000384 	.word	0x20000384
 80014c0:	20000382 	.word	0x20000382

080014c4 <set_I_int>:

void set_I_int(uint16_t i)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
	i_ref_int = i > SENS_SENSITIVITY * MAX_CURR ? max_curr : i + i_offset;
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 6fba 	cmp.w	r3, #1488	@ 0x5d0
 80014d4:	d808      	bhi.n	80014e8 <set_I_int+0x24>
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <set_I_int+0x38>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	4413      	add	r3, r2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	e002      	b.n	80014ee <set_I_int+0x2a>
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <set_I_int+0x3c>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <set_I_int+0x40>)
 80014f0:	8013      	strh	r3, [r2, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000384 	.word	0x20000384
 8001500:	20000386 	.word	0x20000386
 8001504:	20000382 	.word	0x20000382

08001508 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f001 f8e3 	bl	80026dc <HAL_ADC_GetValue>
 8001516:	4603      	mov	r3, r0
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0xc8>)
 800151c:	801a      	strh	r2, [r3, #0]
	if (!calibrated)
 800151e:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f083 0301 	eor.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01d      	beq.n	8001568 <HAL_ADC_ConvCpltCallback+0x60>
	{
		i_offset = adc_value;
 800152c:	4b28      	ldr	r3, [pc, #160]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0xc8>)
 800152e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001532:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001534:	801a      	strh	r2, [r3, #0]
		max_curr = MAX_CURR * SENS_SENSITIVITY + i_offset;
 8001536:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ff61 	bl	8000404 <__aeabi_i2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_ADC_ConvCpltCallback+0xd4>)
 8001548:	f7fe fe10 	bl	800016c <__adddf3>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fa5a 	bl	8000a0c <__aeabi_d2iz>
 8001558:	4603      	mov	r3, r0
 800155a:	b21a      	sxth	r2, r3
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 800155e:	801a      	strh	r2, [r3, #0]
		calibrated = true;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	e02f      	b.n	80015c8 <HAL_ADC_ConvCpltCallback+0xc0>
	}
	else
	{
		if (i_ref_int == i_offset)
 8001568:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0xdc>)
 800156a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	429a      	cmp	r2, r3
 8001576:	d10a      	bne.n	800158e <HAL_ADC_ConvCpltCallback+0x86>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2101      	movs	r1, #1
 800157c:	481a      	ldr	r0, [pc, #104]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 800157e:	f001 ff2d 	bl	80033dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2102      	movs	r1, #2
 8001586:	4818      	ldr	r0, [pc, #96]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001588:	f001 ff28 	bl	80033dc <HAL_GPIO_WritePin>
			return;
 800158c:	e01c      	b.n	80015c8 <HAL_ADC_ConvCpltCallback+0xc0>
		}
		if (adc_value > i_ref_int)
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001590:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	429a      	cmp	r2, r3
 800159c:	dd0a      	ble.n	80015b4 <HAL_ADC_ConvCpltCallback+0xac>
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2101      	movs	r1, #1
 80015a2:	4811      	ldr	r0, [pc, #68]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 80015a4:	f001 ff1a 	bl	80033dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2102      	movs	r1, #2
 80015ac:	480e      	ldr	r0, [pc, #56]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 80015ae:	f001 ff15 	bl	80033dc <HAL_GPIO_WritePin>
 80015b2:	e009      	b.n	80015c8 <HAL_ADC_ConvCpltCallback+0xc0>
		}
		else
		{
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_2_A, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2102      	movs	r1, #2
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 80015ba:	f001 ff0f 	bl	80033dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(H_BRIDGE_GPIO_PORT, H_BRIDGE_1_A, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2101      	movs	r1, #1
 80015c2:	4809      	ldr	r0, [pc, #36]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 80015c4:	f001 ff0a 	bl	80033dc <HAL_GPIO_WritePin>
		}
	}
}
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000380 	.word	0x20000380
 80015d4:	20000388 	.word	0x20000388
 80015d8:	20000384 	.word	0x20000384
 80015dc:	40974000 	.word	0x40974000
 80015e0:	20000386 	.word	0x20000386
 80015e4:	20000382 	.word	0x20000382
 80015e8:	40010800 	.word	0x40010800

080015ec <command_I>:

#include "stdio.h"
#include "string.h"


void command_I(uint8_t *buff, uint16_t size){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
	static float i;
	if (buff[1] == '?')
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3301      	adds	r3, #1
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001600:	d112      	bne.n	8001628 <command_I+0x3c>
	{
		gcvt(get_I_float(), 3, buff);
 8001602:	f7ff ff09 	bl	8001418 <get_I_float>
 8001606:	4603      	mov	r3, r0
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff0d 	bl	8000428 <__aeabi_f2d>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	f00a ff31 	bl	800c478 <gcvt>
		buff[4] = '\n';
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3304      	adds	r3, #4
 800161a:	220a      	movs	r2, #10
 800161c:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 800161e:	2105      	movs	r1, #5
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f009 fd07 	bl	800b034 <CDC_Transmit_FS>
 8001626:	e02f      	b.n	8001688 <command_I+0x9c>
	}
	else if (buff[1] == '=')
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3301      	adds	r3, #1
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001630:	d113      	bne.n	800165a <command_I+0x6e>
	{
		i = atof(&buff[2]);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3302      	adds	r3, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f00a f914 	bl	800b864 <atof>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa2a 	bl	8000a9c <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	4a16      	ldr	r2, [pc, #88]	@ (80016a4 <command_I+0xb8>)
 800164c:	6013      	str	r3, [r2, #0]
		set_I_float(i);
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <command_I+0xb8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fefc 	bl	8001450 <set_I_float>
 8001658:	e016      	b.n	8001688 <command_I+0x9c>
	}
	else if (buff[1] == 'm')
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3301      	adds	r3, #1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b6d      	cmp	r3, #109	@ 0x6d
 8001662:	d111      	bne.n	8001688 <command_I+0x9c>
	{
		gcvt(get_I_meas(), 3, buff);
 8001664:	f7ff febc 	bl	80013e0 <get_I_meas>
 8001668:	4603      	mov	r3, r0
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fedc 	bl	8000428 <__aeabi_f2d>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	f00a ff00 	bl	800c478 <gcvt>
		buff[4] = '\n';
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3304      	adds	r3, #4
 800167c:	220a      	movs	r2, #10
 800167e:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, 5);
 8001680:	2105      	movs	r1, #5
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f009 fcd6 	bl	800b034 <CDC_Transmit_FS>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 8001688:	bf00      	nop
 800168a:	2101      	movs	r1, #1
 800168c:	200a      	movs	r0, #10
 800168e:	f009 fcd1 	bl	800b034 <CDC_Transmit_FS>
 8001692:	4603      	mov	r3, r0
 8001694:	2b01      	cmp	r3, #1
 8001696:	d0f8      	beq.n	800168a <command_I+0x9e>
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000038c 	.word	0x2000038c

080016a8 <command_S>:

void command_S(uint8_t *buff, uint16_t size){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
	static uint16_t data;
	if (buff[1] == '?')
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80016bc:	d11c      	bne.n	80016f8 <command_S+0x50>
	{
		gcvt(get_speed(), 2, buff);
 80016be:	f7ff fdb3 	bl	8001228 <get_speed>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe feaf 	bl	8000428 <__aeabi_f2d>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2202      	movs	r2, #2
 80016ce:	f00a fed3 	bl	800c478 <gcvt>
		auto len = strlen(buff);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7fe fd3c 	bl	8000150 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	60fb      	str	r3, [r7, #12]
		buff[len] = '\n';
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	220a      	movs	r2, #10
 80016e4:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, len + 1);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f009 fc9f 	bl	800b034 <CDC_Transmit_FS>
 80016f6:	e03e      	b.n	8001776 <command_S+0xce>
	}
	else if (buff[1] == '=')
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3301      	adds	r3, #1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b3d      	cmp	r3, #61	@ 0x3d
 8001700:	d118      	bne.n	8001734 <command_S+0x8c>
	{
		data = atof(&buff[2]);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3302      	adds	r3, #2
 8001706:	4618      	mov	r0, r3
 8001708:	f00a f8ac 	bl	800b864 <atof>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9a2 	bl	8000a5c <__aeabi_d2uiz>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <command_S+0xe8>)
 800171e:	801a      	strh	r2, [r3, #0]
		set_speed(data);
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <command_S+0xe8>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fabf 	bl	8000ca8 <__aeabi_ui2f>
 800172a:	4603      	mov	r3, r0
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fd55 	bl	80011dc <set_speed>
 8001732:	e020      	b.n	8001776 <command_S+0xce>
	}
	else if (buff[1] == 'm')
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b6d      	cmp	r3, #109	@ 0x6d
 800173c:	d11b      	bne.n	8001776 <command_S+0xce>
	{
		float speed = (float)get_speed_meas();
 800173e:	f7ff fd95 	bl	800126c <get_speed_meas>
 8001742:	6178      	str	r0, [r7, #20]
		gcvt(speed, 2, buff);
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f7fe fe6f 	bl	8000428 <__aeabi_f2d>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2202      	movs	r2, #2
 800174e:	f00a fe93 	bl	800c478 <gcvt>
		auto len = strlen(buff);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7fe fcfc 	bl	8000150 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	613b      	str	r3, [r7, #16]
		buff[len] = '\n';
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	220a      	movs	r2, #10
 8001764:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(buff, len + 1);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	b29b      	uxth	r3, r3
 800176a:	3301      	adds	r3, #1
 800176c:	b29b      	uxth	r3, r3
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f009 fc5f 	bl	800b034 <CDC_Transmit_FS>
	}
	while (CDC_Transmit_FS('\n', 1) == USBD_BUSY);
 8001776:	bf00      	nop
 8001778:	2101      	movs	r1, #1
 800177a:	200a      	movs	r0, #10
 800177c:	f009 fc5a 	bl	800b034 <CDC_Transmit_FS>
 8001780:	4603      	mov	r3, r0
 8001782:	2b01      	cmp	r3, #1
 8001784:	d0f8      	beq.n	8001778 <command_S+0xd0>
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000390 	.word	0x20000390

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001798:	f000 fe66 	bl	8002468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179c:	f000 f852 	bl	8001844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a0:	f000 faa8 	bl	8001cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017a4:	f000 fa88 	bl	8001cb8 <MX_DMA_Init>
  MX_SPI1_Init();
 80017a8:	f000 f8e8 	bl	800197c <MX_SPI1_Init>
  MX_ADC1_Init();
 80017ac:	f000 f8a8 	bl	8001900 <MX_ADC1_Init>
  MX_TIM3_Init();
 80017b0:	f000 f982 	bl	8001ab8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80017b4:	f009 fb72 	bl	800ae9c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80017b8:	f000 f912 	bl	80019e0 <MX_TIM1_Init>
  MX_TIM4_Init();
 80017bc:	f000 f9f0 	bl	8001ba0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //curr_control_init(&hadc1, &htim3);
  //init_LUT_comms(&hspi1);
  HAL_TIMEx_HallSensor_Start_IT(&htim1);
 80017c0:	481b      	ldr	r0, [pc, #108]	@ (8001830 <main+0x9c>)
 80017c2:	f005 fb87 	bl	8006ed4 <HAL_TIMEx_HallSensor_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80017c6:	481b      	ldr	r0, [pc, #108]	@ (8001834 <main+0xa0>)
 80017c8:	f004 fa04 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (CDC_data_recieved())
 80017cc:	f009 fc58 	bl	800b080 <CDC_data_recieved>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0fa      	beq.n	80017cc <main+0x38>
	  {
		  rx_usb_amount = CDC_Receive_data(msg, 64);
 80017d6:	2140      	movs	r1, #64	@ 0x40
 80017d8:	4817      	ldr	r0, [pc, #92]	@ (8001838 <main+0xa4>)
 80017da:	f009 fc5b 	bl	800b094 <CDC_Receive_data>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <main+0xa8>)
 80017e4:	801a      	strh	r2, [r3, #0]
		  switch ((int)msg[0])
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <main+0xa4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b49      	cmp	r3, #73	@ 0x49
 80017ec:	d002      	beq.n	80017f4 <main+0x60>
 80017ee:	2b53      	cmp	r3, #83	@ 0x53
 80017f0:	d007      	beq.n	8001802 <main+0x6e>
 80017f2:	e00d      	b.n	8001810 <main+0x7c>
		  {
		  	  case 'I':
		  		  command_I(msg, rx_usb_amount);
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <main+0xa8>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	480f      	ldr	r0, [pc, #60]	@ (8001838 <main+0xa4>)
 80017fc:	f7ff fef6 	bl	80015ec <command_I>
		  		  break;
 8001800:	e014      	b.n	800182c <main+0x98>
		  	  case 'S':
		  		  command_S(msg, rx_usb_amount);
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <main+0xa8>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	4619      	mov	r1, r3
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <main+0xa4>)
 800180a:	f7ff ff4d 	bl	80016a8 <command_S>
		  		  break;
 800180e:	e00d      	b.n	800182c <main+0x98>
		  	  default:
		  		  CDC_Transmit_FS("\nNo reconocido\n", 15);
 8001810:	210f      	movs	r1, #15
 8001812:	480b      	ldr	r0, [pc, #44]	@ (8001840 <main+0xac>)
 8001814:	f009 fc0e 	bl	800b034 <CDC_Transmit_FS>
		  		  while (CDC_Transmit_FS(msg, rx_usb_amount) == USBD_BUSY);
 8001818:	bf00      	nop
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <main+0xa8>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <main+0xa4>)
 8001822:	f009 fc07 	bl	800b034 <CDC_Transmit_FS>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d0f6      	beq.n	800181a <main+0x86>
	  if (CDC_data_recieved())
 800182c:	e7ce      	b.n	80017cc <main+0x38>
 800182e:	bf00      	nop
 8001830:	20000460 	.word	0x20000460
 8001834:	200004f0 	.word	0x200004f0
 8001838:	20000538 	.word	0x20000538
 800183c:	20000578 	.word	0x20000578
 8001840:	0800f428 	.word	0x0800f428

08001844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	@ 0x50
 8001848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184e:	2228      	movs	r2, #40	@ 0x28
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f00a ff39 	bl	800c6ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001874:	2301      	movs	r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001878:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001882:	2301      	movs	r3, #1
 8001884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001886:	2302      	movs	r3, #2
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800188a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800188e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001890:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001896:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fb30 	bl	8004f00 <HAL_RCC_OscConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018a6:	f000 fabf 	bl	8001e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2102      	movs	r1, #2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fd9c 	bl	8005404 <HAL_RCC_ClockConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018d2:	f000 faa9 	bl	8001e28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80018d6:	2312      	movs	r3, #18
 80018d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80018da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018de:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fee8 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80018f2:	f000 fa99 	bl	8001e28 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	@ 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001912:	4a19      	ldr	r2, [pc, #100]	@ (8001978 <MX_ADC1_Init+0x78>)
 8001914:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <MX_ADC1_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001922:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <MX_ADC1_Init+0x74>)
 800192a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800192e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001930:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001938:	2201      	movs	r2, #1
 800193a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800193c:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_ADC1_Init+0x74>)
 800193e:	f000 fdf5 	bl	800252c <HAL_ADC_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001948:	f000 fa6e 	bl	8001e28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800194c:	2306      	movs	r3, #6
 800194e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001950:	2301      	movs	r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_ADC1_Init+0x74>)
 800195e:	f000 ff91 	bl	8002884 <HAL_ADC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001968:	f000 fa5e 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000394 	.word	0x20000394
 8001978:	40012400 	.word	0x40012400

0800197c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 8001982:	4a16      	ldr	r2, [pc, #88]	@ (80019dc <MX_SPI1_Init+0x60>)
 8001984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 8001994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 80019c0:	220a      	movs	r2, #10
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <MX_SPI1_Init+0x5c>)
 80019c6:	f003 ff2f 	bl	8005828 <HAL_SPI_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80019d0:	f000 fa2a 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200003c4 	.word	0x200003c4
 80019dc:	40013000 	.word	0x40013000

080019e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	@ 0x28
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a02:	463b      	mov	r3, r7
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a0a:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a0c:	4a29      	ldr	r2, [pc, #164]	@ (8001ab4 <MX_TIM1_Init+0xd4>)
 8001a0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001a10:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a26:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2e:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a3a:	481d      	ldr	r0, [pc, #116]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a3c:	f004 f87b 	bl	8005b36 <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001a46:	f000 f9ef 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a4e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	4619      	mov	r1, r3
 8001a56:	4816      	ldr	r0, [pc, #88]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a58:	f004 fc0c 	bl	8006274 <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8001a62:	f000 f9e1 	bl	8001e28 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 7;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a7e:	f005 f976 	bl	8006d6e <HAL_TIMEx_HallSensor_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001a88:	f000 f9ce 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001a8c:	2350      	movs	r3, #80	@ 0x50
 8001a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_TIM1_Init+0xd0>)
 8001a9a:	f005 fa95 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001aa4:	f000 f9c0 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	@ 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000460 	.word	0x20000460
 8001ab4:	40012c00 	.word	0x40012c00

08001ab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	@ 0x38
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]
 8001ae6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001aea:	4a2c      	ldr	r2, [pc, #176]	@ (8001b9c <MX_TIM3_Init+0xe4>)
 8001aec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aee:	4b2a      	ldr	r3, [pc, #168]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 720;
 8001afa:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001afc:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8001b00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b0e:	4822      	ldr	r0, [pc, #136]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001b10:	f004 f811 	bl	8005b36 <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b1a:	f000 f985 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481b      	ldr	r0, [pc, #108]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001b2c:	f004 fba2 	bl	8006274 <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b36:	f000 f977 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b3a:	4817      	ldr	r0, [pc, #92]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001b3c:	f004 f89c 	bl	8005c78 <HAL_TIM_PWM_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b46:	f000 f96f 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b52:	f107 0320 	add.w	r3, r7, #32
 8001b56:	4619      	mov	r1, r3
 8001b58:	480f      	ldr	r0, [pc, #60]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001b5a:	f005 fa35 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b64:	f000 f960 	bl	8001e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b68:	2360      	movs	r3, #96	@ 0x60
 8001b6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 180;
 8001b6c:	23b4      	movs	r3, #180	@ 0xb4
 8001b6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	@ (8001b98 <MX_TIM3_Init+0xe0>)
 8001b80:	f004 fab6 	bl	80060f0 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b8a:	f000 f94d 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3738      	adds	r7, #56	@ 0x38
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200004a8 	.word	0x200004a8
 8001b9c:	40000400 	.word	0x40000400

08001ba0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b090      	sub	sp, #64	@ 0x40
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bda:	4b35      	ldr	r3, [pc, #212]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001bdc:	4a35      	ldr	r2, [pc, #212]	@ (8001cb4 <MX_TIM4_Init+0x114>)
 8001bde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8001be0:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001be2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001be6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bee:	4b30      	ldr	r3, [pc, #192]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bf4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c04:	482a      	ldr	r0, [pc, #168]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001c06:	f003 ff96 	bl	8005b36 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001c10:	f000 f90a 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c18:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4823      	ldr	r0, [pc, #140]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001c22:	f004 fb27 	bl	8006274 <HAL_TIM_ConfigClockSource>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001c2c:	f000 f8fc 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c30:	481f      	ldr	r0, [pc, #124]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001c32:	f004 f879 	bl	8005d28 <HAL_TIM_IC_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001c3c:	f000 f8f4 	bl	8001e28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c40:	2304      	movs	r3, #4
 8001c42:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001c44:	2340      	movs	r3, #64	@ 0x40
 8001c46:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4817      	ldr	r0, [pc, #92]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001c54:	f004 fbd5 	bl	8006402 <HAL_TIM_SlaveConfigSynchro>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8001c5e:	f000 f8e3 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480f      	ldr	r0, [pc, #60]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001c72:	f005 f9a9 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001c7c:	f000 f8d4 	bl	8001e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 8001c84:	2303      	movs	r3, #3
 8001c86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	@ (8001cb0 <MX_TIM4_Init+0x110>)
 8001c98:	f004 f98e 	bl	8005fb8 <HAL_TIM_IC_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8001ca2:	f000 f8c1 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3740      	adds	r7, #64	@ 0x40
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200004f0 	.word	0x200004f0
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_DMA_Init+0x38>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf0 <MX_DMA_Init+0x38>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6153      	str	r3, [r2, #20]
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_DMA_Init+0x38>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	200d      	movs	r0, #13
 8001cdc:	f000 ffeb 	bl	8002cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ce0:	200d      	movs	r0, #13
 8001ce2:	f001 f804 	bl	8002cee <HAL_NVIC_EnableIRQ>

}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d08:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a42      	ldr	r2, [pc, #264]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b40      	ldr	r3, [pc, #256]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a3c      	ldr	r2, [pc, #240]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b37      	ldr	r3, [pc, #220]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a36      	ldr	r2, [pc, #216]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <MX_GPIO_Init+0x124>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	210f      	movs	r1, #15
 8001d54:	4831      	ldr	r0, [pc, #196]	@ (8001e1c <MX_GPIO_Init+0x128>)
 8001d56:	f001 fb41 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4830      	ldr	r0, [pc, #192]	@ (8001e20 <MX_GPIO_Init+0x12c>)
 8001d60:	f001 fb3c 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d64:	2301      	movs	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4828      	ldr	r0, [pc, #160]	@ (8001e1c <MX_GPIO_Init+0x128>)
 8001d7c:	f001 f9aa 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d80:	230e      	movs	r3, #14
 8001d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	4821      	ldr	r0, [pc, #132]	@ (8001e1c <MX_GPIO_Init+0x128>)
 8001d98:	f001 f99c 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4619      	mov	r1, r3
 8001db2:	481b      	ldr	r0, [pc, #108]	@ (8001e20 <MX_GPIO_Init+0x12c>)
 8001db4:	f001 f98e 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001db8:	f44f 4372 	mov.w	r3, #61952	@ 0xf200
 8001dbc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4814      	ldr	r0, [pc, #80]	@ (8001e20 <MX_GPIO_Init+0x12c>)
 8001dce:	f001 f981 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4619      	mov	r1, r3
 8001de6:	480e      	ldr	r0, [pc, #56]	@ (8001e20 <MX_GPIO_Init+0x12c>)
 8001de8:	f001 f974 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <MX_GPIO_Init+0x130>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	4a06      	ldr	r2, [pc, #24]	@ (8001e24 <MX_GPIO_Init+0x130>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e10:	bf00      	nop
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010800 	.word	0x40010800
 8001e20:	40010c00 	.word	0x40010c00
 8001e24:	40010000 	.word	0x40010000

08001e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <Error_Handler+0x8>

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6193      	str	r3, [r2, #24]
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a0e      	ldr	r2, [pc, #56]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	61d3      	str	r3, [r2, #28]
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_MspInit+0x60>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <HAL_MspInit+0x60>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010000 	.word	0x40010000

08001e98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <HAL_ADC_MspInit+0x7c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d129      	bne.n	8001f0c <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_ADC_MspInit+0x80>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <HAL_ADC_MspInit+0x80>)
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <HAL_ADC_MspInit+0x80>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_ADC_MspInit+0x80>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_ADC_MspInit+0x80>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_ADC_MspInit+0x80>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ee8:	2340      	movs	r3, #64	@ 0x40
 8001eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eec:	2303      	movs	r3, #3
 8001eee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4809      	ldr	r0, [pc, #36]	@ (8001f1c <HAL_ADC_MspInit+0x84>)
 8001ef8:	f001 f8ec 	bl	80030d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2012      	movs	r0, #18
 8001f02:	f000 fed8 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f06:	2012      	movs	r0, #18
 8001f08:	f000 fef1 	bl	8002cee <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40012400 	.word	0x40012400
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010800 	.word	0x40010800

08001f20 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a47      	ldr	r2, [pc, #284]	@ (8002058 <HAL_SPI_MspInit+0x138>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	f040 8087 	bne.w	8002050 <HAL_SPI_MspInit+0x130>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f42:	4b46      	ldr	r3, [pc, #280]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	4a45      	ldr	r2, [pc, #276]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f4c:	6193      	str	r3, [r2, #24]
 8001f4e:	4b43      	ldr	r3, [pc, #268]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b40      	ldr	r3, [pc, #256]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6193      	str	r3, [r2, #24]
 8001f66:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	4b3a      	ldr	r3, [pc, #232]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4a39      	ldr	r2, [pc, #228]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	6193      	str	r3, [r2, #24]
 8001f7e:	4b37      	ldr	r3, [pc, #220]	@ (800205c <HAL_SPI_MspInit+0x13c>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4830      	ldr	r0, [pc, #192]	@ (8002060 <HAL_SPI_MspInit+0x140>)
 8001fa0:	f001 f898 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	482b      	ldr	r0, [pc, #172]	@ (8002064 <HAL_SPI_MspInit+0x144>)
 8001fb8:	f001 f88c 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fbc:	2330      	movs	r3, #48	@ 0x30
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4825      	ldr	r0, [pc, #148]	@ (8002064 <HAL_SPI_MspInit+0x144>)
 8001fd0:	f001 f880 	bl	80030d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001fd4:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <HAL_SPI_MspInit+0x148>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fea:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <HAL_SPI_MspInit+0x148>)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <HAL_SPI_MspInit+0x150>)
 8001ff4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_DISABLE;
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 800200a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800200e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 8002012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002016:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002018:	4b14      	ldr	r3, [pc, #80]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 800201a:	2220      	movs	r2, #32
 800201c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800201e:	4b13      	ldr	r3, [pc, #76]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 8002020:	2200      	movs	r2, #0
 8002022:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002024:	4811      	ldr	r0, [pc, #68]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 8002026:	f000 fe7d 	bl	8002d24 <HAL_DMA_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8002030:	f7ff fefa 	bl	8001e28 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 8002038:	649a      	str	r2, [r3, #72]	@ 0x48
 800203a:	4a0c      	ldr	r2, [pc, #48]	@ (800206c <HAL_SPI_MspInit+0x14c>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2023      	movs	r0, #35	@ 0x23
 8002046:	f000 fe36 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800204a:	2023      	movs	r0, #35	@ 0x23
 800204c:	f000 fe4f 	bl	8002cee <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	@ 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40013000 	.word	0x40013000
 800205c:	40021000 	.word	0x40021000
 8002060:	40010800 	.word	0x40010800
 8002064:	40010c00 	.word	0x40010c00
 8002068:	40010000 	.word	0x40010000
 800206c:	2000041c 	.word	0x2000041c
 8002070:	40020030 	.word	0x40020030

08002074 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	@ 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0320 	add.w	r3, r7, #32
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a40      	ldr	r2, [pc, #256]	@ (8002190 <HAL_TIM_Base_MspInit+0x11c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d135      	bne.n	8002100 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002094:	4b3f      	ldr	r3, [pc, #252]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a3e      	ldr	r2, [pc, #248]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 800209a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b39      	ldr	r3, [pc, #228]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a38      	ldr	r2, [pc, #224]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b36      	ldr	r3, [pc, #216]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80020c4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ce:	2301      	movs	r3, #1
 80020d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	4619      	mov	r1, r3
 80020d8:	482f      	ldr	r0, [pc, #188]	@ (8002198 <HAL_TIM_Base_MspInit+0x124>)
 80020da:	f000 fffb 	bl	80030d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	201a      	movs	r0, #26
 80020e4:	f000 fde7 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80020e8:	201a      	movs	r0, #26
 80020ea:	f000 fe00 	bl	8002cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	201b      	movs	r0, #27
 80020f4:	f000 fddf 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020f8:	201b      	movs	r0, #27
 80020fa:	f000 fdf8 	bl	8002cee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020fe:	e042      	b.n	8002186 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a25      	ldr	r2, [pc, #148]	@ (800219c <HAL_TIM_Base_MspInit+0x128>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10c      	bne.n	8002124 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
}
 8002122:	e030      	b.n	8002186 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <HAL_TIM_Base_MspInit+0x12c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d12b      	bne.n	8002186 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212e:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	61d3      	str	r3, [r2, #28]
 800213a:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6193      	str	r3, [r2, #24]
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_TIM_Base_MspInit+0x120>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800215e:	2340      	movs	r3, #64	@ 0x40
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 0320 	add.w	r3, r7, #32
 800216e:	4619      	mov	r1, r3
 8002170:	480c      	ldr	r0, [pc, #48]	@ (80021a4 <HAL_TIM_Base_MspInit+0x130>)
 8002172:	f000 ffaf 	bl	80030d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	201e      	movs	r0, #30
 800217c:	f000 fd9b 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002180:	201e      	movs	r0, #30
 8002182:	f000 fdb4 	bl	8002cee <HAL_NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3730      	adds	r7, #48	@ 0x30
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40010800 	.word	0x40010800
 800219c:	40000400 	.word	0x40000400
 80021a0:	40000800 	.word	0x40000800
 80021a4:	40010c00 	.word	0x40010c00

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <NMI_Handler+0x4>

080021b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <MemManage_Handler+0x4>

080021c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <UsageFault_Handler+0x4>

080021d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 f97c 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002204:	4802      	ldr	r0, [pc, #8]	@ (8002210 <DMA1_Channel3_IRQHandler+0x10>)
 8002206:	f000 fe5f 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000041c 	.word	0x2000041c

08002214 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <ADC1_2_IRQHandler+0x10>)
 800221a:	f000 fa6b 	bl	80026f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000394 	.word	0x20000394

08002228 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800222c:	4802      	ldr	r0, [pc, #8]	@ (8002238 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800222e:	f001 fa22 	bl	8003676 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20001250 	.word	0x20001250

0800223c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002242:	f003 fdc9 	bl	8005dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000460 	.word	0x20000460

08002250 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002254:	4802      	ldr	r0, [pc, #8]	@ (8002260 <TIM1_CC_IRQHandler+0x10>)
 8002256:	f003 fdbf 	bl	8005dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000460 	.word	0x20000460

08002264 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002268:	4802      	ldr	r0, [pc, #8]	@ (8002274 <TIM4_IRQHandler+0x10>)
 800226a:	f003 fdb5 	bl	8005dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200004f0 	.word	0x200004f0

08002278 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <SPI1_IRQHandler+0x10>)
 800227e:	f003 fb57 	bl	8005930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200003c4 	.word	0x200003c4

0800228c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <_kill>:

int _kill(int pid, int sig)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022a4:	f00a fa72 	bl	800c78c <__errno>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2216      	movs	r2, #22
 80022ac:	601a      	str	r2, [r3, #0]
  return -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_exit>:

void _exit (int status)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffe7 	bl	800229a <_kill>
  while (1) {}    /* Make sure we hang here */
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <_exit+0x12>

080022d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e00a      	b.n	80022f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e2:	f3af 8000 	nop.w
 80022e6:	4601      	mov	r1, r0
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	b2ca      	uxtb	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf0      	blt.n	80022e2 <_read+0x12>
  }

  return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e009      	b.n	8002330 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbf1      	blt.n	800231c <_write+0x12>
  }
  return len;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_close>:

int _close(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002368:	605a      	str	r2, [r3, #4]
  return 0;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <_isatty>:

int _isatty(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
	...

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f00a f9da 	bl	800c78c <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20005000 	.word	0x20005000
 8002404:	00000400 	.word	0x00000400
 8002408:	2000057c 	.word	0x2000057c
 800240c:	20001898 	.word	0x20001898

08002410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800241c:	f7ff fff8 	bl	8002410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002420:	480b      	ldr	r0, [pc, #44]	@ (8002450 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002422:	490c      	ldr	r1, [pc, #48]	@ (8002454 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002424:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a09      	ldr	r2, [pc, #36]	@ (800245c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002438:	4c09      	ldr	r4, [pc, #36]	@ (8002460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002446:	f00a f9a7 	bl	800c798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244a:	f7ff f9a3 	bl	8001794 <main>
  bx lr
 800244e:	4770      	bx	lr
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8002458:	0800f8d4 	.word	0x0800f8d4
  ldr r2, =_sbss
 800245c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8002460:	20001894 	.word	0x20001894

08002464 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <CAN1_RX1_IRQHandler>
	...

08002468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_Init+0x28>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_Init+0x28>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 fc11 	bl	8002ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247e:	200f      	movs	r0, #15
 8002480:	f000 f808 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002484:	f7ff fcd6 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800249c:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_InitTick+0x54>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_InitTick+0x58>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fc29 	bl	8002d0a <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d80a      	bhi.n	80024de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024d0:	f000 fbf1 	bl	8002cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d4:	4a06      	ldr	r2, [pc, #24]	@ (80024f0 <HAL_InitTick+0x5c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000008 	.word	0x20000008
 80024f0:	20000004 	.word	0x20000004

080024f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_IncTick+0x1c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_IncTick+0x20>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a03      	ldr	r2, [pc, #12]	@ (8002514 <HAL_IncTick+0x20>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	20000008 	.word	0x20000008
 8002514:	20000580 	.word	0x20000580

08002518 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b02      	ldr	r3, [pc, #8]	@ (8002528 <HAL_GetTick+0x10>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20000580 	.word	0x20000580

0800252c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e0be      	b.n	80026cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fc94 	bl	8001e98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa7f 	bl	8002a74 <ADC_ConversionStop_Disable>
 8002576:	4603      	mov	r3, r0
 8002578:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 8099 	bne.w	80026ba <HAL_ADC_Init+0x18e>
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 8095 	bne.w	80026ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	f043 0202 	orr.w	r2, r3, #2
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c4:	d003      	beq.n	80025ce <HAL_ADC_Init+0xa2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_ADC_Init+0xa8>
 80025ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d2:	e000      	b.n	80025d6 <HAL_ADC_Init+0xaa>
 80025d4:	2300      	movs	r3, #0
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7d1b      	ldrb	r3, [r3, #20]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d119      	bne.n	8002618 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7b1b      	ldrb	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	035a      	lsls	r2, r3, #13
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	e00b      	b.n	8002618 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <HAL_ADC_Init+0x1a8>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	430b      	orrs	r3, r1
 800263e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002648:	d003      	beq.n	8002652 <HAL_ADC_Init+0x126>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d104      	bne.n	800265c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	3b01      	subs	r3, #1
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002662:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	430a      	orrs	r2, r1
 800266e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HAL_ADC_Init+0x1ac>)
 8002678:	4013      	ands	r3, r2
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	429a      	cmp	r2, r3
 800267e:	d10b      	bne.n	8002698 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268a:	f023 0303 	bic.w	r3, r3, #3
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002696:	e018      	b.n	80026ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	f023 0312 	bic.w	r3, r3, #18
 80026a0:	f043 0210 	orr.w	r2, r3, #16
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026b8:	e007      	b.n	80026ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	f043 0210 	orr.w	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	ffe1f7fd 	.word	0xffe1f7fd
 80026d8:	ff1f0efe 	.word	0xff1f0efe

080026dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03e      	beq.n	8002794 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d039      	beq.n	8002794 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002742:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002746:	d11d      	bne.n	8002784 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800274c:	2b00      	cmp	r3, #0
 800274e:	d119      	bne.n	8002784 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0220 	bic.w	r2, r2, #32
 800275e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe febf 	bl	8001508 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0212 	mvn.w	r2, #18
 8002792:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04d      	beq.n	800283a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d048      	beq.n	800283a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80027ca:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80027ce:	d012      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d125      	bne.n	800282a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80027e8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80027ec:	d11d      	bne.n	800282a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d119      	bne.n	800282a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002804:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f963 	bl	8002af6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 020c 	mvn.w	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d012      	beq.n	800286a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f809 	bl	8002872 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0201 	mvn.w	r2, #1
 8002868:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x20>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0dc      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x1da>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d81c      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3b05      	subs	r3, #5
 80028c6:	221f      	movs	r2, #31
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	4019      	ands	r1, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b05      	subs	r3, #5
 80028e0:	fa00 f203 	lsl.w	r2, r0, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80028ec:	e03c      	b.n	8002968 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d81c      	bhi.n	8002930 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b23      	subs	r3, #35	@ 0x23
 8002908:	221f      	movs	r2, #31
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	4019      	ands	r1, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	3b23      	subs	r3, #35	@ 0x23
 8002922:	fa00 f203 	lsl.w	r2, r0, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	631a      	str	r2, [r3, #48]	@ 0x30
 800292e:	e01b      	b.n	8002968 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3b41      	subs	r3, #65	@ 0x41
 8002942:	221f      	movs	r2, #31
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	4019      	ands	r1, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	3b41      	subs	r3, #65	@ 0x41
 800295c:	fa00 f203 	lsl.w	r2, r0, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b09      	cmp	r3, #9
 800296e:	d91c      	bls.n	80029aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68d9      	ldr	r1, [r3, #12]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	3b1e      	subs	r3, #30
 8002982:	2207      	movs	r2, #7
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	4019      	ands	r1, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6898      	ldr	r0, [r3, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	3b1e      	subs	r3, #30
 800299c:	fa00 f203 	lsl.w	r2, r0, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	e019      	b.n	80029de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6919      	ldr	r1, [r3, #16]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	2207      	movs	r2, #7
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	4019      	ands	r1, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6898      	ldr	r0, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	fa00 f203 	lsl.w	r2, r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d003      	beq.n	80029ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029ea:	2b11      	cmp	r3, #17
 80029ec:	d132      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a68 <HAL_ADC_ConfigChannel+0x1e4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d125      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d126      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d11a      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a1e:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <HAL_ADC_ConfigChannel+0x1e8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	0c9a      	lsrs	r2, r3, #18
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a34:	e002      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f9      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x1b2>
 8002a42:	e007      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40012400 	.word	0x40012400
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	431bde83 	.word	0x431bde83

08002a74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d12e      	bne.n	8002aec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a9e:	f7ff fd3b 	bl	8002518 <HAL_GetTick>
 8002aa2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aa4:	e01b      	b.n	8002ade <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aa6:	f7ff fd37 	bl	8002518 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d914      	bls.n	8002ade <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10d      	bne.n	8002ade <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	f043 0210 	orr.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e007      	b.n	8002aee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d0dc      	beq.n	8002aa6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	@ (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b54:	4b04      	ldr	r3, [pc, #16]	@ (8002b68 <__NVIC_GetPriorityGrouping+0x18>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0307 	and.w	r3, r3, #7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db0b      	blt.n	8002b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4906      	ldr	r1, [pc, #24]	@ (8002ba0 <__NVIC_EnableIRQ+0x34>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c80:	f7ff ff90 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff2d 	bl	8002b08 <__NVIC_SetPriorityGrouping>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff42 	bl	8002b50 <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff90 	bl	8002bf8 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5f 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff35 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa2 	bl	8002c5c <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e043      	b.n	8002dc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <HAL_DMA_Init+0xa8>)
 8002d42:	4413      	add	r3, r2
 8002d44:	4a22      	ldr	r2, [pc, #136]	@ (8002dd0 <HAL_DMA_Init+0xac>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	009a      	lsls	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <HAL_DMA_Init+0xb0>)
 8002d56:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d6e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002d72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	bffdfff8 	.word	0xbffdfff8
 8002dd0:	cccccccd 	.word	0xcccccccd
 8002dd4:	40020000 	.word	0x40020000

08002dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d005      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2204      	movs	r2, #4
 8002df4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e051      	b.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 020e 	bic.w	r2, r2, #14
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_DMA_Abort_IT+0xd4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d029      	beq.n	8002e7a <HAL_DMA_Abort_IT+0xa2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a21      	ldr	r2, [pc, #132]	@ (8002eb0 <HAL_DMA_Abort_IT+0xd8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x9e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <HAL_DMA_Abort_IT+0xdc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMA_Abort_IT+0x98>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb8 <HAL_DMA_Abort_IT+0xe0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d012      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x92>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	@ (8002ebc <HAL_DMA_Abort_IT+0xe4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00a      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x8c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec0 <HAL_DMA_Abort_IT+0xe8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d102      	bne.n	8002e5e <HAL_DMA_Abort_IT+0x86>
 8002e58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e5c:	e00e      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e62:	e00b      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e68:	e008      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e6e:	e005      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e74:	e002      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e76:	2310      	movs	r3, #16
 8002e78:	e000      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4a11      	ldr	r2, [pc, #68]	@ (8002ec4 <HAL_DMA_Abort_IT+0xec>)
 8002e7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    } 
  }
  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40020008 	.word	0x40020008
 8002eb0:	4002001c 	.word	0x4002001c
 8002eb4:	40020030 	.word	0x40020030
 8002eb8:	40020044 	.word	0x40020044
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	4002006c 	.word	0x4002006c
 8002ec4:	40020000 	.word	0x40020000

08002ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d04f      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xc8>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d04a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a66      	ldr	r2, [pc, #408]	@ (80030b8 <HAL_DMA_IRQHandler+0x1f0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d029      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xae>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_DMA_IRQHandler+0x1f4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xaa>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a63      	ldr	r2, [pc, #396]	@ (80030c0 <HAL_DMA_IRQHandler+0x1f8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01a      	beq.n	8002f6c <HAL_DMA_IRQHandler+0xa4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a62      	ldr	r2, [pc, #392]	@ (80030c4 <HAL_DMA_IRQHandler+0x1fc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d012      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x9e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a60      	ldr	r2, [pc, #384]	@ (80030c8 <HAL_DMA_IRQHandler+0x200>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00a      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x98>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5f      	ldr	r2, [pc, #380]	@ (80030cc <HAL_DMA_IRQHandler+0x204>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d102      	bne.n	8002f5a <HAL_DMA_IRQHandler+0x92>
 8002f54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f58:	e00e      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f5e:	e00b      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002f64:	e008      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f6a:	e005      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f70:	e002      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f72:	2340      	movs	r3, #64	@ 0x40
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f76:	2304      	movs	r3, #4
 8002f78:	4a55      	ldr	r2, [pc, #340]	@ (80030d0 <HAL_DMA_IRQHandler+0x208>)
 8002f7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8094 	beq.w	80030ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f8e:	e08e      	b.n	80030ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	2202      	movs	r2, #2
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d056      	beq.n	800304e <HAL_DMA_IRQHandler+0x186>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d051      	beq.n	800304e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020a 	bic.w	r2, r2, #10
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a38      	ldr	r2, [pc, #224]	@ (80030b8 <HAL_DMA_IRQHandler+0x1f0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d029      	beq.n	800302e <HAL_DMA_IRQHandler+0x166>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a37      	ldr	r2, [pc, #220]	@ (80030bc <HAL_DMA_IRQHandler+0x1f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_IRQHandler+0x162>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a35      	ldr	r2, [pc, #212]	@ (80030c0 <HAL_DMA_IRQHandler+0x1f8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01a      	beq.n	8003024 <HAL_DMA_IRQHandler+0x15c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a34      	ldr	r2, [pc, #208]	@ (80030c4 <HAL_DMA_IRQHandler+0x1fc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d012      	beq.n	800301e <HAL_DMA_IRQHandler+0x156>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a32      	ldr	r2, [pc, #200]	@ (80030c8 <HAL_DMA_IRQHandler+0x200>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00a      	beq.n	8003018 <HAL_DMA_IRQHandler+0x150>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a31      	ldr	r2, [pc, #196]	@ (80030cc <HAL_DMA_IRQHandler+0x204>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d102      	bne.n	8003012 <HAL_DMA_IRQHandler+0x14a>
 800300c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003010:	e00e      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 8003012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003016:	e00b      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 8003018:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800301c:	e008      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 800301e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003022:	e005      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 8003024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003028:	e002      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 800302a:	2320      	movs	r3, #32
 800302c:	e000      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 800302e:	2302      	movs	r3, #2
 8003030:	4a27      	ldr	r2, [pc, #156]	@ (80030d0 <HAL_DMA_IRQHandler+0x208>)
 8003032:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d034      	beq.n	80030ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800304c:	e02f      	b.n	80030ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	2208      	movs	r2, #8
 8003054:	409a      	lsls	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d028      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x1e8>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d023      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 020e 	bic.w	r2, r2, #14
 8003076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f202 	lsl.w	r2, r1, r2
 8003086:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
    }
  }
  return;
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
}
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40020008 	.word	0x40020008
 80030bc:	4002001c 	.word	0x4002001c
 80030c0:	40020030 	.word	0x40020030
 80030c4:	40020044 	.word	0x40020044
 80030c8:	40020058 	.word	0x40020058
 80030cc:	4002006c 	.word	0x4002006c
 80030d0:	40020000 	.word	0x40020000

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b08b      	sub	sp, #44	@ 0x2c
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e169      	b.n	80033bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030e8:	2201      	movs	r2, #1
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8158 	bne.w	80033b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a9a      	ldr	r2, [pc, #616]	@ (8003374 <HAL_GPIO_Init+0x2a0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d05e      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003110:	4a98      	ldr	r2, [pc, #608]	@ (8003374 <HAL_GPIO_Init+0x2a0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d875      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003116:	4a98      	ldr	r2, [pc, #608]	@ (8003378 <HAL_GPIO_Init+0x2a4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d058      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 800311c:	4a96      	ldr	r2, [pc, #600]	@ (8003378 <HAL_GPIO_Init+0x2a4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d86f      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003122:	4a96      	ldr	r2, [pc, #600]	@ (800337c <HAL_GPIO_Init+0x2a8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d052      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003128:	4a94      	ldr	r2, [pc, #592]	@ (800337c <HAL_GPIO_Init+0x2a8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d869      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800312e:	4a94      	ldr	r2, [pc, #592]	@ (8003380 <HAL_GPIO_Init+0x2ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d04c      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003134:	4a92      	ldr	r2, [pc, #584]	@ (8003380 <HAL_GPIO_Init+0x2ac>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d863      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800313a:	4a92      	ldr	r2, [pc, #584]	@ (8003384 <HAL_GPIO_Init+0x2b0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d046      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003140:	4a90      	ldr	r2, [pc, #576]	@ (8003384 <HAL_GPIO_Init+0x2b0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d85d      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003146:	2b12      	cmp	r3, #18
 8003148:	d82a      	bhi.n	80031a0 <HAL_GPIO_Init+0xcc>
 800314a:	2b12      	cmp	r3, #18
 800314c:	d859      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800314e:	a201      	add	r2, pc, #4	@ (adr r2, 8003154 <HAL_GPIO_Init+0x80>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	080031cf 	.word	0x080031cf
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080031bb 	.word	0x080031bb
 8003160:	080031fd 	.word	0x080031fd
 8003164:	08003203 	.word	0x08003203
 8003168:	08003203 	.word	0x08003203
 800316c:	08003203 	.word	0x08003203
 8003170:	08003203 	.word	0x08003203
 8003174:	08003203 	.word	0x08003203
 8003178:	08003203 	.word	0x08003203
 800317c:	08003203 	.word	0x08003203
 8003180:	08003203 	.word	0x08003203
 8003184:	08003203 	.word	0x08003203
 8003188:	08003203 	.word	0x08003203
 800318c:	08003203 	.word	0x08003203
 8003190:	08003203 	.word	0x08003203
 8003194:	08003203 	.word	0x08003203
 8003198:	080031b1 	.word	0x080031b1
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	4a79      	ldr	r2, [pc, #484]	@ (8003388 <HAL_GPIO_Init+0x2b4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031a6:	e02c      	b.n	8003202 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	623b      	str	r3, [r7, #32]
          break;
 80031ae:	e029      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	3304      	adds	r3, #4
 80031b6:	623b      	str	r3, [r7, #32]
          break;
 80031b8:	e024      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	3308      	adds	r3, #8
 80031c0:	623b      	str	r3, [r7, #32]
          break;
 80031c2:	e01f      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	330c      	adds	r3, #12
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e01a      	b.n	8003204 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031d6:	2304      	movs	r3, #4
 80031d8:	623b      	str	r3, [r7, #32]
          break;
 80031da:	e013      	b.n	8003204 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e4:	2308      	movs	r3, #8
 80031e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	611a      	str	r2, [r3, #16]
          break;
 80031ee:	e009      	b.n	8003204 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f0:	2308      	movs	r3, #8
 80031f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	615a      	str	r2, [r3, #20]
          break;
 80031fa:	e003      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031fc:	2300      	movs	r3, #0
 80031fe:	623b      	str	r3, [r7, #32]
          break;
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x130>
          break;
 8003202:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2bff      	cmp	r3, #255	@ 0xff
 8003208:	d801      	bhi.n	800320e <HAL_GPIO_Init+0x13a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	e001      	b.n	8003212 <HAL_GPIO_Init+0x13e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2bff      	cmp	r3, #255	@ 0xff
 8003218:	d802      	bhi.n	8003220 <HAL_GPIO_Init+0x14c>
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x152>
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	3b08      	subs	r3, #8
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	210f      	movs	r1, #15
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80b1 	beq.w	80033b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003254:	4b4d      	ldr	r3, [pc, #308]	@ (800338c <HAL_GPIO_Init+0x2b8>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4a4c      	ldr	r2, [pc, #304]	@ (800338c <HAL_GPIO_Init+0x2b8>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6193      	str	r3, [r2, #24]
 8003260:	4b4a      	ldr	r3, [pc, #296]	@ (800338c <HAL_GPIO_Init+0x2b8>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800326c:	4a48      	ldr	r2, [pc, #288]	@ (8003390 <HAL_GPIO_Init+0x2bc>)
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3302      	adds	r3, #2
 8003274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003278:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a40      	ldr	r2, [pc, #256]	@ (8003394 <HAL_GPIO_Init+0x2c0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_GPIO_Init+0x1ec>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3f      	ldr	r2, [pc, #252]	@ (8003398 <HAL_GPIO_Init+0x2c4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00d      	beq.n	80032bc <HAL_GPIO_Init+0x1e8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3e      	ldr	r2, [pc, #248]	@ (800339c <HAL_GPIO_Init+0x2c8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <HAL_GPIO_Init+0x1e4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3d      	ldr	r2, [pc, #244]	@ (80033a0 <HAL_GPIO_Init+0x2cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_GPIO_Init+0x1e0>
 80032b0:	2303      	movs	r3, #3
 80032b2:	e006      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032b4:	2304      	movs	r3, #4
 80032b6:	e004      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e002      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032c0:	2300      	movs	r3, #0
 80032c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c4:	f002 0203 	and.w	r2, r2, #3
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	4093      	lsls	r3, r2
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032d2:	492f      	ldr	r1, [pc, #188]	@ (8003390 <HAL_GPIO_Init+0x2bc>)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032ec:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	492c      	ldr	r1, [pc, #176]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032fa:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	43db      	mvns	r3, r3
 8003302:	4928      	ldr	r1, [pc, #160]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003304:	4013      	ands	r3, r2
 8003306:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003314:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	4922      	ldr	r1, [pc, #136]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	60cb      	str	r3, [r1, #12]
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	43db      	mvns	r3, r3
 800332a:	491e      	ldr	r1, [pc, #120]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800332c:	4013      	ands	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800333c:	4b19      	ldr	r3, [pc, #100]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4918      	ldr	r1, [pc, #96]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
 8003348:	e006      	b.n	8003358 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800334a:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	43db      	mvns	r3, r3
 8003352:	4914      	ldr	r1, [pc, #80]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003354:	4013      	ands	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d021      	beq.n	80033a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003364:	4b0f      	ldr	r3, [pc, #60]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	490e      	ldr	r1, [pc, #56]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e021      	b.n	80033b6 <HAL_GPIO_Init+0x2e2>
 8003372:	bf00      	nop
 8003374:	10320000 	.word	0x10320000
 8003378:	10310000 	.word	0x10310000
 800337c:	10220000 	.word	0x10220000
 8003380:	10210000 	.word	0x10210000
 8003384:	10120000 	.word	0x10120000
 8003388:	10110000 	.word	0x10110000
 800338c:	40021000 	.word	0x40021000
 8003390:	40010000 	.word	0x40010000
 8003394:	40010800 	.word	0x40010800
 8003398:	40010c00 	.word	0x40010c00
 800339c:	40011000 	.word	0x40011000
 80033a0:	40011400 	.word	0x40011400
 80033a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4909      	ldr	r1, [pc, #36]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	3301      	adds	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f47f ae8e 	bne.w	80030e8 <HAL_GPIO_Init+0x14>
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	372c      	adds	r7, #44	@ 0x2c
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033f8:	e003      	b.n	8003402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4013      	ands	r3, r2
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43d9      	mvns	r1, r3
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	400b      	ands	r3, r1
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	611a      	str	r2, [r3, #16]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0e8      	b.n	8003622 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f007 ff53 	bl	800b310 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f003 fe2d 	bl	80070dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348c:	f003 fe03 	bl	8007096 <USB_CoreInit>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0bf      	b.n	8003622 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f003 fe31 	bl	8007110 <USB_SetCurrentMode>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b0      	b.n	8003622 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e03e      	b.n	8003544 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	3311      	adds	r3, #17
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	3310      	adds	r3, #16
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	3313      	adds	r3, #19
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	440b      	add	r3, r1
 8003510:	3320      	adds	r3, #32
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	3324      	adds	r3, #36	@ 0x24
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	440b      	add	r3, r1
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	3301      	adds	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	791b      	ldrb	r3, [r3, #4]
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	429a      	cmp	r2, r3
 800354c:	d3bb      	bcc.n	80034c6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e044      	b.n	80035de <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	440b      	add	r3, r1
 8003562:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	3301      	adds	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	791b      	ldrb	r3, [r3, #4]
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d3b5      	bcc.n	8003554 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f2:	f003 fd99 	bl	8007128 <USB_DevInit>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e00c      	b.n	8003622 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f006 f819 	bl	8009652 <USB_DevDisconnect>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_PCD_Start+0x16>
 800363c:	2302      	movs	r3, #2
 800363e:	e016      	b.n	800366e <HAL_PCD_Start+0x44>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f003 fd2f 	bl	80070b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003652:	2101      	movs	r1, #1
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f008 f8ce 	bl	800b7f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f005 ffed 	bl	800963e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b088      	sub	sp, #32
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f005 ffef 	bl	8009666 <USB_ReadInterrupts>
 8003688:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fb1a 	bl	8003cce <PCD_EP_ISR_Handler>

    return;
 800369a:	e119      	b.n	80038d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d013      	beq.n	80036ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b8:	b292      	uxth	r2, r2
 80036ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f007 fea1 	bl	800b406 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036c4:	2100      	movs	r1, #0
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f905 	bl	80038d6 <HAL_PCD_SetAddress>

    return;
 80036cc:	e100      	b.n	80038d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00c      	beq.n	80036f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036ea:	b292      	uxth	r2, r2
 80036ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036f0:	e0ee      	b.n	80038d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00c      	beq.n	8003716 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800370e:	b292      	uxth	r2, r2
 8003710:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003714:	e0dc      	b.n	80038d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d027      	beq.n	8003770 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0204 	bic.w	r2, r2, #4
 8003732:	b292      	uxth	r2, r2
 8003734:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0208 	bic.w	r2, r2, #8
 800374a:	b292      	uxth	r2, r2
 800374c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f007 fe91 	bl	800b478 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003768:	b292      	uxth	r2, r2
 800376a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800376e:	e0af      	b.n	80038d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8083 	beq.w	8003882 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e010      	b.n	80037a4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	7ffb      	ldrb	r3, [r7, #31]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	7ffb      	ldrb	r3, [r7, #31]
 8003790:	8812      	ldrh	r2, [r2, #0]
 8003792:	b292      	uxth	r2, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	3320      	adds	r3, #32
 8003798:	443b      	add	r3, r7
 800379a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800379e:	7ffb      	ldrb	r3, [r7, #31]
 80037a0:	3301      	adds	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	d9eb      	bls.n	8003782 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	b292      	uxth	r2, r2
 80037be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	b292      	uxth	r2, r2
 80037d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037da:	bf00      	nop
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f6      	beq.n	80037dc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003800:	b292      	uxth	r2, r2
 8003802:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003806:	2300      	movs	r3, #0
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e00f      	b.n	800382c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800380c:	7ffb      	ldrb	r3, [r7, #31]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	4611      	mov	r1, r2
 8003814:	7ffa      	ldrb	r2, [r7, #31]
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	440a      	add	r2, r1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	3320      	adds	r3, #32
 800381e:	443b      	add	r3, r7
 8003820:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003824:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003826:	7ffb      	ldrb	r3, [r7, #31]
 8003828:	3301      	adds	r3, #1
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	7ffb      	ldrb	r3, [r7, #31]
 800382e:	2b07      	cmp	r3, #7
 8003830:	d9ec      	bls.n	800380c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0208 	orr.w	r2, r2, #8
 8003844:	b292      	uxth	r2, r2
 8003846:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800385c:	b292      	uxth	r2, r2
 800385e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0204 	orr.w	r2, r2, #4
 8003874:	b292      	uxth	r2, r2
 8003876:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f007 fde2 	bl	800b444 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003880:	e026      	b.n	80038d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00f      	beq.n	80038ac <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800389e:	b292      	uxth	r2, r2
 80038a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f007 fda0 	bl	800b3ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038aa:	e011      	b.n	80038d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c8:	b292      	uxth	r2, r2
 80038ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038ce:	bf00      	nop
  }
}
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_PCD_SetAddress+0x1a>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e012      	b.n	8003916 <HAL_PCD_SetAddress+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f005 fe86 	bl	8009618 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	4608      	mov	r0, r1
 8003928:	4611      	mov	r1, r2
 800392a:	461a      	mov	r2, r3
 800392c:	4603      	mov	r3, r0
 800392e:	70fb      	strb	r3, [r7, #3]
 8003930:	460b      	mov	r3, r1
 8003932:	803b      	strh	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800393c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	da0e      	bge.n	8003962 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	f003 0207 	and.w	r2, r3, #7
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	3310      	adds	r3, #16
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	705a      	strb	r2, [r3, #1]
 8003960:	e00e      	b.n	8003980 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 0207 	and.w	r2, r3, #7
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800398c:	883a      	ldrh	r2, [r7, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	78ba      	ldrb	r2, [r7, #2]
 8003996:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003998:	78bb      	ldrb	r3, [r7, #2]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d102      	bne.n	80039a4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_PCD_EP_Open+0x94>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e00e      	b.n	80039d0 <HAL_PCD_EP_Open+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fbcf 	bl	8007164 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80039ce:	7afb      	ldrb	r3, [r7, #11]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	da0e      	bge.n	8003a0a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	f003 0207 	and.w	r2, r3, #7
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	3310      	adds	r3, #16
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	705a      	strb	r2, [r3, #1]
 8003a08:	e00e      	b.n	8003a28 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 0207 	and.w	r2, r3, #7
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_PCD_EP_Close+0x6a>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e00e      	b.n	8003a60 <HAL_PCD_EP_Close+0x88>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68f9      	ldr	r1, [r7, #12]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f003 ff47 	bl	80078e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	460b      	mov	r3, r1
 8003a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a78:	7afb      	ldrb	r3, [r7, #11]
 8003a7a:	f003 0207 	and.w	r2, r3, #7
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa8:	7afb      	ldrb	r3, [r7, #11]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6979      	ldr	r1, [r7, #20]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f004 f8fe 	bl	8007cbc <USB_EPStartXfer>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	f003 0207 	and.w	r2, r3, #7
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003aec:	681b      	ldr	r3, [r3, #0]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	460b      	mov	r3, r1
 8003b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b08:	7afb      	ldrb	r3, [r7, #11]
 8003b0a:	f003 0207 	and.w	r2, r3, #7
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	3310      	adds	r3, #16
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2201      	movs	r2, #1
 8003b42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6979      	ldr	r1, [r7, #20]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 f8b0 	bl	8007cbc <USB_EPStartXfer>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	7912      	ldrb	r2, [r2, #4]
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e04c      	b.n	8003c1e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da0e      	bge.n	8003baa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	3310      	adds	r3, #16
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	705a      	strb	r2, [r3, #1]
 8003ba8:	e00c      	b.n	8003bc4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_PCD_EP_SetStall+0x7e>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e01c      	b.n	8003c1e <HAL_PCD_EP_SetStall+0xb8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f005 fc13 	bl	800941e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d108      	bne.n	8003c14 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f005 fd38 	bl	8009684 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	7912      	ldrb	r2, [r2, #4]
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e040      	b.n	8003cc6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	da0e      	bge.n	8003c6a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 0207 	and.w	r2, r3, #7
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	3310      	adds	r3, #16
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	705a      	strb	r2, [r3, #1]
 8003c68:	e00e      	b.n	8003c88 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	f003 0207 	and.w	r2, r3, #7
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_PCD_EP_ClrStall+0x82>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e00e      	b.n	8003cc6 <HAL_PCD_EP_ClrStall+0xa0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f005 fc01 	bl	80094be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b096      	sub	sp, #88	@ 0x58
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cd6:	e3bb      	b.n	8004450 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ce0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ce4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003cf2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 8175 	bne.w	8003fe6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d14e      	bne.n	8003da6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d18:	81fb      	strh	r3, [r7, #14]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	89fb      	ldrh	r3, [r7, #14]
 8003d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3310      	adds	r3, #16
 8003d30:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	3302      	adds	r3, #2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	441a      	add	r2, r3
 8003d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f007 fb21 	bl	800b3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7b5b      	ldrb	r3, [r3, #13]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8368 	beq.w	8004450 <PCD_EP_ISR_Handler+0x782>
 8003d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 8363 	bne.w	8004450 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7b5b      	ldrb	r3, [r3, #13]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	735a      	strb	r2, [r3, #13]
 8003da4:	e354      	b.n	8004450 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dac:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003db8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d034      	beq.n	8003e2e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3306      	adds	r3, #6
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e00:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f005 fc8f 	bl	8009726 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e14:	4013      	ands	r3, r2
 8003e16:	823b      	strh	r3, [r7, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	8a3a      	ldrh	r2, [r7, #16]
 8003e1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e22:	b292      	uxth	r2, r2
 8003e24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f007 fa98 	bl	800b35c <HAL_PCD_SetupStageCallback>
 8003e2c:	e310      	b.n	8004450 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e2e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f280 830c 	bge.w	8004450 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e44:	4013      	ands	r3, r2
 8003e46:	83fb      	strh	r3, [r7, #30]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	8bfa      	ldrh	r2, [r7, #30]
 8003e4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e52:	b292      	uxth	r2, r2
 8003e54:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3306      	adds	r3, #6
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d019      	beq.n	8003ebe <PCD_EP_ISR_Handler+0x1f0>
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d015      	beq.n	8003ebe <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e98:	6959      	ldr	r1, [r3, #20]
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f005 fc3f 	bl	8009726 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	441a      	add	r2, r3
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f007 fa61 	bl	800b380 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ec8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 82bd 	bne.w	8004450 <PCD_EP_ISR_Handler+0x782>
 8003ed6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003eda:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ede:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ee2:	f000 82b5 	beq.w	8004450 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	4413      	add	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	801a      	strh	r2, [r3, #0]
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f1c:	d91d      	bls.n	8003f5a <PCD_EP_ISR_Handler+0x28c>
 8003f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <PCD_EP_ISR_Handler+0x26a>
 8003f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f34:	3b01      	subs	r3, #1
 8003f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	029b      	lsls	r3, r3, #10
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	e026      	b.n	8003fa8 <PCD_EP_ISR_Handler+0x2da>
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <PCD_EP_ISR_Handler+0x2aa>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	e017      	b.n	8003fa8 <PCD_EP_ISR_Handler+0x2da>
 8003f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <PCD_EP_ISR_Handler+0x2c4>
 8003f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f8e:	3301      	adds	r3, #1
 8003f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	029b      	lsls	r3, r3, #10
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb8:	827b      	strh	r3, [r7, #18]
 8003fba:	8a7b      	ldrh	r3, [r7, #18]
 8003fbc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fc0:	827b      	strh	r3, [r7, #18]
 8003fc2:	8a7b      	ldrh	r3, [r7, #18]
 8003fc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fc8:	827b      	strh	r3, [r7, #18]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	8a7b      	ldrh	r3, [r7, #18]
 8003fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	8013      	strh	r3, [r2, #0]
 8003fe4:	e234      	b.n	8004450 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ffa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f280 80fc 	bge.w	80041fc <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29a      	uxth	r2, r3
 8004016:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800401a:	4013      	ands	r3, r2
 800401c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004032:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004036:	b292      	uxth	r2, r2
 8004038:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800403a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004052:	7b1b      	ldrb	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d125      	bne.n	80040a4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004060:	b29b      	uxth	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	3306      	adds	r3, #6
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004080:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004084:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8092 	beq.w	80041b2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004094:	6959      	ldr	r1, [r3, #20]
 8004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004098:	88da      	ldrh	r2, [r3, #6]
 800409a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800409e:	f005 fb42 	bl	8009726 <USB_ReadPMA>
 80040a2:	e086      	b.n	80041b2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a6:	78db      	ldrb	r3, [r3, #3]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d10a      	bne.n	80040c2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040b0:	461a      	mov	r2, r3
 80040b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f9d9 	bl	800446c <HAL_PCD_EP_DB_Receive>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80040c0:	e077      	b.n	80041b2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040dc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80040f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d024      	beq.n	800416a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	3302      	adds	r3, #2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004148:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800414c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02e      	beq.n	80041b2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415a:	6959      	ldr	r1, [r3, #20]
 800415c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415e:	891a      	ldrh	r2, [r3, #8]
 8004160:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004164:	f005 fadf 	bl	8009726 <USB_ReadPMA>
 8004168:	e023      	b.n	80041b2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004172:	b29b      	uxth	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	3306      	adds	r3, #6
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004192:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004196:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a4:	6959      	ldr	r1, [r3, #20]
 80041a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a8:	895a      	ldrh	r2, [r3, #10]
 80041aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041ae:	f005 faba 	bl	8009726 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041ba:	441a      	add	r2, r3
 80041bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041c8:	441a      	add	r2, r3
 80041ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <PCD_EP_ISR_Handler+0x514>
 80041d6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80041da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d206      	bcs.n	80041f0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f007 f8c9 	bl	800b380 <HAL_PCD_DataOutStageCallback>
 80041ee:	e005      	b.n	80041fc <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 fd60 	bl	8007cbc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8123 	beq.w	8004450 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800420a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	3310      	adds	r3, #16
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004238:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800424e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004256:	b29b      	uxth	r3, r3
 8004258:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800425a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425c:	78db      	ldrb	r3, [r3, #3]
 800425e:	2b01      	cmp	r3, #1
 8004260:	f040 80a2 	bne.w	80043a8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004266:	2200      	movs	r2, #0
 8004268:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	7b1b      	ldrb	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8093 	beq.w	800439a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004274:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d046      	beq.n	800430e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d126      	bne.n	80042d6 <PCD_EP_ISR_Handler+0x608>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004296:	b29b      	uxth	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	4413      	add	r3, r2
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	011a      	lsls	r2, r3, #4
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	4413      	add	r3, r2
 80042aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	801a      	strh	r2, [r3, #0]
 80042d4:	e061      	b.n	800439a <PCD_EP_ISR_Handler+0x6cc>
 80042d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d15d      	bne.n	800439a <PCD_EP_ISR_Handler+0x6cc>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f2:	4413      	add	r3, r2
 80042f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	011a      	lsls	r2, r3, #4
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	4413      	add	r3, r2
 8004300:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	2200      	movs	r2, #0
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e045      	b.n	800439a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d126      	bne.n	800436a <PCD_EP_ISR_Handler+0x69c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	637b      	str	r3, [r7, #52]	@ 0x34
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004330:	4413      	add	r3, r2
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
 8004334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	011a      	lsls	r2, r3, #4
 800433a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433c:	4413      	add	r3, r2
 800433e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004342:	633b      	str	r3, [r7, #48]	@ 0x30
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800434e:	b29a      	uxth	r2, r3
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800435e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004362:	b29a      	uxth	r2, r3
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	e017      	b.n	800439a <PCD_EP_ISR_Handler+0x6cc>
 800436a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436c:	785b      	ldrb	r3, [r3, #1]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d113      	bne.n	800439a <PCD_EP_ISR_Handler+0x6cc>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800437a:	b29b      	uxth	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004380:	4413      	add	r3, r2
 8004382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	011a      	lsls	r2, r3, #4
 800438a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438c:	4413      	add	r3, r2
 800438e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004392:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004396:	2200      	movs	r2, #0
 8004398:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800439a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f007 f808 	bl	800b3b6 <HAL_PCD_DataInStageCallback>
 80043a6:	e053      	b.n	8004450 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d146      	bne.n	8004442 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043bc:	b29b      	uxth	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	3302      	adds	r3, #2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043dc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80043e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d907      	bls.n	80043fc <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80043ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f8:	619a      	str	r2, [r3, #24]
 80043fa:	e002      	b.n	8004402 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80043fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fe:	2200      	movs	r2, #0
 8004400:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f006 ffd0 	bl	800b3b6 <HAL_PCD_DataInStageCallback>
 8004416:	e01b      	b.n	8004450 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004420:	441a      	add	r2, r3
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800442e:	441a      	add	r2, r3
 8004430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004432:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800443a:	4618      	mov	r0, r3
 800443c:	f003 fc3e 	bl	8007cbc <USB_EPStartXfer>
 8004440:	e006      	b.n	8004450 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004442:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004446:	461a      	mov	r2, r3
 8004448:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f91b 	bl	8004686 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004458:	b29b      	uxth	r3, r3
 800445a:	b21b      	sxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	f6ff ac3b 	blt.w	8003cd8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3758      	adds	r7, #88	@ 0x58
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d07e      	beq.n	8004582 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800448c:	b29b      	uxth	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	3302      	adds	r3, #2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	8b7b      	ldrh	r3, [r7, #26]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d306      	bcc.n	80044c6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	8b7b      	ldrh	r3, [r7, #26]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	619a      	str	r2, [r3, #24]
 80044c4:	e002      	b.n	80044cc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d123      	bne.n	800451c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	833b      	strh	r3, [r7, #24]
 80044f0:	8b3b      	ldrh	r3, [r7, #24]
 80044f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044f6:	833b      	strh	r3, [r7, #24]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	8b3b      	ldrh	r3, [r7, #24]
 8004508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800450c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01f      	beq.n	8004566 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800453c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004540:	82fb      	strh	r3, [r7, #22]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8afb      	ldrh	r3, [r7, #22]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800455e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004566:	8b7b      	ldrh	r3, [r7, #26]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8087 	beq.w	800467c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6959      	ldr	r1, [r3, #20]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	891a      	ldrh	r2, [r3, #8]
 800457a:	8b7b      	ldrh	r3, [r7, #26]
 800457c:	f005 f8d3 	bl	8009726 <USB_ReadPMA>
 8004580:	e07c      	b.n	800467c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800458a:	b29b      	uxth	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	3306      	adds	r3, #6
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	8b7b      	ldrh	r3, [r7, #26]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d306      	bcc.n	80045c4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	8b7b      	ldrh	r3, [r7, #26]
 80045bc:	1ad2      	subs	r2, r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	619a      	str	r2, [r3, #24]
 80045c2:	e002      	b.n	80045ca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2200      	movs	r2, #0
 80045c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d123      	bne.n	800461a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ec:	83fb      	strh	r3, [r7, #30]
 80045ee:	8bfb      	ldrh	r3, [r7, #30]
 80045f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045f4:	83fb      	strh	r3, [r7, #30]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	441a      	add	r2, r3
 8004604:	8bfb      	ldrh	r3, [r7, #30]
 8004606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800460a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800460e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004616:	b29b      	uxth	r3, r3
 8004618:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11f      	bne.n	8004664 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800463a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463e:	83bb      	strh	r3, [r7, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	8bbb      	ldrh	r3, [r7, #28]
 8004650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800465c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004664:	8b7b      	ldrh	r3, [r7, #26]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	6959      	ldr	r1, [r3, #20]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	895a      	ldrh	r2, [r3, #10]
 8004676:	8b7b      	ldrh	r3, [r7, #26]
 8004678:	f005 f855 	bl	8009726 <USB_ReadPMA>
    }
  }

  return count;
 800467c:	8b7b      	ldrh	r3, [r7, #26]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b0a4      	sub	sp, #144	@ 0x90
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	4613      	mov	r3, r2
 8004692:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 81dd 	beq.w	8004a5a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4413      	add	r3, r2
 80046b4:	3302      	adds	r3, #2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d907      	bls.n	80046e8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046e0:	1ad2      	subs	r2, r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	619a      	str	r2, [r3, #24]
 80046e6:	e002      	b.n	80046ee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f040 80b9 	bne.w	800486a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d126      	bne.n	800474e <HAL_PCD_EP_DB_Transmit+0xc8>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800470e:	b29b      	uxth	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004714:	4413      	add	r3, r2
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	011a      	lsls	r2, r3, #4
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	4413      	add	r3, r2
 8004722:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004732:	b29a      	uxth	r2, r3
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004746:	b29a      	uxth	r2, r3
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	e01a      	b.n	8004784 <HAL_PCD_EP_DB_Transmit+0xfe>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d116      	bne.n	8004784 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	637b      	str	r3, [r7, #52]	@ 0x34
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004764:	b29b      	uxth	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476a:	4413      	add	r3, r2
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	011a      	lsls	r2, r3, #4
 8004774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004776:	4413      	add	r3, r2
 8004778:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800477c:	633b      	str	r3, [r7, #48]	@ 0x30
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	2200      	movs	r2, #0
 8004782:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d126      	bne.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d8:	b29a      	uxth	r2, r3
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	e017      	b.n	8004810 <HAL_PCD_EP_DB_Transmit+0x18a>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d113      	bne.n	8004810 <HAL_PCD_EP_DB_Transmit+0x18a>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	4413      	add	r3, r2
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	011a      	lsls	r2, r3, #4
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	4413      	add	r3, r2
 8004804:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2200      	movs	r2, #0
 800480e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	4619      	mov	r1, r3
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f006 fdcd 	bl	800b3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 82fc 	beq.w	8004e20 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800483e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004842:	82fb      	strh	r3, [r7, #22]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	8afb      	ldrh	r3, [r7, #22]
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800485c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
 8004868:	e2da      	b.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d021      	beq.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	441a      	add	r2, r3
 80048a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80048a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048be:	2b01      	cmp	r3, #1
 80048c0:	f040 82ae 	bne.w	8004e20 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048cc:	441a      	add	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048da:	441a      	add	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d30b      	bcc.n	8004904 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048fc:	1ad2      	subs	r2, r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	621a      	str	r2, [r3, #32]
 8004902:	e017      	b.n	8004934 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d108      	bne.n	800491e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800490c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004910:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800491c:	e00a      	b.n	8004934 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2200      	movs	r2, #0
 8004932:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d165      	bne.n	8004a08 <HAL_PCD_EP_DB_Transmit+0x382>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494a:	b29b      	uxth	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004950:	4413      	add	r3, r2
 8004952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	011a      	lsls	r2, r3, #4
 800495a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495c:	4413      	add	r3, r2
 800495e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496e:	b29a      	uxth	r2, r3
 8004970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004972:	801a      	strh	r2, [r3, #0]
 8004974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004978:	2b3e      	cmp	r3, #62	@ 0x3e
 800497a:	d91d      	bls.n	80049b8 <HAL_PCD_EP_DB_Transmit+0x332>
 800497c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <HAL_PCD_EP_DB_Transmit+0x310>
 8004990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004992:	3b01      	subs	r3, #1
 8004994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29a      	uxth	r2, r3
 800499c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800499e:	b29b      	uxth	r3, r3
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e044      	b.n	8004a42 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x350>
 80049c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	e035      	b.n	8004a42 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80049ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ec:	3301      	adds	r3, #1
 80049ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	e01c      	b.n	8004a42 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d118      	bne.n	8004a42 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a24:	4413      	add	r3, r2
 8004a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	011a      	lsls	r2, r3, #4
 8004a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a30:	4413      	add	r3, r2
 8004a32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a40:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6959      	ldr	r1, [r3, #20]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	891a      	ldrh	r2, [r3, #8]
 8004a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f004 fe21 	bl	800969a <USB_WritePMA>
 8004a58:	e1e2      	b.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3306      	adds	r3, #6
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a82:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d307      	bcc.n	8004aa2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	619a      	str	r2, [r3, #24]
 8004aa0:	e002      	b.n	8004aa8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 80c0 	bne.w	8004c32 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d126      	bne.n	8004b08 <HAL_PCD_EP_DB_Transmit+0x482>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ace:	4413      	add	r3, r2
 8004ad0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	011a      	lsls	r2, r3, #4
 8004ad8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ada:	4413      	add	r3, r2
 8004adc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ae2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	e01a      	b.n	8004b3e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d116      	bne.n	8004b3e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b24:	4413      	add	r3, r2
 8004b26:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	011a      	lsls	r2, r3, #4
 8004b2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b30:	4413      	add	r3, r2
 8004b32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b36:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d12b      	bne.n	8004ba4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b60:	4413      	add	r3, r2
 8004b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	011a      	lsls	r2, r3, #4
 8004b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ba0:	801a      	strh	r2, [r3, #0]
 8004ba2:	e017      	b.n	8004bd4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d113      	bne.n	8004bd4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bba:	4413      	add	r3, r2
 8004bbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	011a      	lsls	r2, r3, #4
 8004bc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f006 fbeb 	bl	800b3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 811a 	bne.w	8004e20 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c06:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	441a      	add	r2, r3
 8004c18:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
 8004c30:	e0f6      	b.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d121      	bne.n	8004c80 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	f040 80ca 	bne.w	8004e20 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c94:	441a      	add	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d30b      	bcc.n	8004ccc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc4:	1ad2      	subs	r2, r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	621a      	str	r2, [r3, #32]
 8004cca:	e017      	b.n	8004cfc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004cd4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004ce4:	e00a      	b.n	8004cfc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d165      	bne.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x750>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1e:	4413      	add	r3, r2
 8004d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	011a      	lsls	r2, r3, #4
 8004d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d46:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d48:	d91d      	bls.n	8004d86 <HAL_PCD_EP_DB_Transmit+0x700>
 8004d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d60:	3b01      	subs	r3, #1
 8004d62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	4313      	orrs	r3, r2
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	e041      	b.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x784>
 8004d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10a      	bne.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e032      	b.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x784>
 8004da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_PCD_EP_DB_Transmit+0x738>
 8004db8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dba:	3301      	adds	r3, #1
 8004dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	e019      	b.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x784>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d115      	bne.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x784>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dec:	4413      	add	r3, r2
 8004dee:	657b      	str	r3, [r7, #84]	@ 0x54
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	011a      	lsls	r2, r3, #4
 8004df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df8:	4413      	add	r3, r2
 8004dfa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e08:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6959      	ldr	r1, [r3, #20]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	895a      	ldrh	r2, [r3, #10]
 8004e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f004 fc3d 	bl	800969a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3a:	82bb      	strh	r3, [r7, #20]
 8004e3c:	8abb      	ldrh	r3, [r7, #20]
 8004e3e:	f083 0310 	eor.w	r3, r3, #16
 8004e42:	82bb      	strh	r3, [r7, #20]
 8004e44:	8abb      	ldrh	r3, [r7, #20]
 8004e46:	f083 0320 	eor.w	r3, r3, #32
 8004e4a:	82bb      	strh	r3, [r7, #20]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	8abb      	ldrh	r3, [r7, #20]
 8004e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3790      	adds	r7, #144	@ 0x90
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	817b      	strh	r3, [r7, #10]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e8c:	897b      	ldrh	r3, [r7, #10]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00b      	beq.n	8004eb0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e98:	897b      	ldrh	r3, [r7, #10]
 8004e9a:	f003 0207 	and.w	r2, r3, #7
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	3310      	adds	r3, #16
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e009      	b.n	8004ec4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004eb0:	897a      	ldrh	r2, [r7, #10]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ec4:	893b      	ldrh	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d107      	bne.n	8004eda <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	80da      	strh	r2, [r3, #6]
 8004ed8:	e00b      	b.n	8004ef2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2201      	movs	r2, #1
 8004ede:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr
	...

08004f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e272      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8087 	beq.w	800502e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f20:	4b92      	ldr	r3, [pc, #584]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d00c      	beq.n	8004f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d112      	bne.n	8004f5e <HAL_RCC_OscConfig+0x5e>
 8004f38:	4b8c      	ldr	r3, [pc, #560]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f44:	d10b      	bne.n	8004f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f46:	4b89      	ldr	r3, [pc, #548]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d06c      	beq.n	800502c <HAL_RCC_OscConfig+0x12c>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d168      	bne.n	800502c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e24c      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x76>
 8004f68:	4b80      	ldr	r3, [pc, #512]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a7f      	ldr	r2, [pc, #508]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e02e      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd4>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x98>
 8004f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a7a      	ldr	r2, [pc, #488]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	4b78      	ldr	r3, [pc, #480]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a77      	ldr	r2, [pc, #476]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e01d      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd4>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0xbc>
 8004fa2:	4b72      	ldr	r3, [pc, #456]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a71      	ldr	r2, [pc, #452]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b6f      	ldr	r3, [pc, #444]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd4>
 8004fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a6a      	ldr	r2, [pc, #424]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b68      	ldr	r3, [pc, #416]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a67      	ldr	r2, [pc, #412]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d013      	beq.n	8005004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fd fa9c 	bl	8002518 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fd fa98 	bl	8002518 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	@ 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e200      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0xe4>
 8005002:	e014      	b.n	800502e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fd fa88 	bl	8002518 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800500c:	f7fd fa84 	bl	8002518 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	@ 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e1ec      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501e:	4b53      	ldr	r3, [pc, #332]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x10c>
 800502a:	e000      	b.n	800502e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d063      	beq.n	8005102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800503a:	4b4c      	ldr	r3, [pc, #304]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005046:	4b49      	ldr	r3, [pc, #292]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b08      	cmp	r3, #8
 8005050:	d11c      	bne.n	800508c <HAL_RCC_OscConfig+0x18c>
 8005052:	4b46      	ldr	r3, [pc, #280]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d116      	bne.n	800508c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505e:	4b43      	ldr	r3, [pc, #268]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_RCC_OscConfig+0x176>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e1c0      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005076:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4939      	ldr	r1, [pc, #228]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508a:	e03a      	b.n	8005102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005094:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <HAL_RCC_OscConfig+0x270>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd fa3d 	bl	8002518 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a2:	f7fd fa39 	bl	8002518 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e1a1      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b4:	4b2d      	ldr	r3, [pc, #180]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c0:	4b2a      	ldr	r3, [pc, #168]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4927      	ldr	r1, [pc, #156]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]
 80050d4:	e015      	b.n	8005102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d6:	4b26      	ldr	r3, [pc, #152]	@ (8005170 <HAL_RCC_OscConfig+0x270>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fd fa1c 	bl	8002518 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e4:	f7fd fa18 	bl	8002518 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e180      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f6:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d03a      	beq.n	8005184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d019      	beq.n	800514a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005116:	4b17      	ldr	r3, [pc, #92]	@ (8005174 <HAL_RCC_OscConfig+0x274>)
 8005118:	2201      	movs	r2, #1
 800511a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800511c:	f7fd f9fc 	bl	8002518 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005124:	f7fd f9f8 	bl	8002518 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e160      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005136:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005142:	2001      	movs	r0, #1
 8005144:	f000 fa9c 	bl	8005680 <RCC_Delay>
 8005148:	e01c      	b.n	8005184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800514a:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <HAL_RCC_OscConfig+0x274>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005150:	f7fd f9e2 	bl	8002518 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005156:	e00f      	b.n	8005178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005158:	f7fd f9de 	bl	8002518 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d908      	bls.n	8005178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e146      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	42420000 	.word	0x42420000
 8005174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	4b92      	ldr	r3, [pc, #584]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e9      	bne.n	8005158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80a6 	beq.w	80052de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005196:	4b8b      	ldr	r3, [pc, #556]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10d      	bne.n	80051be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	4b88      	ldr	r3, [pc, #544]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	4a87      	ldr	r2, [pc, #540]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ac:	61d3      	str	r3, [r2, #28]
 80051ae:	4b85      	ldr	r3, [pc, #532]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	4b82      	ldr	r3, [pc, #520]	@ (80053c8 <HAL_RCC_OscConfig+0x4c8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d118      	bne.n	80051fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ca:	4b7f      	ldr	r3, [pc, #508]	@ (80053c8 <HAL_RCC_OscConfig+0x4c8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7e      	ldr	r2, [pc, #504]	@ (80053c8 <HAL_RCC_OscConfig+0x4c8>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fd f99f 	bl	8002518 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fd f99b 	bl	8002518 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b64      	cmp	r3, #100	@ 0x64
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e103      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f0:	4b75      	ldr	r3, [pc, #468]	@ (80053c8 <HAL_RCC_OscConfig+0x4c8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x312>
 8005204:	4b6f      	ldr	r3, [pc, #444]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4a6e      	ldr	r2, [pc, #440]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6213      	str	r3, [r2, #32]
 8005210:	e02d      	b.n	800526e <HAL_RCC_OscConfig+0x36e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x334>
 800521a:	4b6a      	ldr	r3, [pc, #424]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	4a69      	ldr	r2, [pc, #420]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	6213      	str	r3, [r2, #32]
 8005226:	4b67      	ldr	r3, [pc, #412]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	4a66      	ldr	r2, [pc, #408]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	6213      	str	r3, [r2, #32]
 8005232:	e01c      	b.n	800526e <HAL_RCC_OscConfig+0x36e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b05      	cmp	r3, #5
 800523a:	d10c      	bne.n	8005256 <HAL_RCC_OscConfig+0x356>
 800523c:	4b61      	ldr	r3, [pc, #388]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	4a60      	ldr	r2, [pc, #384]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005242:	f043 0304 	orr.w	r3, r3, #4
 8005246:	6213      	str	r3, [r2, #32]
 8005248:	4b5e      	ldr	r3, [pc, #376]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4a5d      	ldr	r2, [pc, #372]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6213      	str	r3, [r2, #32]
 8005254:	e00b      	b.n	800526e <HAL_RCC_OscConfig+0x36e>
 8005256:	4b5b      	ldr	r3, [pc, #364]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4a5a      	ldr	r2, [pc, #360]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6213      	str	r3, [r2, #32]
 8005262:	4b58      	ldr	r3, [pc, #352]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4a57      	ldr	r2, [pc, #348]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	f023 0304 	bic.w	r3, r3, #4
 800526c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d015      	beq.n	80052a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005276:	f7fd f94f 	bl	8002518 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527c:	e00a      	b.n	8005294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fd f94b 	bl	8002518 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e0b1      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005294:	4b4b      	ldr	r3, [pc, #300]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ee      	beq.n	800527e <HAL_RCC_OscConfig+0x37e>
 80052a0:	e014      	b.n	80052cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a2:	f7fd f939 	bl	8002518 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fd f935 	bl	8002518 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e09b      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c0:	4b40      	ldr	r3, [pc, #256]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ee      	bne.n	80052aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d2:	4b3c      	ldr	r3, [pc, #240]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	4a3b      	ldr	r2, [pc, #236]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8087 	beq.w	80053f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052e8:	4b36      	ldr	r3, [pc, #216]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d061      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d146      	bne.n	800538a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fc:	4b33      	ldr	r3, [pc, #204]	@ (80053cc <HAL_RCC_OscConfig+0x4cc>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005302:	f7fd f909 	bl	8002518 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530a:	f7fd f905 	bl	8002518 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e06d      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800531c:	4b29      	ldr	r3, [pc, #164]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f0      	bne.n	800530a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005330:	d108      	bne.n	8005344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005332:	4b24      	ldr	r3, [pc, #144]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	4921      	ldr	r1, [pc, #132]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005340:	4313      	orrs	r3, r2
 8005342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005344:	4b1f      	ldr	r3, [pc, #124]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a19      	ldr	r1, [r3, #32]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	430b      	orrs	r3, r1
 8005356:	491b      	ldr	r1, [pc, #108]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800535c:	4b1b      	ldr	r3, [pc, #108]	@ (80053cc <HAL_RCC_OscConfig+0x4cc>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005362:	f7fd f8d9 	bl	8002518 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536a:	f7fd f8d5 	bl	8002518 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e03d      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800537c:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x46a>
 8005388:	e035      	b.n	80053f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <HAL_RCC_OscConfig+0x4cc>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7fd f8c2 	bl	8002518 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7fd f8be 	bl	8002518 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e026      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053aa:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x498>
 80053b6:	e01e      	b.n	80053f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e019      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40007000 	.word	0x40007000
 80053cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <HAL_RCC_OscConfig+0x500>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d106      	bne.n	80053f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d001      	beq.n	80053f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40021000 	.word	0x40021000

08005404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0d0      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005418:	4b6a      	ldr	r3, [pc, #424]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d910      	bls.n	8005448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b67      	ldr	r3, [pc, #412]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 0207 	bic.w	r2, r3, #7
 800542e:	4965      	ldr	r1, [pc, #404]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b63      	ldr	r3, [pc, #396]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0b8      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d020      	beq.n	8005496 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	4b59      	ldr	r3, [pc, #356]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a58      	ldr	r2, [pc, #352]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005466:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800546a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005478:	4b53      	ldr	r3, [pc, #332]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a52      	ldr	r2, [pc, #328]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800547e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005482:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005484:	4b50      	ldr	r3, [pc, #320]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	494d      	ldr	r1, [pc, #308]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d040      	beq.n	8005524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054aa:	4b47      	ldr	r3, [pc, #284]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d115      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c2:	4b41      	ldr	r3, [pc, #260]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e073      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d2:	4b3d      	ldr	r3, [pc, #244]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e06b      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e2:	4b39      	ldr	r3, [pc, #228]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f023 0203 	bic.w	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4936      	ldr	r1, [pc, #216]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f4:	f7fd f810 	bl	8002518 <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fc:	f7fd f80c 	bl	8002518 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e053      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005512:	4b2d      	ldr	r3, [pc, #180]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 020c 	and.w	r2, r3, #12
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	429a      	cmp	r2, r3
 8005522:	d1eb      	bne.n	80054fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005524:	4b27      	ldr	r3, [pc, #156]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d210      	bcs.n	8005554 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b24      	ldr	r3, [pc, #144]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 0207 	bic.w	r2, r3, #7
 800553a:	4922      	ldr	r1, [pc, #136]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b20      	ldr	r3, [pc, #128]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e032      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005560:	4b19      	ldr	r3, [pc, #100]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4916      	ldr	r1, [pc, #88]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800556e:	4313      	orrs	r3, r2
 8005570:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800557e:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	490e      	ldr	r1, [pc, #56]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005592:	f000 f821 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005596:	4602      	mov	r2, r0
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	490a      	ldr	r1, [pc, #40]	@ (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80055a4:	5ccb      	ldrb	r3, [r1, r3]
 80055a6:	fa22 f303 	lsr.w	r3, r2, r3
 80055aa:	4a09      	ldr	r2, [pc, #36]	@ (80055d0 <HAL_RCC_ClockConfig+0x1cc>)
 80055ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055ae:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <HAL_RCC_ClockConfig+0x1d0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc ff6e 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40022000 	.word	0x40022000
 80055c8:	40021000 	.word	0x40021000
 80055cc:	0800f480 	.word	0x0800f480
 80055d0:	20000000 	.word	0x20000000
 80055d4:	20000004 	.word	0x20000004

080055d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	2300      	movs	r3, #0
 80055ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055f2:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <HAL_RCC_GetSysClockFreq+0x94>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d002      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0x30>
 8005602:	2b08      	cmp	r3, #8
 8005604:	d003      	beq.n	800560e <HAL_RCC_GetSysClockFreq+0x36>
 8005606:	e027      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005608:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 800560a:	613b      	str	r3, [r7, #16]
      break;
 800560c:	e027      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0c9b      	lsrs	r3, r3, #18
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005618:	5cd3      	ldrb	r3, [r2, r3]
 800561a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005626:	4b11      	ldr	r3, [pc, #68]	@ (800566c <HAL_RCC_GetSysClockFreq+0x94>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	0c5b      	lsrs	r3, r3, #17
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005632:	5cd3      	ldrb	r3, [r2, r3]
 8005634:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a0d      	ldr	r2, [pc, #52]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 800563a:	fb03 f202 	mul.w	r2, r3, r2
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e004      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a0c      	ldr	r2, [pc, #48]	@ (800567c <HAL_RCC_GetSysClockFreq+0xa4>)
 800564c:	fb02 f303 	mul.w	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	613b      	str	r3, [r7, #16]
      break;
 8005656:	e002      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005658:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 800565a:	613b      	str	r3, [r7, #16]
      break;
 800565c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800565e:	693b      	ldr	r3, [r7, #16]
}
 8005660:	4618      	mov	r0, r3
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
 8005670:	007a1200 	.word	0x007a1200
 8005674:	0800f490 	.word	0x0800f490
 8005678:	0800f4a0 	.word	0x0800f4a0
 800567c:	003d0900 	.word	0x003d0900

08005680 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005688:	4b0a      	ldr	r3, [pc, #40]	@ (80056b4 <RCC_Delay+0x34>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0a      	ldr	r2, [pc, #40]	@ (80056b8 <RCC_Delay+0x38>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	0a5b      	lsrs	r3, r3, #9
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800569c:	bf00      	nop
  }
  while (Delay --);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1e5a      	subs	r2, r3, #1
 80056a2:	60fa      	str	r2, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f9      	bne.n	800569c <RCC_Delay+0x1c>
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	20000000 	.word	0x20000000
 80056b8:	10624dd3 	.word	0x10624dd3

080056bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d07d      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80056d8:	2300      	movs	r3, #0
 80056da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056dc:	4b4f      	ldr	r3, [pc, #316]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10d      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e8:	4b4c      	ldr	r3, [pc, #304]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	4a4b      	ldr	r2, [pc, #300]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f2:	61d3      	str	r3, [r2, #28]
 80056f4:	4b49      	ldr	r3, [pc, #292]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	4b46      	ldr	r3, [pc, #280]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d118      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005710:	4b43      	ldr	r3, [pc, #268]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a42      	ldr	r2, [pc, #264]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800571a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800571c:	f7fc fefc 	bl	8002518 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	e008      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005724:	f7fc fef8 	bl	8002518 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	@ 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e06d      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005736:	4b3a      	ldr	r3, [pc, #232]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005742:	4b36      	ldr	r3, [pc, #216]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800574a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d02e      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	429a      	cmp	r2, r3
 800575e:	d027      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005760:	4b2e      	ldr	r3, [pc, #184]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005768:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800576a:	4b2e      	ldr	r3, [pc, #184]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800576c:	2201      	movs	r2, #1
 800576e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005770:	4b2c      	ldr	r3, [pc, #176]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005776:	4a29      	ldr	r2, [pc, #164]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d014      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005786:	f7fc fec7 	bl	8002518 <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578c:	e00a      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578e:	f7fc fec3 	bl	8002518 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e036      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a4:	4b1d      	ldr	r3, [pc, #116]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0ee      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b0:	4b1a      	ldr	r3, [pc, #104]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	4917      	ldr	r1, [pc, #92]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c8:	4b14      	ldr	r3, [pc, #80]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4a13      	ldr	r2, [pc, #76]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e0:	4b0e      	ldr	r3, [pc, #56]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	490b      	ldr	r1, [pc, #44]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057fe:	4b07      	ldr	r3, [pc, #28]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4904      	ldr	r1, [pc, #16]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580c:	4313      	orrs	r3, r2
 800580e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000
 8005820:	40007000 	.word	0x40007000
 8005824:	42420440 	.word	0x42420440

08005828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e076      	b.n	8005928 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	2b00      	cmp	r3, #0
 8005840:	d108      	bne.n	8005854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800584a:	d009      	beq.n	8005860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	61da      	str	r2, [r3, #28]
 8005852:	e005      	b.n	8005860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fc fb50 	bl	8001f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e4:	ea42 0103 	orr.w	r1, r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	0c1a      	lsrs	r2, r3, #16
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f002 0204 	and.w	r2, r2, #4
 8005906:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005916:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	099b      	lsrs	r3, r3, #6
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10f      	bne.n	8005974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	099b      	lsrs	r3, r3, #6
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
    return;
 8005972:	e0be      	b.n	8005af2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_SPI_IRQHandler+0x66>
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
    return;
 8005994:	e0ad      	b.n	8005af2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_SPI_IRQHandler+0x80>
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	099b      	lsrs	r3, r3, #6
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80a1 	beq.w	8005af2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 809a 	beq.w	8005af2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	099b      	lsrs	r3, r3, #6
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d023      	beq.n	8005a12 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d011      	beq.n	80059fa <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059da:	f043 0204 	orr.w	r2, r3, #4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	e00b      	b.n	8005a12 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	693b      	ldr	r3, [r7, #16]
        return;
 8005a10:	e06f      	b.n	8005af2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d014      	beq.n	8005a48 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a22:	f043 0201 	orr.w	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d04f      	beq.n	8005af0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a5e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <HAL_SPI_IRQHandler+0x14c>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d034      	beq.n	8005ae6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0203 	bic.w	r2, r2, #3
 8005a8a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a98:	4a17      	ldr	r2, [pc, #92]	@ (8005af8 <HAL_SPI_IRQHandler+0x1c8>)
 8005a9a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fd f999 	bl	8002dd8 <HAL_DMA_Abort_IT>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d016      	beq.n	8005aee <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8005af8 <HAL_SPI_IRQHandler+0x1c8>)
 8005ac6:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fd f983 	bl	8002dd8 <HAL_DMA_Abort_IT>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005adc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005ae4:	e003      	b.n	8005aee <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f808 	bl	8005afc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005aec:	e000      	b.n	8005af0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005aee:	bf00      	nop
    return;
 8005af0:	bf00      	nop
  }
}
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	08005b0f 	.word	0x08005b0f

08005afc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ffe7 	bl	8005afc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b2e:	bf00      	nop
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e041      	b.n	8005bcc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fc fa89 	bl	8002074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 fcab 	bl	80064d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d001      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e03a      	b.n	8005c62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <HAL_TIM_Base_Start_IT+0x98>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c16:	d009      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	@ (8005c70 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d111      	bne.n	8005c50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b06      	cmp	r3, #6
 8005c3c:	d010      	beq.n	8005c60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	e007      	b.n	8005c60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800

08005c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e041      	b.n	8005d0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f839 	bl	8005d16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f000 fc0a 	bl	80064d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e041      	b.n	8005dbe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f839 	bl	8005dc6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f000 fbb2 	bl	80064d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d020      	beq.n	8005e3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01b      	beq.n	8005e3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0202 	mvn.w	r2, #2
 8005e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fb41 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
 8005e28:	e005      	b.n	8005e36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fb34 	bl	8006498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fb43 	bl	80064bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d020      	beq.n	8005e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01b      	beq.n	8005e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0204 	mvn.w	r2, #4
 8005e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb1b 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
 8005e74:	e005      	b.n	8005e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fb0e 	bl	8006498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb1d 	bl	80064bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d020      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0208 	mvn.w	r2, #8
 8005ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2204      	movs	r2, #4
 8005eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 faf5 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
 8005ec0:	e005      	b.n	8005ece <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fae8 	bl	8006498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 faf7 	bl	80064bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d020      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01b      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0210 	mvn.w	r2, #16
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 facf 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fac2 	bl	8006498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fad1 	bl	80064bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00c      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0201 	mvn.w	r2, #1
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 faa1 	bl	8006486 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 f88e 	bl	8007084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00c      	beq.n	8005f8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fb fa18 	bl	80013bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00c      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d007      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0220 	mvn.w	r2, #32
 8005fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb f978 	bl	80012a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e088      	b.n	80060e8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11b      	bne.n	800601c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005ff4:	f000 fcf4 	bl	80069e0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 020c 	bic.w	r2, r2, #12
 8006006:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6999      	ldr	r1, [r3, #24]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	619a      	str	r2, [r3, #24]
 800601a:	e060      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b04      	cmp	r3, #4
 8006020:	d11c      	bne.n	800605c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006032:	f000 fd5d 	bl	8006af0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006044:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6999      	ldr	r1, [r3, #24]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	021a      	lsls	r2, r3, #8
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	619a      	str	r2, [r3, #24]
 800605a:	e040      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b08      	cmp	r3, #8
 8006060:	d11b      	bne.n	800609a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006072:	f000 fda8 	bl	8006bc6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 020c 	bic.w	r2, r2, #12
 8006084:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69d9      	ldr	r1, [r3, #28]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	61da      	str	r2, [r3, #28]
 8006098:	e021      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b0c      	cmp	r3, #12
 800609e:	d11c      	bne.n	80060da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80060b0:	f000 fdc4 	bl	8006c3c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69d9      	ldr	r1, [r3, #28]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	61da      	str	r2, [r3, #28]
 80060d8:	e001      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800610a:	2302      	movs	r3, #2
 800610c:	e0ae      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b0c      	cmp	r3, #12
 800611a:	f200 809f 	bhi.w	800625c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800611e:	a201      	add	r2, pc, #4	@ (adr r2, 8006124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006159 	.word	0x08006159
 8006128:	0800625d 	.word	0x0800625d
 800612c:	0800625d 	.word	0x0800625d
 8006130:	0800625d 	.word	0x0800625d
 8006134:	08006199 	.word	0x08006199
 8006138:	0800625d 	.word	0x0800625d
 800613c:	0800625d 	.word	0x0800625d
 8006140:	0800625d 	.word	0x0800625d
 8006144:	080061db 	.word	0x080061db
 8006148:	0800625d 	.word	0x0800625d
 800614c:	0800625d 	.word	0x0800625d
 8006150:	0800625d 	.word	0x0800625d
 8006154:	0800621b 	.word	0x0800621b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fa24 	bl	80065ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0208 	orr.w	r2, r2, #8
 8006172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0204 	bic.w	r2, r2, #4
 8006182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6999      	ldr	r1, [r3, #24]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	619a      	str	r2, [r3, #24]
      break;
 8006196:	e064      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fa6a 	bl	8006678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6999      	ldr	r1, [r3, #24]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	021a      	lsls	r2, r3, #8
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	619a      	str	r2, [r3, #24]
      break;
 80061d8:	e043      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fab3 	bl	800674c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0208 	orr.w	r2, r2, #8
 80061f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0204 	bic.w	r2, r2, #4
 8006204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69d9      	ldr	r1, [r3, #28]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	61da      	str	r2, [r3, #28]
      break;
 8006218:	e023      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fafd 	bl	8006820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69d9      	ldr	r1, [r3, #28]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	021a      	lsls	r2, r3, #8
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	61da      	str	r2, [r3, #28]
      break;
 800625a:	e002      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
      break;
 8006260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIM_ConfigClockSource+0x1c>
 800628c:	2302      	movs	r3, #2
 800628e:	e0b4      	b.n	80063fa <HAL_TIM_ConfigClockSource+0x186>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c8:	d03e      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0xd4>
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ce:	f200 8087 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d6:	f000 8086 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x172>
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062de:	d87f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b70      	cmp	r3, #112	@ 0x70
 80062e2:	d01a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0xa6>
 80062e4:	2b70      	cmp	r3, #112	@ 0x70
 80062e6:	d87b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b60      	cmp	r3, #96	@ 0x60
 80062ea:	d050      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x11a>
 80062ec:	2b60      	cmp	r3, #96	@ 0x60
 80062ee:	d877      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b50      	cmp	r3, #80	@ 0x50
 80062f2:	d03c      	beq.n	800636e <HAL_TIM_ConfigClockSource+0xfa>
 80062f4:	2b50      	cmp	r3, #80	@ 0x50
 80062f6:	d873      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d058      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x13a>
 80062fc:	2b40      	cmp	r3, #64	@ 0x40
 80062fe:	d86f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b30      	cmp	r3, #48	@ 0x30
 8006302:	d064      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15a>
 8006304:	2b30      	cmp	r3, #48	@ 0x30
 8006306:	d86b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d060      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15a>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d867      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d05c      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	2b10      	cmp	r3, #16
 8006316:	d05a      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15a>
 8006318:	e062      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800632a:	f000 fcdd 	bl	8006ce8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800633c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
      break;
 8006346:	e04f      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006358:	f000 fcc6 	bl	8006ce8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800636a:	609a      	str	r2, [r3, #8]
      break;
 800636c:	e03c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637a:	461a      	mov	r2, r3
 800637c:	f000 fb8a 	bl	8006a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2150      	movs	r1, #80	@ 0x50
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fc94 	bl	8006cb4 <TIM_ITRx_SetConfig>
      break;
 800638c:	e02c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639a:	461a      	mov	r2, r3
 800639c:	f000 fbe4 	bl	8006b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2160      	movs	r1, #96	@ 0x60
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fc84 	bl	8006cb4 <TIM_ITRx_SetConfig>
      break;
 80063ac:	e01c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ba:	461a      	mov	r2, r3
 80063bc:	f000 fb6a 	bl	8006a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2140      	movs	r1, #64	@ 0x40
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fc74 	bl	8006cb4 <TIM_ITRx_SetConfig>
      break;
 80063cc:	e00c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f000 fc6b 	bl	8006cb4 <TIM_ITRx_SetConfig>
      break;
 80063de:	e003      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
      break;
 80063e4:	e000      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_TIM_SlaveConfigSynchro+0x18>
 8006416:	2302      	movs	r3, #2
 8006418:	e031      	b.n	800647e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa45 	bl	80068bc <TIM_SlaveTimer_SetConfig>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e018      	b.n	800647e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800645a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800646a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr

080064aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr

080064bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr
	...

080064d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a2f      	ldr	r2, [pc, #188]	@ (80065a0 <TIM_Base_SetConfig+0xd0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_Base_SetConfig+0x30>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ee:	d007      	beq.n	8006500 <TIM_Base_SetConfig+0x30>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a2c      	ldr	r2, [pc, #176]	@ (80065a4 <TIM_Base_SetConfig+0xd4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0x30>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a2b      	ldr	r2, [pc, #172]	@ (80065a8 <TIM_Base_SetConfig+0xd8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d108      	bne.n	8006512 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a22      	ldr	r2, [pc, #136]	@ (80065a0 <TIM_Base_SetConfig+0xd0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_Base_SetConfig+0x62>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006520:	d007      	beq.n	8006532 <TIM_Base_SetConfig+0x62>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a1f      	ldr	r2, [pc, #124]	@ (80065a4 <TIM_Base_SetConfig+0xd4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_Base_SetConfig+0x62>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a1e      	ldr	r2, [pc, #120]	@ (80065a8 <TIM_Base_SetConfig+0xd8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d108      	bne.n	8006544 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a0d      	ldr	r2, [pc, #52]	@ (80065a0 <TIM_Base_SetConfig+0xd0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d103      	bne.n	8006578 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f023 0201 	bic.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	611a      	str	r2, [r3, #16]
  }
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800

080065ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f023 0201 	bic.w	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f023 0302 	bic.w	r3, r3, #2
 80065f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1c      	ldr	r2, [pc, #112]	@ (8006674 <TIM_OC1_SetConfig+0xc8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d10c      	bne.n	8006622 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0308 	bic.w	r3, r3, #8
 800660e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 0304 	bic.w	r3, r3, #4
 8006620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a13      	ldr	r2, [pc, #76]	@ (8006674 <TIM_OC1_SetConfig+0xc8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d111      	bne.n	800664e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	621a      	str	r2, [r3, #32]
}
 8006668:	bf00      	nop
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40012c00 	.word	0x40012c00

08006678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f023 0210 	bic.w	r2, r3, #16
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0320 	bic.w	r3, r3, #32
 80066c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006748 <TIM_OC2_SetConfig+0xd0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d10d      	bne.n	80066f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a14      	ldr	r2, [pc, #80]	@ (8006748 <TIM_OC2_SetConfig+0xd0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d113      	bne.n	8006724 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800670a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr
 8006748:	40012c00 	.word	0x40012c00

0800674c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1d      	ldr	r2, [pc, #116]	@ (800681c <TIM_OC3_SetConfig+0xd0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10d      	bne.n	80067c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a14      	ldr	r2, [pc, #80]	@ (800681c <TIM_OC3_SetConfig+0xd0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d113      	bne.n	80067f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	621a      	str	r2, [r3, #32]
}
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00

08006820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800686a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	031b      	lsls	r3, r3, #12
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a0f      	ldr	r2, [pc, #60]	@ (80068b8 <TIM_OC4_SetConfig+0x98>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d109      	bne.n	8006894 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	019b      	lsls	r3, r3, #6
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr
 80068b8:	40012c00 	.word	0x40012c00

080068bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b70      	cmp	r3, #112	@ 0x70
 8006904:	d01a      	beq.n	800693c <TIM_SlaveTimer_SetConfig+0x80>
 8006906:	2b70      	cmp	r3, #112	@ 0x70
 8006908:	d860      	bhi.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 800690a:	2b60      	cmp	r3, #96	@ 0x60
 800690c:	d054      	beq.n	80069b8 <TIM_SlaveTimer_SetConfig+0xfc>
 800690e:	2b60      	cmp	r3, #96	@ 0x60
 8006910:	d85c      	bhi.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 8006912:	2b50      	cmp	r3, #80	@ 0x50
 8006914:	d046      	beq.n	80069a4 <TIM_SlaveTimer_SetConfig+0xe8>
 8006916:	2b50      	cmp	r3, #80	@ 0x50
 8006918:	d858      	bhi.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 800691a:	2b40      	cmp	r3, #64	@ 0x40
 800691c:	d019      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x96>
 800691e:	2b40      	cmp	r3, #64	@ 0x40
 8006920:	d854      	bhi.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 8006922:	2b30      	cmp	r3, #48	@ 0x30
 8006924:	d055      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x116>
 8006926:	2b30      	cmp	r3, #48	@ 0x30
 8006928:	d850      	bhi.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 800692a:	2b20      	cmp	r3, #32
 800692c:	d051      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x116>
 800692e:	2b20      	cmp	r3, #32
 8006930:	d84c      	bhi.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d04d      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x116>
 8006936:	2b10      	cmp	r3, #16
 8006938:	d04b      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x116>
 800693a:	e047      	b.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	f000 f9cc 	bl	8006ce8 <TIM_ETR_SetConfig>
      break;
 8006950:	e040      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b05      	cmp	r3, #5
 8006958:	d101      	bne.n	800695e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e03b      	b.n	80069d6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006984:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	4313      	orrs	r3, r2
 8006990:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
      break;
 80069a2:	e017      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b0:	461a      	mov	r2, r3
 80069b2:	f000 f86f 	bl	8006a94 <TIM_TI1_ConfigInputStage>
      break;
 80069b6:	e00d      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069c4:	461a      	mov	r2, r3
 80069c6:	f000 f8cf 	bl	8006b68 <TIM_TI2_ConfigInputStage>
      break;
 80069ca:	e003      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	e000      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80069d2:	bf00      	nop
  }

  return status;
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f023 0201 	bic.w	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	@ (8006a88 <TIM_TI1_SetConfig+0xa8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_TI1_SetConfig+0x46>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a14:	d007      	beq.n	8006a26 <TIM_TI1_SetConfig+0x46>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a1c      	ldr	r2, [pc, #112]	@ (8006a8c <TIM_TI1_SetConfig+0xac>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_TI1_SetConfig+0x46>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	@ (8006a90 <TIM_TI1_SetConfig+0xb0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <TIM_TI1_SetConfig+0x4a>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <TIM_TI1_SetConfig+0x4c>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e003      	b.n	8006a4a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f023 030a 	bic.w	r3, r3, #10
 8006a64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f003 030a 	and.w	r3, r3, #10
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800

08006a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f023 0201 	bic.w	r2, r3, #1
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f023 030a 	bic.w	r3, r3, #10
 8006ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f023 0210 	bic.w	r2, r3, #16
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	031b      	lsls	r3, r3, #12
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	011b      	lsls	r3, r3, #4
 8006b48:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr

08006b68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0210 	bic.w	r2, r3, #16
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	031b      	lsls	r3, r3, #12
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	621a      	str	r2, [r3, #32]
}
 8006bbc:	bf00      	nop
 8006bbe:	371c      	adds	r7, #28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b087      	sub	sp, #28
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c02:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr

08006c3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c7a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	031b      	lsls	r3, r3, #12
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	031b      	lsls	r3, r3, #12
 8006c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f043 0307 	orr.w	r3, r3, #7
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	609a      	str	r2, [r3, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr

08006ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	021a      	lsls	r2, r3, #8
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	609a      	str	r2, [r3, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2201      	movs	r2, #1
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1a      	ldr	r2, [r3, #32]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	401a      	ands	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1a      	ldr	r2, [r3, #32]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	621a      	str	r2, [r3, #32]
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr

08006d6e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b08a      	sub	sp, #40	@ 0x28
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e09a      	b.n	8006eb8 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f892 	bl	8006ec0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7ff fb8e 	bl	80064d0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6819      	ldr	r1, [r3, #0]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	f7ff fe0d 	bl	80069e0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699a      	ldr	r2, [r3, #24]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 020c 	bic.w	r2, r2, #12
 8006dd4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6999      	ldr	r1, [r3, #24]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006df6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006e06:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e16:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0207 	bic.w	r2, r2, #7
 8006e26:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0204 	orr.w	r2, r2, #4
 8006e36:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006e40:	2370      	movs	r3, #112	@ 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006e44:	2300      	movs	r3, #0
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f107 020c 	add.w	r2, r7, #12
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fc09 	bl	8006678 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006e74:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006e84:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	@ 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr
	...

08006ed4 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ee2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006eea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ef2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006efa:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d108      	bne.n	8006f14 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d105      	bne.n	8006f14 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f08:	7b7b      	ldrb	r3, [r7, #13]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d102      	bne.n	8006f14 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f0e:	7b3b      	ldrb	r3, [r7, #12]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d001      	beq.n	8006f18 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e04d      	b.n	8006fb4 <HAL_TIMEx_HallSensor_Start_IT+0xe0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0202 	orr.w	r2, r2, #2
 8006f46:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	2100      	movs	r1, #0
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fee8 	bl	8006d26 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a18      	ldr	r2, [pc, #96]	@ (8006fbc <HAL_TIMEx_HallSensor_Start_IT+0xe8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00e      	beq.n	8006f7e <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f68:	d009      	beq.n	8006f7e <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a14      	ldr	r2, [pc, #80]	@ (8006fc0 <HAL_TIMEx_HallSensor_Start_IT+0xec>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a12      	ldr	r2, [pc, #72]	@ (8006fc4 <HAL_TIMEx_HallSensor_Start_IT+0xf0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d111      	bne.n	8006fa2 <HAL_TIMEx_HallSensor_Start_IT+0xce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b06      	cmp	r3, #6
 8006f8e:	d010      	beq.n	8006fb2 <HAL_TIMEx_HallSensor_Start_IT+0xde>
    {
      __HAL_TIM_ENABLE(htim);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa0:	e007      	b.n	8006fb2 <HAL_TIMEx_HallSensor_Start_IT+0xde>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40000400 	.word	0x40000400
 8006fc4:	40000800 	.word	0x40000800

08006fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e046      	b.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a16      	ldr	r2, [pc, #88]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00e      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702c:	d009      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a12      	ldr	r2, [pc, #72]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d004      	beq.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a10      	ldr	r2, [pc, #64]	@ (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d10c      	bne.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	4313      	orrs	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr
 8007078:	40012c00 	.word	0x40012c00
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800

08007084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr

08007096 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	4638      	mov	r0, r7
 80070a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr

080070b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070c0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80070c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070e4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80070e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	43db      	mvns	r3, r3
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	4013      	ands	r3, r2
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	4638      	mov	r0, r7
 8007132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr
	...

08007164 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007164:	b480      	push	{r7}
 8007166:	b09d      	sub	sp, #116	@ 0x74
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	78db      	ldrb	r3, [r3, #3]
 8007192:	2b03      	cmp	r3, #3
 8007194:	d81f      	bhi.n	80071d6 <USB_ActivateEndpoint+0x72>
 8007196:	a201      	add	r2, pc, #4	@ (adr r2, 800719c <USB_ActivateEndpoint+0x38>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071c9 	.word	0x080071c9
 80071a4:	080071df 	.word	0x080071df
 80071a8:	080071bb 	.word	0x080071bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80071ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80071b8:	e012      	b.n	80071e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80071ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80071c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80071c6:	e00b      	b.n	80071e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80071c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80071d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80071d4:	e004      	b.n	80071e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80071dc:	e000      	b.n	80071e0 <USB_ActivateEndpoint+0x7c>
      break;
 80071de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	441a      	add	r2, r3
 80071ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fe:	b29b      	uxth	r3, r3
 8007200:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007218:	b29b      	uxth	r3, r3
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	7812      	ldrb	r2, [r2, #0]
 800721e:	4313      	orrs	r3, r2
 8007220:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800723a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800723e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	7b1b      	ldrb	r3, [r3, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f040 8178 	bne.w	8007540 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8084 	beq.w	8007362 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007264:	b29b      	uxth	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	4413      	add	r3, r2
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	011a      	lsls	r2, r3, #4
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	88db      	ldrh	r3, [r3, #6]
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	b29b      	uxth	r3, r3
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	827b      	strh	r3, [r7, #18]
 800729c:	8a7b      	ldrh	r3, [r7, #18]
 800729e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01b      	beq.n	80072de <USB_ActivateEndpoint+0x17a>
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072bc:	823b      	strh	r3, [r7, #16]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	441a      	add	r2, r3
 80072c8:	8a3b      	ldrh	r3, [r7, #16]
 80072ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072da:	b29b      	uxth	r3, r3
 80072dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	78db      	ldrb	r3, [r3, #3]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d020      	beq.n	8007328 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072fc:	81bb      	strh	r3, [r7, #12]
 80072fe:	89bb      	ldrh	r3, [r7, #12]
 8007300:	f083 0320 	eor.w	r3, r3, #32
 8007304:	81bb      	strh	r3, [r7, #12]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	441a      	add	r2, r3
 8007310:	89bb      	ldrh	r3, [r7, #12]
 8007312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800731a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800731e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]
 8007326:	e2d5      	b.n	80078d4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800733a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733e:	81fb      	strh	r3, [r7, #14]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	441a      	add	r2, r3
 800734a:	89fb      	ldrh	r3, [r7, #14]
 800734c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735c:	b29b      	uxth	r3, r3
 800735e:	8013      	strh	r3, [r2, #0]
 8007360:	e2b8      	b.n	80078d4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	633b      	str	r3, [r7, #48]	@ 0x30
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800736c:	b29b      	uxth	r3, r3
 800736e:	461a      	mov	r2, r3
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	4413      	add	r3, r2
 8007374:	633b      	str	r3, [r7, #48]	@ 0x30
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	011a      	lsls	r2, r3, #4
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	4413      	add	r3, r2
 8007380:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	88db      	ldrh	r3, [r3, #6]
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	b29b      	uxth	r3, r3
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007394:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a6:	4413      	add	r3, r2
 80073a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	011a      	lsls	r2, r3, #4
 80073b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b2:	4413      	add	r3, r2
 80073b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80073d0:	d91d      	bls.n	800740e <USB_ActivateEndpoint+0x2aa>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d102      	bne.n	80073ec <USB_ActivateEndpoint+0x288>
 80073e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073e8:	3b01      	subs	r3, #1
 80073ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	029b      	lsls	r3, r3, #10
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	4313      	orrs	r3, r2
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007406:	b29a      	uxth	r2, r3
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e026      	b.n	800745c <USB_ActivateEndpoint+0x2f8>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10a      	bne.n	800742c <USB_ActivateEndpoint+0x2c8>
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007424:	b29a      	uxth	r2, r3
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e017      	b.n	800745c <USB_ActivateEndpoint+0x2f8>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <USB_ActivateEndpoint+0x2e2>
 8007440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007442:	3301      	adds	r3, #1
 8007444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29a      	uxth	r2, r3
 800744c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800744e:	b29b      	uxth	r3, r3
 8007450:	029b      	lsls	r3, r3, #10
 8007452:	b29b      	uxth	r3, r3
 8007454:	4313      	orrs	r3, r2
 8007456:	b29a      	uxth	r2, r3
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	847b      	strh	r3, [r7, #34]	@ 0x22
 800746a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800746c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01b      	beq.n	80074ac <USB_ActivateEndpoint+0x348>
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748a:	843b      	strh	r3, [r7, #32]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	441a      	add	r2, r3
 8007496:	8c3b      	ldrh	r3, [r7, #32]
 8007498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800749c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d124      	bne.n	80074fe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ca:	83bb      	strh	r3, [r7, #28]
 80074cc:	8bbb      	ldrh	r3, [r7, #28]
 80074ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80074d2:	83bb      	strh	r3, [r7, #28]
 80074d4:	8bbb      	ldrh	r3, [r7, #28]
 80074d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80074da:	83bb      	strh	r3, [r7, #28]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	8bbb      	ldrh	r3, [r7, #28]
 80074e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	8013      	strh	r3, [r2, #0]
 80074fc:	e1ea      	b.n	80078d4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007514:	83fb      	strh	r3, [r7, #30]
 8007516:	8bfb      	ldrh	r3, [r7, #30]
 8007518:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800751c:	83fb      	strh	r3, [r7, #30]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	441a      	add	r2, r3
 8007528:	8bfb      	ldrh	r3, [r7, #30]
 800752a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800752e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800753a:	b29b      	uxth	r3, r3
 800753c:	8013      	strh	r3, [r2, #0]
 800753e:	e1c9      	b.n	80078d4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	78db      	ldrb	r3, [r3, #3]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d11e      	bne.n	8007586 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800755a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	441a      	add	r2, r3
 800756c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007578:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800757c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007580:	b29b      	uxth	r3, r3
 8007582:	8013      	strh	r3, [r2, #0]
 8007584:	e01d      	b.n	80075c2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	441a      	add	r2, r3
 80075aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075d2:	4413      	add	r3, r2
 80075d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	011a      	lsls	r2, r3, #4
 80075dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	891b      	ldrh	r3, [r3, #8]
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007600:	b29b      	uxth	r3, r3
 8007602:	461a      	mov	r2, r3
 8007604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007606:	4413      	add	r3, r2
 8007608:	657b      	str	r3, [r7, #84]	@ 0x54
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	011a      	lsls	r2, r3, #4
 8007610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007612:	4413      	add	r3, r2
 8007614:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007618:	653b      	str	r3, [r7, #80]	@ 0x50
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	895b      	ldrh	r3, [r3, #10]
 800761e:	085b      	lsrs	r3, r3, #1
 8007620:	b29b      	uxth	r3, r3
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007628:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f040 8093 	bne.w	800775a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007644:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01b      	beq.n	8007688 <USB_ActivateEndpoint+0x524>
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007666:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	441a      	add	r2, r3
 8007672:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800767c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007684:	b29b      	uxth	r3, r3
 8007686:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007696:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01b      	beq.n	80076d8 <USB_ActivateEndpoint+0x574>
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	441a      	add	r2, r3
 80076c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80076c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80076f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80076f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80076f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80076fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	441a      	add	r2, r3
 800770a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800770c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800771c:	b29b      	uxth	r3, r3
 800771e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007736:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	441a      	add	r2, r3
 8007742:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800774c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007754:	b29b      	uxth	r3, r3
 8007756:	8013      	strh	r3, [r2, #0]
 8007758:	e0bc      	b.n	80078d4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800776a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800776e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01d      	beq.n	80077b2 <USB_ActivateEndpoint+0x64e>
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800779e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80077c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80077c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01d      	beq.n	800780a <USB_ActivateEndpoint+0x6a6>
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80077f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007802:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007806:	b29b      	uxth	r3, r3
 8007808:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	78db      	ldrb	r3, [r3, #3]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d024      	beq.n	800785c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007828:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800782c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007830:	f083 0320 	eor.w	r3, r3, #32
 8007834:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800784a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800784e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007856:	b29b      	uxth	r3, r3
 8007858:	8013      	strh	r3, [r2, #0]
 800785a:	e01d      	b.n	8007898 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800786e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007872:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	441a      	add	r2, r3
 8007880:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800788c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007894:	b29b      	uxth	r3, r3
 8007896:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	441a      	add	r2, r3
 80078bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80078c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80078d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3774      	adds	r7, #116	@ 0x74
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop

080078e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b08d      	sub	sp, #52	@ 0x34
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	7b1b      	ldrb	r3, [r3, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 808e 	bne.w	8007a14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d044      	beq.n	800798a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	81bb      	strh	r3, [r7, #12]
 800790e:	89bb      	ldrh	r3, [r7, #12]
 8007910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01b      	beq.n	8007950 <USB_DeactivateEndpoint+0x6c>
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800792a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792e:	817b      	strh	r3, [r7, #10]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	441a      	add	r2, r3
 800793a:	897b      	ldrh	r3, [r7, #10]
 800793c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007948:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800794c:	b29b      	uxth	r3, r3
 800794e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007966:	813b      	strh	r3, [r7, #8]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	441a      	add	r2, r3
 8007972:	893b      	ldrh	r3, [r7, #8]
 8007974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007984:	b29b      	uxth	r3, r3
 8007986:	8013      	strh	r3, [r2, #0]
 8007988:	e192      	b.n	8007cb0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	827b      	strh	r3, [r7, #18]
 8007998:	8a7b      	ldrh	r3, [r7, #18]
 800799a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01b      	beq.n	80079da <USB_DeactivateEndpoint+0xf6>
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b8:	823b      	strh	r3, [r7, #16]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	441a      	add	r2, r3
 80079c4:	8a3b      	ldrh	r3, [r7, #16]
 80079c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f0:	81fb      	strh	r3, [r7, #14]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	441a      	add	r2, r3
 80079fc:	89fb      	ldrh	r3, [r7, #14]
 80079fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	8013      	strh	r3, [r2, #0]
 8007a12:	e14d      	b.n	8007cb0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 80a5 	bne.w	8007b68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	843b      	strh	r3, [r7, #32]
 8007a2c:	8c3b      	ldrh	r3, [r7, #32]
 8007a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01b      	beq.n	8007a6e <USB_DeactivateEndpoint+0x18a>
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4c:	83fb      	strh	r3, [r7, #30]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	441a      	add	r2, r3
 8007a58:	8bfb      	ldrh	r3, [r7, #30]
 8007a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	83bb      	strh	r3, [r7, #28]
 8007a7c:	8bbb      	ldrh	r3, [r7, #28]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01b      	beq.n	8007abe <USB_DeactivateEndpoint+0x1da>
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a9c:	837b      	strh	r3, [r7, #26]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	441a      	add	r2, r3
 8007aa8:	8b7b      	ldrh	r3, [r7, #26]
 8007aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ab6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ad4:	833b      	strh	r3, [r7, #24]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	441a      	add	r2, r3
 8007ae0:	8b3b      	ldrh	r3, [r7, #24]
 8007ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0c:	82fb      	strh	r3, [r7, #22]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	441a      	add	r2, r3
 8007b18:	8afb      	ldrh	r3, [r7, #22]
 8007b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b44:	82bb      	strh	r3, [r7, #20]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	441a      	add	r2, r3
 8007b50:	8abb      	ldrh	r3, [r7, #20]
 8007b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	8013      	strh	r3, [r2, #0]
 8007b66:	e0a3      	b.n	8007cb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007b76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007b78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01b      	beq.n	8007bb8 <USB_DeactivateEndpoint+0x2d4>
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b96:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007bc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01b      	beq.n	8007c08 <USB_DeactivateEndpoint+0x324>
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	441a      	add	r2, r3
 8007bf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c8e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	441a      	add	r2, r3
 8007c9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3734      	adds	r7, #52	@ 0x34
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr

08007cbc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b0c2      	sub	sp, #264	@ 0x108
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cca:	6018      	str	r0, [r3, #0]
 8007ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	785b      	ldrb	r3, [r3, #1]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	f040 86b7 	bne.w	8008a56 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699a      	ldr	r2, [r3, #24]
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d908      	bls.n	8007d16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007d14:	e007      	b.n	8007d26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	7b1b      	ldrb	r3, [r3, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d13a      	bne.n	8007dac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6959      	ldr	r1, [r3, #20]
 8007d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	88da      	ldrh	r2, [r3, #6]
 8007d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d5c:	6800      	ldr	r0, [r0, #0]
 8007d5e:	f001 fc9c 	bl	800969a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	461a      	mov	r2, r3
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4413      	add	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	011a      	lsls	r2, r3, #4
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	4413      	add	r3, r2
 8007d98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	f000 be1f 	b.w	80089ea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	78db      	ldrb	r3, [r3, #3]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	f040 8462 	bne.w	8008682 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6a1a      	ldr	r2, [r3, #32]
 8007dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	f240 83df 	bls.w	800859a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e02:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	441a      	add	r2, r3
 8007e20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e2c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6a1a      	ldr	r2, [r3, #32]
 8007e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e48:	1ad2      	subs	r2, r2, r3
 8007e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 81c7 	beq.w	800820c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d177      	bne.n	8007f8a <USB_EPStartXfer+0x2ce>
 8007e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	4413      	add	r3, r2
 8007ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	011a      	lsls	r2, r3, #4
 8007ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ece:	4413      	add	r3, r2
 8007ed0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	801a      	strh	r2, [r3, #0]
 8007ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8007eec:	d921      	bls.n	8007f32 <USB_EPStartXfer+0x276>
 8007eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef2:	095b      	lsrs	r3, r3, #5
 8007ef4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <USB_EPStartXfer+0x252>
 8007f04:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	029b      	lsls	r3, r3, #10
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	e050      	b.n	8007fd4 <USB_EPStartXfer+0x318>
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <USB_EPStartXfer+0x294>
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	e041      	b.n	8007fd4 <USB_EPStartXfer+0x318>
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	085b      	lsrs	r3, r3, #1
 8007f56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d004      	beq.n	8007f70 <USB_EPStartXfer+0x2b4>
 8007f66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	029b      	lsls	r3, r3, #10
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	4313      	orrs	r3, r2
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	801a      	strh	r2, [r3, #0]
 8007f88:	e024      	b.n	8007fd4 <USB_EPStartXfer+0x318>
 8007f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d11c      	bne.n	8007fd4 <USB_EPStartXfer+0x318>
 8007f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	4413      	add	r3, r2
 8007fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	011a      	lsls	r2, r3, #4
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	895b      	ldrh	r3, [r3, #10]
 8007fe0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6959      	ldr	r1, [r3, #20]
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ffa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ffe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008002:	6800      	ldr	r0, [r0, #0]
 8008004:	f001 fb49 	bl	800969a <USB_WritePMA>
            ep->xfer_buff += len;
 8008008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695a      	ldr	r2, [r3, #20]
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008018:	441a      	add	r2, r3
 800801a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800801e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6a1a      	ldr	r2, [r3, #32]
 8008032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	429a      	cmp	r2, r3
 8008040:	d90f      	bls.n	8008062 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6a1a      	ldr	r2, [r3, #32]
 800804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008052:	1ad2      	subs	r2, r2, r3
 8008054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	621a      	str	r2, [r3, #32]
 8008060:	e00e      	b.n	8008080 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2200      	movs	r2, #0
 800807e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d177      	bne.n	8008180 <USB_EPStartXfer+0x4c4>
 8008090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	4413      	add	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
 80080b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	011a      	lsls	r2, r3, #4
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	4413      	add	r3, r2
 80080c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80080e2:	d921      	bls.n	8008128 <USB_EPStartXfer+0x46c>
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e8:	095b      	lsrs	r3, r3, #5
 80080ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80080ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <USB_EPStartXfer+0x448>
 80080fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080fe:	3b01      	subs	r3, #1
 8008100:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29a      	uxth	r2, r3
 800810a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800810e:	b29b      	uxth	r3, r3
 8008110:	029b      	lsls	r3, r3, #10
 8008112:	b29b      	uxth	r3, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	b29b      	uxth	r3, r3
 8008118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800811c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008120:	b29a      	uxth	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	e056      	b.n	80081d6 <USB_EPStartXfer+0x51a>
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <USB_EPStartXfer+0x48a>
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813e:	b29a      	uxth	r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	e047      	b.n	80081d6 <USB_EPStartXfer+0x51a>
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d004      	beq.n	8008166 <USB_EPStartXfer+0x4aa>
 800815c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008160:	3301      	adds	r3, #1
 8008162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29a      	uxth	r2, r3
 800816c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008170:	b29b      	uxth	r3, r3
 8008172:	029b      	lsls	r3, r3, #10
 8008174:	b29b      	uxth	r3, r3
 8008176:	4313      	orrs	r3, r2
 8008178:	b29a      	uxth	r2, r3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	801a      	strh	r2, [r3, #0]
 800817e:	e02a      	b.n	80081d6 <USB_EPStartXfer+0x51a>
 8008180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d122      	bne.n	80081d6 <USB_EPStartXfer+0x51a>
 8008190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008194:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	623b      	str	r3, [r7, #32]
 800819c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	4413      	add	r3, r2
 80081b2:	623b      	str	r3, [r7, #32]
 80081b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	011a      	lsls	r2, r3, #4
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	4413      	add	r3, r2
 80081c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	891b      	ldrh	r3, [r3, #8]
 80081e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6959      	ldr	r1, [r3, #20]
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80081fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008200:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008204:	6800      	ldr	r0, [r0, #0]
 8008206:	f001 fa48 	bl	800969a <USB_WritePMA>
 800820a:	e3ee      	b.n	80089ea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800820c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d177      	bne.n	800830c <USB_EPStartXfer+0x650>
 800821c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008236:	b29b      	uxth	r3, r3
 8008238:	461a      	mov	r2, r3
 800823a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800823c:	4413      	add	r3, r2
 800823e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	011a      	lsls	r2, r3, #4
 800824e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008250:	4413      	add	r3, r2
 8008252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008256:	647b      	str	r3, [r7, #68]	@ 0x44
 8008258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008262:	b29a      	uxth	r2, r3
 8008264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008266:	801a      	strh	r2, [r3, #0]
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826c:	2b3e      	cmp	r3, #62	@ 0x3e
 800826e:	d921      	bls.n	80082b4 <USB_EPStartXfer+0x5f8>
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008274:	095b      	lsrs	r3, r3, #5
 8008276:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800827a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827e:	f003 031f 	and.w	r3, r3, #31
 8008282:	2b00      	cmp	r3, #0
 8008284:	d104      	bne.n	8008290 <USB_EPStartXfer+0x5d4>
 8008286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800828a:	3b01      	subs	r3, #1
 800828c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800829a:	b29b      	uxth	r3, r3
 800829c:	029b      	lsls	r3, r3, #10
 800829e:	b29b      	uxth	r3, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	e056      	b.n	8008362 <USB_EPStartXfer+0x6a6>
 80082b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <USB_EPStartXfer+0x616>
 80082bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	e047      	b.n	8008362 <USB_EPStartXfer+0x6a6>
 80082d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d6:	085b      	lsrs	r3, r3, #1
 80082d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80082dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <USB_EPStartXfer+0x636>
 80082e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80082ec:	3301      	adds	r3, #1
 80082ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80082f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	029b      	lsls	r3, r3, #10
 8008300:	b29b      	uxth	r3, r3
 8008302:	4313      	orrs	r3, r2
 8008304:	b29a      	uxth	r2, r3
 8008306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	e02a      	b.n	8008362 <USB_EPStartXfer+0x6a6>
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d122      	bne.n	8008362 <USB_EPStartXfer+0x6a6>
 800831c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	653b      	str	r3, [r7, #80]	@ 0x50
 8008328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008336:	b29b      	uxth	r3, r3
 8008338:	461a      	mov	r2, r3
 800833a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800833c:	4413      	add	r3, r2
 800833e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	011a      	lsls	r2, r3, #4
 800834e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008350:	4413      	add	r3, r2
 8008352:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835c:	b29a      	uxth	r2, r3
 800835e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	891b      	ldrh	r3, [r3, #8]
 800836e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6959      	ldr	r1, [r3, #20]
 800837e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008382:	b29b      	uxth	r3, r3
 8008384:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008388:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800838c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008390:	6800      	ldr	r0, [r0, #0]
 8008392:	f001 f982 	bl	800969a <USB_WritePMA>
            ep->xfer_buff += len;
 8008396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695a      	ldr	r2, [r3, #20]
 80083a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a6:	441a      	add	r2, r3
 80083a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6a1a      	ldr	r2, [r3, #32]
 80083c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d90f      	bls.n	80083f0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80083d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6a1a      	ldr	r2, [r3, #32]
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e0:	1ad2      	subs	r2, r2, r3
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	621a      	str	r2, [r3, #32]
 80083ee:	e00e      	b.n	800840e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80083f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2200      	movs	r2, #0
 800840c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800840e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	643b      	str	r3, [r7, #64]	@ 0x40
 800841a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d177      	bne.n	800851a <USB_EPStartXfer+0x85e>
 800842a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008444:	b29b      	uxth	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844a:	4413      	add	r3, r2
 800844c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800844e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	011a      	lsls	r2, r3, #4
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	4413      	add	r3, r2
 8008460:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008464:	637b      	str	r3, [r7, #52]	@ 0x34
 8008466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008470:	b29a      	uxth	r2, r3
 8008472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847a:	2b3e      	cmp	r3, #62	@ 0x3e
 800847c:	d921      	bls.n	80084c2 <USB_EPStartXfer+0x806>
 800847e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848c:	f003 031f 	and.w	r3, r3, #31
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <USB_EPStartXfer+0x7e2>
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008498:	3b01      	subs	r3, #1
 800849a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800849e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	029b      	lsls	r3, r3, #10
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	4313      	orrs	r3, r2
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	e050      	b.n	8008564 <USB_EPStartXfer+0x8a8>
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <USB_EPStartXfer+0x824>
 80084ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d8:	b29a      	uxth	r2, r3
 80084da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e041      	b.n	8008564 <USB_EPStartXfer+0x8a8>
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e4:	085b      	lsrs	r3, r3, #1
 80084e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <USB_EPStartXfer+0x844>
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084fa:	3301      	adds	r3, #1
 80084fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800850a:	b29b      	uxth	r3, r3
 800850c:	029b      	lsls	r3, r3, #10
 800850e:	b29b      	uxth	r3, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	b29a      	uxth	r2, r3
 8008514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e024      	b.n	8008564 <USB_EPStartXfer+0x8a8>
 800851a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d11c      	bne.n	8008564 <USB_EPStartXfer+0x8a8>
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008538:	b29b      	uxth	r3, r3
 800853a:	461a      	mov	r2, r3
 800853c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800853e:	4413      	add	r3, r2
 8008540:	643b      	str	r3, [r7, #64]	@ 0x40
 8008542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	011a      	lsls	r2, r3, #4
 8008550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008552:	4413      	add	r3, r2
 8008554:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800855a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855e:	b29a      	uxth	r2, r3
 8008560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008562:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	895b      	ldrh	r3, [r3, #10]
 8008570:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6959      	ldr	r1, [r3, #20]
 8008580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008584:	b29b      	uxth	r3, r3
 8008586:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800858a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800858e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008592:	6800      	ldr	r0, [r0, #0]
 8008594:	f001 f881 	bl	800969a <USB_WritePMA>
 8008598:	e227      	b.n	80089ea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800859a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80085cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	441a      	add	r2, r3
 80085ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80085f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008602:	b29b      	uxth	r3, r3
 8008604:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008620:	b29b      	uxth	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008626:	4413      	add	r3, r2
 8008628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800862a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	011a      	lsls	r2, r3, #4
 8008638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800863a:	4413      	add	r3, r2
 800863c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008646:	b29a      	uxth	r2, r3
 8008648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800864a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800864c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	891b      	ldrh	r3, [r3, #8]
 8008658:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800865c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6959      	ldr	r1, [r3, #20]
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866c:	b29b      	uxth	r3, r3
 800866e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008672:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008676:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	f001 f80d 	bl	800969a <USB_WritePMA>
 8008680:	e1b3      	b.n	80089ea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6a1a      	ldr	r2, [r3, #32]
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80086a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 80c6 	beq.w	8008854 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80086d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	785b      	ldrb	r3, [r3, #1]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d177      	bne.n	80087d4 <USB_EPStartXfer+0xb18>
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086fe:	b29b      	uxth	r3, r3
 8008700:	461a      	mov	r2, r3
 8008702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008704:	4413      	add	r3, r2
 8008706:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	011a      	lsls	r2, r3, #4
 8008716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008718:	4413      	add	r3, r2
 800871a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800871e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800872a:	b29a      	uxth	r2, r3
 800872c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800872e:	801a      	strh	r2, [r3, #0]
 8008730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008734:	2b3e      	cmp	r3, #62	@ 0x3e
 8008736:	d921      	bls.n	800877c <USB_EPStartXfer+0xac0>
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008746:	f003 031f 	and.w	r3, r3, #31
 800874a:	2b00      	cmp	r3, #0
 800874c:	d104      	bne.n	8008758 <USB_EPStartXfer+0xa9c>
 800874e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008752:	3b01      	subs	r3, #1
 8008754:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29a      	uxth	r2, r3
 800875e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008762:	b29b      	uxth	r3, r3
 8008764:	029b      	lsls	r3, r3, #10
 8008766:	b29b      	uxth	r3, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008774:	b29a      	uxth	r2, r3
 8008776:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e050      	b.n	800881e <USB_EPStartXfer+0xb62>
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <USB_EPStartXfer+0xade>
 8008784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800878e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008792:	b29a      	uxth	r2, r3
 8008794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008796:	801a      	strh	r2, [r3, #0]
 8008798:	e041      	b.n	800881e <USB_EPStartXfer+0xb62>
 800879a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80087a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <USB_EPStartXfer+0xafe>
 80087b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80087b4:	3301      	adds	r3, #1
 80087b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80087ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	029b      	lsls	r3, r3, #10
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4313      	orrs	r3, r2
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087d0:	801a      	strh	r2, [r3, #0]
 80087d2:	e024      	b.n	800881e <USB_EPStartXfer+0xb62>
 80087d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	785b      	ldrb	r3, [r3, #1]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d11c      	bne.n	800881e <USB_EPStartXfer+0xb62>
 80087e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087f8:	4413      	add	r3, r2
 80087fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80087fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	011a      	lsls	r2, r3, #4
 800880a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800880c:	4413      	add	r3, r2
 800880e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008818:	b29a      	uxth	r2, r3
 800881a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800881c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800881e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	895b      	ldrh	r3, [r3, #10]
 800882a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800882e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6959      	ldr	r1, [r3, #20]
 800883a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883e:	b29b      	uxth	r3, r3
 8008840:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008844:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008848:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800884c:	6800      	ldr	r0, [r0, #0]
 800884e:	f000 ff24 	bl	800969a <USB_WritePMA>
 8008852:	e0ca      	b.n	80089ea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d177      	bne.n	8008954 <USB_EPStartXfer+0xc98>
 8008864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800887e:	b29b      	uxth	r3, r3
 8008880:	461a      	mov	r2, r3
 8008882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008884:	4413      	add	r3, r2
 8008886:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	011a      	lsls	r2, r3, #4
 8008896:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008898:	4413      	add	r3, r2
 800889a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800889e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ae:	801a      	strh	r2, [r3, #0]
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80088b6:	d921      	bls.n	80088fc <USB_EPStartXfer+0xc40>
 80088b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80088c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <USB_EPStartXfer+0xc1c>
 80088ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80088d2:	3b01      	subs	r3, #1
 80088d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80088d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29a      	uxth	r2, r3
 80088de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e05c      	b.n	80089b6 <USB_EPStartXfer+0xcfa>
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <USB_EPStartXfer+0xc5e>
 8008904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008912:	b29a      	uxth	r2, r3
 8008914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008916:	801a      	strh	r2, [r3, #0]
 8008918:	e04d      	b.n	80089b6 <USB_EPStartXfer+0xcfa>
 800891a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <USB_EPStartXfer+0xc7e>
 8008930:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008934:	3301      	adds	r3, #1
 8008936:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800893a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008944:	b29b      	uxth	r3, r3
 8008946:	029b      	lsls	r3, r3, #10
 8008948:	b29b      	uxth	r3, r3
 800894a:	4313      	orrs	r3, r2
 800894c:	b29a      	uxth	r2, r3
 800894e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	e030      	b.n	80089b6 <USB_EPStartXfer+0xcfa>
 8008954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d128      	bne.n	80089b6 <USB_EPStartXfer+0xcfa>
 8008964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008980:	b29b      	uxth	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008988:	4413      	add	r3, r2
 800898a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800898e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	011a      	lsls	r2, r3, #4
 800899c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089a0:	4413      	add	r3, r2
 80089a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80089a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	891b      	ldrh	r3, [r3, #8]
 80089c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6959      	ldr	r1, [r3, #20]
 80089d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80089dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80089e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80089e4:	6800      	ldr	r0, [r0, #0]
 80089e6:	f000 fe58 	bl	800969a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80089ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a10:	817b      	strh	r3, [r7, #10]
 8008a12:	897b      	ldrh	r3, [r7, #10]
 8008a14:	f083 0310 	eor.w	r3, r3, #16
 8008a18:	817b      	strh	r3, [r7, #10]
 8008a1a:	897b      	ldrh	r3, [r7, #10]
 8008a1c:	f083 0320 	eor.w	r3, r3, #32
 8008a20:	817b      	strh	r3, [r7, #10]
 8008a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	441a      	add	r2, r3
 8008a3c:	897b      	ldrh	r3, [r7, #10]
 8008a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	8013      	strh	r3, [r2, #0]
 8008a52:	f000 bcde 	b.w	8009412 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	7b1b      	ldrb	r3, [r3, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f040 80bb 	bne.w	8008bde <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699a      	ldr	r2, [r3, #24]
 8008a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d917      	bls.n	8008ab4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa4:	1ad2      	subs	r2, r2, r3
 8008aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	619a      	str	r2, [r3, #24]
 8008ab2:	e00e      	b.n	8008ad2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008af6:	4413      	add	r3, r2
 8008af8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	011a      	lsls	r2, r3, #4
 8008b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b0e:	4413      	add	r3, r2
 8008b10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b2a:	801a      	strh	r2, [r3, #0]
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b30:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b32:	d924      	bls.n	8008b7e <USB_EPStartXfer+0xec2>
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b38:	095b      	lsrs	r3, r3, #5
 8008b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b42:	f003 031f 	and.w	r3, r3, #31
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <USB_EPStartXfer+0xe98>
 8008b4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	029b      	lsls	r3, r3, #10
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	4313      	orrs	r3, r2
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b78:	801a      	strh	r2, [r3, #0]
 8008b7a:	f000 bc10 	b.w	800939e <USB_EPStartXfer+0x16e2>
 8008b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10c      	bne.n	8008ba0 <USB_EPStartXfer+0xee4>
 8008b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e3fe      	b.n	800939e <USB_EPStartXfer+0x16e2>
 8008ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <USB_EPStartXfer+0xf04>
 8008bb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008bba:	3301      	adds	r3, #1
 8008bbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	029b      	lsls	r3, r3, #10
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	e3df      	b.n	800939e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	78db      	ldrb	r3, [r3, #3]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	f040 8218 	bne.w	8009020 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	785b      	ldrb	r3, [r3, #1]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f040 809d 	bne.w	8008d3c <USB_EPStartXfer+0x1080>
 8008c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c26:	4413      	add	r3, r2
 8008c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	011a      	lsls	r2, r3, #4
 8008c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c3e:	4413      	add	r3, r2
 8008c40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c5a:	801a      	strh	r2, [r3, #0]
 8008c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c6a:	d92b      	bls.n	8008cc4 <USB_EPStartXfer+0x1008>
 8008c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	095b      	lsrs	r3, r3, #5
 8008c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f003 031f 	and.w	r3, r3, #31
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <USB_EPStartXfer+0xfe0>
 8008c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c96:	3b01      	subs	r3, #1
 8008c98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	029b      	lsls	r3, r3, #10
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cc0:	801a      	strh	r2, [r3, #0]
 8008cc2:	e070      	b.n	8008da6 <USB_EPStartXfer+0x10ea>
 8008cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10c      	bne.n	8008cee <USB_EPStartXfer+0x1032>
 8008cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e05b      	b.n	8008da6 <USB_EPStartXfer+0x10ea>
 8008cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	085b      	lsrs	r3, r3, #1
 8008cfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <USB_EPStartXfer+0x1062>
 8008d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d18:	3301      	adds	r3, #1
 8008d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	029b      	lsls	r3, r3, #10
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	4313      	orrs	r3, r2
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d38:	801a      	strh	r2, [r3, #0]
 8008d3a:	e034      	b.n	8008da6 <USB_EPStartXfer+0x10ea>
 8008d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	785b      	ldrb	r3, [r3, #1]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d12c      	bne.n	8008da6 <USB_EPStartXfer+0x10ea>
 8008d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d70:	4413      	add	r3, r2
 8008d72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	011a      	lsls	r2, r3, #4
 8008d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d88:	4413      	add	r3, r2
 8008d8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008da4:	801a      	strh	r2, [r3, #0]
 8008da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	785b      	ldrb	r3, [r3, #1]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f040 809d 	bne.w	8008f00 <USB_EPStartXfer+0x1244>
 8008dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008dea:	4413      	add	r3, r2
 8008dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	011a      	lsls	r2, r3, #4
 8008dfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e02:	4413      	add	r3, r2
 8008e04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e1e:	801a      	strh	r2, [r3, #0]
 8008e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e2e:	d92b      	bls.n	8008e88 <USB_EPStartXfer+0x11cc>
 8008e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	095b      	lsrs	r3, r3, #5
 8008e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <USB_EPStartXfer+0x11a4>
 8008e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	029b      	lsls	r3, r3, #10
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	4313      	orrs	r3, r2
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e84:	801a      	strh	r2, [r3, #0]
 8008e86:	e069      	b.n	8008f5c <USB_EPStartXfer+0x12a0>
 8008e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10c      	bne.n	8008eb2 <USB_EPStartXfer+0x11f6>
 8008e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008eae:	801a      	strh	r2, [r3, #0]
 8008eb0:	e054      	b.n	8008f5c <USB_EPStartXfer+0x12a0>
 8008eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	085b      	lsrs	r3, r3, #1
 8008ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <USB_EPStartXfer+0x1226>
 8008ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008edc:	3301      	adds	r3, #1
 8008ede:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	029b      	lsls	r3, r3, #10
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008efc:	801a      	strh	r2, [r3, #0]
 8008efe:	e02d      	b.n	8008f5c <USB_EPStartXfer+0x12a0>
 8008f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	785b      	ldrb	r3, [r3, #1]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d125      	bne.n	8008f5c <USB_EPStartXfer+0x12a0>
 8008f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	461a      	mov	r2, r3
 8008f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f26:	4413      	add	r3, r2
 8008f28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	011a      	lsls	r2, r3, #4
 8008f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f3e:	4413      	add	r3, r2
 8008f40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f5a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 8218 	beq.w	800939e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008f8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <USB_EPStartXfer+0x12ea>
 8008f9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10d      	bne.n	8008fc2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fa6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 81f5 	bne.w	800939e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f040 81ee 	bne.w	800939e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	441a      	add	r2, r3
 8009006:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800900a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800900e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009016:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800901a:	b29b      	uxth	r3, r3
 800901c:	8013      	strh	r3, [r2, #0]
 800901e:	e1be      	b.n	800939e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	78db      	ldrb	r3, [r3, #3]
 800902c:	2b01      	cmp	r3, #1
 800902e:	f040 81b4 	bne.w	800939a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699a      	ldr	r2, [r3, #24]
 800903e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	429a      	cmp	r2, r3
 800904c:	d917      	bls.n	800907e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800904e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800905e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	619a      	str	r2, [r3, #24]
 800907c:	e00e      	b.n	800909c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800907e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800908e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2200      	movs	r2, #0
 800909a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800909c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f040 8085 	bne.w	80091b8 <USB_EPStartXfer+0x14fc>
 80090ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090d2:	4413      	add	r3, r2
 80090d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	011a      	lsls	r2, r3, #4
 80090e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090ea:	4413      	add	r3, r2
 80090ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80090f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009100:	b29a      	uxth	r2, r3
 8009102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009106:	801a      	strh	r2, [r3, #0]
 8009108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910c:	2b3e      	cmp	r3, #62	@ 0x3e
 800910e:	d923      	bls.n	8009158 <USB_EPStartXfer+0x149c>
 8009110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800911a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <USB_EPStartXfer+0x1474>
 8009126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800912a:	3b01      	subs	r3, #1
 800912c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29a      	uxth	r2, r3
 8009138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800913c:	b29b      	uxth	r3, r3
 800913e:	029b      	lsls	r3, r3, #10
 8009140:	b29b      	uxth	r3, r3
 8009142:	4313      	orrs	r3, r2
 8009144:	b29b      	uxth	r3, r3
 8009146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800914e:	b29a      	uxth	r2, r3
 8009150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e060      	b.n	800921a <USB_EPStartXfer+0x155e>
 8009158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10c      	bne.n	800917a <USB_EPStartXfer+0x14be>
 8009160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	b29b      	uxth	r3, r3
 8009168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800916c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009170:	b29a      	uxth	r2, r3
 8009172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009176:	801a      	strh	r2, [r3, #0]
 8009178:	e04f      	b.n	800921a <USB_EPStartXfer+0x155e>
 800917a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <USB_EPStartXfer+0x14de>
 8009190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009194:	3301      	adds	r3, #1
 8009196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800919a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	029b      	lsls	r3, r3, #10
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	e030      	b.n	800921a <USB_EPStartXfer+0x155e>
 80091b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d128      	bne.n	800921a <USB_EPStartXfer+0x155e>
 80091c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80091d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091ec:	4413      	add	r3, r2
 80091ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80091f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	011a      	lsls	r2, r3, #4
 8009200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009204:	4413      	add	r3, r2
 8009206:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800920a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800920e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009212:	b29a      	uxth	r2, r3
 8009214:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009218:	801a      	strh	r2, [r3, #0]
 800921a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800922c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f040 8085 	bne.w	8009344 <USB_EPStartXfer+0x1688>
 800923a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800923e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009256:	b29b      	uxth	r3, r3
 8009258:	461a      	mov	r2, r3
 800925a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800925e:	4413      	add	r3, r2
 8009260:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	011a      	lsls	r2, r3, #4
 8009272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009276:	4413      	add	r3, r2
 8009278:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800927c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	b29b      	uxth	r3, r3
 8009288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800928c:	b29a      	uxth	r2, r3
 800928e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009292:	801a      	strh	r2, [r3, #0]
 8009294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009298:	2b3e      	cmp	r3, #62	@ 0x3e
 800929a:	d923      	bls.n	80092e4 <USB_EPStartXfer+0x1628>
 800929c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a0:	095b      	lsrs	r3, r3, #5
 80092a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092aa:	f003 031f 	and.w	r3, r3, #31
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <USB_EPStartXfer+0x1600>
 80092b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092b6:	3b01      	subs	r3, #1
 80092b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	029b      	lsls	r3, r3, #10
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	4313      	orrs	r3, r2
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092e0:	801a      	strh	r2, [r3, #0]
 80092e2:	e05c      	b.n	800939e <USB_EPStartXfer+0x16e2>
 80092e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10c      	bne.n	8009306 <USB_EPStartXfer+0x164a>
 80092ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009302:	801a      	strh	r2, [r3, #0]
 8009304:	e04b      	b.n	800939e <USB_EPStartXfer+0x16e2>
 8009306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930a:	085b      	lsrs	r3, r3, #1
 800930c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d004      	beq.n	8009326 <USB_EPStartXfer+0x166a>
 800931c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009320:	3301      	adds	r3, #1
 8009322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29a      	uxth	r2, r3
 800932e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009332:	b29b      	uxth	r3, r3
 8009334:	029b      	lsls	r3, r3, #10
 8009336:	b29b      	uxth	r3, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	b29a      	uxth	r2, r3
 800933c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009340:	801a      	strh	r2, [r3, #0]
 8009342:	e02c      	b.n	800939e <USB_EPStartXfer+0x16e2>
 8009344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d124      	bne.n	800939e <USB_EPStartXfer+0x16e2>
 8009354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009362:	b29b      	uxth	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800936a:	4413      	add	r3, r2
 800936c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	011a      	lsls	r2, r3, #4
 800937e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009382:	4413      	add	r3, r2
 8009384:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009388:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800938c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009390:	b29a      	uxth	r2, r3
 8009392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009396:	801a      	strh	r2, [r3, #0]
 8009398:	e001      	b.n	800939e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e03a      	b.n	8009414 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800939e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80093c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80093cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80093d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80093d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80093d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80093dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80093e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	441a      	add	r2, r3
 80093fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80093fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800940a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800940e:	b29b      	uxth	r3, r3
 8009410:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d020      	beq.n	8009472 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	b29b      	uxth	r3, r3
 800943e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009446:	81bb      	strh	r3, [r7, #12]
 8009448:	89bb      	ldrh	r3, [r7, #12]
 800944a:	f083 0310 	eor.w	r3, r3, #16
 800944e:	81bb      	strh	r3, [r7, #12]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	441a      	add	r2, r3
 800945a:	89bb      	ldrh	r3, [r7, #12]
 800945c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800946c:	b29b      	uxth	r3, r3
 800946e:	8013      	strh	r3, [r2, #0]
 8009470:	e01f      	b.n	80094b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	b29b      	uxth	r3, r3
 8009480:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009488:	81fb      	strh	r3, [r7, #14]
 800948a:	89fb      	ldrh	r3, [r7, #14]
 800948c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009490:	81fb      	strh	r3, [r7, #14]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	441a      	add	r2, r3
 800949c:	89fb      	ldrh	r3, [r7, #14]
 800949e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bc80      	pop	{r7}
 80094bc:	4770      	bx	lr

080094be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094be:	b480      	push	{r7}
 80094c0:	b087      	sub	sp, #28
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	7b1b      	ldrb	r3, [r3, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f040 809d 	bne.w	800960c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d04c      	beq.n	8009574 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	823b      	strh	r3, [r7, #16]
 80094e8:	8a3b      	ldrh	r3, [r7, #16]
 80094ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01b      	beq.n	800952a <USB_EPClearStall+0x6c>
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009508:	81fb      	strh	r3, [r7, #14]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	441a      	add	r2, r3
 8009514:	89fb      	ldrh	r3, [r7, #14]
 8009516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800951a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800951e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009522:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009526:	b29b      	uxth	r3, r3
 8009528:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	78db      	ldrb	r3, [r3, #3]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d06c      	beq.n	800960c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	b29b      	uxth	r3, r3
 8009540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009548:	81bb      	strh	r3, [r7, #12]
 800954a:	89bb      	ldrh	r3, [r7, #12]
 800954c:	f083 0320 	eor.w	r3, r3, #32
 8009550:	81bb      	strh	r3, [r7, #12]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	441a      	add	r2, r3
 800955c:	89bb      	ldrh	r3, [r7, #12]
 800955e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800956a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956e:	b29b      	uxth	r3, r3
 8009570:	8013      	strh	r3, [r2, #0]
 8009572:	e04b      	b.n	800960c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	82fb      	strh	r3, [r7, #22]
 8009582:	8afb      	ldrh	r3, [r7, #22]
 8009584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01b      	beq.n	80095c4 <USB_EPClearStall+0x106>
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800959e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a2:	82bb      	strh	r3, [r7, #20]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	441a      	add	r2, r3
 80095ae:	8abb      	ldrh	r3, [r7, #20]
 80095b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095da:	827b      	strh	r3, [r7, #18]
 80095dc:	8a7b      	ldrh	r3, [r7, #18]
 80095de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80095e2:	827b      	strh	r3, [r7, #18]
 80095e4:	8a7b      	ldrh	r3, [r7, #18]
 80095e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80095ea:	827b      	strh	r3, [r7, #18]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	441a      	add	r2, r3
 80095f6:	8a7b      	ldrh	r3, [r7, #18]
 80095f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009608:	b29b      	uxth	r3, r3
 800960a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	bc80      	pop	{r7}
 8009616:	4770      	bx	lr

08009618 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d103      	bne.n	8009632 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2280      	movs	r2, #128	@ 0x80
 800962e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	bc80      	pop	{r7}
 800963c:	4770      	bx	lr

0800963e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800963e:	b480      	push	{r7}
 8009640:	b083      	sub	sp, #12
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr

08009652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	bc80      	pop	{r7}
 8009664:	4770      	bx	lr

08009666 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009666:	b480      	push	{r7}
 8009668:	b085      	sub	sp, #20
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009674:	b29b      	uxth	r3, r3
 8009676:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009678:	68fb      	ldr	r3, [r7, #12]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr

08009684 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr

0800969a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800969a:	b480      	push	{r7}
 800969c:	b08b      	sub	sp, #44	@ 0x2c
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	4611      	mov	r1, r2
 80096a6:	461a      	mov	r2, r3
 80096a8:	460b      	mov	r3, r1
 80096aa:	80fb      	strh	r3, [r7, #6]
 80096ac:	4613      	mov	r3, r2
 80096ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80096b0:	88bb      	ldrh	r3, [r7, #4]
 80096b2:	3301      	adds	r3, #1
 80096b4:	085b      	lsrs	r3, r3, #1
 80096b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096c0:	88fb      	ldrh	r3, [r7, #6]
 80096c2:	005a      	lsls	r2, r3, #1
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80096d2:	e01f      	b.n	8009714 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	3301      	adds	r3, #1
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	b21b      	sxth	r3, r3
 80096e2:	021b      	lsls	r3, r3, #8
 80096e4:	b21a      	sxth	r2, r3
 80096e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	b21b      	sxth	r3, r3
 80096ee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	8a7a      	ldrh	r2, [r7, #18]
 80096f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	3302      	adds	r3, #2
 80096fa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	3302      	adds	r3, #2
 8009700:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	3301      	adds	r3, #1
 8009706:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	3301      	adds	r3, #1
 800970c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800970e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009710:	3b01      	subs	r3, #1
 8009712:	627b      	str	r3, [r7, #36]	@ 0x24
 8009714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1dc      	bne.n	80096d4 <USB_WritePMA+0x3a>
  }
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	372c      	adds	r7, #44	@ 0x2c
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr

08009726 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009726:	b480      	push	{r7}
 8009728:	b08b      	sub	sp, #44	@ 0x2c
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	4611      	mov	r1, r2
 8009732:	461a      	mov	r2, r3
 8009734:	460b      	mov	r3, r1
 8009736:	80fb      	strh	r3, [r7, #6]
 8009738:	4613      	mov	r3, r2
 800973a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800973c:	88bb      	ldrh	r3, [r7, #4]
 800973e:	085b      	lsrs	r3, r3, #1
 8009740:	b29b      	uxth	r3, r3
 8009742:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800974c:	88fb      	ldrh	r3, [r7, #6]
 800974e:	005a      	lsls	r2, r3, #1
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009758:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	627b      	str	r3, [r7, #36]	@ 0x24
 800975e:	e01b      	b.n	8009798 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	b29b      	uxth	r3, r3
 8009766:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	3302      	adds	r3, #2
 800976c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	b2da      	uxtb	r2, r3
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	3301      	adds	r3, #1
 800977a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	0a1b      	lsrs	r3, r3, #8
 8009780:	b2da      	uxtb	r2, r3
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	3301      	adds	r3, #1
 800978a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	3302      	adds	r3, #2
 8009790:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009794:	3b01      	subs	r3, #1
 8009796:	627b      	str	r3, [r7, #36]	@ 0x24
 8009798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e0      	bne.n	8009760 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800979e:	88bb      	ldrh	r3, [r7, #4]
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	701a      	strb	r2, [r3, #0]
  }
}
 80097ba:	bf00      	nop
 80097bc:	372c      	adds	r7, #44	@ 0x2c
 80097be:	46bd      	mov	sp, r7
 80097c0:	bc80      	pop	{r7}
 80097c2:	4770      	bx	lr

080097c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7c1b      	ldrb	r3, [r3, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d115      	bne.n	8009808 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80097dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097e0:	2202      	movs	r2, #2
 80097e2:	2181      	movs	r1, #129	@ 0x81
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 feca 	bl	800b57e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097f4:	2202      	movs	r2, #2
 80097f6:	2101      	movs	r1, #1
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f001 fec0 	bl	800b57e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009806:	e012      	b.n	800982e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009808:	2340      	movs	r3, #64	@ 0x40
 800980a:	2202      	movs	r2, #2
 800980c:	2181      	movs	r1, #129	@ 0x81
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 feb5 	bl	800b57e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800981a:	2340      	movs	r3, #64	@ 0x40
 800981c:	2202      	movs	r2, #2
 800981e:	2101      	movs	r1, #1
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f001 feac 	bl	800b57e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800982e:	2308      	movs	r3, #8
 8009830:	2203      	movs	r2, #3
 8009832:	2182      	movs	r1, #130	@ 0x82
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 fea2 	bl	800b57e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009840:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009844:	f001 ffc2 	bl	800b7cc <USBD_static_malloc>
 8009848:	4602      	mov	r2, r0
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800985a:	2301      	movs	r3, #1
 800985c:	73fb      	strb	r3, [r7, #15]
 800985e:	e026      	b.n	80098ae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009866:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2200      	movs	r2, #0
 8009876:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7c1b      	ldrb	r3, [r3, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009894:	2101      	movs	r1, #1
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f001 ff61 	bl	800b75e <USBD_LL_PrepareReceive>
 800989c:	e007      	b.n	80098ae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098a4:	2340      	movs	r3, #64	@ 0x40
 80098a6:	2101      	movs	r1, #1
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 ff58 	bl	800b75e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80098c8:	2181      	movs	r1, #129	@ 0x81
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f001 fe7d 	bl	800b5ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80098d6:	2101      	movs	r1, #1
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 fe76 	bl	800b5ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80098e6:	2182      	movs	r1, #130	@ 0x82
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 fe6e 	bl	800b5ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00e      	beq.n	800991c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800990e:	4618      	mov	r0, r3
 8009910:	f001 ff68 	bl	800b7e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b086      	sub	sp, #24
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009936:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800994c:	2b00      	cmp	r3, #0
 800994e:	d039      	beq.n	80099c4 <USBD_CDC_Setup+0x9e>
 8009950:	2b20      	cmp	r3, #32
 8009952:	d17f      	bne.n	8009a54 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	88db      	ldrh	r3, [r3, #6]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d029      	beq.n	80099b0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	b25b      	sxtb	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	da11      	bge.n	800998a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009972:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	88d2      	ldrh	r2, [r2, #6]
 8009978:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800997a:	6939      	ldr	r1, [r7, #16]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	88db      	ldrh	r3, [r3, #6]
 8009980:	461a      	mov	r2, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f001 fa06 	bl	800ad94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009988:	e06b      	b.n	8009a62 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	785a      	ldrb	r2, [r3, #1]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	88db      	ldrh	r3, [r3, #6]
 8009998:	b2da      	uxtb	r2, r3
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80099a0:	6939      	ldr	r1, [r7, #16]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	88db      	ldrh	r3, [r3, #6]
 80099a6:	461a      	mov	r2, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 fa21 	bl	800adf0 <USBD_CtlPrepareRx>
      break;
 80099ae:	e058      	b.n	8009a62 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	7850      	ldrb	r0, [r2, #1]
 80099bc:	2200      	movs	r2, #0
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	4798      	blx	r3
      break;
 80099c2:	e04e      	b.n	8009a62 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b0b      	cmp	r3, #11
 80099ca:	d02e      	beq.n	8009a2a <USBD_CDC_Setup+0x104>
 80099cc:	2b0b      	cmp	r3, #11
 80099ce:	dc38      	bgt.n	8009a42 <USBD_CDC_Setup+0x11c>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <USBD_CDC_Setup+0xb4>
 80099d4:	2b0a      	cmp	r3, #10
 80099d6:	d014      	beq.n	8009a02 <USBD_CDC_Setup+0xdc>
 80099d8:	e033      	b.n	8009a42 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d107      	bne.n	80099f4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80099e4:	f107 030c 	add.w	r3, r7, #12
 80099e8:	2202      	movs	r2, #2
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f001 f9d1 	bl	800ad94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099f2:	e02e      	b.n	8009a52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 f962 	bl	800acc0 <USBD_CtlError>
            ret = USBD_FAIL;
 80099fc:	2302      	movs	r3, #2
 80099fe:	75fb      	strb	r3, [r7, #23]
          break;
 8009a00:	e027      	b.n	8009a52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d107      	bne.n	8009a1c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a0c:	f107 030f 	add.w	r3, r7, #15
 8009a10:	2201      	movs	r2, #1
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 f9bd 	bl	800ad94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a1a:	e01a      	b.n	8009a52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 f94e 	bl	800acc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a24:	2302      	movs	r3, #2
 8009a26:	75fb      	strb	r3, [r7, #23]
          break;
 8009a28:	e013      	b.n	8009a52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d00d      	beq.n	8009a50 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 f942 	bl	800acc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a40:	e006      	b.n	8009a50 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f001 f93b 	bl	800acc0 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a4e:	e000      	b.n	8009a52 <USBD_CDC_Setup+0x12c>
          break;
 8009a50:	bf00      	nop
      }
      break;
 8009a52:	e006      	b.n	8009a62 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 f932 	bl	800acc0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a60:	bf00      	nop
  }

  return ret;
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a86:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d03a      	beq.n	8009b08 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	440b      	add	r3, r1
 8009aa0:	331c      	adds	r3, #28
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d029      	beq.n	8009afc <USBD_CDC_DataIn+0x90>
 8009aa8:	78fa      	ldrb	r2, [r7, #3]
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	331c      	adds	r3, #28
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	78f9      	ldrb	r1, [r7, #3]
 8009abc:	68b8      	ldr	r0, [r7, #8]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	00db      	lsls	r3, r3, #3
 8009ac6:	4403      	add	r3, r0
 8009ac8:	3320      	adds	r3, #32
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ad0:	fb01 f303 	mul.w	r3, r1, r3
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d110      	bne.n	8009afc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	6879      	ldr	r1, [r7, #4]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	331c      	adds	r3, #28
 8009aea:	2200      	movs	r2, #0
 8009aec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009aee:	78f9      	ldrb	r1, [r7, #3]
 8009af0:	2300      	movs	r3, #0
 8009af2:	2200      	movs	r2, #0
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 fe0f 	bl	800b718 <USBD_LL_Transmit>
 8009afa:	e003      	b.n	8009b04 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	e000      	b.n	8009b0a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009b08:	2302      	movs	r3, #2
  }
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f001 fe3a 	bl	800b7a4 <USBD_LL_GetRxDataSize>
 8009b30:	4602      	mov	r2, r0
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00d      	beq.n	8009b5e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009b56:	4611      	mov	r1, r2
 8009b58:	4798      	blx	r3

    return USBD_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e000      	b.n	8009b60 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009b5e:	2302      	movs	r3, #2
  }
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b76:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d014      	beq.n	8009bac <USBD_CDC_EP0_RxReady+0x44>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009b88:	2bff      	cmp	r3, #255	@ 0xff
 8009b8a:	d00f      	beq.n	8009bac <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009b9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ba2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	22ff      	movs	r2, #255	@ 0xff
 8009ba8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2243      	movs	r2, #67	@ 0x43
 8009bc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009bc6:	4b03      	ldr	r3, [pc, #12]	@ (8009bd4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20000094 	.word	0x20000094

08009bd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2243      	movs	r2, #67	@ 0x43
 8009be4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009be6:	4b03      	ldr	r3, [pc, #12]	@ (8009bf4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bc80      	pop	{r7}
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20000050 	.word	0x20000050

08009bf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2243      	movs	r2, #67	@ 0x43
 8009c04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009c06:	4b03      	ldr	r3, [pc, #12]	@ (8009c14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bc80      	pop	{r7}
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	200000d8 	.word	0x200000d8

08009c18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	220a      	movs	r2, #10
 8009c24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009c26:	4b03      	ldr	r3, [pc, #12]	@ (8009c34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bc80      	pop	{r7}
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	2000000c 	.word	0x2000000c

08009c38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009c42:	2302      	movs	r3, #2
 8009c44:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d005      	beq.n	8009c58 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bc80      	pop	{r7}
 8009c62:	4770      	bx	lr

08009c64 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c78:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c82:	88fa      	ldrh	r2, [r7, #6]
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	371c      	adds	r7, #28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr

08009c96 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b085      	sub	sp, #20
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr

08009cbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d01c      	beq.n	8009d10 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d115      	bne.n	8009d0c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	2181      	movs	r1, #129	@ 0x81
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fd08 	bl	800b718 <USBD_LL_Transmit>

      return USBD_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	e002      	b.n	8009d12 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e000      	b.n	8009d12 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009d10:	2302      	movs	r3, #2
  }
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d28:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d017      	beq.n	8009d64 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	7c1b      	ldrb	r3, [r3, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d109      	bne.n	8009d50 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d46:	2101      	movs	r1, #1
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fd08 	bl	800b75e <USBD_LL_PrepareReceive>
 8009d4e:	e007      	b.n	8009d60 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d56:	2340      	movs	r3, #64	@ 0x40
 8009d58:	2101      	movs	r1, #1
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 fcff 	bl	800b75e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	e000      	b.n	8009d66 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009d64:	2302      	movs	r3, #2
  }
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d82:	2302      	movs	r3, #2
 8009d84:	e01a      	b.n	8009dbc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	79fa      	ldrb	r2, [r7, #7]
 8009db2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f001 fb6d 	bl	800b494 <USBD_LL_Init>

  return USBD_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d006      	beq.n	8009de6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
 8009de4:	e001      	b.n	8009dea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009de6:	2302      	movs	r3, #2
 8009de8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bc80      	pop	{r7}
 8009df4:	4770      	bx	lr

08009df6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f001 fba2 	bl	800b548 <USBD_LL_Start>

  return USBD_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr

08009e22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009e2e:	2302      	movs	r3, #2
 8009e30:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00c      	beq.n	8009e56 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	78fa      	ldrb	r2, [r7, #3]
 8009e46:	4611      	mov	r1, r2
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4798      	blx	r3
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	78fa      	ldrb	r2, [r7, #3]
 8009e76:	4611      	mov	r1, r2
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	4798      	blx	r3

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fed8 	bl	800ac4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009eac:	461a      	mov	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009eba:	f003 031f 	and.w	r3, r3, #31
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d016      	beq.n	8009ef0 <USBD_LL_SetupStage+0x6a>
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d81c      	bhi.n	8009f00 <USBD_LL_SetupStage+0x7a>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <USBD_LL_SetupStage+0x4a>
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d008      	beq.n	8009ee0 <USBD_LL_SetupStage+0x5a>
 8009ece:	e017      	b.n	8009f00 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f9cb 	bl	800a274 <USBD_StdDevReq>
      break;
 8009ede:	e01a      	b.n	8009f16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa2d 	bl	800a348 <USBD_StdItfReq>
      break;
 8009eee:	e012      	b.n	8009f16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa6d 	bl	800a3d8 <USBD_StdEPReq>
      break;
 8009efe:	e00a      	b.n	8009f16 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009f06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 fb7a 	bl	800b608 <USBD_LL_StallEP>
      break;
 8009f14:	bf00      	nop
  }

  return USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d14b      	bne.n	8009fcc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009f3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d134      	bne.n	8009fb0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d919      	bls.n	8009f86 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	1ad2      	subs	r2, r2, r3
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	68da      	ldr	r2, [r3, #12]
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d203      	bcs.n	8009f74 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	e002      	b.n	8009f7a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 ff54 	bl	800ae2c <USBD_CtlContinueRx>
 8009f84:	e038      	b.n	8009ff8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d105      	bne.n	8009fa8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 ff51 	bl	800ae50 <USBD_CtlSendStatus>
 8009fae:	e023      	b.n	8009ff8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009fb6:	2b05      	cmp	r3, #5
 8009fb8:	d11e      	bne.n	8009ff8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f001 fb1f 	bl	800b608 <USBD_LL_StallEP>
 8009fca:	e015      	b.n	8009ff8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00d      	beq.n	8009ff4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d108      	bne.n	8009ff4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	7afa      	ldrb	r2, [r7, #11]
 8009fec:	4611      	mov	r1, r2
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	4798      	blx	r3
 8009ff2:	e001      	b.n	8009ff8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e000      	b.n	8009ffa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	460b      	mov	r3, r1
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d17f      	bne.n	800a116 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3314      	adds	r3, #20
 800a01a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a022:	2b02      	cmp	r3, #2
 800a024:	d15c      	bne.n	800a0e0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	68da      	ldr	r2, [r3, #12]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d915      	bls.n	800a05e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	1ad2      	subs	r2, r2, r3
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	b29b      	uxth	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f000 febe 	bl	800adcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a050:	2300      	movs	r3, #0
 800a052:	2200      	movs	r2, #0
 800a054:	2100      	movs	r1, #0
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f001 fb81 	bl	800b75e <USBD_LL_PrepareReceive>
 800a05c:	e04e      	b.n	800a0fc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	6912      	ldr	r2, [r2, #16]
 800a066:	fbb3 f1f2 	udiv	r1, r3, r2
 800a06a:	fb01 f202 	mul.w	r2, r1, r2
 800a06e:	1a9b      	subs	r3, r3, r2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d11c      	bne.n	800a0ae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d316      	bcc.n	800a0ae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	689a      	ldr	r2, [r3, #8]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d20f      	bcs.n	800a0ae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a08e:	2200      	movs	r2, #0
 800a090:	2100      	movs	r1, #0
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f000 fe9a 	bl	800adcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f001 fb59 	bl	800b75e <USBD_LL_PrepareReceive>
 800a0ac:	e026      	b.n	800a0fc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d105      	bne.n	800a0d0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a0d0:	2180      	movs	r1, #128	@ 0x80
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f001 fa98 	bl	800b608 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 fecc 	bl	800ae76 <USBD_CtlReceiveStatus>
 800a0de:	e00d      	b.n	800a0fc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d004      	beq.n	800a0f4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a0f4:	2180      	movs	r1, #128	@ 0x80
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f001 fa86 	bl	800b608 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a102:	2b01      	cmp	r3, #1
 800a104:	d11d      	bne.n	800a142 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fe81 	bl	8009e0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a114:	e015      	b.n	800a142 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00d      	beq.n	800a13e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d108      	bne.n	800a13e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	7afa      	ldrb	r2, [r7, #11]
 800a136:	4611      	mov	r1, r2
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	4798      	blx	r3
 800a13c:	e001      	b.n	800a142 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a13e:	2302      	movs	r3, #2
 800a140:	e000      	b.n	800a144 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a154:	2340      	movs	r3, #64	@ 0x40
 800a156:	2200      	movs	r2, #0
 800a158:	2100      	movs	r1, #0
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 fa0f 	bl	800b57e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2240      	movs	r2, #64	@ 0x40
 800a16c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a170:	2340      	movs	r3, #64	@ 0x40
 800a172:	2200      	movs	r2, #0
 800a174:	2180      	movs	r1, #128	@ 0x80
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f001 fa01 	bl	800b57e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2240      	movs	r2, #64	@ 0x40
 800a186:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d009      	beq.n	800a1c4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	6852      	ldr	r2, [r2, #4]
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	4611      	mov	r1, r2
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	4798      	blx	r3
  }

  return USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	78fa      	ldrb	r2, [r7, #3]
 800a1de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bc80      	pop	{r7}
 800a1ea:	4770      	bx	lr

0800a1ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2204      	movs	r2, #4
 800a204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	bc80      	pop	{r7}
 800a212:	4770      	bx	lr

0800a214 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a222:	2b04      	cmp	r3, #4
 800a224:	d105      	bne.n	800a232 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	bc80      	pop	{r7}
 800a23c:	4770      	bx	lr

0800a23e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d10b      	bne.n	800a268 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a28a:	2b40      	cmp	r3, #64	@ 0x40
 800a28c:	d005      	beq.n	800a29a <USBD_StdDevReq+0x26>
 800a28e:	2b40      	cmp	r3, #64	@ 0x40
 800a290:	d84f      	bhi.n	800a332 <USBD_StdDevReq+0xbe>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d009      	beq.n	800a2aa <USBD_StdDevReq+0x36>
 800a296:	2b20      	cmp	r3, #32
 800a298:	d14b      	bne.n	800a332 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	4798      	blx	r3
      break;
 800a2a8:	e048      	b.n	800a33c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	2b09      	cmp	r3, #9
 800a2b0:	d839      	bhi.n	800a326 <USBD_StdDevReq+0xb2>
 800a2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b8 <USBD_StdDevReq+0x44>)
 800a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b8:	0800a309 	.word	0x0800a309
 800a2bc:	0800a31d 	.word	0x0800a31d
 800a2c0:	0800a327 	.word	0x0800a327
 800a2c4:	0800a313 	.word	0x0800a313
 800a2c8:	0800a327 	.word	0x0800a327
 800a2cc:	0800a2eb 	.word	0x0800a2eb
 800a2d0:	0800a2e1 	.word	0x0800a2e1
 800a2d4:	0800a327 	.word	0x0800a327
 800a2d8:	0800a2ff 	.word	0x0800a2ff
 800a2dc:	0800a2f5 	.word	0x0800a2f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f9dc 	bl	800a6a0 <USBD_GetDescriptor>
          break;
 800a2e8:	e022      	b.n	800a330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fb3f 	bl	800a970 <USBD_SetAddress>
          break;
 800a2f2:	e01d      	b.n	800a330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fb7e 	bl	800a9f8 <USBD_SetConfig>
          break;
 800a2fc:	e018      	b.n	800a330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fc07 	bl	800ab14 <USBD_GetConfig>
          break;
 800a306:	e013      	b.n	800a330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fc37 	bl	800ab7e <USBD_GetStatus>
          break;
 800a310:	e00e      	b.n	800a330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fc65 	bl	800abe4 <USBD_SetFeature>
          break;
 800a31a:	e009      	b.n	800a330 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fc74 	bl	800ac0c <USBD_ClrFeature>
          break;
 800a324:	e004      	b.n	800a330 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fcc9 	bl	800acc0 <USBD_CtlError>
          break;
 800a32e:	bf00      	nop
      }
      break;
 800a330:	e004      	b.n	800a33c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fcc3 	bl	800acc0 <USBD_CtlError>
      break;
 800a33a:	bf00      	nop
  }

  return ret;
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop

0800a348 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a35e:	2b40      	cmp	r3, #64	@ 0x40
 800a360:	d005      	beq.n	800a36e <USBD_StdItfReq+0x26>
 800a362:	2b40      	cmp	r3, #64	@ 0x40
 800a364:	d82e      	bhi.n	800a3c4 <USBD_StdItfReq+0x7c>
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <USBD_StdItfReq+0x26>
 800a36a:	2b20      	cmp	r3, #32
 800a36c:	d12a      	bne.n	800a3c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a374:	3b01      	subs	r3, #1
 800a376:	2b02      	cmp	r3, #2
 800a378:	d81d      	bhi.n	800a3b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	889b      	ldrh	r3, [r3, #4]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b01      	cmp	r3, #1
 800a382:	d813      	bhi.n	800a3ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
 800a392:	4603      	mov	r3, r0
 800a394:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d110      	bne.n	800a3c0 <USBD_StdItfReq+0x78>
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10d      	bne.n	800a3c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fd53 	bl	800ae50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a3aa:	e009      	b.n	800a3c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fc86 	bl	800acc0 <USBD_CtlError>
          break;
 800a3b4:	e004      	b.n	800a3c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fc81 	bl	800acc0 <USBD_CtlError>
          break;
 800a3be:	e000      	b.n	800a3c2 <USBD_StdItfReq+0x7a>
          break;
 800a3c0:	bf00      	nop
      }
      break;
 800a3c2:	e004      	b.n	800a3ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fc7a 	bl	800acc0 <USBD_CtlError>
      break;
 800a3cc:	bf00      	nop
  }

  return USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	889b      	ldrh	r3, [r3, #4]
 800a3ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3f4:	2b40      	cmp	r3, #64	@ 0x40
 800a3f6:	d007      	beq.n	800a408 <USBD_StdEPReq+0x30>
 800a3f8:	2b40      	cmp	r3, #64	@ 0x40
 800a3fa:	f200 8146 	bhi.w	800a68a <USBD_StdEPReq+0x2b2>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00a      	beq.n	800a418 <USBD_StdEPReq+0x40>
 800a402:	2b20      	cmp	r3, #32
 800a404:	f040 8141 	bne.w	800a68a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	4798      	blx	r3
      break;
 800a416:	e13d      	b.n	800a694 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a420:	2b20      	cmp	r3, #32
 800a422:	d10a      	bne.n	800a43a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	4798      	blx	r3
 800a432:	4603      	mov	r3, r0
 800a434:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	e12d      	b.n	800a696 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d007      	beq.n	800a452 <USBD_StdEPReq+0x7a>
 800a442:	2b03      	cmp	r3, #3
 800a444:	f300 811b 	bgt.w	800a67e <USBD_StdEPReq+0x2a6>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d072      	beq.n	800a532 <USBD_StdEPReq+0x15a>
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d03a      	beq.n	800a4c6 <USBD_StdEPReq+0xee>
 800a450:	e115      	b.n	800a67e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d002      	beq.n	800a462 <USBD_StdEPReq+0x8a>
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d015      	beq.n	800a48c <USBD_StdEPReq+0xb4>
 800a460:	e02b      	b.n	800a4ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00c      	beq.n	800a482 <USBD_StdEPReq+0xaa>
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b80      	cmp	r3, #128	@ 0x80
 800a46c:	d009      	beq.n	800a482 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f001 f8c8 	bl	800b608 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a478:	2180      	movs	r1, #128	@ 0x80
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 f8c4 	bl	800b608 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a480:	e020      	b.n	800a4c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fc1b 	bl	800acc0 <USBD_CtlError>
              break;
 800a48a:	e01b      	b.n	800a4c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	885b      	ldrh	r3, [r3, #2]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10e      	bne.n	800a4b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a494:	7bbb      	ldrb	r3, [r7, #14]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00b      	beq.n	800a4b2 <USBD_StdEPReq+0xda>
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b80      	cmp	r3, #128	@ 0x80
 800a49e:	d008      	beq.n	800a4b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	88db      	ldrh	r3, [r3, #6]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d104      	bne.n	800a4b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f001 f8ab 	bl	800b608 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fccc 	bl	800ae50 <USBD_CtlSendStatus>

              break;
 800a4b8:	e004      	b.n	800a4c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fbff 	bl	800acc0 <USBD_CtlError>
              break;
 800a4c2:	bf00      	nop
          }
          break;
 800a4c4:	e0e0      	b.n	800a688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d002      	beq.n	800a4d6 <USBD_StdEPReq+0xfe>
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d015      	beq.n	800a500 <USBD_StdEPReq+0x128>
 800a4d4:	e026      	b.n	800a524 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00c      	beq.n	800a4f6 <USBD_StdEPReq+0x11e>
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	2b80      	cmp	r3, #128	@ 0x80
 800a4e0:	d009      	beq.n	800a4f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f001 f88e 	bl	800b608 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a4ec:	2180      	movs	r1, #128	@ 0x80
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 f88a 	bl	800b608 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4f4:	e01c      	b.n	800a530 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fbe1 	bl	800acc0 <USBD_CtlError>
              break;
 800a4fe:	e017      	b.n	800a530 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	885b      	ldrh	r3, [r3, #2]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d112      	bne.n	800a52e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f001 f895 	bl	800b646 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fc97 	bl	800ae50 <USBD_CtlSendStatus>
              }
              break;
 800a522:	e004      	b.n	800a52e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fbca 	bl	800acc0 <USBD_CtlError>
              break;
 800a52c:	e000      	b.n	800a530 <USBD_StdEPReq+0x158>
              break;
 800a52e:	bf00      	nop
          }
          break;
 800a530:	e0aa      	b.n	800a688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d002      	beq.n	800a542 <USBD_StdEPReq+0x16a>
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d032      	beq.n	800a5a6 <USBD_StdEPReq+0x1ce>
 800a540:	e097      	b.n	800a672 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d007      	beq.n	800a558 <USBD_StdEPReq+0x180>
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	2b80      	cmp	r3, #128	@ 0x80
 800a54c:	d004      	beq.n	800a558 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fbb5 	bl	800acc0 <USBD_CtlError>
                break;
 800a556:	e091      	b.n	800a67c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	da0b      	bge.n	800a578 <USBD_StdEPReq+0x1a0>
 800a560:	7bbb      	ldrb	r3, [r7, #14]
 800a562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	3310      	adds	r3, #16
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	4413      	add	r3, r2
 800a574:	3304      	adds	r3, #4
 800a576:	e00b      	b.n	800a590 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	4413      	add	r3, r2
 800a58e:	3304      	adds	r3, #4
 800a590:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2202      	movs	r2, #2
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fbf8 	bl	800ad94 <USBD_CtlSendData>
              break;
 800a5a4:	e06a      	b.n	800a67c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	da11      	bge.n	800a5d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	f003 020f 	and.w	r2, r3, #15
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	440b      	add	r3, r1
 800a5c0:	3318      	adds	r3, #24
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d117      	bne.n	800a5f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fb78 	bl	800acc0 <USBD_CtlError>
                  break;
 800a5d0:	e054      	b.n	800a67c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	f003 020f 	and.w	r2, r3, #15
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	440b      	add	r3, r1
 800a5e4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d104      	bne.n	800a5f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fb65 	bl	800acc0 <USBD_CtlError>
                  break;
 800a5f6:	e041      	b.n	800a67c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	da0b      	bge.n	800a618 <USBD_StdEPReq+0x240>
 800a600:	7bbb      	ldrb	r3, [r7, #14]
 800a602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	3310      	adds	r3, #16
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	4413      	add	r3, r2
 800a614:	3304      	adds	r3, #4
 800a616:	e00b      	b.n	800a630 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	4413      	add	r3, r2
 800a62e:	3304      	adds	r3, #4
 800a630:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a632:	7bbb      	ldrb	r3, [r7, #14]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d002      	beq.n	800a63e <USBD_StdEPReq+0x266>
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b80      	cmp	r3, #128	@ 0x80
 800a63c:	d103      	bne.n	800a646 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	e00e      	b.n	800a664 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	4619      	mov	r1, r3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 f81a 	bl	800b684 <USBD_LL_IsStallEP>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d003      	beq.n	800a65e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2201      	movs	r2, #1
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	e002      	b.n	800a664 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2202      	movs	r2, #2
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fb92 	bl	800ad94 <USBD_CtlSendData>
              break;
 800a670:	e004      	b.n	800a67c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fb23 	bl	800acc0 <USBD_CtlError>
              break;
 800a67a:	bf00      	nop
          }
          break;
 800a67c:	e004      	b.n	800a688 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fb1d 	bl	800acc0 <USBD_CtlError>
          break;
 800a686:	bf00      	nop
      }
      break;
 800a688:	e004      	b.n	800a694 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fb17 	bl	800acc0 <USBD_CtlError>
      break;
 800a692:	bf00      	nop
  }

  return ret;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	885b      	ldrh	r3, [r3, #2]
 800a6ba:	0a1b      	lsrs	r3, r3, #8
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	2b06      	cmp	r3, #6
 800a6c2:	f200 8128 	bhi.w	800a916 <USBD_GetDescriptor+0x276>
 800a6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <USBD_GetDescriptor+0x2c>)
 800a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6cc:	0800a6e9 	.word	0x0800a6e9
 800a6d0:	0800a701 	.word	0x0800a701
 800a6d4:	0800a741 	.word	0x0800a741
 800a6d8:	0800a917 	.word	0x0800a917
 800a6dc:	0800a917 	.word	0x0800a917
 800a6e0:	0800a8b7 	.word	0x0800a8b7
 800a6e4:	0800a8e3 	.word	0x0800a8e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	7c12      	ldrb	r2, [r2, #16]
 800a6f4:	f107 0108 	add.w	r1, r7, #8
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4798      	blx	r3
 800a6fc:	60f8      	str	r0, [r7, #12]
      break;
 800a6fe:	e112      	b.n	800a926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	7c1b      	ldrb	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10d      	bne.n	800a724 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a710:	f107 0208 	add.w	r2, r7, #8
 800a714:	4610      	mov	r0, r2
 800a716:	4798      	blx	r3
 800a718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3301      	adds	r3, #1
 800a71e:	2202      	movs	r2, #2
 800a720:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a722:	e100      	b.n	800a926 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72c:	f107 0208 	add.w	r2, r7, #8
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
 800a734:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3301      	adds	r3, #1
 800a73a:	2202      	movs	r2, #2
 800a73c:	701a      	strb	r2, [r3, #0]
      break;
 800a73e:	e0f2      	b.n	800a926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	885b      	ldrh	r3, [r3, #2]
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b05      	cmp	r3, #5
 800a748:	f200 80ac 	bhi.w	800a8a4 <USBD_GetDescriptor+0x204>
 800a74c:	a201      	add	r2, pc, #4	@ (adr r2, 800a754 <USBD_GetDescriptor+0xb4>)
 800a74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a752:	bf00      	nop
 800a754:	0800a76d 	.word	0x0800a76d
 800a758:	0800a7a1 	.word	0x0800a7a1
 800a75c:	0800a7d5 	.word	0x0800a7d5
 800a760:	0800a809 	.word	0x0800a809
 800a764:	0800a83d 	.word	0x0800a83d
 800a768:	0800a871 	.word	0x0800a871
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00b      	beq.n	800a790 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	7c12      	ldrb	r2, [r2, #16]
 800a784:	f107 0108 	add.w	r1, r7, #8
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
 800a78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a78e:	e091      	b.n	800a8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fa94 	bl	800acc0 <USBD_CtlError>
            err++;
 800a798:	7afb      	ldrb	r3, [r7, #11]
 800a79a:	3301      	adds	r3, #1
 800a79c:	72fb      	strb	r3, [r7, #11]
          break;
 800a79e:	e089      	b.n	800a8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00b      	beq.n	800a7c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	7c12      	ldrb	r2, [r2, #16]
 800a7b8:	f107 0108 	add.w	r1, r7, #8
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4798      	blx	r3
 800a7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c2:	e077      	b.n	800a8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fa7a 	bl	800acc0 <USBD_CtlError>
            err++;
 800a7cc:	7afb      	ldrb	r3, [r7, #11]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7d2:	e06f      	b.n	800a8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	7c12      	ldrb	r2, [r2, #16]
 800a7ec:	f107 0108 	add.w	r1, r7, #8
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7f6:	e05d      	b.n	800a8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fa60 	bl	800acc0 <USBD_CtlError>
            err++;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	3301      	adds	r3, #1
 800a804:	72fb      	strb	r3, [r7, #11]
          break;
 800a806:	e055      	b.n	800a8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	7c12      	ldrb	r2, [r2, #16]
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
 800a828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a82a:	e043      	b.n	800a8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa46 	bl	800acc0 <USBD_CtlError>
            err++;
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	3301      	adds	r3, #1
 800a838:	72fb      	strb	r3, [r7, #11]
          break;
 800a83a:	e03b      	b.n	800a8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	7c12      	ldrb	r2, [r2, #16]
 800a854:	f107 0108 	add.w	r1, r7, #8
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
 800a85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a85e:	e029      	b.n	800a8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa2c 	bl	800acc0 <USBD_CtlError>
            err++;
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	3301      	adds	r3, #1
 800a86c:	72fb      	strb	r3, [r7, #11]
          break;
 800a86e:	e021      	b.n	800a8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	7c12      	ldrb	r2, [r2, #16]
 800a888:	f107 0108 	add.w	r1, r7, #8
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
 800a890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a892:	e00f      	b.n	800a8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa12 	bl	800acc0 <USBD_CtlError>
            err++;
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8a2:	e007      	b.n	800a8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa0a 	bl	800acc0 <USBD_CtlError>
          err++;
 800a8ac:	7afb      	ldrb	r3, [r7, #11]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a8b2:	e038      	b.n	800a926 <USBD_GetDescriptor+0x286>
 800a8b4:	e037      	b.n	800a926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	7c1b      	ldrb	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c6:	f107 0208 	add.w	r2, r7, #8
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	4798      	blx	r3
 800a8ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8d0:	e029      	b.n	800a926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f9f3 	bl	800acc0 <USBD_CtlError>
        err++;
 800a8da:	7afb      	ldrb	r3, [r7, #11]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e0:	e021      	b.n	800a926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	7c1b      	ldrb	r3, [r3, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10d      	bne.n	800a906 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f2:	f107 0208 	add.w	r2, r7, #8
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	4798      	blx	r3
 800a8fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3301      	adds	r3, #1
 800a900:	2207      	movs	r2, #7
 800a902:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a904:	e00f      	b.n	800a926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f9d9 	bl	800acc0 <USBD_CtlError>
        err++;
 800a90e:	7afb      	ldrb	r3, [r7, #11]
 800a910:	3301      	adds	r3, #1
 800a912:	72fb      	strb	r3, [r7, #11]
      break;
 800a914:	e007      	b.n	800a926 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f9d1 	bl	800acc0 <USBD_CtlError>
      err++;
 800a91e:	7afb      	ldrb	r3, [r7, #11]
 800a920:	3301      	adds	r3, #1
 800a922:	72fb      	strb	r3, [r7, #11]
      break;
 800a924:	bf00      	nop
  }

  if (err != 0U)
 800a926:	7afb      	ldrb	r3, [r7, #11]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d11c      	bne.n	800a966 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a92c:	893b      	ldrh	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d011      	beq.n	800a956 <USBD_GetDescriptor+0x2b6>
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	88db      	ldrh	r3, [r3, #6]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00d      	beq.n	800a956 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	88da      	ldrh	r2, [r3, #6]
 800a93e:	893b      	ldrh	r3, [r7, #8]
 800a940:	4293      	cmp	r3, r2
 800a942:	bf28      	it	cs
 800a944:	4613      	movcs	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a94a:	893b      	ldrh	r3, [r7, #8]
 800a94c:	461a      	mov	r2, r3
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fa1f 	bl	800ad94 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	88db      	ldrh	r3, [r3, #6]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa76 	bl	800ae50 <USBD_CtlSendStatus>
 800a964:	e000      	b.n	800a968 <USBD_GetDescriptor+0x2c8>
    return;
 800a966:	bf00      	nop
    }
  }
}
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop

0800a970 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	889b      	ldrh	r3, [r3, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d130      	bne.n	800a9e4 <USBD_SetAddress+0x74>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	88db      	ldrh	r3, [r3, #6]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d12c      	bne.n	800a9e4 <USBD_SetAddress+0x74>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	885b      	ldrh	r3, [r3, #2]
 800a98e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a990:	d828      	bhi.n	800a9e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	885b      	ldrh	r3, [r3, #2]
 800a996:	b2db      	uxtb	r3, r3
 800a998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a99c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d104      	bne.n	800a9b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f988 	bl	800acc0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b0:	e01d      	b.n	800a9ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	7bfa      	ldrb	r2, [r7, #15]
 800a9b6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fe8b 	bl	800b6da <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fa43 	bl	800ae50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d8:	e009      	b.n	800a9ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e2:	e004      	b.n	800a9ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f96a 	bl	800acc0 <USBD_CtlError>
  }
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	885b      	ldrh	r3, [r3, #2]
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	4b41      	ldr	r3, [pc, #260]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aa0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa0c:	4b40      	ldr	r3, [pc, #256]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d904      	bls.n	800aa1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f952 	bl	800acc0 <USBD_CtlError>
 800aa1c:	e075      	b.n	800ab0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d002      	beq.n	800aa2e <USBD_SetConfig+0x36>
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d023      	beq.n	800aa74 <USBD_SetConfig+0x7c>
 800aa2c:	e062      	b.n	800aaf4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aa2e:	4b38      	ldr	r3, [pc, #224]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d01a      	beq.n	800aa6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aa36:	4b36      	ldr	r3, [pc, #216]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2203      	movs	r2, #3
 800aa44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa48:	4b31      	ldr	r3, [pc, #196]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7ff f9e7 	bl	8009e22 <USBD_SetClassConfig>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d104      	bne.n	800aa64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f92f 	bl	800acc0 <USBD_CtlError>
            return;
 800aa62:	e052      	b.n	800ab0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f9f3 	bl	800ae50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa6a:	e04e      	b.n	800ab0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f9ef 	bl	800ae50 <USBD_CtlSendStatus>
        break;
 800aa72:	e04a      	b.n	800ab0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aa74:	4b26      	ldr	r3, [pc, #152]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d112      	bne.n	800aaa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800aa84:	4b22      	ldr	r3, [pc, #136]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa8e:	4b20      	ldr	r3, [pc, #128]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7ff f9e3 	bl	8009e60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f9d8 	bl	800ae50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aaa0:	e033      	b.n	800ab0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800aaa2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d01d      	beq.n	800aaec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff f9d1 	bl	8009e60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aabe:	4b14      	ldr	r3, [pc, #80]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aac8:	4b11      	ldr	r3, [pc, #68]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff f9a7 	bl	8009e22 <USBD_SetClassConfig>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d104      	bne.n	800aae4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f8ef 	bl	800acc0 <USBD_CtlError>
            return;
 800aae2:	e012      	b.n	800ab0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f9b3 	bl	800ae50 <USBD_CtlSendStatus>
        break;
 800aaea:	e00e      	b.n	800ab0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f9af 	bl	800ae50 <USBD_CtlSendStatus>
        break;
 800aaf2:	e00a      	b.n	800ab0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f8e2 	bl	800acc0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aafc:	4b04      	ldr	r3, [pc, #16]	@ (800ab10 <USBD_SetConfig+0x118>)
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff f9ac 	bl	8009e60 <USBD_ClrClassConfig>
        break;
 800ab08:	bf00      	nop
    }
  }
}
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	20000584 	.word	0x20000584

0800ab14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	88db      	ldrh	r3, [r3, #6]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d004      	beq.n	800ab30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f8c9 	bl	800acc0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab2e:	e022      	b.n	800ab76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	dc02      	bgt.n	800ab40 <USBD_GetConfig+0x2c>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dc03      	bgt.n	800ab46 <USBD_GetConfig+0x32>
 800ab3e:	e015      	b.n	800ab6c <USBD_GetConfig+0x58>
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d00b      	beq.n	800ab5c <USBD_GetConfig+0x48>
 800ab44:	e012      	b.n	800ab6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3308      	adds	r3, #8
 800ab50:	2201      	movs	r2, #1
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f91d 	bl	800ad94 <USBD_CtlSendData>
        break;
 800ab5a:	e00c      	b.n	800ab76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	2201      	movs	r2, #1
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f915 	bl	800ad94 <USBD_CtlSendData>
        break;
 800ab6a:	e004      	b.n	800ab76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f8a6 	bl	800acc0 <USBD_CtlError>
        break;
 800ab74:	bf00      	nop
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d81e      	bhi.n	800abd2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	88db      	ldrh	r3, [r3, #6]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d004      	beq.n	800aba6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f88e 	bl	800acc0 <USBD_CtlError>
        break;
 800aba4:	e01a      	b.n	800abdc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f043 0202 	orr.w	r2, r3, #2
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	330c      	adds	r3, #12
 800abc6:	2202      	movs	r2, #2
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f8e2 	bl	800ad94 <USBD_CtlSendData>
      break;
 800abd0:	e004      	b.n	800abdc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f873 	bl	800acc0 <USBD_CtlError>
      break;
 800abda:	bf00      	nop
  }
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d106      	bne.n	800ac04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f926 	bl	800ae50 <USBD_CtlSendStatus>
  }
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d80b      	bhi.n	800ac3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	885b      	ldrh	r3, [r3, #2]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d10c      	bne.n	800ac44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f90c 	bl	800ae50 <USBD_CtlSendStatus>
      }
      break;
 800ac38:	e004      	b.n	800ac44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f83f 	bl	800acc0 <USBD_CtlError>
      break;
 800ac42:	e000      	b.n	800ac46 <USBD_ClrFeature+0x3a>
      break;
 800ac44:	bf00      	nop
  }
}
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b083      	sub	sp, #12
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	781a      	ldrb	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	785a      	ldrb	r2, [r3, #1]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	3302      	adds	r3, #2
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	3303      	adds	r3, #3
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	021b      	lsls	r3, r3, #8
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	3304      	adds	r3, #4
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	3305      	adds	r3, #5
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	4413      	add	r3, r2
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	3306      	adds	r3, #6
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	3307      	adds	r3, #7
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	021b      	lsls	r3, r3, #8
 800acac:	b29b      	uxth	r3, r3
 800acae:	4413      	add	r3, r2
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	80da      	strh	r2, [r3, #6]

}
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	bc80      	pop	{r7}
 800acbe:	4770      	bx	lr

0800acc0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800acca:	2180      	movs	r1, #128	@ 0x80
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fc9b 	bl	800b608 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800acd2:	2100      	movs	r1, #0
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fc97 	bl	800b608 <USBD_LL_StallEP>
}
 800acda:	bf00      	nop
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b086      	sub	sp, #24
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d032      	beq.n	800ad5e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f834 	bl	800ad66 <USBD_GetLen>
 800acfe:	4603      	mov	r3, r0
 800ad00:	3301      	adds	r3, #1
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	75fa      	strb	r2, [r7, #23]
 800ad12:	461a      	mov	r2, r3
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4413      	add	r3, r2
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7812      	ldrb	r2, [r2, #0]
 800ad1c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	75fa      	strb	r2, [r7, #23]
 800ad24:	461a      	mov	r2, r3
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	4413      	add	r3, r2
 800ad2a:	2203      	movs	r2, #3
 800ad2c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ad2e:	e012      	b.n	800ad56 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	60fa      	str	r2, [r7, #12]
 800ad36:	7dfa      	ldrb	r2, [r7, #23]
 800ad38:	1c51      	adds	r1, r2, #1
 800ad3a:	75f9      	strb	r1, [r7, #23]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	440a      	add	r2, r1
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	75fa      	strb	r2, [r7, #23]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	4413      	add	r3, r2
 800ad52:	2200      	movs	r2, #0
 800ad54:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1e8      	bne.n	800ad30 <USBD_GetString+0x4e>
    }
  }
}
 800ad5e:	bf00      	nop
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b085      	sub	sp, #20
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ad72:	e005      	b.n	800ad80 <USBD_GetLen+0x1a>
  {
    len++;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	3301      	adds	r3, #1
 800ad78:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1f5      	bne.n	800ad74 <USBD_GetLen+0xe>
  }

  return len;
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bc80      	pop	{r7}
 800ad92:	4770      	bx	lr

0800ad94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2202      	movs	r2, #2
 800ada6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800adaa:	88fa      	ldrh	r2, [r7, #6]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800adb0:	88fa      	ldrh	r2, [r7, #6]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adb6:	88fb      	ldrh	r3, [r7, #6]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	2100      	movs	r1, #0
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 fcab 	bl	800b718 <USBD_LL_Transmit>

  return USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	4613      	mov	r3, r2
 800add8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adda:	88fb      	ldrh	r3, [r7, #6]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	2100      	movs	r1, #0
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 fc99 	bl	800b718 <USBD_LL_Transmit>

  return USBD_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4613      	mov	r3, r2
 800adfc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2203      	movs	r2, #3
 800ae02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ae06:	88fa      	ldrh	r2, [r7, #6]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ae0e:	88fa      	ldrh	r2, [r7, #6]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae16:	88fb      	ldrh	r3, [r7, #6]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fc9e 	bl	800b75e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae3a:	88fb      	ldrh	r3, [r7, #6]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	2100      	movs	r1, #0
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 fc8c 	bl	800b75e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2204      	movs	r2, #4
 800ae5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae60:	2300      	movs	r3, #0
 800ae62:	2200      	movs	r2, #0
 800ae64:	2100      	movs	r1, #0
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fc56 	bl	800b718 <USBD_LL_Transmit>

  return USBD_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2205      	movs	r2, #5
 800ae82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae86:	2300      	movs	r3, #0
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fc66 	bl	800b75e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aea0:	2200      	movs	r2, #0
 800aea2:	4912      	ldr	r1, [pc, #72]	@ (800aeec <MX_USB_DEVICE_Init+0x50>)
 800aea4:	4812      	ldr	r0, [pc, #72]	@ (800aef0 <MX_USB_DEVICE_Init+0x54>)
 800aea6:	f7fe ff62 	bl	8009d6e <USBD_Init>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aeb0:	f7f6 ffba 	bl	8001e28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aeb4:	490f      	ldr	r1, [pc, #60]	@ (800aef4 <MX_USB_DEVICE_Init+0x58>)
 800aeb6:	480e      	ldr	r0, [pc, #56]	@ (800aef0 <MX_USB_DEVICE_Init+0x54>)
 800aeb8:	f7fe ff84 	bl	8009dc4 <USBD_RegisterClass>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d001      	beq.n	800aec6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aec2:	f7f6 ffb1 	bl	8001e28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aec6:	490c      	ldr	r1, [pc, #48]	@ (800aef8 <MX_USB_DEVICE_Init+0x5c>)
 800aec8:	4809      	ldr	r0, [pc, #36]	@ (800aef0 <MX_USB_DEVICE_Init+0x54>)
 800aeca:	f7fe feb5 	bl	8009c38 <USBD_CDC_RegisterInterface>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aed4:	f7f6 ffa8 	bl	8001e28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aed8:	4805      	ldr	r0, [pc, #20]	@ (800aef0 <MX_USB_DEVICE_Init+0x54>)
 800aeda:	f7fe ff8c 	bl	8009df6 <USBD_Start>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aee4:	f7f6 ffa0 	bl	8001e28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aee8:	bf00      	nop
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	2000012c 	.word	0x2000012c
 800aef0:	20000588 	.word	0x20000588
 800aef4:	20000018 	.word	0x20000018
 800aef8:	2000011c 	.word	0x2000011c

0800aefc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af00:	2200      	movs	r2, #0
 800af02:	4905      	ldr	r1, [pc, #20]	@ (800af18 <CDC_Init_FS+0x1c>)
 800af04:	4805      	ldr	r0, [pc, #20]	@ (800af1c <CDC_Init_FS+0x20>)
 800af06:	f7fe fead 	bl	8009c64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af0a:	4905      	ldr	r1, [pc, #20]	@ (800af20 <CDC_Init_FS+0x24>)
 800af0c:	4803      	ldr	r0, [pc, #12]	@ (800af1c <CDC_Init_FS+0x20>)
 800af0e:	f7fe fec2 	bl	8009c96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af14:	4618      	mov	r0, r3
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20000c4c 	.word	0x20000c4c
 800af1c:	20000588 	.word	0x20000588
 800af20:	2000084c 	.word	0x2000084c

0800af24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af24:	b480      	push	{r7}
 800af26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bc80      	pop	{r7}
 800af30:	4770      	bx	lr
	...

0800af34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	6039      	str	r1, [r7, #0]
 800af3e:	71fb      	strb	r3, [r7, #7]
 800af40:	4613      	mov	r3, r2
 800af42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	2b23      	cmp	r3, #35	@ 0x23
 800af48:	d84a      	bhi.n	800afe0 <CDC_Control_FS+0xac>
 800af4a:	a201      	add	r2, pc, #4	@ (adr r2, 800af50 <CDC_Control_FS+0x1c>)
 800af4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af50:	0800afe1 	.word	0x0800afe1
 800af54:	0800afe1 	.word	0x0800afe1
 800af58:	0800afe1 	.word	0x0800afe1
 800af5c:	0800afe1 	.word	0x0800afe1
 800af60:	0800afe1 	.word	0x0800afe1
 800af64:	0800afe1 	.word	0x0800afe1
 800af68:	0800afe1 	.word	0x0800afe1
 800af6c:	0800afe1 	.word	0x0800afe1
 800af70:	0800afe1 	.word	0x0800afe1
 800af74:	0800afe1 	.word	0x0800afe1
 800af78:	0800afe1 	.word	0x0800afe1
 800af7c:	0800afe1 	.word	0x0800afe1
 800af80:	0800afe1 	.word	0x0800afe1
 800af84:	0800afe1 	.word	0x0800afe1
 800af88:	0800afe1 	.word	0x0800afe1
 800af8c:	0800afe1 	.word	0x0800afe1
 800af90:	0800afe1 	.word	0x0800afe1
 800af94:	0800afe1 	.word	0x0800afe1
 800af98:	0800afe1 	.word	0x0800afe1
 800af9c:	0800afe1 	.word	0x0800afe1
 800afa0:	0800afe1 	.word	0x0800afe1
 800afa4:	0800afe1 	.word	0x0800afe1
 800afa8:	0800afe1 	.word	0x0800afe1
 800afac:	0800afe1 	.word	0x0800afe1
 800afb0:	0800afe1 	.word	0x0800afe1
 800afb4:	0800afe1 	.word	0x0800afe1
 800afb8:	0800afe1 	.word	0x0800afe1
 800afbc:	0800afe1 	.word	0x0800afe1
 800afc0:	0800afe1 	.word	0x0800afe1
 800afc4:	0800afe1 	.word	0x0800afe1
 800afc8:	0800afe1 	.word	0x0800afe1
 800afcc:	0800afe1 	.word	0x0800afe1
 800afd0:	0800afe1 	.word	0x0800afe1
 800afd4:	0800afe1 	.word	0x0800afe1
 800afd8:	0800afe1 	.word	0x0800afe1
 800afdc:	0800afe1 	.word	0x0800afe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800afe0:	bf00      	nop
  }

  return (USBD_OK);
 800afe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	bc80      	pop	{r7}
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop

0800aff0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	480a      	ldr	r0, [pc, #40]	@ (800b028 <CDC_Receive_FS+0x38>)
 800affe:	f7fe fe4a 	bl	8009c96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b002:	4809      	ldr	r0, [pc, #36]	@ (800b028 <CDC_Receive_FS+0x38>)
 800b004:	f7fe fe89 	bl	8009d1a <USBD_CDC_ReceivePacket>
  data_recieved += strlen(UserRxBufferFS);
 800b008:	4808      	ldr	r0, [pc, #32]	@ (800b02c <CDC_Receive_FS+0x3c>)
 800b00a:	f7f5 f8a1 	bl	8000150 <strlen>
 800b00e:	4603      	mov	r3, r0
 800b010:	b2da      	uxtb	r2, r3
 800b012:	4b07      	ldr	r3, [pc, #28]	@ (800b030 <CDC_Receive_FS+0x40>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	4413      	add	r3, r2
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	4b05      	ldr	r3, [pc, #20]	@ (800b030 <CDC_Receive_FS+0x40>)
 800b01c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800b01e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b020:	4618      	mov	r0, r3
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20000588 	.word	0x20000588
 800b02c:	2000084c 	.word	0x2000084c
 800b030:	2000104c 	.word	0x2000104c

0800b034 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b044:	4b0d      	ldr	r3, [pc, #52]	@ (800b07c <CDC_Transmit_FS+0x48>)
 800b046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b04a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b056:	2301      	movs	r3, #1
 800b058:	e00b      	b.n	800b072 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b05a:	887b      	ldrh	r3, [r7, #2]
 800b05c:	461a      	mov	r2, r3
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4806      	ldr	r0, [pc, #24]	@ (800b07c <CDC_Transmit_FS+0x48>)
 800b062:	f7fe fdff 	bl	8009c64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b066:	4805      	ldr	r0, [pc, #20]	@ (800b07c <CDC_Transmit_FS+0x48>)
 800b068:	f7fe fe28 	bl	8009cbc <USBD_CDC_TransmitPacket>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20000588 	.word	0x20000588

0800b080 <CDC_data_recieved>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_data_recieved()
{
 800b080:	b480      	push	{r7}
 800b082:	af00      	add	r7, sp, #0
	return data_recieved;
 800b084:	4b02      	ldr	r3, [pc, #8]	@ (800b090 <CDC_data_recieved+0x10>)
 800b086:	781b      	ldrb	r3, [r3, #0]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bc80      	pop	{r7}
 800b08e:	4770      	bx	lr
 800b090:	2000104c 	.word	0x2000104c

0800b094 <CDC_Receive_data>:

uint8_t CDC_Receive_data(uint8_t* buf, size_t size)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
	if (data_recieved + 1 <= size) size = data_recieved + 1;
 800b09e:	4b13      	ldr	r3, [pc, #76]	@ (800b0ec <CDC_Receive_data+0x58>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d303      	bcc.n	800b0b4 <CDC_Receive_data+0x20>
 800b0ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b0ec <CDC_Receive_data+0x58>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	603b      	str	r3, [r7, #0]
	memset(buf, '\0', size);
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 fb06 	bl	800c6ca <memset>
	memcpy(buf, UserRxBufferFS, size);
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	490b      	ldr	r1, [pc, #44]	@ (800b0f0 <CDC_Receive_data+0x5c>)
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 fb8f 	bl	800c7e6 <memcpy>
	memset(UserRxBufferFS, '\0', data_recieved);
 800b0c8:	4b08      	ldr	r3, [pc, #32]	@ (800b0ec <CDC_Receive_data+0x58>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	4807      	ldr	r0, [pc, #28]	@ (800b0f0 <CDC_Receive_data+0x5c>)
 800b0d2:	f001 fafa 	bl	800c6ca <memset>
	data_recieved = 0;
 800b0d6:	4b05      	ldr	r3, [pc, #20]	@ (800b0ec <CDC_Receive_data+0x58>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	701a      	strb	r2, [r3, #0]
	return size - 1;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	b2db      	uxtb	r3, r3
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	2000104c 	.word	0x2000104c
 800b0f0:	2000084c 	.word	0x2000084c

0800b0f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	6039      	str	r1, [r7, #0]
 800b0fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2212      	movs	r2, #18
 800b104:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b106:	4b03      	ldr	r3, [pc, #12]	@ (800b114 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bc80      	pop	{r7}
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	20000148 	.word	0x20000148

0800b118 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	6039      	str	r1, [r7, #0]
 800b122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2204      	movs	r2, #4
 800b128:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b12a:	4b03      	ldr	r3, [pc, #12]	@ (800b138 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	bc80      	pop	{r7}
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	2000015c 	.word	0x2000015c

0800b13c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	6039      	str	r1, [r7, #0]
 800b146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b148:	79fb      	ldrb	r3, [r7, #7]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d105      	bne.n	800b15a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	4907      	ldr	r1, [pc, #28]	@ (800b170 <USBD_FS_ProductStrDescriptor+0x34>)
 800b152:	4808      	ldr	r0, [pc, #32]	@ (800b174 <USBD_FS_ProductStrDescriptor+0x38>)
 800b154:	f7ff fdc5 	bl	800ace2 <USBD_GetString>
 800b158:	e004      	b.n	800b164 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	4904      	ldr	r1, [pc, #16]	@ (800b170 <USBD_FS_ProductStrDescriptor+0x34>)
 800b15e:	4805      	ldr	r0, [pc, #20]	@ (800b174 <USBD_FS_ProductStrDescriptor+0x38>)
 800b160:	f7ff fdbf 	bl	800ace2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b164:	4b02      	ldr	r3, [pc, #8]	@ (800b170 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20001050 	.word	0x20001050
 800b174:	0800f438 	.word	0x0800f438

0800b178 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	6039      	str	r1, [r7, #0]
 800b182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	4904      	ldr	r1, [pc, #16]	@ (800b198 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b188:	4804      	ldr	r0, [pc, #16]	@ (800b19c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b18a:	f7ff fdaa 	bl	800ace2 <USBD_GetString>
  return USBD_StrDesc;
 800b18e:	4b02      	ldr	r3, [pc, #8]	@ (800b198 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	20001050 	.word	0x20001050
 800b19c:	0800f450 	.word	0x0800f450

0800b1a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	6039      	str	r1, [r7, #0]
 800b1aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	221a      	movs	r2, #26
 800b1b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1b2:	f000 f843 	bl	800b23c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1b6:	4b02      	ldr	r3, [pc, #8]	@ (800b1c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	20000160 	.word	0x20000160

0800b1c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	6039      	str	r1, [r7, #0]
 800b1ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d105      	bne.n	800b1e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	4907      	ldr	r1, [pc, #28]	@ (800b1f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1da:	4808      	ldr	r0, [pc, #32]	@ (800b1fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1dc:	f7ff fd81 	bl	800ace2 <USBD_GetString>
 800b1e0:	e004      	b.n	800b1ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	4904      	ldr	r1, [pc, #16]	@ (800b1f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1e6:	4805      	ldr	r0, [pc, #20]	@ (800b1fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1e8:	f7ff fd7b 	bl	800ace2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1ec:	4b02      	ldr	r3, [pc, #8]	@ (800b1f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20001050 	.word	0x20001050
 800b1fc:	0800f464 	.word	0x0800f464

0800b200 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	6039      	str	r1, [r7, #0]
 800b20a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b20c:	79fb      	ldrb	r3, [r7, #7]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d105      	bne.n	800b21e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	4907      	ldr	r1, [pc, #28]	@ (800b234 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b216:	4808      	ldr	r0, [pc, #32]	@ (800b238 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b218:	f7ff fd63 	bl	800ace2 <USBD_GetString>
 800b21c:	e004      	b.n	800b228 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	4904      	ldr	r1, [pc, #16]	@ (800b234 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b222:	4805      	ldr	r0, [pc, #20]	@ (800b238 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b224:	f7ff fd5d 	bl	800ace2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b228:	4b02      	ldr	r3, [pc, #8]	@ (800b234 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	20001050 	.word	0x20001050
 800b238:	0800f470 	.word	0x0800f470

0800b23c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b242:	4b0f      	ldr	r3, [pc, #60]	@ (800b280 <Get_SerialNum+0x44>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b248:	4b0e      	ldr	r3, [pc, #56]	@ (800b284 <Get_SerialNum+0x48>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b24e:	4b0e      	ldr	r3, [pc, #56]	@ (800b288 <Get_SerialNum+0x4c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4413      	add	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d009      	beq.n	800b276 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b262:	2208      	movs	r2, #8
 800b264:	4909      	ldr	r1, [pc, #36]	@ (800b28c <Get_SerialNum+0x50>)
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f000 f814 	bl	800b294 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b26c:	2204      	movs	r2, #4
 800b26e:	4908      	ldr	r1, [pc, #32]	@ (800b290 <Get_SerialNum+0x54>)
 800b270:	68b8      	ldr	r0, [r7, #8]
 800b272:	f000 f80f 	bl	800b294 <IntToUnicode>
  }
}
 800b276:	bf00      	nop
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	1ffff7e8 	.word	0x1ffff7e8
 800b284:	1ffff7ec 	.word	0x1ffff7ec
 800b288:	1ffff7f0 	.word	0x1ffff7f0
 800b28c:	20000162 	.word	0x20000162
 800b290:	20000172 	.word	0x20000172

0800b294 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75fb      	strb	r3, [r7, #23]
 800b2aa:	e027      	b.n	800b2fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	0f1b      	lsrs	r3, r3, #28
 800b2b0:	2b09      	cmp	r3, #9
 800b2b2:	d80b      	bhi.n	800b2cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	0f1b      	lsrs	r3, r3, #28
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	005b      	lsls	r3, r3, #1
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	440b      	add	r3, r1
 800b2c4:	3230      	adds	r2, #48	@ 0x30
 800b2c6:	b2d2      	uxtb	r2, r2
 800b2c8:	701a      	strb	r2, [r3, #0]
 800b2ca:	e00a      	b.n	800b2e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	0f1b      	lsrs	r3, r3, #28
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	440b      	add	r3, r1
 800b2dc:	3237      	adds	r2, #55	@ 0x37
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	011b      	lsls	r3, r3, #4
 800b2e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	75fb      	strb	r3, [r7, #23]
 800b2fc:	7dfa      	ldrb	r2, [r7, #23]
 800b2fe:	79fb      	ldrb	r3, [r7, #7]
 800b300:	429a      	cmp	r2, r3
 800b302:	d3d3      	bcc.n	800b2ac <IntToUnicode+0x18>
  }
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	371c      	adds	r7, #28
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bc80      	pop	{r7}
 800b30e:	4770      	bx	lr

0800b310 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a0d      	ldr	r2, [pc, #52]	@ (800b354 <HAL_PCD_MspInit+0x44>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d113      	bne.n	800b34a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b322:	4b0d      	ldr	r3, [pc, #52]	@ (800b358 <HAL_PCD_MspInit+0x48>)
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	4a0c      	ldr	r2, [pc, #48]	@ (800b358 <HAL_PCD_MspInit+0x48>)
 800b328:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b32c:	61d3      	str	r3, [r2, #28]
 800b32e:	4b0a      	ldr	r3, [pc, #40]	@ (800b358 <HAL_PCD_MspInit+0x48>)
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b33a:	2200      	movs	r2, #0
 800b33c:	2100      	movs	r1, #0
 800b33e:	2014      	movs	r0, #20
 800b340:	f7f7 fcb9 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b344:	2014      	movs	r0, #20
 800b346:	f7f7 fcd2 	bl	8002cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b34a:	bf00      	nop
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	40005c00 	.word	0x40005c00
 800b358:	40021000 	.word	0x40021000

0800b35c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b370:	4619      	mov	r1, r3
 800b372:	4610      	mov	r0, r2
 800b374:	f7fe fd87 	bl	8009e86 <USBD_LL_SetupStage>
}
 800b378:	bf00      	nop
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b392:	78fa      	ldrb	r2, [r7, #3]
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	00db      	lsls	r3, r3, #3
 800b39e:	440b      	add	r3, r1
 800b3a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	78fb      	ldrb	r3, [r7, #3]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	f7fe fdb9 	bl	8009f20 <USBD_LL_DataOutStage>
}
 800b3ae:	bf00      	nop
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b3c8:	78fa      	ldrb	r2, [r7, #3]
 800b3ca:	6879      	ldr	r1, [r7, #4]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	440b      	add	r3, r1
 800b3d6:	3324      	adds	r3, #36	@ 0x24
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f7fe fe10 	bl	800a002 <USBD_LL_DataInStage>
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fe ff20 	bl	800a23e <USBD_LL_SOF>
}
 800b3fe:	bf00      	nop
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b40e:	2301      	movs	r3, #1
 800b410:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	799b      	ldrb	r3, [r3, #6]
 800b416:	2b02      	cmp	r3, #2
 800b418:	d001      	beq.n	800b41e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b41a:	f7f6 fd05 	bl	8001e28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b424:	7bfa      	ldrb	r2, [r7, #15]
 800b426:	4611      	mov	r1, r2
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fed0 	bl	800a1ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe fe89 	bl	800a14c <USBD_LL_Reset>
}
 800b43a:	bf00      	nop
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe feca 	bl	800a1ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	7a9b      	ldrb	r3, [r3, #10]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d005      	beq.n	800b46c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b460:	4b04      	ldr	r3, [pc, #16]	@ (800b474 <HAL_PCD_SuspendCallback+0x30>)
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	4a03      	ldr	r2, [pc, #12]	@ (800b474 <HAL_PCD_SuspendCallback+0x30>)
 800b466:	f043 0306 	orr.w	r3, r3, #6
 800b46a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	e000ed00 	.word	0xe000ed00

0800b478 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe fec4 	bl	800a214 <USBD_LL_Resume>
}
 800b48c:	bf00      	nop
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b49c:	4a28      	ldr	r2, [pc, #160]	@ (800b540 <USBD_LL_Init+0xac>)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a26      	ldr	r2, [pc, #152]	@ (800b540 <USBD_LL_Init+0xac>)
 800b4a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b4ac:	4b24      	ldr	r3, [pc, #144]	@ (800b540 <USBD_LL_Init+0xac>)
 800b4ae:	4a25      	ldr	r2, [pc, #148]	@ (800b544 <USBD_LL_Init+0xb0>)
 800b4b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b4b2:	4b23      	ldr	r3, [pc, #140]	@ (800b540 <USBD_LL_Init+0xac>)
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b4b8:	4b21      	ldr	r3, [pc, #132]	@ (800b540 <USBD_LL_Init+0xac>)
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b4be:	4b20      	ldr	r3, [pc, #128]	@ (800b540 <USBD_LL_Init+0xac>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b4c4:	4b1e      	ldr	r3, [pc, #120]	@ (800b540 <USBD_LL_Init+0xac>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800b540 <USBD_LL_Init+0xac>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b4d0:	481b      	ldr	r0, [pc, #108]	@ (800b540 <USBD_LL_Init+0xac>)
 800b4d2:	f7f7 ffb4 	bl	800343e <HAL_PCD_Init>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b4dc:	f7f6 fca4 	bl	8001e28 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b4e6:	2318      	movs	r3, #24
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	f7f9 fcc5 	bl	8004e7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b4f6:	2358      	movs	r3, #88	@ 0x58
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2180      	movs	r1, #128	@ 0x80
 800b4fc:	f7f9 fcbd 	bl	8004e7a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b506:	23c0      	movs	r3, #192	@ 0xc0
 800b508:	2200      	movs	r2, #0
 800b50a:	2181      	movs	r1, #129	@ 0x81
 800b50c:	f7f9 fcb5 	bl	8004e7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b516:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b51a:	2200      	movs	r2, #0
 800b51c:	2101      	movs	r1, #1
 800b51e:	f7f9 fcac 	bl	8004e7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b52c:	2200      	movs	r2, #0
 800b52e:	2182      	movs	r1, #130	@ 0x82
 800b530:	f7f9 fca3 	bl	8004e7a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20001250 	.word	0x20001250
 800b544:	40005c00 	.word	0x40005c00

0800b548 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b550:	2300      	movs	r3, #0
 800b552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b55e:	4618      	mov	r0, r3
 800b560:	f7f8 f863 	bl	800362a <HAL_PCD_Start>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f94e 	bl	800b80c <USBD_Get_USB_Status>
 800b570:	4603      	mov	r3, r0
 800b572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b574:	7bbb      	ldrb	r3, [r7, #14]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	4608      	mov	r0, r1
 800b588:	4611      	mov	r1, r2
 800b58a:	461a      	mov	r2, r3
 800b58c:	4603      	mov	r3, r0
 800b58e:	70fb      	strb	r3, [r7, #3]
 800b590:	460b      	mov	r3, r1
 800b592:	70bb      	strb	r3, [r7, #2]
 800b594:	4613      	mov	r3, r2
 800b596:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b5a6:	78bb      	ldrb	r3, [r7, #2]
 800b5a8:	883a      	ldrh	r2, [r7, #0]
 800b5aa:	78f9      	ldrb	r1, [r7, #3]
 800b5ac:	f7f8 f9b7 	bl	800391e <HAL_PCD_EP_Open>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 f928 	bl	800b80c <USBD_Get_USB_Status>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5e4:	78fa      	ldrb	r2, [r7, #3]
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7f8 f9f5 	bl	80039d8 <HAL_PCD_EP_Close>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f000 f909 	bl	800b80c <USBD_Get_USB_Status>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b622:	78fa      	ldrb	r2, [r7, #3]
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7f8 fa9d 	bl	8003b66 <HAL_PCD_EP_SetStall>
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	4618      	mov	r0, r3
 800b634:	f000 f8ea 	bl	800b80c <USBD_Get_USB_Status>
 800b638:	4603      	mov	r3, r0
 800b63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b660:	78fa      	ldrb	r2, [r7, #3]
 800b662:	4611      	mov	r1, r2
 800b664:	4618      	mov	r0, r3
 800b666:	f7f8 fade 	bl	8003c26 <HAL_PCD_EP_ClrStall>
 800b66a:	4603      	mov	r3, r0
 800b66c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b66e:	7bfb      	ldrb	r3, [r7, #15]
 800b670:	4618      	mov	r0, r3
 800b672:	f000 f8cb 	bl	800b80c <USBD_Get_USB_Status>
 800b676:	4603      	mov	r3, r0
 800b678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b67a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	460b      	mov	r3, r1
 800b68e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b696:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	da0b      	bge.n	800b6b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6a6:	68f9      	ldr	r1, [r7, #12]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	00db      	lsls	r3, r3, #3
 800b6b0:	440b      	add	r3, r1
 800b6b2:	3312      	adds	r3, #18
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	e00b      	b.n	800b6d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b6b8:	78fb      	ldrb	r3, [r7, #3]
 800b6ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6be:	68f9      	ldr	r1, [r7, #12]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	440b      	add	r3, r1
 800b6ca:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b6ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bc80      	pop	{r7}
 800b6d8:	4770      	bx	lr

0800b6da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b6f4:	78fa      	ldrb	r2, [r7, #3]
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7f8 f8ec 	bl	80038d6 <HAL_PCD_SetAddress>
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f881 	bl	800b80c <USBD_Get_USB_Status>
 800b70a:	4603      	mov	r3, r0
 800b70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	607a      	str	r2, [r7, #4]
 800b722:	461a      	mov	r2, r3
 800b724:	460b      	mov	r3, r1
 800b726:	72fb      	strb	r3, [r7, #11]
 800b728:	4613      	mov	r3, r2
 800b72a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b73a:	893b      	ldrh	r3, [r7, #8]
 800b73c:	7af9      	ldrb	r1, [r7, #11]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	f7f8 f9da 	bl	8003af8 <HAL_PCD_EP_Transmit>
 800b744:	4603      	mov	r3, r0
 800b746:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 f85e 	bl	800b80c <USBD_Get_USB_Status>
 800b750:	4603      	mov	r3, r0
 800b752:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b754:	7dbb      	ldrb	r3, [r7, #22]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b086      	sub	sp, #24
 800b762:	af00      	add	r7, sp, #0
 800b764:	60f8      	str	r0, [r7, #12]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	461a      	mov	r2, r3
 800b76a:	460b      	mov	r3, r1
 800b76c:	72fb      	strb	r3, [r7, #11]
 800b76e:	4613      	mov	r3, r2
 800b770:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b780:	893b      	ldrh	r3, [r7, #8]
 800b782:	7af9      	ldrb	r1, [r7, #11]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	f7f8 f96f 	bl	8003a68 <HAL_PCD_EP_Receive>
 800b78a:	4603      	mov	r3, r0
 800b78c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	4618      	mov	r0, r3
 800b792:	f000 f83b 	bl	800b80c <USBD_Get_USB_Status>
 800b796:	4603      	mov	r3, r0
 800b798:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b79a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3718      	adds	r7, #24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b7b6:	78fa      	ldrb	r2, [r7, #3]
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7f8 f985 	bl	8003aca <HAL_PCD_EP_GetRxCount>
 800b7c0:	4603      	mov	r3, r0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
	...

0800b7cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b7d4:	4b02      	ldr	r3, [pc, #8]	@ (800b7e0 <USBD_static_malloc+0x14>)
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bc80      	pop	{r7}
 800b7de:	4770      	bx	lr
 800b7e0:	20001528 	.word	0x20001528

0800b7e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]

}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bc80      	pop	{r7}
 800b7f4:	4770      	bx	lr

0800b7f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	460b      	mov	r3, r1
 800b800:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b802:	bf00      	nop
 800b804:	370c      	adds	r7, #12
 800b806:	46bd      	mov	sp, r7
 800b808:	bc80      	pop	{r7}
 800b80a:	4770      	bx	lr

0800b80c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d817      	bhi.n	800b850 <USBD_Get_USB_Status+0x44>
 800b820:	a201      	add	r2, pc, #4	@ (adr r2, 800b828 <USBD_Get_USB_Status+0x1c>)
 800b822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b826:	bf00      	nop
 800b828:	0800b839 	.word	0x0800b839
 800b82c:	0800b83f 	.word	0x0800b83f
 800b830:	0800b845 	.word	0x0800b845
 800b834:	0800b84b 	.word	0x0800b84b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b838:	2300      	movs	r3, #0
 800b83a:	73fb      	strb	r3, [r7, #15]
    break;
 800b83c:	e00b      	b.n	800b856 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b83e:	2302      	movs	r3, #2
 800b840:	73fb      	strb	r3, [r7, #15]
    break;
 800b842:	e008      	b.n	800b856 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b844:	2301      	movs	r3, #1
 800b846:	73fb      	strb	r3, [r7, #15]
    break;
 800b848:	e005      	b.n	800b856 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b84a:	2302      	movs	r3, #2
 800b84c:	73fb      	strb	r3, [r7, #15]
    break;
 800b84e:	e002      	b.n	800b856 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b850:	2302      	movs	r3, #2
 800b852:	73fb      	strb	r3, [r7, #15]
    break;
 800b854:	bf00      	nop
  }
  return usb_status;
 800b856:	7bfb      	ldrb	r3, [r7, #15]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bc80      	pop	{r7}
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop

0800b864 <atof>:
 800b864:	2100      	movs	r1, #0
 800b866:	f000 bdfb 	b.w	800c460 <strtod>

0800b86a <sulp>:
 800b86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b86e:	460f      	mov	r7, r1
 800b870:	4690      	mov	r8, r2
 800b872:	f001 ff7b 	bl	800d76c <__ulp>
 800b876:	4604      	mov	r4, r0
 800b878:	460d      	mov	r5, r1
 800b87a:	f1b8 0f00 	cmp.w	r8, #0
 800b87e:	d011      	beq.n	800b8a4 <sulp+0x3a>
 800b880:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b884:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dd0b      	ble.n	800b8a4 <sulp+0x3a>
 800b88c:	2400      	movs	r4, #0
 800b88e:	051b      	lsls	r3, r3, #20
 800b890:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b894:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b898:	4622      	mov	r2, r4
 800b89a:	462b      	mov	r3, r5
 800b89c:	f7f4 fe1c 	bl	80004d8 <__aeabi_dmul>
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ac:	0000      	movs	r0, r0
	...

0800b8b0 <_strtod_l>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	b09f      	sub	sp, #124	@ 0x7c
 800b8b6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b8be:	f04f 0a00 	mov.w	sl, #0
 800b8c2:	f04f 0b00 	mov.w	fp, #0
 800b8c6:	460a      	mov	r2, r1
 800b8c8:	9005      	str	r0, [sp, #20]
 800b8ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8cc:	7811      	ldrb	r1, [r2, #0]
 800b8ce:	292b      	cmp	r1, #43	@ 0x2b
 800b8d0:	d048      	beq.n	800b964 <_strtod_l+0xb4>
 800b8d2:	d836      	bhi.n	800b942 <_strtod_l+0x92>
 800b8d4:	290d      	cmp	r1, #13
 800b8d6:	d830      	bhi.n	800b93a <_strtod_l+0x8a>
 800b8d8:	2908      	cmp	r1, #8
 800b8da:	d830      	bhi.n	800b93e <_strtod_l+0x8e>
 800b8dc:	2900      	cmp	r1, #0
 800b8de:	d039      	beq.n	800b954 <_strtod_l+0xa4>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b8e6:	782a      	ldrb	r2, [r5, #0]
 800b8e8:	2a30      	cmp	r2, #48	@ 0x30
 800b8ea:	f040 80b0 	bne.w	800ba4e <_strtod_l+0x19e>
 800b8ee:	786a      	ldrb	r2, [r5, #1]
 800b8f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b8f4:	2a58      	cmp	r2, #88	@ 0x58
 800b8f6:	d16c      	bne.n	800b9d2 <_strtod_l+0x122>
 800b8f8:	9302      	str	r3, [sp, #8]
 800b8fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8fc:	4a8f      	ldr	r2, [pc, #572]	@ (800bb3c <_strtod_l+0x28c>)
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	ab1a      	add	r3, sp, #104	@ 0x68
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	9805      	ldr	r0, [sp, #20]
 800b906:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b908:	a919      	add	r1, sp, #100	@ 0x64
 800b90a:	f001 f831 	bl	800c970 <__gethex>
 800b90e:	f010 060f 	ands.w	r6, r0, #15
 800b912:	4604      	mov	r4, r0
 800b914:	d005      	beq.n	800b922 <_strtod_l+0x72>
 800b916:	2e06      	cmp	r6, #6
 800b918:	d126      	bne.n	800b968 <_strtod_l+0xb8>
 800b91a:	2300      	movs	r3, #0
 800b91c:	3501      	adds	r5, #1
 800b91e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b920:	930e      	str	r3, [sp, #56]	@ 0x38
 800b922:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b924:	2b00      	cmp	r3, #0
 800b926:	f040 8582 	bne.w	800c42e <_strtod_l+0xb7e>
 800b92a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b92c:	b1bb      	cbz	r3, 800b95e <_strtod_l+0xae>
 800b92e:	4650      	mov	r0, sl
 800b930:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b934:	b01f      	add	sp, #124	@ 0x7c
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	2920      	cmp	r1, #32
 800b93c:	d1d0      	bne.n	800b8e0 <_strtod_l+0x30>
 800b93e:	3201      	adds	r2, #1
 800b940:	e7c3      	b.n	800b8ca <_strtod_l+0x1a>
 800b942:	292d      	cmp	r1, #45	@ 0x2d
 800b944:	d1cc      	bne.n	800b8e0 <_strtod_l+0x30>
 800b946:	2101      	movs	r1, #1
 800b948:	910e      	str	r1, [sp, #56]	@ 0x38
 800b94a:	1c51      	adds	r1, r2, #1
 800b94c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b94e:	7852      	ldrb	r2, [r2, #1]
 800b950:	2a00      	cmp	r2, #0
 800b952:	d1c7      	bne.n	800b8e4 <_strtod_l+0x34>
 800b954:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b956:	9419      	str	r4, [sp, #100]	@ 0x64
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f040 8566 	bne.w	800c42a <_strtod_l+0xb7a>
 800b95e:	4650      	mov	r0, sl
 800b960:	4659      	mov	r1, fp
 800b962:	e7e7      	b.n	800b934 <_strtod_l+0x84>
 800b964:	2100      	movs	r1, #0
 800b966:	e7ef      	b.n	800b948 <_strtod_l+0x98>
 800b968:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b96a:	b13a      	cbz	r2, 800b97c <_strtod_l+0xcc>
 800b96c:	2135      	movs	r1, #53	@ 0x35
 800b96e:	a81c      	add	r0, sp, #112	@ 0x70
 800b970:	f002 f808 	bl	800d984 <__copybits>
 800b974:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b976:	9805      	ldr	r0, [sp, #20]
 800b978:	f001 fbcc 	bl	800d114 <_Bfree>
 800b97c:	3e01      	subs	r6, #1
 800b97e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b980:	2e04      	cmp	r6, #4
 800b982:	d806      	bhi.n	800b992 <_strtod_l+0xe2>
 800b984:	e8df f006 	tbb	[pc, r6]
 800b988:	201d0314 	.word	0x201d0314
 800b98c:	14          	.byte	0x14
 800b98d:	00          	.byte	0x00
 800b98e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b992:	05e1      	lsls	r1, r4, #23
 800b994:	bf48      	it	mi
 800b996:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b99a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b99e:	0d1b      	lsrs	r3, r3, #20
 800b9a0:	051b      	lsls	r3, r3, #20
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1bd      	bne.n	800b922 <_strtod_l+0x72>
 800b9a6:	f000 fef1 	bl	800c78c <__errno>
 800b9aa:	2322      	movs	r3, #34	@ 0x22
 800b9ac:	6003      	str	r3, [r0, #0]
 800b9ae:	e7b8      	b.n	800b922 <_strtod_l+0x72>
 800b9b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b9b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b9b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b9bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b9c0:	e7e7      	b.n	800b992 <_strtod_l+0xe2>
 800b9c2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bb40 <_strtod_l+0x290>
 800b9c6:	e7e4      	b.n	800b992 <_strtod_l+0xe2>
 800b9c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b9cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b9d0:	e7df      	b.n	800b992 <_strtod_l+0xe2>
 800b9d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9d4:	1c5a      	adds	r2, r3, #1
 800b9d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	2b30      	cmp	r3, #48	@ 0x30
 800b9dc:	d0f9      	beq.n	800b9d2 <_strtod_l+0x122>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d09f      	beq.n	800b922 <_strtod_l+0x72>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	2700      	movs	r7, #0
 800b9e6:	220a      	movs	r2, #10
 800b9e8:	46b9      	mov	r9, r7
 800b9ea:	9308      	str	r3, [sp, #32]
 800b9ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9ee:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b9f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9f2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b9f4:	7805      	ldrb	r5, [r0, #0]
 800b9f6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b9fa:	b2d9      	uxtb	r1, r3
 800b9fc:	2909      	cmp	r1, #9
 800b9fe:	d928      	bls.n	800ba52 <_strtod_l+0x1a2>
 800ba00:	2201      	movs	r2, #1
 800ba02:	4950      	ldr	r1, [pc, #320]	@ (800bb44 <_strtod_l+0x294>)
 800ba04:	f000 fe69 	bl	800c6da <strncmp>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d032      	beq.n	800ba72 <_strtod_l+0x1c2>
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	462a      	mov	r2, r5
 800ba10:	4603      	mov	r3, r0
 800ba12:	464d      	mov	r5, r9
 800ba14:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba16:	2a65      	cmp	r2, #101	@ 0x65
 800ba18:	d001      	beq.n	800ba1e <_strtod_l+0x16e>
 800ba1a:	2a45      	cmp	r2, #69	@ 0x45
 800ba1c:	d114      	bne.n	800ba48 <_strtod_l+0x198>
 800ba1e:	b91d      	cbnz	r5, 800ba28 <_strtod_l+0x178>
 800ba20:	9a08      	ldr	r2, [sp, #32]
 800ba22:	4302      	orrs	r2, r0
 800ba24:	d096      	beq.n	800b954 <_strtod_l+0xa4>
 800ba26:	2500      	movs	r5, #0
 800ba28:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ba2a:	1c62      	adds	r2, r4, #1
 800ba2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba2e:	7862      	ldrb	r2, [r4, #1]
 800ba30:	2a2b      	cmp	r2, #43	@ 0x2b
 800ba32:	d07a      	beq.n	800bb2a <_strtod_l+0x27a>
 800ba34:	2a2d      	cmp	r2, #45	@ 0x2d
 800ba36:	d07e      	beq.n	800bb36 <_strtod_l+0x286>
 800ba38:	f04f 0c00 	mov.w	ip, #0
 800ba3c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ba40:	2909      	cmp	r1, #9
 800ba42:	f240 8085 	bls.w	800bb50 <_strtod_l+0x2a0>
 800ba46:	9419      	str	r4, [sp, #100]	@ 0x64
 800ba48:	f04f 0800 	mov.w	r8, #0
 800ba4c:	e0a5      	b.n	800bb9a <_strtod_l+0x2ea>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e7c8      	b.n	800b9e4 <_strtod_l+0x134>
 800ba52:	f1b9 0f08 	cmp.w	r9, #8
 800ba56:	bfd8      	it	le
 800ba58:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ba5a:	f100 0001 	add.w	r0, r0, #1
 800ba5e:	bfd6      	itet	le
 800ba60:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba64:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ba68:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ba6a:	f109 0901 	add.w	r9, r9, #1
 800ba6e:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba70:	e7bf      	b.n	800b9f2 <_strtod_l+0x142>
 800ba72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba78:	785a      	ldrb	r2, [r3, #1]
 800ba7a:	f1b9 0f00 	cmp.w	r9, #0
 800ba7e:	d03b      	beq.n	800baf8 <_strtod_l+0x248>
 800ba80:	464d      	mov	r5, r9
 800ba82:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba84:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ba88:	2b09      	cmp	r3, #9
 800ba8a:	d912      	bls.n	800bab2 <_strtod_l+0x202>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e7c2      	b.n	800ba16 <_strtod_l+0x166>
 800ba90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba92:	3001      	adds	r0, #1
 800ba94:	1c5a      	adds	r2, r3, #1
 800ba96:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba98:	785a      	ldrb	r2, [r3, #1]
 800ba9a:	2a30      	cmp	r2, #48	@ 0x30
 800ba9c:	d0f8      	beq.n	800ba90 <_strtod_l+0x1e0>
 800ba9e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800baa2:	2b08      	cmp	r3, #8
 800baa4:	f200 84c8 	bhi.w	800c438 <_strtod_l+0xb88>
 800baa8:	900a      	str	r0, [sp, #40]	@ 0x28
 800baaa:	2000      	movs	r0, #0
 800baac:	4605      	mov	r5, r0
 800baae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bab0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bab2:	3a30      	subs	r2, #48	@ 0x30
 800bab4:	f100 0301 	add.w	r3, r0, #1
 800bab8:	d018      	beq.n	800baec <_strtod_l+0x23c>
 800baba:	462e      	mov	r6, r5
 800babc:	f04f 0e0a 	mov.w	lr, #10
 800bac0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bac2:	4419      	add	r1, r3
 800bac4:	910a      	str	r1, [sp, #40]	@ 0x28
 800bac6:	1c71      	adds	r1, r6, #1
 800bac8:	eba1 0c05 	sub.w	ip, r1, r5
 800bacc:	4563      	cmp	r3, ip
 800bace:	dc15      	bgt.n	800bafc <_strtod_l+0x24c>
 800bad0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800bad4:	182b      	adds	r3, r5, r0
 800bad6:	2b08      	cmp	r3, #8
 800bad8:	f105 0501 	add.w	r5, r5, #1
 800badc:	4405      	add	r5, r0
 800bade:	dc1a      	bgt.n	800bb16 <_strtod_l+0x266>
 800bae0:	230a      	movs	r3, #10
 800bae2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bae4:	fb03 2301 	mla	r3, r3, r1, r2
 800bae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baea:	2300      	movs	r3, #0
 800baec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800baee:	4618      	mov	r0, r3
 800baf0:	1c51      	adds	r1, r2, #1
 800baf2:	9119      	str	r1, [sp, #100]	@ 0x64
 800baf4:	7852      	ldrb	r2, [r2, #1]
 800baf6:	e7c5      	b.n	800ba84 <_strtod_l+0x1d4>
 800baf8:	4648      	mov	r0, r9
 800bafa:	e7ce      	b.n	800ba9a <_strtod_l+0x1ea>
 800bafc:	2e08      	cmp	r6, #8
 800bafe:	dc05      	bgt.n	800bb0c <_strtod_l+0x25c>
 800bb00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bb02:	fb0e f606 	mul.w	r6, lr, r6
 800bb06:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bb08:	460e      	mov	r6, r1
 800bb0a:	e7dc      	b.n	800bac6 <_strtod_l+0x216>
 800bb0c:	2910      	cmp	r1, #16
 800bb0e:	bfd8      	it	le
 800bb10:	fb0e f707 	mulle.w	r7, lr, r7
 800bb14:	e7f8      	b.n	800bb08 <_strtod_l+0x258>
 800bb16:	2b0f      	cmp	r3, #15
 800bb18:	bfdc      	itt	le
 800bb1a:	230a      	movle	r3, #10
 800bb1c:	fb03 2707 	mlale	r7, r3, r7, r2
 800bb20:	e7e3      	b.n	800baea <_strtod_l+0x23a>
 800bb22:	2300      	movs	r3, #0
 800bb24:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb26:	2301      	movs	r3, #1
 800bb28:	e77a      	b.n	800ba20 <_strtod_l+0x170>
 800bb2a:	f04f 0c00 	mov.w	ip, #0
 800bb2e:	1ca2      	adds	r2, r4, #2
 800bb30:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb32:	78a2      	ldrb	r2, [r4, #2]
 800bb34:	e782      	b.n	800ba3c <_strtod_l+0x18c>
 800bb36:	f04f 0c01 	mov.w	ip, #1
 800bb3a:	e7f8      	b.n	800bb2e <_strtod_l+0x27e>
 800bb3c:	0800f680 	.word	0x0800f680
 800bb40:	7ff00000 	.word	0x7ff00000
 800bb44:	0800f4a2 	.word	0x0800f4a2
 800bb48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb4a:	1c51      	adds	r1, r2, #1
 800bb4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb4e:	7852      	ldrb	r2, [r2, #1]
 800bb50:	2a30      	cmp	r2, #48	@ 0x30
 800bb52:	d0f9      	beq.n	800bb48 <_strtod_l+0x298>
 800bb54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bb58:	2908      	cmp	r1, #8
 800bb5a:	f63f af75 	bhi.w	800ba48 <_strtod_l+0x198>
 800bb5e:	f04f 080a 	mov.w	r8, #10
 800bb62:	3a30      	subs	r2, #48	@ 0x30
 800bb64:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb68:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bb6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb6c:	1c56      	adds	r6, r2, #1
 800bb6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800bb70:	7852      	ldrb	r2, [r2, #1]
 800bb72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bb76:	f1be 0f09 	cmp.w	lr, #9
 800bb7a:	d939      	bls.n	800bbf0 <_strtod_l+0x340>
 800bb7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bb7e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bb82:	1a76      	subs	r6, r6, r1
 800bb84:	2e08      	cmp	r6, #8
 800bb86:	dc03      	bgt.n	800bb90 <_strtod_l+0x2e0>
 800bb88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb8a:	4588      	cmp	r8, r1
 800bb8c:	bfa8      	it	ge
 800bb8e:	4688      	movge	r8, r1
 800bb90:	f1bc 0f00 	cmp.w	ip, #0
 800bb94:	d001      	beq.n	800bb9a <_strtod_l+0x2ea>
 800bb96:	f1c8 0800 	rsb	r8, r8, #0
 800bb9a:	2d00      	cmp	r5, #0
 800bb9c:	d14e      	bne.n	800bc3c <_strtod_l+0x38c>
 800bb9e:	9908      	ldr	r1, [sp, #32]
 800bba0:	4308      	orrs	r0, r1
 800bba2:	f47f aebe 	bne.w	800b922 <_strtod_l+0x72>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f47f aed4 	bne.w	800b954 <_strtod_l+0xa4>
 800bbac:	2a69      	cmp	r2, #105	@ 0x69
 800bbae:	d028      	beq.n	800bc02 <_strtod_l+0x352>
 800bbb0:	dc25      	bgt.n	800bbfe <_strtod_l+0x34e>
 800bbb2:	2a49      	cmp	r2, #73	@ 0x49
 800bbb4:	d025      	beq.n	800bc02 <_strtod_l+0x352>
 800bbb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800bbb8:	f47f aecc 	bne.w	800b954 <_strtod_l+0xa4>
 800bbbc:	4999      	ldr	r1, [pc, #612]	@ (800be24 <_strtod_l+0x574>)
 800bbbe:	a819      	add	r0, sp, #100	@ 0x64
 800bbc0:	f001 f8f8 	bl	800cdb4 <__match>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f43f aec5 	beq.w	800b954 <_strtod_l+0xa4>
 800bbca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b28      	cmp	r3, #40	@ 0x28
 800bbd0:	d12e      	bne.n	800bc30 <_strtod_l+0x380>
 800bbd2:	4995      	ldr	r1, [pc, #596]	@ (800be28 <_strtod_l+0x578>)
 800bbd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800bbd6:	a819      	add	r0, sp, #100	@ 0x64
 800bbd8:	f001 f900 	bl	800cddc <__hexnan>
 800bbdc:	2805      	cmp	r0, #5
 800bbde:	d127      	bne.n	800bc30 <_strtod_l+0x380>
 800bbe0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bbe2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bbe6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bbea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bbee:	e698      	b.n	800b922 <_strtod_l+0x72>
 800bbf0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbf2:	fb08 2101 	mla	r1, r8, r1, r2
 800bbf6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bbfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbfc:	e7b5      	b.n	800bb6a <_strtod_l+0x2ba>
 800bbfe:	2a6e      	cmp	r2, #110	@ 0x6e
 800bc00:	e7da      	b.n	800bbb8 <_strtod_l+0x308>
 800bc02:	498a      	ldr	r1, [pc, #552]	@ (800be2c <_strtod_l+0x57c>)
 800bc04:	a819      	add	r0, sp, #100	@ 0x64
 800bc06:	f001 f8d5 	bl	800cdb4 <__match>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	f43f aea2 	beq.w	800b954 <_strtod_l+0xa4>
 800bc10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc12:	4987      	ldr	r1, [pc, #540]	@ (800be30 <_strtod_l+0x580>)
 800bc14:	3b01      	subs	r3, #1
 800bc16:	a819      	add	r0, sp, #100	@ 0x64
 800bc18:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc1a:	f001 f8cb 	bl	800cdb4 <__match>
 800bc1e:	b910      	cbnz	r0, 800bc26 <_strtod_l+0x376>
 800bc20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc22:	3301      	adds	r3, #1
 800bc24:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc26:	f04f 0a00 	mov.w	sl, #0
 800bc2a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800be34 <_strtod_l+0x584>
 800bc2e:	e678      	b.n	800b922 <_strtod_l+0x72>
 800bc30:	4881      	ldr	r0, [pc, #516]	@ (800be38 <_strtod_l+0x588>)
 800bc32:	f000 fde7 	bl	800c804 <nan>
 800bc36:	4682      	mov	sl, r0
 800bc38:	468b      	mov	fp, r1
 800bc3a:	e672      	b.n	800b922 <_strtod_l+0x72>
 800bc3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc3e:	f1b9 0f00 	cmp.w	r9, #0
 800bc42:	bf08      	it	eq
 800bc44:	46a9      	moveq	r9, r5
 800bc46:	eba8 0303 	sub.w	r3, r8, r3
 800bc4a:	2d10      	cmp	r5, #16
 800bc4c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bc4e:	462c      	mov	r4, r5
 800bc50:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc52:	bfa8      	it	ge
 800bc54:	2410      	movge	r4, #16
 800bc56:	f7f4 fbc5 	bl	80003e4 <__aeabi_ui2d>
 800bc5a:	2d09      	cmp	r5, #9
 800bc5c:	4682      	mov	sl, r0
 800bc5e:	468b      	mov	fp, r1
 800bc60:	dc11      	bgt.n	800bc86 <_strtod_l+0x3d6>
 800bc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f43f ae5c 	beq.w	800b922 <_strtod_l+0x72>
 800bc6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc6c:	dd76      	ble.n	800bd5c <_strtod_l+0x4ac>
 800bc6e:	2b16      	cmp	r3, #22
 800bc70:	dc5d      	bgt.n	800bd2e <_strtod_l+0x47e>
 800bc72:	4972      	ldr	r1, [pc, #456]	@ (800be3c <_strtod_l+0x58c>)
 800bc74:	4652      	mov	r2, sl
 800bc76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc7a:	465b      	mov	r3, fp
 800bc7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc80:	f7f4 fc2a 	bl	80004d8 <__aeabi_dmul>
 800bc84:	e7d7      	b.n	800bc36 <_strtod_l+0x386>
 800bc86:	4b6d      	ldr	r3, [pc, #436]	@ (800be3c <_strtod_l+0x58c>)
 800bc88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bc90:	f7f4 fc22 	bl	80004d8 <__aeabi_dmul>
 800bc94:	4682      	mov	sl, r0
 800bc96:	4638      	mov	r0, r7
 800bc98:	468b      	mov	fp, r1
 800bc9a:	f7f4 fba3 	bl	80003e4 <__aeabi_ui2d>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4650      	mov	r0, sl
 800bca4:	4659      	mov	r1, fp
 800bca6:	f7f4 fa61 	bl	800016c <__adddf3>
 800bcaa:	2d0f      	cmp	r5, #15
 800bcac:	4682      	mov	sl, r0
 800bcae:	468b      	mov	fp, r1
 800bcb0:	ddd7      	ble.n	800bc62 <_strtod_l+0x3b2>
 800bcb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb4:	1b2c      	subs	r4, r5, r4
 800bcb6:	441c      	add	r4, r3
 800bcb8:	2c00      	cmp	r4, #0
 800bcba:	f340 8093 	ble.w	800bde4 <_strtod_l+0x534>
 800bcbe:	f014 030f 	ands.w	r3, r4, #15
 800bcc2:	d00a      	beq.n	800bcda <_strtod_l+0x42a>
 800bcc4:	495d      	ldr	r1, [pc, #372]	@ (800be3c <_strtod_l+0x58c>)
 800bcc6:	4652      	mov	r2, sl
 800bcc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd0:	465b      	mov	r3, fp
 800bcd2:	f7f4 fc01 	bl	80004d8 <__aeabi_dmul>
 800bcd6:	4682      	mov	sl, r0
 800bcd8:	468b      	mov	fp, r1
 800bcda:	f034 040f 	bics.w	r4, r4, #15
 800bcde:	d073      	beq.n	800bdc8 <_strtod_l+0x518>
 800bce0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bce4:	dd49      	ble.n	800bd7a <_strtod_l+0x4ca>
 800bce6:	2400      	movs	r4, #0
 800bce8:	46a0      	mov	r8, r4
 800bcea:	46a1      	mov	r9, r4
 800bcec:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bcee:	2322      	movs	r3, #34	@ 0x22
 800bcf0:	f04f 0a00 	mov.w	sl, #0
 800bcf4:	9a05      	ldr	r2, [sp, #20]
 800bcf6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800be34 <_strtod_l+0x584>
 800bcfa:	6013      	str	r3, [r2, #0]
 800bcfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f43f ae0f 	beq.w	800b922 <_strtod_l+0x72>
 800bd04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd06:	9805      	ldr	r0, [sp, #20]
 800bd08:	f001 fa04 	bl	800d114 <_Bfree>
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	9805      	ldr	r0, [sp, #20]
 800bd10:	f001 fa00 	bl	800d114 <_Bfree>
 800bd14:	4641      	mov	r1, r8
 800bd16:	9805      	ldr	r0, [sp, #20]
 800bd18:	f001 f9fc 	bl	800d114 <_Bfree>
 800bd1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd1e:	9805      	ldr	r0, [sp, #20]
 800bd20:	f001 f9f8 	bl	800d114 <_Bfree>
 800bd24:	4621      	mov	r1, r4
 800bd26:	9805      	ldr	r0, [sp, #20]
 800bd28:	f001 f9f4 	bl	800d114 <_Bfree>
 800bd2c:	e5f9      	b.n	800b922 <_strtod_l+0x72>
 800bd2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bd34:	4293      	cmp	r3, r2
 800bd36:	dbbc      	blt.n	800bcb2 <_strtod_l+0x402>
 800bd38:	4c40      	ldr	r4, [pc, #256]	@ (800be3c <_strtod_l+0x58c>)
 800bd3a:	f1c5 050f 	rsb	r5, r5, #15
 800bd3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd42:	4652      	mov	r2, sl
 800bd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd48:	465b      	mov	r3, fp
 800bd4a:	f7f4 fbc5 	bl	80004d8 <__aeabi_dmul>
 800bd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd50:	1b5d      	subs	r5, r3, r5
 800bd52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bd56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd5a:	e791      	b.n	800bc80 <_strtod_l+0x3d0>
 800bd5c:	3316      	adds	r3, #22
 800bd5e:	dba8      	blt.n	800bcb2 <_strtod_l+0x402>
 800bd60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd62:	4650      	mov	r0, sl
 800bd64:	eba3 0808 	sub.w	r8, r3, r8
 800bd68:	4b34      	ldr	r3, [pc, #208]	@ (800be3c <_strtod_l+0x58c>)
 800bd6a:	4659      	mov	r1, fp
 800bd6c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bd70:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bd74:	f7f4 fcda 	bl	800072c <__aeabi_ddiv>
 800bd78:	e75d      	b.n	800bc36 <_strtod_l+0x386>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	4650      	mov	r0, sl
 800bd7e:	4659      	mov	r1, fp
 800bd80:	461e      	mov	r6, r3
 800bd82:	4f2f      	ldr	r7, [pc, #188]	@ (800be40 <_strtod_l+0x590>)
 800bd84:	1124      	asrs	r4, r4, #4
 800bd86:	2c01      	cmp	r4, #1
 800bd88:	dc21      	bgt.n	800bdce <_strtod_l+0x51e>
 800bd8a:	b10b      	cbz	r3, 800bd90 <_strtod_l+0x4e0>
 800bd8c:	4682      	mov	sl, r0
 800bd8e:	468b      	mov	fp, r1
 800bd90:	492b      	ldr	r1, [pc, #172]	@ (800be40 <_strtod_l+0x590>)
 800bd92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bd96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda0:	465b      	mov	r3, fp
 800bda2:	f7f4 fb99 	bl	80004d8 <__aeabi_dmul>
 800bda6:	4b23      	ldr	r3, [pc, #140]	@ (800be34 <_strtod_l+0x584>)
 800bda8:	460a      	mov	r2, r1
 800bdaa:	400b      	ands	r3, r1
 800bdac:	4925      	ldr	r1, [pc, #148]	@ (800be44 <_strtod_l+0x594>)
 800bdae:	4682      	mov	sl, r0
 800bdb0:	428b      	cmp	r3, r1
 800bdb2:	d898      	bhi.n	800bce6 <_strtod_l+0x436>
 800bdb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bdb8:	428b      	cmp	r3, r1
 800bdba:	bf86      	itte	hi
 800bdbc:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800bdc0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800be48 <_strtod_l+0x598>
 800bdc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bdc8:	2300      	movs	r3, #0
 800bdca:	9308      	str	r3, [sp, #32]
 800bdcc:	e076      	b.n	800bebc <_strtod_l+0x60c>
 800bdce:	07e2      	lsls	r2, r4, #31
 800bdd0:	d504      	bpl.n	800bddc <_strtod_l+0x52c>
 800bdd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdd6:	f7f4 fb7f 	bl	80004d8 <__aeabi_dmul>
 800bdda:	2301      	movs	r3, #1
 800bddc:	3601      	adds	r6, #1
 800bdde:	1064      	asrs	r4, r4, #1
 800bde0:	3708      	adds	r7, #8
 800bde2:	e7d0      	b.n	800bd86 <_strtod_l+0x4d6>
 800bde4:	d0f0      	beq.n	800bdc8 <_strtod_l+0x518>
 800bde6:	4264      	negs	r4, r4
 800bde8:	f014 020f 	ands.w	r2, r4, #15
 800bdec:	d00a      	beq.n	800be04 <_strtod_l+0x554>
 800bdee:	4b13      	ldr	r3, [pc, #76]	@ (800be3c <_strtod_l+0x58c>)
 800bdf0:	4650      	mov	r0, sl
 800bdf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdf6:	4659      	mov	r1, fp
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fc96 	bl	800072c <__aeabi_ddiv>
 800be00:	4682      	mov	sl, r0
 800be02:	468b      	mov	fp, r1
 800be04:	1124      	asrs	r4, r4, #4
 800be06:	d0df      	beq.n	800bdc8 <_strtod_l+0x518>
 800be08:	2c1f      	cmp	r4, #31
 800be0a:	dd1f      	ble.n	800be4c <_strtod_l+0x59c>
 800be0c:	2400      	movs	r4, #0
 800be0e:	46a0      	mov	r8, r4
 800be10:	46a1      	mov	r9, r4
 800be12:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be14:	2322      	movs	r3, #34	@ 0x22
 800be16:	9a05      	ldr	r2, [sp, #20]
 800be18:	f04f 0a00 	mov.w	sl, #0
 800be1c:	f04f 0b00 	mov.w	fp, #0
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	e76b      	b.n	800bcfc <_strtod_l+0x44c>
 800be24:	0800f4a7 	.word	0x0800f4a7
 800be28:	0800f66c 	.word	0x0800f66c
 800be2c:	0800f4a4 	.word	0x0800f4a4
 800be30:	0800f5d2 	.word	0x0800f5d2
 800be34:	7ff00000 	.word	0x7ff00000
 800be38:	0800f5ce 	.word	0x0800f5ce
 800be3c:	0800f6f8 	.word	0x0800f6f8
 800be40:	0800f6d0 	.word	0x0800f6d0
 800be44:	7ca00000 	.word	0x7ca00000
 800be48:	7fefffff 	.word	0x7fefffff
 800be4c:	f014 0310 	ands.w	r3, r4, #16
 800be50:	bf18      	it	ne
 800be52:	236a      	movne	r3, #106	@ 0x6a
 800be54:	4650      	mov	r0, sl
 800be56:	9308      	str	r3, [sp, #32]
 800be58:	4659      	mov	r1, fp
 800be5a:	2300      	movs	r3, #0
 800be5c:	4e77      	ldr	r6, [pc, #476]	@ (800c03c <_strtod_l+0x78c>)
 800be5e:	07e7      	lsls	r7, r4, #31
 800be60:	d504      	bpl.n	800be6c <_strtod_l+0x5bc>
 800be62:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be66:	f7f4 fb37 	bl	80004d8 <__aeabi_dmul>
 800be6a:	2301      	movs	r3, #1
 800be6c:	1064      	asrs	r4, r4, #1
 800be6e:	f106 0608 	add.w	r6, r6, #8
 800be72:	d1f4      	bne.n	800be5e <_strtod_l+0x5ae>
 800be74:	b10b      	cbz	r3, 800be7a <_strtod_l+0x5ca>
 800be76:	4682      	mov	sl, r0
 800be78:	468b      	mov	fp, r1
 800be7a:	9b08      	ldr	r3, [sp, #32]
 800be7c:	b1b3      	cbz	r3, 800beac <_strtod_l+0x5fc>
 800be7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800be86:	2b00      	cmp	r3, #0
 800be88:	4659      	mov	r1, fp
 800be8a:	dd0f      	ble.n	800beac <_strtod_l+0x5fc>
 800be8c:	2b1f      	cmp	r3, #31
 800be8e:	dd58      	ble.n	800bf42 <_strtod_l+0x692>
 800be90:	2b34      	cmp	r3, #52	@ 0x34
 800be92:	bfd8      	it	le
 800be94:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800be98:	f04f 0a00 	mov.w	sl, #0
 800be9c:	bfcf      	iteee	gt
 800be9e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bea2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bea6:	4093      	lslle	r3, r2
 800bea8:	ea03 0b01 	andle.w	fp, r3, r1
 800beac:	2200      	movs	r2, #0
 800beae:	2300      	movs	r3, #0
 800beb0:	4650      	mov	r0, sl
 800beb2:	4659      	mov	r1, fp
 800beb4:	f7f4 fd78 	bl	80009a8 <__aeabi_dcmpeq>
 800beb8:	2800      	cmp	r0, #0
 800beba:	d1a7      	bne.n	800be0c <_strtod_l+0x55c>
 800bebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bebe:	464a      	mov	r2, r9
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bec4:	462b      	mov	r3, r5
 800bec6:	9805      	ldr	r0, [sp, #20]
 800bec8:	f001 f98c 	bl	800d1e4 <__s2b>
 800becc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bece:	2800      	cmp	r0, #0
 800bed0:	f43f af09 	beq.w	800bce6 <_strtod_l+0x436>
 800bed4:	2400      	movs	r4, #0
 800bed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beda:	2a00      	cmp	r2, #0
 800bedc:	eba3 0308 	sub.w	r3, r3, r8
 800bee0:	bfa8      	it	ge
 800bee2:	2300      	movge	r3, #0
 800bee4:	46a0      	mov	r8, r4
 800bee6:	9312      	str	r3, [sp, #72]	@ 0x48
 800bee8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800beec:	9316      	str	r3, [sp, #88]	@ 0x58
 800beee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bef0:	9805      	ldr	r0, [sp, #20]
 800bef2:	6859      	ldr	r1, [r3, #4]
 800bef4:	f001 f8ce 	bl	800d094 <_Balloc>
 800bef8:	4681      	mov	r9, r0
 800befa:	2800      	cmp	r0, #0
 800befc:	f43f aef7 	beq.w	800bcee <_strtod_l+0x43e>
 800bf00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf02:	300c      	adds	r0, #12
 800bf04:	691a      	ldr	r2, [r3, #16]
 800bf06:	f103 010c 	add.w	r1, r3, #12
 800bf0a:	3202      	adds	r2, #2
 800bf0c:	0092      	lsls	r2, r2, #2
 800bf0e:	f000 fc6a 	bl	800c7e6 <memcpy>
 800bf12:	ab1c      	add	r3, sp, #112	@ 0x70
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	4652      	mov	r2, sl
 800bf1c:	465b      	mov	r3, fp
 800bf1e:	9805      	ldr	r0, [sp, #20]
 800bf20:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bf24:	f001 fc8a 	bl	800d83c <__d2b>
 800bf28:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	f43f aedf 	beq.w	800bcee <_strtod_l+0x43e>
 800bf30:	2101      	movs	r1, #1
 800bf32:	9805      	ldr	r0, [sp, #20]
 800bf34:	f001 f9ec 	bl	800d310 <__i2b>
 800bf38:	4680      	mov	r8, r0
 800bf3a:	b948      	cbnz	r0, 800bf50 <_strtod_l+0x6a0>
 800bf3c:	f04f 0800 	mov.w	r8, #0
 800bf40:	e6d5      	b.n	800bcee <_strtod_l+0x43e>
 800bf42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf46:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4a:	ea03 0a0a 	and.w	sl, r3, sl
 800bf4e:	e7ad      	b.n	800beac <_strtod_l+0x5fc>
 800bf50:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bf52:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bf54:	2d00      	cmp	r5, #0
 800bf56:	bfab      	itete	ge
 800bf58:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bf5a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bf5c:	18ef      	addge	r7, r5, r3
 800bf5e:	1b5e      	sublt	r6, r3, r5
 800bf60:	9b08      	ldr	r3, [sp, #32]
 800bf62:	bfa8      	it	ge
 800bf64:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bf66:	eba5 0503 	sub.w	r5, r5, r3
 800bf6a:	4415      	add	r5, r2
 800bf6c:	4b34      	ldr	r3, [pc, #208]	@ (800c040 <_strtod_l+0x790>)
 800bf6e:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800bf72:	bfb8      	it	lt
 800bf74:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bf76:	429d      	cmp	r5, r3
 800bf78:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bf7c:	da50      	bge.n	800c020 <_strtod_l+0x770>
 800bf7e:	1b5b      	subs	r3, r3, r5
 800bf80:	2b1f      	cmp	r3, #31
 800bf82:	f04f 0101 	mov.w	r1, #1
 800bf86:	eba2 0203 	sub.w	r2, r2, r3
 800bf8a:	dc3d      	bgt.n	800c008 <_strtod_l+0x758>
 800bf8c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf92:	2300      	movs	r3, #0
 800bf94:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf96:	18bd      	adds	r5, r7, r2
 800bf98:	9b08      	ldr	r3, [sp, #32]
 800bf9a:	42af      	cmp	r7, r5
 800bf9c:	4416      	add	r6, r2
 800bf9e:	441e      	add	r6, r3
 800bfa0:	463b      	mov	r3, r7
 800bfa2:	bfa8      	it	ge
 800bfa4:	462b      	movge	r3, r5
 800bfa6:	42b3      	cmp	r3, r6
 800bfa8:	bfa8      	it	ge
 800bfaa:	4633      	movge	r3, r6
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	bfc2      	ittt	gt
 800bfb0:	1aed      	subgt	r5, r5, r3
 800bfb2:	1af6      	subgt	r6, r6, r3
 800bfb4:	1aff      	subgt	r7, r7, r3
 800bfb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	dd16      	ble.n	800bfea <_strtod_l+0x73a>
 800bfbc:	4641      	mov	r1, r8
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	9805      	ldr	r0, [sp, #20]
 800bfc2:	f001 fa5d 	bl	800d480 <__pow5mult>
 800bfc6:	4680      	mov	r8, r0
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d0b7      	beq.n	800bf3c <_strtod_l+0x68c>
 800bfcc:	4601      	mov	r1, r0
 800bfce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bfd0:	9805      	ldr	r0, [sp, #20]
 800bfd2:	f001 f9b3 	bl	800d33c <__multiply>
 800bfd6:	900a      	str	r0, [sp, #40]	@ 0x28
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	f43f ae88 	beq.w	800bcee <_strtod_l+0x43e>
 800bfde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfe0:	9805      	ldr	r0, [sp, #20]
 800bfe2:	f001 f897 	bl	800d114 <_Bfree>
 800bfe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfe8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfea:	2d00      	cmp	r5, #0
 800bfec:	dc1d      	bgt.n	800c02a <_strtod_l+0x77a>
 800bfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	dd27      	ble.n	800c044 <_strtod_l+0x794>
 800bff4:	4649      	mov	r1, r9
 800bff6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bff8:	9805      	ldr	r0, [sp, #20]
 800bffa:	f001 fa41 	bl	800d480 <__pow5mult>
 800bffe:	4681      	mov	r9, r0
 800c000:	bb00      	cbnz	r0, 800c044 <_strtod_l+0x794>
 800c002:	f04f 0900 	mov.w	r9, #0
 800c006:	e672      	b.n	800bcee <_strtod_l+0x43e>
 800c008:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c00c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c010:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c014:	35e2      	adds	r5, #226	@ 0xe2
 800c016:	fa01 f305 	lsl.w	r3, r1, r5
 800c01a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c01c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c01e:	e7ba      	b.n	800bf96 <_strtod_l+0x6e6>
 800c020:	2300      	movs	r3, #0
 800c022:	9310      	str	r3, [sp, #64]	@ 0x40
 800c024:	2301      	movs	r3, #1
 800c026:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c028:	e7b5      	b.n	800bf96 <_strtod_l+0x6e6>
 800c02a:	462a      	mov	r2, r5
 800c02c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c02e:	9805      	ldr	r0, [sp, #20]
 800c030:	f001 fa80 	bl	800d534 <__lshift>
 800c034:	901a      	str	r0, [sp, #104]	@ 0x68
 800c036:	2800      	cmp	r0, #0
 800c038:	d1d9      	bne.n	800bfee <_strtod_l+0x73e>
 800c03a:	e658      	b.n	800bcee <_strtod_l+0x43e>
 800c03c:	0800f698 	.word	0x0800f698
 800c040:	fffffc02 	.word	0xfffffc02
 800c044:	2e00      	cmp	r6, #0
 800c046:	dd07      	ble.n	800c058 <_strtod_l+0x7a8>
 800c048:	4649      	mov	r1, r9
 800c04a:	4632      	mov	r2, r6
 800c04c:	9805      	ldr	r0, [sp, #20]
 800c04e:	f001 fa71 	bl	800d534 <__lshift>
 800c052:	4681      	mov	r9, r0
 800c054:	2800      	cmp	r0, #0
 800c056:	d0d4      	beq.n	800c002 <_strtod_l+0x752>
 800c058:	2f00      	cmp	r7, #0
 800c05a:	dd08      	ble.n	800c06e <_strtod_l+0x7be>
 800c05c:	4641      	mov	r1, r8
 800c05e:	463a      	mov	r2, r7
 800c060:	9805      	ldr	r0, [sp, #20]
 800c062:	f001 fa67 	bl	800d534 <__lshift>
 800c066:	4680      	mov	r8, r0
 800c068:	2800      	cmp	r0, #0
 800c06a:	f43f ae40 	beq.w	800bcee <_strtod_l+0x43e>
 800c06e:	464a      	mov	r2, r9
 800c070:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c072:	9805      	ldr	r0, [sp, #20]
 800c074:	f001 fae6 	bl	800d644 <__mdiff>
 800c078:	4604      	mov	r4, r0
 800c07a:	2800      	cmp	r0, #0
 800c07c:	f43f ae37 	beq.w	800bcee <_strtod_l+0x43e>
 800c080:	68c3      	ldr	r3, [r0, #12]
 800c082:	4641      	mov	r1, r8
 800c084:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c086:	2300      	movs	r3, #0
 800c088:	60c3      	str	r3, [r0, #12]
 800c08a:	f001 fabf 	bl	800d60c <__mcmp>
 800c08e:	2800      	cmp	r0, #0
 800c090:	da3d      	bge.n	800c10e <_strtod_l+0x85e>
 800c092:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c094:	ea53 030a 	orrs.w	r3, r3, sl
 800c098:	d163      	bne.n	800c162 <_strtod_l+0x8b2>
 800c09a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d15f      	bne.n	800c162 <_strtod_l+0x8b2>
 800c0a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0a6:	0d1b      	lsrs	r3, r3, #20
 800c0a8:	051b      	lsls	r3, r3, #20
 800c0aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c0ae:	d958      	bls.n	800c162 <_strtod_l+0x8b2>
 800c0b0:	6963      	ldr	r3, [r4, #20]
 800c0b2:	b913      	cbnz	r3, 800c0ba <_strtod_l+0x80a>
 800c0b4:	6923      	ldr	r3, [r4, #16]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	dd53      	ble.n	800c162 <_strtod_l+0x8b2>
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	2201      	movs	r2, #1
 800c0be:	9805      	ldr	r0, [sp, #20]
 800c0c0:	f001 fa38 	bl	800d534 <__lshift>
 800c0c4:	4641      	mov	r1, r8
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	f001 faa0 	bl	800d60c <__mcmp>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	dd48      	ble.n	800c162 <_strtod_l+0x8b2>
 800c0d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0d4:	9a08      	ldr	r2, [sp, #32]
 800c0d6:	0d1b      	lsrs	r3, r3, #20
 800c0d8:	051b      	lsls	r3, r3, #20
 800c0da:	2a00      	cmp	r2, #0
 800c0dc:	d062      	beq.n	800c1a4 <_strtod_l+0x8f4>
 800c0de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c0e2:	d85f      	bhi.n	800c1a4 <_strtod_l+0x8f4>
 800c0e4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c0e8:	f67f ae94 	bls.w	800be14 <_strtod_l+0x564>
 800c0ec:	4650      	mov	r0, sl
 800c0ee:	4659      	mov	r1, fp
 800c0f0:	4ba3      	ldr	r3, [pc, #652]	@ (800c380 <_strtod_l+0xad0>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f7f4 f9f0 	bl	80004d8 <__aeabi_dmul>
 800c0f8:	4ba2      	ldr	r3, [pc, #648]	@ (800c384 <_strtod_l+0xad4>)
 800c0fa:	4682      	mov	sl, r0
 800c0fc:	400b      	ands	r3, r1
 800c0fe:	468b      	mov	fp, r1
 800c100:	2b00      	cmp	r3, #0
 800c102:	f47f adff 	bne.w	800bd04 <_strtod_l+0x454>
 800c106:	2322      	movs	r3, #34	@ 0x22
 800c108:	9a05      	ldr	r2, [sp, #20]
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	e5fa      	b.n	800bd04 <_strtod_l+0x454>
 800c10e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c112:	d165      	bne.n	800c1e0 <_strtod_l+0x930>
 800c114:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c116:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c11a:	b35a      	cbz	r2, 800c174 <_strtod_l+0x8c4>
 800c11c:	4a9a      	ldr	r2, [pc, #616]	@ (800c388 <_strtod_l+0xad8>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d12b      	bne.n	800c17a <_strtod_l+0x8ca>
 800c122:	9b08      	ldr	r3, [sp, #32]
 800c124:	4651      	mov	r1, sl
 800c126:	b303      	cbz	r3, 800c16a <_strtod_l+0x8ba>
 800c128:	465a      	mov	r2, fp
 800c12a:	4b96      	ldr	r3, [pc, #600]	@ (800c384 <_strtod_l+0xad4>)
 800c12c:	4013      	ands	r3, r2
 800c12e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c132:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c136:	d81b      	bhi.n	800c170 <_strtod_l+0x8c0>
 800c138:	0d1b      	lsrs	r3, r3, #20
 800c13a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c13e:	fa02 f303 	lsl.w	r3, r2, r3
 800c142:	4299      	cmp	r1, r3
 800c144:	d119      	bne.n	800c17a <_strtod_l+0x8ca>
 800c146:	4b91      	ldr	r3, [pc, #580]	@ (800c38c <_strtod_l+0xadc>)
 800c148:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d102      	bne.n	800c154 <_strtod_l+0x8a4>
 800c14e:	3101      	adds	r1, #1
 800c150:	f43f adcd 	beq.w	800bcee <_strtod_l+0x43e>
 800c154:	f04f 0a00 	mov.w	sl, #0
 800c158:	4b8a      	ldr	r3, [pc, #552]	@ (800c384 <_strtod_l+0xad4>)
 800c15a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c15c:	401a      	ands	r2, r3
 800c15e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c162:	9b08      	ldr	r3, [sp, #32]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1c1      	bne.n	800c0ec <_strtod_l+0x83c>
 800c168:	e5cc      	b.n	800bd04 <_strtod_l+0x454>
 800c16a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c16e:	e7e8      	b.n	800c142 <_strtod_l+0x892>
 800c170:	4613      	mov	r3, r2
 800c172:	e7e6      	b.n	800c142 <_strtod_l+0x892>
 800c174:	ea53 030a 	orrs.w	r3, r3, sl
 800c178:	d0aa      	beq.n	800c0d0 <_strtod_l+0x820>
 800c17a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c17c:	b1db      	cbz	r3, 800c1b6 <_strtod_l+0x906>
 800c17e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c180:	4213      	tst	r3, r2
 800c182:	d0ee      	beq.n	800c162 <_strtod_l+0x8b2>
 800c184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c186:	4650      	mov	r0, sl
 800c188:	4659      	mov	r1, fp
 800c18a:	9a08      	ldr	r2, [sp, #32]
 800c18c:	b1bb      	cbz	r3, 800c1be <_strtod_l+0x90e>
 800c18e:	f7ff fb6c 	bl	800b86a <sulp>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c19a:	f7f3 ffe7 	bl	800016c <__adddf3>
 800c19e:	4682      	mov	sl, r0
 800c1a0:	468b      	mov	fp, r1
 800c1a2:	e7de      	b.n	800c162 <_strtod_l+0x8b2>
 800c1a4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c1a8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c1ac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c1b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c1b4:	e7d5      	b.n	800c162 <_strtod_l+0x8b2>
 800c1b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1b8:	ea13 0f0a 	tst.w	r3, sl
 800c1bc:	e7e1      	b.n	800c182 <_strtod_l+0x8d2>
 800c1be:	f7ff fb54 	bl	800b86a <sulp>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1ca:	f7f3 ffcd 	bl	8000168 <__aeabi_dsub>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4682      	mov	sl, r0
 800c1d4:	468b      	mov	fp, r1
 800c1d6:	f7f4 fbe7 	bl	80009a8 <__aeabi_dcmpeq>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d0c1      	beq.n	800c162 <_strtod_l+0x8b2>
 800c1de:	e619      	b.n	800be14 <_strtod_l+0x564>
 800c1e0:	4641      	mov	r1, r8
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f001 fb82 	bl	800d8ec <__ratio>
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	460f      	mov	r7, r1
 800c1f2:	f7f4 fbed 	bl	80009d0 <__aeabi_dcmple>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d06d      	beq.n	800c2d6 <_strtod_l+0xa26>
 800c1fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d178      	bne.n	800c2f2 <_strtod_l+0xa42>
 800c200:	f1ba 0f00 	cmp.w	sl, #0
 800c204:	d156      	bne.n	800c2b4 <_strtod_l+0xa04>
 800c206:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d158      	bne.n	800c2c2 <_strtod_l+0xa12>
 800c210:	2200      	movs	r2, #0
 800c212:	4630      	mov	r0, r6
 800c214:	4639      	mov	r1, r7
 800c216:	4b5e      	ldr	r3, [pc, #376]	@ (800c390 <_strtod_l+0xae0>)
 800c218:	f7f4 fbd0 	bl	80009bc <__aeabi_dcmplt>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d157      	bne.n	800c2d0 <_strtod_l+0xa20>
 800c220:	4630      	mov	r0, r6
 800c222:	4639      	mov	r1, r7
 800c224:	2200      	movs	r2, #0
 800c226:	4b5b      	ldr	r3, [pc, #364]	@ (800c394 <_strtod_l+0xae4>)
 800c228:	f7f4 f956 	bl	80004d8 <__aeabi_dmul>
 800c22c:	4606      	mov	r6, r0
 800c22e:	460f      	mov	r7, r1
 800c230:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c234:	9606      	str	r6, [sp, #24]
 800c236:	9307      	str	r3, [sp, #28]
 800c238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c23c:	4d51      	ldr	r5, [pc, #324]	@ (800c384 <_strtod_l+0xad4>)
 800c23e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c244:	401d      	ands	r5, r3
 800c246:	4b54      	ldr	r3, [pc, #336]	@ (800c398 <_strtod_l+0xae8>)
 800c248:	429d      	cmp	r5, r3
 800c24a:	f040 80ab 	bne.w	800c3a4 <_strtod_l+0xaf4>
 800c24e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c250:	4650      	mov	r0, sl
 800c252:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c256:	4659      	mov	r1, fp
 800c258:	f001 fa88 	bl	800d76c <__ulp>
 800c25c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c260:	f7f4 f93a 	bl	80004d8 <__aeabi_dmul>
 800c264:	4652      	mov	r2, sl
 800c266:	465b      	mov	r3, fp
 800c268:	f7f3 ff80 	bl	800016c <__adddf3>
 800c26c:	460b      	mov	r3, r1
 800c26e:	4945      	ldr	r1, [pc, #276]	@ (800c384 <_strtod_l+0xad4>)
 800c270:	4a4a      	ldr	r2, [pc, #296]	@ (800c39c <_strtod_l+0xaec>)
 800c272:	4019      	ands	r1, r3
 800c274:	4291      	cmp	r1, r2
 800c276:	4682      	mov	sl, r0
 800c278:	d942      	bls.n	800c300 <_strtod_l+0xa50>
 800c27a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c27c:	4b43      	ldr	r3, [pc, #268]	@ (800c38c <_strtod_l+0xadc>)
 800c27e:	429a      	cmp	r2, r3
 800c280:	d103      	bne.n	800c28a <_strtod_l+0x9da>
 800c282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c284:	3301      	adds	r3, #1
 800c286:	f43f ad32 	beq.w	800bcee <_strtod_l+0x43e>
 800c28a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c28e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800c38c <_strtod_l+0xadc>
 800c292:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c294:	9805      	ldr	r0, [sp, #20]
 800c296:	f000 ff3d 	bl	800d114 <_Bfree>
 800c29a:	4649      	mov	r1, r9
 800c29c:	9805      	ldr	r0, [sp, #20]
 800c29e:	f000 ff39 	bl	800d114 <_Bfree>
 800c2a2:	4641      	mov	r1, r8
 800c2a4:	9805      	ldr	r0, [sp, #20]
 800c2a6:	f000 ff35 	bl	800d114 <_Bfree>
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	9805      	ldr	r0, [sp, #20]
 800c2ae:	f000 ff31 	bl	800d114 <_Bfree>
 800c2b2:	e61c      	b.n	800beee <_strtod_l+0x63e>
 800c2b4:	f1ba 0f01 	cmp.w	sl, #1
 800c2b8:	d103      	bne.n	800c2c2 <_strtod_l+0xa12>
 800c2ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f43f ada9 	beq.w	800be14 <_strtod_l+0x564>
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	4b36      	ldr	r3, [pc, #216]	@ (800c3a0 <_strtod_l+0xaf0>)
 800c2c6:	2600      	movs	r6, #0
 800c2c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2cc:	4f30      	ldr	r7, [pc, #192]	@ (800c390 <_strtod_l+0xae0>)
 800c2ce:	e7b3      	b.n	800c238 <_strtod_l+0x988>
 800c2d0:	2600      	movs	r6, #0
 800c2d2:	4f30      	ldr	r7, [pc, #192]	@ (800c394 <_strtod_l+0xae4>)
 800c2d4:	e7ac      	b.n	800c230 <_strtod_l+0x980>
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	4639      	mov	r1, r7
 800c2da:	4b2e      	ldr	r3, [pc, #184]	@ (800c394 <_strtod_l+0xae4>)
 800c2dc:	2200      	movs	r2, #0
 800c2de:	f7f4 f8fb 	bl	80004d8 <__aeabi_dmul>
 800c2e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	460f      	mov	r7, r1
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d0a1      	beq.n	800c230 <_strtod_l+0x980>
 800c2ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c2f0:	e7a2      	b.n	800c238 <_strtod_l+0x988>
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	4b26      	ldr	r3, [pc, #152]	@ (800c390 <_strtod_l+0xae0>)
 800c2f6:	4616      	mov	r6, r2
 800c2f8:	461f      	mov	r7, r3
 800c2fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2fe:	e79b      	b.n	800c238 <_strtod_l+0x988>
 800c300:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c304:	9b08      	ldr	r3, [sp, #32]
 800c306:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1c1      	bne.n	800c292 <_strtod_l+0x9e2>
 800c30e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c312:	0d1b      	lsrs	r3, r3, #20
 800c314:	051b      	lsls	r3, r3, #20
 800c316:	429d      	cmp	r5, r3
 800c318:	d1bb      	bne.n	800c292 <_strtod_l+0x9e2>
 800c31a:	4630      	mov	r0, r6
 800c31c:	4639      	mov	r1, r7
 800c31e:	f7f4 ff27 	bl	8001170 <__aeabi_d2lz>
 800c322:	f7f4 f8ab 	bl	800047c <__aeabi_l2d>
 800c326:	4602      	mov	r2, r0
 800c328:	460b      	mov	r3, r1
 800c32a:	4630      	mov	r0, r6
 800c32c:	4639      	mov	r1, r7
 800c32e:	f7f3 ff1b 	bl	8000168 <__aeabi_dsub>
 800c332:	460b      	mov	r3, r1
 800c334:	4602      	mov	r2, r0
 800c336:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c33a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c33e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c340:	ea46 060a 	orr.w	r6, r6, sl
 800c344:	431e      	orrs	r6, r3
 800c346:	d06a      	beq.n	800c41e <_strtod_l+0xb6e>
 800c348:	a309      	add	r3, pc, #36	@ (adr r3, 800c370 <_strtod_l+0xac0>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f7f4 fb35 	bl	80009bc <__aeabi_dcmplt>
 800c352:	2800      	cmp	r0, #0
 800c354:	f47f acd6 	bne.w	800bd04 <_strtod_l+0x454>
 800c358:	a307      	add	r3, pc, #28	@ (adr r3, 800c378 <_strtod_l+0xac8>)
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c362:	f7f4 fb49 	bl	80009f8 <__aeabi_dcmpgt>
 800c366:	2800      	cmp	r0, #0
 800c368:	d093      	beq.n	800c292 <_strtod_l+0x9e2>
 800c36a:	e4cb      	b.n	800bd04 <_strtod_l+0x454>
 800c36c:	f3af 8000 	nop.w
 800c370:	94a03595 	.word	0x94a03595
 800c374:	3fdfffff 	.word	0x3fdfffff
 800c378:	35afe535 	.word	0x35afe535
 800c37c:	3fe00000 	.word	0x3fe00000
 800c380:	39500000 	.word	0x39500000
 800c384:	7ff00000 	.word	0x7ff00000
 800c388:	000fffff 	.word	0x000fffff
 800c38c:	7fefffff 	.word	0x7fefffff
 800c390:	3ff00000 	.word	0x3ff00000
 800c394:	3fe00000 	.word	0x3fe00000
 800c398:	7fe00000 	.word	0x7fe00000
 800c39c:	7c9fffff 	.word	0x7c9fffff
 800c3a0:	bff00000 	.word	0xbff00000
 800c3a4:	9b08      	ldr	r3, [sp, #32]
 800c3a6:	b323      	cbz	r3, 800c3f2 <_strtod_l+0xb42>
 800c3a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c3ac:	d821      	bhi.n	800c3f2 <_strtod_l+0xb42>
 800c3ae:	a328      	add	r3, pc, #160	@ (adr r3, 800c450 <_strtod_l+0xba0>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	4639      	mov	r1, r7
 800c3b8:	f7f4 fb0a 	bl	80009d0 <__aeabi_dcmple>
 800c3bc:	b1a0      	cbz	r0, 800c3e8 <_strtod_l+0xb38>
 800c3be:	4639      	mov	r1, r7
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7f4 fb4b 	bl	8000a5c <__aeabi_d2uiz>
 800c3c6:	2801      	cmp	r0, #1
 800c3c8:	bf38      	it	cc
 800c3ca:	2001      	movcc	r0, #1
 800c3cc:	f7f4 f80a 	bl	80003e4 <__aeabi_ui2d>
 800c3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	b9fb      	cbnz	r3, 800c418 <_strtod_l+0xb68>
 800c3d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c3dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800c3de:	9315      	str	r3, [sp, #84]	@ 0x54
 800c3e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c3e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c3e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c3ee:	1b5b      	subs	r3, r3, r5
 800c3f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c3f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c3fa:	f001 f9b7 	bl	800d76c <__ulp>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	4650      	mov	r0, sl
 800c404:	4659      	mov	r1, fp
 800c406:	f7f4 f867 	bl	80004d8 <__aeabi_dmul>
 800c40a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c40e:	f7f3 fead 	bl	800016c <__adddf3>
 800c412:	4682      	mov	sl, r0
 800c414:	468b      	mov	fp, r1
 800c416:	e775      	b.n	800c304 <_strtod_l+0xa54>
 800c418:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c41c:	e7e0      	b.n	800c3e0 <_strtod_l+0xb30>
 800c41e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c458 <_strtod_l+0xba8>)
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f7f4 faca 	bl	80009bc <__aeabi_dcmplt>
 800c428:	e79d      	b.n	800c366 <_strtod_l+0xab6>
 800c42a:	2300      	movs	r3, #0
 800c42c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c42e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c430:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	f7ff ba79 	b.w	800b92a <_strtod_l+0x7a>
 800c438:	2a65      	cmp	r2, #101	@ 0x65
 800c43a:	f43f ab72 	beq.w	800bb22 <_strtod_l+0x272>
 800c43e:	2a45      	cmp	r2, #69	@ 0x45
 800c440:	f43f ab6f 	beq.w	800bb22 <_strtod_l+0x272>
 800c444:	2301      	movs	r3, #1
 800c446:	f7ff bbaa 	b.w	800bb9e <_strtod_l+0x2ee>
 800c44a:	bf00      	nop
 800c44c:	f3af 8000 	nop.w
 800c450:	ffc00000 	.word	0xffc00000
 800c454:	41dfffff 	.word	0x41dfffff
 800c458:	94a03595 	.word	0x94a03595
 800c45c:	3fcfffff 	.word	0x3fcfffff

0800c460 <strtod>:
 800c460:	460a      	mov	r2, r1
 800c462:	4601      	mov	r1, r0
 800c464:	4802      	ldr	r0, [pc, #8]	@ (800c470 <strtod+0x10>)
 800c466:	4b03      	ldr	r3, [pc, #12]	@ (800c474 <strtod+0x14>)
 800c468:	6800      	ldr	r0, [r0, #0]
 800c46a:	f7ff ba21 	b.w	800b8b0 <_strtod_l>
 800c46e:	bf00      	nop
 800c470:	200002f4 	.word	0x200002f4
 800c474:	20000188 	.word	0x20000188

0800c478 <gcvt>:
 800c478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c47a:	461c      	mov	r4, r3
 800c47c:	4615      	mov	r5, r2
 800c47e:	2300      	movs	r3, #0
 800c480:	2200      	movs	r2, #0
 800c482:	b085      	sub	sp, #20
 800c484:	4606      	mov	r6, r0
 800c486:	460f      	mov	r7, r1
 800c488:	f7f4 fa98 	bl	80009bc <__aeabi_dcmplt>
 800c48c:	4623      	mov	r3, r4
 800c48e:	b118      	cbz	r0, 800c498 <gcvt+0x20>
 800c490:	222d      	movs	r2, #45	@ 0x2d
 800c492:	3d01      	subs	r5, #1
 800c494:	f803 2b01 	strb.w	r2, [r3], #1
 800c498:	2267      	movs	r2, #103	@ 0x67
 800c49a:	2100      	movs	r1, #0
 800c49c:	e9cd 5300 	strd	r5, r3, [sp]
 800c4a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c4a4:	4905      	ldr	r1, [pc, #20]	@ (800c4bc <gcvt+0x44>)
 800c4a6:	4632      	mov	r2, r6
 800c4a8:	463b      	mov	r3, r7
 800c4aa:	6808      	ldr	r0, [r1, #0]
 800c4ac:	f001 fb34 	bl	800db18 <_gcvt>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	bf18      	it	ne
 800c4b4:	4620      	movne	r0, r4
 800c4b6:	b005      	add	sp, #20
 800c4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200002f4 	.word	0x200002f4

0800c4c0 <std>:
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	b510      	push	{r4, lr}
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	e9c0 3300 	strd	r3, r3, [r0]
 800c4ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4ce:	6083      	str	r3, [r0, #8]
 800c4d0:	8181      	strh	r1, [r0, #12]
 800c4d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c4d4:	81c2      	strh	r2, [r0, #14]
 800c4d6:	6183      	str	r3, [r0, #24]
 800c4d8:	4619      	mov	r1, r3
 800c4da:	2208      	movs	r2, #8
 800c4dc:	305c      	adds	r0, #92	@ 0x5c
 800c4de:	f000 f8f4 	bl	800c6ca <memset>
 800c4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c518 <std+0x58>)
 800c4e4:	6224      	str	r4, [r4, #32]
 800c4e6:	6263      	str	r3, [r4, #36]	@ 0x24
 800c4e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c51c <std+0x5c>)
 800c4ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <std+0x60>)
 800c4ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c524 <std+0x64>)
 800c4f2:	6323      	str	r3, [r4, #48]	@ 0x30
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c528 <std+0x68>)
 800c4f6:	429c      	cmp	r4, r3
 800c4f8:	d006      	beq.n	800c508 <std+0x48>
 800c4fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c4fe:	4294      	cmp	r4, r2
 800c500:	d002      	beq.n	800c508 <std+0x48>
 800c502:	33d0      	adds	r3, #208	@ 0xd0
 800c504:	429c      	cmp	r4, r3
 800c506:	d105      	bne.n	800c514 <std+0x54>
 800c508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c510:	f000 b966 	b.w	800c7e0 <__retarget_lock_init_recursive>
 800c514:	bd10      	pop	{r4, pc}
 800c516:	bf00      	nop
 800c518:	0800c645 	.word	0x0800c645
 800c51c:	0800c667 	.word	0x0800c667
 800c520:	0800c69f 	.word	0x0800c69f
 800c524:	0800c6c3 	.word	0x0800c6c3
 800c528:	20001748 	.word	0x20001748

0800c52c <stdio_exit_handler>:
 800c52c:	4a02      	ldr	r2, [pc, #8]	@ (800c538 <stdio_exit_handler+0xc>)
 800c52e:	4903      	ldr	r1, [pc, #12]	@ (800c53c <stdio_exit_handler+0x10>)
 800c530:	4803      	ldr	r0, [pc, #12]	@ (800c540 <stdio_exit_handler+0x14>)
 800c532:	f000 b869 	b.w	800c608 <_fwalk_sglue>
 800c536:	bf00      	nop
 800c538:	2000017c 	.word	0x2000017c
 800c53c:	0800ddb9 	.word	0x0800ddb9
 800c540:	200002f8 	.word	0x200002f8

0800c544 <cleanup_stdio>:
 800c544:	6841      	ldr	r1, [r0, #4]
 800c546:	4b0c      	ldr	r3, [pc, #48]	@ (800c578 <cleanup_stdio+0x34>)
 800c548:	b510      	push	{r4, lr}
 800c54a:	4299      	cmp	r1, r3
 800c54c:	4604      	mov	r4, r0
 800c54e:	d001      	beq.n	800c554 <cleanup_stdio+0x10>
 800c550:	f001 fc32 	bl	800ddb8 <_fflush_r>
 800c554:	68a1      	ldr	r1, [r4, #8]
 800c556:	4b09      	ldr	r3, [pc, #36]	@ (800c57c <cleanup_stdio+0x38>)
 800c558:	4299      	cmp	r1, r3
 800c55a:	d002      	beq.n	800c562 <cleanup_stdio+0x1e>
 800c55c:	4620      	mov	r0, r4
 800c55e:	f001 fc2b 	bl	800ddb8 <_fflush_r>
 800c562:	68e1      	ldr	r1, [r4, #12]
 800c564:	4b06      	ldr	r3, [pc, #24]	@ (800c580 <cleanup_stdio+0x3c>)
 800c566:	4299      	cmp	r1, r3
 800c568:	d004      	beq.n	800c574 <cleanup_stdio+0x30>
 800c56a:	4620      	mov	r0, r4
 800c56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c570:	f001 bc22 	b.w	800ddb8 <_fflush_r>
 800c574:	bd10      	pop	{r4, pc}
 800c576:	bf00      	nop
 800c578:	20001748 	.word	0x20001748
 800c57c:	200017b0 	.word	0x200017b0
 800c580:	20001818 	.word	0x20001818

0800c584 <global_stdio_init.part.0>:
 800c584:	b510      	push	{r4, lr}
 800c586:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b4 <global_stdio_init.part.0+0x30>)
 800c588:	4c0b      	ldr	r4, [pc, #44]	@ (800c5b8 <global_stdio_init.part.0+0x34>)
 800c58a:	4a0c      	ldr	r2, [pc, #48]	@ (800c5bc <global_stdio_init.part.0+0x38>)
 800c58c:	4620      	mov	r0, r4
 800c58e:	601a      	str	r2, [r3, #0]
 800c590:	2104      	movs	r1, #4
 800c592:	2200      	movs	r2, #0
 800c594:	f7ff ff94 	bl	800c4c0 <std>
 800c598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c59c:	2201      	movs	r2, #1
 800c59e:	2109      	movs	r1, #9
 800c5a0:	f7ff ff8e 	bl	800c4c0 <std>
 800c5a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5ae:	2112      	movs	r1, #18
 800c5b0:	f7ff bf86 	b.w	800c4c0 <std>
 800c5b4:	20001880 	.word	0x20001880
 800c5b8:	20001748 	.word	0x20001748
 800c5bc:	0800c52d 	.word	0x0800c52d

0800c5c0 <__sfp_lock_acquire>:
 800c5c0:	4801      	ldr	r0, [pc, #4]	@ (800c5c8 <__sfp_lock_acquire+0x8>)
 800c5c2:	f000 b90e 	b.w	800c7e2 <__retarget_lock_acquire_recursive>
 800c5c6:	bf00      	nop
 800c5c8:	20001889 	.word	0x20001889

0800c5cc <__sfp_lock_release>:
 800c5cc:	4801      	ldr	r0, [pc, #4]	@ (800c5d4 <__sfp_lock_release+0x8>)
 800c5ce:	f000 b909 	b.w	800c7e4 <__retarget_lock_release_recursive>
 800c5d2:	bf00      	nop
 800c5d4:	20001889 	.word	0x20001889

0800c5d8 <__sinit>:
 800c5d8:	b510      	push	{r4, lr}
 800c5da:	4604      	mov	r4, r0
 800c5dc:	f7ff fff0 	bl	800c5c0 <__sfp_lock_acquire>
 800c5e0:	6a23      	ldr	r3, [r4, #32]
 800c5e2:	b11b      	cbz	r3, 800c5ec <__sinit+0x14>
 800c5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e8:	f7ff bff0 	b.w	800c5cc <__sfp_lock_release>
 800c5ec:	4b04      	ldr	r3, [pc, #16]	@ (800c600 <__sinit+0x28>)
 800c5ee:	6223      	str	r3, [r4, #32]
 800c5f0:	4b04      	ldr	r3, [pc, #16]	@ (800c604 <__sinit+0x2c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1f5      	bne.n	800c5e4 <__sinit+0xc>
 800c5f8:	f7ff ffc4 	bl	800c584 <global_stdio_init.part.0>
 800c5fc:	e7f2      	b.n	800c5e4 <__sinit+0xc>
 800c5fe:	bf00      	nop
 800c600:	0800c545 	.word	0x0800c545
 800c604:	20001880 	.word	0x20001880

0800c608 <_fwalk_sglue>:
 800c608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c60c:	4607      	mov	r7, r0
 800c60e:	4688      	mov	r8, r1
 800c610:	4614      	mov	r4, r2
 800c612:	2600      	movs	r6, #0
 800c614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c618:	f1b9 0901 	subs.w	r9, r9, #1
 800c61c:	d505      	bpl.n	800c62a <_fwalk_sglue+0x22>
 800c61e:	6824      	ldr	r4, [r4, #0]
 800c620:	2c00      	cmp	r4, #0
 800c622:	d1f7      	bne.n	800c614 <_fwalk_sglue+0xc>
 800c624:	4630      	mov	r0, r6
 800c626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c62a:	89ab      	ldrh	r3, [r5, #12]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d907      	bls.n	800c640 <_fwalk_sglue+0x38>
 800c630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c634:	3301      	adds	r3, #1
 800c636:	d003      	beq.n	800c640 <_fwalk_sglue+0x38>
 800c638:	4629      	mov	r1, r5
 800c63a:	4638      	mov	r0, r7
 800c63c:	47c0      	blx	r8
 800c63e:	4306      	orrs	r6, r0
 800c640:	3568      	adds	r5, #104	@ 0x68
 800c642:	e7e9      	b.n	800c618 <_fwalk_sglue+0x10>

0800c644 <__sread>:
 800c644:	b510      	push	{r4, lr}
 800c646:	460c      	mov	r4, r1
 800c648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c64c:	f000 f87a 	bl	800c744 <_read_r>
 800c650:	2800      	cmp	r0, #0
 800c652:	bfab      	itete	ge
 800c654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c656:	89a3      	ldrhlt	r3, [r4, #12]
 800c658:	181b      	addge	r3, r3, r0
 800c65a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c65e:	bfac      	ite	ge
 800c660:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c662:	81a3      	strhlt	r3, [r4, #12]
 800c664:	bd10      	pop	{r4, pc}

0800c666 <__swrite>:
 800c666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c66a:	461f      	mov	r7, r3
 800c66c:	898b      	ldrh	r3, [r1, #12]
 800c66e:	4605      	mov	r5, r0
 800c670:	05db      	lsls	r3, r3, #23
 800c672:	460c      	mov	r4, r1
 800c674:	4616      	mov	r6, r2
 800c676:	d505      	bpl.n	800c684 <__swrite+0x1e>
 800c678:	2302      	movs	r3, #2
 800c67a:	2200      	movs	r2, #0
 800c67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c680:	f000 f84e 	bl	800c720 <_lseek_r>
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	4632      	mov	r2, r6
 800c688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c68c:	81a3      	strh	r3, [r4, #12]
 800c68e:	4628      	mov	r0, r5
 800c690:	463b      	mov	r3, r7
 800c692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c69a:	f000 b865 	b.w	800c768 <_write_r>

0800c69e <__sseek>:
 800c69e:	b510      	push	{r4, lr}
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a6:	f000 f83b 	bl	800c720 <_lseek_r>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	bf15      	itete	ne
 800c6b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c6ba:	81a3      	strheq	r3, [r4, #12]
 800c6bc:	bf18      	it	ne
 800c6be:	81a3      	strhne	r3, [r4, #12]
 800c6c0:	bd10      	pop	{r4, pc}

0800c6c2 <__sclose>:
 800c6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c6:	f000 b81b 	b.w	800c700 <_close_r>

0800c6ca <memset>:
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4402      	add	r2, r0
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d100      	bne.n	800c6d4 <memset+0xa>
 800c6d2:	4770      	bx	lr
 800c6d4:	f803 1b01 	strb.w	r1, [r3], #1
 800c6d8:	e7f9      	b.n	800c6ce <memset+0x4>

0800c6da <strncmp>:
 800c6da:	b510      	push	{r4, lr}
 800c6dc:	b16a      	cbz	r2, 800c6fa <strncmp+0x20>
 800c6de:	3901      	subs	r1, #1
 800c6e0:	1884      	adds	r4, r0, r2
 800c6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d103      	bne.n	800c6f6 <strncmp+0x1c>
 800c6ee:	42a0      	cmp	r0, r4
 800c6f0:	d001      	beq.n	800c6f6 <strncmp+0x1c>
 800c6f2:	2a00      	cmp	r2, #0
 800c6f4:	d1f5      	bne.n	800c6e2 <strncmp+0x8>
 800c6f6:	1ad0      	subs	r0, r2, r3
 800c6f8:	bd10      	pop	{r4, pc}
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	e7fc      	b.n	800c6f8 <strncmp+0x1e>
	...

0800c700 <_close_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	2300      	movs	r3, #0
 800c704:	4d05      	ldr	r5, [pc, #20]	@ (800c71c <_close_r+0x1c>)
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	602b      	str	r3, [r5, #0]
 800c70c:	f7f5 fe19 	bl	8002342 <_close>
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	d102      	bne.n	800c71a <_close_r+0x1a>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	b103      	cbz	r3, 800c71a <_close_r+0x1a>
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	20001884 	.word	0x20001884

0800c720 <_lseek_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4604      	mov	r4, r0
 800c724:	4608      	mov	r0, r1
 800c726:	4611      	mov	r1, r2
 800c728:	2200      	movs	r2, #0
 800c72a:	4d05      	ldr	r5, [pc, #20]	@ (800c740 <_lseek_r+0x20>)
 800c72c:	602a      	str	r2, [r5, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	f7f5 fe2b 	bl	800238a <_lseek>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d102      	bne.n	800c73e <_lseek_r+0x1e>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	b103      	cbz	r3, 800c73e <_lseek_r+0x1e>
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	20001884 	.word	0x20001884

0800c744 <_read_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	4611      	mov	r1, r2
 800c74c:	2200      	movs	r2, #0
 800c74e:	4d05      	ldr	r5, [pc, #20]	@ (800c764 <_read_r+0x20>)
 800c750:	602a      	str	r2, [r5, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	f7f5 fdbc 	bl	80022d0 <_read>
 800c758:	1c43      	adds	r3, r0, #1
 800c75a:	d102      	bne.n	800c762 <_read_r+0x1e>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	b103      	cbz	r3, 800c762 <_read_r+0x1e>
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	20001884 	.word	0x20001884

0800c768 <_write_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4604      	mov	r4, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	4611      	mov	r1, r2
 800c770:	2200      	movs	r2, #0
 800c772:	4d05      	ldr	r5, [pc, #20]	@ (800c788 <_write_r+0x20>)
 800c774:	602a      	str	r2, [r5, #0]
 800c776:	461a      	mov	r2, r3
 800c778:	f7f5 fdc7 	bl	800230a <_write>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d102      	bne.n	800c786 <_write_r+0x1e>
 800c780:	682b      	ldr	r3, [r5, #0]
 800c782:	b103      	cbz	r3, 800c786 <_write_r+0x1e>
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	20001884 	.word	0x20001884

0800c78c <__errno>:
 800c78c:	4b01      	ldr	r3, [pc, #4]	@ (800c794 <__errno+0x8>)
 800c78e:	6818      	ldr	r0, [r3, #0]
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	200002f4 	.word	0x200002f4

0800c798 <__libc_init_array>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	2600      	movs	r6, #0
 800c79c:	4d0c      	ldr	r5, [pc, #48]	@ (800c7d0 <__libc_init_array+0x38>)
 800c79e:	4c0d      	ldr	r4, [pc, #52]	@ (800c7d4 <__libc_init_array+0x3c>)
 800c7a0:	1b64      	subs	r4, r4, r5
 800c7a2:	10a4      	asrs	r4, r4, #2
 800c7a4:	42a6      	cmp	r6, r4
 800c7a6:	d109      	bne.n	800c7bc <__libc_init_array+0x24>
 800c7a8:	f002 fe30 	bl	800f40c <_init>
 800c7ac:	2600      	movs	r6, #0
 800c7ae:	4d0a      	ldr	r5, [pc, #40]	@ (800c7d8 <__libc_init_array+0x40>)
 800c7b0:	4c0a      	ldr	r4, [pc, #40]	@ (800c7dc <__libc_init_array+0x44>)
 800c7b2:	1b64      	subs	r4, r4, r5
 800c7b4:	10a4      	asrs	r4, r4, #2
 800c7b6:	42a6      	cmp	r6, r4
 800c7b8:	d105      	bne.n	800c7c6 <__libc_init_array+0x2e>
 800c7ba:	bd70      	pop	{r4, r5, r6, pc}
 800c7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c0:	4798      	blx	r3
 800c7c2:	3601      	adds	r6, #1
 800c7c4:	e7ee      	b.n	800c7a4 <__libc_init_array+0xc>
 800c7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ca:	4798      	blx	r3
 800c7cc:	3601      	adds	r6, #1
 800c7ce:	e7f2      	b.n	800c7b6 <__libc_init_array+0x1e>
 800c7d0:	0800f8cc 	.word	0x0800f8cc
 800c7d4:	0800f8cc 	.word	0x0800f8cc
 800c7d8:	0800f8cc 	.word	0x0800f8cc
 800c7dc:	0800f8d0 	.word	0x0800f8d0

0800c7e0 <__retarget_lock_init_recursive>:
 800c7e0:	4770      	bx	lr

0800c7e2 <__retarget_lock_acquire_recursive>:
 800c7e2:	4770      	bx	lr

0800c7e4 <__retarget_lock_release_recursive>:
 800c7e4:	4770      	bx	lr

0800c7e6 <memcpy>:
 800c7e6:	440a      	add	r2, r1
 800c7e8:	4291      	cmp	r1, r2
 800c7ea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c7ee:	d100      	bne.n	800c7f2 <memcpy+0xc>
 800c7f0:	4770      	bx	lr
 800c7f2:	b510      	push	{r4, lr}
 800c7f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7f8:	4291      	cmp	r1, r2
 800c7fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7fe:	d1f9      	bne.n	800c7f4 <memcpy+0xe>
 800c800:	bd10      	pop	{r4, pc}
	...

0800c804 <nan>:
 800c804:	2000      	movs	r0, #0
 800c806:	4901      	ldr	r1, [pc, #4]	@ (800c80c <nan+0x8>)
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	7ff80000 	.word	0x7ff80000

0800c810 <_free_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4605      	mov	r5, r0
 800c814:	2900      	cmp	r1, #0
 800c816:	d040      	beq.n	800c89a <_free_r+0x8a>
 800c818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c81c:	1f0c      	subs	r4, r1, #4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bfb8      	it	lt
 800c822:	18e4      	addlt	r4, r4, r3
 800c824:	f000 fc2a 	bl	800d07c <__malloc_lock>
 800c828:	4a1c      	ldr	r2, [pc, #112]	@ (800c89c <_free_r+0x8c>)
 800c82a:	6813      	ldr	r3, [r2, #0]
 800c82c:	b933      	cbnz	r3, 800c83c <_free_r+0x2c>
 800c82e:	6063      	str	r3, [r4, #4]
 800c830:	6014      	str	r4, [r2, #0]
 800c832:	4628      	mov	r0, r5
 800c834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c838:	f000 bc26 	b.w	800d088 <__malloc_unlock>
 800c83c:	42a3      	cmp	r3, r4
 800c83e:	d908      	bls.n	800c852 <_free_r+0x42>
 800c840:	6820      	ldr	r0, [r4, #0]
 800c842:	1821      	adds	r1, r4, r0
 800c844:	428b      	cmp	r3, r1
 800c846:	bf01      	itttt	eq
 800c848:	6819      	ldreq	r1, [r3, #0]
 800c84a:	685b      	ldreq	r3, [r3, #4]
 800c84c:	1809      	addeq	r1, r1, r0
 800c84e:	6021      	streq	r1, [r4, #0]
 800c850:	e7ed      	b.n	800c82e <_free_r+0x1e>
 800c852:	461a      	mov	r2, r3
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	b10b      	cbz	r3, 800c85c <_free_r+0x4c>
 800c858:	42a3      	cmp	r3, r4
 800c85a:	d9fa      	bls.n	800c852 <_free_r+0x42>
 800c85c:	6811      	ldr	r1, [r2, #0]
 800c85e:	1850      	adds	r0, r2, r1
 800c860:	42a0      	cmp	r0, r4
 800c862:	d10b      	bne.n	800c87c <_free_r+0x6c>
 800c864:	6820      	ldr	r0, [r4, #0]
 800c866:	4401      	add	r1, r0
 800c868:	1850      	adds	r0, r2, r1
 800c86a:	4283      	cmp	r3, r0
 800c86c:	6011      	str	r1, [r2, #0]
 800c86e:	d1e0      	bne.n	800c832 <_free_r+0x22>
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	4408      	add	r0, r1
 800c876:	6010      	str	r0, [r2, #0]
 800c878:	6053      	str	r3, [r2, #4]
 800c87a:	e7da      	b.n	800c832 <_free_r+0x22>
 800c87c:	d902      	bls.n	800c884 <_free_r+0x74>
 800c87e:	230c      	movs	r3, #12
 800c880:	602b      	str	r3, [r5, #0]
 800c882:	e7d6      	b.n	800c832 <_free_r+0x22>
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	1821      	adds	r1, r4, r0
 800c888:	428b      	cmp	r3, r1
 800c88a:	bf01      	itttt	eq
 800c88c:	6819      	ldreq	r1, [r3, #0]
 800c88e:	685b      	ldreq	r3, [r3, #4]
 800c890:	1809      	addeq	r1, r1, r0
 800c892:	6021      	streq	r1, [r4, #0]
 800c894:	6063      	str	r3, [r4, #4]
 800c896:	6054      	str	r4, [r2, #4]
 800c898:	e7cb      	b.n	800c832 <_free_r+0x22>
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	20001890 	.word	0x20001890

0800c8a0 <rshift>:
 800c8a0:	6903      	ldr	r3, [r0, #16]
 800c8a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8aa:	f100 0414 	add.w	r4, r0, #20
 800c8ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8b2:	dd46      	ble.n	800c942 <rshift+0xa2>
 800c8b4:	f011 011f 	ands.w	r1, r1, #31
 800c8b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8c0:	d10c      	bne.n	800c8dc <rshift+0x3c>
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	f100 0710 	add.w	r7, r0, #16
 800c8c8:	42b1      	cmp	r1, r6
 800c8ca:	d335      	bcc.n	800c938 <rshift+0x98>
 800c8cc:	1a9b      	subs	r3, r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	1eea      	subs	r2, r5, #3
 800c8d2:	4296      	cmp	r6, r2
 800c8d4:	bf38      	it	cc
 800c8d6:	2300      	movcc	r3, #0
 800c8d8:	4423      	add	r3, r4
 800c8da:	e015      	b.n	800c908 <rshift+0x68>
 800c8dc:	46a1      	mov	r9, r4
 800c8de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c8e2:	f1c1 0820 	rsb	r8, r1, #32
 800c8e6:	40cf      	lsrs	r7, r1
 800c8e8:	f105 0e04 	add.w	lr, r5, #4
 800c8ec:	4576      	cmp	r6, lr
 800c8ee:	46f4      	mov	ip, lr
 800c8f0:	d816      	bhi.n	800c920 <rshift+0x80>
 800c8f2:	1a9a      	subs	r2, r3, r2
 800c8f4:	0092      	lsls	r2, r2, #2
 800c8f6:	3a04      	subs	r2, #4
 800c8f8:	3501      	adds	r5, #1
 800c8fa:	42ae      	cmp	r6, r5
 800c8fc:	bf38      	it	cc
 800c8fe:	2200      	movcc	r2, #0
 800c900:	18a3      	adds	r3, r4, r2
 800c902:	50a7      	str	r7, [r4, r2]
 800c904:	b107      	cbz	r7, 800c908 <rshift+0x68>
 800c906:	3304      	adds	r3, #4
 800c908:	42a3      	cmp	r3, r4
 800c90a:	eba3 0204 	sub.w	r2, r3, r4
 800c90e:	bf08      	it	eq
 800c910:	2300      	moveq	r3, #0
 800c912:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c916:	6102      	str	r2, [r0, #16]
 800c918:	bf08      	it	eq
 800c91a:	6143      	streq	r3, [r0, #20]
 800c91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c920:	f8dc c000 	ldr.w	ip, [ip]
 800c924:	fa0c fc08 	lsl.w	ip, ip, r8
 800c928:	ea4c 0707 	orr.w	r7, ip, r7
 800c92c:	f849 7b04 	str.w	r7, [r9], #4
 800c930:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c934:	40cf      	lsrs	r7, r1
 800c936:	e7d9      	b.n	800c8ec <rshift+0x4c>
 800c938:	f851 cb04 	ldr.w	ip, [r1], #4
 800c93c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c940:	e7c2      	b.n	800c8c8 <rshift+0x28>
 800c942:	4623      	mov	r3, r4
 800c944:	e7e0      	b.n	800c908 <rshift+0x68>

0800c946 <__hexdig_fun>:
 800c946:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c94a:	2b09      	cmp	r3, #9
 800c94c:	d802      	bhi.n	800c954 <__hexdig_fun+0xe>
 800c94e:	3820      	subs	r0, #32
 800c950:	b2c0      	uxtb	r0, r0
 800c952:	4770      	bx	lr
 800c954:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c958:	2b05      	cmp	r3, #5
 800c95a:	d801      	bhi.n	800c960 <__hexdig_fun+0x1a>
 800c95c:	3847      	subs	r0, #71	@ 0x47
 800c95e:	e7f7      	b.n	800c950 <__hexdig_fun+0xa>
 800c960:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c964:	2b05      	cmp	r3, #5
 800c966:	d801      	bhi.n	800c96c <__hexdig_fun+0x26>
 800c968:	3827      	subs	r0, #39	@ 0x27
 800c96a:	e7f1      	b.n	800c950 <__hexdig_fun+0xa>
 800c96c:	2000      	movs	r0, #0
 800c96e:	4770      	bx	lr

0800c970 <__gethex>:
 800c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	468a      	mov	sl, r1
 800c976:	4690      	mov	r8, r2
 800c978:	b085      	sub	sp, #20
 800c97a:	9302      	str	r3, [sp, #8]
 800c97c:	680b      	ldr	r3, [r1, #0]
 800c97e:	9001      	str	r0, [sp, #4]
 800c980:	1c9c      	adds	r4, r3, #2
 800c982:	46a1      	mov	r9, r4
 800c984:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c988:	2830      	cmp	r0, #48	@ 0x30
 800c98a:	d0fa      	beq.n	800c982 <__gethex+0x12>
 800c98c:	eba9 0303 	sub.w	r3, r9, r3
 800c990:	f1a3 0b02 	sub.w	fp, r3, #2
 800c994:	f7ff ffd7 	bl	800c946 <__hexdig_fun>
 800c998:	4605      	mov	r5, r0
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d168      	bne.n	800ca70 <__gethex+0x100>
 800c99e:	2201      	movs	r2, #1
 800c9a0:	4648      	mov	r0, r9
 800c9a2:	499f      	ldr	r1, [pc, #636]	@ (800cc20 <__gethex+0x2b0>)
 800c9a4:	f7ff fe99 	bl	800c6da <strncmp>
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d167      	bne.n	800ca7e <__gethex+0x10e>
 800c9ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c9b2:	4626      	mov	r6, r4
 800c9b4:	f7ff ffc7 	bl	800c946 <__hexdig_fun>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d062      	beq.n	800ca82 <__gethex+0x112>
 800c9bc:	4623      	mov	r3, r4
 800c9be:	7818      	ldrb	r0, [r3, #0]
 800c9c0:	4699      	mov	r9, r3
 800c9c2:	2830      	cmp	r0, #48	@ 0x30
 800c9c4:	f103 0301 	add.w	r3, r3, #1
 800c9c8:	d0f9      	beq.n	800c9be <__gethex+0x4e>
 800c9ca:	f7ff ffbc 	bl	800c946 <__hexdig_fun>
 800c9ce:	fab0 f580 	clz	r5, r0
 800c9d2:	f04f 0b01 	mov.w	fp, #1
 800c9d6:	096d      	lsrs	r5, r5, #5
 800c9d8:	464a      	mov	r2, r9
 800c9da:	4616      	mov	r6, r2
 800c9dc:	7830      	ldrb	r0, [r6, #0]
 800c9de:	3201      	adds	r2, #1
 800c9e0:	f7ff ffb1 	bl	800c946 <__hexdig_fun>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d1f8      	bne.n	800c9da <__gethex+0x6a>
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	498c      	ldr	r1, [pc, #560]	@ (800cc20 <__gethex+0x2b0>)
 800c9ee:	f7ff fe74 	bl	800c6da <strncmp>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d13f      	bne.n	800ca76 <__gethex+0x106>
 800c9f6:	b944      	cbnz	r4, 800ca0a <__gethex+0x9a>
 800c9f8:	1c74      	adds	r4, r6, #1
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	4616      	mov	r6, r2
 800c9fe:	7830      	ldrb	r0, [r6, #0]
 800ca00:	3201      	adds	r2, #1
 800ca02:	f7ff ffa0 	bl	800c946 <__hexdig_fun>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d1f8      	bne.n	800c9fc <__gethex+0x8c>
 800ca0a:	1ba4      	subs	r4, r4, r6
 800ca0c:	00a7      	lsls	r7, r4, #2
 800ca0e:	7833      	ldrb	r3, [r6, #0]
 800ca10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ca14:	2b50      	cmp	r3, #80	@ 0x50
 800ca16:	d13e      	bne.n	800ca96 <__gethex+0x126>
 800ca18:	7873      	ldrb	r3, [r6, #1]
 800ca1a:	2b2b      	cmp	r3, #43	@ 0x2b
 800ca1c:	d033      	beq.n	800ca86 <__gethex+0x116>
 800ca1e:	2b2d      	cmp	r3, #45	@ 0x2d
 800ca20:	d034      	beq.n	800ca8c <__gethex+0x11c>
 800ca22:	2400      	movs	r4, #0
 800ca24:	1c71      	adds	r1, r6, #1
 800ca26:	7808      	ldrb	r0, [r1, #0]
 800ca28:	f7ff ff8d 	bl	800c946 <__hexdig_fun>
 800ca2c:	1e43      	subs	r3, r0, #1
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	2b18      	cmp	r3, #24
 800ca32:	d830      	bhi.n	800ca96 <__gethex+0x126>
 800ca34:	f1a0 0210 	sub.w	r2, r0, #16
 800ca38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca3c:	f7ff ff83 	bl	800c946 <__hexdig_fun>
 800ca40:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ca44:	fa5f fc8c 	uxtb.w	ip, ip
 800ca48:	f1bc 0f18 	cmp.w	ip, #24
 800ca4c:	f04f 030a 	mov.w	r3, #10
 800ca50:	d91e      	bls.n	800ca90 <__gethex+0x120>
 800ca52:	b104      	cbz	r4, 800ca56 <__gethex+0xe6>
 800ca54:	4252      	negs	r2, r2
 800ca56:	4417      	add	r7, r2
 800ca58:	f8ca 1000 	str.w	r1, [sl]
 800ca5c:	b1ed      	cbz	r5, 800ca9a <__gethex+0x12a>
 800ca5e:	f1bb 0f00 	cmp.w	fp, #0
 800ca62:	bf0c      	ite	eq
 800ca64:	2506      	moveq	r5, #6
 800ca66:	2500      	movne	r5, #0
 800ca68:	4628      	mov	r0, r5
 800ca6a:	b005      	add	sp, #20
 800ca6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca70:	2500      	movs	r5, #0
 800ca72:	462c      	mov	r4, r5
 800ca74:	e7b0      	b.n	800c9d8 <__gethex+0x68>
 800ca76:	2c00      	cmp	r4, #0
 800ca78:	d1c7      	bne.n	800ca0a <__gethex+0x9a>
 800ca7a:	4627      	mov	r7, r4
 800ca7c:	e7c7      	b.n	800ca0e <__gethex+0x9e>
 800ca7e:	464e      	mov	r6, r9
 800ca80:	462f      	mov	r7, r5
 800ca82:	2501      	movs	r5, #1
 800ca84:	e7c3      	b.n	800ca0e <__gethex+0x9e>
 800ca86:	2400      	movs	r4, #0
 800ca88:	1cb1      	adds	r1, r6, #2
 800ca8a:	e7cc      	b.n	800ca26 <__gethex+0xb6>
 800ca8c:	2401      	movs	r4, #1
 800ca8e:	e7fb      	b.n	800ca88 <__gethex+0x118>
 800ca90:	fb03 0002 	mla	r0, r3, r2, r0
 800ca94:	e7ce      	b.n	800ca34 <__gethex+0xc4>
 800ca96:	4631      	mov	r1, r6
 800ca98:	e7de      	b.n	800ca58 <__gethex+0xe8>
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	eba6 0309 	sub.w	r3, r6, r9
 800caa0:	3b01      	subs	r3, #1
 800caa2:	2b07      	cmp	r3, #7
 800caa4:	dc0a      	bgt.n	800cabc <__gethex+0x14c>
 800caa6:	9801      	ldr	r0, [sp, #4]
 800caa8:	f000 faf4 	bl	800d094 <_Balloc>
 800caac:	4604      	mov	r4, r0
 800caae:	b940      	cbnz	r0, 800cac2 <__gethex+0x152>
 800cab0:	4602      	mov	r2, r0
 800cab2:	21e4      	movs	r1, #228	@ 0xe4
 800cab4:	4b5b      	ldr	r3, [pc, #364]	@ (800cc24 <__gethex+0x2b4>)
 800cab6:	485c      	ldr	r0, [pc, #368]	@ (800cc28 <__gethex+0x2b8>)
 800cab8:	f001 f9be 	bl	800de38 <__assert_func>
 800cabc:	3101      	adds	r1, #1
 800cabe:	105b      	asrs	r3, r3, #1
 800cac0:	e7ef      	b.n	800caa2 <__gethex+0x132>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f100 0a14 	add.w	sl, r0, #20
 800cac8:	4655      	mov	r5, sl
 800caca:	469b      	mov	fp, r3
 800cacc:	45b1      	cmp	r9, r6
 800cace:	d337      	bcc.n	800cb40 <__gethex+0x1d0>
 800cad0:	f845 bb04 	str.w	fp, [r5], #4
 800cad4:	eba5 050a 	sub.w	r5, r5, sl
 800cad8:	10ad      	asrs	r5, r5, #2
 800cada:	6125      	str	r5, [r4, #16]
 800cadc:	4658      	mov	r0, fp
 800cade:	f000 fbcb 	bl	800d278 <__hi0bits>
 800cae2:	016d      	lsls	r5, r5, #5
 800cae4:	f8d8 6000 	ldr.w	r6, [r8]
 800cae8:	1a2d      	subs	r5, r5, r0
 800caea:	42b5      	cmp	r5, r6
 800caec:	dd54      	ble.n	800cb98 <__gethex+0x228>
 800caee:	1bad      	subs	r5, r5, r6
 800caf0:	4629      	mov	r1, r5
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 ff69 	bl	800d9ca <__any_on>
 800caf8:	4681      	mov	r9, r0
 800cafa:	b178      	cbz	r0, 800cb1c <__gethex+0x1ac>
 800cafc:	f04f 0901 	mov.w	r9, #1
 800cb00:	1e6b      	subs	r3, r5, #1
 800cb02:	1159      	asrs	r1, r3, #5
 800cb04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb08:	f003 021f 	and.w	r2, r3, #31
 800cb0c:	fa09 f202 	lsl.w	r2, r9, r2
 800cb10:	420a      	tst	r2, r1
 800cb12:	d003      	beq.n	800cb1c <__gethex+0x1ac>
 800cb14:	454b      	cmp	r3, r9
 800cb16:	dc36      	bgt.n	800cb86 <__gethex+0x216>
 800cb18:	f04f 0902 	mov.w	r9, #2
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7ff febe 	bl	800c8a0 <rshift>
 800cb24:	442f      	add	r7, r5
 800cb26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb2a:	42bb      	cmp	r3, r7
 800cb2c:	da42      	bge.n	800cbb4 <__gethex+0x244>
 800cb2e:	4621      	mov	r1, r4
 800cb30:	9801      	ldr	r0, [sp, #4]
 800cb32:	f000 faef 	bl	800d114 <_Bfree>
 800cb36:	2300      	movs	r3, #0
 800cb38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb3a:	25a3      	movs	r5, #163	@ 0xa3
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	e793      	b.n	800ca68 <__gethex+0xf8>
 800cb40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cb44:	2a2e      	cmp	r2, #46	@ 0x2e
 800cb46:	d012      	beq.n	800cb6e <__gethex+0x1fe>
 800cb48:	2b20      	cmp	r3, #32
 800cb4a:	d104      	bne.n	800cb56 <__gethex+0x1e6>
 800cb4c:	f845 bb04 	str.w	fp, [r5], #4
 800cb50:	f04f 0b00 	mov.w	fp, #0
 800cb54:	465b      	mov	r3, fp
 800cb56:	7830      	ldrb	r0, [r6, #0]
 800cb58:	9303      	str	r3, [sp, #12]
 800cb5a:	f7ff fef4 	bl	800c946 <__hexdig_fun>
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	f000 000f 	and.w	r0, r0, #15
 800cb64:	4098      	lsls	r0, r3
 800cb66:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb6a:	3304      	adds	r3, #4
 800cb6c:	e7ae      	b.n	800cacc <__gethex+0x15c>
 800cb6e:	45b1      	cmp	r9, r6
 800cb70:	d8ea      	bhi.n	800cb48 <__gethex+0x1d8>
 800cb72:	2201      	movs	r2, #1
 800cb74:	4630      	mov	r0, r6
 800cb76:	492a      	ldr	r1, [pc, #168]	@ (800cc20 <__gethex+0x2b0>)
 800cb78:	9303      	str	r3, [sp, #12]
 800cb7a:	f7ff fdae 	bl	800c6da <strncmp>
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d1e1      	bne.n	800cb48 <__gethex+0x1d8>
 800cb84:	e7a2      	b.n	800cacc <__gethex+0x15c>
 800cb86:	4620      	mov	r0, r4
 800cb88:	1ea9      	subs	r1, r5, #2
 800cb8a:	f000 ff1e 	bl	800d9ca <__any_on>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d0c2      	beq.n	800cb18 <__gethex+0x1a8>
 800cb92:	f04f 0903 	mov.w	r9, #3
 800cb96:	e7c1      	b.n	800cb1c <__gethex+0x1ac>
 800cb98:	da09      	bge.n	800cbae <__gethex+0x23e>
 800cb9a:	1b75      	subs	r5, r6, r5
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	462a      	mov	r2, r5
 800cba0:	9801      	ldr	r0, [sp, #4]
 800cba2:	f000 fcc7 	bl	800d534 <__lshift>
 800cba6:	4604      	mov	r4, r0
 800cba8:	1b7f      	subs	r7, r7, r5
 800cbaa:	f100 0a14 	add.w	sl, r0, #20
 800cbae:	f04f 0900 	mov.w	r9, #0
 800cbb2:	e7b8      	b.n	800cb26 <__gethex+0x1b6>
 800cbb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cbb8:	42bd      	cmp	r5, r7
 800cbba:	dd6f      	ble.n	800cc9c <__gethex+0x32c>
 800cbbc:	1bed      	subs	r5, r5, r7
 800cbbe:	42ae      	cmp	r6, r5
 800cbc0:	dc34      	bgt.n	800cc2c <__gethex+0x2bc>
 800cbc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d022      	beq.n	800cc10 <__gethex+0x2a0>
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d024      	beq.n	800cc18 <__gethex+0x2a8>
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d115      	bne.n	800cbfe <__gethex+0x28e>
 800cbd2:	42ae      	cmp	r6, r5
 800cbd4:	d113      	bne.n	800cbfe <__gethex+0x28e>
 800cbd6:	2e01      	cmp	r6, #1
 800cbd8:	d10b      	bne.n	800cbf2 <__gethex+0x282>
 800cbda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbde:	9a02      	ldr	r2, [sp, #8]
 800cbe0:	2562      	movs	r5, #98	@ 0x62
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	6123      	str	r3, [r4, #16]
 800cbe8:	f8ca 3000 	str.w	r3, [sl]
 800cbec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbee:	601c      	str	r4, [r3, #0]
 800cbf0:	e73a      	b.n	800ca68 <__gethex+0xf8>
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	1e71      	subs	r1, r6, #1
 800cbf6:	f000 fee8 	bl	800d9ca <__any_on>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d1ed      	bne.n	800cbda <__gethex+0x26a>
 800cbfe:	4621      	mov	r1, r4
 800cc00:	9801      	ldr	r0, [sp, #4]
 800cc02:	f000 fa87 	bl	800d114 <_Bfree>
 800cc06:	2300      	movs	r3, #0
 800cc08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc0a:	2550      	movs	r5, #80	@ 0x50
 800cc0c:	6013      	str	r3, [r2, #0]
 800cc0e:	e72b      	b.n	800ca68 <__gethex+0xf8>
 800cc10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1f3      	bne.n	800cbfe <__gethex+0x28e>
 800cc16:	e7e0      	b.n	800cbda <__gethex+0x26a>
 800cc18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1dd      	bne.n	800cbda <__gethex+0x26a>
 800cc1e:	e7ee      	b.n	800cbfe <__gethex+0x28e>
 800cc20:	0800f4a2 	.word	0x0800f4a2
 800cc24:	0800f4b2 	.word	0x0800f4b2
 800cc28:	0800f4c3 	.word	0x0800f4c3
 800cc2c:	1e6f      	subs	r7, r5, #1
 800cc2e:	f1b9 0f00 	cmp.w	r9, #0
 800cc32:	d130      	bne.n	800cc96 <__gethex+0x326>
 800cc34:	b127      	cbz	r7, 800cc40 <__gethex+0x2d0>
 800cc36:	4639      	mov	r1, r7
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f000 fec6 	bl	800d9ca <__any_on>
 800cc3e:	4681      	mov	r9, r0
 800cc40:	2301      	movs	r3, #1
 800cc42:	4629      	mov	r1, r5
 800cc44:	1b76      	subs	r6, r6, r5
 800cc46:	2502      	movs	r5, #2
 800cc48:	117a      	asrs	r2, r7, #5
 800cc4a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cc4e:	f007 071f 	and.w	r7, r7, #31
 800cc52:	40bb      	lsls	r3, r7
 800cc54:	4213      	tst	r3, r2
 800cc56:	4620      	mov	r0, r4
 800cc58:	bf18      	it	ne
 800cc5a:	f049 0902 	orrne.w	r9, r9, #2
 800cc5e:	f7ff fe1f 	bl	800c8a0 <rshift>
 800cc62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cc66:	f1b9 0f00 	cmp.w	r9, #0
 800cc6a:	d047      	beq.n	800ccfc <__gethex+0x38c>
 800cc6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d015      	beq.n	800cca0 <__gethex+0x330>
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d017      	beq.n	800cca8 <__gethex+0x338>
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d109      	bne.n	800cc90 <__gethex+0x320>
 800cc7c:	f019 0f02 	tst.w	r9, #2
 800cc80:	d006      	beq.n	800cc90 <__gethex+0x320>
 800cc82:	f8da 3000 	ldr.w	r3, [sl]
 800cc86:	ea49 0903 	orr.w	r9, r9, r3
 800cc8a:	f019 0f01 	tst.w	r9, #1
 800cc8e:	d10e      	bne.n	800ccae <__gethex+0x33e>
 800cc90:	f045 0510 	orr.w	r5, r5, #16
 800cc94:	e032      	b.n	800ccfc <__gethex+0x38c>
 800cc96:	f04f 0901 	mov.w	r9, #1
 800cc9a:	e7d1      	b.n	800cc40 <__gethex+0x2d0>
 800cc9c:	2501      	movs	r5, #1
 800cc9e:	e7e2      	b.n	800cc66 <__gethex+0x2f6>
 800cca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cca2:	f1c3 0301 	rsb	r3, r3, #1
 800cca6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d0f0      	beq.n	800cc90 <__gethex+0x320>
 800ccae:	f04f 0c00 	mov.w	ip, #0
 800ccb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ccb6:	f104 0314 	add.w	r3, r4, #20
 800ccba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ccbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccc8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800cccc:	d01b      	beq.n	800cd06 <__gethex+0x396>
 800ccce:	3201      	adds	r2, #1
 800ccd0:	6002      	str	r2, [r0, #0]
 800ccd2:	2d02      	cmp	r5, #2
 800ccd4:	f104 0314 	add.w	r3, r4, #20
 800ccd8:	d13c      	bne.n	800cd54 <__gethex+0x3e4>
 800ccda:	f8d8 2000 	ldr.w	r2, [r8]
 800ccde:	3a01      	subs	r2, #1
 800cce0:	42b2      	cmp	r2, r6
 800cce2:	d109      	bne.n	800ccf8 <__gethex+0x388>
 800cce4:	2201      	movs	r2, #1
 800cce6:	1171      	asrs	r1, r6, #5
 800cce8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccec:	f006 061f 	and.w	r6, r6, #31
 800ccf0:	fa02 f606 	lsl.w	r6, r2, r6
 800ccf4:	421e      	tst	r6, r3
 800ccf6:	d13a      	bne.n	800cd6e <__gethex+0x3fe>
 800ccf8:	f045 0520 	orr.w	r5, r5, #32
 800ccfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccfe:	601c      	str	r4, [r3, #0]
 800cd00:	9b02      	ldr	r3, [sp, #8]
 800cd02:	601f      	str	r7, [r3, #0]
 800cd04:	e6b0      	b.n	800ca68 <__gethex+0xf8>
 800cd06:	4299      	cmp	r1, r3
 800cd08:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd0c:	d8d9      	bhi.n	800ccc2 <__gethex+0x352>
 800cd0e:	68a3      	ldr	r3, [r4, #8]
 800cd10:	459b      	cmp	fp, r3
 800cd12:	db17      	blt.n	800cd44 <__gethex+0x3d4>
 800cd14:	6861      	ldr	r1, [r4, #4]
 800cd16:	9801      	ldr	r0, [sp, #4]
 800cd18:	3101      	adds	r1, #1
 800cd1a:	f000 f9bb 	bl	800d094 <_Balloc>
 800cd1e:	4681      	mov	r9, r0
 800cd20:	b918      	cbnz	r0, 800cd2a <__gethex+0x3ba>
 800cd22:	4602      	mov	r2, r0
 800cd24:	2184      	movs	r1, #132	@ 0x84
 800cd26:	4b19      	ldr	r3, [pc, #100]	@ (800cd8c <__gethex+0x41c>)
 800cd28:	e6c5      	b.n	800cab6 <__gethex+0x146>
 800cd2a:	6922      	ldr	r2, [r4, #16]
 800cd2c:	f104 010c 	add.w	r1, r4, #12
 800cd30:	3202      	adds	r2, #2
 800cd32:	0092      	lsls	r2, r2, #2
 800cd34:	300c      	adds	r0, #12
 800cd36:	f7ff fd56 	bl	800c7e6 <memcpy>
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	9801      	ldr	r0, [sp, #4]
 800cd3e:	f000 f9e9 	bl	800d114 <_Bfree>
 800cd42:	464c      	mov	r4, r9
 800cd44:	6923      	ldr	r3, [r4, #16]
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	6122      	str	r2, [r4, #16]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd50:	615a      	str	r2, [r3, #20]
 800cd52:	e7be      	b.n	800ccd2 <__gethex+0x362>
 800cd54:	6922      	ldr	r2, [r4, #16]
 800cd56:	455a      	cmp	r2, fp
 800cd58:	dd0b      	ble.n	800cd72 <__gethex+0x402>
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f7ff fd9f 	bl	800c8a0 <rshift>
 800cd62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd66:	3701      	adds	r7, #1
 800cd68:	42bb      	cmp	r3, r7
 800cd6a:	f6ff aee0 	blt.w	800cb2e <__gethex+0x1be>
 800cd6e:	2501      	movs	r5, #1
 800cd70:	e7c2      	b.n	800ccf8 <__gethex+0x388>
 800cd72:	f016 061f 	ands.w	r6, r6, #31
 800cd76:	d0fa      	beq.n	800cd6e <__gethex+0x3fe>
 800cd78:	4453      	add	r3, sl
 800cd7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd7e:	f000 fa7b 	bl	800d278 <__hi0bits>
 800cd82:	f1c6 0620 	rsb	r6, r6, #32
 800cd86:	42b0      	cmp	r0, r6
 800cd88:	dbe7      	blt.n	800cd5a <__gethex+0x3ea>
 800cd8a:	e7f0      	b.n	800cd6e <__gethex+0x3fe>
 800cd8c:	0800f4b2 	.word	0x0800f4b2

0800cd90 <L_shift>:
 800cd90:	f1c2 0208 	rsb	r2, r2, #8
 800cd94:	0092      	lsls	r2, r2, #2
 800cd96:	b570      	push	{r4, r5, r6, lr}
 800cd98:	f1c2 0620 	rsb	r6, r2, #32
 800cd9c:	6843      	ldr	r3, [r0, #4]
 800cd9e:	6804      	ldr	r4, [r0, #0]
 800cda0:	fa03 f506 	lsl.w	r5, r3, r6
 800cda4:	432c      	orrs	r4, r5
 800cda6:	40d3      	lsrs	r3, r2
 800cda8:	6004      	str	r4, [r0, #0]
 800cdaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdae:	4288      	cmp	r0, r1
 800cdb0:	d3f4      	bcc.n	800cd9c <L_shift+0xc>
 800cdb2:	bd70      	pop	{r4, r5, r6, pc}

0800cdb4 <__match>:
 800cdb4:	b530      	push	{r4, r5, lr}
 800cdb6:	6803      	ldr	r3, [r0, #0]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdbe:	b914      	cbnz	r4, 800cdc6 <__match+0x12>
 800cdc0:	6003      	str	r3, [r0, #0]
 800cdc2:	2001      	movs	r0, #1
 800cdc4:	bd30      	pop	{r4, r5, pc}
 800cdc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cdce:	2d19      	cmp	r5, #25
 800cdd0:	bf98      	it	ls
 800cdd2:	3220      	addls	r2, #32
 800cdd4:	42a2      	cmp	r2, r4
 800cdd6:	d0f0      	beq.n	800cdba <__match+0x6>
 800cdd8:	2000      	movs	r0, #0
 800cdda:	e7f3      	b.n	800cdc4 <__match+0x10>

0800cddc <__hexnan>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	2500      	movs	r5, #0
 800cde2:	680b      	ldr	r3, [r1, #0]
 800cde4:	4682      	mov	sl, r0
 800cde6:	115e      	asrs	r6, r3, #5
 800cde8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdec:	f013 031f 	ands.w	r3, r3, #31
 800cdf0:	bf18      	it	ne
 800cdf2:	3604      	addne	r6, #4
 800cdf4:	1f37      	subs	r7, r6, #4
 800cdf6:	4690      	mov	r8, r2
 800cdf8:	46b9      	mov	r9, r7
 800cdfa:	463c      	mov	r4, r7
 800cdfc:	46ab      	mov	fp, r5
 800cdfe:	b087      	sub	sp, #28
 800ce00:	6801      	ldr	r1, [r0, #0]
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce08:	9502      	str	r5, [sp, #8]
 800ce0a:	784a      	ldrb	r2, [r1, #1]
 800ce0c:	1c4b      	adds	r3, r1, #1
 800ce0e:	9303      	str	r3, [sp, #12]
 800ce10:	b342      	cbz	r2, 800ce64 <__hexnan+0x88>
 800ce12:	4610      	mov	r0, r2
 800ce14:	9105      	str	r1, [sp, #20]
 800ce16:	9204      	str	r2, [sp, #16]
 800ce18:	f7ff fd95 	bl	800c946 <__hexdig_fun>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d151      	bne.n	800cec4 <__hexnan+0xe8>
 800ce20:	9a04      	ldr	r2, [sp, #16]
 800ce22:	9905      	ldr	r1, [sp, #20]
 800ce24:	2a20      	cmp	r2, #32
 800ce26:	d818      	bhi.n	800ce5a <__hexnan+0x7e>
 800ce28:	9b02      	ldr	r3, [sp, #8]
 800ce2a:	459b      	cmp	fp, r3
 800ce2c:	dd13      	ble.n	800ce56 <__hexnan+0x7a>
 800ce2e:	454c      	cmp	r4, r9
 800ce30:	d206      	bcs.n	800ce40 <__hexnan+0x64>
 800ce32:	2d07      	cmp	r5, #7
 800ce34:	dc04      	bgt.n	800ce40 <__hexnan+0x64>
 800ce36:	462a      	mov	r2, r5
 800ce38:	4649      	mov	r1, r9
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f7ff ffa8 	bl	800cd90 <L_shift>
 800ce40:	4544      	cmp	r4, r8
 800ce42:	d952      	bls.n	800ceea <__hexnan+0x10e>
 800ce44:	2300      	movs	r3, #0
 800ce46:	f1a4 0904 	sub.w	r9, r4, #4
 800ce4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce4e:	461d      	mov	r5, r3
 800ce50:	464c      	mov	r4, r9
 800ce52:	f8cd b008 	str.w	fp, [sp, #8]
 800ce56:	9903      	ldr	r1, [sp, #12]
 800ce58:	e7d7      	b.n	800ce0a <__hexnan+0x2e>
 800ce5a:	2a29      	cmp	r2, #41	@ 0x29
 800ce5c:	d157      	bne.n	800cf0e <__hexnan+0x132>
 800ce5e:	3102      	adds	r1, #2
 800ce60:	f8ca 1000 	str.w	r1, [sl]
 800ce64:	f1bb 0f00 	cmp.w	fp, #0
 800ce68:	d051      	beq.n	800cf0e <__hexnan+0x132>
 800ce6a:	454c      	cmp	r4, r9
 800ce6c:	d206      	bcs.n	800ce7c <__hexnan+0xa0>
 800ce6e:	2d07      	cmp	r5, #7
 800ce70:	dc04      	bgt.n	800ce7c <__hexnan+0xa0>
 800ce72:	462a      	mov	r2, r5
 800ce74:	4649      	mov	r1, r9
 800ce76:	4620      	mov	r0, r4
 800ce78:	f7ff ff8a 	bl	800cd90 <L_shift>
 800ce7c:	4544      	cmp	r4, r8
 800ce7e:	d936      	bls.n	800ceee <__hexnan+0x112>
 800ce80:	4623      	mov	r3, r4
 800ce82:	f1a8 0204 	sub.w	r2, r8, #4
 800ce86:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce8a:	429f      	cmp	r7, r3
 800ce8c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce90:	d2f9      	bcs.n	800ce86 <__hexnan+0xaa>
 800ce92:	1b3b      	subs	r3, r7, r4
 800ce94:	f023 0303 	bic.w	r3, r3, #3
 800ce98:	3304      	adds	r3, #4
 800ce9a:	3401      	adds	r4, #1
 800ce9c:	3e03      	subs	r6, #3
 800ce9e:	42b4      	cmp	r4, r6
 800cea0:	bf88      	it	hi
 800cea2:	2304      	movhi	r3, #4
 800cea4:	2200      	movs	r2, #0
 800cea6:	4443      	add	r3, r8
 800cea8:	f843 2b04 	str.w	r2, [r3], #4
 800ceac:	429f      	cmp	r7, r3
 800ceae:	d2fb      	bcs.n	800cea8 <__hexnan+0xcc>
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	b91b      	cbnz	r3, 800cebc <__hexnan+0xe0>
 800ceb4:	4547      	cmp	r7, r8
 800ceb6:	d128      	bne.n	800cf0a <__hexnan+0x12e>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	2005      	movs	r0, #5
 800cebe:	b007      	add	sp, #28
 800cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec4:	3501      	adds	r5, #1
 800cec6:	2d08      	cmp	r5, #8
 800cec8:	f10b 0b01 	add.w	fp, fp, #1
 800cecc:	dd06      	ble.n	800cedc <__hexnan+0x100>
 800cece:	4544      	cmp	r4, r8
 800ced0:	d9c1      	bls.n	800ce56 <__hexnan+0x7a>
 800ced2:	2300      	movs	r3, #0
 800ced4:	2501      	movs	r5, #1
 800ced6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceda:	3c04      	subs	r4, #4
 800cedc:	6822      	ldr	r2, [r4, #0]
 800cede:	f000 000f 	and.w	r0, r0, #15
 800cee2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cee6:	6020      	str	r0, [r4, #0]
 800cee8:	e7b5      	b.n	800ce56 <__hexnan+0x7a>
 800ceea:	2508      	movs	r5, #8
 800ceec:	e7b3      	b.n	800ce56 <__hexnan+0x7a>
 800ceee:	9b01      	ldr	r3, [sp, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0dd      	beq.n	800ceb0 <__hexnan+0xd4>
 800cef4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cef8:	f1c3 0320 	rsb	r3, r3, #32
 800cefc:	40da      	lsrs	r2, r3
 800cefe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf02:	4013      	ands	r3, r2
 800cf04:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf08:	e7d2      	b.n	800ceb0 <__hexnan+0xd4>
 800cf0a:	3f04      	subs	r7, #4
 800cf0c:	e7d0      	b.n	800ceb0 <__hexnan+0xd4>
 800cf0e:	2004      	movs	r0, #4
 800cf10:	e7d5      	b.n	800cebe <__hexnan+0xe2>
	...

0800cf14 <sbrk_aligned>:
 800cf14:	b570      	push	{r4, r5, r6, lr}
 800cf16:	4e0f      	ldr	r6, [pc, #60]	@ (800cf54 <sbrk_aligned+0x40>)
 800cf18:	460c      	mov	r4, r1
 800cf1a:	6831      	ldr	r1, [r6, #0]
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	b911      	cbnz	r1, 800cf26 <sbrk_aligned+0x12>
 800cf20:	f000 ff72 	bl	800de08 <_sbrk_r>
 800cf24:	6030      	str	r0, [r6, #0]
 800cf26:	4621      	mov	r1, r4
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f000 ff6d 	bl	800de08 <_sbrk_r>
 800cf2e:	1c43      	adds	r3, r0, #1
 800cf30:	d103      	bne.n	800cf3a <sbrk_aligned+0x26>
 800cf32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cf36:	4620      	mov	r0, r4
 800cf38:	bd70      	pop	{r4, r5, r6, pc}
 800cf3a:	1cc4      	adds	r4, r0, #3
 800cf3c:	f024 0403 	bic.w	r4, r4, #3
 800cf40:	42a0      	cmp	r0, r4
 800cf42:	d0f8      	beq.n	800cf36 <sbrk_aligned+0x22>
 800cf44:	1a21      	subs	r1, r4, r0
 800cf46:	4628      	mov	r0, r5
 800cf48:	f000 ff5e 	bl	800de08 <_sbrk_r>
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d1f2      	bne.n	800cf36 <sbrk_aligned+0x22>
 800cf50:	e7ef      	b.n	800cf32 <sbrk_aligned+0x1e>
 800cf52:	bf00      	nop
 800cf54:	2000188c 	.word	0x2000188c

0800cf58 <_malloc_r>:
 800cf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf5c:	1ccd      	adds	r5, r1, #3
 800cf5e:	f025 0503 	bic.w	r5, r5, #3
 800cf62:	3508      	adds	r5, #8
 800cf64:	2d0c      	cmp	r5, #12
 800cf66:	bf38      	it	cc
 800cf68:	250c      	movcc	r5, #12
 800cf6a:	2d00      	cmp	r5, #0
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	db01      	blt.n	800cf74 <_malloc_r+0x1c>
 800cf70:	42a9      	cmp	r1, r5
 800cf72:	d904      	bls.n	800cf7e <_malloc_r+0x26>
 800cf74:	230c      	movs	r3, #12
 800cf76:	6033      	str	r3, [r6, #0]
 800cf78:	2000      	movs	r0, #0
 800cf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d054 <_malloc_r+0xfc>
 800cf82:	f000 f87b 	bl	800d07c <__malloc_lock>
 800cf86:	f8d8 3000 	ldr.w	r3, [r8]
 800cf8a:	461c      	mov	r4, r3
 800cf8c:	bb44      	cbnz	r4, 800cfe0 <_malloc_r+0x88>
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4630      	mov	r0, r6
 800cf92:	f7ff ffbf 	bl	800cf14 <sbrk_aligned>
 800cf96:	1c43      	adds	r3, r0, #1
 800cf98:	4604      	mov	r4, r0
 800cf9a:	d158      	bne.n	800d04e <_malloc_r+0xf6>
 800cf9c:	f8d8 4000 	ldr.w	r4, [r8]
 800cfa0:	4627      	mov	r7, r4
 800cfa2:	2f00      	cmp	r7, #0
 800cfa4:	d143      	bne.n	800d02e <_malloc_r+0xd6>
 800cfa6:	2c00      	cmp	r4, #0
 800cfa8:	d04b      	beq.n	800d042 <_malloc_r+0xea>
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	4639      	mov	r1, r7
 800cfae:	4630      	mov	r0, r6
 800cfb0:	eb04 0903 	add.w	r9, r4, r3
 800cfb4:	f000 ff28 	bl	800de08 <_sbrk_r>
 800cfb8:	4581      	cmp	r9, r0
 800cfba:	d142      	bne.n	800d042 <_malloc_r+0xea>
 800cfbc:	6821      	ldr	r1, [r4, #0]
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	1a6d      	subs	r5, r5, r1
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	f7ff ffa6 	bl	800cf14 <sbrk_aligned>
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d03a      	beq.n	800d042 <_malloc_r+0xea>
 800cfcc:	6823      	ldr	r3, [r4, #0]
 800cfce:	442b      	add	r3, r5
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfd6:	685a      	ldr	r2, [r3, #4]
 800cfd8:	bb62      	cbnz	r2, 800d034 <_malloc_r+0xdc>
 800cfda:	f8c8 7000 	str.w	r7, [r8]
 800cfde:	e00f      	b.n	800d000 <_malloc_r+0xa8>
 800cfe0:	6822      	ldr	r2, [r4, #0]
 800cfe2:	1b52      	subs	r2, r2, r5
 800cfe4:	d420      	bmi.n	800d028 <_malloc_r+0xd0>
 800cfe6:	2a0b      	cmp	r2, #11
 800cfe8:	d917      	bls.n	800d01a <_malloc_r+0xc2>
 800cfea:	1961      	adds	r1, r4, r5
 800cfec:	42a3      	cmp	r3, r4
 800cfee:	6025      	str	r5, [r4, #0]
 800cff0:	bf18      	it	ne
 800cff2:	6059      	strne	r1, [r3, #4]
 800cff4:	6863      	ldr	r3, [r4, #4]
 800cff6:	bf08      	it	eq
 800cff8:	f8c8 1000 	streq.w	r1, [r8]
 800cffc:	5162      	str	r2, [r4, r5]
 800cffe:	604b      	str	r3, [r1, #4]
 800d000:	4630      	mov	r0, r6
 800d002:	f000 f841 	bl	800d088 <__malloc_unlock>
 800d006:	f104 000b 	add.w	r0, r4, #11
 800d00a:	1d23      	adds	r3, r4, #4
 800d00c:	f020 0007 	bic.w	r0, r0, #7
 800d010:	1ac2      	subs	r2, r0, r3
 800d012:	bf1c      	itt	ne
 800d014:	1a1b      	subne	r3, r3, r0
 800d016:	50a3      	strne	r3, [r4, r2]
 800d018:	e7af      	b.n	800cf7a <_malloc_r+0x22>
 800d01a:	6862      	ldr	r2, [r4, #4]
 800d01c:	42a3      	cmp	r3, r4
 800d01e:	bf0c      	ite	eq
 800d020:	f8c8 2000 	streq.w	r2, [r8]
 800d024:	605a      	strne	r2, [r3, #4]
 800d026:	e7eb      	b.n	800d000 <_malloc_r+0xa8>
 800d028:	4623      	mov	r3, r4
 800d02a:	6864      	ldr	r4, [r4, #4]
 800d02c:	e7ae      	b.n	800cf8c <_malloc_r+0x34>
 800d02e:	463c      	mov	r4, r7
 800d030:	687f      	ldr	r7, [r7, #4]
 800d032:	e7b6      	b.n	800cfa2 <_malloc_r+0x4a>
 800d034:	461a      	mov	r2, r3
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	42a3      	cmp	r3, r4
 800d03a:	d1fb      	bne.n	800d034 <_malloc_r+0xdc>
 800d03c:	2300      	movs	r3, #0
 800d03e:	6053      	str	r3, [r2, #4]
 800d040:	e7de      	b.n	800d000 <_malloc_r+0xa8>
 800d042:	230c      	movs	r3, #12
 800d044:	4630      	mov	r0, r6
 800d046:	6033      	str	r3, [r6, #0]
 800d048:	f000 f81e 	bl	800d088 <__malloc_unlock>
 800d04c:	e794      	b.n	800cf78 <_malloc_r+0x20>
 800d04e:	6005      	str	r5, [r0, #0]
 800d050:	e7d6      	b.n	800d000 <_malloc_r+0xa8>
 800d052:	bf00      	nop
 800d054:	20001890 	.word	0x20001890

0800d058 <__ascii_mbtowc>:
 800d058:	b082      	sub	sp, #8
 800d05a:	b901      	cbnz	r1, 800d05e <__ascii_mbtowc+0x6>
 800d05c:	a901      	add	r1, sp, #4
 800d05e:	b142      	cbz	r2, 800d072 <__ascii_mbtowc+0x1a>
 800d060:	b14b      	cbz	r3, 800d076 <__ascii_mbtowc+0x1e>
 800d062:	7813      	ldrb	r3, [r2, #0]
 800d064:	600b      	str	r3, [r1, #0]
 800d066:	7812      	ldrb	r2, [r2, #0]
 800d068:	1e10      	subs	r0, r2, #0
 800d06a:	bf18      	it	ne
 800d06c:	2001      	movne	r0, #1
 800d06e:	b002      	add	sp, #8
 800d070:	4770      	bx	lr
 800d072:	4610      	mov	r0, r2
 800d074:	e7fb      	b.n	800d06e <__ascii_mbtowc+0x16>
 800d076:	f06f 0001 	mvn.w	r0, #1
 800d07a:	e7f8      	b.n	800d06e <__ascii_mbtowc+0x16>

0800d07c <__malloc_lock>:
 800d07c:	4801      	ldr	r0, [pc, #4]	@ (800d084 <__malloc_lock+0x8>)
 800d07e:	f7ff bbb0 	b.w	800c7e2 <__retarget_lock_acquire_recursive>
 800d082:	bf00      	nop
 800d084:	20001888 	.word	0x20001888

0800d088 <__malloc_unlock>:
 800d088:	4801      	ldr	r0, [pc, #4]	@ (800d090 <__malloc_unlock+0x8>)
 800d08a:	f7ff bbab 	b.w	800c7e4 <__retarget_lock_release_recursive>
 800d08e:	bf00      	nop
 800d090:	20001888 	.word	0x20001888

0800d094 <_Balloc>:
 800d094:	b570      	push	{r4, r5, r6, lr}
 800d096:	69c6      	ldr	r6, [r0, #28]
 800d098:	4604      	mov	r4, r0
 800d09a:	460d      	mov	r5, r1
 800d09c:	b976      	cbnz	r6, 800d0bc <_Balloc+0x28>
 800d09e:	2010      	movs	r0, #16
 800d0a0:	f001 fd5a 	bl	800eb58 <malloc>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	61e0      	str	r0, [r4, #28]
 800d0a8:	b920      	cbnz	r0, 800d0b4 <_Balloc+0x20>
 800d0aa:	216b      	movs	r1, #107	@ 0x6b
 800d0ac:	4b17      	ldr	r3, [pc, #92]	@ (800d10c <_Balloc+0x78>)
 800d0ae:	4818      	ldr	r0, [pc, #96]	@ (800d110 <_Balloc+0x7c>)
 800d0b0:	f000 fec2 	bl	800de38 <__assert_func>
 800d0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0b8:	6006      	str	r6, [r0, #0]
 800d0ba:	60c6      	str	r6, [r0, #12]
 800d0bc:	69e6      	ldr	r6, [r4, #28]
 800d0be:	68f3      	ldr	r3, [r6, #12]
 800d0c0:	b183      	cbz	r3, 800d0e4 <_Balloc+0x50>
 800d0c2:	69e3      	ldr	r3, [r4, #28]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d0ca:	b9b8      	cbnz	r0, 800d0fc <_Balloc+0x68>
 800d0cc:	2101      	movs	r1, #1
 800d0ce:	fa01 f605 	lsl.w	r6, r1, r5
 800d0d2:	1d72      	adds	r2, r6, #5
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	0092      	lsls	r2, r2, #2
 800d0d8:	f000 fecc 	bl	800de74 <_calloc_r>
 800d0dc:	b160      	cbz	r0, 800d0f8 <_Balloc+0x64>
 800d0de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0e2:	e00e      	b.n	800d102 <_Balloc+0x6e>
 800d0e4:	2221      	movs	r2, #33	@ 0x21
 800d0e6:	2104      	movs	r1, #4
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f000 fec3 	bl	800de74 <_calloc_r>
 800d0ee:	69e3      	ldr	r3, [r4, #28]
 800d0f0:	60f0      	str	r0, [r6, #12]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1e4      	bne.n	800d0c2 <_Balloc+0x2e>
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	bd70      	pop	{r4, r5, r6, pc}
 800d0fc:	6802      	ldr	r2, [r0, #0]
 800d0fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d102:	2300      	movs	r3, #0
 800d104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d108:	e7f7      	b.n	800d0fa <_Balloc+0x66>
 800d10a:	bf00      	nop
 800d10c:	0800f523 	.word	0x0800f523
 800d110:	0800f53a 	.word	0x0800f53a

0800d114 <_Bfree>:
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	69c6      	ldr	r6, [r0, #28]
 800d118:	4605      	mov	r5, r0
 800d11a:	460c      	mov	r4, r1
 800d11c:	b976      	cbnz	r6, 800d13c <_Bfree+0x28>
 800d11e:	2010      	movs	r0, #16
 800d120:	f001 fd1a 	bl	800eb58 <malloc>
 800d124:	4602      	mov	r2, r0
 800d126:	61e8      	str	r0, [r5, #28]
 800d128:	b920      	cbnz	r0, 800d134 <_Bfree+0x20>
 800d12a:	218f      	movs	r1, #143	@ 0x8f
 800d12c:	4b08      	ldr	r3, [pc, #32]	@ (800d150 <_Bfree+0x3c>)
 800d12e:	4809      	ldr	r0, [pc, #36]	@ (800d154 <_Bfree+0x40>)
 800d130:	f000 fe82 	bl	800de38 <__assert_func>
 800d134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d138:	6006      	str	r6, [r0, #0]
 800d13a:	60c6      	str	r6, [r0, #12]
 800d13c:	b13c      	cbz	r4, 800d14e <_Bfree+0x3a>
 800d13e:	69eb      	ldr	r3, [r5, #28]
 800d140:	6862      	ldr	r2, [r4, #4]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d148:	6021      	str	r1, [r4, #0]
 800d14a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d14e:	bd70      	pop	{r4, r5, r6, pc}
 800d150:	0800f523 	.word	0x0800f523
 800d154:	0800f53a 	.word	0x0800f53a

0800d158 <__multadd>:
 800d158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d15c:	4607      	mov	r7, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	461e      	mov	r6, r3
 800d162:	2000      	movs	r0, #0
 800d164:	690d      	ldr	r5, [r1, #16]
 800d166:	f101 0c14 	add.w	ip, r1, #20
 800d16a:	f8dc 3000 	ldr.w	r3, [ip]
 800d16e:	3001      	adds	r0, #1
 800d170:	b299      	uxth	r1, r3
 800d172:	fb02 6101 	mla	r1, r2, r1, r6
 800d176:	0c1e      	lsrs	r6, r3, #16
 800d178:	0c0b      	lsrs	r3, r1, #16
 800d17a:	fb02 3306 	mla	r3, r2, r6, r3
 800d17e:	b289      	uxth	r1, r1
 800d180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d184:	4285      	cmp	r5, r0
 800d186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d18a:	f84c 1b04 	str.w	r1, [ip], #4
 800d18e:	dcec      	bgt.n	800d16a <__multadd+0x12>
 800d190:	b30e      	cbz	r6, 800d1d6 <__multadd+0x7e>
 800d192:	68a3      	ldr	r3, [r4, #8]
 800d194:	42ab      	cmp	r3, r5
 800d196:	dc19      	bgt.n	800d1cc <__multadd+0x74>
 800d198:	6861      	ldr	r1, [r4, #4]
 800d19a:	4638      	mov	r0, r7
 800d19c:	3101      	adds	r1, #1
 800d19e:	f7ff ff79 	bl	800d094 <_Balloc>
 800d1a2:	4680      	mov	r8, r0
 800d1a4:	b928      	cbnz	r0, 800d1b2 <__multadd+0x5a>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	21ba      	movs	r1, #186	@ 0xba
 800d1aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d1dc <__multadd+0x84>)
 800d1ac:	480c      	ldr	r0, [pc, #48]	@ (800d1e0 <__multadd+0x88>)
 800d1ae:	f000 fe43 	bl	800de38 <__assert_func>
 800d1b2:	6922      	ldr	r2, [r4, #16]
 800d1b4:	f104 010c 	add.w	r1, r4, #12
 800d1b8:	3202      	adds	r2, #2
 800d1ba:	0092      	lsls	r2, r2, #2
 800d1bc:	300c      	adds	r0, #12
 800d1be:	f7ff fb12 	bl	800c7e6 <memcpy>
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	4638      	mov	r0, r7
 800d1c6:	f7ff ffa5 	bl	800d114 <_Bfree>
 800d1ca:	4644      	mov	r4, r8
 800d1cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1d0:	3501      	adds	r5, #1
 800d1d2:	615e      	str	r6, [r3, #20]
 800d1d4:	6125      	str	r5, [r4, #16]
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1dc:	0800f4b2 	.word	0x0800f4b2
 800d1e0:	0800f53a 	.word	0x0800f53a

0800d1e4 <__s2b>:
 800d1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1e8:	4615      	mov	r5, r2
 800d1ea:	2209      	movs	r2, #9
 800d1ec:	461f      	mov	r7, r3
 800d1ee:	3308      	adds	r3, #8
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	2100      	movs	r1, #0
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	db09      	blt.n	800d214 <__s2b+0x30>
 800d200:	4630      	mov	r0, r6
 800d202:	f7ff ff47 	bl	800d094 <_Balloc>
 800d206:	b940      	cbnz	r0, 800d21a <__s2b+0x36>
 800d208:	4602      	mov	r2, r0
 800d20a:	21d3      	movs	r1, #211	@ 0xd3
 800d20c:	4b18      	ldr	r3, [pc, #96]	@ (800d270 <__s2b+0x8c>)
 800d20e:	4819      	ldr	r0, [pc, #100]	@ (800d274 <__s2b+0x90>)
 800d210:	f000 fe12 	bl	800de38 <__assert_func>
 800d214:	0052      	lsls	r2, r2, #1
 800d216:	3101      	adds	r1, #1
 800d218:	e7f0      	b.n	800d1fc <__s2b+0x18>
 800d21a:	9b08      	ldr	r3, [sp, #32]
 800d21c:	2d09      	cmp	r5, #9
 800d21e:	6143      	str	r3, [r0, #20]
 800d220:	f04f 0301 	mov.w	r3, #1
 800d224:	6103      	str	r3, [r0, #16]
 800d226:	dd16      	ble.n	800d256 <__s2b+0x72>
 800d228:	f104 0909 	add.w	r9, r4, #9
 800d22c:	46c8      	mov	r8, r9
 800d22e:	442c      	add	r4, r5
 800d230:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d234:	4601      	mov	r1, r0
 800d236:	220a      	movs	r2, #10
 800d238:	4630      	mov	r0, r6
 800d23a:	3b30      	subs	r3, #48	@ 0x30
 800d23c:	f7ff ff8c 	bl	800d158 <__multadd>
 800d240:	45a0      	cmp	r8, r4
 800d242:	d1f5      	bne.n	800d230 <__s2b+0x4c>
 800d244:	f1a5 0408 	sub.w	r4, r5, #8
 800d248:	444c      	add	r4, r9
 800d24a:	1b2d      	subs	r5, r5, r4
 800d24c:	1963      	adds	r3, r4, r5
 800d24e:	42bb      	cmp	r3, r7
 800d250:	db04      	blt.n	800d25c <__s2b+0x78>
 800d252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d256:	2509      	movs	r5, #9
 800d258:	340a      	adds	r4, #10
 800d25a:	e7f6      	b.n	800d24a <__s2b+0x66>
 800d25c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d260:	4601      	mov	r1, r0
 800d262:	220a      	movs	r2, #10
 800d264:	4630      	mov	r0, r6
 800d266:	3b30      	subs	r3, #48	@ 0x30
 800d268:	f7ff ff76 	bl	800d158 <__multadd>
 800d26c:	e7ee      	b.n	800d24c <__s2b+0x68>
 800d26e:	bf00      	nop
 800d270:	0800f4b2 	.word	0x0800f4b2
 800d274:	0800f53a 	.word	0x0800f53a

0800d278 <__hi0bits>:
 800d278:	4603      	mov	r3, r0
 800d27a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d27e:	bf3a      	itte	cc
 800d280:	0403      	lslcc	r3, r0, #16
 800d282:	2010      	movcc	r0, #16
 800d284:	2000      	movcs	r0, #0
 800d286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d28a:	bf3c      	itt	cc
 800d28c:	021b      	lslcc	r3, r3, #8
 800d28e:	3008      	addcc	r0, #8
 800d290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d294:	bf3c      	itt	cc
 800d296:	011b      	lslcc	r3, r3, #4
 800d298:	3004      	addcc	r0, #4
 800d29a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d29e:	bf3c      	itt	cc
 800d2a0:	009b      	lslcc	r3, r3, #2
 800d2a2:	3002      	addcc	r0, #2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	db05      	blt.n	800d2b4 <__hi0bits+0x3c>
 800d2a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d2ac:	f100 0001 	add.w	r0, r0, #1
 800d2b0:	bf08      	it	eq
 800d2b2:	2020      	moveq	r0, #32
 800d2b4:	4770      	bx	lr

0800d2b6 <__lo0bits>:
 800d2b6:	6803      	ldr	r3, [r0, #0]
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	f013 0007 	ands.w	r0, r3, #7
 800d2be:	d00b      	beq.n	800d2d8 <__lo0bits+0x22>
 800d2c0:	07d9      	lsls	r1, r3, #31
 800d2c2:	d421      	bmi.n	800d308 <__lo0bits+0x52>
 800d2c4:	0798      	lsls	r0, r3, #30
 800d2c6:	bf49      	itett	mi
 800d2c8:	085b      	lsrmi	r3, r3, #1
 800d2ca:	089b      	lsrpl	r3, r3, #2
 800d2cc:	2001      	movmi	r0, #1
 800d2ce:	6013      	strmi	r3, [r2, #0]
 800d2d0:	bf5c      	itt	pl
 800d2d2:	2002      	movpl	r0, #2
 800d2d4:	6013      	strpl	r3, [r2, #0]
 800d2d6:	4770      	bx	lr
 800d2d8:	b299      	uxth	r1, r3
 800d2da:	b909      	cbnz	r1, 800d2e0 <__lo0bits+0x2a>
 800d2dc:	2010      	movs	r0, #16
 800d2de:	0c1b      	lsrs	r3, r3, #16
 800d2e0:	b2d9      	uxtb	r1, r3
 800d2e2:	b909      	cbnz	r1, 800d2e8 <__lo0bits+0x32>
 800d2e4:	3008      	adds	r0, #8
 800d2e6:	0a1b      	lsrs	r3, r3, #8
 800d2e8:	0719      	lsls	r1, r3, #28
 800d2ea:	bf04      	itt	eq
 800d2ec:	091b      	lsreq	r3, r3, #4
 800d2ee:	3004      	addeq	r0, #4
 800d2f0:	0799      	lsls	r1, r3, #30
 800d2f2:	bf04      	itt	eq
 800d2f4:	089b      	lsreq	r3, r3, #2
 800d2f6:	3002      	addeq	r0, #2
 800d2f8:	07d9      	lsls	r1, r3, #31
 800d2fa:	d403      	bmi.n	800d304 <__lo0bits+0x4e>
 800d2fc:	085b      	lsrs	r3, r3, #1
 800d2fe:	f100 0001 	add.w	r0, r0, #1
 800d302:	d003      	beq.n	800d30c <__lo0bits+0x56>
 800d304:	6013      	str	r3, [r2, #0]
 800d306:	4770      	bx	lr
 800d308:	2000      	movs	r0, #0
 800d30a:	4770      	bx	lr
 800d30c:	2020      	movs	r0, #32
 800d30e:	4770      	bx	lr

0800d310 <__i2b>:
 800d310:	b510      	push	{r4, lr}
 800d312:	460c      	mov	r4, r1
 800d314:	2101      	movs	r1, #1
 800d316:	f7ff febd 	bl	800d094 <_Balloc>
 800d31a:	4602      	mov	r2, r0
 800d31c:	b928      	cbnz	r0, 800d32a <__i2b+0x1a>
 800d31e:	f240 1145 	movw	r1, #325	@ 0x145
 800d322:	4b04      	ldr	r3, [pc, #16]	@ (800d334 <__i2b+0x24>)
 800d324:	4804      	ldr	r0, [pc, #16]	@ (800d338 <__i2b+0x28>)
 800d326:	f000 fd87 	bl	800de38 <__assert_func>
 800d32a:	2301      	movs	r3, #1
 800d32c:	6144      	str	r4, [r0, #20]
 800d32e:	6103      	str	r3, [r0, #16]
 800d330:	bd10      	pop	{r4, pc}
 800d332:	bf00      	nop
 800d334:	0800f4b2 	.word	0x0800f4b2
 800d338:	0800f53a 	.word	0x0800f53a

0800d33c <__multiply>:
 800d33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d340:	4617      	mov	r7, r2
 800d342:	690a      	ldr	r2, [r1, #16]
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	4689      	mov	r9, r1
 800d348:	429a      	cmp	r2, r3
 800d34a:	bfa2      	ittt	ge
 800d34c:	463b      	movge	r3, r7
 800d34e:	460f      	movge	r7, r1
 800d350:	4699      	movge	r9, r3
 800d352:	693d      	ldr	r5, [r7, #16]
 800d354:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	eb05 060a 	add.w	r6, r5, sl
 800d360:	42b3      	cmp	r3, r6
 800d362:	b085      	sub	sp, #20
 800d364:	bfb8      	it	lt
 800d366:	3101      	addlt	r1, #1
 800d368:	f7ff fe94 	bl	800d094 <_Balloc>
 800d36c:	b930      	cbnz	r0, 800d37c <__multiply+0x40>
 800d36e:	4602      	mov	r2, r0
 800d370:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d374:	4b40      	ldr	r3, [pc, #256]	@ (800d478 <__multiply+0x13c>)
 800d376:	4841      	ldr	r0, [pc, #260]	@ (800d47c <__multiply+0x140>)
 800d378:	f000 fd5e 	bl	800de38 <__assert_func>
 800d37c:	f100 0414 	add.w	r4, r0, #20
 800d380:	4623      	mov	r3, r4
 800d382:	2200      	movs	r2, #0
 800d384:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d388:	4573      	cmp	r3, lr
 800d38a:	d320      	bcc.n	800d3ce <__multiply+0x92>
 800d38c:	f107 0814 	add.w	r8, r7, #20
 800d390:	f109 0114 	add.w	r1, r9, #20
 800d394:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d398:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	1beb      	subs	r3, r5, r7
 800d3a0:	3b15      	subs	r3, #21
 800d3a2:	f023 0303 	bic.w	r3, r3, #3
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	3715      	adds	r7, #21
 800d3aa:	42bd      	cmp	r5, r7
 800d3ac:	bf38      	it	cc
 800d3ae:	2304      	movcc	r3, #4
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	9b02      	ldr	r3, [sp, #8]
 800d3b4:	9103      	str	r1, [sp, #12]
 800d3b6:	428b      	cmp	r3, r1
 800d3b8:	d80c      	bhi.n	800d3d4 <__multiply+0x98>
 800d3ba:	2e00      	cmp	r6, #0
 800d3bc:	dd03      	ble.n	800d3c6 <__multiply+0x8a>
 800d3be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d055      	beq.n	800d472 <__multiply+0x136>
 800d3c6:	6106      	str	r6, [r0, #16]
 800d3c8:	b005      	add	sp, #20
 800d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ce:	f843 2b04 	str.w	r2, [r3], #4
 800d3d2:	e7d9      	b.n	800d388 <__multiply+0x4c>
 800d3d4:	f8b1 a000 	ldrh.w	sl, [r1]
 800d3d8:	f1ba 0f00 	cmp.w	sl, #0
 800d3dc:	d01f      	beq.n	800d41e <__multiply+0xe2>
 800d3de:	46c4      	mov	ip, r8
 800d3e0:	46a1      	mov	r9, r4
 800d3e2:	2700      	movs	r7, #0
 800d3e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d3e8:	f8d9 3000 	ldr.w	r3, [r9]
 800d3ec:	fa1f fb82 	uxth.w	fp, r2
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	fb0a 330b 	mla	r3, sl, fp, r3
 800d3f6:	443b      	add	r3, r7
 800d3f8:	f8d9 7000 	ldr.w	r7, [r9]
 800d3fc:	0c12      	lsrs	r2, r2, #16
 800d3fe:	0c3f      	lsrs	r7, r7, #16
 800d400:	fb0a 7202 	mla	r2, sl, r2, r7
 800d404:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d408:	b29b      	uxth	r3, r3
 800d40a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d40e:	4565      	cmp	r5, ip
 800d410:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d414:	f849 3b04 	str.w	r3, [r9], #4
 800d418:	d8e4      	bhi.n	800d3e4 <__multiply+0xa8>
 800d41a:	9b01      	ldr	r3, [sp, #4]
 800d41c:	50e7      	str	r7, [r4, r3]
 800d41e:	9b03      	ldr	r3, [sp, #12]
 800d420:	3104      	adds	r1, #4
 800d422:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d426:	f1b9 0f00 	cmp.w	r9, #0
 800d42a:	d020      	beq.n	800d46e <__multiply+0x132>
 800d42c:	4647      	mov	r7, r8
 800d42e:	46a4      	mov	ip, r4
 800d430:	f04f 0a00 	mov.w	sl, #0
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	f8b7 b000 	ldrh.w	fp, [r7]
 800d43a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d43e:	b29b      	uxth	r3, r3
 800d440:	fb09 220b 	mla	r2, r9, fp, r2
 800d444:	4452      	add	r2, sl
 800d446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d44a:	f84c 3b04 	str.w	r3, [ip], #4
 800d44e:	f857 3b04 	ldr.w	r3, [r7], #4
 800d452:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d456:	f8bc 3000 	ldrh.w	r3, [ip]
 800d45a:	42bd      	cmp	r5, r7
 800d45c:	fb09 330a 	mla	r3, r9, sl, r3
 800d460:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d464:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d468:	d8e5      	bhi.n	800d436 <__multiply+0xfa>
 800d46a:	9a01      	ldr	r2, [sp, #4]
 800d46c:	50a3      	str	r3, [r4, r2]
 800d46e:	3404      	adds	r4, #4
 800d470:	e79f      	b.n	800d3b2 <__multiply+0x76>
 800d472:	3e01      	subs	r6, #1
 800d474:	e7a1      	b.n	800d3ba <__multiply+0x7e>
 800d476:	bf00      	nop
 800d478:	0800f4b2 	.word	0x0800f4b2
 800d47c:	0800f53a 	.word	0x0800f53a

0800d480 <__pow5mult>:
 800d480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d484:	4615      	mov	r5, r2
 800d486:	f012 0203 	ands.w	r2, r2, #3
 800d48a:	4607      	mov	r7, r0
 800d48c:	460e      	mov	r6, r1
 800d48e:	d007      	beq.n	800d4a0 <__pow5mult+0x20>
 800d490:	4c25      	ldr	r4, [pc, #148]	@ (800d528 <__pow5mult+0xa8>)
 800d492:	3a01      	subs	r2, #1
 800d494:	2300      	movs	r3, #0
 800d496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d49a:	f7ff fe5d 	bl	800d158 <__multadd>
 800d49e:	4606      	mov	r6, r0
 800d4a0:	10ad      	asrs	r5, r5, #2
 800d4a2:	d03d      	beq.n	800d520 <__pow5mult+0xa0>
 800d4a4:	69fc      	ldr	r4, [r7, #28]
 800d4a6:	b97c      	cbnz	r4, 800d4c8 <__pow5mult+0x48>
 800d4a8:	2010      	movs	r0, #16
 800d4aa:	f001 fb55 	bl	800eb58 <malloc>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	61f8      	str	r0, [r7, #28]
 800d4b2:	b928      	cbnz	r0, 800d4c0 <__pow5mult+0x40>
 800d4b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d4b8:	4b1c      	ldr	r3, [pc, #112]	@ (800d52c <__pow5mult+0xac>)
 800d4ba:	481d      	ldr	r0, [pc, #116]	@ (800d530 <__pow5mult+0xb0>)
 800d4bc:	f000 fcbc 	bl	800de38 <__assert_func>
 800d4c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4c4:	6004      	str	r4, [r0, #0]
 800d4c6:	60c4      	str	r4, [r0, #12]
 800d4c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d4cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4d0:	b94c      	cbnz	r4, 800d4e6 <__pow5mult+0x66>
 800d4d2:	f240 2171 	movw	r1, #625	@ 0x271
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	f7ff ff1a 	bl	800d310 <__i2b>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4604      	mov	r4, r0
 800d4e0:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4e4:	6003      	str	r3, [r0, #0]
 800d4e6:	f04f 0900 	mov.w	r9, #0
 800d4ea:	07eb      	lsls	r3, r5, #31
 800d4ec:	d50a      	bpl.n	800d504 <__pow5mult+0x84>
 800d4ee:	4631      	mov	r1, r6
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	f7ff ff22 	bl	800d33c <__multiply>
 800d4f8:	4680      	mov	r8, r0
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	f7ff fe09 	bl	800d114 <_Bfree>
 800d502:	4646      	mov	r6, r8
 800d504:	106d      	asrs	r5, r5, #1
 800d506:	d00b      	beq.n	800d520 <__pow5mult+0xa0>
 800d508:	6820      	ldr	r0, [r4, #0]
 800d50a:	b938      	cbnz	r0, 800d51c <__pow5mult+0x9c>
 800d50c:	4622      	mov	r2, r4
 800d50e:	4621      	mov	r1, r4
 800d510:	4638      	mov	r0, r7
 800d512:	f7ff ff13 	bl	800d33c <__multiply>
 800d516:	6020      	str	r0, [r4, #0]
 800d518:	f8c0 9000 	str.w	r9, [r0]
 800d51c:	4604      	mov	r4, r0
 800d51e:	e7e4      	b.n	800d4ea <__pow5mult+0x6a>
 800d520:	4630      	mov	r0, r6
 800d522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d526:	bf00      	nop
 800d528:	0800f6c0 	.word	0x0800f6c0
 800d52c:	0800f523 	.word	0x0800f523
 800d530:	0800f53a 	.word	0x0800f53a

0800d534 <__lshift>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	460c      	mov	r4, r1
 800d53a:	4607      	mov	r7, r0
 800d53c:	4691      	mov	r9, r2
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	6849      	ldr	r1, [r1, #4]
 800d542:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d546:	68a3      	ldr	r3, [r4, #8]
 800d548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d54c:	f108 0601 	add.w	r6, r8, #1
 800d550:	42b3      	cmp	r3, r6
 800d552:	db0b      	blt.n	800d56c <__lshift+0x38>
 800d554:	4638      	mov	r0, r7
 800d556:	f7ff fd9d 	bl	800d094 <_Balloc>
 800d55a:	4605      	mov	r5, r0
 800d55c:	b948      	cbnz	r0, 800d572 <__lshift+0x3e>
 800d55e:	4602      	mov	r2, r0
 800d560:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d564:	4b27      	ldr	r3, [pc, #156]	@ (800d604 <__lshift+0xd0>)
 800d566:	4828      	ldr	r0, [pc, #160]	@ (800d608 <__lshift+0xd4>)
 800d568:	f000 fc66 	bl	800de38 <__assert_func>
 800d56c:	3101      	adds	r1, #1
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	e7ee      	b.n	800d550 <__lshift+0x1c>
 800d572:	2300      	movs	r3, #0
 800d574:	f100 0114 	add.w	r1, r0, #20
 800d578:	f100 0210 	add.w	r2, r0, #16
 800d57c:	4618      	mov	r0, r3
 800d57e:	4553      	cmp	r3, sl
 800d580:	db33      	blt.n	800d5ea <__lshift+0xb6>
 800d582:	6920      	ldr	r0, [r4, #16]
 800d584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d588:	f104 0314 	add.w	r3, r4, #20
 800d58c:	f019 091f 	ands.w	r9, r9, #31
 800d590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d594:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d598:	d02b      	beq.n	800d5f2 <__lshift+0xbe>
 800d59a:	468a      	mov	sl, r1
 800d59c:	2200      	movs	r2, #0
 800d59e:	f1c9 0e20 	rsb	lr, r9, #32
 800d5a2:	6818      	ldr	r0, [r3, #0]
 800d5a4:	fa00 f009 	lsl.w	r0, r0, r9
 800d5a8:	4310      	orrs	r0, r2
 800d5aa:	f84a 0b04 	str.w	r0, [sl], #4
 800d5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b2:	459c      	cmp	ip, r3
 800d5b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5b8:	d8f3      	bhi.n	800d5a2 <__lshift+0x6e>
 800d5ba:	ebac 0304 	sub.w	r3, ip, r4
 800d5be:	3b15      	subs	r3, #21
 800d5c0:	f023 0303 	bic.w	r3, r3, #3
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	f104 0015 	add.w	r0, r4, #21
 800d5ca:	4560      	cmp	r0, ip
 800d5cc:	bf88      	it	hi
 800d5ce:	2304      	movhi	r3, #4
 800d5d0:	50ca      	str	r2, [r1, r3]
 800d5d2:	b10a      	cbz	r2, 800d5d8 <__lshift+0xa4>
 800d5d4:	f108 0602 	add.w	r6, r8, #2
 800d5d8:	3e01      	subs	r6, #1
 800d5da:	4638      	mov	r0, r7
 800d5dc:	4621      	mov	r1, r4
 800d5de:	612e      	str	r6, [r5, #16]
 800d5e0:	f7ff fd98 	bl	800d114 <_Bfree>
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	e7c5      	b.n	800d57e <__lshift+0x4a>
 800d5f2:	3904      	subs	r1, #4
 800d5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5f8:	459c      	cmp	ip, r3
 800d5fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5fe:	d8f9      	bhi.n	800d5f4 <__lshift+0xc0>
 800d600:	e7ea      	b.n	800d5d8 <__lshift+0xa4>
 800d602:	bf00      	nop
 800d604:	0800f4b2 	.word	0x0800f4b2
 800d608:	0800f53a 	.word	0x0800f53a

0800d60c <__mcmp>:
 800d60c:	4603      	mov	r3, r0
 800d60e:	690a      	ldr	r2, [r1, #16]
 800d610:	6900      	ldr	r0, [r0, #16]
 800d612:	b530      	push	{r4, r5, lr}
 800d614:	1a80      	subs	r0, r0, r2
 800d616:	d10e      	bne.n	800d636 <__mcmp+0x2a>
 800d618:	3314      	adds	r3, #20
 800d61a:	3114      	adds	r1, #20
 800d61c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d620:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d624:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d628:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d62c:	4295      	cmp	r5, r2
 800d62e:	d003      	beq.n	800d638 <__mcmp+0x2c>
 800d630:	d205      	bcs.n	800d63e <__mcmp+0x32>
 800d632:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d636:	bd30      	pop	{r4, r5, pc}
 800d638:	42a3      	cmp	r3, r4
 800d63a:	d3f3      	bcc.n	800d624 <__mcmp+0x18>
 800d63c:	e7fb      	b.n	800d636 <__mcmp+0x2a>
 800d63e:	2001      	movs	r0, #1
 800d640:	e7f9      	b.n	800d636 <__mcmp+0x2a>
	...

0800d644 <__mdiff>:
 800d644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	4689      	mov	r9, r1
 800d64a:	4606      	mov	r6, r0
 800d64c:	4611      	mov	r1, r2
 800d64e:	4648      	mov	r0, r9
 800d650:	4614      	mov	r4, r2
 800d652:	f7ff ffdb 	bl	800d60c <__mcmp>
 800d656:	1e05      	subs	r5, r0, #0
 800d658:	d112      	bne.n	800d680 <__mdiff+0x3c>
 800d65a:	4629      	mov	r1, r5
 800d65c:	4630      	mov	r0, r6
 800d65e:	f7ff fd19 	bl	800d094 <_Balloc>
 800d662:	4602      	mov	r2, r0
 800d664:	b928      	cbnz	r0, 800d672 <__mdiff+0x2e>
 800d666:	f240 2137 	movw	r1, #567	@ 0x237
 800d66a:	4b3e      	ldr	r3, [pc, #248]	@ (800d764 <__mdiff+0x120>)
 800d66c:	483e      	ldr	r0, [pc, #248]	@ (800d768 <__mdiff+0x124>)
 800d66e:	f000 fbe3 	bl	800de38 <__assert_func>
 800d672:	2301      	movs	r3, #1
 800d674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d678:	4610      	mov	r0, r2
 800d67a:	b003      	add	sp, #12
 800d67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d680:	bfbc      	itt	lt
 800d682:	464b      	movlt	r3, r9
 800d684:	46a1      	movlt	r9, r4
 800d686:	4630      	mov	r0, r6
 800d688:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d68c:	bfba      	itte	lt
 800d68e:	461c      	movlt	r4, r3
 800d690:	2501      	movlt	r5, #1
 800d692:	2500      	movge	r5, #0
 800d694:	f7ff fcfe 	bl	800d094 <_Balloc>
 800d698:	4602      	mov	r2, r0
 800d69a:	b918      	cbnz	r0, 800d6a4 <__mdiff+0x60>
 800d69c:	f240 2145 	movw	r1, #581	@ 0x245
 800d6a0:	4b30      	ldr	r3, [pc, #192]	@ (800d764 <__mdiff+0x120>)
 800d6a2:	e7e3      	b.n	800d66c <__mdiff+0x28>
 800d6a4:	f100 0b14 	add.w	fp, r0, #20
 800d6a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d6ac:	f109 0310 	add.w	r3, r9, #16
 800d6b0:	60c5      	str	r5, [r0, #12]
 800d6b2:	f04f 0c00 	mov.w	ip, #0
 800d6b6:	f109 0514 	add.w	r5, r9, #20
 800d6ba:	46d9      	mov	r9, fp
 800d6bc:	6926      	ldr	r6, [r4, #16]
 800d6be:	f104 0e14 	add.w	lr, r4, #20
 800d6c2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d6c6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	9b01      	ldr	r3, [sp, #4]
 800d6ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d6d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d6d6:	b281      	uxth	r1, r0
 800d6d8:	9301      	str	r3, [sp, #4]
 800d6da:	fa1f f38a 	uxth.w	r3, sl
 800d6de:	1a5b      	subs	r3, r3, r1
 800d6e0:	0c00      	lsrs	r0, r0, #16
 800d6e2:	4463      	add	r3, ip
 800d6e4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d6e8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d6f2:	4576      	cmp	r6, lr
 800d6f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d6f8:	f849 3b04 	str.w	r3, [r9], #4
 800d6fc:	d8e6      	bhi.n	800d6cc <__mdiff+0x88>
 800d6fe:	1b33      	subs	r3, r6, r4
 800d700:	3b15      	subs	r3, #21
 800d702:	f023 0303 	bic.w	r3, r3, #3
 800d706:	3415      	adds	r4, #21
 800d708:	3304      	adds	r3, #4
 800d70a:	42a6      	cmp	r6, r4
 800d70c:	bf38      	it	cc
 800d70e:	2304      	movcc	r3, #4
 800d710:	441d      	add	r5, r3
 800d712:	445b      	add	r3, fp
 800d714:	461e      	mov	r6, r3
 800d716:	462c      	mov	r4, r5
 800d718:	4544      	cmp	r4, r8
 800d71a:	d30e      	bcc.n	800d73a <__mdiff+0xf6>
 800d71c:	f108 0103 	add.w	r1, r8, #3
 800d720:	1b49      	subs	r1, r1, r5
 800d722:	f021 0103 	bic.w	r1, r1, #3
 800d726:	3d03      	subs	r5, #3
 800d728:	45a8      	cmp	r8, r5
 800d72a:	bf38      	it	cc
 800d72c:	2100      	movcc	r1, #0
 800d72e:	440b      	add	r3, r1
 800d730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d734:	b199      	cbz	r1, 800d75e <__mdiff+0x11a>
 800d736:	6117      	str	r7, [r2, #16]
 800d738:	e79e      	b.n	800d678 <__mdiff+0x34>
 800d73a:	46e6      	mov	lr, ip
 800d73c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d740:	fa1f fc81 	uxth.w	ip, r1
 800d744:	44f4      	add	ip, lr
 800d746:	0c08      	lsrs	r0, r1, #16
 800d748:	4471      	add	r1, lr
 800d74a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d74e:	b289      	uxth	r1, r1
 800d750:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d754:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d758:	f846 1b04 	str.w	r1, [r6], #4
 800d75c:	e7dc      	b.n	800d718 <__mdiff+0xd4>
 800d75e:	3f01      	subs	r7, #1
 800d760:	e7e6      	b.n	800d730 <__mdiff+0xec>
 800d762:	bf00      	nop
 800d764:	0800f4b2 	.word	0x0800f4b2
 800d768:	0800f53a 	.word	0x0800f53a

0800d76c <__ulp>:
 800d76c:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a8 <__ulp+0x3c>)
 800d76e:	400b      	ands	r3, r1
 800d770:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d774:	2b00      	cmp	r3, #0
 800d776:	dc08      	bgt.n	800d78a <__ulp+0x1e>
 800d778:	425b      	negs	r3, r3
 800d77a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d77e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d782:	da04      	bge.n	800d78e <__ulp+0x22>
 800d784:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d788:	4113      	asrs	r3, r2
 800d78a:	2200      	movs	r2, #0
 800d78c:	e008      	b.n	800d7a0 <__ulp+0x34>
 800d78e:	f1a2 0314 	sub.w	r3, r2, #20
 800d792:	2b1e      	cmp	r3, #30
 800d794:	bfd6      	itet	le
 800d796:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d79a:	2201      	movgt	r2, #1
 800d79c:	40da      	lsrle	r2, r3
 800d79e:	2300      	movs	r3, #0
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	4610      	mov	r0, r2
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	7ff00000 	.word	0x7ff00000

0800d7ac <__b2d>:
 800d7ac:	6902      	ldr	r2, [r0, #16]
 800d7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b0:	f100 0614 	add.w	r6, r0, #20
 800d7b4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d7b8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d7bc:	4f1e      	ldr	r7, [pc, #120]	@ (800d838 <__b2d+0x8c>)
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f7ff fd5a 	bl	800d278 <__hi0bits>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	f1c0 0020 	rsb	r0, r0, #32
 800d7ca:	2b0a      	cmp	r3, #10
 800d7cc:	f1a2 0504 	sub.w	r5, r2, #4
 800d7d0:	6008      	str	r0, [r1, #0]
 800d7d2:	dc12      	bgt.n	800d7fa <__b2d+0x4e>
 800d7d4:	42ae      	cmp	r6, r5
 800d7d6:	bf2c      	ite	cs
 800d7d8:	2200      	movcs	r2, #0
 800d7da:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d7de:	f1c3 0c0b 	rsb	ip, r3, #11
 800d7e2:	3315      	adds	r3, #21
 800d7e4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d7e8:	fa04 f303 	lsl.w	r3, r4, r3
 800d7ec:	fa22 f20c 	lsr.w	r2, r2, ip
 800d7f0:	ea4e 0107 	orr.w	r1, lr, r7
 800d7f4:	431a      	orrs	r2, r3
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7fa:	42ae      	cmp	r6, r5
 800d7fc:	bf36      	itet	cc
 800d7fe:	f1a2 0508 	subcc.w	r5, r2, #8
 800d802:	2200      	movcs	r2, #0
 800d804:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d808:	3b0b      	subs	r3, #11
 800d80a:	d012      	beq.n	800d832 <__b2d+0x86>
 800d80c:	f1c3 0720 	rsb	r7, r3, #32
 800d810:	fa22 f107 	lsr.w	r1, r2, r7
 800d814:	409c      	lsls	r4, r3
 800d816:	430c      	orrs	r4, r1
 800d818:	42b5      	cmp	r5, r6
 800d81a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d81e:	bf94      	ite	ls
 800d820:	2400      	movls	r4, #0
 800d822:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d826:	409a      	lsls	r2, r3
 800d828:	40fc      	lsrs	r4, r7
 800d82a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d82e:	4322      	orrs	r2, r4
 800d830:	e7e1      	b.n	800d7f6 <__b2d+0x4a>
 800d832:	ea44 0107 	orr.w	r1, r4, r7
 800d836:	e7de      	b.n	800d7f6 <__b2d+0x4a>
 800d838:	3ff00000 	.word	0x3ff00000

0800d83c <__d2b>:
 800d83c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d840:	2101      	movs	r1, #1
 800d842:	4690      	mov	r8, r2
 800d844:	4699      	mov	r9, r3
 800d846:	9e08      	ldr	r6, [sp, #32]
 800d848:	f7ff fc24 	bl	800d094 <_Balloc>
 800d84c:	4604      	mov	r4, r0
 800d84e:	b930      	cbnz	r0, 800d85e <__d2b+0x22>
 800d850:	4602      	mov	r2, r0
 800d852:	f240 310f 	movw	r1, #783	@ 0x30f
 800d856:	4b23      	ldr	r3, [pc, #140]	@ (800d8e4 <__d2b+0xa8>)
 800d858:	4823      	ldr	r0, [pc, #140]	@ (800d8e8 <__d2b+0xac>)
 800d85a:	f000 faed 	bl	800de38 <__assert_func>
 800d85e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d862:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d866:	b10d      	cbz	r5, 800d86c <__d2b+0x30>
 800d868:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	f1b8 0300 	subs.w	r3, r8, #0
 800d872:	d024      	beq.n	800d8be <__d2b+0x82>
 800d874:	4668      	mov	r0, sp
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	f7ff fd1d 	bl	800d2b6 <__lo0bits>
 800d87c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d880:	b1d8      	cbz	r0, 800d8ba <__d2b+0x7e>
 800d882:	f1c0 0320 	rsb	r3, r0, #32
 800d886:	fa02 f303 	lsl.w	r3, r2, r3
 800d88a:	430b      	orrs	r3, r1
 800d88c:	40c2      	lsrs	r2, r0
 800d88e:	6163      	str	r3, [r4, #20]
 800d890:	9201      	str	r2, [sp, #4]
 800d892:	9b01      	ldr	r3, [sp, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	bf0c      	ite	eq
 800d898:	2201      	moveq	r2, #1
 800d89a:	2202      	movne	r2, #2
 800d89c:	61a3      	str	r3, [r4, #24]
 800d89e:	6122      	str	r2, [r4, #16]
 800d8a0:	b1ad      	cbz	r5, 800d8ce <__d2b+0x92>
 800d8a2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d8a6:	4405      	add	r5, r0
 800d8a8:	6035      	str	r5, [r6, #0]
 800d8aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8b0:	6018      	str	r0, [r3, #0]
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	b002      	add	sp, #8
 800d8b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d8ba:	6161      	str	r1, [r4, #20]
 800d8bc:	e7e9      	b.n	800d892 <__d2b+0x56>
 800d8be:	a801      	add	r0, sp, #4
 800d8c0:	f7ff fcf9 	bl	800d2b6 <__lo0bits>
 800d8c4:	9b01      	ldr	r3, [sp, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	6163      	str	r3, [r4, #20]
 800d8ca:	3020      	adds	r0, #32
 800d8cc:	e7e7      	b.n	800d89e <__d2b+0x62>
 800d8ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d8d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d8d6:	6030      	str	r0, [r6, #0]
 800d8d8:	6918      	ldr	r0, [r3, #16]
 800d8da:	f7ff fccd 	bl	800d278 <__hi0bits>
 800d8de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d8e2:	e7e4      	b.n	800d8ae <__d2b+0x72>
 800d8e4:	0800f4b2 	.word	0x0800f4b2
 800d8e8:	0800f53a 	.word	0x0800f53a

0800d8ec <__ratio>:
 800d8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f0:	b085      	sub	sp, #20
 800d8f2:	e9cd 1000 	strd	r1, r0, [sp]
 800d8f6:	a902      	add	r1, sp, #8
 800d8f8:	f7ff ff58 	bl	800d7ac <__b2d>
 800d8fc:	468b      	mov	fp, r1
 800d8fe:	4606      	mov	r6, r0
 800d900:	460f      	mov	r7, r1
 800d902:	9800      	ldr	r0, [sp, #0]
 800d904:	a903      	add	r1, sp, #12
 800d906:	f7ff ff51 	bl	800d7ac <__b2d>
 800d90a:	460d      	mov	r5, r1
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	4689      	mov	r9, r1
 800d910:	6919      	ldr	r1, [r3, #16]
 800d912:	9b00      	ldr	r3, [sp, #0]
 800d914:	4604      	mov	r4, r0
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	4630      	mov	r0, r6
 800d91a:	1ac9      	subs	r1, r1, r3
 800d91c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d920:	1a9b      	subs	r3, r3, r2
 800d922:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d926:	2b00      	cmp	r3, #0
 800d928:	bfcd      	iteet	gt
 800d92a:	463a      	movgt	r2, r7
 800d92c:	462a      	movle	r2, r5
 800d92e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d932:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d936:	bfd8      	it	le
 800d938:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d93c:	464b      	mov	r3, r9
 800d93e:	4622      	mov	r2, r4
 800d940:	4659      	mov	r1, fp
 800d942:	f7f2 fef3 	bl	800072c <__aeabi_ddiv>
 800d946:	b005      	add	sp, #20
 800d948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d94c <_mprec_log10>:
 800d94c:	2817      	cmp	r0, #23
 800d94e:	b5d0      	push	{r4, r6, r7, lr}
 800d950:	4604      	mov	r4, r0
 800d952:	dc05      	bgt.n	800d960 <_mprec_log10+0x14>
 800d954:	4b08      	ldr	r3, [pc, #32]	@ (800d978 <_mprec_log10+0x2c>)
 800d956:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800d95a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d95e:	bdd0      	pop	{r4, r6, r7, pc}
 800d960:	2000      	movs	r0, #0
 800d962:	2600      	movs	r6, #0
 800d964:	4905      	ldr	r1, [pc, #20]	@ (800d97c <_mprec_log10+0x30>)
 800d966:	4f06      	ldr	r7, [pc, #24]	@ (800d980 <_mprec_log10+0x34>)
 800d968:	4632      	mov	r2, r6
 800d96a:	463b      	mov	r3, r7
 800d96c:	f7f2 fdb4 	bl	80004d8 <__aeabi_dmul>
 800d970:	3c01      	subs	r4, #1
 800d972:	d1f9      	bne.n	800d968 <_mprec_log10+0x1c>
 800d974:	e7f3      	b.n	800d95e <_mprec_log10+0x12>
 800d976:	bf00      	nop
 800d978:	0800f6f8 	.word	0x0800f6f8
 800d97c:	3ff00000 	.word	0x3ff00000
 800d980:	40240000 	.word	0x40240000

0800d984 <__copybits>:
 800d984:	3901      	subs	r1, #1
 800d986:	b570      	push	{r4, r5, r6, lr}
 800d988:	1149      	asrs	r1, r1, #5
 800d98a:	6914      	ldr	r4, [r2, #16]
 800d98c:	3101      	adds	r1, #1
 800d98e:	f102 0314 	add.w	r3, r2, #20
 800d992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d99a:	1f05      	subs	r5, r0, #4
 800d99c:	42a3      	cmp	r3, r4
 800d99e:	d30c      	bcc.n	800d9ba <__copybits+0x36>
 800d9a0:	1aa3      	subs	r3, r4, r2
 800d9a2:	3b11      	subs	r3, #17
 800d9a4:	f023 0303 	bic.w	r3, r3, #3
 800d9a8:	3211      	adds	r2, #17
 800d9aa:	42a2      	cmp	r2, r4
 800d9ac:	bf88      	it	hi
 800d9ae:	2300      	movhi	r3, #0
 800d9b0:	4418      	add	r0, r3
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	4288      	cmp	r0, r1
 800d9b6:	d305      	bcc.n	800d9c4 <__copybits+0x40>
 800d9b8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800d9be:	f845 6f04 	str.w	r6, [r5, #4]!
 800d9c2:	e7eb      	b.n	800d99c <__copybits+0x18>
 800d9c4:	f840 3b04 	str.w	r3, [r0], #4
 800d9c8:	e7f4      	b.n	800d9b4 <__copybits+0x30>

0800d9ca <__any_on>:
 800d9ca:	f100 0214 	add.w	r2, r0, #20
 800d9ce:	6900      	ldr	r0, [r0, #16]
 800d9d0:	114b      	asrs	r3, r1, #5
 800d9d2:	4298      	cmp	r0, r3
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	db11      	blt.n	800d9fc <__any_on+0x32>
 800d9d8:	dd0a      	ble.n	800d9f0 <__any_on+0x26>
 800d9da:	f011 011f 	ands.w	r1, r1, #31
 800d9de:	d007      	beq.n	800d9f0 <__any_on+0x26>
 800d9e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d9e4:	fa24 f001 	lsr.w	r0, r4, r1
 800d9e8:	fa00 f101 	lsl.w	r1, r0, r1
 800d9ec:	428c      	cmp	r4, r1
 800d9ee:	d10b      	bne.n	800da08 <__any_on+0x3e>
 800d9f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d803      	bhi.n	800da00 <__any_on+0x36>
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	bd10      	pop	{r4, pc}
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	e7f7      	b.n	800d9f0 <__any_on+0x26>
 800da00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da04:	2900      	cmp	r1, #0
 800da06:	d0f5      	beq.n	800d9f4 <__any_on+0x2a>
 800da08:	2001      	movs	r0, #1
 800da0a:	e7f6      	b.n	800d9fa <__any_on+0x30>

0800da0c <__ascii_wctomb>:
 800da0c:	4603      	mov	r3, r0
 800da0e:	4608      	mov	r0, r1
 800da10:	b141      	cbz	r1, 800da24 <__ascii_wctomb+0x18>
 800da12:	2aff      	cmp	r2, #255	@ 0xff
 800da14:	d904      	bls.n	800da20 <__ascii_wctomb+0x14>
 800da16:	228a      	movs	r2, #138	@ 0x8a
 800da18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da1c:	601a      	str	r2, [r3, #0]
 800da1e:	4770      	bx	lr
 800da20:	2001      	movs	r0, #1
 800da22:	700a      	strb	r2, [r1, #0]
 800da24:	4770      	bx	lr

0800da26 <print_e>:
 800da26:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da28:	b08b      	sub	sp, #44	@ 0x2c
 800da2a:	460d      	mov	r5, r1
 800da2c:	a908      	add	r1, sp, #32
 800da2e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800da30:	9104      	str	r1, [sp, #16]
 800da32:	a907      	add	r1, sp, #28
 800da34:	9103      	str	r1, [sp, #12]
 800da36:	a909      	add	r1, sp, #36	@ 0x24
 800da38:	9102      	str	r1, [sp, #8]
 800da3a:	1c71      	adds	r1, r6, #1
 800da3c:	9101      	str	r1, [sp, #4]
 800da3e:	2102      	movs	r1, #2
 800da40:	9100      	str	r1, [sp, #0]
 800da42:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 800da46:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800da48:	f000 fab2 	bl	800dfb0 <_dtoa_r>
 800da4c:	f242 730f 	movw	r3, #9999	@ 0x270f
 800da50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da52:	4601      	mov	r1, r0
 800da54:	429a      	cmp	r2, r3
 800da56:	d104      	bne.n	800da62 <print_e+0x3c>
 800da58:	4628      	mov	r0, r5
 800da5a:	f000 f9e5 	bl	800de28 <strcpy>
 800da5e:	b00b      	add	sp, #44	@ 0x2c
 800da60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da62:	462b      	mov	r3, r5
 800da64:	7800      	ldrb	r0, [r0, #0]
 800da66:	2e00      	cmp	r6, #0
 800da68:	f803 0b01 	strb.w	r0, [r3], #1
 800da6c:	bfc8      	it	gt
 800da6e:	2401      	movgt	r4, #1
 800da70:	202e      	movs	r0, #46	@ 0x2e
 800da72:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800da76:	b10d      	cbz	r5, 800da7c <print_e+0x56>
 800da78:	2e00      	cmp	r6, #0
 800da7a:	dc29      	bgt.n	800dad0 <print_e+0xaa>
 800da7c:	2f67      	cmp	r7, #103	@ 0x67
 800da7e:	d038      	beq.n	800daf2 <print_e+0xcc>
 800da80:	2f47      	cmp	r7, #71	@ 0x47
 800da82:	d038      	beq.n	800daf6 <print_e+0xd0>
 800da84:	212e      	movs	r1, #46	@ 0x2e
 800da86:	2030      	movs	r0, #48	@ 0x30
 800da88:	2e00      	cmp	r6, #0
 800da8a:	dc2a      	bgt.n	800dae2 <print_e+0xbc>
 800da8c:	1e51      	subs	r1, r2, #1
 800da8e:	2900      	cmp	r1, #0
 800da90:	bfa8      	it	ge
 800da92:	222b      	movge	r2, #43	@ 0x2b
 800da94:	9109      	str	r1, [sp, #36]	@ 0x24
 800da96:	bfbd      	ittte	lt
 800da98:	212d      	movlt	r1, #45	@ 0x2d
 800da9a:	f1c2 0201 	rsblt	r2, r2, #1
 800da9e:	9209      	strlt	r2, [sp, #36]	@ 0x24
 800daa0:	705a      	strbge	r2, [r3, #1]
 800daa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daa4:	bfb8      	it	lt
 800daa6:	7059      	strblt	r1, [r3, #1]
 800daa8:	2a63      	cmp	r2, #99	@ 0x63
 800daaa:	701f      	strb	r7, [r3, #0]
 800daac:	dc25      	bgt.n	800dafa <print_e+0xd4>
 800daae:	1c98      	adds	r0, r3, #2
 800dab0:	220a      	movs	r2, #10
 800dab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dab4:	fb93 f2f2 	sdiv	r2, r3, r2
 800dab8:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800dabc:	7001      	strb	r1, [r0, #0]
 800dabe:	f06f 0109 	mvn.w	r1, #9
 800dac2:	fb01 3302 	mla	r3, r1, r2, r3
 800dac6:	3330      	adds	r3, #48	@ 0x30
 800dac8:	7043      	strb	r3, [r0, #1]
 800daca:	2300      	movs	r3, #0
 800dacc:	7083      	strb	r3, [r0, #2]
 800dace:	e7c6      	b.n	800da5e <print_e+0x38>
 800dad0:	b10c      	cbz	r4, 800dad6 <print_e+0xb0>
 800dad2:	f803 0b01 	strb.w	r0, [r3], #1
 800dad6:	780c      	ldrb	r4, [r1, #0]
 800dad8:	3e01      	subs	r6, #1
 800dada:	f803 4b01 	strb.w	r4, [r3], #1
 800dade:	2400      	movs	r4, #0
 800dae0:	e7c7      	b.n	800da72 <print_e+0x4c>
 800dae2:	b10c      	cbz	r4, 800dae8 <print_e+0xc2>
 800dae4:	f803 1b01 	strb.w	r1, [r3], #1
 800dae8:	2400      	movs	r4, #0
 800daea:	f803 0b01 	strb.w	r0, [r3], #1
 800daee:	3e01      	subs	r6, #1
 800daf0:	e7ca      	b.n	800da88 <print_e+0x62>
 800daf2:	2765      	movs	r7, #101	@ 0x65
 800daf4:	e7ca      	b.n	800da8c <print_e+0x66>
 800daf6:	2745      	movs	r7, #69	@ 0x45
 800daf8:	e7c8      	b.n	800da8c <print_e+0x66>
 800dafa:	2164      	movs	r1, #100	@ 0x64
 800dafc:	fb92 f1f1 	sdiv	r1, r2, r1
 800db00:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 800db04:	1cd8      	adds	r0, r3, #3
 800db06:	709c      	strb	r4, [r3, #2]
 800db08:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800db0c:	fb03 2201 	mla	r2, r3, r1, r2
 800db10:	9209      	str	r2, [sp, #36]	@ 0x24
 800db12:	e7cd      	b.n	800dab0 <print_e+0x8a>
 800db14:	0000      	movs	r0, r0
	...

0800db18 <_gcvt>:
 800db18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db1c:	4614      	mov	r4, r2
 800db1e:	461d      	mov	r5, r3
 800db20:	b08a      	sub	sp, #40	@ 0x28
 800db22:	2200      	movs	r2, #0
 800db24:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	@ 0x48
 800db28:	2300      	movs	r3, #0
 800db2a:	4681      	mov	r9, r0
 800db2c:	4629      	mov	r1, r5
 800db2e:	4620      	mov	r0, r4
 800db30:	f7f2 ff44 	bl	80009bc <__aeabi_dcmplt>
 800db34:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800db36:	4682      	mov	sl, r0
 800db38:	2200      	movs	r2, #0
 800db3a:	2300      	movs	r3, #0
 800db3c:	b1c0      	cbz	r0, 800db70 <_gcvt+0x58>
 800db3e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800db42:	461d      	mov	r5, r3
 800db44:	a35a      	add	r3, pc, #360	@ (adr r3, 800dcb0 <_gcvt+0x198>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	4620      	mov	r0, r4
 800db4c:	4629      	mov	r1, r5
 800db4e:	f7f2 ff3f 	bl	80009d0 <__aeabi_dcmple>
 800db52:	b1d8      	cbz	r0, 800db8c <_gcvt+0x74>
 800db54:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800db58:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 800db5c:	9301      	str	r3, [sp, #4]
 800db5e:	9000      	str	r0, [sp, #0]
 800db60:	4622      	mov	r2, r4
 800db62:	462b      	mov	r3, r5
 800db64:	4631      	mov	r1, r6
 800db66:	4648      	mov	r0, r9
 800db68:	9702      	str	r7, [sp, #8]
 800db6a:	f7ff ff5c 	bl	800da26 <print_e>
 800db6e:	e009      	b.n	800db84 <_gcvt+0x6c>
 800db70:	4620      	mov	r0, r4
 800db72:	4629      	mov	r1, r5
 800db74:	f7f2 ff18 	bl	80009a8 <__aeabi_dcmpeq>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d0e3      	beq.n	800db44 <_gcvt+0x2c>
 800db7c:	2330      	movs	r3, #48	@ 0x30
 800db7e:	f886 a001 	strb.w	sl, [r6, #1]
 800db82:	7033      	strb	r3, [r6, #0]
 800db84:	4630      	mov	r0, r6
 800db86:	b00a      	add	sp, #40	@ 0x28
 800db88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db8c:	4640      	mov	r0, r8
 800db8e:	f7ff fedd 	bl	800d94c <_mprec_log10>
 800db92:	4622      	mov	r2, r4
 800db94:	462b      	mov	r3, r5
 800db96:	f7f2 ff1b 	bl	80009d0 <__aeabi_dcmple>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d1da      	bne.n	800db54 <_gcvt+0x3c>
 800db9e:	ab09      	add	r3, sp, #36	@ 0x24
 800dba0:	9304      	str	r3, [sp, #16]
 800dba2:	ab08      	add	r3, sp, #32
 800dba4:	9303      	str	r3, [sp, #12]
 800dba6:	ab07      	add	r3, sp, #28
 800dba8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800dbac:	2302      	movs	r3, #2
 800dbae:	4622      	mov	r2, r4
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	4648      	mov	r0, r9
 800dbb4:	462b      	mov	r3, r5
 800dbb6:	f000 f9fb 	bl	800dfb0 <_dtoa_r>
 800dbba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dbbe:	9a07      	ldr	r2, [sp, #28]
 800dbc0:	4601      	mov	r1, r0
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d045      	beq.n	800dc52 <_gcvt+0x13a>
 800dbc6:	4633      	mov	r3, r6
 800dbc8:	460c      	mov	r4, r1
 800dbca:	f811 0b01 	ldrb.w	r0, [r1], #1
 800dbce:	9a07      	ldr	r2, [sp, #28]
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d142      	bne.n	800dc5a <_gcvt+0x142>
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800dbda:	eb06 0008 	add.w	r0, r6, r8
 800dbde:	1ac0      	subs	r0, r0, r3
 800dbe0:	2a00      	cmp	r2, #0
 800dbe2:	4615      	mov	r5, r2
 800dbe4:	dc45      	bgt.n	800dc72 <_gcvt+0x15a>
 800dbe6:	b101      	cbz	r1, 800dbea <_gcvt+0xd2>
 800dbe8:	9207      	str	r2, [sp, #28]
 800dbea:	b90f      	cbnz	r7, 800dbf0 <_gcvt+0xd8>
 800dbec:	7822      	ldrb	r2, [r4, #0]
 800dbee:	b36a      	cbz	r2, 800dc4c <_gcvt+0x134>
 800dbf0:	42b3      	cmp	r3, r6
 800dbf2:	bf04      	itt	eq
 800dbf4:	2230      	moveq	r2, #48	@ 0x30
 800dbf6:	f803 2b01 	strbeq.w	r2, [r3], #1
 800dbfa:	222e      	movs	r2, #46	@ 0x2e
 800dbfc:	f04f 0e00 	mov.w	lr, #0
 800dc00:	701a      	strb	r2, [r3, #0]
 800dc02:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800dc06:	461a      	mov	r2, r3
 800dc08:	9907      	ldr	r1, [sp, #28]
 800dc0a:	1acd      	subs	r5, r1, r3
 800dc0c:	42d5      	cmn	r5, r2
 800dc0e:	d438      	bmi.n	800dc82 <_gcvt+0x16a>
 800dc10:	2900      	cmp	r1, #0
 800dc12:	bfcc      	ite	gt
 800dc14:	f04f 0c00 	movgt.w	ip, #0
 800dc18:	f04f 0c01 	movle.w	ip, #1
 800dc1c:	424a      	negs	r2, r1
 800dc1e:	f1bc 0f00 	cmp.w	ip, #0
 800dc22:	bf14      	ite	ne
 800dc24:	4615      	movne	r5, r2
 800dc26:	2500      	moveq	r5, #0
 800dc28:	3501      	adds	r5, #1
 800dc2a:	442b      	add	r3, r5
 800dc2c:	f1be 0f00 	cmp.w	lr, #0
 800dc30:	d005      	beq.n	800dc3e <_gcvt+0x126>
 800dc32:	f1bc 0f00 	cmp.w	ip, #0
 800dc36:	bf08      	it	eq
 800dc38:	2200      	moveq	r2, #0
 800dc3a:	440a      	add	r2, r1
 800dc3c:	9207      	str	r2, [sp, #28]
 800dc3e:	1e62      	subs	r2, r4, #1
 800dc40:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800dc44:	b109      	cbz	r1, 800dc4a <_gcvt+0x132>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	dc20      	bgt.n	800dc8c <_gcvt+0x174>
 800dc4a:	bb67      	cbnz	r7, 800dca6 <_gcvt+0x18e>
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	701a      	strb	r2, [r3, #0]
 800dc50:	e798      	b.n	800db84 <_gcvt+0x6c>
 800dc52:	4630      	mov	r0, r6
 800dc54:	f000 f8e8 	bl	800de28 <strcpy>
 800dc58:	e794      	b.n	800db84 <_gcvt+0x6c>
 800dc5a:	2a00      	cmp	r2, #0
 800dc5c:	ddba      	ble.n	800dbd4 <_gcvt+0xbc>
 800dc5e:	3a01      	subs	r2, #1
 800dc60:	f803 0b01 	strb.w	r0, [r3], #1
 800dc64:	9207      	str	r2, [sp, #28]
 800dc66:	e7af      	b.n	800dbc8 <_gcvt+0xb0>
 800dc68:	2101      	movs	r1, #1
 800dc6a:	f803 cb01 	strb.w	ip, [r3], #1
 800dc6e:	3801      	subs	r0, #1
 800dc70:	e7b6      	b.n	800dbe0 <_gcvt+0xc8>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 800dc78:	dcf6      	bgt.n	800dc68 <_gcvt+0x150>
 800dc7a:	2900      	cmp	r1, #0
 800dc7c:	d0b5      	beq.n	800dbea <_gcvt+0xd2>
 800dc7e:	9507      	str	r5, [sp, #28]
 800dc80:	e7b3      	b.n	800dbea <_gcvt+0xd2>
 800dc82:	f04f 0e01 	mov.w	lr, #1
 800dc86:	f802 cf01 	strb.w	ip, [r2, #1]!
 800dc8a:	e7bf      	b.n	800dc0c <_gcvt+0xf4>
 800dc8c:	f803 1b01 	strb.w	r1, [r3], #1
 800dc90:	3801      	subs	r0, #1
 800dc92:	e7d5      	b.n	800dc40 <_gcvt+0x128>
 800dc94:	f802 5b01 	strb.w	r5, [r2], #1
 800dc98:	1aa1      	subs	r1, r4, r2
 800dc9a:	2900      	cmp	r1, #0
 800dc9c:	dcfa      	bgt.n	800dc94 <_gcvt+0x17c>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	bfa8      	it	ge
 800dca2:	181b      	addge	r3, r3, r0
 800dca4:	e7d2      	b.n	800dc4c <_gcvt+0x134>
 800dca6:	461a      	mov	r2, r3
 800dca8:	2530      	movs	r5, #48	@ 0x30
 800dcaa:	181c      	adds	r4, r3, r0
 800dcac:	e7f4      	b.n	800dc98 <_gcvt+0x180>
 800dcae:	bf00      	nop
 800dcb0:	eb1c432d 	.word	0xeb1c432d
 800dcb4:	3f1a36e2 	.word	0x3f1a36e2

0800dcb8 <__sflush_r>:
 800dcb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcbe:	0716      	lsls	r6, r2, #28
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	d454      	bmi.n	800dd70 <__sflush_r+0xb8>
 800dcc6:	684b      	ldr	r3, [r1, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	dc02      	bgt.n	800dcd2 <__sflush_r+0x1a>
 800dccc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	dd48      	ble.n	800dd64 <__sflush_r+0xac>
 800dcd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dcd4:	2e00      	cmp	r6, #0
 800dcd6:	d045      	beq.n	800dd64 <__sflush_r+0xac>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dcde:	682f      	ldr	r7, [r5, #0]
 800dce0:	6a21      	ldr	r1, [r4, #32]
 800dce2:	602b      	str	r3, [r5, #0]
 800dce4:	d030      	beq.n	800dd48 <__sflush_r+0x90>
 800dce6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	0759      	lsls	r1, r3, #29
 800dcec:	d505      	bpl.n	800dcfa <__sflush_r+0x42>
 800dcee:	6863      	ldr	r3, [r4, #4]
 800dcf0:	1ad2      	subs	r2, r2, r3
 800dcf2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcf4:	b10b      	cbz	r3, 800dcfa <__sflush_r+0x42>
 800dcf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dcf8:	1ad2      	subs	r2, r2, r3
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd00:	6a21      	ldr	r1, [r4, #32]
 800dd02:	47b0      	blx	r6
 800dd04:	1c43      	adds	r3, r0, #1
 800dd06:	89a3      	ldrh	r3, [r4, #12]
 800dd08:	d106      	bne.n	800dd18 <__sflush_r+0x60>
 800dd0a:	6829      	ldr	r1, [r5, #0]
 800dd0c:	291d      	cmp	r1, #29
 800dd0e:	d82b      	bhi.n	800dd68 <__sflush_r+0xb0>
 800dd10:	4a28      	ldr	r2, [pc, #160]	@ (800ddb4 <__sflush_r+0xfc>)
 800dd12:	40ca      	lsrs	r2, r1
 800dd14:	07d6      	lsls	r6, r2, #31
 800dd16:	d527      	bpl.n	800dd68 <__sflush_r+0xb0>
 800dd18:	2200      	movs	r2, #0
 800dd1a:	6062      	str	r2, [r4, #4]
 800dd1c:	6922      	ldr	r2, [r4, #16]
 800dd1e:	04d9      	lsls	r1, r3, #19
 800dd20:	6022      	str	r2, [r4, #0]
 800dd22:	d504      	bpl.n	800dd2e <__sflush_r+0x76>
 800dd24:	1c42      	adds	r2, r0, #1
 800dd26:	d101      	bne.n	800dd2c <__sflush_r+0x74>
 800dd28:	682b      	ldr	r3, [r5, #0]
 800dd2a:	b903      	cbnz	r3, 800dd2e <__sflush_r+0x76>
 800dd2c:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd30:	602f      	str	r7, [r5, #0]
 800dd32:	b1b9      	cbz	r1, 800dd64 <__sflush_r+0xac>
 800dd34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd38:	4299      	cmp	r1, r3
 800dd3a:	d002      	beq.n	800dd42 <__sflush_r+0x8a>
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f7fe fd67 	bl	800c810 <_free_r>
 800dd42:	2300      	movs	r3, #0
 800dd44:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd46:	e00d      	b.n	800dd64 <__sflush_r+0xac>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	47b0      	blx	r6
 800dd4e:	4602      	mov	r2, r0
 800dd50:	1c50      	adds	r0, r2, #1
 800dd52:	d1c9      	bne.n	800dce8 <__sflush_r+0x30>
 800dd54:	682b      	ldr	r3, [r5, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0c6      	beq.n	800dce8 <__sflush_r+0x30>
 800dd5a:	2b1d      	cmp	r3, #29
 800dd5c:	d001      	beq.n	800dd62 <__sflush_r+0xaa>
 800dd5e:	2b16      	cmp	r3, #22
 800dd60:	d11d      	bne.n	800dd9e <__sflush_r+0xe6>
 800dd62:	602f      	str	r7, [r5, #0]
 800dd64:	2000      	movs	r0, #0
 800dd66:	e021      	b.n	800ddac <__sflush_r+0xf4>
 800dd68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd6c:	b21b      	sxth	r3, r3
 800dd6e:	e01a      	b.n	800dda6 <__sflush_r+0xee>
 800dd70:	690f      	ldr	r7, [r1, #16]
 800dd72:	2f00      	cmp	r7, #0
 800dd74:	d0f6      	beq.n	800dd64 <__sflush_r+0xac>
 800dd76:	0793      	lsls	r3, r2, #30
 800dd78:	bf18      	it	ne
 800dd7a:	2300      	movne	r3, #0
 800dd7c:	680e      	ldr	r6, [r1, #0]
 800dd7e:	bf08      	it	eq
 800dd80:	694b      	ldreq	r3, [r1, #20]
 800dd82:	1bf6      	subs	r6, r6, r7
 800dd84:	600f      	str	r7, [r1, #0]
 800dd86:	608b      	str	r3, [r1, #8]
 800dd88:	2e00      	cmp	r6, #0
 800dd8a:	ddeb      	ble.n	800dd64 <__sflush_r+0xac>
 800dd8c:	4633      	mov	r3, r6
 800dd8e:	463a      	mov	r2, r7
 800dd90:	4628      	mov	r0, r5
 800dd92:	6a21      	ldr	r1, [r4, #32]
 800dd94:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dd98:	47e0      	blx	ip
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	dc07      	bgt.n	800ddae <__sflush_r+0xf6>
 800dd9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dda2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dda6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddaa:	81a3      	strh	r3, [r4, #12]
 800ddac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddae:	4407      	add	r7, r0
 800ddb0:	1a36      	subs	r6, r6, r0
 800ddb2:	e7e9      	b.n	800dd88 <__sflush_r+0xd0>
 800ddb4:	20400001 	.word	0x20400001

0800ddb8 <_fflush_r>:
 800ddb8:	b538      	push	{r3, r4, r5, lr}
 800ddba:	690b      	ldr	r3, [r1, #16]
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	b913      	cbnz	r3, 800ddc8 <_fflush_r+0x10>
 800ddc2:	2500      	movs	r5, #0
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	b118      	cbz	r0, 800ddd2 <_fflush_r+0x1a>
 800ddca:	6a03      	ldr	r3, [r0, #32]
 800ddcc:	b90b      	cbnz	r3, 800ddd2 <_fflush_r+0x1a>
 800ddce:	f7fe fc03 	bl	800c5d8 <__sinit>
 800ddd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0f3      	beq.n	800ddc2 <_fflush_r+0xa>
 800ddda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dddc:	07d0      	lsls	r0, r2, #31
 800ddde:	d404      	bmi.n	800ddea <_fflush_r+0x32>
 800dde0:	0599      	lsls	r1, r3, #22
 800dde2:	d402      	bmi.n	800ddea <_fflush_r+0x32>
 800dde4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dde6:	f7fe fcfc 	bl	800c7e2 <__retarget_lock_acquire_recursive>
 800ddea:	4628      	mov	r0, r5
 800ddec:	4621      	mov	r1, r4
 800ddee:	f7ff ff63 	bl	800dcb8 <__sflush_r>
 800ddf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	07da      	lsls	r2, r3, #31
 800ddf8:	d4e4      	bmi.n	800ddc4 <_fflush_r+0xc>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	059b      	lsls	r3, r3, #22
 800ddfe:	d4e1      	bmi.n	800ddc4 <_fflush_r+0xc>
 800de00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de02:	f7fe fcef 	bl	800c7e4 <__retarget_lock_release_recursive>
 800de06:	e7dd      	b.n	800ddc4 <_fflush_r+0xc>

0800de08 <_sbrk_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	2300      	movs	r3, #0
 800de0c:	4d05      	ldr	r5, [pc, #20]	@ (800de24 <_sbrk_r+0x1c>)
 800de0e:	4604      	mov	r4, r0
 800de10:	4608      	mov	r0, r1
 800de12:	602b      	str	r3, [r5, #0]
 800de14:	f7f4 fac6 	bl	80023a4 <_sbrk>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	d102      	bne.n	800de22 <_sbrk_r+0x1a>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	b103      	cbz	r3, 800de22 <_sbrk_r+0x1a>
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	bd38      	pop	{r3, r4, r5, pc}
 800de24:	20001884 	.word	0x20001884

0800de28 <strcpy>:
 800de28:	4603      	mov	r3, r0
 800de2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de2e:	f803 2b01 	strb.w	r2, [r3], #1
 800de32:	2a00      	cmp	r2, #0
 800de34:	d1f9      	bne.n	800de2a <strcpy+0x2>
 800de36:	4770      	bx	lr

0800de38 <__assert_func>:
 800de38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de3a:	4614      	mov	r4, r2
 800de3c:	461a      	mov	r2, r3
 800de3e:	4b09      	ldr	r3, [pc, #36]	@ (800de64 <__assert_func+0x2c>)
 800de40:	4605      	mov	r5, r0
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68d8      	ldr	r0, [r3, #12]
 800de46:	b14c      	cbz	r4, 800de5c <__assert_func+0x24>
 800de48:	4b07      	ldr	r3, [pc, #28]	@ (800de68 <__assert_func+0x30>)
 800de4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de4e:	9100      	str	r1, [sp, #0]
 800de50:	462b      	mov	r3, r5
 800de52:	4906      	ldr	r1, [pc, #24]	@ (800de6c <__assert_func+0x34>)
 800de54:	f000 fe88 	bl	800eb68 <fiprintf>
 800de58:	f000 fe98 	bl	800eb8c <abort>
 800de5c:	4b04      	ldr	r3, [pc, #16]	@ (800de70 <__assert_func+0x38>)
 800de5e:	461c      	mov	r4, r3
 800de60:	e7f3      	b.n	800de4a <__assert_func+0x12>
 800de62:	bf00      	nop
 800de64:	200002f4 	.word	0x200002f4
 800de68:	0800f593 	.word	0x0800f593
 800de6c:	0800f5a0 	.word	0x0800f5a0
 800de70:	0800f5ce 	.word	0x0800f5ce

0800de74 <_calloc_r>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	fba1 5402 	umull	r5, r4, r1, r2
 800de7a:	b934      	cbnz	r4, 800de8a <_calloc_r+0x16>
 800de7c:	4629      	mov	r1, r5
 800de7e:	f7ff f86b 	bl	800cf58 <_malloc_r>
 800de82:	4606      	mov	r6, r0
 800de84:	b928      	cbnz	r0, 800de92 <_calloc_r+0x1e>
 800de86:	4630      	mov	r0, r6
 800de88:	bd70      	pop	{r4, r5, r6, pc}
 800de8a:	220c      	movs	r2, #12
 800de8c:	2600      	movs	r6, #0
 800de8e:	6002      	str	r2, [r0, #0]
 800de90:	e7f9      	b.n	800de86 <_calloc_r+0x12>
 800de92:	462a      	mov	r2, r5
 800de94:	4621      	mov	r1, r4
 800de96:	f7fe fc18 	bl	800c6ca <memset>
 800de9a:	e7f4      	b.n	800de86 <_calloc_r+0x12>

0800de9c <quorem>:
 800de9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea0:	6903      	ldr	r3, [r0, #16]
 800dea2:	690c      	ldr	r4, [r1, #16]
 800dea4:	4607      	mov	r7, r0
 800dea6:	42a3      	cmp	r3, r4
 800dea8:	db7e      	blt.n	800dfa8 <quorem+0x10c>
 800deaa:	3c01      	subs	r4, #1
 800deac:	00a3      	lsls	r3, r4, #2
 800deae:	f100 0514 	add.w	r5, r0, #20
 800deb2:	f101 0814 	add.w	r8, r1, #20
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dec6:	3301      	adds	r3, #1
 800dec8:	429a      	cmp	r2, r3
 800deca:	fbb2 f6f3 	udiv	r6, r2, r3
 800dece:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ded2:	d32e      	bcc.n	800df32 <quorem+0x96>
 800ded4:	f04f 0a00 	mov.w	sl, #0
 800ded8:	46c4      	mov	ip, r8
 800deda:	46ae      	mov	lr, r5
 800dedc:	46d3      	mov	fp, sl
 800dede:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dee2:	b298      	uxth	r0, r3
 800dee4:	fb06 a000 	mla	r0, r6, r0, sl
 800dee8:	0c1b      	lsrs	r3, r3, #16
 800deea:	0c02      	lsrs	r2, r0, #16
 800deec:	fb06 2303 	mla	r3, r6, r3, r2
 800def0:	f8de 2000 	ldr.w	r2, [lr]
 800def4:	b280      	uxth	r0, r0
 800def6:	b292      	uxth	r2, r2
 800def8:	1a12      	subs	r2, r2, r0
 800defa:	445a      	add	r2, fp
 800defc:	f8de 0000 	ldr.w	r0, [lr]
 800df00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df04:	b29b      	uxth	r3, r3
 800df06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df0e:	b292      	uxth	r2, r2
 800df10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df14:	45e1      	cmp	r9, ip
 800df16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df1a:	f84e 2b04 	str.w	r2, [lr], #4
 800df1e:	d2de      	bcs.n	800dede <quorem+0x42>
 800df20:	9b00      	ldr	r3, [sp, #0]
 800df22:	58eb      	ldr	r3, [r5, r3]
 800df24:	b92b      	cbnz	r3, 800df32 <quorem+0x96>
 800df26:	9b01      	ldr	r3, [sp, #4]
 800df28:	3b04      	subs	r3, #4
 800df2a:	429d      	cmp	r5, r3
 800df2c:	461a      	mov	r2, r3
 800df2e:	d32f      	bcc.n	800df90 <quorem+0xf4>
 800df30:	613c      	str	r4, [r7, #16]
 800df32:	4638      	mov	r0, r7
 800df34:	f7ff fb6a 	bl	800d60c <__mcmp>
 800df38:	2800      	cmp	r0, #0
 800df3a:	db25      	blt.n	800df88 <quorem+0xec>
 800df3c:	4629      	mov	r1, r5
 800df3e:	2000      	movs	r0, #0
 800df40:	f858 2b04 	ldr.w	r2, [r8], #4
 800df44:	f8d1 c000 	ldr.w	ip, [r1]
 800df48:	fa1f fe82 	uxth.w	lr, r2
 800df4c:	fa1f f38c 	uxth.w	r3, ip
 800df50:	eba3 030e 	sub.w	r3, r3, lr
 800df54:	4403      	add	r3, r0
 800df56:	0c12      	lsrs	r2, r2, #16
 800df58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df60:	b29b      	uxth	r3, r3
 800df62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df66:	45c1      	cmp	r9, r8
 800df68:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df6c:	f841 3b04 	str.w	r3, [r1], #4
 800df70:	d2e6      	bcs.n	800df40 <quorem+0xa4>
 800df72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df7a:	b922      	cbnz	r2, 800df86 <quorem+0xea>
 800df7c:	3b04      	subs	r3, #4
 800df7e:	429d      	cmp	r5, r3
 800df80:	461a      	mov	r2, r3
 800df82:	d30b      	bcc.n	800df9c <quorem+0x100>
 800df84:	613c      	str	r4, [r7, #16]
 800df86:	3601      	adds	r6, #1
 800df88:	4630      	mov	r0, r6
 800df8a:	b003      	add	sp, #12
 800df8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df90:	6812      	ldr	r2, [r2, #0]
 800df92:	3b04      	subs	r3, #4
 800df94:	2a00      	cmp	r2, #0
 800df96:	d1cb      	bne.n	800df30 <quorem+0x94>
 800df98:	3c01      	subs	r4, #1
 800df9a:	e7c6      	b.n	800df2a <quorem+0x8e>
 800df9c:	6812      	ldr	r2, [r2, #0]
 800df9e:	3b04      	subs	r3, #4
 800dfa0:	2a00      	cmp	r2, #0
 800dfa2:	d1ef      	bne.n	800df84 <quorem+0xe8>
 800dfa4:	3c01      	subs	r4, #1
 800dfa6:	e7ea      	b.n	800df7e <quorem+0xe2>
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	e7ee      	b.n	800df8a <quorem+0xee>
 800dfac:	0000      	movs	r0, r0
	...

0800dfb0 <_dtoa_r>:
 800dfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	461d      	mov	r5, r3
 800dfb8:	69c7      	ldr	r7, [r0, #28]
 800dfba:	b097      	sub	sp, #92	@ 0x5c
 800dfbc:	4681      	mov	r9, r0
 800dfbe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dfc2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800dfc4:	b97f      	cbnz	r7, 800dfe6 <_dtoa_r+0x36>
 800dfc6:	2010      	movs	r0, #16
 800dfc8:	f000 fdc6 	bl	800eb58 <malloc>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	f8c9 001c 	str.w	r0, [r9, #28]
 800dfd2:	b920      	cbnz	r0, 800dfde <_dtoa_r+0x2e>
 800dfd4:	21ef      	movs	r1, #239	@ 0xef
 800dfd6:	4bac      	ldr	r3, [pc, #688]	@ (800e288 <_dtoa_r+0x2d8>)
 800dfd8:	48ac      	ldr	r0, [pc, #688]	@ (800e28c <_dtoa_r+0x2dc>)
 800dfda:	f7ff ff2d 	bl	800de38 <__assert_func>
 800dfde:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dfe2:	6007      	str	r7, [r0, #0]
 800dfe4:	60c7      	str	r7, [r0, #12]
 800dfe6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dfea:	6819      	ldr	r1, [r3, #0]
 800dfec:	b159      	cbz	r1, 800e006 <_dtoa_r+0x56>
 800dfee:	685a      	ldr	r2, [r3, #4]
 800dff0:	2301      	movs	r3, #1
 800dff2:	4093      	lsls	r3, r2
 800dff4:	604a      	str	r2, [r1, #4]
 800dff6:	608b      	str	r3, [r1, #8]
 800dff8:	4648      	mov	r0, r9
 800dffa:	f7ff f88b 	bl	800d114 <_Bfree>
 800dffe:	2200      	movs	r2, #0
 800e000:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	1e2b      	subs	r3, r5, #0
 800e008:	bfaf      	iteee	ge
 800e00a:	2300      	movge	r3, #0
 800e00c:	2201      	movlt	r2, #1
 800e00e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e012:	9307      	strlt	r3, [sp, #28]
 800e014:	bfa8      	it	ge
 800e016:	6033      	strge	r3, [r6, #0]
 800e018:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e01c:	4b9c      	ldr	r3, [pc, #624]	@ (800e290 <_dtoa_r+0x2e0>)
 800e01e:	bfb8      	it	lt
 800e020:	6032      	strlt	r2, [r6, #0]
 800e022:	ea33 0308 	bics.w	r3, r3, r8
 800e026:	d112      	bne.n	800e04e <_dtoa_r+0x9e>
 800e028:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e02c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e034:	4323      	orrs	r3, r4
 800e036:	f000 855e 	beq.w	800eaf6 <_dtoa_r+0xb46>
 800e03a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e03c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e294 <_dtoa_r+0x2e4>
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 8560 	beq.w	800eb06 <_dtoa_r+0xb56>
 800e046:	f10a 0303 	add.w	r3, sl, #3
 800e04a:	f000 bd5a 	b.w	800eb02 <_dtoa_r+0xb52>
 800e04e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e052:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e05a:	2200      	movs	r2, #0
 800e05c:	2300      	movs	r3, #0
 800e05e:	f7f2 fca3 	bl	80009a8 <__aeabi_dcmpeq>
 800e062:	4607      	mov	r7, r0
 800e064:	b158      	cbz	r0, 800e07e <_dtoa_r+0xce>
 800e066:	2301      	movs	r3, #1
 800e068:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e06e:	b113      	cbz	r3, 800e076 <_dtoa_r+0xc6>
 800e070:	4b89      	ldr	r3, [pc, #548]	@ (800e298 <_dtoa_r+0x2e8>)
 800e072:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e074:	6013      	str	r3, [r2, #0]
 800e076:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e29c <_dtoa_r+0x2ec>
 800e07a:	f000 bd44 	b.w	800eb06 <_dtoa_r+0xb56>
 800e07e:	ab14      	add	r3, sp, #80	@ 0x50
 800e080:	9301      	str	r3, [sp, #4]
 800e082:	ab15      	add	r3, sp, #84	@ 0x54
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	4648      	mov	r0, r9
 800e088:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e08c:	f7ff fbd6 	bl	800d83c <__d2b>
 800e090:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e094:	9003      	str	r0, [sp, #12]
 800e096:	2e00      	cmp	r6, #0
 800e098:	d078      	beq.n	800e18c <_dtoa_r+0x1dc>
 800e09a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e09e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0b0:	9712      	str	r7, [sp, #72]	@ 0x48
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	4b7a      	ldr	r3, [pc, #488]	@ (800e2a0 <_dtoa_r+0x2f0>)
 800e0b8:	f7f2 f856 	bl	8000168 <__aeabi_dsub>
 800e0bc:	a36c      	add	r3, pc, #432	@ (adr r3, 800e270 <_dtoa_r+0x2c0>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	f7f2 fa09 	bl	80004d8 <__aeabi_dmul>
 800e0c6:	a36c      	add	r3, pc, #432	@ (adr r3, 800e278 <_dtoa_r+0x2c8>)
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f7f2 f84e 	bl	800016c <__adddf3>
 800e0d0:	4604      	mov	r4, r0
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	460d      	mov	r5, r1
 800e0d6:	f7f2 f995 	bl	8000404 <__aeabi_i2d>
 800e0da:	a369      	add	r3, pc, #420	@ (adr r3, 800e280 <_dtoa_r+0x2d0>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f7f2 f9fa 	bl	80004d8 <__aeabi_dmul>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	f7f2 f83e 	bl	800016c <__adddf3>
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	460d      	mov	r5, r1
 800e0f4:	f7f2 fc8a 	bl	8000a0c <__aeabi_d2iz>
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	4607      	mov	r7, r0
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4620      	mov	r0, r4
 800e100:	4629      	mov	r1, r5
 800e102:	f7f2 fc5b 	bl	80009bc <__aeabi_dcmplt>
 800e106:	b140      	cbz	r0, 800e11a <_dtoa_r+0x16a>
 800e108:	4638      	mov	r0, r7
 800e10a:	f7f2 f97b 	bl	8000404 <__aeabi_i2d>
 800e10e:	4622      	mov	r2, r4
 800e110:	462b      	mov	r3, r5
 800e112:	f7f2 fc49 	bl	80009a8 <__aeabi_dcmpeq>
 800e116:	b900      	cbnz	r0, 800e11a <_dtoa_r+0x16a>
 800e118:	3f01      	subs	r7, #1
 800e11a:	2f16      	cmp	r7, #22
 800e11c:	d854      	bhi.n	800e1c8 <_dtoa_r+0x218>
 800e11e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e122:	4b60      	ldr	r3, [pc, #384]	@ (800e2a4 <_dtoa_r+0x2f4>)
 800e124:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12c:	f7f2 fc46 	bl	80009bc <__aeabi_dcmplt>
 800e130:	2800      	cmp	r0, #0
 800e132:	d04b      	beq.n	800e1cc <_dtoa_r+0x21c>
 800e134:	2300      	movs	r3, #0
 800e136:	3f01      	subs	r7, #1
 800e138:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e13a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e13c:	1b9b      	subs	r3, r3, r6
 800e13e:	1e5a      	subs	r2, r3, #1
 800e140:	bf49      	itett	mi
 800e142:	f1c3 0301 	rsbmi	r3, r3, #1
 800e146:	2300      	movpl	r3, #0
 800e148:	9304      	strmi	r3, [sp, #16]
 800e14a:	2300      	movmi	r3, #0
 800e14c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e14e:	bf54      	ite	pl
 800e150:	9304      	strpl	r3, [sp, #16]
 800e152:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800e154:	2f00      	cmp	r7, #0
 800e156:	db3b      	blt.n	800e1d0 <_dtoa_r+0x220>
 800e158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e15a:	970e      	str	r7, [sp, #56]	@ 0x38
 800e15c:	443b      	add	r3, r7
 800e15e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e160:	2300      	movs	r3, #0
 800e162:	930a      	str	r3, [sp, #40]	@ 0x28
 800e164:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e166:	2b09      	cmp	r3, #9
 800e168:	d865      	bhi.n	800e236 <_dtoa_r+0x286>
 800e16a:	2b05      	cmp	r3, #5
 800e16c:	bfc4      	itt	gt
 800e16e:	3b04      	subgt	r3, #4
 800e170:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800e172:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e174:	bfc8      	it	gt
 800e176:	2400      	movgt	r4, #0
 800e178:	f1a3 0302 	sub.w	r3, r3, #2
 800e17c:	bfd8      	it	le
 800e17e:	2401      	movle	r4, #1
 800e180:	2b03      	cmp	r3, #3
 800e182:	d864      	bhi.n	800e24e <_dtoa_r+0x29e>
 800e184:	e8df f003 	tbb	[pc, r3]
 800e188:	2c385553 	.word	0x2c385553
 800e18c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e190:	441e      	add	r6, r3
 800e192:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e196:	2b20      	cmp	r3, #32
 800e198:	bfc1      	itttt	gt
 800e19a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e19e:	fa08 f803 	lslgt.w	r8, r8, r3
 800e1a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e1a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1aa:	bfd6      	itet	le
 800e1ac:	f1c3 0320 	rsble	r3, r3, #32
 800e1b0:	ea48 0003 	orrgt.w	r0, r8, r3
 800e1b4:	fa04 f003 	lslle.w	r0, r4, r3
 800e1b8:	f7f2 f914 	bl	80003e4 <__aeabi_ui2d>
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1c2:	3e01      	subs	r6, #1
 800e1c4:	9212      	str	r2, [sp, #72]	@ 0x48
 800e1c6:	e774      	b.n	800e0b2 <_dtoa_r+0x102>
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e7b5      	b.n	800e138 <_dtoa_r+0x188>
 800e1cc:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e1ce:	e7b4      	b.n	800e13a <_dtoa_r+0x18a>
 800e1d0:	9b04      	ldr	r3, [sp, #16]
 800e1d2:	1bdb      	subs	r3, r3, r7
 800e1d4:	9304      	str	r3, [sp, #16]
 800e1d6:	427b      	negs	r3, r7
 800e1d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1da:	2300      	movs	r3, #0
 800e1dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800e1de:	e7c1      	b.n	800e164 <_dtoa_r+0x1b4>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e1e6:	eb07 0b03 	add.w	fp, r7, r3
 800e1ea:	f10b 0301 	add.w	r3, fp, #1
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	9308      	str	r3, [sp, #32]
 800e1f2:	bfb8      	it	lt
 800e1f4:	2301      	movlt	r3, #1
 800e1f6:	e006      	b.n	800e206 <_dtoa_r+0x256>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	dd28      	ble.n	800e254 <_dtoa_r+0x2a4>
 800e202:	469b      	mov	fp, r3
 800e204:	9308      	str	r3, [sp, #32]
 800e206:	2100      	movs	r1, #0
 800e208:	2204      	movs	r2, #4
 800e20a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e20e:	f102 0514 	add.w	r5, r2, #20
 800e212:	429d      	cmp	r5, r3
 800e214:	d926      	bls.n	800e264 <_dtoa_r+0x2b4>
 800e216:	6041      	str	r1, [r0, #4]
 800e218:	4648      	mov	r0, r9
 800e21a:	f7fe ff3b 	bl	800d094 <_Balloc>
 800e21e:	4682      	mov	sl, r0
 800e220:	2800      	cmp	r0, #0
 800e222:	d143      	bne.n	800e2ac <_dtoa_r+0x2fc>
 800e224:	4602      	mov	r2, r0
 800e226:	f240 11af 	movw	r1, #431	@ 0x1af
 800e22a:	4b1f      	ldr	r3, [pc, #124]	@ (800e2a8 <_dtoa_r+0x2f8>)
 800e22c:	e6d4      	b.n	800dfd8 <_dtoa_r+0x28>
 800e22e:	2300      	movs	r3, #0
 800e230:	e7e3      	b.n	800e1fa <_dtoa_r+0x24a>
 800e232:	2300      	movs	r3, #0
 800e234:	e7d5      	b.n	800e1e2 <_dtoa_r+0x232>
 800e236:	2401      	movs	r4, #1
 800e238:	2300      	movs	r3, #0
 800e23a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e23c:	9320      	str	r3, [sp, #128]	@ 0x80
 800e23e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e242:	2200      	movs	r2, #0
 800e244:	2312      	movs	r3, #18
 800e246:	f8cd b020 	str.w	fp, [sp, #32]
 800e24a:	9221      	str	r2, [sp, #132]	@ 0x84
 800e24c:	e7db      	b.n	800e206 <_dtoa_r+0x256>
 800e24e:	2301      	movs	r3, #1
 800e250:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e252:	e7f4      	b.n	800e23e <_dtoa_r+0x28e>
 800e254:	f04f 0b01 	mov.w	fp, #1
 800e258:	465b      	mov	r3, fp
 800e25a:	f8cd b020 	str.w	fp, [sp, #32]
 800e25e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800e262:	e7d0      	b.n	800e206 <_dtoa_r+0x256>
 800e264:	3101      	adds	r1, #1
 800e266:	0052      	lsls	r2, r2, #1
 800e268:	e7d1      	b.n	800e20e <_dtoa_r+0x25e>
 800e26a:	bf00      	nop
 800e26c:	f3af 8000 	nop.w
 800e270:	636f4361 	.word	0x636f4361
 800e274:	3fd287a7 	.word	0x3fd287a7
 800e278:	8b60c8b3 	.word	0x8b60c8b3
 800e27c:	3fc68a28 	.word	0x3fc68a28
 800e280:	509f79fb 	.word	0x509f79fb
 800e284:	3fd34413 	.word	0x3fd34413
 800e288:	0800f523 	.word	0x0800f523
 800e28c:	0800f5de 	.word	0x0800f5de
 800e290:	7ff00000 	.word	0x7ff00000
 800e294:	0800f5d8 	.word	0x0800f5d8
 800e298:	0800f5dd 	.word	0x0800f5dd
 800e29c:	0800f5dc 	.word	0x0800f5dc
 800e2a0:	3ff80000 	.word	0x3ff80000
 800e2a4:	0800f6f8 	.word	0x0800f6f8
 800e2a8:	0800f4b2 	.word	0x0800f4b2
 800e2ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2b0:	6018      	str	r0, [r3, #0]
 800e2b2:	9b08      	ldr	r3, [sp, #32]
 800e2b4:	2b0e      	cmp	r3, #14
 800e2b6:	f200 80a1 	bhi.w	800e3fc <_dtoa_r+0x44c>
 800e2ba:	2c00      	cmp	r4, #0
 800e2bc:	f000 809e 	beq.w	800e3fc <_dtoa_r+0x44c>
 800e2c0:	2f00      	cmp	r7, #0
 800e2c2:	dd33      	ble.n	800e32c <_dtoa_r+0x37c>
 800e2c4:	4b9c      	ldr	r3, [pc, #624]	@ (800e538 <_dtoa_r+0x588>)
 800e2c6:	f007 020f 	and.w	r2, r7, #15
 800e2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2ce:	05f8      	lsls	r0, r7, #23
 800e2d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e2d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800e2d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e2dc:	d516      	bpl.n	800e30c <_dtoa_r+0x35c>
 800e2de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2e2:	4b96      	ldr	r3, [pc, #600]	@ (800e53c <_dtoa_r+0x58c>)
 800e2e4:	2603      	movs	r6, #3
 800e2e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2ea:	f7f2 fa1f 	bl	800072c <__aeabi_ddiv>
 800e2ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e2f2:	f004 040f 	and.w	r4, r4, #15
 800e2f6:	4d91      	ldr	r5, [pc, #580]	@ (800e53c <_dtoa_r+0x58c>)
 800e2f8:	b954      	cbnz	r4, 800e310 <_dtoa_r+0x360>
 800e2fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e302:	f7f2 fa13 	bl	800072c <__aeabi_ddiv>
 800e306:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e30a:	e028      	b.n	800e35e <_dtoa_r+0x3ae>
 800e30c:	2602      	movs	r6, #2
 800e30e:	e7f2      	b.n	800e2f6 <_dtoa_r+0x346>
 800e310:	07e1      	lsls	r1, r4, #31
 800e312:	d508      	bpl.n	800e326 <_dtoa_r+0x376>
 800e314:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e31c:	f7f2 f8dc 	bl	80004d8 <__aeabi_dmul>
 800e320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e324:	3601      	adds	r6, #1
 800e326:	1064      	asrs	r4, r4, #1
 800e328:	3508      	adds	r5, #8
 800e32a:	e7e5      	b.n	800e2f8 <_dtoa_r+0x348>
 800e32c:	f000 80af 	beq.w	800e48e <_dtoa_r+0x4de>
 800e330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e334:	427c      	negs	r4, r7
 800e336:	4b80      	ldr	r3, [pc, #512]	@ (800e538 <_dtoa_r+0x588>)
 800e338:	f004 020f 	and.w	r2, r4, #15
 800e33c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	f7f2 f8c8 	bl	80004d8 <__aeabi_dmul>
 800e348:	2602      	movs	r6, #2
 800e34a:	2300      	movs	r3, #0
 800e34c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e350:	4d7a      	ldr	r5, [pc, #488]	@ (800e53c <_dtoa_r+0x58c>)
 800e352:	1124      	asrs	r4, r4, #4
 800e354:	2c00      	cmp	r4, #0
 800e356:	f040 808f 	bne.w	800e478 <_dtoa_r+0x4c8>
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1d3      	bne.n	800e306 <_dtoa_r+0x356>
 800e35e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e362:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e364:	2b00      	cmp	r3, #0
 800e366:	f000 8094 	beq.w	800e492 <_dtoa_r+0x4e2>
 800e36a:	2200      	movs	r2, #0
 800e36c:	4620      	mov	r0, r4
 800e36e:	4629      	mov	r1, r5
 800e370:	4b73      	ldr	r3, [pc, #460]	@ (800e540 <_dtoa_r+0x590>)
 800e372:	f7f2 fb23 	bl	80009bc <__aeabi_dcmplt>
 800e376:	2800      	cmp	r0, #0
 800e378:	f000 808b 	beq.w	800e492 <_dtoa_r+0x4e2>
 800e37c:	9b08      	ldr	r3, [sp, #32]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 8087 	beq.w	800e492 <_dtoa_r+0x4e2>
 800e384:	f1bb 0f00 	cmp.w	fp, #0
 800e388:	dd34      	ble.n	800e3f4 <_dtoa_r+0x444>
 800e38a:	4620      	mov	r0, r4
 800e38c:	2200      	movs	r2, #0
 800e38e:	4629      	mov	r1, r5
 800e390:	4b6c      	ldr	r3, [pc, #432]	@ (800e544 <_dtoa_r+0x594>)
 800e392:	f7f2 f8a1 	bl	80004d8 <__aeabi_dmul>
 800e396:	465c      	mov	r4, fp
 800e398:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e39c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e3a0:	3601      	adds	r6, #1
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f7f2 f82e 	bl	8000404 <__aeabi_i2d>
 800e3a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3ac:	f7f2 f894 	bl	80004d8 <__aeabi_dmul>
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	4b65      	ldr	r3, [pc, #404]	@ (800e548 <_dtoa_r+0x598>)
 800e3b4:	f7f1 feda 	bl	800016c <__adddf3>
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3be:	2c00      	cmp	r4, #0
 800e3c0:	d16a      	bne.n	800e498 <_dtoa_r+0x4e8>
 800e3c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	4b60      	ldr	r3, [pc, #384]	@ (800e54c <_dtoa_r+0x59c>)
 800e3ca:	f7f1 fecd 	bl	8000168 <__aeabi_dsub>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3d6:	462a      	mov	r2, r5
 800e3d8:	4633      	mov	r3, r6
 800e3da:	f7f2 fb0d 	bl	80009f8 <__aeabi_dcmpgt>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	f040 8298 	bne.w	800e914 <_dtoa_r+0x964>
 800e3e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3e8:	462a      	mov	r2, r5
 800e3ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e3ee:	f7f2 fae5 	bl	80009bc <__aeabi_dcmplt>
 800e3f2:	bb38      	cbnz	r0, 800e444 <_dtoa_r+0x494>
 800e3f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e3f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e3fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f2c0 8157 	blt.w	800e6b2 <_dtoa_r+0x702>
 800e404:	2f0e      	cmp	r7, #14
 800e406:	f300 8154 	bgt.w	800e6b2 <_dtoa_r+0x702>
 800e40a:	4b4b      	ldr	r3, [pc, #300]	@ (800e538 <_dtoa_r+0x588>)
 800e40c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e410:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e414:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e418:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f280 80e5 	bge.w	800e5ea <_dtoa_r+0x63a>
 800e420:	9b08      	ldr	r3, [sp, #32]
 800e422:	2b00      	cmp	r3, #0
 800e424:	f300 80e1 	bgt.w	800e5ea <_dtoa_r+0x63a>
 800e428:	d10c      	bne.n	800e444 <_dtoa_r+0x494>
 800e42a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e42e:	2200      	movs	r2, #0
 800e430:	4b46      	ldr	r3, [pc, #280]	@ (800e54c <_dtoa_r+0x59c>)
 800e432:	f7f2 f851 	bl	80004d8 <__aeabi_dmul>
 800e436:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e43a:	f7f2 fad3 	bl	80009e4 <__aeabi_dcmpge>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f000 8266 	beq.w	800e910 <_dtoa_r+0x960>
 800e444:	2400      	movs	r4, #0
 800e446:	4625      	mov	r5, r4
 800e448:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e44a:	4656      	mov	r6, sl
 800e44c:	ea6f 0803 	mvn.w	r8, r3
 800e450:	2700      	movs	r7, #0
 800e452:	4621      	mov	r1, r4
 800e454:	4648      	mov	r0, r9
 800e456:	f7fe fe5d 	bl	800d114 <_Bfree>
 800e45a:	2d00      	cmp	r5, #0
 800e45c:	f000 80bd 	beq.w	800e5da <_dtoa_r+0x62a>
 800e460:	b12f      	cbz	r7, 800e46e <_dtoa_r+0x4be>
 800e462:	42af      	cmp	r7, r5
 800e464:	d003      	beq.n	800e46e <_dtoa_r+0x4be>
 800e466:	4639      	mov	r1, r7
 800e468:	4648      	mov	r0, r9
 800e46a:	f7fe fe53 	bl	800d114 <_Bfree>
 800e46e:	4629      	mov	r1, r5
 800e470:	4648      	mov	r0, r9
 800e472:	f7fe fe4f 	bl	800d114 <_Bfree>
 800e476:	e0b0      	b.n	800e5da <_dtoa_r+0x62a>
 800e478:	07e2      	lsls	r2, r4, #31
 800e47a:	d505      	bpl.n	800e488 <_dtoa_r+0x4d8>
 800e47c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e480:	f7f2 f82a 	bl	80004d8 <__aeabi_dmul>
 800e484:	2301      	movs	r3, #1
 800e486:	3601      	adds	r6, #1
 800e488:	1064      	asrs	r4, r4, #1
 800e48a:	3508      	adds	r5, #8
 800e48c:	e762      	b.n	800e354 <_dtoa_r+0x3a4>
 800e48e:	2602      	movs	r6, #2
 800e490:	e765      	b.n	800e35e <_dtoa_r+0x3ae>
 800e492:	46b8      	mov	r8, r7
 800e494:	9c08      	ldr	r4, [sp, #32]
 800e496:	e784      	b.n	800e3a2 <_dtoa_r+0x3f2>
 800e498:	4b27      	ldr	r3, [pc, #156]	@ (800e538 <_dtoa_r+0x588>)
 800e49a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e49c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4a4:	4454      	add	r4, sl
 800e4a6:	2900      	cmp	r1, #0
 800e4a8:	d054      	beq.n	800e554 <_dtoa_r+0x5a4>
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	4928      	ldr	r1, [pc, #160]	@ (800e550 <_dtoa_r+0x5a0>)
 800e4ae:	f7f2 f93d 	bl	800072c <__aeabi_ddiv>
 800e4b2:	4633      	mov	r3, r6
 800e4b4:	462a      	mov	r2, r5
 800e4b6:	f7f1 fe57 	bl	8000168 <__aeabi_dsub>
 800e4ba:	4656      	mov	r6, sl
 800e4bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4c4:	f7f2 faa2 	bl	8000a0c <__aeabi_d2iz>
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	f7f1 ff9b 	bl	8000404 <__aeabi_i2d>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4d6:	f7f1 fe47 	bl	8000168 <__aeabi_dsub>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	3530      	adds	r5, #48	@ 0x30
 800e4e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e4e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4e8:	f806 5b01 	strb.w	r5, [r6], #1
 800e4ec:	f7f2 fa66 	bl	80009bc <__aeabi_dcmplt>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d172      	bne.n	800e5da <_dtoa_r+0x62a>
 800e4f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	4911      	ldr	r1, [pc, #68]	@ (800e540 <_dtoa_r+0x590>)
 800e4fc:	f7f1 fe34 	bl	8000168 <__aeabi_dsub>
 800e500:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e504:	f7f2 fa5a 	bl	80009bc <__aeabi_dcmplt>
 800e508:	2800      	cmp	r0, #0
 800e50a:	f040 80b4 	bne.w	800e676 <_dtoa_r+0x6c6>
 800e50e:	42a6      	cmp	r6, r4
 800e510:	f43f af70 	beq.w	800e3f4 <_dtoa_r+0x444>
 800e514:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e518:	2200      	movs	r2, #0
 800e51a:	4b0a      	ldr	r3, [pc, #40]	@ (800e544 <_dtoa_r+0x594>)
 800e51c:	f7f1 ffdc 	bl	80004d8 <__aeabi_dmul>
 800e520:	2200      	movs	r2, #0
 800e522:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e52a:	4b06      	ldr	r3, [pc, #24]	@ (800e544 <_dtoa_r+0x594>)
 800e52c:	f7f1 ffd4 	bl	80004d8 <__aeabi_dmul>
 800e530:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e534:	e7c4      	b.n	800e4c0 <_dtoa_r+0x510>
 800e536:	bf00      	nop
 800e538:	0800f6f8 	.word	0x0800f6f8
 800e53c:	0800f6d0 	.word	0x0800f6d0
 800e540:	3ff00000 	.word	0x3ff00000
 800e544:	40240000 	.word	0x40240000
 800e548:	401c0000 	.word	0x401c0000
 800e54c:	40140000 	.word	0x40140000
 800e550:	3fe00000 	.word	0x3fe00000
 800e554:	4631      	mov	r1, r6
 800e556:	4628      	mov	r0, r5
 800e558:	f7f1 ffbe 	bl	80004d8 <__aeabi_dmul>
 800e55c:	4656      	mov	r6, sl
 800e55e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e562:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e568:	f7f2 fa50 	bl	8000a0c <__aeabi_d2iz>
 800e56c:	4605      	mov	r5, r0
 800e56e:	f7f1 ff49 	bl	8000404 <__aeabi_i2d>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e57a:	f7f1 fdf5 	bl	8000168 <__aeabi_dsub>
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	3530      	adds	r5, #48	@ 0x30
 800e584:	f806 5b01 	strb.w	r5, [r6], #1
 800e588:	42a6      	cmp	r6, r4
 800e58a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e58e:	f04f 0200 	mov.w	r2, #0
 800e592:	d124      	bne.n	800e5de <_dtoa_r+0x62e>
 800e594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e598:	4bae      	ldr	r3, [pc, #696]	@ (800e854 <_dtoa_r+0x8a4>)
 800e59a:	f7f1 fde7 	bl	800016c <__adddf3>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5a6:	f7f2 fa27 	bl	80009f8 <__aeabi_dcmpgt>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d163      	bne.n	800e676 <_dtoa_r+0x6c6>
 800e5ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	49a7      	ldr	r1, [pc, #668]	@ (800e854 <_dtoa_r+0x8a4>)
 800e5b6:	f7f1 fdd7 	bl	8000168 <__aeabi_dsub>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5c2:	f7f2 f9fb 	bl	80009bc <__aeabi_dcmplt>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	f43f af14 	beq.w	800e3f4 <_dtoa_r+0x444>
 800e5cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e5ce:	1e73      	subs	r3, r6, #1
 800e5d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e5d6:	2b30      	cmp	r3, #48	@ 0x30
 800e5d8:	d0f8      	beq.n	800e5cc <_dtoa_r+0x61c>
 800e5da:	4647      	mov	r7, r8
 800e5dc:	e03b      	b.n	800e656 <_dtoa_r+0x6a6>
 800e5de:	4b9e      	ldr	r3, [pc, #632]	@ (800e858 <_dtoa_r+0x8a8>)
 800e5e0:	f7f1 ff7a 	bl	80004d8 <__aeabi_dmul>
 800e5e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e5e8:	e7bc      	b.n	800e564 <_dtoa_r+0x5b4>
 800e5ea:	4656      	mov	r6, sl
 800e5ec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	f7f2 f898 	bl	800072c <__aeabi_ddiv>
 800e5fc:	f7f2 fa06 	bl	8000a0c <__aeabi_d2iz>
 800e600:	4680      	mov	r8, r0
 800e602:	f7f1 feff 	bl	8000404 <__aeabi_i2d>
 800e606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e60a:	f7f1 ff65 	bl	80004d8 <__aeabi_dmul>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4620      	mov	r0, r4
 800e614:	4629      	mov	r1, r5
 800e616:	f7f1 fda7 	bl	8000168 <__aeabi_dsub>
 800e61a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e61e:	9d08      	ldr	r5, [sp, #32]
 800e620:	f806 4b01 	strb.w	r4, [r6], #1
 800e624:	eba6 040a 	sub.w	r4, r6, sl
 800e628:	42a5      	cmp	r5, r4
 800e62a:	4602      	mov	r2, r0
 800e62c:	460b      	mov	r3, r1
 800e62e:	d133      	bne.n	800e698 <_dtoa_r+0x6e8>
 800e630:	f7f1 fd9c 	bl	800016c <__adddf3>
 800e634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e638:	4604      	mov	r4, r0
 800e63a:	460d      	mov	r5, r1
 800e63c:	f7f2 f9dc 	bl	80009f8 <__aeabi_dcmpgt>
 800e640:	b9c0      	cbnz	r0, 800e674 <_dtoa_r+0x6c4>
 800e642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e646:	4620      	mov	r0, r4
 800e648:	4629      	mov	r1, r5
 800e64a:	f7f2 f9ad 	bl	80009a8 <__aeabi_dcmpeq>
 800e64e:	b110      	cbz	r0, 800e656 <_dtoa_r+0x6a6>
 800e650:	f018 0f01 	tst.w	r8, #1
 800e654:	d10e      	bne.n	800e674 <_dtoa_r+0x6c4>
 800e656:	4648      	mov	r0, r9
 800e658:	9903      	ldr	r1, [sp, #12]
 800e65a:	f7fe fd5b 	bl	800d114 <_Bfree>
 800e65e:	2300      	movs	r3, #0
 800e660:	7033      	strb	r3, [r6, #0]
 800e662:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e664:	3701      	adds	r7, #1
 800e666:	601f      	str	r7, [r3, #0]
 800e668:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f000 824b 	beq.w	800eb06 <_dtoa_r+0xb56>
 800e670:	601e      	str	r6, [r3, #0]
 800e672:	e248      	b.n	800eb06 <_dtoa_r+0xb56>
 800e674:	46b8      	mov	r8, r7
 800e676:	4633      	mov	r3, r6
 800e678:	461e      	mov	r6, r3
 800e67a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e67e:	2a39      	cmp	r2, #57	@ 0x39
 800e680:	d106      	bne.n	800e690 <_dtoa_r+0x6e0>
 800e682:	459a      	cmp	sl, r3
 800e684:	d1f8      	bne.n	800e678 <_dtoa_r+0x6c8>
 800e686:	2230      	movs	r2, #48	@ 0x30
 800e688:	f108 0801 	add.w	r8, r8, #1
 800e68c:	f88a 2000 	strb.w	r2, [sl]
 800e690:	781a      	ldrb	r2, [r3, #0]
 800e692:	3201      	adds	r2, #1
 800e694:	701a      	strb	r2, [r3, #0]
 800e696:	e7a0      	b.n	800e5da <_dtoa_r+0x62a>
 800e698:	2200      	movs	r2, #0
 800e69a:	4b6f      	ldr	r3, [pc, #444]	@ (800e858 <_dtoa_r+0x8a8>)
 800e69c:	f7f1 ff1c 	bl	80004d8 <__aeabi_dmul>
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	460d      	mov	r5, r1
 800e6a8:	f7f2 f97e 	bl	80009a8 <__aeabi_dcmpeq>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d09f      	beq.n	800e5f0 <_dtoa_r+0x640>
 800e6b0:	e7d1      	b.n	800e656 <_dtoa_r+0x6a6>
 800e6b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e6b4:	2a00      	cmp	r2, #0
 800e6b6:	f000 80ea 	beq.w	800e88e <_dtoa_r+0x8de>
 800e6ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e6bc:	2a01      	cmp	r2, #1
 800e6be:	f300 80cd 	bgt.w	800e85c <_dtoa_r+0x8ac>
 800e6c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	f000 80c1 	beq.w	800e84c <_dtoa_r+0x89c>
 800e6ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e6d0:	9e04      	ldr	r6, [sp, #16]
 800e6d2:	9a04      	ldr	r2, [sp, #16]
 800e6d4:	2101      	movs	r1, #1
 800e6d6:	441a      	add	r2, r3
 800e6d8:	9204      	str	r2, [sp, #16]
 800e6da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6dc:	4648      	mov	r0, r9
 800e6de:	441a      	add	r2, r3
 800e6e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6e2:	f7fe fe15 	bl	800d310 <__i2b>
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	b166      	cbz	r6, 800e704 <_dtoa_r+0x754>
 800e6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	dd09      	ble.n	800e704 <_dtoa_r+0x754>
 800e6f0:	42b3      	cmp	r3, r6
 800e6f2:	bfa8      	it	ge
 800e6f4:	4633      	movge	r3, r6
 800e6f6:	9a04      	ldr	r2, [sp, #16]
 800e6f8:	1af6      	subs	r6, r6, r3
 800e6fa:	1ad2      	subs	r2, r2, r3
 800e6fc:	9204      	str	r2, [sp, #16]
 800e6fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	9309      	str	r3, [sp, #36]	@ 0x24
 800e704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e706:	b30b      	cbz	r3, 800e74c <_dtoa_r+0x79c>
 800e708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f000 80c6 	beq.w	800e89c <_dtoa_r+0x8ec>
 800e710:	2c00      	cmp	r4, #0
 800e712:	f000 80c0 	beq.w	800e896 <_dtoa_r+0x8e6>
 800e716:	4629      	mov	r1, r5
 800e718:	4622      	mov	r2, r4
 800e71a:	4648      	mov	r0, r9
 800e71c:	f7fe feb0 	bl	800d480 <__pow5mult>
 800e720:	9a03      	ldr	r2, [sp, #12]
 800e722:	4601      	mov	r1, r0
 800e724:	4605      	mov	r5, r0
 800e726:	4648      	mov	r0, r9
 800e728:	f7fe fe08 	bl	800d33c <__multiply>
 800e72c:	9903      	ldr	r1, [sp, #12]
 800e72e:	4680      	mov	r8, r0
 800e730:	4648      	mov	r0, r9
 800e732:	f7fe fcef 	bl	800d114 <_Bfree>
 800e736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e738:	1b1b      	subs	r3, r3, r4
 800e73a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e73c:	f000 80b1 	beq.w	800e8a2 <_dtoa_r+0x8f2>
 800e740:	4641      	mov	r1, r8
 800e742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e744:	4648      	mov	r0, r9
 800e746:	f7fe fe9b 	bl	800d480 <__pow5mult>
 800e74a:	9003      	str	r0, [sp, #12]
 800e74c:	2101      	movs	r1, #1
 800e74e:	4648      	mov	r0, r9
 800e750:	f7fe fdde 	bl	800d310 <__i2b>
 800e754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e756:	4604      	mov	r4, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 81d8 	beq.w	800eb0e <_dtoa_r+0xb5e>
 800e75e:	461a      	mov	r2, r3
 800e760:	4601      	mov	r1, r0
 800e762:	4648      	mov	r0, r9
 800e764:	f7fe fe8c 	bl	800d480 <__pow5mult>
 800e768:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e76a:	4604      	mov	r4, r0
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	f300 809f 	bgt.w	800e8b0 <_dtoa_r+0x900>
 800e772:	9b06      	ldr	r3, [sp, #24]
 800e774:	2b00      	cmp	r3, #0
 800e776:	f040 8097 	bne.w	800e8a8 <_dtoa_r+0x8f8>
 800e77a:	9b07      	ldr	r3, [sp, #28]
 800e77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e780:	2b00      	cmp	r3, #0
 800e782:	f040 8093 	bne.w	800e8ac <_dtoa_r+0x8fc>
 800e786:	9b07      	ldr	r3, [sp, #28]
 800e788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e78c:	0d1b      	lsrs	r3, r3, #20
 800e78e:	051b      	lsls	r3, r3, #20
 800e790:	b133      	cbz	r3, 800e7a0 <_dtoa_r+0x7f0>
 800e792:	9b04      	ldr	r3, [sp, #16]
 800e794:	3301      	adds	r3, #1
 800e796:	9304      	str	r3, [sp, #16]
 800e798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e79a:	3301      	adds	r3, #1
 800e79c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e79e:	2301      	movs	r3, #1
 800e7a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f000 81b8 	beq.w	800eb1a <_dtoa_r+0xb6a>
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7b0:	6918      	ldr	r0, [r3, #16]
 800e7b2:	f7fe fd61 	bl	800d278 <__hi0bits>
 800e7b6:	f1c0 0020 	rsb	r0, r0, #32
 800e7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7bc:	4418      	add	r0, r3
 800e7be:	f010 001f 	ands.w	r0, r0, #31
 800e7c2:	f000 8082 	beq.w	800e8ca <_dtoa_r+0x91a>
 800e7c6:	f1c0 0320 	rsb	r3, r0, #32
 800e7ca:	2b04      	cmp	r3, #4
 800e7cc:	dd73      	ble.n	800e8b6 <_dtoa_r+0x906>
 800e7ce:	9b04      	ldr	r3, [sp, #16]
 800e7d0:	f1c0 001c 	rsb	r0, r0, #28
 800e7d4:	4403      	add	r3, r0
 800e7d6:	9304      	str	r3, [sp, #16]
 800e7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7da:	4406      	add	r6, r0
 800e7dc:	4403      	add	r3, r0
 800e7de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7e0:	9b04      	ldr	r3, [sp, #16]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	dd05      	ble.n	800e7f2 <_dtoa_r+0x842>
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	4648      	mov	r0, r9
 800e7ea:	9903      	ldr	r1, [sp, #12]
 800e7ec:	f7fe fea2 	bl	800d534 <__lshift>
 800e7f0:	9003      	str	r0, [sp, #12]
 800e7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	dd05      	ble.n	800e804 <_dtoa_r+0x854>
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	4648      	mov	r0, r9
 800e7fe:	f7fe fe99 	bl	800d534 <__lshift>
 800e802:	4604      	mov	r4, r0
 800e804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e806:	2b00      	cmp	r3, #0
 800e808:	d061      	beq.n	800e8ce <_dtoa_r+0x91e>
 800e80a:	4621      	mov	r1, r4
 800e80c:	9803      	ldr	r0, [sp, #12]
 800e80e:	f7fe fefd 	bl	800d60c <__mcmp>
 800e812:	2800      	cmp	r0, #0
 800e814:	da5b      	bge.n	800e8ce <_dtoa_r+0x91e>
 800e816:	2300      	movs	r3, #0
 800e818:	220a      	movs	r2, #10
 800e81a:	4648      	mov	r0, r9
 800e81c:	9903      	ldr	r1, [sp, #12]
 800e81e:	f7fe fc9b 	bl	800d158 <__multadd>
 800e822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e824:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e828:	9003      	str	r0, [sp, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 8177 	beq.w	800eb1e <_dtoa_r+0xb6e>
 800e830:	4629      	mov	r1, r5
 800e832:	2300      	movs	r3, #0
 800e834:	220a      	movs	r2, #10
 800e836:	4648      	mov	r0, r9
 800e838:	f7fe fc8e 	bl	800d158 <__multadd>
 800e83c:	f1bb 0f00 	cmp.w	fp, #0
 800e840:	4605      	mov	r5, r0
 800e842:	dc6f      	bgt.n	800e924 <_dtoa_r+0x974>
 800e844:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e846:	2b02      	cmp	r3, #2
 800e848:	dc49      	bgt.n	800e8de <_dtoa_r+0x92e>
 800e84a:	e06b      	b.n	800e924 <_dtoa_r+0x974>
 800e84c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e84e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e852:	e73c      	b.n	800e6ce <_dtoa_r+0x71e>
 800e854:	3fe00000 	.word	0x3fe00000
 800e858:	40240000 	.word	0x40240000
 800e85c:	9b08      	ldr	r3, [sp, #32]
 800e85e:	1e5c      	subs	r4, r3, #1
 800e860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e862:	42a3      	cmp	r3, r4
 800e864:	db09      	blt.n	800e87a <_dtoa_r+0x8ca>
 800e866:	1b1c      	subs	r4, r3, r4
 800e868:	9b08      	ldr	r3, [sp, #32]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f6bf af30 	bge.w	800e6d0 <_dtoa_r+0x720>
 800e870:	9b04      	ldr	r3, [sp, #16]
 800e872:	9a08      	ldr	r2, [sp, #32]
 800e874:	1a9e      	subs	r6, r3, r2
 800e876:	2300      	movs	r3, #0
 800e878:	e72b      	b.n	800e6d2 <_dtoa_r+0x722>
 800e87a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e87c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e87e:	1ae3      	subs	r3, r4, r3
 800e880:	441a      	add	r2, r3
 800e882:	940a      	str	r4, [sp, #40]	@ 0x28
 800e884:	9e04      	ldr	r6, [sp, #16]
 800e886:	2400      	movs	r4, #0
 800e888:	9b08      	ldr	r3, [sp, #32]
 800e88a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e88c:	e721      	b.n	800e6d2 <_dtoa_r+0x722>
 800e88e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e890:	9e04      	ldr	r6, [sp, #16]
 800e892:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e894:	e728      	b.n	800e6e8 <_dtoa_r+0x738>
 800e896:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e89a:	e751      	b.n	800e740 <_dtoa_r+0x790>
 800e89c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e89e:	9903      	ldr	r1, [sp, #12]
 800e8a0:	e750      	b.n	800e744 <_dtoa_r+0x794>
 800e8a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8a6:	e751      	b.n	800e74c <_dtoa_r+0x79c>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	e779      	b.n	800e7a0 <_dtoa_r+0x7f0>
 800e8ac:	9b06      	ldr	r3, [sp, #24]
 800e8ae:	e777      	b.n	800e7a0 <_dtoa_r+0x7f0>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8b4:	e779      	b.n	800e7aa <_dtoa_r+0x7fa>
 800e8b6:	d093      	beq.n	800e7e0 <_dtoa_r+0x830>
 800e8b8:	9a04      	ldr	r2, [sp, #16]
 800e8ba:	331c      	adds	r3, #28
 800e8bc:	441a      	add	r2, r3
 800e8be:	9204      	str	r2, [sp, #16]
 800e8c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8c2:	441e      	add	r6, r3
 800e8c4:	441a      	add	r2, r3
 800e8c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8c8:	e78a      	b.n	800e7e0 <_dtoa_r+0x830>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	e7f4      	b.n	800e8b8 <_dtoa_r+0x908>
 800e8ce:	9b08      	ldr	r3, [sp, #32]
 800e8d0:	46b8      	mov	r8, r7
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	dc20      	bgt.n	800e918 <_dtoa_r+0x968>
 800e8d6:	469b      	mov	fp, r3
 800e8d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	dd1e      	ble.n	800e91c <_dtoa_r+0x96c>
 800e8de:	f1bb 0f00 	cmp.w	fp, #0
 800e8e2:	f47f adb1 	bne.w	800e448 <_dtoa_r+0x498>
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	465b      	mov	r3, fp
 800e8ea:	2205      	movs	r2, #5
 800e8ec:	4648      	mov	r0, r9
 800e8ee:	f7fe fc33 	bl	800d158 <__multadd>
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	9803      	ldr	r0, [sp, #12]
 800e8f8:	f7fe fe88 	bl	800d60c <__mcmp>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	f77f ada3 	ble.w	800e448 <_dtoa_r+0x498>
 800e902:	4656      	mov	r6, sl
 800e904:	2331      	movs	r3, #49	@ 0x31
 800e906:	f108 0801 	add.w	r8, r8, #1
 800e90a:	f806 3b01 	strb.w	r3, [r6], #1
 800e90e:	e59f      	b.n	800e450 <_dtoa_r+0x4a0>
 800e910:	46b8      	mov	r8, r7
 800e912:	9c08      	ldr	r4, [sp, #32]
 800e914:	4625      	mov	r5, r4
 800e916:	e7f4      	b.n	800e902 <_dtoa_r+0x952>
 800e918:	f8dd b020 	ldr.w	fp, [sp, #32]
 800e91c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f000 8101 	beq.w	800eb26 <_dtoa_r+0xb76>
 800e924:	2e00      	cmp	r6, #0
 800e926:	dd05      	ble.n	800e934 <_dtoa_r+0x984>
 800e928:	4629      	mov	r1, r5
 800e92a:	4632      	mov	r2, r6
 800e92c:	4648      	mov	r0, r9
 800e92e:	f7fe fe01 	bl	800d534 <__lshift>
 800e932:	4605      	mov	r5, r0
 800e934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e936:	2b00      	cmp	r3, #0
 800e938:	d05c      	beq.n	800e9f4 <_dtoa_r+0xa44>
 800e93a:	4648      	mov	r0, r9
 800e93c:	6869      	ldr	r1, [r5, #4]
 800e93e:	f7fe fba9 	bl	800d094 <_Balloc>
 800e942:	4606      	mov	r6, r0
 800e944:	b928      	cbnz	r0, 800e952 <_dtoa_r+0x9a2>
 800e946:	4602      	mov	r2, r0
 800e948:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e94c:	4b80      	ldr	r3, [pc, #512]	@ (800eb50 <_dtoa_r+0xba0>)
 800e94e:	f7ff bb43 	b.w	800dfd8 <_dtoa_r+0x28>
 800e952:	692a      	ldr	r2, [r5, #16]
 800e954:	f105 010c 	add.w	r1, r5, #12
 800e958:	3202      	adds	r2, #2
 800e95a:	0092      	lsls	r2, r2, #2
 800e95c:	300c      	adds	r0, #12
 800e95e:	f7fd ff42 	bl	800c7e6 <memcpy>
 800e962:	2201      	movs	r2, #1
 800e964:	4631      	mov	r1, r6
 800e966:	4648      	mov	r0, r9
 800e968:	f7fe fde4 	bl	800d534 <__lshift>
 800e96c:	462f      	mov	r7, r5
 800e96e:	4605      	mov	r5, r0
 800e970:	f10a 0301 	add.w	r3, sl, #1
 800e974:	9304      	str	r3, [sp, #16]
 800e976:	eb0a 030b 	add.w	r3, sl, fp
 800e97a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e97c:	9b06      	ldr	r3, [sp, #24]
 800e97e:	f003 0301 	and.w	r3, r3, #1
 800e982:	9309      	str	r3, [sp, #36]	@ 0x24
 800e984:	9b04      	ldr	r3, [sp, #16]
 800e986:	4621      	mov	r1, r4
 800e988:	9803      	ldr	r0, [sp, #12]
 800e98a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e98e:	f7ff fa85 	bl	800de9c <quorem>
 800e992:	4603      	mov	r3, r0
 800e994:	4639      	mov	r1, r7
 800e996:	3330      	adds	r3, #48	@ 0x30
 800e998:	9006      	str	r0, [sp, #24]
 800e99a:	9803      	ldr	r0, [sp, #12]
 800e99c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e99e:	f7fe fe35 	bl	800d60c <__mcmp>
 800e9a2:	462a      	mov	r2, r5
 800e9a4:	9008      	str	r0, [sp, #32]
 800e9a6:	4621      	mov	r1, r4
 800e9a8:	4648      	mov	r0, r9
 800e9aa:	f7fe fe4b 	bl	800d644 <__mdiff>
 800e9ae:	68c2      	ldr	r2, [r0, #12]
 800e9b0:	4606      	mov	r6, r0
 800e9b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9b4:	bb02      	cbnz	r2, 800e9f8 <_dtoa_r+0xa48>
 800e9b6:	4601      	mov	r1, r0
 800e9b8:	9803      	ldr	r0, [sp, #12]
 800e9ba:	f7fe fe27 	bl	800d60c <__mcmp>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4648      	mov	r0, r9
 800e9c6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800e9ca:	f7fe fba3 	bl	800d114 <_Bfree>
 800e9ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e9d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e9d2:	9e04      	ldr	r6, [sp, #16]
 800e9d4:	ea42 0103 	orr.w	r1, r2, r3
 800e9d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9da:	4319      	orrs	r1, r3
 800e9dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9de:	d10d      	bne.n	800e9fc <_dtoa_r+0xa4c>
 800e9e0:	2b39      	cmp	r3, #57	@ 0x39
 800e9e2:	d027      	beq.n	800ea34 <_dtoa_r+0xa84>
 800e9e4:	9a08      	ldr	r2, [sp, #32]
 800e9e6:	2a00      	cmp	r2, #0
 800e9e8:	dd01      	ble.n	800e9ee <_dtoa_r+0xa3e>
 800e9ea:	9b06      	ldr	r3, [sp, #24]
 800e9ec:	3331      	adds	r3, #49	@ 0x31
 800e9ee:	f88b 3000 	strb.w	r3, [fp]
 800e9f2:	e52e      	b.n	800e452 <_dtoa_r+0x4a2>
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	e7b9      	b.n	800e96c <_dtoa_r+0x9bc>
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	e7e2      	b.n	800e9c2 <_dtoa_r+0xa12>
 800e9fc:	9908      	ldr	r1, [sp, #32]
 800e9fe:	2900      	cmp	r1, #0
 800ea00:	db04      	blt.n	800ea0c <_dtoa_r+0xa5c>
 800ea02:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800ea04:	4301      	orrs	r1, r0
 800ea06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea08:	4301      	orrs	r1, r0
 800ea0a:	d120      	bne.n	800ea4e <_dtoa_r+0xa9e>
 800ea0c:	2a00      	cmp	r2, #0
 800ea0e:	ddee      	ble.n	800e9ee <_dtoa_r+0xa3e>
 800ea10:	2201      	movs	r2, #1
 800ea12:	9903      	ldr	r1, [sp, #12]
 800ea14:	4648      	mov	r0, r9
 800ea16:	9304      	str	r3, [sp, #16]
 800ea18:	f7fe fd8c 	bl	800d534 <__lshift>
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	9003      	str	r0, [sp, #12]
 800ea20:	f7fe fdf4 	bl	800d60c <__mcmp>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	9b04      	ldr	r3, [sp, #16]
 800ea28:	dc02      	bgt.n	800ea30 <_dtoa_r+0xa80>
 800ea2a:	d1e0      	bne.n	800e9ee <_dtoa_r+0xa3e>
 800ea2c:	07da      	lsls	r2, r3, #31
 800ea2e:	d5de      	bpl.n	800e9ee <_dtoa_r+0xa3e>
 800ea30:	2b39      	cmp	r3, #57	@ 0x39
 800ea32:	d1da      	bne.n	800e9ea <_dtoa_r+0xa3a>
 800ea34:	2339      	movs	r3, #57	@ 0x39
 800ea36:	f88b 3000 	strb.w	r3, [fp]
 800ea3a:	4633      	mov	r3, r6
 800ea3c:	461e      	mov	r6, r3
 800ea3e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea42:	3b01      	subs	r3, #1
 800ea44:	2a39      	cmp	r2, #57	@ 0x39
 800ea46:	d04e      	beq.n	800eae6 <_dtoa_r+0xb36>
 800ea48:	3201      	adds	r2, #1
 800ea4a:	701a      	strb	r2, [r3, #0]
 800ea4c:	e501      	b.n	800e452 <_dtoa_r+0x4a2>
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	dd03      	ble.n	800ea5a <_dtoa_r+0xaaa>
 800ea52:	2b39      	cmp	r3, #57	@ 0x39
 800ea54:	d0ee      	beq.n	800ea34 <_dtoa_r+0xa84>
 800ea56:	3301      	adds	r3, #1
 800ea58:	e7c9      	b.n	800e9ee <_dtoa_r+0xa3e>
 800ea5a:	9a04      	ldr	r2, [sp, #16]
 800ea5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ea5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea62:	428a      	cmp	r2, r1
 800ea64:	d028      	beq.n	800eab8 <_dtoa_r+0xb08>
 800ea66:	2300      	movs	r3, #0
 800ea68:	220a      	movs	r2, #10
 800ea6a:	9903      	ldr	r1, [sp, #12]
 800ea6c:	4648      	mov	r0, r9
 800ea6e:	f7fe fb73 	bl	800d158 <__multadd>
 800ea72:	42af      	cmp	r7, r5
 800ea74:	9003      	str	r0, [sp, #12]
 800ea76:	f04f 0300 	mov.w	r3, #0
 800ea7a:	f04f 020a 	mov.w	r2, #10
 800ea7e:	4639      	mov	r1, r7
 800ea80:	4648      	mov	r0, r9
 800ea82:	d107      	bne.n	800ea94 <_dtoa_r+0xae4>
 800ea84:	f7fe fb68 	bl	800d158 <__multadd>
 800ea88:	4607      	mov	r7, r0
 800ea8a:	4605      	mov	r5, r0
 800ea8c:	9b04      	ldr	r3, [sp, #16]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	9304      	str	r3, [sp, #16]
 800ea92:	e777      	b.n	800e984 <_dtoa_r+0x9d4>
 800ea94:	f7fe fb60 	bl	800d158 <__multadd>
 800ea98:	4629      	mov	r1, r5
 800ea9a:	4607      	mov	r7, r0
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	220a      	movs	r2, #10
 800eaa0:	4648      	mov	r0, r9
 800eaa2:	f7fe fb59 	bl	800d158 <__multadd>
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	e7f0      	b.n	800ea8c <_dtoa_r+0xadc>
 800eaaa:	f1bb 0f00 	cmp.w	fp, #0
 800eaae:	bfcc      	ite	gt
 800eab0:	465e      	movgt	r6, fp
 800eab2:	2601      	movle	r6, #1
 800eab4:	2700      	movs	r7, #0
 800eab6:	4456      	add	r6, sl
 800eab8:	2201      	movs	r2, #1
 800eaba:	9903      	ldr	r1, [sp, #12]
 800eabc:	4648      	mov	r0, r9
 800eabe:	9304      	str	r3, [sp, #16]
 800eac0:	f7fe fd38 	bl	800d534 <__lshift>
 800eac4:	4621      	mov	r1, r4
 800eac6:	9003      	str	r0, [sp, #12]
 800eac8:	f7fe fda0 	bl	800d60c <__mcmp>
 800eacc:	2800      	cmp	r0, #0
 800eace:	dcb4      	bgt.n	800ea3a <_dtoa_r+0xa8a>
 800ead0:	d102      	bne.n	800ead8 <_dtoa_r+0xb28>
 800ead2:	9b04      	ldr	r3, [sp, #16]
 800ead4:	07db      	lsls	r3, r3, #31
 800ead6:	d4b0      	bmi.n	800ea3a <_dtoa_r+0xa8a>
 800ead8:	4633      	mov	r3, r6
 800eada:	461e      	mov	r6, r3
 800eadc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eae0:	2a30      	cmp	r2, #48	@ 0x30
 800eae2:	d0fa      	beq.n	800eada <_dtoa_r+0xb2a>
 800eae4:	e4b5      	b.n	800e452 <_dtoa_r+0x4a2>
 800eae6:	459a      	cmp	sl, r3
 800eae8:	d1a8      	bne.n	800ea3c <_dtoa_r+0xa8c>
 800eaea:	2331      	movs	r3, #49	@ 0x31
 800eaec:	f108 0801 	add.w	r8, r8, #1
 800eaf0:	f88a 3000 	strb.w	r3, [sl]
 800eaf4:	e4ad      	b.n	800e452 <_dtoa_r+0x4a2>
 800eaf6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800eaf8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800eb54 <_dtoa_r+0xba4>
 800eafc:	b11b      	cbz	r3, 800eb06 <_dtoa_r+0xb56>
 800eafe:	f10a 0308 	add.w	r3, sl, #8
 800eb02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800eb04:	6013      	str	r3, [r2, #0]
 800eb06:	4650      	mov	r0, sl
 800eb08:	b017      	add	sp, #92	@ 0x5c
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	f77f ae2e 	ble.w	800e772 <_dtoa_r+0x7c2>
 800eb16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb18:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb1a:	2001      	movs	r0, #1
 800eb1c:	e64d      	b.n	800e7ba <_dtoa_r+0x80a>
 800eb1e:	f1bb 0f00 	cmp.w	fp, #0
 800eb22:	f77f aed9 	ble.w	800e8d8 <_dtoa_r+0x928>
 800eb26:	4656      	mov	r6, sl
 800eb28:	4621      	mov	r1, r4
 800eb2a:	9803      	ldr	r0, [sp, #12]
 800eb2c:	f7ff f9b6 	bl	800de9c <quorem>
 800eb30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800eb34:	f806 3b01 	strb.w	r3, [r6], #1
 800eb38:	eba6 020a 	sub.w	r2, r6, sl
 800eb3c:	4593      	cmp	fp, r2
 800eb3e:	ddb4      	ble.n	800eaaa <_dtoa_r+0xafa>
 800eb40:	2300      	movs	r3, #0
 800eb42:	220a      	movs	r2, #10
 800eb44:	4648      	mov	r0, r9
 800eb46:	9903      	ldr	r1, [sp, #12]
 800eb48:	f7fe fb06 	bl	800d158 <__multadd>
 800eb4c:	9003      	str	r0, [sp, #12]
 800eb4e:	e7eb      	b.n	800eb28 <_dtoa_r+0xb78>
 800eb50:	0800f4b2 	.word	0x0800f4b2
 800eb54:	0800f5cf 	.word	0x0800f5cf

0800eb58 <malloc>:
 800eb58:	4b02      	ldr	r3, [pc, #8]	@ (800eb64 <malloc+0xc>)
 800eb5a:	4601      	mov	r1, r0
 800eb5c:	6818      	ldr	r0, [r3, #0]
 800eb5e:	f7fe b9fb 	b.w	800cf58 <_malloc_r>
 800eb62:	bf00      	nop
 800eb64:	200002f4 	.word	0x200002f4

0800eb68 <fiprintf>:
 800eb68:	b40e      	push	{r1, r2, r3}
 800eb6a:	b503      	push	{r0, r1, lr}
 800eb6c:	4601      	mov	r1, r0
 800eb6e:	ab03      	add	r3, sp, #12
 800eb70:	4805      	ldr	r0, [pc, #20]	@ (800eb88 <fiprintf+0x20>)
 800eb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb76:	6800      	ldr	r0, [r0, #0]
 800eb78:	9301      	str	r3, [sp, #4]
 800eb7a:	f000 f835 	bl	800ebe8 <_vfiprintf_r>
 800eb7e:	b002      	add	sp, #8
 800eb80:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb84:	b003      	add	sp, #12
 800eb86:	4770      	bx	lr
 800eb88:	200002f4 	.word	0x200002f4

0800eb8c <abort>:
 800eb8c:	2006      	movs	r0, #6
 800eb8e:	b508      	push	{r3, lr}
 800eb90:	f000 fb8e 	bl	800f2b0 <raise>
 800eb94:	2001      	movs	r0, #1
 800eb96:	f7f3 fb90 	bl	80022ba <_exit>

0800eb9a <__sfputc_r>:
 800eb9a:	6893      	ldr	r3, [r2, #8]
 800eb9c:	b410      	push	{r4}
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	6093      	str	r3, [r2, #8]
 800eba4:	da07      	bge.n	800ebb6 <__sfputc_r+0x1c>
 800eba6:	6994      	ldr	r4, [r2, #24]
 800eba8:	42a3      	cmp	r3, r4
 800ebaa:	db01      	blt.n	800ebb0 <__sfputc_r+0x16>
 800ebac:	290a      	cmp	r1, #10
 800ebae:	d102      	bne.n	800ebb6 <__sfputc_r+0x1c>
 800ebb0:	bc10      	pop	{r4}
 800ebb2:	f000 bac1 	b.w	800f138 <__swbuf_r>
 800ebb6:	6813      	ldr	r3, [r2, #0]
 800ebb8:	1c58      	adds	r0, r3, #1
 800ebba:	6010      	str	r0, [r2, #0]
 800ebbc:	7019      	strb	r1, [r3, #0]
 800ebbe:	4608      	mov	r0, r1
 800ebc0:	bc10      	pop	{r4}
 800ebc2:	4770      	bx	lr

0800ebc4 <__sfputs_r>:
 800ebc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc6:	4606      	mov	r6, r0
 800ebc8:	460f      	mov	r7, r1
 800ebca:	4614      	mov	r4, r2
 800ebcc:	18d5      	adds	r5, r2, r3
 800ebce:	42ac      	cmp	r4, r5
 800ebd0:	d101      	bne.n	800ebd6 <__sfputs_r+0x12>
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	e007      	b.n	800ebe6 <__sfputs_r+0x22>
 800ebd6:	463a      	mov	r2, r7
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebde:	f7ff ffdc 	bl	800eb9a <__sfputc_r>
 800ebe2:	1c43      	adds	r3, r0, #1
 800ebe4:	d1f3      	bne.n	800ebce <__sfputs_r+0xa>
 800ebe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebe8 <_vfiprintf_r>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	460d      	mov	r5, r1
 800ebee:	4614      	mov	r4, r2
 800ebf0:	4698      	mov	r8, r3
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	b09d      	sub	sp, #116	@ 0x74
 800ebf6:	b118      	cbz	r0, 800ec00 <_vfiprintf_r+0x18>
 800ebf8:	6a03      	ldr	r3, [r0, #32]
 800ebfa:	b90b      	cbnz	r3, 800ec00 <_vfiprintf_r+0x18>
 800ebfc:	f7fd fcec 	bl	800c5d8 <__sinit>
 800ec00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec02:	07d9      	lsls	r1, r3, #31
 800ec04:	d405      	bmi.n	800ec12 <_vfiprintf_r+0x2a>
 800ec06:	89ab      	ldrh	r3, [r5, #12]
 800ec08:	059a      	lsls	r2, r3, #22
 800ec0a:	d402      	bmi.n	800ec12 <_vfiprintf_r+0x2a>
 800ec0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec0e:	f7fd fde8 	bl	800c7e2 <__retarget_lock_acquire_recursive>
 800ec12:	89ab      	ldrh	r3, [r5, #12]
 800ec14:	071b      	lsls	r3, r3, #28
 800ec16:	d501      	bpl.n	800ec1c <_vfiprintf_r+0x34>
 800ec18:	692b      	ldr	r3, [r5, #16]
 800ec1a:	b99b      	cbnz	r3, 800ec44 <_vfiprintf_r+0x5c>
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	4630      	mov	r0, r6
 800ec20:	f000 fac8 	bl	800f1b4 <__swsetup_r>
 800ec24:	b170      	cbz	r0, 800ec44 <_vfiprintf_r+0x5c>
 800ec26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec28:	07dc      	lsls	r4, r3, #31
 800ec2a:	d504      	bpl.n	800ec36 <_vfiprintf_r+0x4e>
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec30:	b01d      	add	sp, #116	@ 0x74
 800ec32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec36:	89ab      	ldrh	r3, [r5, #12]
 800ec38:	0598      	lsls	r0, r3, #22
 800ec3a:	d4f7      	bmi.n	800ec2c <_vfiprintf_r+0x44>
 800ec3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec3e:	f7fd fdd1 	bl	800c7e4 <__retarget_lock_release_recursive>
 800ec42:	e7f3      	b.n	800ec2c <_vfiprintf_r+0x44>
 800ec44:	2300      	movs	r3, #0
 800ec46:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec48:	2320      	movs	r3, #32
 800ec4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec4e:	2330      	movs	r3, #48	@ 0x30
 800ec50:	f04f 0901 	mov.w	r9, #1
 800ec54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec58:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ee04 <_vfiprintf_r+0x21c>
 800ec5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec60:	4623      	mov	r3, r4
 800ec62:	469a      	mov	sl, r3
 800ec64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec68:	b10a      	cbz	r2, 800ec6e <_vfiprintf_r+0x86>
 800ec6a:	2a25      	cmp	r2, #37	@ 0x25
 800ec6c:	d1f9      	bne.n	800ec62 <_vfiprintf_r+0x7a>
 800ec6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ec72:	d00b      	beq.n	800ec8c <_vfiprintf_r+0xa4>
 800ec74:	465b      	mov	r3, fp
 800ec76:	4622      	mov	r2, r4
 800ec78:	4629      	mov	r1, r5
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f7ff ffa2 	bl	800ebc4 <__sfputs_r>
 800ec80:	3001      	adds	r0, #1
 800ec82:	f000 80a7 	beq.w	800edd4 <_vfiprintf_r+0x1ec>
 800ec86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec88:	445a      	add	r2, fp
 800ec8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f000 809f 	beq.w	800edd4 <_vfiprintf_r+0x1ec>
 800ec96:	2300      	movs	r3, #0
 800ec98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eca0:	f10a 0a01 	add.w	sl, sl, #1
 800eca4:	9304      	str	r3, [sp, #16]
 800eca6:	9307      	str	r3, [sp, #28]
 800eca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecac:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecae:	4654      	mov	r4, sl
 800ecb0:	2205      	movs	r2, #5
 800ecb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb6:	4853      	ldr	r0, [pc, #332]	@ (800ee04 <_vfiprintf_r+0x21c>)
 800ecb8:	f000 fb16 	bl	800f2e8 <memchr>
 800ecbc:	9a04      	ldr	r2, [sp, #16]
 800ecbe:	b9d8      	cbnz	r0, 800ecf8 <_vfiprintf_r+0x110>
 800ecc0:	06d1      	lsls	r1, r2, #27
 800ecc2:	bf44      	itt	mi
 800ecc4:	2320      	movmi	r3, #32
 800ecc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecca:	0713      	lsls	r3, r2, #28
 800eccc:	bf44      	itt	mi
 800ecce:	232b      	movmi	r3, #43	@ 0x2b
 800ecd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecd4:	f89a 3000 	ldrb.w	r3, [sl]
 800ecd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecda:	d015      	beq.n	800ed08 <_vfiprintf_r+0x120>
 800ecdc:	4654      	mov	r4, sl
 800ecde:	2000      	movs	r0, #0
 800ece0:	f04f 0c0a 	mov.w	ip, #10
 800ece4:	9a07      	ldr	r2, [sp, #28]
 800ece6:	4621      	mov	r1, r4
 800ece8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecec:	3b30      	subs	r3, #48	@ 0x30
 800ecee:	2b09      	cmp	r3, #9
 800ecf0:	d94b      	bls.n	800ed8a <_vfiprintf_r+0x1a2>
 800ecf2:	b1b0      	cbz	r0, 800ed22 <_vfiprintf_r+0x13a>
 800ecf4:	9207      	str	r2, [sp, #28]
 800ecf6:	e014      	b.n	800ed22 <_vfiprintf_r+0x13a>
 800ecf8:	eba0 0308 	sub.w	r3, r0, r8
 800ecfc:	fa09 f303 	lsl.w	r3, r9, r3
 800ed00:	4313      	orrs	r3, r2
 800ed02:	46a2      	mov	sl, r4
 800ed04:	9304      	str	r3, [sp, #16]
 800ed06:	e7d2      	b.n	800ecae <_vfiprintf_r+0xc6>
 800ed08:	9b03      	ldr	r3, [sp, #12]
 800ed0a:	1d19      	adds	r1, r3, #4
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	9103      	str	r1, [sp, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	bfbb      	ittet	lt
 800ed14:	425b      	neglt	r3, r3
 800ed16:	f042 0202 	orrlt.w	r2, r2, #2
 800ed1a:	9307      	strge	r3, [sp, #28]
 800ed1c:	9307      	strlt	r3, [sp, #28]
 800ed1e:	bfb8      	it	lt
 800ed20:	9204      	strlt	r2, [sp, #16]
 800ed22:	7823      	ldrb	r3, [r4, #0]
 800ed24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed26:	d10a      	bne.n	800ed3e <_vfiprintf_r+0x156>
 800ed28:	7863      	ldrb	r3, [r4, #1]
 800ed2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed2c:	d132      	bne.n	800ed94 <_vfiprintf_r+0x1ac>
 800ed2e:	9b03      	ldr	r3, [sp, #12]
 800ed30:	3402      	adds	r4, #2
 800ed32:	1d1a      	adds	r2, r3, #4
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	9203      	str	r2, [sp, #12]
 800ed38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed3c:	9305      	str	r3, [sp, #20]
 800ed3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ee08 <_vfiprintf_r+0x220>
 800ed42:	2203      	movs	r2, #3
 800ed44:	4650      	mov	r0, sl
 800ed46:	7821      	ldrb	r1, [r4, #0]
 800ed48:	f000 face 	bl	800f2e8 <memchr>
 800ed4c:	b138      	cbz	r0, 800ed5e <_vfiprintf_r+0x176>
 800ed4e:	2240      	movs	r2, #64	@ 0x40
 800ed50:	9b04      	ldr	r3, [sp, #16]
 800ed52:	eba0 000a 	sub.w	r0, r0, sl
 800ed56:	4082      	lsls	r2, r0
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	3401      	adds	r4, #1
 800ed5c:	9304      	str	r3, [sp, #16]
 800ed5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed62:	2206      	movs	r2, #6
 800ed64:	4829      	ldr	r0, [pc, #164]	@ (800ee0c <_vfiprintf_r+0x224>)
 800ed66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed6a:	f000 fabd 	bl	800f2e8 <memchr>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d03f      	beq.n	800edf2 <_vfiprintf_r+0x20a>
 800ed72:	4b27      	ldr	r3, [pc, #156]	@ (800ee10 <_vfiprintf_r+0x228>)
 800ed74:	bb1b      	cbnz	r3, 800edbe <_vfiprintf_r+0x1d6>
 800ed76:	9b03      	ldr	r3, [sp, #12]
 800ed78:	3307      	adds	r3, #7
 800ed7a:	f023 0307 	bic.w	r3, r3, #7
 800ed7e:	3308      	adds	r3, #8
 800ed80:	9303      	str	r3, [sp, #12]
 800ed82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed84:	443b      	add	r3, r7
 800ed86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed88:	e76a      	b.n	800ec60 <_vfiprintf_r+0x78>
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	2001      	movs	r0, #1
 800ed8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed92:	e7a8      	b.n	800ece6 <_vfiprintf_r+0xfe>
 800ed94:	2300      	movs	r3, #0
 800ed96:	f04f 0c0a 	mov.w	ip, #10
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	3401      	adds	r4, #1
 800ed9e:	9305      	str	r3, [sp, #20]
 800eda0:	4620      	mov	r0, r4
 800eda2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eda6:	3a30      	subs	r2, #48	@ 0x30
 800eda8:	2a09      	cmp	r2, #9
 800edaa:	d903      	bls.n	800edb4 <_vfiprintf_r+0x1cc>
 800edac:	2b00      	cmp	r3, #0
 800edae:	d0c6      	beq.n	800ed3e <_vfiprintf_r+0x156>
 800edb0:	9105      	str	r1, [sp, #20]
 800edb2:	e7c4      	b.n	800ed3e <_vfiprintf_r+0x156>
 800edb4:	4604      	mov	r4, r0
 800edb6:	2301      	movs	r3, #1
 800edb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800edbc:	e7f0      	b.n	800eda0 <_vfiprintf_r+0x1b8>
 800edbe:	ab03      	add	r3, sp, #12
 800edc0:	9300      	str	r3, [sp, #0]
 800edc2:	462a      	mov	r2, r5
 800edc4:	4630      	mov	r0, r6
 800edc6:	4b13      	ldr	r3, [pc, #76]	@ (800ee14 <_vfiprintf_r+0x22c>)
 800edc8:	a904      	add	r1, sp, #16
 800edca:	f3af 8000 	nop.w
 800edce:	4607      	mov	r7, r0
 800edd0:	1c78      	adds	r0, r7, #1
 800edd2:	d1d6      	bne.n	800ed82 <_vfiprintf_r+0x19a>
 800edd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edd6:	07d9      	lsls	r1, r3, #31
 800edd8:	d405      	bmi.n	800ede6 <_vfiprintf_r+0x1fe>
 800edda:	89ab      	ldrh	r3, [r5, #12]
 800eddc:	059a      	lsls	r2, r3, #22
 800edde:	d402      	bmi.n	800ede6 <_vfiprintf_r+0x1fe>
 800ede0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ede2:	f7fd fcff 	bl	800c7e4 <__retarget_lock_release_recursive>
 800ede6:	89ab      	ldrh	r3, [r5, #12]
 800ede8:	065b      	lsls	r3, r3, #25
 800edea:	f53f af1f 	bmi.w	800ec2c <_vfiprintf_r+0x44>
 800edee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edf0:	e71e      	b.n	800ec30 <_vfiprintf_r+0x48>
 800edf2:	ab03      	add	r3, sp, #12
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	462a      	mov	r2, r5
 800edf8:	4630      	mov	r0, r6
 800edfa:	4b06      	ldr	r3, [pc, #24]	@ (800ee14 <_vfiprintf_r+0x22c>)
 800edfc:	a904      	add	r1, sp, #16
 800edfe:	f000 f87d 	bl	800eefc <_printf_i>
 800ee02:	e7e4      	b.n	800edce <_vfiprintf_r+0x1e6>
 800ee04:	0800f636 	.word	0x0800f636
 800ee08:	0800f63c 	.word	0x0800f63c
 800ee0c:	0800f640 	.word	0x0800f640
 800ee10:	00000000 	.word	0x00000000
 800ee14:	0800ebc5 	.word	0x0800ebc5

0800ee18 <_printf_common>:
 800ee18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee1c:	4616      	mov	r6, r2
 800ee1e:	4698      	mov	r8, r3
 800ee20:	688a      	ldr	r2, [r1, #8]
 800ee22:	690b      	ldr	r3, [r1, #16]
 800ee24:	4607      	mov	r7, r0
 800ee26:	4293      	cmp	r3, r2
 800ee28:	bfb8      	it	lt
 800ee2a:	4613      	movlt	r3, r2
 800ee2c:	6033      	str	r3, [r6, #0]
 800ee2e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee32:	460c      	mov	r4, r1
 800ee34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee38:	b10a      	cbz	r2, 800ee3e <_printf_common+0x26>
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	6033      	str	r3, [r6, #0]
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	0699      	lsls	r1, r3, #26
 800ee42:	bf42      	ittt	mi
 800ee44:	6833      	ldrmi	r3, [r6, #0]
 800ee46:	3302      	addmi	r3, #2
 800ee48:	6033      	strmi	r3, [r6, #0]
 800ee4a:	6825      	ldr	r5, [r4, #0]
 800ee4c:	f015 0506 	ands.w	r5, r5, #6
 800ee50:	d106      	bne.n	800ee60 <_printf_common+0x48>
 800ee52:	f104 0a19 	add.w	sl, r4, #25
 800ee56:	68e3      	ldr	r3, [r4, #12]
 800ee58:	6832      	ldr	r2, [r6, #0]
 800ee5a:	1a9b      	subs	r3, r3, r2
 800ee5c:	42ab      	cmp	r3, r5
 800ee5e:	dc2b      	bgt.n	800eeb8 <_printf_common+0xa0>
 800ee60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee64:	6822      	ldr	r2, [r4, #0]
 800ee66:	3b00      	subs	r3, #0
 800ee68:	bf18      	it	ne
 800ee6a:	2301      	movne	r3, #1
 800ee6c:	0692      	lsls	r2, r2, #26
 800ee6e:	d430      	bmi.n	800eed2 <_printf_common+0xba>
 800ee70:	4641      	mov	r1, r8
 800ee72:	4638      	mov	r0, r7
 800ee74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ee78:	47c8      	blx	r9
 800ee7a:	3001      	adds	r0, #1
 800ee7c:	d023      	beq.n	800eec6 <_printf_common+0xae>
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	6922      	ldr	r2, [r4, #16]
 800ee82:	f003 0306 	and.w	r3, r3, #6
 800ee86:	2b04      	cmp	r3, #4
 800ee88:	bf14      	ite	ne
 800ee8a:	2500      	movne	r5, #0
 800ee8c:	6833      	ldreq	r3, [r6, #0]
 800ee8e:	f04f 0600 	mov.w	r6, #0
 800ee92:	bf08      	it	eq
 800ee94:	68e5      	ldreq	r5, [r4, #12]
 800ee96:	f104 041a 	add.w	r4, r4, #26
 800ee9a:	bf08      	it	eq
 800ee9c:	1aed      	subeq	r5, r5, r3
 800ee9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800eea2:	bf08      	it	eq
 800eea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	bfc4      	itt	gt
 800eeac:	1a9b      	subgt	r3, r3, r2
 800eeae:	18ed      	addgt	r5, r5, r3
 800eeb0:	42b5      	cmp	r5, r6
 800eeb2:	d11a      	bne.n	800eeea <_printf_common+0xd2>
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	e008      	b.n	800eeca <_printf_common+0xb2>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	4652      	mov	r2, sl
 800eebc:	4641      	mov	r1, r8
 800eebe:	4638      	mov	r0, r7
 800eec0:	47c8      	blx	r9
 800eec2:	3001      	adds	r0, #1
 800eec4:	d103      	bne.n	800eece <_printf_common+0xb6>
 800eec6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eece:	3501      	adds	r5, #1
 800eed0:	e7c1      	b.n	800ee56 <_printf_common+0x3e>
 800eed2:	2030      	movs	r0, #48	@ 0x30
 800eed4:	18e1      	adds	r1, r4, r3
 800eed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eeda:	1c5a      	adds	r2, r3, #1
 800eedc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eee0:	4422      	add	r2, r4
 800eee2:	3302      	adds	r3, #2
 800eee4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eee8:	e7c2      	b.n	800ee70 <_printf_common+0x58>
 800eeea:	2301      	movs	r3, #1
 800eeec:	4622      	mov	r2, r4
 800eeee:	4641      	mov	r1, r8
 800eef0:	4638      	mov	r0, r7
 800eef2:	47c8      	blx	r9
 800eef4:	3001      	adds	r0, #1
 800eef6:	d0e6      	beq.n	800eec6 <_printf_common+0xae>
 800eef8:	3601      	adds	r6, #1
 800eefa:	e7d9      	b.n	800eeb0 <_printf_common+0x98>

0800eefc <_printf_i>:
 800eefc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef00:	7e0f      	ldrb	r7, [r1, #24]
 800ef02:	4691      	mov	r9, r2
 800ef04:	2f78      	cmp	r7, #120	@ 0x78
 800ef06:	4680      	mov	r8, r0
 800ef08:	460c      	mov	r4, r1
 800ef0a:	469a      	mov	sl, r3
 800ef0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef12:	d807      	bhi.n	800ef24 <_printf_i+0x28>
 800ef14:	2f62      	cmp	r7, #98	@ 0x62
 800ef16:	d80a      	bhi.n	800ef2e <_printf_i+0x32>
 800ef18:	2f00      	cmp	r7, #0
 800ef1a:	f000 80d1 	beq.w	800f0c0 <_printf_i+0x1c4>
 800ef1e:	2f58      	cmp	r7, #88	@ 0x58
 800ef20:	f000 80b8 	beq.w	800f094 <_printf_i+0x198>
 800ef24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef2c:	e03a      	b.n	800efa4 <_printf_i+0xa8>
 800ef2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef32:	2b15      	cmp	r3, #21
 800ef34:	d8f6      	bhi.n	800ef24 <_printf_i+0x28>
 800ef36:	a101      	add	r1, pc, #4	@ (adr r1, 800ef3c <_printf_i+0x40>)
 800ef38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef3c:	0800ef95 	.word	0x0800ef95
 800ef40:	0800efa9 	.word	0x0800efa9
 800ef44:	0800ef25 	.word	0x0800ef25
 800ef48:	0800ef25 	.word	0x0800ef25
 800ef4c:	0800ef25 	.word	0x0800ef25
 800ef50:	0800ef25 	.word	0x0800ef25
 800ef54:	0800efa9 	.word	0x0800efa9
 800ef58:	0800ef25 	.word	0x0800ef25
 800ef5c:	0800ef25 	.word	0x0800ef25
 800ef60:	0800ef25 	.word	0x0800ef25
 800ef64:	0800ef25 	.word	0x0800ef25
 800ef68:	0800f0a7 	.word	0x0800f0a7
 800ef6c:	0800efd3 	.word	0x0800efd3
 800ef70:	0800f061 	.word	0x0800f061
 800ef74:	0800ef25 	.word	0x0800ef25
 800ef78:	0800ef25 	.word	0x0800ef25
 800ef7c:	0800f0c9 	.word	0x0800f0c9
 800ef80:	0800ef25 	.word	0x0800ef25
 800ef84:	0800efd3 	.word	0x0800efd3
 800ef88:	0800ef25 	.word	0x0800ef25
 800ef8c:	0800ef25 	.word	0x0800ef25
 800ef90:	0800f069 	.word	0x0800f069
 800ef94:	6833      	ldr	r3, [r6, #0]
 800ef96:	1d1a      	adds	r2, r3, #4
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6032      	str	r2, [r6, #0]
 800ef9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efa4:	2301      	movs	r3, #1
 800efa6:	e09c      	b.n	800f0e2 <_printf_i+0x1e6>
 800efa8:	6833      	ldr	r3, [r6, #0]
 800efaa:	6820      	ldr	r0, [r4, #0]
 800efac:	1d19      	adds	r1, r3, #4
 800efae:	6031      	str	r1, [r6, #0]
 800efb0:	0606      	lsls	r6, r0, #24
 800efb2:	d501      	bpl.n	800efb8 <_printf_i+0xbc>
 800efb4:	681d      	ldr	r5, [r3, #0]
 800efb6:	e003      	b.n	800efc0 <_printf_i+0xc4>
 800efb8:	0645      	lsls	r5, r0, #25
 800efba:	d5fb      	bpl.n	800efb4 <_printf_i+0xb8>
 800efbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800efc0:	2d00      	cmp	r5, #0
 800efc2:	da03      	bge.n	800efcc <_printf_i+0xd0>
 800efc4:	232d      	movs	r3, #45	@ 0x2d
 800efc6:	426d      	negs	r5, r5
 800efc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efcc:	230a      	movs	r3, #10
 800efce:	4858      	ldr	r0, [pc, #352]	@ (800f130 <_printf_i+0x234>)
 800efd0:	e011      	b.n	800eff6 <_printf_i+0xfa>
 800efd2:	6821      	ldr	r1, [r4, #0]
 800efd4:	6833      	ldr	r3, [r6, #0]
 800efd6:	0608      	lsls	r0, r1, #24
 800efd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800efdc:	d402      	bmi.n	800efe4 <_printf_i+0xe8>
 800efde:	0649      	lsls	r1, r1, #25
 800efe0:	bf48      	it	mi
 800efe2:	b2ad      	uxthmi	r5, r5
 800efe4:	2f6f      	cmp	r7, #111	@ 0x6f
 800efe6:	6033      	str	r3, [r6, #0]
 800efe8:	bf14      	ite	ne
 800efea:	230a      	movne	r3, #10
 800efec:	2308      	moveq	r3, #8
 800efee:	4850      	ldr	r0, [pc, #320]	@ (800f130 <_printf_i+0x234>)
 800eff0:	2100      	movs	r1, #0
 800eff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eff6:	6866      	ldr	r6, [r4, #4]
 800eff8:	2e00      	cmp	r6, #0
 800effa:	60a6      	str	r6, [r4, #8]
 800effc:	db05      	blt.n	800f00a <_printf_i+0x10e>
 800effe:	6821      	ldr	r1, [r4, #0]
 800f000:	432e      	orrs	r6, r5
 800f002:	f021 0104 	bic.w	r1, r1, #4
 800f006:	6021      	str	r1, [r4, #0]
 800f008:	d04b      	beq.n	800f0a2 <_printf_i+0x1a6>
 800f00a:	4616      	mov	r6, r2
 800f00c:	fbb5 f1f3 	udiv	r1, r5, r3
 800f010:	fb03 5711 	mls	r7, r3, r1, r5
 800f014:	5dc7      	ldrb	r7, [r0, r7]
 800f016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f01a:	462f      	mov	r7, r5
 800f01c:	42bb      	cmp	r3, r7
 800f01e:	460d      	mov	r5, r1
 800f020:	d9f4      	bls.n	800f00c <_printf_i+0x110>
 800f022:	2b08      	cmp	r3, #8
 800f024:	d10b      	bne.n	800f03e <_printf_i+0x142>
 800f026:	6823      	ldr	r3, [r4, #0]
 800f028:	07df      	lsls	r7, r3, #31
 800f02a:	d508      	bpl.n	800f03e <_printf_i+0x142>
 800f02c:	6923      	ldr	r3, [r4, #16]
 800f02e:	6861      	ldr	r1, [r4, #4]
 800f030:	4299      	cmp	r1, r3
 800f032:	bfde      	ittt	le
 800f034:	2330      	movle	r3, #48	@ 0x30
 800f036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f03a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f03e:	1b92      	subs	r2, r2, r6
 800f040:	6122      	str	r2, [r4, #16]
 800f042:	464b      	mov	r3, r9
 800f044:	4621      	mov	r1, r4
 800f046:	4640      	mov	r0, r8
 800f048:	f8cd a000 	str.w	sl, [sp]
 800f04c:	aa03      	add	r2, sp, #12
 800f04e:	f7ff fee3 	bl	800ee18 <_printf_common>
 800f052:	3001      	adds	r0, #1
 800f054:	d14a      	bne.n	800f0ec <_printf_i+0x1f0>
 800f056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f05a:	b004      	add	sp, #16
 800f05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	f043 0320 	orr.w	r3, r3, #32
 800f066:	6023      	str	r3, [r4, #0]
 800f068:	2778      	movs	r7, #120	@ 0x78
 800f06a:	4832      	ldr	r0, [pc, #200]	@ (800f134 <_printf_i+0x238>)
 800f06c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	6831      	ldr	r1, [r6, #0]
 800f074:	061f      	lsls	r7, r3, #24
 800f076:	f851 5b04 	ldr.w	r5, [r1], #4
 800f07a:	d402      	bmi.n	800f082 <_printf_i+0x186>
 800f07c:	065f      	lsls	r7, r3, #25
 800f07e:	bf48      	it	mi
 800f080:	b2ad      	uxthmi	r5, r5
 800f082:	6031      	str	r1, [r6, #0]
 800f084:	07d9      	lsls	r1, r3, #31
 800f086:	bf44      	itt	mi
 800f088:	f043 0320 	orrmi.w	r3, r3, #32
 800f08c:	6023      	strmi	r3, [r4, #0]
 800f08e:	b11d      	cbz	r5, 800f098 <_printf_i+0x19c>
 800f090:	2310      	movs	r3, #16
 800f092:	e7ad      	b.n	800eff0 <_printf_i+0xf4>
 800f094:	4826      	ldr	r0, [pc, #152]	@ (800f130 <_printf_i+0x234>)
 800f096:	e7e9      	b.n	800f06c <_printf_i+0x170>
 800f098:	6823      	ldr	r3, [r4, #0]
 800f09a:	f023 0320 	bic.w	r3, r3, #32
 800f09e:	6023      	str	r3, [r4, #0]
 800f0a0:	e7f6      	b.n	800f090 <_printf_i+0x194>
 800f0a2:	4616      	mov	r6, r2
 800f0a4:	e7bd      	b.n	800f022 <_printf_i+0x126>
 800f0a6:	6833      	ldr	r3, [r6, #0]
 800f0a8:	6825      	ldr	r5, [r4, #0]
 800f0aa:	1d18      	adds	r0, r3, #4
 800f0ac:	6961      	ldr	r1, [r4, #20]
 800f0ae:	6030      	str	r0, [r6, #0]
 800f0b0:	062e      	lsls	r6, r5, #24
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	d501      	bpl.n	800f0ba <_printf_i+0x1be>
 800f0b6:	6019      	str	r1, [r3, #0]
 800f0b8:	e002      	b.n	800f0c0 <_printf_i+0x1c4>
 800f0ba:	0668      	lsls	r0, r5, #25
 800f0bc:	d5fb      	bpl.n	800f0b6 <_printf_i+0x1ba>
 800f0be:	8019      	strh	r1, [r3, #0]
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	4616      	mov	r6, r2
 800f0c4:	6123      	str	r3, [r4, #16]
 800f0c6:	e7bc      	b.n	800f042 <_printf_i+0x146>
 800f0c8:	6833      	ldr	r3, [r6, #0]
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	1d1a      	adds	r2, r3, #4
 800f0ce:	6032      	str	r2, [r6, #0]
 800f0d0:	681e      	ldr	r6, [r3, #0]
 800f0d2:	6862      	ldr	r2, [r4, #4]
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	f000 f907 	bl	800f2e8 <memchr>
 800f0da:	b108      	cbz	r0, 800f0e0 <_printf_i+0x1e4>
 800f0dc:	1b80      	subs	r0, r0, r6
 800f0de:	6060      	str	r0, [r4, #4]
 800f0e0:	6863      	ldr	r3, [r4, #4]
 800f0e2:	6123      	str	r3, [r4, #16]
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0ea:	e7aa      	b.n	800f042 <_printf_i+0x146>
 800f0ec:	4632      	mov	r2, r6
 800f0ee:	4649      	mov	r1, r9
 800f0f0:	4640      	mov	r0, r8
 800f0f2:	6923      	ldr	r3, [r4, #16]
 800f0f4:	47d0      	blx	sl
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	d0ad      	beq.n	800f056 <_printf_i+0x15a>
 800f0fa:	6823      	ldr	r3, [r4, #0]
 800f0fc:	079b      	lsls	r3, r3, #30
 800f0fe:	d413      	bmi.n	800f128 <_printf_i+0x22c>
 800f100:	68e0      	ldr	r0, [r4, #12]
 800f102:	9b03      	ldr	r3, [sp, #12]
 800f104:	4298      	cmp	r0, r3
 800f106:	bfb8      	it	lt
 800f108:	4618      	movlt	r0, r3
 800f10a:	e7a6      	b.n	800f05a <_printf_i+0x15e>
 800f10c:	2301      	movs	r3, #1
 800f10e:	4632      	mov	r2, r6
 800f110:	4649      	mov	r1, r9
 800f112:	4640      	mov	r0, r8
 800f114:	47d0      	blx	sl
 800f116:	3001      	adds	r0, #1
 800f118:	d09d      	beq.n	800f056 <_printf_i+0x15a>
 800f11a:	3501      	adds	r5, #1
 800f11c:	68e3      	ldr	r3, [r4, #12]
 800f11e:	9903      	ldr	r1, [sp, #12]
 800f120:	1a5b      	subs	r3, r3, r1
 800f122:	42ab      	cmp	r3, r5
 800f124:	dcf2      	bgt.n	800f10c <_printf_i+0x210>
 800f126:	e7eb      	b.n	800f100 <_printf_i+0x204>
 800f128:	2500      	movs	r5, #0
 800f12a:	f104 0619 	add.w	r6, r4, #25
 800f12e:	e7f5      	b.n	800f11c <_printf_i+0x220>
 800f130:	0800f647 	.word	0x0800f647
 800f134:	0800f658 	.word	0x0800f658

0800f138 <__swbuf_r>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	460e      	mov	r6, r1
 800f13c:	4614      	mov	r4, r2
 800f13e:	4605      	mov	r5, r0
 800f140:	b118      	cbz	r0, 800f14a <__swbuf_r+0x12>
 800f142:	6a03      	ldr	r3, [r0, #32]
 800f144:	b90b      	cbnz	r3, 800f14a <__swbuf_r+0x12>
 800f146:	f7fd fa47 	bl	800c5d8 <__sinit>
 800f14a:	69a3      	ldr	r3, [r4, #24]
 800f14c:	60a3      	str	r3, [r4, #8]
 800f14e:	89a3      	ldrh	r3, [r4, #12]
 800f150:	071a      	lsls	r2, r3, #28
 800f152:	d501      	bpl.n	800f158 <__swbuf_r+0x20>
 800f154:	6923      	ldr	r3, [r4, #16]
 800f156:	b943      	cbnz	r3, 800f16a <__swbuf_r+0x32>
 800f158:	4621      	mov	r1, r4
 800f15a:	4628      	mov	r0, r5
 800f15c:	f000 f82a 	bl	800f1b4 <__swsetup_r>
 800f160:	b118      	cbz	r0, 800f16a <__swbuf_r+0x32>
 800f162:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f166:	4638      	mov	r0, r7
 800f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	6922      	ldr	r2, [r4, #16]
 800f16e:	b2f6      	uxtb	r6, r6
 800f170:	1a98      	subs	r0, r3, r2
 800f172:	6963      	ldr	r3, [r4, #20]
 800f174:	4637      	mov	r7, r6
 800f176:	4283      	cmp	r3, r0
 800f178:	dc05      	bgt.n	800f186 <__swbuf_r+0x4e>
 800f17a:	4621      	mov	r1, r4
 800f17c:	4628      	mov	r0, r5
 800f17e:	f7fe fe1b 	bl	800ddb8 <_fflush_r>
 800f182:	2800      	cmp	r0, #0
 800f184:	d1ed      	bne.n	800f162 <__swbuf_r+0x2a>
 800f186:	68a3      	ldr	r3, [r4, #8]
 800f188:	3b01      	subs	r3, #1
 800f18a:	60a3      	str	r3, [r4, #8]
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	1c5a      	adds	r2, r3, #1
 800f190:	6022      	str	r2, [r4, #0]
 800f192:	701e      	strb	r6, [r3, #0]
 800f194:	6962      	ldr	r2, [r4, #20]
 800f196:	1c43      	adds	r3, r0, #1
 800f198:	429a      	cmp	r2, r3
 800f19a:	d004      	beq.n	800f1a6 <__swbuf_r+0x6e>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	07db      	lsls	r3, r3, #31
 800f1a0:	d5e1      	bpl.n	800f166 <__swbuf_r+0x2e>
 800f1a2:	2e0a      	cmp	r6, #10
 800f1a4:	d1df      	bne.n	800f166 <__swbuf_r+0x2e>
 800f1a6:	4621      	mov	r1, r4
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	f7fe fe05 	bl	800ddb8 <_fflush_r>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d0d9      	beq.n	800f166 <__swbuf_r+0x2e>
 800f1b2:	e7d6      	b.n	800f162 <__swbuf_r+0x2a>

0800f1b4 <__swsetup_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4b29      	ldr	r3, [pc, #164]	@ (800f25c <__swsetup_r+0xa8>)
 800f1b8:	4605      	mov	r5, r0
 800f1ba:	6818      	ldr	r0, [r3, #0]
 800f1bc:	460c      	mov	r4, r1
 800f1be:	b118      	cbz	r0, 800f1c8 <__swsetup_r+0x14>
 800f1c0:	6a03      	ldr	r3, [r0, #32]
 800f1c2:	b90b      	cbnz	r3, 800f1c8 <__swsetup_r+0x14>
 800f1c4:	f7fd fa08 	bl	800c5d8 <__sinit>
 800f1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1cc:	0719      	lsls	r1, r3, #28
 800f1ce:	d422      	bmi.n	800f216 <__swsetup_r+0x62>
 800f1d0:	06da      	lsls	r2, r3, #27
 800f1d2:	d407      	bmi.n	800f1e4 <__swsetup_r+0x30>
 800f1d4:	2209      	movs	r2, #9
 800f1d6:	602a      	str	r2, [r5, #0]
 800f1d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1e0:	81a3      	strh	r3, [r4, #12]
 800f1e2:	e033      	b.n	800f24c <__swsetup_r+0x98>
 800f1e4:	0758      	lsls	r0, r3, #29
 800f1e6:	d512      	bpl.n	800f20e <__swsetup_r+0x5a>
 800f1e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1ea:	b141      	cbz	r1, 800f1fe <__swsetup_r+0x4a>
 800f1ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1f0:	4299      	cmp	r1, r3
 800f1f2:	d002      	beq.n	800f1fa <__swsetup_r+0x46>
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f7fd fb0b 	bl	800c810 <_free_r>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1fe:	89a3      	ldrh	r3, [r4, #12]
 800f200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f204:	81a3      	strh	r3, [r4, #12]
 800f206:	2300      	movs	r3, #0
 800f208:	6063      	str	r3, [r4, #4]
 800f20a:	6923      	ldr	r3, [r4, #16]
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	89a3      	ldrh	r3, [r4, #12]
 800f210:	f043 0308 	orr.w	r3, r3, #8
 800f214:	81a3      	strh	r3, [r4, #12]
 800f216:	6923      	ldr	r3, [r4, #16]
 800f218:	b94b      	cbnz	r3, 800f22e <__swsetup_r+0x7a>
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f224:	d003      	beq.n	800f22e <__swsetup_r+0x7a>
 800f226:	4621      	mov	r1, r4
 800f228:	4628      	mov	r0, r5
 800f22a:	f000 f890 	bl	800f34e <__smakebuf_r>
 800f22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f232:	f013 0201 	ands.w	r2, r3, #1
 800f236:	d00a      	beq.n	800f24e <__swsetup_r+0x9a>
 800f238:	2200      	movs	r2, #0
 800f23a:	60a2      	str	r2, [r4, #8]
 800f23c:	6962      	ldr	r2, [r4, #20]
 800f23e:	4252      	negs	r2, r2
 800f240:	61a2      	str	r2, [r4, #24]
 800f242:	6922      	ldr	r2, [r4, #16]
 800f244:	b942      	cbnz	r2, 800f258 <__swsetup_r+0xa4>
 800f246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f24a:	d1c5      	bne.n	800f1d8 <__swsetup_r+0x24>
 800f24c:	bd38      	pop	{r3, r4, r5, pc}
 800f24e:	0799      	lsls	r1, r3, #30
 800f250:	bf58      	it	pl
 800f252:	6962      	ldrpl	r2, [r4, #20]
 800f254:	60a2      	str	r2, [r4, #8]
 800f256:	e7f4      	b.n	800f242 <__swsetup_r+0x8e>
 800f258:	2000      	movs	r0, #0
 800f25a:	e7f7      	b.n	800f24c <__swsetup_r+0x98>
 800f25c:	200002f4 	.word	0x200002f4

0800f260 <_raise_r>:
 800f260:	291f      	cmp	r1, #31
 800f262:	b538      	push	{r3, r4, r5, lr}
 800f264:	4605      	mov	r5, r0
 800f266:	460c      	mov	r4, r1
 800f268:	d904      	bls.n	800f274 <_raise_r+0x14>
 800f26a:	2316      	movs	r3, #22
 800f26c:	6003      	str	r3, [r0, #0]
 800f26e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f272:	bd38      	pop	{r3, r4, r5, pc}
 800f274:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f276:	b112      	cbz	r2, 800f27e <_raise_r+0x1e>
 800f278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f27c:	b94b      	cbnz	r3, 800f292 <_raise_r+0x32>
 800f27e:	4628      	mov	r0, r5
 800f280:	f000 f830 	bl	800f2e4 <_getpid_r>
 800f284:	4622      	mov	r2, r4
 800f286:	4601      	mov	r1, r0
 800f288:	4628      	mov	r0, r5
 800f28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f28e:	f000 b817 	b.w	800f2c0 <_kill_r>
 800f292:	2b01      	cmp	r3, #1
 800f294:	d00a      	beq.n	800f2ac <_raise_r+0x4c>
 800f296:	1c59      	adds	r1, r3, #1
 800f298:	d103      	bne.n	800f2a2 <_raise_r+0x42>
 800f29a:	2316      	movs	r3, #22
 800f29c:	6003      	str	r3, [r0, #0]
 800f29e:	2001      	movs	r0, #1
 800f2a0:	e7e7      	b.n	800f272 <_raise_r+0x12>
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f2aa:	4798      	blx	r3
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	e7e0      	b.n	800f272 <_raise_r+0x12>

0800f2b0 <raise>:
 800f2b0:	4b02      	ldr	r3, [pc, #8]	@ (800f2bc <raise+0xc>)
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	6818      	ldr	r0, [r3, #0]
 800f2b6:	f7ff bfd3 	b.w	800f260 <_raise_r>
 800f2ba:	bf00      	nop
 800f2bc:	200002f4 	.word	0x200002f4

0800f2c0 <_kill_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	4d06      	ldr	r5, [pc, #24]	@ (800f2e0 <_kill_r+0x20>)
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	602b      	str	r3, [r5, #0]
 800f2ce:	f7f2 ffe4 	bl	800229a <_kill>
 800f2d2:	1c43      	adds	r3, r0, #1
 800f2d4:	d102      	bne.n	800f2dc <_kill_r+0x1c>
 800f2d6:	682b      	ldr	r3, [r5, #0]
 800f2d8:	b103      	cbz	r3, 800f2dc <_kill_r+0x1c>
 800f2da:	6023      	str	r3, [r4, #0]
 800f2dc:	bd38      	pop	{r3, r4, r5, pc}
 800f2de:	bf00      	nop
 800f2e0:	20001884 	.word	0x20001884

0800f2e4 <_getpid_r>:
 800f2e4:	f7f2 bfd2 	b.w	800228c <_getpid>

0800f2e8 <memchr>:
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	b2c9      	uxtb	r1, r1
 800f2ee:	4402      	add	r2, r0
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	d101      	bne.n	800f2fa <memchr+0x12>
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	e003      	b.n	800f302 <memchr+0x1a>
 800f2fa:	7804      	ldrb	r4, [r0, #0]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	428c      	cmp	r4, r1
 800f300:	d1f6      	bne.n	800f2f0 <memchr+0x8>
 800f302:	bd10      	pop	{r4, pc}

0800f304 <__swhatbuf_r>:
 800f304:	b570      	push	{r4, r5, r6, lr}
 800f306:	460c      	mov	r4, r1
 800f308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f30c:	4615      	mov	r5, r2
 800f30e:	2900      	cmp	r1, #0
 800f310:	461e      	mov	r6, r3
 800f312:	b096      	sub	sp, #88	@ 0x58
 800f314:	da0c      	bge.n	800f330 <__swhatbuf_r+0x2c>
 800f316:	89a3      	ldrh	r3, [r4, #12]
 800f318:	2100      	movs	r1, #0
 800f31a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f31e:	bf14      	ite	ne
 800f320:	2340      	movne	r3, #64	@ 0x40
 800f322:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f326:	2000      	movs	r0, #0
 800f328:	6031      	str	r1, [r6, #0]
 800f32a:	602b      	str	r3, [r5, #0]
 800f32c:	b016      	add	sp, #88	@ 0x58
 800f32e:	bd70      	pop	{r4, r5, r6, pc}
 800f330:	466a      	mov	r2, sp
 800f332:	f000 f849 	bl	800f3c8 <_fstat_r>
 800f336:	2800      	cmp	r0, #0
 800f338:	dbed      	blt.n	800f316 <__swhatbuf_r+0x12>
 800f33a:	9901      	ldr	r1, [sp, #4]
 800f33c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f340:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f344:	4259      	negs	r1, r3
 800f346:	4159      	adcs	r1, r3
 800f348:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f34c:	e7eb      	b.n	800f326 <__swhatbuf_r+0x22>

0800f34e <__smakebuf_r>:
 800f34e:	898b      	ldrh	r3, [r1, #12]
 800f350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f352:	079d      	lsls	r5, r3, #30
 800f354:	4606      	mov	r6, r0
 800f356:	460c      	mov	r4, r1
 800f358:	d507      	bpl.n	800f36a <__smakebuf_r+0x1c>
 800f35a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f35e:	6023      	str	r3, [r4, #0]
 800f360:	6123      	str	r3, [r4, #16]
 800f362:	2301      	movs	r3, #1
 800f364:	6163      	str	r3, [r4, #20]
 800f366:	b003      	add	sp, #12
 800f368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f36a:	466a      	mov	r2, sp
 800f36c:	ab01      	add	r3, sp, #4
 800f36e:	f7ff ffc9 	bl	800f304 <__swhatbuf_r>
 800f372:	9f00      	ldr	r7, [sp, #0]
 800f374:	4605      	mov	r5, r0
 800f376:	4639      	mov	r1, r7
 800f378:	4630      	mov	r0, r6
 800f37a:	f7fd fded 	bl	800cf58 <_malloc_r>
 800f37e:	b948      	cbnz	r0, 800f394 <__smakebuf_r+0x46>
 800f380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f384:	059a      	lsls	r2, r3, #22
 800f386:	d4ee      	bmi.n	800f366 <__smakebuf_r+0x18>
 800f388:	f023 0303 	bic.w	r3, r3, #3
 800f38c:	f043 0302 	orr.w	r3, r3, #2
 800f390:	81a3      	strh	r3, [r4, #12]
 800f392:	e7e2      	b.n	800f35a <__smakebuf_r+0xc>
 800f394:	89a3      	ldrh	r3, [r4, #12]
 800f396:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f39e:	81a3      	strh	r3, [r4, #12]
 800f3a0:	9b01      	ldr	r3, [sp, #4]
 800f3a2:	6020      	str	r0, [r4, #0]
 800f3a4:	b15b      	cbz	r3, 800f3be <__smakebuf_r+0x70>
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3ac:	f000 f81e 	bl	800f3ec <_isatty_r>
 800f3b0:	b128      	cbz	r0, 800f3be <__smakebuf_r+0x70>
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f023 0303 	bic.w	r3, r3, #3
 800f3b8:	f043 0301 	orr.w	r3, r3, #1
 800f3bc:	81a3      	strh	r3, [r4, #12]
 800f3be:	89a3      	ldrh	r3, [r4, #12]
 800f3c0:	431d      	orrs	r5, r3
 800f3c2:	81a5      	strh	r5, [r4, #12]
 800f3c4:	e7cf      	b.n	800f366 <__smakebuf_r+0x18>
	...

0800f3c8 <_fstat_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	4d06      	ldr	r5, [pc, #24]	@ (800f3e8 <_fstat_r+0x20>)
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4608      	mov	r0, r1
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	602b      	str	r3, [r5, #0]
 800f3d6:	f7f2 ffbf 	bl	8002358 <_fstat>
 800f3da:	1c43      	adds	r3, r0, #1
 800f3dc:	d102      	bne.n	800f3e4 <_fstat_r+0x1c>
 800f3de:	682b      	ldr	r3, [r5, #0]
 800f3e0:	b103      	cbz	r3, 800f3e4 <_fstat_r+0x1c>
 800f3e2:	6023      	str	r3, [r4, #0]
 800f3e4:	bd38      	pop	{r3, r4, r5, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20001884 	.word	0x20001884

0800f3ec <_isatty_r>:
 800f3ec:	b538      	push	{r3, r4, r5, lr}
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	4d05      	ldr	r5, [pc, #20]	@ (800f408 <_isatty_r+0x1c>)
 800f3f2:	4604      	mov	r4, r0
 800f3f4:	4608      	mov	r0, r1
 800f3f6:	602b      	str	r3, [r5, #0]
 800f3f8:	f7f2 ffbd 	bl	8002376 <_isatty>
 800f3fc:	1c43      	adds	r3, r0, #1
 800f3fe:	d102      	bne.n	800f406 <_isatty_r+0x1a>
 800f400:	682b      	ldr	r3, [r5, #0]
 800f402:	b103      	cbz	r3, 800f406 <_isatty_r+0x1a>
 800f404:	6023      	str	r3, [r4, #0]
 800f406:	bd38      	pop	{r3, r4, r5, pc}
 800f408:	20001884 	.word	0x20001884

0800f40c <_init>:
 800f40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40e:	bf00      	nop
 800f410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f412:	bc08      	pop	{r3}
 800f414:	469e      	mov	lr, r3
 800f416:	4770      	bx	lr

0800f418 <_fini>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	bf00      	nop
 800f41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f41e:	bc08      	pop	{r3}
 800f420:	469e      	mov	lr, r3
 800f422:	4770      	bx	lr
